
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c5d0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a3c  0801c8a0  0801c8a0  0002c8a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d2dc  0801d2dc  0002d2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d2e4  0801d2e4  0002d2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801d2e8  0801d2e8  0002d2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d4  24000000  0801d2ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000028a4  240002d4  0801d5c0  000302d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24002b78  0801d5c0  00032b78  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a53a  00000000  00000000  00030302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006336  00000000  00000000  0006a83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002db0  00000000  00000000  00070b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002b28  00000000  00000000  00073928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000ba48  00000000  00000000  00076450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ddb8  00000000  00000000  00081e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017fae8  00000000  00000000  000bfc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023f738  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000da98  00000000  00000000  0023f788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d4 	.word	0x240002d4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c888 	.word	0x0801c888

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d8 	.word	0x240002d8
 800030c:	0801c888 	.word	0x0801c888

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	f5ad 5d2a 	sub.w	sp, sp, #10880	; 0x2a80
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab6:	f002 f8fb 	bl	8002cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aba:	f000 f8a5 	bl	8000c08 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000abe:	f000 f91f 	bl	8000d00 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac2:	f000 fecd 	bl	8001860 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ac6:	f000 fe6b 	bl	80017a0 <MX_DMA_Init>
  MX_SPI3_Init();
 8000aca:	f000 fba1 	bl	8001210 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8000ace:	f000 fa31 	bl	8000f34 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8000ad2:	f000 fe19 	bl	8001708 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000ad6:	f000 f947 	bl	8000d68 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000ada:	f000 fcab 	bl	8001434 <MX_TIM4_Init>
  MX_ADC3_Init();
 8000ade:	f000 f9bb 	bl	8000e58 <MX_ADC3_Init>
  MX_SPI2_Init();
 8000ae2:	f000 fb3f 	bl	8001164 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000ae6:	f000 fa89 	bl	8000ffc <MX_I2C2_Init>
  MX_TIM2_Init();
 8000aea:	f000 fbe7 	bl	80012bc <MX_TIM2_Init>
  MX_TIM5_Init();
 8000aee:	f000 fd1d 	bl	800152c <MX_TIM5_Init>
  MX_TIM3_Init();
 8000af2:	f000 fc3b 	bl	800136c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000af6:	f016 fe1b 	bl	8017730 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000afa:	f000 fadd 	bl	80010b8 <MX_SPI1_Init>
  MX_UART4_Init();
 8000afe:	f000 fdb7 	bl	8001670 <MX_UART4_Init>
  MX_FATFS_Init();
 8000b02:	f011 fc33 	bl	801236c <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8000b06:	f000 fab9 	bl	800107c <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8000b0a:	f000 fd69 	bl	80015e0 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000b0e:	f000 fd8b 	bl	8001628 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  FATFS FatFs;
  FIL Fil;
  FRESULT FR_Status;

  FR_Status = f_mount(&FatFs, SDPath, 1);
 8000b12:	4b35      	ldr	r3, [pc, #212]	; (8000be8 <main+0x13c>)
 8000b14:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8000b18:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000b1c:	443b      	add	r3, r7
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4932      	ldr	r1, [pc, #200]	; (8000bec <main+0x140>)
 8000b22:	4618      	mov	r0, r3
 8000b24:	f015 fff8 	bl	8016b18 <f_mount>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	f642 22a7 	movw	r2, #10919	; 0x2aa7
 8000b2e:	443a      	add	r2, r7
 8000b30:	7013      	strb	r3, [r2, #0]
  FR_Status = f_open(&Fil, "MyTextFile.txt", FA_OPEN_APPEND | FA_WRITE);
 8000b32:	4b2f      	ldr	r3, [pc, #188]	; (8000bf0 <main+0x144>)
 8000b34:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8000b38:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000b3c:	443b      	add	r3, r7
 8000b3e:	2232      	movs	r2, #50	; 0x32
 8000b40:	492c      	ldr	r1, [pc, #176]	; (8000bf4 <main+0x148>)
 8000b42:	4618      	mov	r0, r3
 8000b44:	f016 f82e 	bl	8016ba4 <f_open>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	f642 22a7 	movw	r2, #10919	; 0x2aa7
 8000b4e:	443a      	add	r2, r7
 8000b50:	7013      	strb	r3, [r2, #0]
  f_puts("meow2\n", &Fil);
 8000b52:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <main+0x144>)
 8000b54:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8000b58:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000b5c:	443b      	add	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4825      	ldr	r0, [pc, #148]	; (8000bf8 <main+0x14c>)
 8000b62:	f016 fc9e 	bl	80174a2 <f_puts>
  f_close(&Fil);
 8000b66:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <main+0x144>)
 8000b68:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8000b6c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000b70:	443b      	add	r3, r7
 8000b72:	4618      	mov	r0, r3
 8000b74:	f016 fbf4 	bl	8017360 <f_close>



  while(1){
	  HAL_ADC_Start(&hadc1); // start the adc
 8000b78:	4820      	ldr	r0, [pc, #128]	; (8000bfc <main+0x150>)
 8000b7a:	f002 fe59 	bl	8003830 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8000b7e:	2164      	movs	r1, #100	; 0x64
 8000b80:	481e      	ldr	r0, [pc, #120]	; (8000bfc <main+0x150>)
 8000b82:	f002 ff53 	bl	8003a2c <HAL_ADC_PollForConversion>

	  uint16_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 8000b86:	481d      	ldr	r0, [pc, #116]	; (8000bfc <main+0x150>)
 8000b88:	f003 f844 	bl	8003c14 <HAL_ADC_GetValue>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	f642 22a4 	movw	r2, #10916	; 0x2aa4
 8000b92:	443a      	add	r2, r7
 8000b94:	8013      	strh	r3, [r2, #0]

	  char debug_data[100];
	  sprintf(debug_data, "%d\n", adc_val);
 8000b96:	f642 23a4 	movw	r3, #10916	; 0x2aa4
 8000b9a:	443b      	add	r3, r7
 8000b9c:	881a      	ldrh	r2, [r3, #0]
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <main+0x154>)
 8000ba0:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8000ba4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000ba8:	443b      	add	r3, r7
 8000baa:	4916      	ldr	r1, [pc, #88]	; (8000c04 <main+0x158>)
 8000bac:	4618      	mov	r0, r3
 8000bae:	f018 f961 	bl	8018e74 <siprintf>
	  CDC_Transmit_HS(debug_data, strlen(debug_data));
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <main+0x154>)
 8000bb4:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8000bb8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000bbc:	443b      	add	r3, r7
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fba6 	bl	8000310 <strlen>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <main+0x154>)
 8000bc8:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8000bcc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000bd0:	443b      	add	r3, r7
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f016 fe6b 	bl	80178b0 <CDC_Transmit_HS>

	  HAL_ADC_Stop(&hadc1); // stop adc
 8000bda:	4808      	ldr	r0, [pc, #32]	; (8000bfc <main+0x150>)
 8000bdc:	f002 fef2 	bl	80039c4 <HAL_ADC_Stop>

	  HAL_Delay (1); // wait for 500ms
 8000be0:	2001      	movs	r0, #1
 8000be2:	f002 f8f7 	bl	8002dd4 <HAL_Delay>
  while(1){
 8000be6:	e7c7      	b.n	8000b78 <main+0xcc>
 8000be8:	ffffefc4 	.word	0xffffefc4
 8000bec:	24000d1c 	.word	0x24000d1c
 8000bf0:	ffffdf94 	.word	0xffffdf94
 8000bf4:	0801c8b4 	.word	0x0801c8b4
 8000bf8:	0801c8c4 	.word	0x0801c8c4
 8000bfc:	240002f0 	.word	0x240002f0
 8000c00:	ffffd558 	.word	0xffffd558
 8000c04:	0801c8cc 	.word	0x0801c8cc

08000c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b09c      	sub	sp, #112	; 0x70
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	224c      	movs	r2, #76	; 0x4c
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f017 fad6 	bl	80181c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2220      	movs	r2, #32
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f017 fad0 	bl	80181c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f007 ffb9 	bl	8008ba0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b32      	ldr	r3, [pc, #200]	; (8000cfc <SystemClock_Config+0xf4>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c3a:	4a30      	ldr	r2, [pc, #192]	; (8000cfc <SystemClock_Config+0xf4>)
 8000c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c40:	6193      	str	r3, [r2, #24]
 8000c42:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <SystemClock_Config+0xf4>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c4e:	bf00      	nop
 8000c50:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <SystemClock_Config+0xf4>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c5c:	d1f8      	bne.n	8000c50 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000c5e:	2323      	movs	r3, #35	; 0x23
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000c6c:	2340      	movs	r3, #64	; 0x40
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c70:	2301      	movs	r3, #1
 8000c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c74:	2302      	movs	r3, #2
 8000c76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c7c:	2305      	movs	r3, #5
 8000c7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000c80:	2318      	movs	r3, #24
 8000c82:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c84:	2301      	movs	r3, #1
 8000c86:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c88:	2305      	movs	r3, #5
 8000c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c90:	230c      	movs	r3, #12
 8000c92:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f007 ffc7 	bl	8008c34 <HAL_RCC_OscConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000cac:	f000 ff4c 	bl	8001b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb0:	233f      	movs	r3, #63	; 0x3f
 8000cb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cc0:	2340      	movs	r3, #64	; 0x40
 8000cc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cc4:	2340      	movs	r3, #64	; 0x40
 8000cc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ccc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cce:	2340      	movs	r3, #64	; 0x40
 8000cd0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f008 fb86 	bl	80093e8 <HAL_RCC_ClockConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000ce2:	f000 ff31 	bl	8001b48 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000ce6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cea:	2100      	movs	r1, #0
 8000cec:	2000      	movs	r0, #0
 8000cee:	f008 fd31 	bl	8009754 <HAL_RCC_MCOConfig>
}
 8000cf2:	bf00      	nop
 8000cf4:	3770      	adds	r7, #112	; 0x70
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	58024800 	.word	0x58024800

08000d00 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0ae      	sub	sp, #184	; 0xb8
 8000d04:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	22b8      	movs	r2, #184	; 0xb8
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f017 fa5b 	bl	80181c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8000d12:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8000d16:	f04f 0300 	mov.w	r3, #0
 8000d1a:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8000d22:	230f      	movs	r3, #15
 8000d24:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000d26:	2304      	movs	r3, #4
 8000d28:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d32:	23c0      	movs	r3, #192	; 0xc0
 8000d34:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8000d3a:	f640 3386 	movw	r3, #2950	; 0xb86
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d44:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f008 ff40 	bl	8009bd4 <HAL_RCCEx_PeriphCLKConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8000d5a:	f000 fef5 	bl	8001b48 <Error_Handler>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	37b8      	adds	r7, #184	; 0xb8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	; 0x30
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2224      	movs	r2, #36	; 0x24
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f017 fa21 	bl	80181c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d86:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000d88:	4a31      	ldr	r2, [pc, #196]	; (8000e50 <MX_ADC1_Init+0xe8>)
 8000d8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000d8c:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000d8e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000d92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000d94:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d9a:	4b2c      	ldr	r3, [pc, #176]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da0:	4b2a      	ldr	r3, [pc, #168]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000da2:	2204      	movs	r2, #4
 8000da4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000da6:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dac:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000db2:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000db8:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000de6:	4819      	ldr	r0, [pc, #100]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000de8:	f002 fb1a 	bl	8003420 <HAL_ADC_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000df2:	f000 fea9 	bl	8001b48 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4812      	ldr	r0, [pc, #72]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000e02:	f003 fefb 	bl	8004bfc <HAL_ADCEx_MultiModeConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000e0c:	f000 fe9c 	bl	8001b48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e10:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <MX_ADC1_Init+0xec>)
 8000e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e14:	2306      	movs	r3, #6
 8000e16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e1c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e20:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e22:	2304      	movs	r3, #4
 8000e24:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e30:	463b      	mov	r3, r7
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000e36:	f002 fefb 	bl	8003c30 <HAL_ADC_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000e40:	f000 fe82 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	3730      	adds	r7, #48	; 0x30
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	240002f0 	.word	0x240002f0
 8000e50:	40022000 	.word	0x40022000
 8000e54:	3ac04000 	.word	0x3ac04000

08000e58 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2224      	movs	r2, #36	; 0x24
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f017 f9af 	bl	80181c8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000e6c:	4a2f      	ldr	r2, [pc, #188]	; (8000f2c <MX_ADC3_Init+0xd4>)
 8000e6e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e70:	4b2d      	ldr	r3, [pc, #180]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000e72:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000e76:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e78:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000e7a:	2208      	movs	r2, #8
 8000e7c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e84:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e8a:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e90:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e96:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000e9c:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ea2:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ede:	4812      	ldr	r0, [pc, #72]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000ee0:	f002 fa9e 	bl	8003420 <HAL_ADC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000eea:	f000 fe2d 	bl	8001b48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <MX_ADC3_Init+0xd8>)
 8000ef0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef2:	2306      	movs	r3, #6
 8000ef4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000efa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000efe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f00:	2304      	movs	r3, #4
 8000f02:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_ADC3_Init+0xd0>)
 8000f12:	f002 fe8d 	bl	8003c30 <HAL_ADC_ConfigChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000f1c:	f000 fe14 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3728      	adds	r7, #40	; 0x28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	24000360 	.word	0x24000360
 8000f2c:	58026000 	.word	0x58026000
 8000f30:	04300002 	.word	0x04300002

08000f34 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000f38:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	; (8000ff8 <MX_FDCAN3_Init+0xc4>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000f44:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000f56:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8000f5c:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f5e:	2210      	movs	r2, #16
 8000f60:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000f62:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000f6e:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f70:	2202      	movs	r2, #2
 8000f72:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000f74:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000f80:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000fb0:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000fdc:	2204      	movs	r2, #4
 8000fde:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <MX_FDCAN3_Init+0xc0>)
 8000fe2:	f005 fcbd 	bl	8006960 <HAL_FDCAN_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8000fec:	f000 fdac 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	240004c0 	.word	0x240004c0
 8000ff8:	4000d400 	.word	0x4000d400

08000ffc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_I2C2_Init+0x74>)
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <MX_I2C2_Init+0x78>)
 8001004:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x107075B0;
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_I2C2_Init+0x74>)
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <MX_I2C2_Init+0x7c>)
 800100a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MX_I2C2_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_I2C2_Init+0x74>)
 8001014:	2201      	movs	r2, #1
 8001016:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_I2C2_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_I2C2_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_I2C2_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_I2C2_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_I2C2_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001036:	480e      	ldr	r0, [pc, #56]	; (8001070 <MX_I2C2_Init+0x74>)
 8001038:	f006 f9b8 	bl	80073ac <HAL_I2C_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001042:	f000 fd81 	bl	8001b48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001046:	2100      	movs	r1, #0
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <MX_I2C2_Init+0x74>)
 800104a:	f006 fa59 	bl	8007500 <HAL_I2CEx_ConfigAnalogFilter>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001054:	f000 fd78 	bl	8001b48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001058:	2100      	movs	r1, #0
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_I2C2_Init+0x74>)
 800105c:	f006 fa9b 	bl	8007596 <HAL_I2CEx_ConfigDigitalFilter>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001066:	f000 fd6f 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	24000560 	.word	0x24000560
 8001074:	40005800 	.word	0x40005800
 8001078:	107075b0 	.word	0x107075b0

0800107c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <MX_SDMMC2_SD_Init+0x34>)
 8001082:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <MX_SDMMC2_SD_Init+0x38>)
 8001084:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <MX_SDMMC2_SD_Init+0x34>)
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <MX_SDMMC2_SD_Init+0x34>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <MX_SDMMC2_SD_Init+0x34>)
 8001094:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001098:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <MX_SDMMC2_SD_Init+0x34>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 8;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <MX_SDMMC2_SD_Init+0x34>)
 80010a2:	2208      	movs	r2, #8
 80010a4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	240005b4 	.word	0x240005b4
 80010b4:	48022400 	.word	0x48022400

080010b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <MX_SPI1_Init+0xa4>)
 80010be:	4a28      	ldr	r2, [pc, #160]	; (8001160 <MX_SPI1_Init+0xa8>)
 80010c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010c2:	4b26      	ldr	r3, [pc, #152]	; (800115c <MX_SPI1_Init+0xa4>)
 80010c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80010c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <MX_SPI1_Init+0xa4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <MX_SPI1_Init+0xa4>)
 80010d2:	2207      	movs	r2, #7
 80010d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_SPI1_Init+0xa4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_SPI1_Init+0xa4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010e2:	4b1e      	ldr	r3, [pc, #120]	; (800115c <MX_SPI1_Init+0xa4>)
 80010e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_SPI1_Init+0xa4>)
 80010ec:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80010f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_SPI1_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_SPI1_Init+0xa4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_SPI1_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_SPI1_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_SPI1_Init+0xa4>)
 800110c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001110:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_SPI1_Init+0xa4>)
 8001114:	2200      	movs	r2, #0
 8001116:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <MX_SPI1_Init+0xa4>)
 800111a:	2200      	movs	r2, #0
 800111c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_SPI1_Init+0xa4>)
 8001120:	2200      	movs	r2, #0
 8001122:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <MX_SPI1_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_SPI1_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <MX_SPI1_Init+0xa4>)
 8001132:	2200      	movs	r2, #0
 8001134:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_SPI1_Init+0xa4>)
 8001138:	2200      	movs	r2, #0
 800113a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <MX_SPI1_Init+0xa4>)
 800113e:	2200      	movs	r2, #0
 8001140:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_SPI1_Init+0xa4>)
 8001144:	2200      	movs	r2, #0
 8001146:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_SPI1_Init+0xa4>)
 800114a:	f00c fd8d 	bl	800dc68 <HAL_SPI_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001154:	f000 fcf8 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	24000630 	.word	0x24000630
 8001160:	40013000 	.word	0x40013000

08001164 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <MX_SPI2_Init+0xa4>)
 800116a:	4a28      	ldr	r2, [pc, #160]	; (800120c <MX_SPI2_Init+0xa8>)
 800116c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MX_SPI2_Init+0xa4>)
 8001170:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001174:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001176:	4b24      	ldr	r3, [pc, #144]	; (8001208 <MX_SPI2_Init+0xa4>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <MX_SPI2_Init+0xa4>)
 800117e:	2207      	movs	r2, #7
 8001180:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <MX_SPI2_Init+0xa4>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_SPI2_Init+0xa4>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800118e:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <MX_SPI2_Init+0xa4>)
 8001190:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001194:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_SPI2_Init+0xa4>)
 8001198:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800119c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_SPI2_Init+0xa4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_SPI2_Init+0xa4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_SPI2_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_SPI2_Init+0xa4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_SPI2_Init+0xa4>)
 80011b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_SPI2_Init+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_SPI2_Init+0xa4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_SPI2_Init+0xa4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <MX_SPI2_Init+0xa4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_SPI2_Init+0xa4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <MX_SPI2_Init+0xa4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_SPI2_Init+0xa4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <MX_SPI2_Init+0xa4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_SPI2_Init+0xa4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_SPI2_Init+0xa4>)
 80011f6:	f00c fd37 	bl	800dc68 <HAL_SPI_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001200:	f000 fca2 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	240006b8 	.word	0x240006b8
 800120c:	40003800 	.word	0x40003800

08001210 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <MX_SPI3_Init+0xa4>)
 8001216:	4a28      	ldr	r2, [pc, #160]	; (80012b8 <MX_SPI3_Init+0xa8>)
 8001218:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <MX_SPI3_Init+0xa4>)
 800121c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001220:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <MX_SPI3_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <MX_SPI3_Init+0xa4>)
 800122a:	2207      	movs	r2, #7
 800122c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <MX_SPI3_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <MX_SPI3_Init+0xa4>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800123a:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <MX_SPI3_Init+0xa4>)
 800123c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001240:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_SPI3_Init+0xa4>)
 8001244:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001248:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <MX_SPI3_Init+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_SPI3_Init+0xa4>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MX_SPI3_Init+0xa4>)
 8001258:	2200      	movs	r2, #0
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_SPI3_Init+0xa4>)
 800125e:	2200      	movs	r2, #0
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_SPI3_Init+0xa4>)
 8001264:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001268:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_SPI3_Init+0xa4>)
 800126c:	2200      	movs	r2, #0
 800126e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_SPI3_Init+0xa4>)
 8001272:	2200      	movs	r2, #0
 8001274:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_SPI3_Init+0xa4>)
 8001278:	2200      	movs	r2, #0
 800127a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <MX_SPI3_Init+0xa4>)
 800127e:	2200      	movs	r2, #0
 8001280:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_SPI3_Init+0xa4>)
 8001284:	2200      	movs	r2, #0
 8001286:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <MX_SPI3_Init+0xa4>)
 800128a:	2200      	movs	r2, #0
 800128c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_SPI3_Init+0xa4>)
 8001290:	2200      	movs	r2, #0
 8001292:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <MX_SPI3_Init+0xa4>)
 8001296:	2200      	movs	r2, #0
 8001298:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_SPI3_Init+0xa4>)
 800129c:	2200      	movs	r2, #0
 800129e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MX_SPI3_Init+0xa4>)
 80012a2:	f00c fce1 	bl	800dc68 <HAL_SPI_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80012ac:	f000 fc4c 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	24000740 	.word	0x24000740
 80012b8:	40003c00 	.word	0x40003c00

080012bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ce:	463b      	mov	r3, r7
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <MX_TIM2_Init+0xac>)
 80012e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_TIM2_Init+0xac>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <MX_TIM2_Init+0xac>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_TIM2_Init+0xac>)
 80012f6:	225a      	movs	r2, #90	; 0x5a
 80012f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_TIM2_Init+0xac>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_TIM2_Init+0xac>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001306:	4818      	ldr	r0, [pc, #96]	; (8001368 <MX_TIM2_Init+0xac>)
 8001308:	f00c fe44 	bl	800df94 <HAL_TIM_PWM_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001312:	f000 fc19 	bl	8001b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	4810      	ldr	r0, [pc, #64]	; (8001368 <MX_TIM2_Init+0xac>)
 8001326:	f00d fc6d 	bl	800ec04 <HAL_TIMEx_MasterConfigSynchronization>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001330:	f000 fc0a 	bl	8001b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001334:	2360      	movs	r3, #96	; 0x60
 8001336:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	2208      	movs	r2, #8
 8001348:	4619      	mov	r1, r3
 800134a:	4807      	ldr	r0, [pc, #28]	; (8001368 <MX_TIM2_Init+0xac>)
 800134c:	f00c ff98 	bl	800e280 <HAL_TIM_PWM_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001356:	f000 fbf7 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800135a:	4803      	ldr	r0, [pc, #12]	; (8001368 <MX_TIM2_Init+0xac>)
 800135c:	f001 f92a 	bl	80025b4 <HAL_TIM_MspPostInit>

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	240007c8 	.word	0x240007c8

0800136c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137e:	463b      	mov	r3, r7
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
 800138c:	615a      	str	r2, [r3, #20]
 800138e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001390:	4b26      	ldr	r3, [pc, #152]	; (800142c <MX_TIM3_Init+0xc0>)
 8001392:	4a27      	ldr	r2, [pc, #156]	; (8001430 <MX_TIM3_Init+0xc4>)
 8001394:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <MX_TIM3_Init+0xc0>)
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <MX_TIM3_Init+0xc0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80013a2:	4b22      	ldr	r3, [pc, #136]	; (800142c <MX_TIM3_Init+0xc0>)
 80013a4:	225a      	movs	r2, #90	; 0x5a
 80013a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <MX_TIM3_Init+0xc0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_TIM3_Init+0xc0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013b4:	481d      	ldr	r0, [pc, #116]	; (800142c <MX_TIM3_Init+0xc0>)
 80013b6:	f00c fded 	bl	800df94 <HAL_TIM_PWM_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80013c0:	f000 fbc2 	bl	8001b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4816      	ldr	r0, [pc, #88]	; (800142c <MX_TIM3_Init+0xc0>)
 80013d4:	f00d fc16 	bl	800ec04 <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80013de:	f000 fbb3 	bl	8001b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e2:	2360      	movs	r3, #96	; 0x60
 80013e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <MX_TIM3_Init+0xc0>)
 80013fa:	f00c ff41 	bl	800e280 <HAL_TIM_PWM_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001404:	f000 fba0 	bl	8001b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	2204      	movs	r2, #4
 800140c:	4619      	mov	r1, r3
 800140e:	4807      	ldr	r0, [pc, #28]	; (800142c <MX_TIM3_Init+0xc0>)
 8001410:	f00c ff36 	bl	800e280 <HAL_TIM_PWM_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800141a:	f000 fb95 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800141e:	4803      	ldr	r0, [pc, #12]	; (800142c <MX_TIM3_Init+0xc0>)
 8001420:	f001 f8c8 	bl	80025b4 <HAL_TIM_MspPostInit>

}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	24000814 	.word	0x24000814
 8001430:	40000400 	.word	0x40000400

08001434 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001446:	463b      	mov	r3, r7
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001458:	4b32      	ldr	r3, [pc, #200]	; (8001524 <MX_TIM4_Init+0xf0>)
 800145a:	4a33      	ldr	r2, [pc, #204]	; (8001528 <MX_TIM4_Init+0xf4>)
 800145c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 29;
 800145e:	4b31      	ldr	r3, [pc, #196]	; (8001524 <MX_TIM4_Init+0xf0>)
 8001460:	221d      	movs	r2, #29
 8001462:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <MX_TIM4_Init+0xf0>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800146a:	4b2e      	ldr	r3, [pc, #184]	; (8001524 <MX_TIM4_Init+0xf0>)
 800146c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001470:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <MX_TIM4_Init+0xf0>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <MX_TIM4_Init+0xf0>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800147e:	4829      	ldr	r0, [pc, #164]	; (8001524 <MX_TIM4_Init+0xf0>)
 8001480:	f00c fd88 	bl	800df94 <HAL_TIM_PWM_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800148a:	f000 fb5d 	bl	8001b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	4821      	ldr	r0, [pc, #132]	; (8001524 <MX_TIM4_Init+0xf0>)
 800149e:	f00d fbb1 	bl	800ec04 <HAL_TIMEx_MasterConfigSynchronization>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80014a8:	f000 fb4e 	bl	8001b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ac:	2360      	movs	r3, #96	; 0x60
 80014ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	4818      	ldr	r0, [pc, #96]	; (8001524 <MX_TIM4_Init+0xf0>)
 80014c4:	f00c fedc 	bl	800e280 <HAL_TIM_PWM_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80014ce:	f000 fb3b 	bl	8001b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014d2:	463b      	mov	r3, r7
 80014d4:	2204      	movs	r2, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4812      	ldr	r0, [pc, #72]	; (8001524 <MX_TIM4_Init+0xf0>)
 80014da:	f00c fed1 	bl	800e280 <HAL_TIM_PWM_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80014e4:	f000 fb30 	bl	8001b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	2208      	movs	r2, #8
 80014ec:	4619      	mov	r1, r3
 80014ee:	480d      	ldr	r0, [pc, #52]	; (8001524 <MX_TIM4_Init+0xf0>)
 80014f0:	f00c fec6 	bl	800e280 <HAL_TIM_PWM_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80014fa:	f000 fb25 	bl	8001b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014fe:	463b      	mov	r3, r7
 8001500:	220c      	movs	r2, #12
 8001502:	4619      	mov	r1, r3
 8001504:	4807      	ldr	r0, [pc, #28]	; (8001524 <MX_TIM4_Init+0xf0>)
 8001506:	f00c febb 	bl	800e280 <HAL_TIM_PWM_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001510:	f000 fb1a 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001514:	4803      	ldr	r0, [pc, #12]	; (8001524 <MX_TIM4_Init+0xf0>)
 8001516:	f001 f84d 	bl	80025b4 <HAL_TIM_MspPostInit>

}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	; 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	24000860 	.word	0x24000860
 8001528:	40000800 	.word	0x40000800

0800152c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800153e:	463b      	mov	r3, r7
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
 800154c:	615a      	str	r2, [r3, #20]
 800154e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001550:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <MX_TIM5_Init+0xac>)
 8001552:	4a22      	ldr	r2, [pc, #136]	; (80015dc <MX_TIM5_Init+0xb0>)
 8001554:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <MX_TIM5_Init+0xac>)
 8001558:	2200      	movs	r2, #0
 800155a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <MX_TIM5_Init+0xac>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <MX_TIM5_Init+0xac>)
 8001564:	225a      	movs	r2, #90	; 0x5a
 8001566:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <MX_TIM5_Init+0xac>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_TIM5_Init+0xac>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001574:	4818      	ldr	r0, [pc, #96]	; (80015d8 <MX_TIM5_Init+0xac>)
 8001576:	f00c fd0d 	bl	800df94 <HAL_TIM_PWM_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001580:	f000 fae2 	bl	8001b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4619      	mov	r1, r3
 8001592:	4811      	ldr	r0, [pc, #68]	; (80015d8 <MX_TIM5_Init+0xac>)
 8001594:	f00d fb36 	bl	800ec04 <HAL_TIMEx_MasterConfigSynchronization>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800159e:	f000 fad3 	bl	8001b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a2:	2360      	movs	r3, #96	; 0x60
 80015a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015b2:	463b      	mov	r3, r7
 80015b4:	220c      	movs	r2, #12
 80015b6:	4619      	mov	r1, r3
 80015b8:	4807      	ldr	r0, [pc, #28]	; (80015d8 <MX_TIM5_Init+0xac>)
 80015ba:	f00c fe61 	bl	800e280 <HAL_TIM_PWM_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80015c4:	f000 fac0 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80015c8:	4803      	ldr	r0, [pc, #12]	; (80015d8 <MX_TIM5_Init+0xac>)
 80015ca:	f000 fff3 	bl	80025b4 <HAL_TIM_MspPostInit>

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	240008ac 	.word	0x240008ac
 80015dc:	40000c00 	.word	0x40000c00

080015e0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_TIM13_Init+0x40>)
 80015e6:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <MX_TIM13_Init+0x44>)
 80015e8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 99;
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <MX_TIM13_Init+0x40>)
 80015ec:	2263      	movs	r2, #99	; 0x63
 80015ee:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <MX_TIM13_Init+0x40>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <MX_TIM13_Init+0x40>)
 80015f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015fc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MX_TIM13_Init+0x40>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_TIM13_Init+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_TIM13_Init+0x40>)
 800160c:	f00c fc6b 	bl	800dee6 <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001616:	f000 fa97 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	240008f8 	.word	0x240008f8
 8001624:	40001c00 	.word	0x40001c00

08001628 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_TIM14_Init+0x40>)
 800162e:	4a0f      	ldr	r2, [pc, #60]	; (800166c <MX_TIM14_Init+0x44>)
 8001630:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <MX_TIM14_Init+0x40>)
 8001634:	2263      	movs	r2, #99	; 0x63
 8001636:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_TIM14_Init+0x40>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <MX_TIM14_Init+0x40>)
 8001640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001644:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_TIM14_Init+0x40>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_TIM14_Init+0x40>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_TIM14_Init+0x40>)
 8001654:	f00c fc47 	bl	800dee6 <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800165e:	f000 fa73 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	24000944 	.word	0x24000944
 800166c:	40002000 	.word	0x40002000

08001670 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <MX_UART4_Init+0x90>)
 8001676:	4a23      	ldr	r2, [pc, #140]	; (8001704 <MX_UART4_Init+0x94>)
 8001678:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <MX_UART4_Init+0x90>)
 800167c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001680:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <MX_UART4_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <MX_UART4_Init+0x90>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <MX_UART4_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_UART4_Init+0x90>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MX_UART4_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_UART4_Init+0x90>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <MX_UART4_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_UART4_Init+0x90>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <MX_UART4_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016b8:	4811      	ldr	r0, [pc, #68]	; (8001700 <MX_UART4_Init+0x90>)
 80016ba:	f00d fb5d 	bl	800ed78 <HAL_UART_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80016c4:	f000 fa40 	bl	8001b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c8:	2100      	movs	r1, #0
 80016ca:	480d      	ldr	r0, [pc, #52]	; (8001700 <MX_UART4_Init+0x90>)
 80016cc:	f00e fc63 	bl	800ff96 <HAL_UARTEx_SetTxFifoThreshold>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80016d6:	f000 fa37 	bl	8001b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016da:	2100      	movs	r1, #0
 80016dc:	4808      	ldr	r0, [pc, #32]	; (8001700 <MX_UART4_Init+0x90>)
 80016de:	f00e fc98 	bl	8010012 <HAL_UARTEx_SetRxFifoThreshold>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80016e8:	f000 fa2e 	bl	8001b48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_UART4_Init+0x90>)
 80016ee:	f00e fc19 	bl	800ff24 <HAL_UARTEx_DisableFifoMode>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80016f8:	f000 fa26 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	24000be8 	.word	0x24000be8
 8001704:	40004c00 	.word	0x40004c00

08001708 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <MX_USART6_UART_Init+0x90>)
 800170e:	4a23      	ldr	r2, [pc, #140]	; (800179c <MX_USART6_UART_Init+0x94>)
 8001710:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <MX_USART6_UART_Init+0x90>)
 8001714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001718:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <MX_USART6_UART_Init+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <MX_USART6_UART_Init+0x90>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <MX_USART6_UART_Init+0x90>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_USART6_UART_Init+0x90>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <MX_USART6_UART_Init+0x90>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <MX_USART6_UART_Init+0x90>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <MX_USART6_UART_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <MX_USART6_UART_Init+0x90>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <MX_USART6_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001750:	4811      	ldr	r0, [pc, #68]	; (8001798 <MX_USART6_UART_Init+0x90>)
 8001752:	f00d fb11 	bl	800ed78 <HAL_UART_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800175c:	f000 f9f4 	bl	8001b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001760:	2100      	movs	r1, #0
 8001762:	480d      	ldr	r0, [pc, #52]	; (8001798 <MX_USART6_UART_Init+0x90>)
 8001764:	f00e fc17 	bl	800ff96 <HAL_UARTEx_SetTxFifoThreshold>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800176e:	f000 f9eb 	bl	8001b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001772:	2100      	movs	r1, #0
 8001774:	4808      	ldr	r0, [pc, #32]	; (8001798 <MX_USART6_UART_Init+0x90>)
 8001776:	f00e fc4c 	bl	8010012 <HAL_UARTEx_SetRxFifoThreshold>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001780:	f000 f9e2 	bl	8001b48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001784:	4804      	ldr	r0, [pc, #16]	; (8001798 <MX_USART6_UART_Init+0x90>)
 8001786:	f00e fbcd 	bl	800ff24 <HAL_UARTEx_DisableFifoMode>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001790:	f000 f9da 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	24000c7c 	.word	0x24000c7c
 800179c:	40011400 	.word	0x40011400

080017a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <MX_DMA_Init+0xbc>)
 80017a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017ac:	4a2b      	ldr	r2, [pc, #172]	; (800185c <MX_DMA_Init+0xbc>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017b6:	4b29      	ldr	r3, [pc, #164]	; (800185c <MX_DMA_Init+0xbc>)
 80017b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <MX_DMA_Init+0xbc>)
 80017c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017ca:	4a24      	ldr	r2, [pc, #144]	; (800185c <MX_DMA_Init+0xbc>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <MX_DMA_Init+0xbc>)
 80017d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	200b      	movs	r0, #11
 80017e8:	f003 fbc5 	bl	8004f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80017ec:	200b      	movs	r0, #11
 80017ee:	f003 fbdc 	bl	8004faa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	200c      	movs	r0, #12
 80017f8:	f003 fbbd 	bl	8004f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80017fc:	200c      	movs	r0, #12
 80017fe:	f003 fbd4 	bl	8004faa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	200d      	movs	r0, #13
 8001808:	f003 fbb5 	bl	8004f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800180c:	200d      	movs	r0, #13
 800180e:	f003 fbcc 	bl	8004faa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	200e      	movs	r0, #14
 8001818:	f003 fbad 	bl	8004f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800181c:	200e      	movs	r0, #14
 800181e:	f003 fbc4 	bl	8004faa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	200f      	movs	r0, #15
 8001828:	f003 fba5 	bl	8004f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800182c:	200f      	movs	r0, #15
 800182e:	f003 fbbc 	bl	8004faa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	2010      	movs	r0, #16
 8001838:	f003 fb9d 	bl	8004f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800183c:	2010      	movs	r0, #16
 800183e:	f003 fbb4 	bl	8004faa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	2046      	movs	r0, #70	; 0x46
 8001848:	f003 fb95 	bl	8004f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800184c:	2046      	movs	r0, #70	; 0x46
 800184e:	f003 fbac 	bl	8004faa <HAL_NVIC_EnableIRQ>

}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	58024400 	.word	0x58024400

08001860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08e      	sub	sp, #56	; 0x38
 8001864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001876:	4bac      	ldr	r3, [pc, #688]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 8001878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187c:	4aaa      	ldr	r2, [pc, #680]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 800187e:	f043 0310 	orr.w	r3, r3, #16
 8001882:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001886:	4ba8      	ldr	r3, [pc, #672]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 8001888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	623b      	str	r3, [r7, #32]
 8001892:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001894:	4ba4      	ldr	r3, [pc, #656]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 8001896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189a:	4aa3      	ldr	r2, [pc, #652]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 800189c:	f043 0320 	orr.w	r3, r3, #32
 80018a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a4:	4ba0      	ldr	r3, [pc, #640]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 80018a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018aa:	f003 0320 	and.w	r3, r3, #32
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b2:	4b9d      	ldr	r3, [pc, #628]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b8:	4a9b      	ldr	r2, [pc, #620]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 80018ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018c2:	4b99      	ldr	r3, [pc, #612]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 80018c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d0:	4b95      	ldr	r3, [pc, #596]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d6:	4a94      	ldr	r2, [pc, #592]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e0:	4b91      	ldr	r3, [pc, #580]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 80018e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	4b8e      	ldr	r3, [pc, #568]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 80018f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f4:	4a8c      	ldr	r2, [pc, #560]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fe:	4b8a      	ldr	r3, [pc, #552]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 8001900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	4b86      	ldr	r3, [pc, #536]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 800190e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001912:	4a85      	ldr	r2, [pc, #532]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191c:	4b82      	ldr	r3, [pc, #520]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 800191e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800192a:	4b7f      	ldr	r3, [pc, #508]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 800192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001930:	4a7d      	ldr	r2, [pc, #500]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 8001932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800193a:	4b7b      	ldr	r3, [pc, #492]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 800193c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001948:	4b77      	ldr	r3, [pc, #476]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194e:	4a76      	ldr	r2, [pc, #472]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 8001950:	f043 0308 	orr.w	r3, r3, #8
 8001954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001958:	4b73      	ldr	r3, [pc, #460]	; (8001b28 <MX_GPIO_Init+0x2c8>)
 800195a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	f241 5104 	movw	r1, #5380	; 0x1504
 800196c:	486f      	ldr	r0, [pc, #444]	; (8001b2c <MX_GPIO_Init+0x2cc>)
 800196e:	f005 fd03 	bl	8007378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	f248 0102 	movw	r1, #32770	; 0x8002
 8001978:	486d      	ldr	r0, [pc, #436]	; (8001b30 <MX_GPIO_Init+0x2d0>)
 800197a:	f005 fcfd 	bl	8007378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	2130      	movs	r1, #48	; 0x30
 8001982:	486c      	ldr	r0, [pc, #432]	; (8001b34 <MX_GPIO_Init+0x2d4>)
 8001984:	f005 fcf8 	bl	8007378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	2102      	movs	r1, #2
 800198c:	486a      	ldr	r0, [pc, #424]	; (8001b38 <MX_GPIO_Init+0x2d8>)
 800198e:	f005 fcf3 	bl	8007378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8001998:	4868      	ldr	r0, [pc, #416]	; (8001b3c <MX_GPIO_Init+0x2dc>)
 800199a:	f005 fced 	bl	8007378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	210e      	movs	r1, #14
 80019a2:	4867      	ldr	r0, [pc, #412]	; (8001b40 <MX_GPIO_Init+0x2e0>)
 80019a4:	f005 fce8 	bl	8007378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f240 3101 	movw	r1, #769	; 0x301
 80019ae:	4865      	ldr	r0, [pc, #404]	; (8001b44 <MX_GPIO_Init+0x2e4>)
 80019b0:	f005 fce2 	bl	8007378 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 80019b4:	f241 5304 	movw	r3, #5380	; 0x1504
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ca:	4619      	mov	r1, r3
 80019cc:	4857      	ldr	r0, [pc, #348]	; (8001b2c <MX_GPIO_Init+0x2cc>)
 80019ce:	f005 fb2b 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|GPIO_PIN_15;
 80019d2:	f248 0302 	movw	r3, #32770	; 0x8002
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e8:	4619      	mov	r1, r3
 80019ea:	4851      	ldr	r0, [pc, #324]	; (8001b30 <MX_GPIO_Init+0x2d0>)
 80019ec:	f005 fb1c 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019f0:	2330      	movs	r3, #48	; 0x30
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a04:	4619      	mov	r1, r3
 8001a06:	484b      	ldr	r0, [pc, #300]	; (8001b34 <MX_GPIO_Init+0x2d4>)
 8001a08:	f005 fb0e 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	4845      	ldr	r0, [pc, #276]	; (8001b38 <MX_GPIO_Init+0x2d8>)
 8001a24:	f005 fb00 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8001a28:	2304      	movs	r3, #4
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	483f      	ldr	r0, [pc, #252]	; (8001b38 <MX_GPIO_Init+0x2d8>)
 8001a3c:	f005 faf4 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8001a40:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a56:	4619      	mov	r1, r3
 8001a58:	4838      	ldr	r0, [pc, #224]	; (8001b3c <MX_GPIO_Init+0x2dc>)
 8001a5a:	f005 fae5 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8001a5e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a70:	4619      	mov	r1, r3
 8001a72:	4832      	ldr	r0, [pc, #200]	; (8001b3c <MX_GPIO_Init+0x2dc>)
 8001a74:	f005 fad8 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a88:	4619      	mov	r1, r3
 8001a8a:	482d      	ldr	r0, [pc, #180]	; (8001b40 <MX_GPIO_Init+0x2e0>)
 8001a8c:	f005 facc 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8001a90:	230e      	movs	r3, #14
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4826      	ldr	r0, [pc, #152]	; (8001b40 <MX_GPIO_Init+0x2e0>)
 8001aa8:	f005 fabe 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8001aac:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abe:	4619      	mov	r1, r3
 8001ac0:	481a      	ldr	r0, [pc, #104]	; (8001b2c <MX_GPIO_Init+0x2cc>)
 8001ac2:	f005 fab1 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 8001ac6:	f240 3301 	movw	r3, #769	; 0x301
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001adc:	4619      	mov	r1, r3
 8001ade:	4819      	ldr	r0, [pc, #100]	; (8001b44 <MX_GPIO_Init+0x2e4>)
 8001ae0:	f005 faa2 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8001ae4:	2310      	movs	r3, #16
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af4:	4619      	mov	r1, r3
 8001af6:	4812      	ldr	r0, [pc, #72]	; (8001b40 <MX_GPIO_Init+0x2e0>)
 8001af8:	f005 fa96 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_GPIO_Init+0x2d0>)
 8001b1a:	f005 fa85 	bl	8007028 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b1e:	bf00      	nop
 8001b20:	3738      	adds	r7, #56	; 0x38
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	58021000 	.word	0x58021000
 8001b30:	58020000 	.word	0x58020000
 8001b34:	58020800 	.word	0x58020800
 8001b38:	58020400 	.word	0x58020400
 8001b3c:	58021400 	.word	0x58021400
 8001b40:	58021800 	.word	0x58021800
 8001b44:	58020c00 	.word	0x58020c00

08001b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b50:	e7fe      	b.n	8001b50 <Error_Handler+0x8>
	...

08001b54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_MspInit+0x30>)
 8001b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b60:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <HAL_MspInit+0x30>)
 8001b62:	f043 0302 	orr.w	r3, r3, #2
 8001b66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_MspInit+0x30>)
 8001b6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	58024400 	.word	0x58024400

08001b88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	; 0x30
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a5d      	ldr	r2, [pc, #372]	; (8001d1c <HAL_ADC_MspInit+0x194>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d159      	bne.n	8001c5e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001baa:	4b5d      	ldr	r3, [pc, #372]	; (8001d20 <HAL_ADC_MspInit+0x198>)
 8001bac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bb0:	4a5b      	ldr	r2, [pc, #364]	; (8001d20 <HAL_ADC_MspInit+0x198>)
 8001bb2:	f043 0320 	orr.w	r3, r3, #32
 8001bb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bba:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <HAL_ADC_MspInit+0x198>)
 8001bbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bc0:	f003 0320 	and.w	r3, r3, #32
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc8:	4b55      	ldr	r3, [pc, #340]	; (8001d20 <HAL_ADC_MspInit+0x198>)
 8001bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bce:	4a54      	ldr	r2, [pc, #336]	; (8001d20 <HAL_ADC_MspInit+0x198>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd8:	4b51      	ldr	r3, [pc, #324]	; (8001d20 <HAL_ADC_MspInit+0x198>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001be6:	2304      	movs	r3, #4
 8001be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bea:	2303      	movs	r3, #3
 8001bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	484a      	ldr	r0, [pc, #296]	; (8001d24 <HAL_ADC_MspInit+0x19c>)
 8001bfa:	f005 fa15 	bl	8007028 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8001bfe:	4b4a      	ldr	r3, [pc, #296]	; (8001d28 <HAL_ADC_MspInit+0x1a0>)
 8001c00:	4a4a      	ldr	r2, [pc, #296]	; (8001d2c <HAL_ADC_MspInit+0x1a4>)
 8001c02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001c04:	4b48      	ldr	r3, [pc, #288]	; (8001d28 <HAL_ADC_MspInit+0x1a0>)
 8001c06:	2209      	movs	r2, #9
 8001c08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c0a:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <HAL_ADC_MspInit+0x1a0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c10:	4b45      	ldr	r3, [pc, #276]	; (8001d28 <HAL_ADC_MspInit+0x1a0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c16:	4b44      	ldr	r3, [pc, #272]	; (8001d28 <HAL_ADC_MspInit+0x1a0>)
 8001c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c1e:	4b42      	ldr	r3, [pc, #264]	; (8001d28 <HAL_ADC_MspInit+0x1a0>)
 8001c20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c26:	4b40      	ldr	r3, [pc, #256]	; (8001d28 <HAL_ADC_MspInit+0x1a0>)
 8001c28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001c2e:	4b3e      	ldr	r3, [pc, #248]	; (8001d28 <HAL_ADC_MspInit+0x1a0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c34:	4b3c      	ldr	r3, [pc, #240]	; (8001d28 <HAL_ADC_MspInit+0x1a0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c3a:	4b3b      	ldr	r3, [pc, #236]	; (8001d28 <HAL_ADC_MspInit+0x1a0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c40:	4839      	ldr	r0, [pc, #228]	; (8001d28 <HAL_ADC_MspInit+0x1a0>)
 8001c42:	f003 f9cd 	bl	8004fe0 <HAL_DMA_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001c4c:	f7ff ff7c 	bl	8001b48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a35      	ldr	r2, [pc, #212]	; (8001d28 <HAL_ADC_MspInit+0x1a0>)
 8001c54:	659a      	str	r2, [r3, #88]	; 0x58
 8001c56:	4a34      	ldr	r2, [pc, #208]	; (8001d28 <HAL_ADC_MspInit+0x1a0>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c5c:	e059      	b.n	8001d12 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a33      	ldr	r2, [pc, #204]	; (8001d30 <HAL_ADC_MspInit+0x1a8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d154      	bne.n	8001d12 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c68:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <HAL_ADC_MspInit+0x198>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6e:	4a2c      	ldr	r2, [pc, #176]	; (8001d20 <HAL_ADC_MspInit+0x198>)
 8001c70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c78:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <HAL_ADC_MspInit+0x198>)
 8001c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <HAL_ADC_MspInit+0x198>)
 8001c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8c:	4a24      	ldr	r2, [pc, #144]	; (8001d20 <HAL_ADC_MspInit+0x198>)
 8001c8e:	f043 0304 	orr.w	r3, r3, #4
 8001c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c96:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <HAL_ADC_MspInit+0x198>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001ca4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001ca8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001cac:	f001 f8b6 	bl	8002e1c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8001cb0:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_ADC_MspInit+0x1ac>)
 8001cb2:	4a21      	ldr	r2, [pc, #132]	; (8001d38 <HAL_ADC_MspInit+0x1b0>)
 8001cb4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <HAL_ADC_MspInit+0x1ac>)
 8001cb8:	2273      	movs	r2, #115	; 0x73
 8001cba:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_ADC_MspInit+0x1ac>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <HAL_ADC_MspInit+0x1ac>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <HAL_ADC_MspInit+0x1ac>)
 8001cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cce:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_ADC_MspInit+0x1ac>)
 8001cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cd6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cd8:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <HAL_ADC_MspInit+0x1ac>)
 8001cda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cde:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_ADC_MspInit+0x1ac>)
 8001ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ce6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_ADC_MspInit+0x1ac>)
 8001cea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cee:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <HAL_ADC_MspInit+0x1ac>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001cf6:	480f      	ldr	r0, [pc, #60]	; (8001d34 <HAL_ADC_MspInit+0x1ac>)
 8001cf8:	f003 f972 	bl	8004fe0 <HAL_DMA_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8001d02:	f7ff ff21 	bl	8001b48 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <HAL_ADC_MspInit+0x1ac>)
 8001d0a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d0c:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <HAL_ADC_MspInit+0x1ac>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d12:	bf00      	nop
 8001d14:	3730      	adds	r7, #48	; 0x30
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	58024400 	.word	0x58024400
 8001d24:	58020000 	.word	0x58020000
 8001d28:	240003d0 	.word	0x240003d0
 8001d2c:	40020088 	.word	0x40020088
 8001d30:	58026000 	.word	0x58026000
 8001d34:	24000448 	.word	0x24000448
 8001d38:	400204b8 	.word	0x400204b8

08001d3c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b0b8      	sub	sp, #224	; 0xe0
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	22b8      	movs	r2, #184	; 0xb8
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f016 fa33 	bl	80181c8 <memset>
  if(hfdcan->Instance==FDCAN3)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a26      	ldr	r2, [pc, #152]	; (8001e00 <HAL_FDCAN_MspInit+0xc4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d144      	bne.n	8001df6 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	4618      	mov	r0, r3
 8001d82:	f007 ff27 	bl	8009bd4 <HAL_RCCEx_PeriphCLKConfig>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8001d8c:	f7ff fedc 	bl	8001b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d90:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <HAL_FDCAN_MspInit+0xc8>)
 8001d92:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d96:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <HAL_FDCAN_MspInit+0xc8>)
 8001d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001da0:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <HAL_FDCAN_MspInit+0xc8>)
 8001da2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_FDCAN_MspInit+0xc8>)
 8001db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db4:	4a13      	ldr	r2, [pc, #76]	; (8001e04 <HAL_FDCAN_MspInit+0xc8>)
 8001db6:	f043 0320 	orr.w	r3, r3, #32
 8001dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_FDCAN_MspInit+0xc8>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dcc:	23c0      	movs	r3, #192	; 0xc0
 8001dce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8001de4:	2302      	movs	r3, #2
 8001de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	; (8001e08 <HAL_FDCAN_MspInit+0xcc>)
 8001df2:	f005 f919 	bl	8007028 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8001df6:	bf00      	nop
 8001df8:	37e0      	adds	r7, #224	; 0xe0
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	4000d400 	.word	0x4000d400
 8001e04:	58024400 	.word	0x58024400
 8001e08:	58021400 	.word	0x58021400

08001e0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b0b8      	sub	sp, #224	; 0xe0
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e24:	f107 0310 	add.w	r3, r7, #16
 8001e28:	22b8      	movs	r2, #184	; 0xb8
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f016 f9cb 	bl	80181c8 <memset>
  if(hi2c->Instance==I2C2)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a2a      	ldr	r2, [pc, #168]	; (8001ee0 <HAL_I2C_MspInit+0xd4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d14d      	bne.n	8001ed8 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e3c:	f04f 0208 	mov.w	r2, #8
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4618      	mov	r0, r3
 8001e54:	f007 febe 	bl	8009bd4 <HAL_RCCEx_PeriphCLKConfig>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001e5e:	f7ff fe73 	bl	8001b48 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_I2C_MspInit+0xd8>)
 8001e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e68:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <HAL_I2C_MspInit+0xd8>)
 8001e6a:	f043 0320 	orr.w	r3, r3, #32
 8001e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <HAL_I2C_MspInit+0xd8>)
 8001e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e78:	f003 0320 	and.w	r3, r3, #32
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e80:	2303      	movs	r3, #3
 8001e82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e86:	2312      	movs	r3, #18
 8001e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e98:	2304      	movs	r3, #4
 8001e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e9e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4810      	ldr	r0, [pc, #64]	; (8001ee8 <HAL_I2C_MspInit+0xdc>)
 8001ea6:	f005 f8bf 	bl	8007028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_I2C_MspInit+0xd8>)
 8001eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eb0:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <HAL_I2C_MspInit+0xd8>)
 8001eb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_I2C_MspInit+0xd8>)
 8001ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2101      	movs	r1, #1
 8001ecc:	2021      	movs	r0, #33	; 0x21
 8001ece:	f003 f852 	bl	8004f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001ed2:	2021      	movs	r0, #33	; 0x21
 8001ed4:	f003 f869 	bl	8004faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ed8:	bf00      	nop
 8001eda:	37e0      	adds	r7, #224	; 0xe0
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40005800 	.word	0x40005800
 8001ee4:	58024400 	.word	0x58024400
 8001ee8:	58021400 	.word	0x58021400

08001eec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b0ba      	sub	sp, #232	; 0xe8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	22b8      	movs	r2, #184	; 0xb8
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f016 f95b 	bl	80181c8 <memset>
  if(hsd->Instance==SDMMC2)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a5d      	ldr	r2, [pc, #372]	; (800208c <HAL_SD_MspInit+0x1a0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	f040 80b3 	bne.w	8002084 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001f1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2e:	f107 0318 	add.w	r3, r7, #24
 8001f32:	4618      	mov	r0, r3
 8001f34:	f007 fe4e 	bl	8009bd4 <HAL_RCCEx_PeriphCLKConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001f3e:	f7ff fe03 	bl	8001b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8001f42:	4b53      	ldr	r3, [pc, #332]	; (8002090 <HAL_SD_MspInit+0x1a4>)
 8001f44:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001f48:	4a51      	ldr	r2, [pc, #324]	; (8002090 <HAL_SD_MspInit+0x1a4>)
 8001f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f4e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001f52:	4b4f      	ldr	r3, [pc, #316]	; (8002090 <HAL_SD_MspInit+0x1a4>)
 8001f54:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f60:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <HAL_SD_MspInit+0x1a4>)
 8001f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f66:	4a4a      	ldr	r2, [pc, #296]	; (8002090 <HAL_SD_MspInit+0x1a4>)
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f70:	4b47      	ldr	r3, [pc, #284]	; (8002090 <HAL_SD_MspInit+0x1a4>)
 8001f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f7e:	4b44      	ldr	r3, [pc, #272]	; (8002090 <HAL_SD_MspInit+0x1a4>)
 8001f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f84:	4a42      	ldr	r2, [pc, #264]	; (8002090 <HAL_SD_MspInit+0x1a4>)
 8001f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f8e:	4b40      	ldr	r3, [pc, #256]	; (8002090 <HAL_SD_MspInit+0x1a4>)
 8001f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f9c:	2340      	movs	r3, #64	; 0x40
 8001f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001fb4:	230b      	movs	r3, #11
 8001fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4834      	ldr	r0, [pc, #208]	; (8002094 <HAL_SD_MspInit+0x1a8>)
 8001fc2:	f005 f831 	bl	8007028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001fde:	230b      	movs	r3, #11
 8001fe0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fe8:	4619      	mov	r1, r3
 8001fea:	482a      	ldr	r0, [pc, #168]	; (8002094 <HAL_SD_MspInit+0x1a8>)
 8001fec:	f005 f81c 	bl	8007028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800200a:	230b      	movs	r3, #11
 800200c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002010:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002014:	4619      	mov	r1, r3
 8002016:	4820      	ldr	r0, [pc, #128]	; (8002098 <HAL_SD_MspInit+0x1ac>)
 8002018:	f005 f806 	bl	8007028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800201c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002020:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002030:	2303      	movs	r3, #3
 8002032:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002036:	230b      	movs	r3, #11
 8002038:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800203c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002040:	4619      	mov	r1, r3
 8002042:	4815      	ldr	r0, [pc, #84]	; (8002098 <HAL_SD_MspInit+0x1ac>)
 8002044:	f004 fff0 	bl	8007028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002048:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800204c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002062:	230a      	movs	r3, #10
 8002064:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002068:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800206c:	4619      	mov	r1, r3
 800206e:	480a      	ldr	r0, [pc, #40]	; (8002098 <HAL_SD_MspInit+0x1ac>)
 8002070:	f004 ffda 	bl	8007028 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002074:	2200      	movs	r2, #0
 8002076:	2100      	movs	r1, #0
 8002078:	207c      	movs	r0, #124	; 0x7c
 800207a:	f002 ff7c 	bl	8004f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 800207e:	207c      	movs	r0, #124	; 0x7c
 8002080:	f002 ff93 	bl	8004faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002084:	bf00      	nop
 8002086:	37e8      	adds	r7, #232	; 0xe8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	48022400 	.word	0x48022400
 8002090:	58024400 	.word	0x58024400
 8002094:	58020c00 	.word	0x58020c00
 8002098:	58021800 	.word	0x58021800

0800209c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08e      	sub	sp, #56	; 0x38
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a4f      	ldr	r2, [pc, #316]	; (80021f8 <HAL_SPI_MspInit+0x15c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d12e      	bne.n	800211c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020be:	4b4f      	ldr	r3, [pc, #316]	; (80021fc <HAL_SPI_MspInit+0x160>)
 80020c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020c4:	4a4d      	ldr	r2, [pc, #308]	; (80021fc <HAL_SPI_MspInit+0x160>)
 80020c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020ce:	4b4b      	ldr	r3, [pc, #300]	; (80021fc <HAL_SPI_MspInit+0x160>)
 80020d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d8:	623b      	str	r3, [r7, #32]
 80020da:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020dc:	4b47      	ldr	r3, [pc, #284]	; (80021fc <HAL_SPI_MspInit+0x160>)
 80020de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e2:	4a46      	ldr	r2, [pc, #280]	; (80021fc <HAL_SPI_MspInit+0x160>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ec:	4b43      	ldr	r3, [pc, #268]	; (80021fc <HAL_SPI_MspInit+0x160>)
 80020ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020fa:	23e0      	movs	r3, #224	; 0xe0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800210a:	2305      	movs	r3, #5
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002112:	4619      	mov	r1, r3
 8002114:	483a      	ldr	r0, [pc, #232]	; (8002200 <HAL_SPI_MspInit+0x164>)
 8002116:	f004 ff87 	bl	8007028 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800211a:	e068      	b.n	80021ee <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a38      	ldr	r2, [pc, #224]	; (8002204 <HAL_SPI_MspInit+0x168>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d12f      	bne.n	8002186 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002126:	4b35      	ldr	r3, [pc, #212]	; (80021fc <HAL_SPI_MspInit+0x160>)
 8002128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800212c:	4a33      	ldr	r2, [pc, #204]	; (80021fc <HAL_SPI_MspInit+0x160>)
 800212e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002132:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002136:	4b31      	ldr	r3, [pc, #196]	; (80021fc <HAL_SPI_MspInit+0x160>)
 8002138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800213c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002144:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_SPI_MspInit+0x160>)
 8002146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214a:	4a2c      	ldr	r2, [pc, #176]	; (80021fc <HAL_SPI_MspInit+0x160>)
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002154:	4b29      	ldr	r3, [pc, #164]	; (80021fc <HAL_SPI_MspInit+0x160>)
 8002156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002162:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002174:	2305      	movs	r3, #5
 8002176:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217c:	4619      	mov	r1, r3
 800217e:	4822      	ldr	r0, [pc, #136]	; (8002208 <HAL_SPI_MspInit+0x16c>)
 8002180:	f004 ff52 	bl	8007028 <HAL_GPIO_Init>
}
 8002184:	e033      	b.n	80021ee <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a20      	ldr	r2, [pc, #128]	; (800220c <HAL_SPI_MspInit+0x170>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d12e      	bne.n	80021ee <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <HAL_SPI_MspInit+0x160>)
 8002192:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002196:	4a19      	ldr	r2, [pc, #100]	; (80021fc <HAL_SPI_MspInit+0x160>)
 8002198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <HAL_SPI_MspInit+0x160>)
 80021a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ae:	4b13      	ldr	r3, [pc, #76]	; (80021fc <HAL_SPI_MspInit+0x160>)
 80021b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b4:	4a11      	ldr	r2, [pc, #68]	; (80021fc <HAL_SPI_MspInit+0x160>)
 80021b6:	f043 0304 	orr.w	r3, r3, #4
 80021ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <HAL_SPI_MspInit+0x160>)
 80021c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021de:	2306      	movs	r3, #6
 80021e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e6:	4619      	mov	r1, r3
 80021e8:	4809      	ldr	r0, [pc, #36]	; (8002210 <HAL_SPI_MspInit+0x174>)
 80021ea:	f004 ff1d 	bl	8007028 <HAL_GPIO_Init>
}
 80021ee:	bf00      	nop
 80021f0:	3738      	adds	r7, #56	; 0x38
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40013000 	.word	0x40013000
 80021fc:	58024400 	.word	0x58024400
 8002200:	58020000 	.word	0x58020000
 8002204:	40003800 	.word	0x40003800
 8002208:	58020400 	.word	0x58020400
 800220c:	40003c00 	.word	0x40003c00
 8002210:	58020800 	.word	0x58020800

08002214 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	; 0x30
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d15d      	bne.n	80022f2 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002236:	4b8e      	ldr	r3, [pc, #568]	; (8002470 <HAL_TIM_PWM_MspInit+0x25c>)
 8002238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800223c:	4a8c      	ldr	r2, [pc, #560]	; (8002470 <HAL_TIM_PWM_MspInit+0x25c>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002246:	4b8a      	ldr	r3, [pc, #552]	; (8002470 <HAL_TIM_PWM_MspInit+0x25c>)
 8002248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002254:	4b86      	ldr	r3, [pc, #536]	; (8002470 <HAL_TIM_PWM_MspInit+0x25c>)
 8002256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225a:	4a85      	ldr	r2, [pc, #532]	; (8002470 <HAL_TIM_PWM_MspInit+0x25c>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002264:	4b82      	ldr	r3, [pc, #520]	; (8002470 <HAL_TIM_PWM_MspInit+0x25c>)
 8002266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002272:	2301      	movs	r3, #1
 8002274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002282:	2301      	movs	r3, #1
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 031c 	add.w	r3, r7, #28
 800228a:	4619      	mov	r1, r3
 800228c:	4879      	ldr	r0, [pc, #484]	; (8002474 <HAL_TIM_PWM_MspInit+0x260>)
 800228e:	f004 fecb 	bl	8007028 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002292:	4b79      	ldr	r3, [pc, #484]	; (8002478 <HAL_TIM_PWM_MspInit+0x264>)
 8002294:	4a79      	ldr	r2, [pc, #484]	; (800247c <HAL_TIM_PWM_MspInit+0x268>)
 8002296:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002298:	4b77      	ldr	r3, [pc, #476]	; (8002478 <HAL_TIM_PWM_MspInit+0x264>)
 800229a:	2214      	movs	r2, #20
 800229c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800229e:	4b76      	ldr	r3, [pc, #472]	; (8002478 <HAL_TIM_PWM_MspInit+0x264>)
 80022a0:	2240      	movs	r2, #64	; 0x40
 80022a2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a4:	4b74      	ldr	r3, [pc, #464]	; (8002478 <HAL_TIM_PWM_MspInit+0x264>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80022aa:	4b73      	ldr	r3, [pc, #460]	; (8002478 <HAL_TIM_PWM_MspInit+0x264>)
 80022ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022b2:	4b71      	ldr	r3, [pc, #452]	; (8002478 <HAL_TIM_PWM_MspInit+0x264>)
 80022b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022b8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022ba:	4b6f      	ldr	r3, [pc, #444]	; (8002478 <HAL_TIM_PWM_MspInit+0x264>)
 80022bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022c0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80022c2:	4b6d      	ldr	r3, [pc, #436]	; (8002478 <HAL_TIM_PWM_MspInit+0x264>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80022c8:	4b6b      	ldr	r3, [pc, #428]	; (8002478 <HAL_TIM_PWM_MspInit+0x264>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022ce:	4b6a      	ldr	r3, [pc, #424]	; (8002478 <HAL_TIM_PWM_MspInit+0x264>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80022d4:	4868      	ldr	r0, [pc, #416]	; (8002478 <HAL_TIM_PWM_MspInit+0x264>)
 80022d6:	f002 fe83 	bl	8004fe0 <HAL_DMA_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 80022e0:	f7ff fc32 	bl	8001b48 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a64      	ldr	r2, [pc, #400]	; (8002478 <HAL_TIM_PWM_MspInit+0x264>)
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80022ea:	4a63      	ldr	r2, [pc, #396]	; (8002478 <HAL_TIM_PWM_MspInit+0x264>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80022f0:	e119      	b.n	8002526 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a62      	ldr	r2, [pc, #392]	; (8002480 <HAL_TIM_PWM_MspInit+0x26c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d16d      	bne.n	80023d8 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022fc:	4b5c      	ldr	r3, [pc, #368]	; (8002470 <HAL_TIM_PWM_MspInit+0x25c>)
 80022fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002302:	4a5b      	ldr	r2, [pc, #364]	; (8002470 <HAL_TIM_PWM_MspInit+0x25c>)
 8002304:	f043 0302 	orr.w	r3, r3, #2
 8002308:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800230c:	4b58      	ldr	r3, [pc, #352]	; (8002470 <HAL_TIM_PWM_MspInit+0x25c>)
 800230e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 800231a:	4b5a      	ldr	r3, [pc, #360]	; (8002484 <HAL_TIM_PWM_MspInit+0x270>)
 800231c:	4a5a      	ldr	r2, [pc, #360]	; (8002488 <HAL_TIM_PWM_MspInit+0x274>)
 800231e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002320:	4b58      	ldr	r3, [pc, #352]	; (8002484 <HAL_TIM_PWM_MspInit+0x270>)
 8002322:	2218      	movs	r2, #24
 8002324:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002326:	4b57      	ldr	r3, [pc, #348]	; (8002484 <HAL_TIM_PWM_MspInit+0x270>)
 8002328:	2240      	movs	r2, #64	; 0x40
 800232a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800232c:	4b55      	ldr	r3, [pc, #340]	; (8002484 <HAL_TIM_PWM_MspInit+0x270>)
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002332:	4b54      	ldr	r3, [pc, #336]	; (8002484 <HAL_TIM_PWM_MspInit+0x270>)
 8002334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002338:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800233a:	4b52      	ldr	r3, [pc, #328]	; (8002484 <HAL_TIM_PWM_MspInit+0x270>)
 800233c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002340:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002342:	4b50      	ldr	r3, [pc, #320]	; (8002484 <HAL_TIM_PWM_MspInit+0x270>)
 8002344:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002348:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800234a:	4b4e      	ldr	r3, [pc, #312]	; (8002484 <HAL_TIM_PWM_MspInit+0x270>)
 800234c:	2200      	movs	r2, #0
 800234e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002350:	4b4c      	ldr	r3, [pc, #304]	; (8002484 <HAL_TIM_PWM_MspInit+0x270>)
 8002352:	2200      	movs	r2, #0
 8002354:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002356:	4b4b      	ldr	r3, [pc, #300]	; (8002484 <HAL_TIM_PWM_MspInit+0x270>)
 8002358:	2200      	movs	r2, #0
 800235a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800235c:	4849      	ldr	r0, [pc, #292]	; (8002484 <HAL_TIM_PWM_MspInit+0x270>)
 800235e:	f002 fe3f 	bl	8004fe0 <HAL_DMA_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002368:	f7ff fbee 	bl	8001b48 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a45      	ldr	r2, [pc, #276]	; (8002484 <HAL_TIM_PWM_MspInit+0x270>)
 8002370:	629a      	str	r2, [r3, #40]	; 0x28
 8002372:	4a44      	ldr	r2, [pc, #272]	; (8002484 <HAL_TIM_PWM_MspInit+0x270>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002378:	4b44      	ldr	r3, [pc, #272]	; (800248c <HAL_TIM_PWM_MspInit+0x278>)
 800237a:	4a45      	ldr	r2, [pc, #276]	; (8002490 <HAL_TIM_PWM_MspInit+0x27c>)
 800237c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800237e:	4b43      	ldr	r3, [pc, #268]	; (800248c <HAL_TIM_PWM_MspInit+0x278>)
 8002380:	2217      	movs	r2, #23
 8002382:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002384:	4b41      	ldr	r3, [pc, #260]	; (800248c <HAL_TIM_PWM_MspInit+0x278>)
 8002386:	2240      	movs	r2, #64	; 0x40
 8002388:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800238a:	4b40      	ldr	r3, [pc, #256]	; (800248c <HAL_TIM_PWM_MspInit+0x278>)
 800238c:	2200      	movs	r2, #0
 800238e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002390:	4b3e      	ldr	r3, [pc, #248]	; (800248c <HAL_TIM_PWM_MspInit+0x278>)
 8002392:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002396:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002398:	4b3c      	ldr	r3, [pc, #240]	; (800248c <HAL_TIM_PWM_MspInit+0x278>)
 800239a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800239e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023a0:	4b3a      	ldr	r3, [pc, #232]	; (800248c <HAL_TIM_PWM_MspInit+0x278>)
 80023a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023a6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80023a8:	4b38      	ldr	r3, [pc, #224]	; (800248c <HAL_TIM_PWM_MspInit+0x278>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <HAL_TIM_PWM_MspInit+0x278>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023b4:	4b35      	ldr	r3, [pc, #212]	; (800248c <HAL_TIM_PWM_MspInit+0x278>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80023ba:	4834      	ldr	r0, [pc, #208]	; (800248c <HAL_TIM_PWM_MspInit+0x278>)
 80023bc:	f002 fe10 	bl	8004fe0 <HAL_DMA_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80023c6:	f7ff fbbf 	bl	8001b48 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a2f      	ldr	r2, [pc, #188]	; (800248c <HAL_TIM_PWM_MspInit+0x278>)
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24
 80023d0:	4a2e      	ldr	r2, [pc, #184]	; (800248c <HAL_TIM_PWM_MspInit+0x278>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80023d6:	e0a6      	b.n	8002526 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a2d      	ldr	r2, [pc, #180]	; (8002494 <HAL_TIM_PWM_MspInit+0x280>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d15e      	bne.n	80024a0 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023e2:	4b23      	ldr	r3, [pc, #140]	; (8002470 <HAL_TIM_PWM_MspInit+0x25c>)
 80023e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e8:	4a21      	ldr	r2, [pc, #132]	; (8002470 <HAL_TIM_PWM_MspInit+0x25c>)
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023f2:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <HAL_TIM_PWM_MspInit+0x25c>)
 80023f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8002400:	4b25      	ldr	r3, [pc, #148]	; (8002498 <HAL_TIM_PWM_MspInit+0x284>)
 8002402:	4a26      	ldr	r2, [pc, #152]	; (800249c <HAL_TIM_PWM_MspInit+0x288>)
 8002404:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8002406:	4b24      	ldr	r3, [pc, #144]	; (8002498 <HAL_TIM_PWM_MspInit+0x284>)
 8002408:	221f      	movs	r2, #31
 800240a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800240c:	4b22      	ldr	r3, [pc, #136]	; (8002498 <HAL_TIM_PWM_MspInit+0x284>)
 800240e:	2240      	movs	r2, #64	; 0x40
 8002410:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002412:	4b21      	ldr	r3, [pc, #132]	; (8002498 <HAL_TIM_PWM_MspInit+0x284>)
 8002414:	2200      	movs	r2, #0
 8002416:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002418:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <HAL_TIM_PWM_MspInit+0x284>)
 800241a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800241e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002420:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_TIM_PWM_MspInit+0x284>)
 8002422:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002426:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_TIM_PWM_MspInit+0x284>)
 800242a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800242e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_TIM_PWM_MspInit+0x284>)
 8002432:	2200      	movs	r2, #0
 8002434:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002436:	4b18      	ldr	r3, [pc, #96]	; (8002498 <HAL_TIM_PWM_MspInit+0x284>)
 8002438:	2200      	movs	r2, #0
 800243a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <HAL_TIM_PWM_MspInit+0x284>)
 800243e:	2200      	movs	r2, #0
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002442:	4815      	ldr	r0, [pc, #84]	; (8002498 <HAL_TIM_PWM_MspInit+0x284>)
 8002444:	f002 fdcc 	bl	8004fe0 <HAL_DMA_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 800244e:	f7ff fb7b 	bl	8001b48 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a10      	ldr	r2, [pc, #64]	; (8002498 <HAL_TIM_PWM_MspInit+0x284>)
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c
 8002458:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <HAL_TIM_PWM_MspInit+0x284>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	2100      	movs	r1, #0
 8002462:	201e      	movs	r0, #30
 8002464:	f002 fd87 	bl	8004f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002468:	201e      	movs	r0, #30
 800246a:	f002 fd9e 	bl	8004faa <HAL_NVIC_EnableIRQ>
}
 800246e:	e05a      	b.n	8002526 <HAL_TIM_PWM_MspInit+0x312>
 8002470:	58024400 	.word	0x58024400
 8002474:	58020000 	.word	0x58020000
 8002478:	24000990 	.word	0x24000990
 800247c:	40020028 	.word	0x40020028
 8002480:	40000400 	.word	0x40000400
 8002484:	24000a08 	.word	0x24000a08
 8002488:	40020058 	.word	0x40020058
 800248c:	24000a80 	.word	0x24000a80
 8002490:	40020070 	.word	0x40020070
 8002494:	40000800 	.word	0x40000800
 8002498:	24000af8 	.word	0x24000af8
 800249c:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a22      	ldr	r2, [pc, #136]	; (8002530 <HAL_TIM_PWM_MspInit+0x31c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d13d      	bne.n	8002526 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024aa:	4b22      	ldr	r3, [pc, #136]	; (8002534 <HAL_TIM_PWM_MspInit+0x320>)
 80024ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024b0:	4a20      	ldr	r2, [pc, #128]	; (8002534 <HAL_TIM_PWM_MspInit+0x320>)
 80024b2:	f043 0308 	orr.w	r3, r3, #8
 80024b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_TIM_PWM_MspInit+0x320>)
 80024bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <HAL_TIM_PWM_MspInit+0x324>)
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <HAL_TIM_PWM_MspInit+0x328>)
 80024cc:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80024ce:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <HAL_TIM_PWM_MspInit+0x324>)
 80024d0:	223a      	movs	r2, #58	; 0x3a
 80024d2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024d4:	4b18      	ldr	r3, [pc, #96]	; (8002538 <HAL_TIM_PWM_MspInit+0x324>)
 80024d6:	2240      	movs	r2, #64	; 0x40
 80024d8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80024da:	4b17      	ldr	r3, [pc, #92]	; (8002538 <HAL_TIM_PWM_MspInit+0x324>)
 80024dc:	2200      	movs	r2, #0
 80024de:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80024e0:	4b15      	ldr	r3, [pc, #84]	; (8002538 <HAL_TIM_PWM_MspInit+0x324>)
 80024e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e6:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024e8:	4b13      	ldr	r3, [pc, #76]	; (8002538 <HAL_TIM_PWM_MspInit+0x324>)
 80024ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024ee:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <HAL_TIM_PWM_MspInit+0x324>)
 80024f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024f6:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <HAL_TIM_PWM_MspInit+0x324>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <HAL_TIM_PWM_MspInit+0x324>)
 8002500:	2200      	movs	r2, #0
 8002502:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <HAL_TIM_PWM_MspInit+0x324>)
 8002506:	2200      	movs	r2, #0
 8002508:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800250a:	480b      	ldr	r0, [pc, #44]	; (8002538 <HAL_TIM_PWM_MspInit+0x324>)
 800250c:	f002 fd68 	bl	8004fe0 <HAL_DMA_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8002516:	f7ff fb17 	bl	8001b48 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a06      	ldr	r2, [pc, #24]	; (8002538 <HAL_TIM_PWM_MspInit+0x324>)
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
 8002520:	4a05      	ldr	r2, [pc, #20]	; (8002538 <HAL_TIM_PWM_MspInit+0x324>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002526:	bf00      	nop
 8002528:	3730      	adds	r7, #48	; 0x30
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40000c00 	.word	0x40000c00
 8002534:	58024400 	.word	0x58024400
 8002538:	24000b70 	.word	0x24000b70
 800253c:	40020040 	.word	0x40020040

08002540 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <HAL_TIM_Base_MspInit+0x68>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d10f      	bne.n	8002572 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002552:	4b16      	ldr	r3, [pc, #88]	; (80025ac <HAL_TIM_Base_MspInit+0x6c>)
 8002554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002558:	4a14      	ldr	r2, [pc, #80]	; (80025ac <HAL_TIM_Base_MspInit+0x6c>)
 800255a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800255e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_TIM_Base_MspInit+0x6c>)
 8002564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002570:	e013      	b.n	800259a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a0e      	ldr	r2, [pc, #56]	; (80025b0 <HAL_TIM_Base_MspInit+0x70>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d10e      	bne.n	800259a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_TIM_Base_MspInit+0x6c>)
 800257e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <HAL_TIM_Base_MspInit+0x6c>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800258c:	4b07      	ldr	r3, [pc, #28]	; (80025ac <HAL_TIM_Base_MspInit+0x6c>)
 800258e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40001c00 	.word	0x40001c00
 80025ac:	58024400 	.word	0x58024400
 80025b0:	40002000 	.word	0x40002000

080025b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08c      	sub	sp, #48	; 0x30
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d4:	d120      	bne.n	8002618 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d6:	4b52      	ldr	r3, [pc, #328]	; (8002720 <HAL_TIM_MspPostInit+0x16c>)
 80025d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025dc:	4a50      	ldr	r2, [pc, #320]	; (8002720 <HAL_TIM_MspPostInit+0x16c>)
 80025de:	f043 0302 	orr.w	r3, r3, #2
 80025e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025e6:	4b4e      	ldr	r3, [pc, #312]	; (8002720 <HAL_TIM_MspPostInit+0x16c>)
 80025e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025fe:	2302      	movs	r3, #2
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002606:	2301      	movs	r3, #1
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260a:	f107 031c 	add.w	r3, r7, #28
 800260e:	4619      	mov	r1, r3
 8002610:	4844      	ldr	r0, [pc, #272]	; (8002724 <HAL_TIM_MspPostInit+0x170>)
 8002612:	f004 fd09 	bl	8007028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002616:	e07f      	b.n	8002718 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a42      	ldr	r2, [pc, #264]	; (8002728 <HAL_TIM_MspPostInit+0x174>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d11f      	bne.n	8002662 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002622:	4b3f      	ldr	r3, [pc, #252]	; (8002720 <HAL_TIM_MspPostInit+0x16c>)
 8002624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002628:	4a3d      	ldr	r2, [pc, #244]	; (8002720 <HAL_TIM_MspPostInit+0x16c>)
 800262a:	f043 0302 	orr.w	r3, r3, #2
 800262e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002632:	4b3b      	ldr	r3, [pc, #236]	; (8002720 <HAL_TIM_MspPostInit+0x16c>)
 8002634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002640:	2330      	movs	r3, #48	; 0x30
 8002642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002644:	2302      	movs	r3, #2
 8002646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002648:	2302      	movs	r3, #2
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002650:	2302      	movs	r3, #2
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002654:	f107 031c 	add.w	r3, r7, #28
 8002658:	4619      	mov	r1, r3
 800265a:	4832      	ldr	r0, [pc, #200]	; (8002724 <HAL_TIM_MspPostInit+0x170>)
 800265c:	f004 fce4 	bl	8007028 <HAL_GPIO_Init>
}
 8002660:	e05a      	b.n	8002718 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a31      	ldr	r2, [pc, #196]	; (800272c <HAL_TIM_MspPostInit+0x178>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d131      	bne.n	80026d0 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800266c:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <HAL_TIM_MspPostInit+0x16c>)
 800266e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002672:	4a2b      	ldr	r2, [pc, #172]	; (8002720 <HAL_TIM_MspPostInit+0x16c>)
 8002674:	f043 0308 	orr.w	r3, r3, #8
 8002678:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800267c:	4b28      	ldr	r3, [pc, #160]	; (8002720 <HAL_TIM_MspPostInit+0x16c>)
 800267e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800268a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800268e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002698:	2300      	movs	r3, #0
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800269c:	2302      	movs	r3, #2
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	4619      	mov	r1, r3
 80026a6:	4822      	ldr	r0, [pc, #136]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 80026a8:	f004 fcbe 	bl	8007028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80026ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026b6:	2302      	movs	r3, #2
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026be:	2302      	movs	r3, #2
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026c2:	f107 031c 	add.w	r3, r7, #28
 80026c6:	4619      	mov	r1, r3
 80026c8:	4819      	ldr	r0, [pc, #100]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 80026ca:	f004 fcad 	bl	8007028 <HAL_GPIO_Init>
}
 80026ce:	e023      	b.n	8002718 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a17      	ldr	r2, [pc, #92]	; (8002734 <HAL_TIM_MspPostInit+0x180>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d11e      	bne.n	8002718 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026da:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_TIM_MspPostInit+0x16c>)
 80026dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e0:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <HAL_TIM_MspPostInit+0x16c>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026ea:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <HAL_TIM_MspPostInit+0x16c>)
 80026ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026f8:	2308      	movs	r3, #8
 80026fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fc:	2302      	movs	r3, #2
 80026fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002700:	2302      	movs	r3, #2
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	2300      	movs	r3, #0
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002708:	2302      	movs	r3, #2
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270c:	f107 031c 	add.w	r3, r7, #28
 8002710:	4619      	mov	r1, r3
 8002712:	4809      	ldr	r0, [pc, #36]	; (8002738 <HAL_TIM_MspPostInit+0x184>)
 8002714:	f004 fc88 	bl	8007028 <HAL_GPIO_Init>
}
 8002718:	bf00      	nop
 800271a:	3730      	adds	r7, #48	; 0x30
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	58024400 	.word	0x58024400
 8002724:	58020400 	.word	0x58020400
 8002728:	40000400 	.word	0x40000400
 800272c:	40000800 	.word	0x40000800
 8002730:	58020c00 	.word	0x58020c00
 8002734:	40000c00 	.word	0x40000c00
 8002738:	58020000 	.word	0x58020000

0800273c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b0ba      	sub	sp, #232	; 0xe8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002754:	f107 0318 	add.w	r3, r7, #24
 8002758:	22b8      	movs	r2, #184	; 0xb8
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f015 fd33 	bl	80181c8 <memset>
  if(huart->Instance==UART4)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a4d      	ldr	r2, [pc, #308]	; (800289c <HAL_UART_MspInit+0x160>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d147      	bne.n	80027fc <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800276c:	f04f 0202 	mov.w	r2, #2
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800277e:	f107 0318 	add.w	r3, r7, #24
 8002782:	4618      	mov	r0, r3
 8002784:	f007 fa26 	bl	8009bd4 <HAL_RCCEx_PeriphCLKConfig>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800278e:	f7ff f9db 	bl	8001b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002792:	4b43      	ldr	r3, [pc, #268]	; (80028a0 <HAL_UART_MspInit+0x164>)
 8002794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002798:	4a41      	ldr	r2, [pc, #260]	; (80028a0 <HAL_UART_MspInit+0x164>)
 800279a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800279e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027a2:	4b3f      	ldr	r3, [pc, #252]	; (80028a0 <HAL_UART_MspInit+0x164>)
 80027a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b0:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_UART_MspInit+0x164>)
 80027b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b6:	4a3a      	ldr	r2, [pc, #232]	; (80028a0 <HAL_UART_MspInit+0x164>)
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027c0:	4b37      	ldr	r3, [pc, #220]	; (80028a0 <HAL_UART_MspInit+0x164>)
 80027c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80027e8:	2308      	movs	r3, #8
 80027ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027f2:	4619      	mov	r1, r3
 80027f4:	482b      	ldr	r0, [pc, #172]	; (80028a4 <HAL_UART_MspInit+0x168>)
 80027f6:	f004 fc17 	bl	8007028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80027fa:	e04a      	b.n	8002892 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a29      	ldr	r2, [pc, #164]	; (80028a8 <HAL_UART_MspInit+0x16c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d145      	bne.n	8002892 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002806:	f04f 0201 	mov.w	r2, #1
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002818:	f107 0318 	add.w	r3, r7, #24
 800281c:	4618      	mov	r0, r3
 800281e:	f007 f9d9 	bl	8009bd4 <HAL_RCCEx_PeriphCLKConfig>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002828:	f7ff f98e 	bl	8001b48 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800282c:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <HAL_UART_MspInit+0x164>)
 800282e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002832:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <HAL_UART_MspInit+0x164>)
 8002834:	f043 0320 	orr.w	r3, r3, #32
 8002838:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800283c:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <HAL_UART_MspInit+0x164>)
 800283e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <HAL_UART_MspInit+0x164>)
 800284c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002850:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <HAL_UART_MspInit+0x164>)
 8002852:	f043 0304 	orr.w	r3, r3, #4
 8002856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_UART_MspInit+0x164>)
 800285c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002868:	23c0      	movs	r3, #192	; 0xc0
 800286a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287a:	2300      	movs	r3, #0
 800287c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002880:	2307      	movs	r3, #7
 8002882:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002886:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800288a:	4619      	mov	r1, r3
 800288c:	4807      	ldr	r0, [pc, #28]	; (80028ac <HAL_UART_MspInit+0x170>)
 800288e:	f004 fbcb 	bl	8007028 <HAL_GPIO_Init>
}
 8002892:	bf00      	nop
 8002894:	37e8      	adds	r7, #232	; 0xe8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40004c00 	.word	0x40004c00
 80028a0:	58024400 	.word	0x58024400
 80028a4:	58020400 	.word	0x58020400
 80028a8:	40011400 	.word	0x40011400
 80028ac:	58020800 	.word	0x58020800

080028b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028b4:	e7fe      	b.n	80028b4 <NMI_Handler+0x4>

080028b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ba:	e7fe      	b.n	80028ba <HardFault_Handler+0x4>

080028bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <MemManage_Handler+0x4>

080028c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028c6:	e7fe      	b.n	80028c6 <BusFault_Handler+0x4>

080028c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <UsageFault_Handler+0x4>

080028ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028fc:	f000 fa4a 	bl	8002d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}

08002904 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002908:	4802      	ldr	r0, [pc, #8]	; (8002914 <DMA1_Stream0_IRQHandler+0x10>)
 800290a:	f002 fec3 	bl	8005694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	24000af8 	.word	0x24000af8

08002918 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <DMA1_Stream1_IRQHandler+0x10>)
 800291e:	f002 feb9 	bl	8005694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	24000990 	.word	0x24000990

0800292c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <DMA1_Stream2_IRQHandler+0x10>)
 8002932:	f002 feaf 	bl	8005694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	24000b70 	.word	0x24000b70

08002940 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002944:	4802      	ldr	r0, [pc, #8]	; (8002950 <DMA1_Stream3_IRQHandler+0x10>)
 8002946:	f002 fea5 	bl	8005694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	24000a08 	.word	0x24000a08

08002954 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8002958:	4802      	ldr	r0, [pc, #8]	; (8002964 <DMA1_Stream4_IRQHandler+0x10>)
 800295a:	f002 fe9b 	bl	8005694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	24000a80 	.word	0x24000a80

08002968 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800296c:	4802      	ldr	r0, [pc, #8]	; (8002978 <DMA1_Stream5_IRQHandler+0x10>)
 800296e:	f002 fe91 	bl	8005694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	240003d0 	.word	0x240003d0

0800297c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <TIM4_IRQHandler+0x10>)
 8002982:	f00b fb5e 	bl	800e042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	24000860 	.word	0x24000860

08002990 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <I2C2_EV_IRQHandler+0x10>)
 8002996:	f004 fd99 	bl	80074cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	24000560 	.word	0x24000560

080029a4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <DMA2_Stream7_IRQHandler+0x10>)
 80029aa:	f002 fe73 	bl	8005694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	24000448 	.word	0x24000448

080029b8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <OTG_HS_IRQHandler+0x10>)
 80029be:	f004 ff8f 	bl	80078e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2400243c 	.word	0x2400243c

080029cc <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <SDMMC2_IRQHandler+0x10>)
 80029d2:	f009 ff55 	bl	800c880 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	240005b4 	.word	0x240005b4

080029e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return 1;
 80029e4:	2301      	movs	r3, #1
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <_kill>:

int _kill(int pid, int sig)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029fa:	f015 fbad 	bl	8018158 <__errno>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2216      	movs	r2, #22
 8002a02:	601a      	str	r2, [r3, #0]
  return -1;
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_exit>:

void _exit (int status)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a18:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ffe7 	bl	80029f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a22:	e7fe      	b.n	8002a22 <_exit+0x12>

08002a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	e00a      	b.n	8002a4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a36:	f3af 8000 	nop.w
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	60ba      	str	r2, [r7, #8]
 8002a42:	b2ca      	uxtb	r2, r1
 8002a44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	dbf0      	blt.n	8002a36 <_read+0x12>
  }

  return len;
 8002a54:	687b      	ldr	r3, [r7, #4]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e009      	b.n	8002a84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	60ba      	str	r2, [r7, #8]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	dbf1      	blt.n	8002a70 <_write+0x12>
  }
  return len;
 8002a8c:	687b      	ldr	r3, [r7, #4]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_close>:

int _close(int file)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002abe:	605a      	str	r2, [r3, #4]
  return 0;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <_isatty>:

int _isatty(int file)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b08:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <_sbrk+0x5c>)
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <_sbrk+0x60>)
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <_sbrk+0x64>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <_sbrk+0x64>)
 8002b1e:	4a12      	ldr	r2, [pc, #72]	; (8002b68 <_sbrk+0x68>)
 8002b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <_sbrk+0x64>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d207      	bcs.n	8002b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b30:	f015 fb12 	bl	8018158 <__errno>
 8002b34:	4603      	mov	r3, r0
 8002b36:	220c      	movs	r2, #12
 8002b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3e:	e009      	b.n	8002b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <_sbrk+0x64>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <_sbrk+0x64>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <_sbrk+0x64>)
 8002b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b52:	68fb      	ldr	r3, [r7, #12]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	24050000 	.word	0x24050000
 8002b60:	00000800 	.word	0x00000800
 8002b64:	24000d10 	.word	0x24000d10
 8002b68:	24002b78 	.word	0x24002b78

08002b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b70:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <SystemInit+0xd0>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	4a31      	ldr	r2, [pc, #196]	; (8002c3c <SystemInit+0xd0>)
 8002b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b80:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <SystemInit+0xd4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	2b06      	cmp	r3, #6
 8002b8a:	d807      	bhi.n	8002b9c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b8c:	4b2c      	ldr	r3, [pc, #176]	; (8002c40 <SystemInit+0xd4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 030f 	bic.w	r3, r3, #15
 8002b94:	4a2a      	ldr	r2, [pc, #168]	; (8002c40 <SystemInit+0xd4>)
 8002b96:	f043 0307 	orr.w	r3, r3, #7
 8002b9a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b9c:	4b29      	ldr	r3, [pc, #164]	; (8002c44 <SystemInit+0xd8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a28      	ldr	r2, [pc, #160]	; (8002c44 <SystemInit+0xd8>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ba8:	4b26      	ldr	r3, [pc, #152]	; (8002c44 <SystemInit+0xd8>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002bae:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <SystemInit+0xd8>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4924      	ldr	r1, [pc, #144]	; (8002c44 <SystemInit+0xd8>)
 8002bb4:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <SystemInit+0xdc>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002bba:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <SystemInit+0xd4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <SystemInit+0xd4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 030f 	bic.w	r3, r3, #15
 8002bce:	4a1c      	ldr	r2, [pc, #112]	; (8002c40 <SystemInit+0xd4>)
 8002bd0:	f043 0307 	orr.w	r3, r3, #7
 8002bd4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <SystemInit+0xd8>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002bdc:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <SystemInit+0xd8>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002be2:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <SystemInit+0xd8>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002be8:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <SystemInit+0xd8>)
 8002bea:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <SystemInit+0xe0>)
 8002bec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002bee:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <SystemInit+0xd8>)
 8002bf0:	4a17      	ldr	r2, [pc, #92]	; (8002c50 <SystemInit+0xe4>)
 8002bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002bf4:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <SystemInit+0xd8>)
 8002bf6:	4a17      	ldr	r2, [pc, #92]	; (8002c54 <SystemInit+0xe8>)
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <SystemInit+0xd8>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002c00:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <SystemInit+0xd8>)
 8002c02:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <SystemInit+0xe8>)
 8002c04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <SystemInit+0xd8>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002c0c:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <SystemInit+0xd8>)
 8002c0e:	4a11      	ldr	r2, [pc, #68]	; (8002c54 <SystemInit+0xe8>)
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <SystemInit+0xd8>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <SystemInit+0xd8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <SystemInit+0xd8>)
 8002c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c24:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <SystemInit+0xd8>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <SystemInit+0xec>)
 8002c2c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002c30:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00
 8002c40:	52002000 	.word	0x52002000
 8002c44:	58024400 	.word	0x58024400
 8002c48:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c4c:	02020200 	.word	0x02020200
 8002c50:	01ff0000 	.word	0x01ff0000
 8002c54:	01010280 	.word	0x01010280
 8002c58:	52004000 	.word	0x52004000

08002c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c60:	f7ff ff84 	bl	8002b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c64:	480c      	ldr	r0, [pc, #48]	; (8002c98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c66:	490d      	ldr	r1, [pc, #52]	; (8002c9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c6c:	e002      	b.n	8002c74 <LoopCopyDataInit>

08002c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c72:	3304      	adds	r3, #4

08002c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c78:	d3f9      	bcc.n	8002c6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ca8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c80:	e001      	b.n	8002c86 <LoopFillZerobss>

08002c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c84:	3204      	adds	r2, #4

08002c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c88:	d3fb      	bcc.n	8002c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c8a:	f015 fa6b 	bl	8018164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c8e:	f7fd ff0d 	bl	8000aac <main>
  bx  lr
 8002c92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c94:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002c98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002c9c:	240002d4 	.word	0x240002d4
  ldr r2, =_sidata
 8002ca0:	0801d2ec 	.word	0x0801d2ec
  ldr r2, =_sbss
 8002ca4:	240002d4 	.word	0x240002d4
  ldr r4, =_ebss
 8002ca8:	24002b78 	.word	0x24002b78

08002cac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cac:	e7fe      	b.n	8002cac <ADC3_IRQHandler>
	...

08002cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb6:	2003      	movs	r0, #3
 8002cb8:	f002 f952 	bl	8004f60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cbc:	f006 fdb4 	bl	8009828 <HAL_RCC_GetSysClockFreq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <HAL_Init+0x68>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	4913      	ldr	r1, [pc, #76]	; (8002d1c <HAL_Init+0x6c>)
 8002cce:	5ccb      	ldrb	r3, [r1, r3]
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cda:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <HAL_Init+0x68>)
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <HAL_Init+0x6c>)
 8002ce4:	5cd3      	ldrb	r3, [r2, r3]
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf0:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <HAL_Init+0x70>)
 8002cf2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cf4:	4a0b      	ldr	r2, [pc, #44]	; (8002d24 <HAL_Init+0x74>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cfa:	200f      	movs	r0, #15
 8002cfc:	f000 f814 	bl	8002d28 <HAL_InitTick>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e002      	b.n	8002d10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d0a:	f7fe ff23 	bl	8001b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	58024400 	.word	0x58024400
 8002d1c:	0801c9a4 	.word	0x0801c9a4
 8002d20:	24000004 	.word	0x24000004
 8002d24:	24000000 	.word	0x24000000

08002d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d30:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <HAL_InitTick+0x60>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e021      	b.n	8002d80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d3c:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <HAL_InitTick+0x64>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <HAL_InitTick+0x60>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	4619      	mov	r1, r3
 8002d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d52:	4618      	mov	r0, r3
 8002d54:	f002 f937 	bl	8004fc6 <HAL_SYSTICK_Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e00e      	b.n	8002d80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b0f      	cmp	r3, #15
 8002d66:	d80a      	bhi.n	8002d7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	f002 f901 	bl	8004f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d74:	4a06      	ldr	r2, [pc, #24]	; (8002d90 <HAL_InitTick+0x68>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e000      	b.n	8002d80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	2400000c 	.word	0x2400000c
 8002d8c:	24000000 	.word	0x24000000
 8002d90:	24000008 	.word	0x24000008

08002d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_IncTick+0x20>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HAL_IncTick+0x24>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4413      	add	r3, r2
 8002da4:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_IncTick+0x24>)
 8002da6:	6013      	str	r3, [r2, #0]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	2400000c 	.word	0x2400000c
 8002db8:	24000d14 	.word	0x24000d14

08002dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc0:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <HAL_GetTick+0x14>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	24000d14 	.word	0x24000d14

08002dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7ff ffee 	bl	8002dbc <HAL_GetTick>
 8002de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dec:	d005      	beq.n	8002dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_Delay+0x44>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dfa:	bf00      	nop
 8002dfc:	f7ff ffde 	bl	8002dbc <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d8f7      	bhi.n	8002dfc <HAL_Delay+0x28>
  {
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	2400000c 	.word	0x2400000c

08002e1c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002e26:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	401a      	ands	r2, r3
 8002e30:	4904      	ldr	r1, [pc, #16]	; (8002e44 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	58000400 	.word	0x58000400

08002e48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	609a      	str	r2, [r3, #8]
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	609a      	str	r2, [r3, #8]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3360      	adds	r3, #96	; 0x60
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a10      	ldr	r2, [pc, #64]	; (8002f10 <LL_ADC_SetOffset+0x60>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d10b      	bne.n	8002eec <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002eea:	e00b      	b.n	8002f04 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	430b      	orrs	r3, r1
 8002efe:	431a      	orrs	r2, r3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	601a      	str	r2, [r3, #0]
}
 8002f04:	bf00      	nop
 8002f06:	371c      	adds	r7, #28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	58026000 	.word	0x58026000

08002f14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3360      	adds	r3, #96	; 0x60
 8002f22:	461a      	mov	r2, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	431a      	orrs	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	611a      	str	r2, [r3, #16]
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a0c      	ldr	r2, [pc, #48]	; (8002fb4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00e      	beq.n	8002fa6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	3360      	adds	r3, #96	; 0x60
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	601a      	str	r2, [r3, #0]
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	371c      	adds	r7, #28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	58026000 	.word	0x58026000

08002fb8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4a0c      	ldr	r2, [pc, #48]	; (8002ff8 <LL_ADC_SetOffsetSaturation+0x40>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d10e      	bne.n	8002fea <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3360      	adds	r3, #96	; 0x60
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	58026000 	.word	0x58026000

08002ffc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4a0c      	ldr	r2, [pc, #48]	; (800303c <LL_ADC_SetOffsetSign+0x40>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d10e      	bne.n	800302e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3360      	adds	r3, #96	; 0x60
 8003014:	461a      	mov	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	431a      	orrs	r2, r3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	58026000 	.word	0x58026000

08003040 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3360      	adds	r3, #96	; 0x60
 8003050:	461a      	mov	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4a0c      	ldr	r2, [pc, #48]	; (8003090 <LL_ADC_SetOffsetState+0x50>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d108      	bne.n	8003074 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	431a      	orrs	r2, r3
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003072:	e007      	b.n	8003084 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	431a      	orrs	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	601a      	str	r2, [r3, #0]
}
 8003084:	bf00      	nop
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	58026000 	.word	0x58026000

08003094 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b087      	sub	sp, #28
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3330      	adds	r3, #48	; 0x30
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	4413      	add	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	211f      	movs	r1, #31
 80030e6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	401a      	ands	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	0e9b      	lsrs	r3, r3, #26
 80030f2:	f003 011f 	and.w	r1, r3, #31
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	431a      	orrs	r2, r3
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003112:	b480      	push	{r7}
 8003114:	b087      	sub	sp, #28
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	3314      	adds	r3, #20
 8003122:	461a      	mov	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	0e5b      	lsrs	r3, r3, #25
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	4413      	add	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	0d1b      	lsrs	r3, r3, #20
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	2107      	movs	r1, #7
 8003140:	fa01 f303 	lsl.w	r3, r1, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	401a      	ands	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	0d1b      	lsrs	r3, r3, #20
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	431a      	orrs	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a1a      	ldr	r2, [pc, #104]	; (80031e0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d115      	bne.n	80031a8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003188:	43db      	mvns	r3, r3
 800318a:	401a      	ands	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0318 	and.w	r3, r3, #24
 8003192:	4914      	ldr	r1, [pc, #80]	; (80031e4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003194:	40d9      	lsrs	r1, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	400b      	ands	r3, r1
 800319a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800319e:	431a      	orrs	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80031a6:	e014      	b.n	80031d2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031b4:	43db      	mvns	r3, r3
 80031b6:	401a      	ands	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f003 0318 	and.w	r3, r3, #24
 80031be:	4909      	ldr	r1, [pc, #36]	; (80031e4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80031c0:	40d9      	lsrs	r1, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	400b      	ands	r3, r1
 80031c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031ca:	431a      	orrs	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	58026000 	.word	0x58026000
 80031e4:	000fffff 	.word	0x000fffff

080031e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 031f 	and.w	r3, r3, #31
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <LL_ADC_DisableDeepPowerDown+0x20>)
 800322e:	4013      	ands	r3, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6093      	str	r3, [r2, #8]
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	5fffffc0 	.word	0x5fffffc0

08003244 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003258:	d101      	bne.n	800325e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <LL_ADC_EnableInternalRegulator+0x24>)
 800327a:	4013      	ands	r3, r2
 800327c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	6fffffc0 	.word	0x6fffffc0

08003294 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032a8:	d101      	bne.n	80032ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <LL_ADC_Enable+0x24>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	f043 0201 	orr.w	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	7fffffc0 	.word	0x7fffffc0

080032e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <LL_ADC_Disable+0x24>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	f043 0202 	orr.w	r2, r3, #2
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	7fffffc0 	.word	0x7fffffc0

0800330c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <LL_ADC_IsEnabled+0x18>
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <LL_ADC_IsEnabled+0x1a>
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b02      	cmp	r3, #2
 8003344:	d101      	bne.n	800334a <LL_ADC_IsDisableOngoing+0x18>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <LL_ADC_IsDisableOngoing+0x1a>
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <LL_ADC_REG_StartConversion+0x24>)
 8003366:	4013      	ands	r3, r2
 8003368:	f043 0204 	orr.w	r2, r3, #4
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	7fffffc0 	.word	0x7fffffc0

08003380 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <LL_ADC_REG_StopConversion+0x24>)
 800338e:	4013      	ands	r3, r2
 8003390:	f043 0210 	orr.w	r2, r3, #16
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	7fffffc0 	.word	0x7fffffc0

080033a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d101      	bne.n	80033c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <LL_ADC_INJ_StopConversion+0x24>)
 80033de:	4013      	ands	r3, r2
 80033e0:	f043 0220 	orr.w	r2, r3, #32
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	7fffffc0 	.word	0x7fffffc0

080033f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b08      	cmp	r3, #8
 800340a:	d101      	bne.n	8003410 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b089      	sub	sp, #36	; 0x24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800342c:	2300      	movs	r3, #0
 800342e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e1ee      	b.n	8003818 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003444:	2b00      	cmp	r3, #0
 8003446:	d109      	bne.n	800345c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7fe fb9d 	bl	8001b88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff feef 	bl	8003244 <LL_ADC_IsDeepPowerDownEnabled>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d004      	beq.n	8003476 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fed5 	bl	8003220 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff ff0a 	bl	8003294 <LL_ADC_IsInternalRegulatorEnabled>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d114      	bne.n	80034b0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff feee 	bl	800326c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003490:	4b8e      	ldr	r3, [pc, #568]	; (80036cc <HAL_ADC_Init+0x2ac>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	099b      	lsrs	r3, r3, #6
 8003496:	4a8e      	ldr	r2, [pc, #568]	; (80036d0 <HAL_ADC_Init+0x2b0>)
 8003498:	fba2 2303 	umull	r2, r3, r2, r3
 800349c:	099b      	lsrs	r3, r3, #6
 800349e:	3301      	adds	r3, #1
 80034a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034a2:	e002      	b.n	80034aa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f9      	bne.n	80034a4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff feed 	bl	8003294 <LL_ADC_IsInternalRegulatorEnabled>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10d      	bne.n	80034dc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c4:	f043 0210 	orr.w	r2, r3, #16
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d0:	f043 0201 	orr.w	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff61 	bl	80033a8 <LL_ADC_REG_IsConversionOngoing>
 80034e6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f040 8188 	bne.w	8003806 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f040 8184 	bne.w	8003806 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003502:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003506:	f043 0202 	orr.w	r2, r3, #2
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fefa 	bl	800330c <LL_ADC_IsEnabled>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d136      	bne.n	800358c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a6c      	ldr	r2, [pc, #432]	; (80036d4 <HAL_ADC_Init+0x2b4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_ADC_Init+0x112>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a6a      	ldr	r2, [pc, #424]	; (80036d8 <HAL_ADC_Init+0x2b8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10e      	bne.n	8003550 <HAL_ADC_Init+0x130>
 8003532:	4868      	ldr	r0, [pc, #416]	; (80036d4 <HAL_ADC_Init+0x2b4>)
 8003534:	f7ff feea 	bl	800330c <LL_ADC_IsEnabled>
 8003538:	4604      	mov	r4, r0
 800353a:	4867      	ldr	r0, [pc, #412]	; (80036d8 <HAL_ADC_Init+0x2b8>)
 800353c:	f7ff fee6 	bl	800330c <LL_ADC_IsEnabled>
 8003540:	4603      	mov	r3, r0
 8003542:	4323      	orrs	r3, r4
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	e008      	b.n	8003562 <HAL_ADC_Init+0x142>
 8003550:	4862      	ldr	r0, [pc, #392]	; (80036dc <HAL_ADC_Init+0x2bc>)
 8003552:	f7ff fedb 	bl	800330c <LL_ADC_IsEnabled>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d012      	beq.n	800358c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a5a      	ldr	r2, [pc, #360]	; (80036d4 <HAL_ADC_Init+0x2b4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d004      	beq.n	800357a <HAL_ADC_Init+0x15a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a58      	ldr	r2, [pc, #352]	; (80036d8 <HAL_ADC_Init+0x2b8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d101      	bne.n	800357e <HAL_ADC_Init+0x15e>
 800357a:	4a59      	ldr	r2, [pc, #356]	; (80036e0 <HAL_ADC_Init+0x2c0>)
 800357c:	e000      	b.n	8003580 <HAL_ADC_Init+0x160>
 800357e:	4a59      	ldr	r2, [pc, #356]	; (80036e4 <HAL_ADC_Init+0x2c4>)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4619      	mov	r1, r3
 8003586:	4610      	mov	r0, r2
 8003588:	f7ff fc5e 	bl	8002e48 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a52      	ldr	r2, [pc, #328]	; (80036dc <HAL_ADC_Init+0x2bc>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d129      	bne.n	80035ea <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7e5b      	ldrb	r3, [r3, #25]
 800359a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80035a0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80035a6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d013      	beq.n	80035d8 <HAL_ADC_Init+0x1b8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b0c      	cmp	r3, #12
 80035b6:	d00d      	beq.n	80035d4 <HAL_ADC_Init+0x1b4>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b1c      	cmp	r3, #28
 80035be:	d007      	beq.n	80035d0 <HAL_ADC_Init+0x1b0>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b18      	cmp	r3, #24
 80035c6:	d101      	bne.n	80035cc <HAL_ADC_Init+0x1ac>
 80035c8:	2318      	movs	r3, #24
 80035ca:	e006      	b.n	80035da <HAL_ADC_Init+0x1ba>
 80035cc:	2300      	movs	r3, #0
 80035ce:	e004      	b.n	80035da <HAL_ADC_Init+0x1ba>
 80035d0:	2310      	movs	r3, #16
 80035d2:	e002      	b.n	80035da <HAL_ADC_Init+0x1ba>
 80035d4:	2308      	movs	r3, #8
 80035d6:	e000      	b.n	80035da <HAL_ADC_Init+0x1ba>
 80035d8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80035da:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035e2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
 80035e8:	e00e      	b.n	8003608 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	7e5b      	ldrb	r3, [r3, #25]
 80035ee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035f4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80035fa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003602:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003604:	4313      	orrs	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d106      	bne.n	8003620 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	3b01      	subs	r3, #1
 8003618:	045b      	lsls	r3, r3, #17
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	2b00      	cmp	r3, #0
 8003626:	d009      	beq.n	800363c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a26      	ldr	r2, [pc, #152]	; (80036dc <HAL_ADC_Init+0x2bc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d115      	bne.n	8003672 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	4b26      	ldr	r3, [pc, #152]	; (80036e8 <HAL_ADC_Init+0x2c8>)
 800364e:	4013      	ands	r3, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	69b9      	ldr	r1, [r7, #24]
 8003656:	430b      	orrs	r3, r1
 8003658:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	611a      	str	r2, [r3, #16]
 8003670:	e009      	b.n	8003686 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	4b1c      	ldr	r3, [pc, #112]	; (80036ec <HAL_ADC_Init+0x2cc>)
 800367a:	4013      	ands	r3, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	69b9      	ldr	r1, [r7, #24]
 8003682:	430b      	orrs	r3, r1
 8003684:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fe8c 	bl	80033a8 <LL_ADC_REG_IsConversionOngoing>
 8003690:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff feae 	bl	80033f8 <LL_ADC_INJ_IsConversionOngoing>
 800369c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f040 808e 	bne.w	80037c2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f040 808a 	bne.w	80037c2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <HAL_ADC_Init+0x2bc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d11b      	bne.n	80036f0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7e1b      	ldrb	r3, [r3, #24]
 80036bc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036c4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	e018      	b.n	80036fe <HAL_ADC_Init+0x2de>
 80036cc:	24000000 	.word	0x24000000
 80036d0:	053e2d63 	.word	0x053e2d63
 80036d4:	40022000 	.word	0x40022000
 80036d8:	40022100 	.word	0x40022100
 80036dc:	58026000 	.word	0x58026000
 80036e0:	40022300 	.word	0x40022300
 80036e4:	58026300 	.word	0x58026300
 80036e8:	fff04007 	.word	0xfff04007
 80036ec:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	7e1b      	ldrb	r3, [r3, #24]
 80036f4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	4b46      	ldr	r3, [pc, #280]	; (8003820 <HAL_ADC_Init+0x400>)
 8003706:	4013      	ands	r3, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	69b9      	ldr	r1, [r7, #24]
 800370e:	430b      	orrs	r3, r1
 8003710:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003718:	2b01      	cmp	r3, #1
 800371a:	d137      	bne.n	800378c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a3f      	ldr	r2, [pc, #252]	; (8003824 <HAL_ADC_Init+0x404>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d116      	bne.n	800375a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	4b3d      	ldr	r3, [pc, #244]	; (8003828 <HAL_ADC_Init+0x408>)
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800373e:	4311      	orrs	r1, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003744:	4311      	orrs	r1, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800374a:	430a      	orrs	r2, r1
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	611a      	str	r2, [r3, #16]
 8003758:	e020      	b.n	800379c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	4b32      	ldr	r3, [pc, #200]	; (800382c <HAL_ADC_Init+0x40c>)
 8003762:	4013      	ands	r3, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003768:	3a01      	subs	r2, #1
 800376a:	0411      	lsls	r1, r2, #16
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003770:	4311      	orrs	r1, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003776:	4311      	orrs	r1, r2
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800377c:	430a      	orrs	r2, r1
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0201 	orr.w	r2, r2, #1
 8003788:	611a      	str	r2, [r3, #16]
 800378a:	e007      	b.n	800379c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <HAL_ADC_Init+0x404>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d002      	beq.n	80037c2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f001 f909 	bl	80049d4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d10c      	bne.n	80037e4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	f023 010f 	bic.w	r1, r3, #15
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	1e5a      	subs	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
 80037e2:	e007      	b.n	80037f4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 020f 	bic.w	r2, r2, #15
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f8:	f023 0303 	bic.w	r3, r3, #3
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	661a      	str	r2, [r3, #96]	; 0x60
 8003804:	e007      	b.n	8003816 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380a:	f043 0210 	orr.w	r2, r3, #16
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003816:	7ffb      	ldrb	r3, [r7, #31]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3724      	adds	r7, #36	; 0x24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd90      	pop	{r4, r7, pc}
 8003820:	ffffbffc 	.word	0xffffbffc
 8003824:	58026000 	.word	0x58026000
 8003828:	fc00f81f 	.word	0xfc00f81f
 800382c:	fc00f81e 	.word	0xfc00f81e

08003830 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a5c      	ldr	r2, [pc, #368]	; (80039b0 <HAL_ADC_Start+0x180>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_ADC_Start+0x1c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a5b      	ldr	r2, [pc, #364]	; (80039b4 <HAL_ADC_Start+0x184>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_ADC_Start+0x20>
 800384c:	4b5a      	ldr	r3, [pc, #360]	; (80039b8 <HAL_ADC_Start+0x188>)
 800384e:	e000      	b.n	8003852 <HAL_ADC_Start+0x22>
 8003850:	4b5a      	ldr	r3, [pc, #360]	; (80039bc <HAL_ADC_Start+0x18c>)
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fcc8 	bl	80031e8 <LL_ADC_GetMultimode>
 8003858:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fda2 	bl	80033a8 <LL_ADC_REG_IsConversionOngoing>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	f040 809a 	bne.w	80039a0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_ADC_Start+0x4a>
 8003876:	2302      	movs	r3, #2
 8003878:	e095      	b.n	80039a6 <HAL_ADC_Start+0x176>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 ffbc 	bl	8004800 <ADC_Enable>
 8003888:	4603      	mov	r3, r0
 800388a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800388c:	7dfb      	ldrb	r3, [r7, #23]
 800388e:	2b00      	cmp	r3, #0
 8003890:	f040 8081 	bne.w	8003996 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003898:	4b49      	ldr	r3, [pc, #292]	; (80039c0 <HAL_ADC_Start+0x190>)
 800389a:	4013      	ands	r3, r2
 800389c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a42      	ldr	r2, [pc, #264]	; (80039b4 <HAL_ADC_Start+0x184>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d002      	beq.n	80038b4 <HAL_ADC_Start+0x84>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	e000      	b.n	80038b6 <HAL_ADC_Start+0x86>
 80038b4:	4b3e      	ldr	r3, [pc, #248]	; (80039b0 <HAL_ADC_Start+0x180>)
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d002      	beq.n	80038c4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d105      	bne.n	80038d0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038dc:	d106      	bne.n	80038ec <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038e2:	f023 0206 	bic.w	r2, r3, #6
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	665a      	str	r2, [r3, #100]	; 0x64
 80038ea:	e002      	b.n	80038f2 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	221c      	movs	r2, #28
 80038f8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a2b      	ldr	r2, [pc, #172]	; (80039b4 <HAL_ADC_Start+0x184>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d002      	beq.n	8003912 <HAL_ADC_Start+0xe2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	e000      	b.n	8003914 <HAL_ADC_Start+0xe4>
 8003912:	4b27      	ldr	r3, [pc, #156]	; (80039b0 <HAL_ADC_Start+0x180>)
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	4293      	cmp	r3, r2
 800391a:	d008      	beq.n	800392e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b05      	cmp	r3, #5
 8003926:	d002      	beq.n	800392e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	2b09      	cmp	r3, #9
 800392c:	d114      	bne.n	8003958 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003940:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003944:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff fd01 	bl	8003358 <LL_ADC_REG_StartConversion>
 8003956:	e025      	b.n	80039a4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a12      	ldr	r2, [pc, #72]	; (80039b4 <HAL_ADC_Start+0x184>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d002      	beq.n	8003974 <HAL_ADC_Start+0x144>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	e000      	b.n	8003976 <HAL_ADC_Start+0x146>
 8003974:	4b0e      	ldr	r3, [pc, #56]	; (80039b0 <HAL_ADC_Start+0x180>)
 8003976:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00f      	beq.n	80039a4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003988:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800398c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	661a      	str	r2, [r3, #96]	; 0x60
 8003994:	e006      	b.n	80039a4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800399e:	e001      	b.n	80039a4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039a0:	2302      	movs	r3, #2
 80039a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40022000 	.word	0x40022000
 80039b4:	40022100 	.word	0x40022100
 80039b8:	40022300 	.word	0x40022300
 80039bc:	58026300 	.word	0x58026300
 80039c0:	fffff0fe 	.word	0xfffff0fe

080039c4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_ADC_Stop+0x16>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e021      	b.n	8003a1e <HAL_ADC_Stop+0x5a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80039e2:	2103      	movs	r1, #3
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fe4f 	bl	8004688 <ADC_ConversionStop>
 80039ea:	4603      	mov	r3, r0
 80039ec:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10f      	bne.n	8003a14 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 ff8d 	bl	8004914 <ADC_Disable>
 80039fa:	4603      	mov	r3, r0
 80039fc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d107      	bne.n	8003a14 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a08:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <HAL_ADC_Stop+0x64>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	f043 0201 	orr.w	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	ffffeefe 	.word	0xffffeefe

08003a2c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a72      	ldr	r2, [pc, #456]	; (8003c04 <HAL_ADC_PollForConversion+0x1d8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d004      	beq.n	8003a4a <HAL_ADC_PollForConversion+0x1e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a70      	ldr	r2, [pc, #448]	; (8003c08 <HAL_ADC_PollForConversion+0x1dc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <HAL_ADC_PollForConversion+0x22>
 8003a4a:	4b70      	ldr	r3, [pc, #448]	; (8003c0c <HAL_ADC_PollForConversion+0x1e0>)
 8003a4c:	e000      	b.n	8003a50 <HAL_ADC_PollForConversion+0x24>
 8003a4e:	4b70      	ldr	r3, [pc, #448]	; (8003c10 <HAL_ADC_PollForConversion+0x1e4>)
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff fbc9 	bl	80031e8 <LL_ADC_GetMultimode>
 8003a56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d102      	bne.n	8003a66 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003a60:	2308      	movs	r3, #8
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	e037      	b.n	8003ad6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2b05      	cmp	r3, #5
 8003a70:	d002      	beq.n	8003a78 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b09      	cmp	r3, #9
 8003a76:	d111      	bne.n	8003a9c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8a:	f043 0220 	orr.w	r2, r3, #32
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e0b1      	b.n	8003bfa <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a96:	2304      	movs	r3, #4
 8003a98:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003a9a:	e01c      	b.n	8003ad6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a58      	ldr	r2, [pc, #352]	; (8003c04 <HAL_ADC_PollForConversion+0x1d8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <HAL_ADC_PollForConversion+0x84>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a57      	ldr	r2, [pc, #348]	; (8003c08 <HAL_ADC_PollForConversion+0x1dc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d101      	bne.n	8003ab4 <HAL_ADC_PollForConversion+0x88>
 8003ab0:	4b56      	ldr	r3, [pc, #344]	; (8003c0c <HAL_ADC_PollForConversion+0x1e0>)
 8003ab2:	e000      	b.n	8003ab6 <HAL_ADC_PollForConversion+0x8a>
 8003ab4:	4b56      	ldr	r3, [pc, #344]	; (8003c10 <HAL_ADC_PollForConversion+0x1e4>)
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fba4 	bl	8003204 <LL_ADC_GetMultiDMATransfer>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac6:	f043 0220 	orr.w	r2, r3, #32
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e093      	b.n	8003bfa <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003ad2:	2304      	movs	r3, #4
 8003ad4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ad6:	f7ff f971 	bl	8002dbc <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003adc:	e021      	b.n	8003b22 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae4:	d01d      	beq.n	8003b22 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003ae6:	f7ff f969 	bl	8002dbc <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d302      	bcc.n	8003afc <HAL_ADC_PollForConversion+0xd0>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d112      	bne.n	8003b22 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10b      	bne.n	8003b22 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0e:	f043 0204 	orr.w	r2, r3, #4
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e06b      	b.n	8003bfa <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0d6      	beq.n	8003ade <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff faa7 	bl	8003094 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01c      	beq.n	8003b86 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7e5b      	ldrb	r3, [r3, #25]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d118      	bne.n	8003b86 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d111      	bne.n	8003b86 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d105      	bne.n	8003b86 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7e:	f043 0201 	orr.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1f      	ldr	r2, [pc, #124]	; (8003c08 <HAL_ADC_PollForConversion+0x1dc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d002      	beq.n	8003b96 <HAL_ADC_PollForConversion+0x16a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	e000      	b.n	8003b98 <HAL_ADC_PollForConversion+0x16c>
 8003b96:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <HAL_ADC_PollForConversion+0x1d8>)
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d008      	beq.n	8003bb2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b05      	cmp	r3, #5
 8003baa:	d002      	beq.n	8003bb2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b09      	cmp	r3, #9
 8003bb0:	d104      	bne.n	8003bbc <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	e00c      	b.n	8003bd6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a11      	ldr	r2, [pc, #68]	; (8003c08 <HAL_ADC_PollForConversion+0x1dc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d002      	beq.n	8003bcc <HAL_ADC_PollForConversion+0x1a0>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	e000      	b.n	8003bce <HAL_ADC_PollForConversion+0x1a2>
 8003bcc:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <HAL_ADC_PollForConversion+0x1d8>)
 8003bce:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d104      	bne.n	8003be6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2208      	movs	r2, #8
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	e008      	b.n	8003bf8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d103      	bne.n	8003bf8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	220c      	movs	r2, #12
 8003bf6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3720      	adds	r7, #32
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40022000 	.word	0x40022000
 8003c08:	40022100 	.word	0x40022100
 8003c0c:	40022300 	.word	0x40022300
 8003c10:	58026300 	.word	0x58026300

08003c14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c30:	b590      	push	{r4, r7, lr}
 8003c32:	b0b9      	sub	sp, #228	; 0xe4
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c4a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4aa9      	ldr	r2, [pc, #676]	; (8003ef8 <HAL_ADC_ConfigChannel+0x2c8>)
 8003c52:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d102      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x34>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	f000 bcfa 	b.w	8004658 <HAL_ADC_ConfigChannel+0xa28>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff fb99 	bl	80033a8 <LL_ADC_REG_IsConversionOngoing>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f040 84de 	bne.w	800463a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a9e      	ldr	r2, [pc, #632]	; (8003efc <HAL_ADC_ConfigChannel+0x2cc>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d033      	beq.n	8003cf0 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d108      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x76>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	0e9b      	lsrs	r3, r3, #26
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	e01d      	b.n	8003ce2 <HAL_ADC_ConfigChannel+0xb2>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cb2:	fa93 f3a3 	rbit	r3, r3
 8003cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003cc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003cca:	2320      	movs	r3, #32
 8003ccc:	e004      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003cce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cd2:	fab3 f383 	clz	r3, r3
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	2201      	movs	r2, #1
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	69d1      	ldr	r1, [r2, #28]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	430b      	orrs	r3, r1
 8003cee:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	6859      	ldr	r1, [r3, #4]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	f7ff f9dc 	bl	80030ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff fb4e 	bl	80033a8 <LL_ADC_REG_IsConversionOngoing>
 8003d0c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fb6f 	bl	80033f8 <LL_ADC_INJ_IsConversionOngoing>
 8003d1a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f040 8270 	bne.w	8004208 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f040 826b 	bne.w	8004208 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6819      	ldr	r1, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f7ff f9e7 	bl	8003112 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a6c      	ldr	r2, [pc, #432]	; (8003efc <HAL_ADC_ConfigChannel+0x2cc>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10d      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	08db      	lsrs	r3, r3, #3
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d68:	e032      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d6a:	4b65      	ldr	r3, [pc, #404]	; (8003f00 <HAL_ADC_ConfigChannel+0x2d0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003d72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d76:	d10b      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x160>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	089b      	lsrs	r3, r3, #2
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	e01d      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x19c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0310 	and.w	r3, r3, #16
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10b      	bne.n	8003db6 <HAL_ADC_ConfigChannel+0x186>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	089b      	lsrs	r3, r3, #2
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	e00a      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x19c>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	089b      	lsrs	r3, r3, #2
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d048      	beq.n	8003e6a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6919      	ldr	r1, [r3, #16]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003de8:	f7ff f862 	bl	8002eb0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a42      	ldr	r2, [pc, #264]	; (8003efc <HAL_ADC_ConfigChannel+0x2cc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d119      	bne.n	8003e2a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6919      	ldr	r1, [r3, #16]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	461a      	mov	r2, r3
 8003e04:	f7ff f8fa 	bl	8002ffc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	6919      	ldr	r1, [r3, #16]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d102      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x1f0>
 8003e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e1e:	e000      	b.n	8003e22 <HAL_ADC_ConfigChannel+0x1f2>
 8003e20:	2300      	movs	r3, #0
 8003e22:	461a      	mov	r2, r3
 8003e24:	f7ff f8c8 	bl	8002fb8 <LL_ADC_SetOffsetSaturation>
 8003e28:	e1ee      	b.n	8004208 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6919      	ldr	r1, [r3, #16]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d102      	bne.n	8003e42 <HAL_ADC_ConfigChannel+0x212>
 8003e3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e40:	e000      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x214>
 8003e42:	2300      	movs	r3, #0
 8003e44:	461a      	mov	r2, r3
 8003e46:	f7ff f895 	bl	8002f74 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6919      	ldr	r1, [r3, #16]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	7e1b      	ldrb	r3, [r3, #24]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d102      	bne.n	8003e60 <HAL_ADC_ConfigChannel+0x230>
 8003e5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e5e:	e000      	b.n	8003e62 <HAL_ADC_ConfigChannel+0x232>
 8003e60:	2300      	movs	r3, #0
 8003e62:	461a      	mov	r2, r3
 8003e64:	f7ff f86c 	bl	8002f40 <LL_ADC_SetDataRightShift>
 8003e68:	e1ce      	b.n	8004208 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a23      	ldr	r2, [pc, #140]	; (8003efc <HAL_ADC_ConfigChannel+0x2cc>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	f040 8181 	bne.w	8004178 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff f849 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x272>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff f83e 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	0e9b      	lsrs	r3, r3, #26
 8003e9c:	f003 021f 	and.w	r2, r3, #31
 8003ea0:	e01e      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x2b0>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff f833 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003eb8:	fa93 f3a3 	rbit	r3, r3
 8003ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003ec0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ec4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003ec8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003ed0:	2320      	movs	r3, #32
 8003ed2:	e004      	b.n	8003ede <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003ed4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ed8:	fab3 f383 	clz	r3, r3
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10b      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x2d4>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	0e9b      	lsrs	r3, r3, #26
 8003ef2:	f003 031f 	and.w	r3, r3, #31
 8003ef6:	e01e      	b.n	8003f36 <HAL_ADC_ConfigChannel+0x306>
 8003ef8:	47ff0000 	.word	0x47ff0000
 8003efc:	58026000 	.word	0x58026000
 8003f00:	5c001000 	.word	0x5c001000
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f10:	fa93 f3a3 	rbit	r3, r3
 8003f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003f18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003f20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003f28:	2320      	movs	r3, #32
 8003f2a:	e004      	b.n	8003f36 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8003f2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f30:	fab3 f383 	clz	r3, r3
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d106      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2100      	movs	r1, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff f87c 	bl	8003040 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe ffe0 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10a      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x344>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2101      	movs	r1, #1
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fe ffd5 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	0e9b      	lsrs	r3, r3, #26
 8003f6e:	f003 021f 	and.w	r2, r3, #31
 8003f72:	e01e      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0x382>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2101      	movs	r1, #1
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe ffca 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f8a:	fa93 f3a3 	rbit	r3, r3
 8003f8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003f92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003f9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003fa2:	2320      	movs	r3, #32
 8003fa4:	e004      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003fa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003faa:	fab3 f383 	clz	r3, r3
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d105      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x39a>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	0e9b      	lsrs	r3, r3, #26
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	e018      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x3cc>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003fd6:	fa93 f3a3 	rbit	r3, r3
 8003fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003fde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fe2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003fe6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003fee:	2320      	movs	r3, #32
 8003ff0:	e004      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003ff2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ff6:	fab3 f383 	clz	r3, r3
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d106      	bne.n	800400e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2200      	movs	r2, #0
 8004006:	2101      	movs	r1, #1
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff f819 	bl	8003040 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2102      	movs	r1, #2
 8004014:	4618      	mov	r0, r3
 8004016:	f7fe ff7d 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 800401a:	4603      	mov	r3, r0
 800401c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <HAL_ADC_ConfigChannel+0x40a>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2102      	movs	r1, #2
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe ff72 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8004030:	4603      	mov	r3, r0
 8004032:	0e9b      	lsrs	r3, r3, #26
 8004034:	f003 021f 	and.w	r2, r3, #31
 8004038:	e01e      	b.n	8004078 <HAL_ADC_ConfigChannel+0x448>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2102      	movs	r1, #2
 8004040:	4618      	mov	r0, r3
 8004042:	f7fe ff67 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8004046:	4603      	mov	r3, r0
 8004048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004050:	fa93 f3a3 	rbit	r3, r3
 8004054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004058:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800405c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004060:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004068:	2320      	movs	r3, #32
 800406a:	e004      	b.n	8004076 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800406c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004070:	fab3 f383 	clz	r3, r3
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004080:	2b00      	cmp	r3, #0
 8004082:	d105      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x460>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	0e9b      	lsrs	r3, r3, #26
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	e014      	b.n	80040ba <HAL_ADC_ConfigChannel+0x48a>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800409e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80040a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80040ac:	2320      	movs	r3, #32
 80040ae:	e004      	b.n	80040ba <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80040b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040b4:	fab3 f383 	clz	r3, r3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d106      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2200      	movs	r2, #0
 80040c4:	2102      	movs	r1, #2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fe ffba 	bl	8003040 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2103      	movs	r1, #3
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fe ff1e 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 80040d8:	4603      	mov	r3, r0
 80040da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x4c8>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2103      	movs	r1, #3
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe ff13 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 80040ee:	4603      	mov	r3, r0
 80040f0:	0e9b      	lsrs	r3, r3, #26
 80040f2:	f003 021f 	and.w	r2, r3, #31
 80040f6:	e017      	b.n	8004128 <HAL_ADC_ConfigChannel+0x4f8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2103      	movs	r1, #3
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe ff08 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8004104:	4603      	mov	r3, r0
 8004106:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800410a:	fa93 f3a3 	rbit	r3, r3
 800410e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004112:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800411a:	2320      	movs	r3, #32
 800411c:	e003      	b.n	8004126 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800411e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004120:	fab3 f383 	clz	r3, r3
 8004124:	b2db      	uxtb	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004130:	2b00      	cmp	r3, #0
 8004132:	d105      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x510>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	0e9b      	lsrs	r3, r3, #26
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	e011      	b.n	8004164 <HAL_ADC_ConfigChannel+0x534>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004146:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004148:	fa93 f3a3 	rbit	r3, r3
 800414c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800414e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004150:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004152:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004158:	2320      	movs	r3, #32
 800415a:	e003      	b.n	8004164 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800415c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	429a      	cmp	r2, r3
 8004166:	d14f      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2200      	movs	r2, #0
 800416e:	2103      	movs	r1, #3
 8004170:	4618      	mov	r0, r3
 8004172:	f7fe ff65 	bl	8003040 <LL_ADC_SetOffsetState>
 8004176:	e047      	b.n	8004208 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800417e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	069b      	lsls	r3, r3, #26
 8004188:	429a      	cmp	r2, r3
 800418a:	d107      	bne.n	800419c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800419a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	069b      	lsls	r3, r3, #26
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d107      	bne.n	80041c0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041be:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	069b      	lsls	r3, r3, #26
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d107      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041e2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	069b      	lsls	r3, r3, #26
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d107      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004206:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff f87d 	bl	800330c <LL_ADC_IsEnabled>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	f040 8219 	bne.w	800464c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6819      	ldr	r1, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	461a      	mov	r2, r3
 8004228:	f7fe ff9e 	bl	8003168 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4aa1      	ldr	r2, [pc, #644]	; (80044b8 <HAL_ADC_ConfigChannel+0x888>)
 8004232:	4293      	cmp	r3, r2
 8004234:	f040 812e 	bne.w	8004494 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x630>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	0e9b      	lsrs	r3, r3, #26
 800424e:	3301      	adds	r3, #1
 8004250:	f003 031f 	and.w	r3, r3, #31
 8004254:	2b09      	cmp	r3, #9
 8004256:	bf94      	ite	ls
 8004258:	2301      	movls	r3, #1
 800425a:	2300      	movhi	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e019      	b.n	8004294 <HAL_ADC_ConfigChannel+0x664>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004268:	fa93 f3a3 	rbit	r3, r3
 800426c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800426e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004270:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004278:	2320      	movs	r3, #32
 800427a:	e003      	b.n	8004284 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 800427c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427e:	fab3 f383 	clz	r3, r3
 8004282:	b2db      	uxtb	r3, r3
 8004284:	3301      	adds	r3, #1
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	2b09      	cmp	r3, #9
 800428c:	bf94      	ite	ls
 800428e:	2301      	movls	r3, #1
 8004290:	2300      	movhi	r3, #0
 8004292:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004294:	2b00      	cmp	r3, #0
 8004296:	d079      	beq.n	800438c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d107      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x684>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	0e9b      	lsrs	r3, r3, #26
 80042aa:	3301      	adds	r3, #1
 80042ac:	069b      	lsls	r3, r3, #26
 80042ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042b2:	e015      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x6b0>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042bc:	fa93 f3a3 	rbit	r3, r3
 80042c0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80042c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80042c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80042cc:	2320      	movs	r3, #32
 80042ce:	e003      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80042d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d2:	fab3 f383 	clz	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	3301      	adds	r3, #1
 80042da:	069b      	lsls	r3, r3, #26
 80042dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x6d0>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	0e9b      	lsrs	r3, r3, #26
 80042f2:	3301      	adds	r3, #1
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	2101      	movs	r1, #1
 80042fa:	fa01 f303 	lsl.w	r3, r1, r3
 80042fe:	e017      	b.n	8004330 <HAL_ADC_ConfigChannel+0x700>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004308:	fa93 f3a3 	rbit	r3, r3
 800430c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800430e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004310:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004318:	2320      	movs	r3, #32
 800431a:	e003      	b.n	8004324 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800431c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431e:	fab3 f383 	clz	r3, r3
 8004322:	b2db      	uxtb	r3, r3
 8004324:	3301      	adds	r3, #1
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	2101      	movs	r1, #1
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	ea42 0103 	orr.w	r1, r2, r3
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x726>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	0e9b      	lsrs	r3, r3, #26
 8004346:	3301      	adds	r3, #1
 8004348:	f003 021f 	and.w	r2, r3, #31
 800434c:	4613      	mov	r3, r2
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	4413      	add	r3, r2
 8004352:	051b      	lsls	r3, r3, #20
 8004354:	e018      	b.n	8004388 <HAL_ADC_ConfigChannel+0x758>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435e:	fa93 f3a3 	rbit	r3, r3
 8004362:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800436e:	2320      	movs	r3, #32
 8004370:	e003      	b.n	800437a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004374:	fab3 f383 	clz	r3, r3
 8004378:	b2db      	uxtb	r3, r3
 800437a:	3301      	adds	r3, #1
 800437c:	f003 021f 	and.w	r2, r3, #31
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004388:	430b      	orrs	r3, r1
 800438a:	e07e      	b.n	800448a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004394:	2b00      	cmp	r3, #0
 8004396:	d107      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x778>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	0e9b      	lsrs	r3, r3, #26
 800439e:	3301      	adds	r3, #1
 80043a0:	069b      	lsls	r3, r3, #26
 80043a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043a6:	e015      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x7a4>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b0:	fa93 f3a3 	rbit	r3, r3
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80043c0:	2320      	movs	r3, #32
 80043c2:	e003      	b.n	80043cc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	3301      	adds	r3, #1
 80043ce:	069b      	lsls	r3, r3, #26
 80043d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d109      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x7c4>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	0e9b      	lsrs	r3, r3, #26
 80043e6:	3301      	adds	r3, #1
 80043e8:	f003 031f 	and.w	r3, r3, #31
 80043ec:	2101      	movs	r1, #1
 80043ee:	fa01 f303 	lsl.w	r3, r1, r3
 80043f2:	e017      	b.n	8004424 <HAL_ADC_ConfigChannel+0x7f4>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	fa93 f3a3 	rbit	r3, r3
 8004400:	61bb      	str	r3, [r7, #24]
  return result;
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 800440c:	2320      	movs	r3, #32
 800440e:	e003      	b.n	8004418 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	fab3 f383 	clz	r3, r3
 8004416:	b2db      	uxtb	r3, r3
 8004418:	3301      	adds	r3, #1
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	2101      	movs	r1, #1
 8004420:	fa01 f303 	lsl.w	r3, r1, r3
 8004424:	ea42 0103 	orr.w	r1, r2, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10d      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x820>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	0e9b      	lsrs	r3, r3, #26
 800443a:	3301      	adds	r3, #1
 800443c:	f003 021f 	and.w	r2, r3, #31
 8004440:	4613      	mov	r3, r2
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	4413      	add	r3, r2
 8004446:	3b1e      	subs	r3, #30
 8004448:	051b      	lsls	r3, r3, #20
 800444a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800444e:	e01b      	b.n	8004488 <HAL_ADC_ConfigChannel+0x858>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	fa93 f3a3 	rbit	r3, r3
 800445c:	60fb      	str	r3, [r7, #12]
  return result;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004468:	2320      	movs	r3, #32
 800446a:	e003      	b.n	8004474 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	fab3 f383 	clz	r3, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	3301      	adds	r3, #1
 8004476:	f003 021f 	and.w	r2, r3, #31
 800447a:	4613      	mov	r3, r2
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	4413      	add	r3, r2
 8004480:	3b1e      	subs	r3, #30
 8004482:	051b      	lsls	r3, r3, #20
 8004484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004488:	430b      	orrs	r3, r1
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	6892      	ldr	r2, [r2, #8]
 800448e:	4619      	mov	r1, r3
 8004490:	f7fe fe3f 	bl	8003112 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	f280 80d7 	bge.w	800464c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a06      	ldr	r2, [pc, #24]	; (80044bc <HAL_ADC_ConfigChannel+0x88c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <HAL_ADC_ConfigChannel+0x882>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a04      	ldr	r2, [pc, #16]	; (80044c0 <HAL_ADC_ConfigChannel+0x890>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d10a      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x898>
 80044b2:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <HAL_ADC_ConfigChannel+0x894>)
 80044b4:	e009      	b.n	80044ca <HAL_ADC_ConfigChannel+0x89a>
 80044b6:	bf00      	nop
 80044b8:	47ff0000 	.word	0x47ff0000
 80044bc:	40022000 	.word	0x40022000
 80044c0:	40022100 	.word	0x40022100
 80044c4:	40022300 	.word	0x40022300
 80044c8:	4b65      	ldr	r3, [pc, #404]	; (8004660 <HAL_ADC_ConfigChannel+0xa30>)
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fce2 	bl	8002e94 <LL_ADC_GetCommonPathInternalCh>
 80044d0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a62      	ldr	r2, [pc, #392]	; (8004664 <HAL_ADC_ConfigChannel+0xa34>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_ADC_ConfigChannel+0x8b8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a61      	ldr	r2, [pc, #388]	; (8004668 <HAL_ADC_ConfigChannel+0xa38>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d10e      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x8d6>
 80044e8:	485e      	ldr	r0, [pc, #376]	; (8004664 <HAL_ADC_ConfigChannel+0xa34>)
 80044ea:	f7fe ff0f 	bl	800330c <LL_ADC_IsEnabled>
 80044ee:	4604      	mov	r4, r0
 80044f0:	485d      	ldr	r0, [pc, #372]	; (8004668 <HAL_ADC_ConfigChannel+0xa38>)
 80044f2:	f7fe ff0b 	bl	800330c <LL_ADC_IsEnabled>
 80044f6:	4603      	mov	r3, r0
 80044f8:	4323      	orrs	r3, r4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf0c      	ite	eq
 80044fe:	2301      	moveq	r3, #1
 8004500:	2300      	movne	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e008      	b.n	8004518 <HAL_ADC_ConfigChannel+0x8e8>
 8004506:	4859      	ldr	r0, [pc, #356]	; (800466c <HAL_ADC_ConfigChannel+0xa3c>)
 8004508:	f7fe ff00 	bl	800330c <LL_ADC_IsEnabled>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	bf0c      	ite	eq
 8004512:	2301      	moveq	r3, #1
 8004514:	2300      	movne	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8084 	beq.w	8004626 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a53      	ldr	r2, [pc, #332]	; (8004670 <HAL_ADC_ConfigChannel+0xa40>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d132      	bne.n	800458e <HAL_ADC_ConfigChannel+0x95e>
 8004528:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800452c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d12c      	bne.n	800458e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a4c      	ldr	r2, [pc, #304]	; (800466c <HAL_ADC_ConfigChannel+0xa3c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	f040 8086 	bne.w	800464c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a47      	ldr	r2, [pc, #284]	; (8004664 <HAL_ADC_ConfigChannel+0xa34>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d004      	beq.n	8004554 <HAL_ADC_ConfigChannel+0x924>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a46      	ldr	r2, [pc, #280]	; (8004668 <HAL_ADC_ConfigChannel+0xa38>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d101      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x928>
 8004554:	4a47      	ldr	r2, [pc, #284]	; (8004674 <HAL_ADC_ConfigChannel+0xa44>)
 8004556:	e000      	b.n	800455a <HAL_ADC_ConfigChannel+0x92a>
 8004558:	4a41      	ldr	r2, [pc, #260]	; (8004660 <HAL_ADC_ConfigChannel+0xa30>)
 800455a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800455e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f7fe fc82 	bl	8002e6e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800456a:	4b43      	ldr	r3, [pc, #268]	; (8004678 <HAL_ADC_ConfigChannel+0xa48>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	099b      	lsrs	r3, r3, #6
 8004570:	4a42      	ldr	r2, [pc, #264]	; (800467c <HAL_ADC_ConfigChannel+0xa4c>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	099b      	lsrs	r3, r3, #6
 8004578:	3301      	adds	r3, #1
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800457e:	e002      	b.n	8004586 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	3b01      	subs	r3, #1
 8004584:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f9      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800458c:	e05e      	b.n	800464c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a3b      	ldr	r2, [pc, #236]	; (8004680 <HAL_ADC_ConfigChannel+0xa50>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d120      	bne.n	80045da <HAL_ADC_ConfigChannel+0x9aa>
 8004598:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800459c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d11a      	bne.n	80045da <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a30      	ldr	r2, [pc, #192]	; (800466c <HAL_ADC_ConfigChannel+0xa3c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d14e      	bne.n	800464c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a2c      	ldr	r2, [pc, #176]	; (8004664 <HAL_ADC_ConfigChannel+0xa34>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d004      	beq.n	80045c2 <HAL_ADC_ConfigChannel+0x992>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a2a      	ldr	r2, [pc, #168]	; (8004668 <HAL_ADC_ConfigChannel+0xa38>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d101      	bne.n	80045c6 <HAL_ADC_ConfigChannel+0x996>
 80045c2:	4a2c      	ldr	r2, [pc, #176]	; (8004674 <HAL_ADC_ConfigChannel+0xa44>)
 80045c4:	e000      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x998>
 80045c6:	4a26      	ldr	r2, [pc, #152]	; (8004660 <HAL_ADC_ConfigChannel+0xa30>)
 80045c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d0:	4619      	mov	r1, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	f7fe fc4b 	bl	8002e6e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045d8:	e038      	b.n	800464c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a29      	ldr	r2, [pc, #164]	; (8004684 <HAL_ADC_ConfigChannel+0xa54>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d133      	bne.n	800464c <HAL_ADC_ConfigChannel+0xa1c>
 80045e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d12d      	bne.n	800464c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1d      	ldr	r2, [pc, #116]	; (800466c <HAL_ADC_ConfigChannel+0xa3c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d128      	bne.n	800464c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a19      	ldr	r2, [pc, #100]	; (8004664 <HAL_ADC_ConfigChannel+0xa34>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d004      	beq.n	800460e <HAL_ADC_ConfigChannel+0x9de>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a17      	ldr	r2, [pc, #92]	; (8004668 <HAL_ADC_ConfigChannel+0xa38>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d101      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x9e2>
 800460e:	4a19      	ldr	r2, [pc, #100]	; (8004674 <HAL_ADC_ConfigChannel+0xa44>)
 8004610:	e000      	b.n	8004614 <HAL_ADC_ConfigChannel+0x9e4>
 8004612:	4a13      	ldr	r2, [pc, #76]	; (8004660 <HAL_ADC_ConfigChannel+0xa30>)
 8004614:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004618:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f7fe fc25 	bl	8002e6e <LL_ADC_SetCommonPathInternalCh>
 8004624:	e012      	b.n	800464c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462a:	f043 0220 	orr.w	r2, r3, #32
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004638:	e008      	b.n	800464c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463e:	f043 0220 	orr.w	r2, r3, #32
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004654:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004658:	4618      	mov	r0, r3
 800465a:	37e4      	adds	r7, #228	; 0xe4
 800465c:	46bd      	mov	sp, r7
 800465e:	bd90      	pop	{r4, r7, pc}
 8004660:	58026300 	.word	0x58026300
 8004664:	40022000 	.word	0x40022000
 8004668:	40022100 	.word	0x40022100
 800466c:	58026000 	.word	0x58026000
 8004670:	c7520000 	.word	0xc7520000
 8004674:	40022300 	.word	0x40022300
 8004678:	24000000 	.word	0x24000000
 800467c:	053e2d63 	.word	0x053e2d63
 8004680:	c3210000 	.word	0xc3210000
 8004684:	cb840000 	.word	0xcb840000

08004688 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004692:	2300      	movs	r3, #0
 8004694:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe fe82 	bl	80033a8 <LL_ADC_REG_IsConversionOngoing>
 80046a4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe fea4 	bl	80033f8 <LL_ADC_INJ_IsConversionOngoing>
 80046b0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d103      	bne.n	80046c0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 8098 	beq.w	80047f0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d02a      	beq.n	8004724 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	7e5b      	ldrb	r3, [r3, #25]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d126      	bne.n	8004724 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	7e1b      	ldrb	r3, [r3, #24]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d122      	bne.n	8004724 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80046de:	2301      	movs	r3, #1
 80046e0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80046e2:	e014      	b.n	800470e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	4a45      	ldr	r2, [pc, #276]	; (80047fc <ADC_ConversionStop+0x174>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d90d      	bls.n	8004708 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f0:	f043 0210 	orr.w	r2, r3, #16
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046fc:	f043 0201 	orr.w	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e074      	b.n	80047f2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	3301      	adds	r3, #1
 800470c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004718:	2b40      	cmp	r3, #64	; 0x40
 800471a:	d1e3      	bne.n	80046e4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2240      	movs	r2, #64	; 0x40
 8004722:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d014      	beq.n	8004754 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe fe3a 	bl	80033a8 <LL_ADC_REG_IsConversionOngoing>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00c      	beq.n	8004754 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe fdf7 	bl	8003332 <LL_ADC_IsDisableOngoing>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d104      	bne.n	8004754 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fe16 	bl	8003380 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d014      	beq.n	8004784 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe fe4a 	bl	80033f8 <LL_ADC_INJ_IsConversionOngoing>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00c      	beq.n	8004784 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fe fddf 	bl	8003332 <LL_ADC_IsDisableOngoing>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d104      	bne.n	8004784 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f7fe fe26 	bl	80033d0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d005      	beq.n	8004796 <ADC_ConversionStop+0x10e>
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b03      	cmp	r3, #3
 800478e:	d105      	bne.n	800479c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004790:	230c      	movs	r3, #12
 8004792:	617b      	str	r3, [r7, #20]
        break;
 8004794:	e005      	b.n	80047a2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004796:	2308      	movs	r3, #8
 8004798:	617b      	str	r3, [r7, #20]
        break;
 800479a:	e002      	b.n	80047a2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800479c:	2304      	movs	r3, #4
 800479e:	617b      	str	r3, [r7, #20]
        break;
 80047a0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80047a2:	f7fe fb0b 	bl	8002dbc <HAL_GetTick>
 80047a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80047a8:	e01b      	b.n	80047e2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80047aa:	f7fe fb07 	bl	8002dbc <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b05      	cmp	r3, #5
 80047b6:	d914      	bls.n	80047e2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ca:	f043 0210 	orr.w	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d6:	f043 0201 	orr.w	r2, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e007      	b.n	80047f2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1dc      	bne.n	80047aa <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3720      	adds	r7, #32
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	000cdbff 	.word	0x000cdbff

08004800 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7fe fd7d 	bl	800330c <LL_ADC_IsEnabled>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d16e      	bne.n	80048f6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	4b38      	ldr	r3, [pc, #224]	; (8004900 <ADC_Enable+0x100>)
 8004820:	4013      	ands	r3, r2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00d      	beq.n	8004842 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482a:	f043 0210 	orr.w	r2, r3, #16
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004836:	f043 0201 	orr.w	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e05a      	b.n	80048f8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f7fe fd38 	bl	80032bc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800484c:	f7fe fab6 	bl	8002dbc <HAL_GetTick>
 8004850:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a2b      	ldr	r2, [pc, #172]	; (8004904 <ADC_Enable+0x104>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <ADC_Enable+0x66>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a29      	ldr	r2, [pc, #164]	; (8004908 <ADC_Enable+0x108>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d101      	bne.n	800486a <ADC_Enable+0x6a>
 8004866:	4b29      	ldr	r3, [pc, #164]	; (800490c <ADC_Enable+0x10c>)
 8004868:	e000      	b.n	800486c <ADC_Enable+0x6c>
 800486a:	4b29      	ldr	r3, [pc, #164]	; (8004910 <ADC_Enable+0x110>)
 800486c:	4618      	mov	r0, r3
 800486e:	f7fe fcbb 	bl	80031e8 <LL_ADC_GetMultimode>
 8004872:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a23      	ldr	r2, [pc, #140]	; (8004908 <ADC_Enable+0x108>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d002      	beq.n	8004884 <ADC_Enable+0x84>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	e000      	b.n	8004886 <ADC_Enable+0x86>
 8004884:	4b1f      	ldr	r3, [pc, #124]	; (8004904 <ADC_Enable+0x104>)
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	4293      	cmp	r3, r2
 800488c:	d02c      	beq.n	80048e8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d130      	bne.n	80048f6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004894:	e028      	b.n	80048e8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fe fd36 	bl	800330c <LL_ADC_IsEnabled>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d104      	bne.n	80048b0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fe fd06 	bl	80032bc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048b0:	f7fe fa84 	bl	8002dbc <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d914      	bls.n	80048e8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d00d      	beq.n	80048e8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d0:	f043 0210 	orr.w	r2, r3, #16
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048dc:	f043 0201 	orr.w	r2, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e007      	b.n	80048f8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d1cf      	bne.n	8004896 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	8000003f 	.word	0x8000003f
 8004904:	40022000 	.word	0x40022000
 8004908:	40022100 	.word	0x40022100
 800490c:	40022300 	.word	0x40022300
 8004910:	58026300 	.word	0x58026300

08004914 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7fe fd06 	bl	8003332 <LL_ADC_IsDisableOngoing>
 8004926:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f7fe fced 	bl	800330c <LL_ADC_IsEnabled>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d047      	beq.n	80049c8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d144      	bne.n	80049c8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 030d 	and.w	r3, r3, #13
 8004948:	2b01      	cmp	r3, #1
 800494a:	d10c      	bne.n	8004966 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7fe fcc7 	bl	80032e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2203      	movs	r2, #3
 800495c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800495e:	f7fe fa2d 	bl	8002dbc <HAL_GetTick>
 8004962:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004964:	e029      	b.n	80049ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496a:	f043 0210 	orr.w	r2, r3, #16
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004976:	f043 0201 	orr.w	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e023      	b.n	80049ca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004982:	f7fe fa1b 	bl	8002dbc <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d914      	bls.n	80049ba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00d      	beq.n	80049ba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a2:	f043 0210 	orr.w	r2, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ae:	f043 0201 	orr.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e007      	b.n	80049ca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1dc      	bne.n	8004982 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a6c      	ldr	r2, [pc, #432]	; (8004b94 <ADC_ConfigureBoostMode+0x1c0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <ADC_ConfigureBoostMode+0x1c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a6b      	ldr	r2, [pc, #428]	; (8004b98 <ADC_ConfigureBoostMode+0x1c4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d109      	bne.n	8004a04 <ADC_ConfigureBoostMode+0x30>
 80049f0:	4b6a      	ldr	r3, [pc, #424]	; (8004b9c <ADC_ConfigureBoostMode+0x1c8>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bf14      	ite	ne
 80049fc:	2301      	movne	r3, #1
 80049fe:	2300      	moveq	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	e008      	b.n	8004a16 <ADC_ConfigureBoostMode+0x42>
 8004a04:	4b66      	ldr	r3, [pc, #408]	; (8004ba0 <ADC_ConfigureBoostMode+0x1cc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01c      	beq.n	8004a54 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004a1a:	f005 f87f 	bl	8009b1c <HAL_RCC_GetHCLKFreq>
 8004a1e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a28:	d010      	beq.n	8004a4c <ADC_ConfigureBoostMode+0x78>
 8004a2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a2e:	d873      	bhi.n	8004b18 <ADC_ConfigureBoostMode+0x144>
 8004a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a34:	d002      	beq.n	8004a3c <ADC_ConfigureBoostMode+0x68>
 8004a36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a3a:	d16d      	bne.n	8004b18 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	0c1b      	lsrs	r3, r3, #16
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	60fb      	str	r3, [r7, #12]
        break;
 8004a4a:	e068      	b.n	8004b1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	089b      	lsrs	r3, r3, #2
 8004a50:	60fb      	str	r3, [r7, #12]
        break;
 8004a52:	e064      	b.n	8004b1e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004a54:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004a58:	f04f 0100 	mov.w	r1, #0
 8004a5c:	f006 fa5a 	bl	800af14 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a60:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004a6a:	d051      	beq.n	8004b10 <ADC_ConfigureBoostMode+0x13c>
 8004a6c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004a70:	d854      	bhi.n	8004b1c <ADC_ConfigureBoostMode+0x148>
 8004a72:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004a76:	d047      	beq.n	8004b08 <ADC_ConfigureBoostMode+0x134>
 8004a78:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004a7c:	d84e      	bhi.n	8004b1c <ADC_ConfigureBoostMode+0x148>
 8004a7e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004a82:	d03d      	beq.n	8004b00 <ADC_ConfigureBoostMode+0x12c>
 8004a84:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004a88:	d848      	bhi.n	8004b1c <ADC_ConfigureBoostMode+0x148>
 8004a8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a8e:	d033      	beq.n	8004af8 <ADC_ConfigureBoostMode+0x124>
 8004a90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a94:	d842      	bhi.n	8004b1c <ADC_ConfigureBoostMode+0x148>
 8004a96:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004a9a:	d029      	beq.n	8004af0 <ADC_ConfigureBoostMode+0x11c>
 8004a9c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004aa0:	d83c      	bhi.n	8004b1c <ADC_ConfigureBoostMode+0x148>
 8004aa2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004aa6:	d01a      	beq.n	8004ade <ADC_ConfigureBoostMode+0x10a>
 8004aa8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004aac:	d836      	bhi.n	8004b1c <ADC_ConfigureBoostMode+0x148>
 8004aae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ab2:	d014      	beq.n	8004ade <ADC_ConfigureBoostMode+0x10a>
 8004ab4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ab8:	d830      	bhi.n	8004b1c <ADC_ConfigureBoostMode+0x148>
 8004aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004abe:	d00e      	beq.n	8004ade <ADC_ConfigureBoostMode+0x10a>
 8004ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac4:	d82a      	bhi.n	8004b1c <ADC_ConfigureBoostMode+0x148>
 8004ac6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004aca:	d008      	beq.n	8004ade <ADC_ConfigureBoostMode+0x10a>
 8004acc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ad0:	d824      	bhi.n	8004b1c <ADC_ConfigureBoostMode+0x148>
 8004ad2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ad6:	d002      	beq.n	8004ade <ADC_ConfigureBoostMode+0x10a>
 8004ad8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004adc:	d11e      	bne.n	8004b1c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	0c9b      	lsrs	r3, r3, #18
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	60fb      	str	r3, [r7, #12]
        break;
 8004aee:	e016      	b.n	8004b1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	091b      	lsrs	r3, r3, #4
 8004af4:	60fb      	str	r3, [r7, #12]
        break;
 8004af6:	e012      	b.n	8004b1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	60fb      	str	r3, [r7, #12]
        break;
 8004afe:	e00e      	b.n	8004b1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	099b      	lsrs	r3, r3, #6
 8004b04:	60fb      	str	r3, [r7, #12]
        break;
 8004b06:	e00a      	b.n	8004b1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	09db      	lsrs	r3, r3, #7
 8004b0c:	60fb      	str	r3, [r7, #12]
        break;
 8004b0e:	e006      	b.n	8004b1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	0a1b      	lsrs	r3, r3, #8
 8004b14:	60fb      	str	r3, [r7, #12]
        break;
 8004b16:	e002      	b.n	8004b1e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004b18:	bf00      	nop
 8004b1a:	e000      	b.n	8004b1e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004b1c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	085b      	lsrs	r3, r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4a1f      	ldr	r2, [pc, #124]	; (8004ba4 <ADC_ConfigureBoostMode+0x1d0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d808      	bhi.n	8004b3e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b3a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004b3c:	e025      	b.n	8004b8a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4a19      	ldr	r2, [pc, #100]	; (8004ba8 <ADC_ConfigureBoostMode+0x1d4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d80a      	bhi.n	8004b5c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b58:	609a      	str	r2, [r3, #8]
}
 8004b5a:	e016      	b.n	8004b8a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a13      	ldr	r2, [pc, #76]	; (8004bac <ADC_ConfigureBoostMode+0x1d8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d80a      	bhi.n	8004b7a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b76:	609a      	str	r2, [r3, #8]
}
 8004b78:	e007      	b.n	8004b8a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004b88:	609a      	str	r2, [r3, #8]
}
 8004b8a:	bf00      	nop
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40022000 	.word	0x40022000
 8004b98:	40022100 	.word	0x40022100
 8004b9c:	40022300 	.word	0x40022300
 8004ba0:	58026300 	.word	0x58026300
 8004ba4:	005f5e10 	.word	0x005f5e10
 8004ba8:	00bebc20 	.word	0x00bebc20
 8004bac:	017d7840 	.word	0x017d7840

08004bb0 <LL_ADC_IsEnabled>:
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <LL_ADC_IsEnabled+0x18>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <LL_ADC_IsEnabled+0x1a>
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d101      	bne.n	8004bee <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b0a3      	sub	sp, #140	; 0x8c
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e0c1      	b.n	8004d9e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004c22:	2300      	movs	r3, #0
 8004c24:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004c26:	2300      	movs	r3, #0
 8004c28:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a5e      	ldr	r2, [pc, #376]	; (8004da8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d102      	bne.n	8004c3a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c34:	4b5d      	ldr	r3, [pc, #372]	; (8004dac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	e001      	b.n	8004c3e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10b      	bne.n	8004c5c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c48:	f043 0220 	orr.w	r2, r3, #32
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0a0      	b.n	8004d9e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff ffb9 	bl	8004bd6 <LL_ADC_REG_IsConversionOngoing>
 8004c64:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff ffb2 	bl	8004bd6 <LL_ADC_REG_IsConversionOngoing>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f040 8081 	bne.w	8004d7c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004c7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d17c      	bne.n	8004d7c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a48      	ldr	r2, [pc, #288]	; (8004da8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a46      	ldr	r2, [pc, #280]	; (8004dac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d101      	bne.n	8004c9a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004c96:	4b46      	ldr	r3, [pc, #280]	; (8004db0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004c98:	e000      	b.n	8004c9c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004c9a:	4b46      	ldr	r3, [pc, #280]	; (8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004c9c:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d039      	beq.n	8004d1a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004ca6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cb6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a3a      	ldr	r2, [pc, #232]	; (8004da8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a39      	ldr	r2, [pc, #228]	; (8004dac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10e      	bne.n	8004cea <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004ccc:	4836      	ldr	r0, [pc, #216]	; (8004da8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cce:	f7ff ff6f 	bl	8004bb0 <LL_ADC_IsEnabled>
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	4835      	ldr	r0, [pc, #212]	; (8004dac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cd6:	f7ff ff6b 	bl	8004bb0 <LL_ADC_IsEnabled>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4323      	orrs	r3, r4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bf0c      	ite	eq
 8004ce2:	2301      	moveq	r3, #1
 8004ce4:	2300      	movne	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	e008      	b.n	8004cfc <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004cea:	4833      	ldr	r0, [pc, #204]	; (8004db8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004cec:	f7ff ff60 	bl	8004bb0 <LL_ADC_IsEnabled>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bf0c      	ite	eq
 8004cf6:	2301      	moveq	r3, #1
 8004cf8:	2300      	movne	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d047      	beq.n	8004d90 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	4b2d      	ldr	r3, [pc, #180]	; (8004dbc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	6811      	ldr	r1, [r2, #0]
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	6892      	ldr	r2, [r2, #8]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	431a      	orrs	r2, r3
 8004d14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d16:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d18:	e03a      	b.n	8004d90 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004d1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d24:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1f      	ldr	r2, [pc, #124]	; (8004da8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a1d      	ldr	r2, [pc, #116]	; (8004dac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d10e      	bne.n	8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004d3a:	481b      	ldr	r0, [pc, #108]	; (8004da8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d3c:	f7ff ff38 	bl	8004bb0 <LL_ADC_IsEnabled>
 8004d40:	4604      	mov	r4, r0
 8004d42:	481a      	ldr	r0, [pc, #104]	; (8004dac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d44:	f7ff ff34 	bl	8004bb0 <LL_ADC_IsEnabled>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4323      	orrs	r3, r4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e008      	b.n	8004d6a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004d58:	4817      	ldr	r0, [pc, #92]	; (8004db8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004d5a:	f7ff ff29 	bl	8004bb0 <LL_ADC_IsEnabled>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bf0c      	ite	eq
 8004d64:	2301      	moveq	r3, #1
 8004d66:	2300      	movne	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d010      	beq.n	8004d90 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	4b12      	ldr	r3, [pc, #72]	; (8004dbc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d78:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d7a:	e009      	b.n	8004d90 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d80:	f043 0220 	orr.w	r2, r3, #32
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004d8e:	e000      	b.n	8004d92 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d9a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	378c      	adds	r7, #140	; 0x8c
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd90      	pop	{r4, r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40022000 	.word	0x40022000
 8004dac:	40022100 	.word	0x40022100
 8004db0:	40022300 	.word	0x40022300
 8004db4:	58026300 	.word	0x58026300
 8004db8:	58026000 	.word	0x58026000
 8004dbc:	fffff0e0 	.word	0xfffff0e0

08004dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <__NVIC_SetPriorityGrouping+0x40>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ddc:	4013      	ands	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004de8:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <__NVIC_SetPriorityGrouping+0x44>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dee:	4a04      	ldr	r2, [pc, #16]	; (8004e00 <__NVIC_SetPriorityGrouping+0x40>)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	60d3      	str	r3, [r2, #12]
}
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	e000ed00 	.word	0xe000ed00
 8004e04:	05fa0000 	.word	0x05fa0000

08004e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e0c:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <__NVIC_GetPriorityGrouping+0x18>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	0a1b      	lsrs	r3, r3, #8
 8004e12:	f003 0307 	and.w	r3, r3, #7
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	e000ed00 	.word	0xe000ed00

08004e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	db0b      	blt.n	8004e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	f003 021f 	and.w	r2, r3, #31
 8004e3c:	4907      	ldr	r1, [pc, #28]	; (8004e5c <__NVIC_EnableIRQ+0x38>)
 8004e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	2001      	movs	r0, #1
 8004e46:	fa00 f202 	lsl.w	r2, r0, r2
 8004e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	e000e100 	.word	0xe000e100

08004e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	6039      	str	r1, [r7, #0]
 8004e6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	db0a      	blt.n	8004e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	490c      	ldr	r1, [pc, #48]	; (8004eac <__NVIC_SetPriority+0x4c>)
 8004e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e7e:	0112      	lsls	r2, r2, #4
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	440b      	add	r3, r1
 8004e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e88:	e00a      	b.n	8004ea0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	4908      	ldr	r1, [pc, #32]	; (8004eb0 <__NVIC_SetPriority+0x50>)
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	3b04      	subs	r3, #4
 8004e98:	0112      	lsls	r2, r2, #4
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	761a      	strb	r2, [r3, #24]
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	e000e100 	.word	0xe000e100
 8004eb0:	e000ed00 	.word	0xe000ed00

08004eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b089      	sub	sp, #36	; 0x24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f1c3 0307 	rsb	r3, r3, #7
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	bf28      	it	cs
 8004ed2:	2304      	movcs	r3, #4
 8004ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	2b06      	cmp	r3, #6
 8004edc:	d902      	bls.n	8004ee4 <NVIC_EncodePriority+0x30>
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	3b03      	subs	r3, #3
 8004ee2:	e000      	b.n	8004ee6 <NVIC_EncodePriority+0x32>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43da      	mvns	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004efc:	f04f 31ff 	mov.w	r1, #4294967295
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	fa01 f303 	lsl.w	r3, r1, r3
 8004f06:	43d9      	mvns	r1, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f0c:	4313      	orrs	r3, r2
         );
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3724      	adds	r7, #36	; 0x24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f2c:	d301      	bcc.n	8004f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e00f      	b.n	8004f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f32:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <SysTick_Config+0x40>)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f3a:	210f      	movs	r1, #15
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f40:	f7ff ff8e 	bl	8004e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <SysTick_Config+0x40>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f4a:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <SysTick_Config+0x40>)
 8004f4c:	2207      	movs	r2, #7
 8004f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	e000e010 	.word	0xe000e010

08004f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff ff29 	bl	8004dc0 <__NVIC_SetPriorityGrouping>
}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b086      	sub	sp, #24
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f84:	f7ff ff40 	bl	8004e08 <__NVIC_GetPriorityGrouping>
 8004f88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	6978      	ldr	r0, [r7, #20]
 8004f90:	f7ff ff90 	bl	8004eb4 <NVIC_EncodePriority>
 8004f94:	4602      	mov	r2, r0
 8004f96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff ff5f 	bl	8004e60 <__NVIC_SetPriority>
}
 8004fa2:	bf00      	nop
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff ff33 	bl	8004e24 <__NVIC_EnableIRQ>
}
 8004fbe:	bf00      	nop
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff ffa4 	bl	8004f1c <SysTick_Config>
 8004fd4:	4603      	mov	r3, r0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004fe8:	f7fd fee8 	bl	8002dbc <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e314      	b.n	8005622 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a66      	ldr	r2, [pc, #408]	; (8005198 <HAL_DMA_Init+0x1b8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d04a      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a65      	ldr	r2, [pc, #404]	; (800519c <HAL_DMA_Init+0x1bc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d045      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a63      	ldr	r2, [pc, #396]	; (80051a0 <HAL_DMA_Init+0x1c0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d040      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a62      	ldr	r2, [pc, #392]	; (80051a4 <HAL_DMA_Init+0x1c4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d03b      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a60      	ldr	r2, [pc, #384]	; (80051a8 <HAL_DMA_Init+0x1c8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d036      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a5f      	ldr	r2, [pc, #380]	; (80051ac <HAL_DMA_Init+0x1cc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d031      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a5d      	ldr	r2, [pc, #372]	; (80051b0 <HAL_DMA_Init+0x1d0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d02c      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a5c      	ldr	r2, [pc, #368]	; (80051b4 <HAL_DMA_Init+0x1d4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d027      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a5a      	ldr	r2, [pc, #360]	; (80051b8 <HAL_DMA_Init+0x1d8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d022      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a59      	ldr	r2, [pc, #356]	; (80051bc <HAL_DMA_Init+0x1dc>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d01d      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a57      	ldr	r2, [pc, #348]	; (80051c0 <HAL_DMA_Init+0x1e0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d018      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a56      	ldr	r2, [pc, #344]	; (80051c4 <HAL_DMA_Init+0x1e4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d013      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a54      	ldr	r2, [pc, #336]	; (80051c8 <HAL_DMA_Init+0x1e8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00e      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a53      	ldr	r2, [pc, #332]	; (80051cc <HAL_DMA_Init+0x1ec>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d009      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a51      	ldr	r2, [pc, #324]	; (80051d0 <HAL_DMA_Init+0x1f0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a50      	ldr	r2, [pc, #320]	; (80051d4 <HAL_DMA_Init+0x1f4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d101      	bne.n	800509c <HAL_DMA_Init+0xbc>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_DMA_Init+0xbe>
 800509c:	2300      	movs	r3, #0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 813c 	beq.w	800531c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a37      	ldr	r2, [pc, #220]	; (8005198 <HAL_DMA_Init+0x1b8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d04a      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a36      	ldr	r2, [pc, #216]	; (800519c <HAL_DMA_Init+0x1bc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d045      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a34      	ldr	r2, [pc, #208]	; (80051a0 <HAL_DMA_Init+0x1c0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d040      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a33      	ldr	r2, [pc, #204]	; (80051a4 <HAL_DMA_Init+0x1c4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d03b      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a31      	ldr	r2, [pc, #196]	; (80051a8 <HAL_DMA_Init+0x1c8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d036      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a30      	ldr	r2, [pc, #192]	; (80051ac <HAL_DMA_Init+0x1cc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d031      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2e      	ldr	r2, [pc, #184]	; (80051b0 <HAL_DMA_Init+0x1d0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d02c      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2d      	ldr	r2, [pc, #180]	; (80051b4 <HAL_DMA_Init+0x1d4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d027      	beq.n	8005154 <HAL_DMA_Init+0x174>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a2b      	ldr	r2, [pc, #172]	; (80051b8 <HAL_DMA_Init+0x1d8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d022      	beq.n	8005154 <HAL_DMA_Init+0x174>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a2a      	ldr	r2, [pc, #168]	; (80051bc <HAL_DMA_Init+0x1dc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d01d      	beq.n	8005154 <HAL_DMA_Init+0x174>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a28      	ldr	r2, [pc, #160]	; (80051c0 <HAL_DMA_Init+0x1e0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d018      	beq.n	8005154 <HAL_DMA_Init+0x174>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a27      	ldr	r2, [pc, #156]	; (80051c4 <HAL_DMA_Init+0x1e4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_DMA_Init+0x174>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a25      	ldr	r2, [pc, #148]	; (80051c8 <HAL_DMA_Init+0x1e8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00e      	beq.n	8005154 <HAL_DMA_Init+0x174>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a24      	ldr	r2, [pc, #144]	; (80051cc <HAL_DMA_Init+0x1ec>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_DMA_Init+0x174>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a22      	ldr	r2, [pc, #136]	; (80051d0 <HAL_DMA_Init+0x1f0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_DMA_Init+0x174>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a21      	ldr	r2, [pc, #132]	; (80051d4 <HAL_DMA_Init+0x1f4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d108      	bne.n	8005166 <HAL_DMA_Init+0x186>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0201 	bic.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e007      	b.n	8005176 <HAL_DMA_Init+0x196>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0201 	bic.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005176:	e02f      	b.n	80051d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005178:	f7fd fe20 	bl	8002dbc <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b05      	cmp	r3, #5
 8005184:	d928      	bls.n	80051d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2203      	movs	r2, #3
 8005190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e244      	b.n	8005622 <HAL_DMA_Init+0x642>
 8005198:	40020010 	.word	0x40020010
 800519c:	40020028 	.word	0x40020028
 80051a0:	40020040 	.word	0x40020040
 80051a4:	40020058 	.word	0x40020058
 80051a8:	40020070 	.word	0x40020070
 80051ac:	40020088 	.word	0x40020088
 80051b0:	400200a0 	.word	0x400200a0
 80051b4:	400200b8 	.word	0x400200b8
 80051b8:	40020410 	.word	0x40020410
 80051bc:	40020428 	.word	0x40020428
 80051c0:	40020440 	.word	0x40020440
 80051c4:	40020458 	.word	0x40020458
 80051c8:	40020470 	.word	0x40020470
 80051cc:	40020488 	.word	0x40020488
 80051d0:	400204a0 	.word	0x400204a0
 80051d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1c8      	bne.n	8005178 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4b84      	ldr	r3, [pc, #528]	; (8005404 <HAL_DMA_Init+0x424>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80051fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800520a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005216:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	2b04      	cmp	r3, #4
 800522a:	d107      	bne.n	800523c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005234:	4313      	orrs	r3, r2
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b28      	cmp	r3, #40	; 0x28
 8005242:	d903      	bls.n	800524c <HAL_DMA_Init+0x26c>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b2e      	cmp	r3, #46	; 0x2e
 800524a:	d91f      	bls.n	800528c <HAL_DMA_Init+0x2ac>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b3e      	cmp	r3, #62	; 0x3e
 8005252:	d903      	bls.n	800525c <HAL_DMA_Init+0x27c>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b42      	cmp	r3, #66	; 0x42
 800525a:	d917      	bls.n	800528c <HAL_DMA_Init+0x2ac>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b46      	cmp	r3, #70	; 0x46
 8005262:	d903      	bls.n	800526c <HAL_DMA_Init+0x28c>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	2b48      	cmp	r3, #72	; 0x48
 800526a:	d90f      	bls.n	800528c <HAL_DMA_Init+0x2ac>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b4e      	cmp	r3, #78	; 0x4e
 8005272:	d903      	bls.n	800527c <HAL_DMA_Init+0x29c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b52      	cmp	r3, #82	; 0x52
 800527a:	d907      	bls.n	800528c <HAL_DMA_Init+0x2ac>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b73      	cmp	r3, #115	; 0x73
 8005282:	d905      	bls.n	8005290 <HAL_DMA_Init+0x2b0>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b77      	cmp	r3, #119	; 0x77
 800528a:	d801      	bhi.n	8005290 <HAL_DMA_Init+0x2b0>
 800528c:	2301      	movs	r3, #1
 800528e:	e000      	b.n	8005292 <HAL_DMA_Init+0x2b2>
 8005290:	2300      	movs	r3, #0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800529c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f023 0307 	bic.w	r3, r3, #7
 80052b4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d117      	bne.n	80052f8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00e      	beq.n	80052f8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f001 f9b6 	bl	800664c <DMA_CheckFifoParam>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d008      	beq.n	80052f8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2240      	movs	r2, #64	; 0x40
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e194      	b.n	8005622 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f001 f8f1 	bl	80064e8 <DMA_CalcBaseAndBitshift>
 8005306:	4603      	mov	r3, r0
 8005308:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	223f      	movs	r2, #63	; 0x3f
 8005314:	409a      	lsls	r2, r3
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	609a      	str	r2, [r3, #8]
 800531a:	e0ca      	b.n	80054b2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a39      	ldr	r2, [pc, #228]	; (8005408 <HAL_DMA_Init+0x428>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d022      	beq.n	800536c <HAL_DMA_Init+0x38c>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a38      	ldr	r2, [pc, #224]	; (800540c <HAL_DMA_Init+0x42c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d01d      	beq.n	800536c <HAL_DMA_Init+0x38c>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a36      	ldr	r2, [pc, #216]	; (8005410 <HAL_DMA_Init+0x430>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d018      	beq.n	800536c <HAL_DMA_Init+0x38c>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a35      	ldr	r2, [pc, #212]	; (8005414 <HAL_DMA_Init+0x434>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d013      	beq.n	800536c <HAL_DMA_Init+0x38c>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a33      	ldr	r2, [pc, #204]	; (8005418 <HAL_DMA_Init+0x438>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00e      	beq.n	800536c <HAL_DMA_Init+0x38c>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a32      	ldr	r2, [pc, #200]	; (800541c <HAL_DMA_Init+0x43c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d009      	beq.n	800536c <HAL_DMA_Init+0x38c>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a30      	ldr	r2, [pc, #192]	; (8005420 <HAL_DMA_Init+0x440>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d004      	beq.n	800536c <HAL_DMA_Init+0x38c>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a2f      	ldr	r2, [pc, #188]	; (8005424 <HAL_DMA_Init+0x444>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d101      	bne.n	8005370 <HAL_DMA_Init+0x390>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <HAL_DMA_Init+0x392>
 8005370:	2300      	movs	r3, #0
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 8094 	beq.w	80054a0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a22      	ldr	r2, [pc, #136]	; (8005408 <HAL_DMA_Init+0x428>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d021      	beq.n	80053c6 <HAL_DMA_Init+0x3e6>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a21      	ldr	r2, [pc, #132]	; (800540c <HAL_DMA_Init+0x42c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d01c      	beq.n	80053c6 <HAL_DMA_Init+0x3e6>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1f      	ldr	r2, [pc, #124]	; (8005410 <HAL_DMA_Init+0x430>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d017      	beq.n	80053c6 <HAL_DMA_Init+0x3e6>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1e      	ldr	r2, [pc, #120]	; (8005414 <HAL_DMA_Init+0x434>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d012      	beq.n	80053c6 <HAL_DMA_Init+0x3e6>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1c      	ldr	r2, [pc, #112]	; (8005418 <HAL_DMA_Init+0x438>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00d      	beq.n	80053c6 <HAL_DMA_Init+0x3e6>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1b      	ldr	r2, [pc, #108]	; (800541c <HAL_DMA_Init+0x43c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d008      	beq.n	80053c6 <HAL_DMA_Init+0x3e6>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a19      	ldr	r2, [pc, #100]	; (8005420 <HAL_DMA_Init+0x440>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <HAL_DMA_Init+0x3e6>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a18      	ldr	r2, [pc, #96]	; (8005424 <HAL_DMA_Init+0x444>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4b11      	ldr	r3, [pc, #68]	; (8005428 <HAL_DMA_Init+0x448>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d01d      	beq.n	800542c <HAL_DMA_Init+0x44c>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2b80      	cmp	r3, #128	; 0x80
 80053f6:	d102      	bne.n	80053fe <HAL_DMA_Init+0x41e>
 80053f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053fc:	e017      	b.n	800542e <HAL_DMA_Init+0x44e>
 80053fe:	2300      	movs	r3, #0
 8005400:	e015      	b.n	800542e <HAL_DMA_Init+0x44e>
 8005402:	bf00      	nop
 8005404:	fe10803f 	.word	0xfe10803f
 8005408:	58025408 	.word	0x58025408
 800540c:	5802541c 	.word	0x5802541c
 8005410:	58025430 	.word	0x58025430
 8005414:	58025444 	.word	0x58025444
 8005418:	58025458 	.word	0x58025458
 800541c:	5802546c 	.word	0x5802546c
 8005420:	58025480 	.word	0x58025480
 8005424:	58025494 	.word	0x58025494
 8005428:	fffe000f 	.word	0xfffe000f
 800542c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	68d2      	ldr	r2, [r2, #12]
 8005432:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005434:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800543c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005444:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800544c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005454:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800545c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	4b6e      	ldr	r3, [pc, #440]	; (800562c <HAL_DMA_Init+0x64c>)
 8005474:	4413      	add	r3, r2
 8005476:	4a6e      	ldr	r2, [pc, #440]	; (8005630 <HAL_DMA_Init+0x650>)
 8005478:	fba2 2303 	umull	r2, r3, r2, r3
 800547c:	091b      	lsrs	r3, r3, #4
 800547e:	009a      	lsls	r2, r3, #2
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f001 f82f 	bl	80064e8 <DMA_CalcBaseAndBitshift>
 800548a:	4603      	mov	r3, r0
 800548c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005492:	f003 031f 	and.w	r3, r3, #31
 8005496:	2201      	movs	r2, #1
 8005498:	409a      	lsls	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	605a      	str	r2, [r3, #4]
 800549e:	e008      	b.n	80054b2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2240      	movs	r2, #64	; 0x40
 80054a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2203      	movs	r2, #3
 80054aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e0b7      	b.n	8005622 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a5f      	ldr	r2, [pc, #380]	; (8005634 <HAL_DMA_Init+0x654>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d072      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a5d      	ldr	r2, [pc, #372]	; (8005638 <HAL_DMA_Init+0x658>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d06d      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a5c      	ldr	r2, [pc, #368]	; (800563c <HAL_DMA_Init+0x65c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d068      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a5a      	ldr	r2, [pc, #360]	; (8005640 <HAL_DMA_Init+0x660>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d063      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a59      	ldr	r2, [pc, #356]	; (8005644 <HAL_DMA_Init+0x664>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d05e      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a57      	ldr	r2, [pc, #348]	; (8005648 <HAL_DMA_Init+0x668>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d059      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a56      	ldr	r2, [pc, #344]	; (800564c <HAL_DMA_Init+0x66c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d054      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a54      	ldr	r2, [pc, #336]	; (8005650 <HAL_DMA_Init+0x670>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d04f      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a53      	ldr	r2, [pc, #332]	; (8005654 <HAL_DMA_Init+0x674>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d04a      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a51      	ldr	r2, [pc, #324]	; (8005658 <HAL_DMA_Init+0x678>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d045      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a50      	ldr	r2, [pc, #320]	; (800565c <HAL_DMA_Init+0x67c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d040      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a4e      	ldr	r2, [pc, #312]	; (8005660 <HAL_DMA_Init+0x680>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d03b      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a4d      	ldr	r2, [pc, #308]	; (8005664 <HAL_DMA_Init+0x684>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d036      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a4b      	ldr	r2, [pc, #300]	; (8005668 <HAL_DMA_Init+0x688>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d031      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a4a      	ldr	r2, [pc, #296]	; (800566c <HAL_DMA_Init+0x68c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d02c      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a48      	ldr	r2, [pc, #288]	; (8005670 <HAL_DMA_Init+0x690>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d027      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a47      	ldr	r2, [pc, #284]	; (8005674 <HAL_DMA_Init+0x694>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d022      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a45      	ldr	r2, [pc, #276]	; (8005678 <HAL_DMA_Init+0x698>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d01d      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a44      	ldr	r2, [pc, #272]	; (800567c <HAL_DMA_Init+0x69c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d018      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a42      	ldr	r2, [pc, #264]	; (8005680 <HAL_DMA_Init+0x6a0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d013      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a41      	ldr	r2, [pc, #260]	; (8005684 <HAL_DMA_Init+0x6a4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00e      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a3f      	ldr	r2, [pc, #252]	; (8005688 <HAL_DMA_Init+0x6a8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d009      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a3e      	ldr	r2, [pc, #248]	; (800568c <HAL_DMA_Init+0x6ac>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d004      	beq.n	80055a2 <HAL_DMA_Init+0x5c2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a3c      	ldr	r2, [pc, #240]	; (8005690 <HAL_DMA_Init+0x6b0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d101      	bne.n	80055a6 <HAL_DMA_Init+0x5c6>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <HAL_DMA_Init+0x5c8>
 80055a6:	2300      	movs	r3, #0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d032      	beq.n	8005612 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f001 f8c9 	bl	8006744 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	2b80      	cmp	r3, #128	; 0x80
 80055b8:	d102      	bne.n	80055c0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055d4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d010      	beq.n	8005600 <HAL_DMA_Init+0x620>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d80c      	bhi.n	8005600 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f001 f946 	bl	8006878 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80055fc:	605a      	str	r2, [r3, #4]
 80055fe:	e008      	b.n	8005612 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	a7fdabf8 	.word	0xa7fdabf8
 8005630:	cccccccd 	.word	0xcccccccd
 8005634:	40020010 	.word	0x40020010
 8005638:	40020028 	.word	0x40020028
 800563c:	40020040 	.word	0x40020040
 8005640:	40020058 	.word	0x40020058
 8005644:	40020070 	.word	0x40020070
 8005648:	40020088 	.word	0x40020088
 800564c:	400200a0 	.word	0x400200a0
 8005650:	400200b8 	.word	0x400200b8
 8005654:	40020410 	.word	0x40020410
 8005658:	40020428 	.word	0x40020428
 800565c:	40020440 	.word	0x40020440
 8005660:	40020458 	.word	0x40020458
 8005664:	40020470 	.word	0x40020470
 8005668:	40020488 	.word	0x40020488
 800566c:	400204a0 	.word	0x400204a0
 8005670:	400204b8 	.word	0x400204b8
 8005674:	58025408 	.word	0x58025408
 8005678:	5802541c 	.word	0x5802541c
 800567c:	58025430 	.word	0x58025430
 8005680:	58025444 	.word	0x58025444
 8005684:	58025458 	.word	0x58025458
 8005688:	5802546c 	.word	0x5802546c
 800568c:	58025480 	.word	0x58025480
 8005690:	58025494 	.word	0x58025494

08005694 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08a      	sub	sp, #40	; 0x28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056a0:	4b67      	ldr	r3, [pc, #412]	; (8005840 <HAL_DMA_IRQHandler+0x1ac>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a67      	ldr	r2, [pc, #412]	; (8005844 <HAL_DMA_IRQHandler+0x1b0>)
 80056a6:	fba2 2303 	umull	r2, r3, r2, r3
 80056aa:	0a9b      	lsrs	r3, r3, #10
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a5f      	ldr	r2, [pc, #380]	; (8005848 <HAL_DMA_IRQHandler+0x1b4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d04a      	beq.n	8005766 <HAL_DMA_IRQHandler+0xd2>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a5d      	ldr	r2, [pc, #372]	; (800584c <HAL_DMA_IRQHandler+0x1b8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d045      	beq.n	8005766 <HAL_DMA_IRQHandler+0xd2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a5c      	ldr	r2, [pc, #368]	; (8005850 <HAL_DMA_IRQHandler+0x1bc>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d040      	beq.n	8005766 <HAL_DMA_IRQHandler+0xd2>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a5a      	ldr	r2, [pc, #360]	; (8005854 <HAL_DMA_IRQHandler+0x1c0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d03b      	beq.n	8005766 <HAL_DMA_IRQHandler+0xd2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a59      	ldr	r2, [pc, #356]	; (8005858 <HAL_DMA_IRQHandler+0x1c4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d036      	beq.n	8005766 <HAL_DMA_IRQHandler+0xd2>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a57      	ldr	r2, [pc, #348]	; (800585c <HAL_DMA_IRQHandler+0x1c8>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d031      	beq.n	8005766 <HAL_DMA_IRQHandler+0xd2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a56      	ldr	r2, [pc, #344]	; (8005860 <HAL_DMA_IRQHandler+0x1cc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d02c      	beq.n	8005766 <HAL_DMA_IRQHandler+0xd2>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a54      	ldr	r2, [pc, #336]	; (8005864 <HAL_DMA_IRQHandler+0x1d0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d027      	beq.n	8005766 <HAL_DMA_IRQHandler+0xd2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a53      	ldr	r2, [pc, #332]	; (8005868 <HAL_DMA_IRQHandler+0x1d4>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d022      	beq.n	8005766 <HAL_DMA_IRQHandler+0xd2>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a51      	ldr	r2, [pc, #324]	; (800586c <HAL_DMA_IRQHandler+0x1d8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01d      	beq.n	8005766 <HAL_DMA_IRQHandler+0xd2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a50      	ldr	r2, [pc, #320]	; (8005870 <HAL_DMA_IRQHandler+0x1dc>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d018      	beq.n	8005766 <HAL_DMA_IRQHandler+0xd2>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a4e      	ldr	r2, [pc, #312]	; (8005874 <HAL_DMA_IRQHandler+0x1e0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <HAL_DMA_IRQHandler+0xd2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a4d      	ldr	r2, [pc, #308]	; (8005878 <HAL_DMA_IRQHandler+0x1e4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00e      	beq.n	8005766 <HAL_DMA_IRQHandler+0xd2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a4b      	ldr	r2, [pc, #300]	; (800587c <HAL_DMA_IRQHandler+0x1e8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d009      	beq.n	8005766 <HAL_DMA_IRQHandler+0xd2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a4a      	ldr	r2, [pc, #296]	; (8005880 <HAL_DMA_IRQHandler+0x1ec>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <HAL_DMA_IRQHandler+0xd2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a48      	ldr	r2, [pc, #288]	; (8005884 <HAL_DMA_IRQHandler+0x1f0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d101      	bne.n	800576a <HAL_DMA_IRQHandler+0xd6>
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <HAL_DMA_IRQHandler+0xd8>
 800576a:	2300      	movs	r3, #0
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 842b 	beq.w	8005fc8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	2208      	movs	r2, #8
 800577c:	409a      	lsls	r2, r3
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	4013      	ands	r3, r2
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 80a2 	beq.w	80058cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a2e      	ldr	r2, [pc, #184]	; (8005848 <HAL_DMA_IRQHandler+0x1b4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d04a      	beq.n	8005828 <HAL_DMA_IRQHandler+0x194>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a2d      	ldr	r2, [pc, #180]	; (800584c <HAL_DMA_IRQHandler+0x1b8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d045      	beq.n	8005828 <HAL_DMA_IRQHandler+0x194>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a2b      	ldr	r2, [pc, #172]	; (8005850 <HAL_DMA_IRQHandler+0x1bc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d040      	beq.n	8005828 <HAL_DMA_IRQHandler+0x194>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a2a      	ldr	r2, [pc, #168]	; (8005854 <HAL_DMA_IRQHandler+0x1c0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d03b      	beq.n	8005828 <HAL_DMA_IRQHandler+0x194>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a28      	ldr	r2, [pc, #160]	; (8005858 <HAL_DMA_IRQHandler+0x1c4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d036      	beq.n	8005828 <HAL_DMA_IRQHandler+0x194>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a27      	ldr	r2, [pc, #156]	; (800585c <HAL_DMA_IRQHandler+0x1c8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d031      	beq.n	8005828 <HAL_DMA_IRQHandler+0x194>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a25      	ldr	r2, [pc, #148]	; (8005860 <HAL_DMA_IRQHandler+0x1cc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d02c      	beq.n	8005828 <HAL_DMA_IRQHandler+0x194>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a24      	ldr	r2, [pc, #144]	; (8005864 <HAL_DMA_IRQHandler+0x1d0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d027      	beq.n	8005828 <HAL_DMA_IRQHandler+0x194>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a22      	ldr	r2, [pc, #136]	; (8005868 <HAL_DMA_IRQHandler+0x1d4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d022      	beq.n	8005828 <HAL_DMA_IRQHandler+0x194>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a21      	ldr	r2, [pc, #132]	; (800586c <HAL_DMA_IRQHandler+0x1d8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d01d      	beq.n	8005828 <HAL_DMA_IRQHandler+0x194>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1f      	ldr	r2, [pc, #124]	; (8005870 <HAL_DMA_IRQHandler+0x1dc>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d018      	beq.n	8005828 <HAL_DMA_IRQHandler+0x194>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1e      	ldr	r2, [pc, #120]	; (8005874 <HAL_DMA_IRQHandler+0x1e0>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d013      	beq.n	8005828 <HAL_DMA_IRQHandler+0x194>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1c      	ldr	r2, [pc, #112]	; (8005878 <HAL_DMA_IRQHandler+0x1e4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00e      	beq.n	8005828 <HAL_DMA_IRQHandler+0x194>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1b      	ldr	r2, [pc, #108]	; (800587c <HAL_DMA_IRQHandler+0x1e8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d009      	beq.n	8005828 <HAL_DMA_IRQHandler+0x194>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a19      	ldr	r2, [pc, #100]	; (8005880 <HAL_DMA_IRQHandler+0x1ec>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d004      	beq.n	8005828 <HAL_DMA_IRQHandler+0x194>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a18      	ldr	r2, [pc, #96]	; (8005884 <HAL_DMA_IRQHandler+0x1f0>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d12f      	bne.n	8005888 <HAL_DMA_IRQHandler+0x1f4>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	bf14      	ite	ne
 8005836:	2301      	movne	r3, #1
 8005838:	2300      	moveq	r3, #0
 800583a:	b2db      	uxtb	r3, r3
 800583c:	e02e      	b.n	800589c <HAL_DMA_IRQHandler+0x208>
 800583e:	bf00      	nop
 8005840:	24000000 	.word	0x24000000
 8005844:	1b4e81b5 	.word	0x1b4e81b5
 8005848:	40020010 	.word	0x40020010
 800584c:	40020028 	.word	0x40020028
 8005850:	40020040 	.word	0x40020040
 8005854:	40020058 	.word	0x40020058
 8005858:	40020070 	.word	0x40020070
 800585c:	40020088 	.word	0x40020088
 8005860:	400200a0 	.word	0x400200a0
 8005864:	400200b8 	.word	0x400200b8
 8005868:	40020410 	.word	0x40020410
 800586c:	40020428 	.word	0x40020428
 8005870:	40020440 	.word	0x40020440
 8005874:	40020458 	.word	0x40020458
 8005878:	40020470 	.word	0x40020470
 800587c:	40020488 	.word	0x40020488
 8005880:	400204a0 	.word	0x400204a0
 8005884:	400204b8 	.word	0x400204b8
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0308 	and.w	r3, r3, #8
 8005892:	2b00      	cmp	r3, #0
 8005894:	bf14      	ite	ne
 8005896:	2301      	movne	r3, #1
 8005898:	2300      	moveq	r3, #0
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d015      	beq.n	80058cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0204 	bic.w	r2, r2, #4
 80058ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b4:	f003 031f 	and.w	r3, r3, #31
 80058b8:	2208      	movs	r2, #8
 80058ba:	409a      	lsls	r2, r3
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c4:	f043 0201 	orr.w	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	fa22 f303 	lsr.w	r3, r2, r3
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d06e      	beq.n	80059c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a69      	ldr	r2, [pc, #420]	; (8005a8c <HAL_DMA_IRQHandler+0x3f8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d04a      	beq.n	8005982 <HAL_DMA_IRQHandler+0x2ee>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a67      	ldr	r2, [pc, #412]	; (8005a90 <HAL_DMA_IRQHandler+0x3fc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d045      	beq.n	8005982 <HAL_DMA_IRQHandler+0x2ee>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a66      	ldr	r2, [pc, #408]	; (8005a94 <HAL_DMA_IRQHandler+0x400>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d040      	beq.n	8005982 <HAL_DMA_IRQHandler+0x2ee>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a64      	ldr	r2, [pc, #400]	; (8005a98 <HAL_DMA_IRQHandler+0x404>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d03b      	beq.n	8005982 <HAL_DMA_IRQHandler+0x2ee>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a63      	ldr	r2, [pc, #396]	; (8005a9c <HAL_DMA_IRQHandler+0x408>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d036      	beq.n	8005982 <HAL_DMA_IRQHandler+0x2ee>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a61      	ldr	r2, [pc, #388]	; (8005aa0 <HAL_DMA_IRQHandler+0x40c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d031      	beq.n	8005982 <HAL_DMA_IRQHandler+0x2ee>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a60      	ldr	r2, [pc, #384]	; (8005aa4 <HAL_DMA_IRQHandler+0x410>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d02c      	beq.n	8005982 <HAL_DMA_IRQHandler+0x2ee>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a5e      	ldr	r2, [pc, #376]	; (8005aa8 <HAL_DMA_IRQHandler+0x414>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d027      	beq.n	8005982 <HAL_DMA_IRQHandler+0x2ee>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a5d      	ldr	r2, [pc, #372]	; (8005aac <HAL_DMA_IRQHandler+0x418>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d022      	beq.n	8005982 <HAL_DMA_IRQHandler+0x2ee>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a5b      	ldr	r2, [pc, #364]	; (8005ab0 <HAL_DMA_IRQHandler+0x41c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d01d      	beq.n	8005982 <HAL_DMA_IRQHandler+0x2ee>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a5a      	ldr	r2, [pc, #360]	; (8005ab4 <HAL_DMA_IRQHandler+0x420>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d018      	beq.n	8005982 <HAL_DMA_IRQHandler+0x2ee>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a58      	ldr	r2, [pc, #352]	; (8005ab8 <HAL_DMA_IRQHandler+0x424>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d013      	beq.n	8005982 <HAL_DMA_IRQHandler+0x2ee>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a57      	ldr	r2, [pc, #348]	; (8005abc <HAL_DMA_IRQHandler+0x428>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00e      	beq.n	8005982 <HAL_DMA_IRQHandler+0x2ee>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a55      	ldr	r2, [pc, #340]	; (8005ac0 <HAL_DMA_IRQHandler+0x42c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d009      	beq.n	8005982 <HAL_DMA_IRQHandler+0x2ee>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a54      	ldr	r2, [pc, #336]	; (8005ac4 <HAL_DMA_IRQHandler+0x430>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d004      	beq.n	8005982 <HAL_DMA_IRQHandler+0x2ee>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a52      	ldr	r2, [pc, #328]	; (8005ac8 <HAL_DMA_IRQHandler+0x434>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d10a      	bne.n	8005998 <HAL_DMA_IRQHandler+0x304>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598c:	2b00      	cmp	r3, #0
 800598e:	bf14      	ite	ne
 8005990:	2301      	movne	r3, #1
 8005992:	2300      	moveq	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	e003      	b.n	80059a0 <HAL_DMA_IRQHandler+0x30c>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2300      	movs	r3, #0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00d      	beq.n	80059c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a8:	f003 031f 	and.w	r3, r3, #31
 80059ac:	2201      	movs	r2, #1
 80059ae:	409a      	lsls	r2, r3
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b8:	f043 0202 	orr.w	r2, r3, #2
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c4:	f003 031f 	and.w	r3, r3, #31
 80059c8:	2204      	movs	r2, #4
 80059ca:	409a      	lsls	r2, r3
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 808f 	beq.w	8005af4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a2c      	ldr	r2, [pc, #176]	; (8005a8c <HAL_DMA_IRQHandler+0x3f8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d04a      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x3e2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a2a      	ldr	r2, [pc, #168]	; (8005a90 <HAL_DMA_IRQHandler+0x3fc>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d045      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x3e2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a29      	ldr	r2, [pc, #164]	; (8005a94 <HAL_DMA_IRQHandler+0x400>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d040      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x3e2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a27      	ldr	r2, [pc, #156]	; (8005a98 <HAL_DMA_IRQHandler+0x404>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d03b      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x3e2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a26      	ldr	r2, [pc, #152]	; (8005a9c <HAL_DMA_IRQHandler+0x408>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d036      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x3e2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a24      	ldr	r2, [pc, #144]	; (8005aa0 <HAL_DMA_IRQHandler+0x40c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d031      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x3e2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a23      	ldr	r2, [pc, #140]	; (8005aa4 <HAL_DMA_IRQHandler+0x410>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d02c      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x3e2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a21      	ldr	r2, [pc, #132]	; (8005aa8 <HAL_DMA_IRQHandler+0x414>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d027      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x3e2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a20      	ldr	r2, [pc, #128]	; (8005aac <HAL_DMA_IRQHandler+0x418>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d022      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x3e2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a1e      	ldr	r2, [pc, #120]	; (8005ab0 <HAL_DMA_IRQHandler+0x41c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01d      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x3e2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1d      	ldr	r2, [pc, #116]	; (8005ab4 <HAL_DMA_IRQHandler+0x420>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d018      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x3e2>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a1b      	ldr	r2, [pc, #108]	; (8005ab8 <HAL_DMA_IRQHandler+0x424>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d013      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x3e2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a1a      	ldr	r2, [pc, #104]	; (8005abc <HAL_DMA_IRQHandler+0x428>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00e      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x3e2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a18      	ldr	r2, [pc, #96]	; (8005ac0 <HAL_DMA_IRQHandler+0x42c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d009      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x3e2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a17      	ldr	r2, [pc, #92]	; (8005ac4 <HAL_DMA_IRQHandler+0x430>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d004      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x3e2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <HAL_DMA_IRQHandler+0x434>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d12a      	bne.n	8005acc <HAL_DMA_IRQHandler+0x438>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	bf14      	ite	ne
 8005a84:	2301      	movne	r3, #1
 8005a86:	2300      	moveq	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	e023      	b.n	8005ad4 <HAL_DMA_IRQHandler+0x440>
 8005a8c:	40020010 	.word	0x40020010
 8005a90:	40020028 	.word	0x40020028
 8005a94:	40020040 	.word	0x40020040
 8005a98:	40020058 	.word	0x40020058
 8005a9c:	40020070 	.word	0x40020070
 8005aa0:	40020088 	.word	0x40020088
 8005aa4:	400200a0 	.word	0x400200a0
 8005aa8:	400200b8 	.word	0x400200b8
 8005aac:	40020410 	.word	0x40020410
 8005ab0:	40020428 	.word	0x40020428
 8005ab4:	40020440 	.word	0x40020440
 8005ab8:	40020458 	.word	0x40020458
 8005abc:	40020470 	.word	0x40020470
 8005ac0:	40020488 	.word	0x40020488
 8005ac4:	400204a0 	.word	0x400204a0
 8005ac8:	400204b8 	.word	0x400204b8
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00d      	beq.n	8005af4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005adc:	f003 031f 	and.w	r3, r3, #31
 8005ae0:	2204      	movs	r2, #4
 8005ae2:	409a      	lsls	r2, r3
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aec:	f043 0204 	orr.w	r2, r3, #4
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af8:	f003 031f 	and.w	r3, r3, #31
 8005afc:	2210      	movs	r2, #16
 8005afe:	409a      	lsls	r2, r3
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	4013      	ands	r3, r2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 80a6 	beq.w	8005c56 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a85      	ldr	r2, [pc, #532]	; (8005d24 <HAL_DMA_IRQHandler+0x690>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d04a      	beq.n	8005baa <HAL_DMA_IRQHandler+0x516>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a83      	ldr	r2, [pc, #524]	; (8005d28 <HAL_DMA_IRQHandler+0x694>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d045      	beq.n	8005baa <HAL_DMA_IRQHandler+0x516>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a82      	ldr	r2, [pc, #520]	; (8005d2c <HAL_DMA_IRQHandler+0x698>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d040      	beq.n	8005baa <HAL_DMA_IRQHandler+0x516>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a80      	ldr	r2, [pc, #512]	; (8005d30 <HAL_DMA_IRQHandler+0x69c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d03b      	beq.n	8005baa <HAL_DMA_IRQHandler+0x516>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a7f      	ldr	r2, [pc, #508]	; (8005d34 <HAL_DMA_IRQHandler+0x6a0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d036      	beq.n	8005baa <HAL_DMA_IRQHandler+0x516>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a7d      	ldr	r2, [pc, #500]	; (8005d38 <HAL_DMA_IRQHandler+0x6a4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d031      	beq.n	8005baa <HAL_DMA_IRQHandler+0x516>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a7c      	ldr	r2, [pc, #496]	; (8005d3c <HAL_DMA_IRQHandler+0x6a8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d02c      	beq.n	8005baa <HAL_DMA_IRQHandler+0x516>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a7a      	ldr	r2, [pc, #488]	; (8005d40 <HAL_DMA_IRQHandler+0x6ac>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d027      	beq.n	8005baa <HAL_DMA_IRQHandler+0x516>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a79      	ldr	r2, [pc, #484]	; (8005d44 <HAL_DMA_IRQHandler+0x6b0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d022      	beq.n	8005baa <HAL_DMA_IRQHandler+0x516>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a77      	ldr	r2, [pc, #476]	; (8005d48 <HAL_DMA_IRQHandler+0x6b4>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01d      	beq.n	8005baa <HAL_DMA_IRQHandler+0x516>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a76      	ldr	r2, [pc, #472]	; (8005d4c <HAL_DMA_IRQHandler+0x6b8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d018      	beq.n	8005baa <HAL_DMA_IRQHandler+0x516>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a74      	ldr	r2, [pc, #464]	; (8005d50 <HAL_DMA_IRQHandler+0x6bc>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <HAL_DMA_IRQHandler+0x516>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a73      	ldr	r2, [pc, #460]	; (8005d54 <HAL_DMA_IRQHandler+0x6c0>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00e      	beq.n	8005baa <HAL_DMA_IRQHandler+0x516>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a71      	ldr	r2, [pc, #452]	; (8005d58 <HAL_DMA_IRQHandler+0x6c4>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d009      	beq.n	8005baa <HAL_DMA_IRQHandler+0x516>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a70      	ldr	r2, [pc, #448]	; (8005d5c <HAL_DMA_IRQHandler+0x6c8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d004      	beq.n	8005baa <HAL_DMA_IRQHandler+0x516>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a6e      	ldr	r2, [pc, #440]	; (8005d60 <HAL_DMA_IRQHandler+0x6cc>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d10a      	bne.n	8005bc0 <HAL_DMA_IRQHandler+0x52c>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0308 	and.w	r3, r3, #8
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	bf14      	ite	ne
 8005bb8:	2301      	movne	r3, #1
 8005bba:	2300      	moveq	r3, #0
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	e009      	b.n	8005bd4 <HAL_DMA_IRQHandler+0x540>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bf14      	ite	ne
 8005bce:	2301      	movne	r3, #1
 8005bd0:	2300      	moveq	r3, #0
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d03e      	beq.n	8005c56 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bdc:	f003 031f 	and.w	r3, r3, #31
 8005be0:	2210      	movs	r2, #16
 8005be2:	409a      	lsls	r2, r3
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d018      	beq.n	8005c28 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d108      	bne.n	8005c16 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d024      	beq.n	8005c56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	4798      	blx	r3
 8005c14:	e01f      	b.n	8005c56 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d01b      	beq.n	8005c56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	4798      	blx	r3
 8005c26:	e016      	b.n	8005c56 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d107      	bne.n	8005c46 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0208 	bic.w	r2, r2, #8
 8005c44:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c5a:	f003 031f 	and.w	r3, r3, #31
 8005c5e:	2220      	movs	r2, #32
 8005c60:	409a      	lsls	r2, r3
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	4013      	ands	r3, r2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 8110 	beq.w	8005e8c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a2c      	ldr	r2, [pc, #176]	; (8005d24 <HAL_DMA_IRQHandler+0x690>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d04a      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x678>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a2b      	ldr	r2, [pc, #172]	; (8005d28 <HAL_DMA_IRQHandler+0x694>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d045      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x678>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a29      	ldr	r2, [pc, #164]	; (8005d2c <HAL_DMA_IRQHandler+0x698>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d040      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x678>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a28      	ldr	r2, [pc, #160]	; (8005d30 <HAL_DMA_IRQHandler+0x69c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d03b      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x678>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a26      	ldr	r2, [pc, #152]	; (8005d34 <HAL_DMA_IRQHandler+0x6a0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d036      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x678>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a25      	ldr	r2, [pc, #148]	; (8005d38 <HAL_DMA_IRQHandler+0x6a4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d031      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x678>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a23      	ldr	r2, [pc, #140]	; (8005d3c <HAL_DMA_IRQHandler+0x6a8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d02c      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x678>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a22      	ldr	r2, [pc, #136]	; (8005d40 <HAL_DMA_IRQHandler+0x6ac>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d027      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x678>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a20      	ldr	r2, [pc, #128]	; (8005d44 <HAL_DMA_IRQHandler+0x6b0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d022      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x678>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1f      	ldr	r2, [pc, #124]	; (8005d48 <HAL_DMA_IRQHandler+0x6b4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d01d      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x678>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1d      	ldr	r2, [pc, #116]	; (8005d4c <HAL_DMA_IRQHandler+0x6b8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d018      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x678>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1c      	ldr	r2, [pc, #112]	; (8005d50 <HAL_DMA_IRQHandler+0x6bc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d013      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x678>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a1a      	ldr	r2, [pc, #104]	; (8005d54 <HAL_DMA_IRQHandler+0x6c0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00e      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x678>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a19      	ldr	r2, [pc, #100]	; (8005d58 <HAL_DMA_IRQHandler+0x6c4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d009      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x678>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a17      	ldr	r2, [pc, #92]	; (8005d5c <HAL_DMA_IRQHandler+0x6c8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d004      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x678>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a16      	ldr	r2, [pc, #88]	; (8005d60 <HAL_DMA_IRQHandler+0x6cc>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d12b      	bne.n	8005d64 <HAL_DMA_IRQHandler+0x6d0>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0310 	and.w	r3, r3, #16
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	bf14      	ite	ne
 8005d1a:	2301      	movne	r3, #1
 8005d1c:	2300      	moveq	r3, #0
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	e02a      	b.n	8005d78 <HAL_DMA_IRQHandler+0x6e4>
 8005d22:	bf00      	nop
 8005d24:	40020010 	.word	0x40020010
 8005d28:	40020028 	.word	0x40020028
 8005d2c:	40020040 	.word	0x40020040
 8005d30:	40020058 	.word	0x40020058
 8005d34:	40020070 	.word	0x40020070
 8005d38:	40020088 	.word	0x40020088
 8005d3c:	400200a0 	.word	0x400200a0
 8005d40:	400200b8 	.word	0x400200b8
 8005d44:	40020410 	.word	0x40020410
 8005d48:	40020428 	.word	0x40020428
 8005d4c:	40020440 	.word	0x40020440
 8005d50:	40020458 	.word	0x40020458
 8005d54:	40020470 	.word	0x40020470
 8005d58:	40020488 	.word	0x40020488
 8005d5c:	400204a0 	.word	0x400204a0
 8005d60:	400204b8 	.word	0x400204b8
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	bf14      	ite	ne
 8005d72:	2301      	movne	r3, #1
 8005d74:	2300      	moveq	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 8087 	beq.w	8005e8c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	2220      	movs	r2, #32
 8005d88:	409a      	lsls	r2, r3
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d139      	bne.n	8005e0e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0216 	bic.w	r2, r2, #22
 8005da8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695a      	ldr	r2, [r3, #20]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005db8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d103      	bne.n	8005dca <HAL_DMA_IRQHandler+0x736>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0208 	bic.w	r2, r2, #8
 8005dd8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dde:	f003 031f 	and.w	r3, r3, #31
 8005de2:	223f      	movs	r2, #63	; 0x3f
 8005de4:	409a      	lsls	r2, r3
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 834a 	beq.w	8006498 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	4798      	blx	r3
          }
          return;
 8005e0c:	e344      	b.n	8006498 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d018      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d108      	bne.n	8005e3c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d02c      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	4798      	blx	r3
 8005e3a:	e027      	b.n	8005e8c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d023      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	4798      	blx	r3
 8005e4c:	e01e      	b.n	8005e8c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10f      	bne.n	8005e7c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0210 	bic.w	r2, r2, #16
 8005e6a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8306 	beq.w	80064a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 8088 	beq.w	8005fb4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2204      	movs	r2, #4
 8005ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a7a      	ldr	r2, [pc, #488]	; (800609c <HAL_DMA_IRQHandler+0xa08>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d04a      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x8b8>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a79      	ldr	r2, [pc, #484]	; (80060a0 <HAL_DMA_IRQHandler+0xa0c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d045      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x8b8>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a77      	ldr	r2, [pc, #476]	; (80060a4 <HAL_DMA_IRQHandler+0xa10>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d040      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x8b8>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a76      	ldr	r2, [pc, #472]	; (80060a8 <HAL_DMA_IRQHandler+0xa14>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d03b      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x8b8>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a74      	ldr	r2, [pc, #464]	; (80060ac <HAL_DMA_IRQHandler+0xa18>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d036      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x8b8>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a73      	ldr	r2, [pc, #460]	; (80060b0 <HAL_DMA_IRQHandler+0xa1c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d031      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x8b8>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a71      	ldr	r2, [pc, #452]	; (80060b4 <HAL_DMA_IRQHandler+0xa20>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d02c      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x8b8>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a70      	ldr	r2, [pc, #448]	; (80060b8 <HAL_DMA_IRQHandler+0xa24>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d027      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x8b8>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a6e      	ldr	r2, [pc, #440]	; (80060bc <HAL_DMA_IRQHandler+0xa28>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d022      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x8b8>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a6d      	ldr	r2, [pc, #436]	; (80060c0 <HAL_DMA_IRQHandler+0xa2c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d01d      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x8b8>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a6b      	ldr	r2, [pc, #428]	; (80060c4 <HAL_DMA_IRQHandler+0xa30>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d018      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x8b8>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a6a      	ldr	r2, [pc, #424]	; (80060c8 <HAL_DMA_IRQHandler+0xa34>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d013      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x8b8>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a68      	ldr	r2, [pc, #416]	; (80060cc <HAL_DMA_IRQHandler+0xa38>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00e      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x8b8>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a67      	ldr	r2, [pc, #412]	; (80060d0 <HAL_DMA_IRQHandler+0xa3c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d009      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x8b8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a65      	ldr	r2, [pc, #404]	; (80060d4 <HAL_DMA_IRQHandler+0xa40>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d004      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x8b8>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a64      	ldr	r2, [pc, #400]	; (80060d8 <HAL_DMA_IRQHandler+0xa44>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d108      	bne.n	8005f5e <HAL_DMA_IRQHandler+0x8ca>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0201 	bic.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	e007      	b.n	8005f6e <HAL_DMA_IRQHandler+0x8da>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0201 	bic.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3301      	adds	r3, #1
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d307      	bcc.n	8005f8a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1f2      	bne.n	8005f6e <HAL_DMA_IRQHandler+0x8da>
 8005f88:	e000      	b.n	8005f8c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005f8a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d004      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2203      	movs	r2, #3
 8005f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005fa2:	e003      	b.n	8005fac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 8272 	beq.w	80064a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	4798      	blx	r3
 8005fc6:	e26c      	b.n	80064a2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a43      	ldr	r2, [pc, #268]	; (80060dc <HAL_DMA_IRQHandler+0xa48>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d022      	beq.n	8006018 <HAL_DMA_IRQHandler+0x984>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a42      	ldr	r2, [pc, #264]	; (80060e0 <HAL_DMA_IRQHandler+0xa4c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d01d      	beq.n	8006018 <HAL_DMA_IRQHandler+0x984>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a40      	ldr	r2, [pc, #256]	; (80060e4 <HAL_DMA_IRQHandler+0xa50>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d018      	beq.n	8006018 <HAL_DMA_IRQHandler+0x984>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a3f      	ldr	r2, [pc, #252]	; (80060e8 <HAL_DMA_IRQHandler+0xa54>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d013      	beq.n	8006018 <HAL_DMA_IRQHandler+0x984>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a3d      	ldr	r2, [pc, #244]	; (80060ec <HAL_DMA_IRQHandler+0xa58>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00e      	beq.n	8006018 <HAL_DMA_IRQHandler+0x984>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a3c      	ldr	r2, [pc, #240]	; (80060f0 <HAL_DMA_IRQHandler+0xa5c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d009      	beq.n	8006018 <HAL_DMA_IRQHandler+0x984>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a3a      	ldr	r2, [pc, #232]	; (80060f4 <HAL_DMA_IRQHandler+0xa60>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d004      	beq.n	8006018 <HAL_DMA_IRQHandler+0x984>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a39      	ldr	r2, [pc, #228]	; (80060f8 <HAL_DMA_IRQHandler+0xa64>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d101      	bne.n	800601c <HAL_DMA_IRQHandler+0x988>
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <HAL_DMA_IRQHandler+0x98a>
 800601c:	2300      	movs	r3, #0
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 823f 	beq.w	80064a2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006030:	f003 031f 	and.w	r3, r3, #31
 8006034:	2204      	movs	r2, #4
 8006036:	409a      	lsls	r2, r3
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	4013      	ands	r3, r2
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 80cd 	beq.w	80061dc <HAL_DMA_IRQHandler+0xb48>
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 80c7 	beq.w	80061dc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006052:	f003 031f 	and.w	r3, r3, #31
 8006056:	2204      	movs	r2, #4
 8006058:	409a      	lsls	r2, r3
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d049      	beq.n	80060fc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d109      	bne.n	8006086 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 8210 	beq.w	800649c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006084:	e20a      	b.n	800649c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 8206 	beq.w	800649c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006098:	e200      	b.n	800649c <HAL_DMA_IRQHandler+0xe08>
 800609a:	bf00      	nop
 800609c:	40020010 	.word	0x40020010
 80060a0:	40020028 	.word	0x40020028
 80060a4:	40020040 	.word	0x40020040
 80060a8:	40020058 	.word	0x40020058
 80060ac:	40020070 	.word	0x40020070
 80060b0:	40020088 	.word	0x40020088
 80060b4:	400200a0 	.word	0x400200a0
 80060b8:	400200b8 	.word	0x400200b8
 80060bc:	40020410 	.word	0x40020410
 80060c0:	40020428 	.word	0x40020428
 80060c4:	40020440 	.word	0x40020440
 80060c8:	40020458 	.word	0x40020458
 80060cc:	40020470 	.word	0x40020470
 80060d0:	40020488 	.word	0x40020488
 80060d4:	400204a0 	.word	0x400204a0
 80060d8:	400204b8 	.word	0x400204b8
 80060dc:	58025408 	.word	0x58025408
 80060e0:	5802541c 	.word	0x5802541c
 80060e4:	58025430 	.word	0x58025430
 80060e8:	58025444 	.word	0x58025444
 80060ec:	58025458 	.word	0x58025458
 80060f0:	5802546c 	.word	0x5802546c
 80060f4:	58025480 	.word	0x58025480
 80060f8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b00      	cmp	r3, #0
 8006104:	d160      	bne.n	80061c8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a7f      	ldr	r2, [pc, #508]	; (8006308 <HAL_DMA_IRQHandler+0xc74>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d04a      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xb12>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a7d      	ldr	r2, [pc, #500]	; (800630c <HAL_DMA_IRQHandler+0xc78>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d045      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xb12>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a7c      	ldr	r2, [pc, #496]	; (8006310 <HAL_DMA_IRQHandler+0xc7c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d040      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xb12>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a7a      	ldr	r2, [pc, #488]	; (8006314 <HAL_DMA_IRQHandler+0xc80>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d03b      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xb12>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a79      	ldr	r2, [pc, #484]	; (8006318 <HAL_DMA_IRQHandler+0xc84>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d036      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xb12>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a77      	ldr	r2, [pc, #476]	; (800631c <HAL_DMA_IRQHandler+0xc88>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d031      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xb12>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a76      	ldr	r2, [pc, #472]	; (8006320 <HAL_DMA_IRQHandler+0xc8c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d02c      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xb12>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a74      	ldr	r2, [pc, #464]	; (8006324 <HAL_DMA_IRQHandler+0xc90>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d027      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xb12>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a73      	ldr	r2, [pc, #460]	; (8006328 <HAL_DMA_IRQHandler+0xc94>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d022      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xb12>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a71      	ldr	r2, [pc, #452]	; (800632c <HAL_DMA_IRQHandler+0xc98>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d01d      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xb12>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a70      	ldr	r2, [pc, #448]	; (8006330 <HAL_DMA_IRQHandler+0xc9c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d018      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xb12>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a6e      	ldr	r2, [pc, #440]	; (8006334 <HAL_DMA_IRQHandler+0xca0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xb12>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a6d      	ldr	r2, [pc, #436]	; (8006338 <HAL_DMA_IRQHandler+0xca4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00e      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xb12>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a6b      	ldr	r2, [pc, #428]	; (800633c <HAL_DMA_IRQHandler+0xca8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d009      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xb12>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a6a      	ldr	r2, [pc, #424]	; (8006340 <HAL_DMA_IRQHandler+0xcac>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d004      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xb12>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a68      	ldr	r2, [pc, #416]	; (8006344 <HAL_DMA_IRQHandler+0xcb0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d108      	bne.n	80061b8 <HAL_DMA_IRQHandler+0xb24>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0208 	bic.w	r2, r2, #8
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	e007      	b.n	80061c8 <HAL_DMA_IRQHandler+0xb34>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0204 	bic.w	r2, r2, #4
 80061c6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 8165 	beq.w	800649c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061da:	e15f      	b.n	800649c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e0:	f003 031f 	and.w	r3, r3, #31
 80061e4:	2202      	movs	r2, #2
 80061e6:	409a      	lsls	r2, r3
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	4013      	ands	r3, r2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 80c5 	beq.w	800637c <HAL_DMA_IRQHandler+0xce8>
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 80bf 	beq.w	800637c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	2202      	movs	r2, #2
 8006208:	409a      	lsls	r2, r3
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d018      	beq.n	800624a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d109      	bne.n	8006236 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 813a 	beq.w	80064a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006234:	e134      	b.n	80064a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 8130 	beq.w	80064a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006248:	e12a      	b.n	80064a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f003 0320 	and.w	r3, r3, #32
 8006250:	2b00      	cmp	r3, #0
 8006252:	f040 8089 	bne.w	8006368 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2b      	ldr	r2, [pc, #172]	; (8006308 <HAL_DMA_IRQHandler+0xc74>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d04a      	beq.n	80062f6 <HAL_DMA_IRQHandler+0xc62>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a29      	ldr	r2, [pc, #164]	; (800630c <HAL_DMA_IRQHandler+0xc78>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d045      	beq.n	80062f6 <HAL_DMA_IRQHandler+0xc62>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a28      	ldr	r2, [pc, #160]	; (8006310 <HAL_DMA_IRQHandler+0xc7c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d040      	beq.n	80062f6 <HAL_DMA_IRQHandler+0xc62>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a26      	ldr	r2, [pc, #152]	; (8006314 <HAL_DMA_IRQHandler+0xc80>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d03b      	beq.n	80062f6 <HAL_DMA_IRQHandler+0xc62>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a25      	ldr	r2, [pc, #148]	; (8006318 <HAL_DMA_IRQHandler+0xc84>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d036      	beq.n	80062f6 <HAL_DMA_IRQHandler+0xc62>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a23      	ldr	r2, [pc, #140]	; (800631c <HAL_DMA_IRQHandler+0xc88>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d031      	beq.n	80062f6 <HAL_DMA_IRQHandler+0xc62>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a22      	ldr	r2, [pc, #136]	; (8006320 <HAL_DMA_IRQHandler+0xc8c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d02c      	beq.n	80062f6 <HAL_DMA_IRQHandler+0xc62>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a20      	ldr	r2, [pc, #128]	; (8006324 <HAL_DMA_IRQHandler+0xc90>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d027      	beq.n	80062f6 <HAL_DMA_IRQHandler+0xc62>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1f      	ldr	r2, [pc, #124]	; (8006328 <HAL_DMA_IRQHandler+0xc94>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d022      	beq.n	80062f6 <HAL_DMA_IRQHandler+0xc62>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1d      	ldr	r2, [pc, #116]	; (800632c <HAL_DMA_IRQHandler+0xc98>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d01d      	beq.n	80062f6 <HAL_DMA_IRQHandler+0xc62>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1c      	ldr	r2, [pc, #112]	; (8006330 <HAL_DMA_IRQHandler+0xc9c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d018      	beq.n	80062f6 <HAL_DMA_IRQHandler+0xc62>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1a      	ldr	r2, [pc, #104]	; (8006334 <HAL_DMA_IRQHandler+0xca0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <HAL_DMA_IRQHandler+0xc62>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a19      	ldr	r2, [pc, #100]	; (8006338 <HAL_DMA_IRQHandler+0xca4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00e      	beq.n	80062f6 <HAL_DMA_IRQHandler+0xc62>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a17      	ldr	r2, [pc, #92]	; (800633c <HAL_DMA_IRQHandler+0xca8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d009      	beq.n	80062f6 <HAL_DMA_IRQHandler+0xc62>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a16      	ldr	r2, [pc, #88]	; (8006340 <HAL_DMA_IRQHandler+0xcac>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d004      	beq.n	80062f6 <HAL_DMA_IRQHandler+0xc62>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a14      	ldr	r2, [pc, #80]	; (8006344 <HAL_DMA_IRQHandler+0xcb0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d128      	bne.n	8006348 <HAL_DMA_IRQHandler+0xcb4>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0214 	bic.w	r2, r2, #20
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	e027      	b.n	8006358 <HAL_DMA_IRQHandler+0xcc4>
 8006308:	40020010 	.word	0x40020010
 800630c:	40020028 	.word	0x40020028
 8006310:	40020040 	.word	0x40020040
 8006314:	40020058 	.word	0x40020058
 8006318:	40020070 	.word	0x40020070
 800631c:	40020088 	.word	0x40020088
 8006320:	400200a0 	.word	0x400200a0
 8006324:	400200b8 	.word	0x400200b8
 8006328:	40020410 	.word	0x40020410
 800632c:	40020428 	.word	0x40020428
 8006330:	40020440 	.word	0x40020440
 8006334:	40020458 	.word	0x40020458
 8006338:	40020470 	.word	0x40020470
 800633c:	40020488 	.word	0x40020488
 8006340:	400204a0 	.word	0x400204a0
 8006344:	400204b8 	.word	0x400204b8
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 020a 	bic.w	r2, r2, #10
 8006356:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 8097 	beq.w	80064a0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800637a:	e091      	b.n	80064a0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006380:	f003 031f 	and.w	r3, r3, #31
 8006384:	2208      	movs	r2, #8
 8006386:	409a      	lsls	r2, r3
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 8088 	beq.w	80064a2 <HAL_DMA_IRQHandler+0xe0e>
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f003 0308 	and.w	r3, r3, #8
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 8082 	beq.w	80064a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a41      	ldr	r2, [pc, #260]	; (80064a8 <HAL_DMA_IRQHandler+0xe14>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d04a      	beq.n	800643e <HAL_DMA_IRQHandler+0xdaa>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a3f      	ldr	r2, [pc, #252]	; (80064ac <HAL_DMA_IRQHandler+0xe18>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d045      	beq.n	800643e <HAL_DMA_IRQHandler+0xdaa>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a3e      	ldr	r2, [pc, #248]	; (80064b0 <HAL_DMA_IRQHandler+0xe1c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d040      	beq.n	800643e <HAL_DMA_IRQHandler+0xdaa>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a3c      	ldr	r2, [pc, #240]	; (80064b4 <HAL_DMA_IRQHandler+0xe20>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d03b      	beq.n	800643e <HAL_DMA_IRQHandler+0xdaa>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a3b      	ldr	r2, [pc, #236]	; (80064b8 <HAL_DMA_IRQHandler+0xe24>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d036      	beq.n	800643e <HAL_DMA_IRQHandler+0xdaa>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a39      	ldr	r2, [pc, #228]	; (80064bc <HAL_DMA_IRQHandler+0xe28>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d031      	beq.n	800643e <HAL_DMA_IRQHandler+0xdaa>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a38      	ldr	r2, [pc, #224]	; (80064c0 <HAL_DMA_IRQHandler+0xe2c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d02c      	beq.n	800643e <HAL_DMA_IRQHandler+0xdaa>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a36      	ldr	r2, [pc, #216]	; (80064c4 <HAL_DMA_IRQHandler+0xe30>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d027      	beq.n	800643e <HAL_DMA_IRQHandler+0xdaa>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a35      	ldr	r2, [pc, #212]	; (80064c8 <HAL_DMA_IRQHandler+0xe34>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d022      	beq.n	800643e <HAL_DMA_IRQHandler+0xdaa>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a33      	ldr	r2, [pc, #204]	; (80064cc <HAL_DMA_IRQHandler+0xe38>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d01d      	beq.n	800643e <HAL_DMA_IRQHandler+0xdaa>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a32      	ldr	r2, [pc, #200]	; (80064d0 <HAL_DMA_IRQHandler+0xe3c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d018      	beq.n	800643e <HAL_DMA_IRQHandler+0xdaa>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a30      	ldr	r2, [pc, #192]	; (80064d4 <HAL_DMA_IRQHandler+0xe40>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d013      	beq.n	800643e <HAL_DMA_IRQHandler+0xdaa>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a2f      	ldr	r2, [pc, #188]	; (80064d8 <HAL_DMA_IRQHandler+0xe44>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00e      	beq.n	800643e <HAL_DMA_IRQHandler+0xdaa>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a2d      	ldr	r2, [pc, #180]	; (80064dc <HAL_DMA_IRQHandler+0xe48>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d009      	beq.n	800643e <HAL_DMA_IRQHandler+0xdaa>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a2c      	ldr	r2, [pc, #176]	; (80064e0 <HAL_DMA_IRQHandler+0xe4c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d004      	beq.n	800643e <HAL_DMA_IRQHandler+0xdaa>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a2a      	ldr	r2, [pc, #168]	; (80064e4 <HAL_DMA_IRQHandler+0xe50>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d108      	bne.n	8006450 <HAL_DMA_IRQHandler+0xdbc>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 021c 	bic.w	r2, r2, #28
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	e007      	b.n	8006460 <HAL_DMA_IRQHandler+0xdcc>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 020e 	bic.w	r2, r2, #14
 800645e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006464:	f003 031f 	and.w	r3, r3, #31
 8006468:	2201      	movs	r2, #1
 800646a:	409a      	lsls	r2, r3
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	4798      	blx	r3
 8006496:	e004      	b.n	80064a2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006498:	bf00      	nop
 800649a:	e002      	b.n	80064a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800649c:	bf00      	nop
 800649e:	e000      	b.n	80064a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064a0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80064a2:	3728      	adds	r7, #40	; 0x28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	40020010 	.word	0x40020010
 80064ac:	40020028 	.word	0x40020028
 80064b0:	40020040 	.word	0x40020040
 80064b4:	40020058 	.word	0x40020058
 80064b8:	40020070 	.word	0x40020070
 80064bc:	40020088 	.word	0x40020088
 80064c0:	400200a0 	.word	0x400200a0
 80064c4:	400200b8 	.word	0x400200b8
 80064c8:	40020410 	.word	0x40020410
 80064cc:	40020428 	.word	0x40020428
 80064d0:	40020440 	.word	0x40020440
 80064d4:	40020458 	.word	0x40020458
 80064d8:	40020470 	.word	0x40020470
 80064dc:	40020488 	.word	0x40020488
 80064e0:	400204a0 	.word	0x400204a0
 80064e4:	400204b8 	.word	0x400204b8

080064e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a42      	ldr	r2, [pc, #264]	; (8006600 <DMA_CalcBaseAndBitshift+0x118>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d04a      	beq.n	8006590 <DMA_CalcBaseAndBitshift+0xa8>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a41      	ldr	r2, [pc, #260]	; (8006604 <DMA_CalcBaseAndBitshift+0x11c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d045      	beq.n	8006590 <DMA_CalcBaseAndBitshift+0xa8>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a3f      	ldr	r2, [pc, #252]	; (8006608 <DMA_CalcBaseAndBitshift+0x120>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d040      	beq.n	8006590 <DMA_CalcBaseAndBitshift+0xa8>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a3e      	ldr	r2, [pc, #248]	; (800660c <DMA_CalcBaseAndBitshift+0x124>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d03b      	beq.n	8006590 <DMA_CalcBaseAndBitshift+0xa8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a3c      	ldr	r2, [pc, #240]	; (8006610 <DMA_CalcBaseAndBitshift+0x128>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d036      	beq.n	8006590 <DMA_CalcBaseAndBitshift+0xa8>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a3b      	ldr	r2, [pc, #236]	; (8006614 <DMA_CalcBaseAndBitshift+0x12c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d031      	beq.n	8006590 <DMA_CalcBaseAndBitshift+0xa8>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a39      	ldr	r2, [pc, #228]	; (8006618 <DMA_CalcBaseAndBitshift+0x130>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d02c      	beq.n	8006590 <DMA_CalcBaseAndBitshift+0xa8>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a38      	ldr	r2, [pc, #224]	; (800661c <DMA_CalcBaseAndBitshift+0x134>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d027      	beq.n	8006590 <DMA_CalcBaseAndBitshift+0xa8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a36      	ldr	r2, [pc, #216]	; (8006620 <DMA_CalcBaseAndBitshift+0x138>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d022      	beq.n	8006590 <DMA_CalcBaseAndBitshift+0xa8>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a35      	ldr	r2, [pc, #212]	; (8006624 <DMA_CalcBaseAndBitshift+0x13c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d01d      	beq.n	8006590 <DMA_CalcBaseAndBitshift+0xa8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a33      	ldr	r2, [pc, #204]	; (8006628 <DMA_CalcBaseAndBitshift+0x140>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d018      	beq.n	8006590 <DMA_CalcBaseAndBitshift+0xa8>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a32      	ldr	r2, [pc, #200]	; (800662c <DMA_CalcBaseAndBitshift+0x144>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d013      	beq.n	8006590 <DMA_CalcBaseAndBitshift+0xa8>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a30      	ldr	r2, [pc, #192]	; (8006630 <DMA_CalcBaseAndBitshift+0x148>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00e      	beq.n	8006590 <DMA_CalcBaseAndBitshift+0xa8>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a2f      	ldr	r2, [pc, #188]	; (8006634 <DMA_CalcBaseAndBitshift+0x14c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d009      	beq.n	8006590 <DMA_CalcBaseAndBitshift+0xa8>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a2d      	ldr	r2, [pc, #180]	; (8006638 <DMA_CalcBaseAndBitshift+0x150>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d004      	beq.n	8006590 <DMA_CalcBaseAndBitshift+0xa8>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a2c      	ldr	r2, [pc, #176]	; (800663c <DMA_CalcBaseAndBitshift+0x154>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d101      	bne.n	8006594 <DMA_CalcBaseAndBitshift+0xac>
 8006590:	2301      	movs	r3, #1
 8006592:	e000      	b.n	8006596 <DMA_CalcBaseAndBitshift+0xae>
 8006594:	2300      	movs	r3, #0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d024      	beq.n	80065e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	3b10      	subs	r3, #16
 80065a2:	4a27      	ldr	r2, [pc, #156]	; (8006640 <DMA_CalcBaseAndBitshift+0x158>)
 80065a4:	fba2 2303 	umull	r2, r3, r2, r3
 80065a8:	091b      	lsrs	r3, r3, #4
 80065aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	4a24      	ldr	r2, [pc, #144]	; (8006644 <DMA_CalcBaseAndBitshift+0x15c>)
 80065b4:	5cd3      	ldrb	r3, [r2, r3]
 80065b6:	461a      	mov	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d908      	bls.n	80065d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	4b1f      	ldr	r3, [pc, #124]	; (8006648 <DMA_CalcBaseAndBitshift+0x160>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	1d1a      	adds	r2, r3, #4
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	659a      	str	r2, [r3, #88]	; 0x58
 80065d2:	e00d      	b.n	80065f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	4b1b      	ldr	r3, [pc, #108]	; (8006648 <DMA_CalcBaseAndBitshift+0x160>)
 80065dc:	4013      	ands	r3, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6593      	str	r3, [r2, #88]	; 0x58
 80065e2:	e005      	b.n	80065f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	40020010 	.word	0x40020010
 8006604:	40020028 	.word	0x40020028
 8006608:	40020040 	.word	0x40020040
 800660c:	40020058 	.word	0x40020058
 8006610:	40020070 	.word	0x40020070
 8006614:	40020088 	.word	0x40020088
 8006618:	400200a0 	.word	0x400200a0
 800661c:	400200b8 	.word	0x400200b8
 8006620:	40020410 	.word	0x40020410
 8006624:	40020428 	.word	0x40020428
 8006628:	40020440 	.word	0x40020440
 800662c:	40020458 	.word	0x40020458
 8006630:	40020470 	.word	0x40020470
 8006634:	40020488 	.word	0x40020488
 8006638:	400204a0 	.word	0x400204a0
 800663c:	400204b8 	.word	0x400204b8
 8006640:	aaaaaaab 	.word	0xaaaaaaab
 8006644:	0801c9b4 	.word	0x0801c9b4
 8006648:	fffffc00 	.word	0xfffffc00

0800664c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006654:	2300      	movs	r3, #0
 8006656:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d120      	bne.n	80066a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	2b03      	cmp	r3, #3
 8006666:	d858      	bhi.n	800671a <DMA_CheckFifoParam+0xce>
 8006668:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <DMA_CheckFifoParam+0x24>)
 800666a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666e:	bf00      	nop
 8006670:	08006681 	.word	0x08006681
 8006674:	08006693 	.word	0x08006693
 8006678:	08006681 	.word	0x08006681
 800667c:	0800671b 	.word	0x0800671b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d048      	beq.n	800671e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006690:	e045      	b.n	800671e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006696:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800669a:	d142      	bne.n	8006722 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066a0:	e03f      	b.n	8006722 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066aa:	d123      	bne.n	80066f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b0:	2b03      	cmp	r3, #3
 80066b2:	d838      	bhi.n	8006726 <DMA_CheckFifoParam+0xda>
 80066b4:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <DMA_CheckFifoParam+0x70>)
 80066b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ba:	bf00      	nop
 80066bc:	080066cd 	.word	0x080066cd
 80066c0:	080066d3 	.word	0x080066d3
 80066c4:	080066cd 	.word	0x080066cd
 80066c8:	080066e5 	.word	0x080066e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	73fb      	strb	r3, [r7, #15]
        break;
 80066d0:	e030      	b.n	8006734 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d025      	beq.n	800672a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066e2:	e022      	b.n	800672a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80066ec:	d11f      	bne.n	800672e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066f2:	e01c      	b.n	800672e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d902      	bls.n	8006702 <DMA_CheckFifoParam+0xb6>
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d003      	beq.n	8006708 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006700:	e018      	b.n	8006734 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	73fb      	strb	r3, [r7, #15]
        break;
 8006706:	e015      	b.n	8006734 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00e      	beq.n	8006732 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	73fb      	strb	r3, [r7, #15]
    break;
 8006718:	e00b      	b.n	8006732 <DMA_CheckFifoParam+0xe6>
        break;
 800671a:	bf00      	nop
 800671c:	e00a      	b.n	8006734 <DMA_CheckFifoParam+0xe8>
        break;
 800671e:	bf00      	nop
 8006720:	e008      	b.n	8006734 <DMA_CheckFifoParam+0xe8>
        break;
 8006722:	bf00      	nop
 8006724:	e006      	b.n	8006734 <DMA_CheckFifoParam+0xe8>
        break;
 8006726:	bf00      	nop
 8006728:	e004      	b.n	8006734 <DMA_CheckFifoParam+0xe8>
        break;
 800672a:	bf00      	nop
 800672c:	e002      	b.n	8006734 <DMA_CheckFifoParam+0xe8>
        break;
 800672e:	bf00      	nop
 8006730:	e000      	b.n	8006734 <DMA_CheckFifoParam+0xe8>
    break;
 8006732:	bf00      	nop
    }
  }

  return status;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop

08006744 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a38      	ldr	r2, [pc, #224]	; (8006838 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d022      	beq.n	80067a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a36      	ldr	r2, [pc, #216]	; (800683c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d01d      	beq.n	80067a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a35      	ldr	r2, [pc, #212]	; (8006840 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d018      	beq.n	80067a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a33      	ldr	r2, [pc, #204]	; (8006844 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d013      	beq.n	80067a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a32      	ldr	r2, [pc, #200]	; (8006848 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00e      	beq.n	80067a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a30      	ldr	r2, [pc, #192]	; (800684c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d009      	beq.n	80067a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a2f      	ldr	r2, [pc, #188]	; (8006850 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d004      	beq.n	80067a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a2d      	ldr	r2, [pc, #180]	; (8006854 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d101      	bne.n	80067a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80067a2:	2301      	movs	r3, #1
 80067a4:	e000      	b.n	80067a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80067a6:	2300      	movs	r3, #0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01a      	beq.n	80067e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	3b08      	subs	r3, #8
 80067b4:	4a28      	ldr	r2, [pc, #160]	; (8006858 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80067b6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ba:	091b      	lsrs	r3, r3, #4
 80067bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	4b26      	ldr	r3, [pc, #152]	; (800685c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80067c2:	4413      	add	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	461a      	mov	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a24      	ldr	r2, [pc, #144]	; (8006860 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80067d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f003 031f 	and.w	r3, r3, #31
 80067d8:	2201      	movs	r2, #1
 80067da:	409a      	lsls	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80067e0:	e024      	b.n	800682c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	3b10      	subs	r3, #16
 80067ea:	4a1e      	ldr	r2, [pc, #120]	; (8006864 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80067ec:	fba2 2303 	umull	r2, r3, r2, r3
 80067f0:	091b      	lsrs	r3, r3, #4
 80067f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	4a1c      	ldr	r2, [pc, #112]	; (8006868 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d806      	bhi.n	800680a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4a1b      	ldr	r2, [pc, #108]	; (800686c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d902      	bls.n	800680a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	3308      	adds	r3, #8
 8006808:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4b18      	ldr	r3, [pc, #96]	; (8006870 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	461a      	mov	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a16      	ldr	r2, [pc, #88]	; (8006874 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800681c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f003 031f 	and.w	r3, r3, #31
 8006824:	2201      	movs	r2, #1
 8006826:	409a      	lsls	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800682c:	bf00      	nop
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	58025408 	.word	0x58025408
 800683c:	5802541c 	.word	0x5802541c
 8006840:	58025430 	.word	0x58025430
 8006844:	58025444 	.word	0x58025444
 8006848:	58025458 	.word	0x58025458
 800684c:	5802546c 	.word	0x5802546c
 8006850:	58025480 	.word	0x58025480
 8006854:	58025494 	.word	0x58025494
 8006858:	cccccccd 	.word	0xcccccccd
 800685c:	16009600 	.word	0x16009600
 8006860:	58025880 	.word	0x58025880
 8006864:	aaaaaaab 	.word	0xaaaaaaab
 8006868:	400204b8 	.word	0x400204b8
 800686c:	4002040f 	.word	0x4002040f
 8006870:	10008200 	.word	0x10008200
 8006874:	40020880 	.word	0x40020880

08006878 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d04a      	beq.n	8006924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b08      	cmp	r3, #8
 8006892:	d847      	bhi.n	8006924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a25      	ldr	r2, [pc, #148]	; (8006930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d022      	beq.n	80068e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a24      	ldr	r2, [pc, #144]	; (8006934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d01d      	beq.n	80068e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a22      	ldr	r2, [pc, #136]	; (8006938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d018      	beq.n	80068e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a21      	ldr	r2, [pc, #132]	; (800693c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d013      	beq.n	80068e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a1f      	ldr	r2, [pc, #124]	; (8006940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00e      	beq.n	80068e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a1e      	ldr	r2, [pc, #120]	; (8006944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d009      	beq.n	80068e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1c      	ldr	r2, [pc, #112]	; (8006948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d004      	beq.n	80068e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1b      	ldr	r2, [pc, #108]	; (800694c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d101      	bne.n	80068e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80068e8:	2300      	movs	r3, #0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	4b17      	ldr	r3, [pc, #92]	; (8006950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	461a      	mov	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a15      	ldr	r2, [pc, #84]	; (8006954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006900:	671a      	str	r2, [r3, #112]	; 0x70
 8006902:	e009      	b.n	8006918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4b14      	ldr	r3, [pc, #80]	; (8006958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006908:	4413      	add	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	461a      	mov	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a11      	ldr	r2, [pc, #68]	; (800695c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006916:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3b01      	subs	r3, #1
 800691c:	2201      	movs	r2, #1
 800691e:	409a      	lsls	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006924:	bf00      	nop
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	58025408 	.word	0x58025408
 8006934:	5802541c 	.word	0x5802541c
 8006938:	58025430 	.word	0x58025430
 800693c:	58025444 	.word	0x58025444
 8006940:	58025458 	.word	0x58025458
 8006944:	5802546c 	.word	0x5802546c
 8006948:	58025480 	.word	0x58025480
 800694c:	58025494 	.word	0x58025494
 8006950:	1600963f 	.word	0x1600963f
 8006954:	58025940 	.word	0x58025940
 8006958:	1000823f 	.word	0x1000823f
 800695c:	40020940 	.word	0x40020940

08006960 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b098      	sub	sp, #96	; 0x60
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006968:	4a84      	ldr	r2, [pc, #528]	; (8006b7c <HAL_FDCAN_Init+0x21c>)
 800696a:	f107 030c 	add.w	r3, r7, #12
 800696e:	4611      	mov	r1, r2
 8006970:	224c      	movs	r2, #76	; 0x4c
 8006972:	4618      	mov	r0, r3
 8006974:	f011 fc1a 	bl	80181ac <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e1c6      	b.n	8006d10 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a7e      	ldr	r2, [pc, #504]	; (8006b80 <HAL_FDCAN_Init+0x220>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d106      	bne.n	800699a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006994:	461a      	mov	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fb f9c4 	bl	8001d3c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 0210 	bic.w	r2, r2, #16
 80069c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80069c4:	f7fc f9fa 	bl	8002dbc <HAL_GetTick>
 80069c8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80069ca:	e014      	b.n	80069f6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80069cc:	f7fc f9f6 	bl	8002dbc <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b0a      	cmp	r3, #10
 80069d8:	d90d      	bls.n	80069f6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069e0:	f043 0201 	orr.w	r2, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2203      	movs	r2, #3
 80069ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e18c      	b.n	8006d10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	f003 0308 	and.w	r3, r3, #8
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d0e3      	beq.n	80069cc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699a      	ldr	r2, [r3, #24]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0201 	orr.w	r2, r2, #1
 8006a12:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a14:	f7fc f9d2 	bl	8002dbc <HAL_GetTick>
 8006a18:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006a1a:	e014      	b.n	8006a46 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006a1c:	f7fc f9ce 	bl	8002dbc <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b0a      	cmp	r3, #10
 8006a28:	d90d      	bls.n	8006a46 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a30:	f043 0201 	orr.w	r2, r3, #1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2203      	movs	r2, #3
 8006a3e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e164      	b.n	8006d10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0e3      	beq.n	8006a1c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699a      	ldr	r2, [r3, #24]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0202 	orr.w	r2, r2, #2
 8006a62:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	7c1b      	ldrb	r3, [r3, #16]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d108      	bne.n	8006a7e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a7a:	619a      	str	r2, [r3, #24]
 8006a7c:	e007      	b.n	8006a8e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	699a      	ldr	r2, [r3, #24]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a8c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	7c5b      	ldrb	r3, [r3, #17]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d108      	bne.n	8006aa8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	699a      	ldr	r2, [r3, #24]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aa4:	619a      	str	r2, [r3, #24]
 8006aa6:	e007      	b.n	8006ab8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699a      	ldr	r2, [r3, #24]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ab6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	7c9b      	ldrb	r3, [r3, #18]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d108      	bne.n	8006ad2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699a      	ldr	r2, [r3, #24]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ace:	619a      	str	r2, [r3, #24]
 8006ad0:	e007      	b.n	8006ae2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699a      	ldr	r2, [r3, #24]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ae0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006b06:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	691a      	ldr	r2, [r3, #16]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0210 	bic.w	r2, r2, #16
 8006b16:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d108      	bne.n	8006b32 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699a      	ldr	r2, [r3, #24]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0204 	orr.w	r2, r2, #4
 8006b2e:	619a      	str	r2, [r3, #24]
 8006b30:	e030      	b.n	8006b94 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d02c      	beq.n	8006b94 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d020      	beq.n	8006b84 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b50:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f042 0210 	orr.w	r2, r2, #16
 8006b60:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d114      	bne.n	8006b94 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	699a      	ldr	r2, [r3, #24]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f042 0220 	orr.w	r2, r2, #32
 8006b78:	619a      	str	r2, [r3, #24]
 8006b7a:	e00b      	b.n	8006b94 <HAL_FDCAN_Init+0x234>
 8006b7c:	0801c8d4 	.word	0x0801c8d4
 8006b80:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0220 	orr.w	r2, r2, #32
 8006b92:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006ba4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006bac:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006bbc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006bbe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bc8:	d115      	bne.n	8006bf6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bce:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006bd8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	3b01      	subs	r3, #1
 8006be0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006be2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	3b01      	subs	r3, #1
 8006bec:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006bf2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006bf4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c1c:	4413      	add	r3, r2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d011      	beq.n	8006c46 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006c2a:	f023 0107 	bic.w	r1, r3, #7
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	3360      	adds	r3, #96	; 0x60
 8006c36:	443b      	add	r3, r7
 8006c38:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d011      	beq.n	8006c72 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006c56:	f023 0107 	bic.w	r1, r3, #7
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	3360      	adds	r3, #96	; 0x60
 8006c62:	443b      	add	r3, r7
 8006c64:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d012      	beq.n	8006ca0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006c82:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	3360      	adds	r3, #96	; 0x60
 8006c8e:	443b      	add	r3, r7
 8006c90:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006c94:	011a      	lsls	r2, r3, #4
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d012      	beq.n	8006cce <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006cb0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	3360      	adds	r3, #96	; 0x60
 8006cbc:	443b      	add	r3, r7
 8006cbe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006cc2:	021a      	lsls	r2, r3, #8
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a11      	ldr	r2, [pc, #68]	; (8006d18 <HAL_FDCAN_Init+0x3b8>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d107      	bne.n	8006ce8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	689a      	ldr	r2, [r3, #8]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f022 0203 	bic.w	r2, r2, #3
 8006ce6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f80b 	bl	8006d1c <FDCAN_CalcultateRamBlockAddresses>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006d0c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3760      	adds	r7, #96	; 0x60
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	4000a000 	.word	0x4000a000

08006d1c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d28:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006d32:	4ba7      	ldr	r3, [pc, #668]	; (8006fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006d34:	4013      	ands	r3, r2
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	0091      	lsls	r1, r2, #2
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6812      	ldr	r2, [r2, #0]
 8006d3e:	430b      	orrs	r3, r1
 8006d40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d4c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d54:	041a      	lsls	r2, r3, #16
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	4413      	add	r3, r2
 8006d68:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d72:	4b97      	ldr	r3, [pc, #604]	; (8006fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006d74:	4013      	ands	r3, r2
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	0091      	lsls	r1, r2, #2
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	6812      	ldr	r2, [r2, #0]
 8006d7e:	430b      	orrs	r3, r1
 8006d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d94:	041a      	lsls	r2, r3, #16
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	4413      	add	r3, r2
 8006daa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006db4:	4b86      	ldr	r3, [pc, #536]	; (8006fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006db6:	4013      	ands	r3, r2
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	0091      	lsls	r1, r2, #2
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	6812      	ldr	r2, [r2, #0]
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dce:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	041a      	lsls	r2, r3, #16
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006dea:	fb02 f303 	mul.w	r3, r2, r3
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	4413      	add	r3, r2
 8006df2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006dfc:	4b74      	ldr	r3, [pc, #464]	; (8006fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	0091      	lsls	r1, r2, #2
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	6812      	ldr	r2, [r2, #0]
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e16:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e1e:	041a      	lsls	r2, r3, #16
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006e32:	fb02 f303 	mul.w	r3, r2, r3
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	4413      	add	r3, r2
 8006e3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006e44:	4b62      	ldr	r3, [pc, #392]	; (8006fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006e46:	4013      	ands	r3, r2
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	0091      	lsls	r1, r2, #2
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6812      	ldr	r2, [r2, #0]
 8006e50:	430b      	orrs	r3, r1
 8006e52:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006e5e:	fb02 f303 	mul.w	r3, r2, r3
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	4413      	add	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006e70:	4b57      	ldr	r3, [pc, #348]	; (8006fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006e72:	4013      	ands	r3, r2
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	0091      	lsls	r1, r2, #2
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	6812      	ldr	r2, [r2, #0]
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e8a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e92:	041a      	lsls	r2, r3, #16
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006eb2:	4b47      	ldr	r3, [pc, #284]	; (8006fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	0091      	lsls	r1, r2, #2
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	6812      	ldr	r2, [r2, #0]
 8006ebe:	430b      	orrs	r3, r1
 8006ec0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006ecc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed4:	041a      	lsls	r2, r3, #16
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006ee8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef0:	061a      	lsls	r2, r3, #24
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f00:	4b34      	ldr	r3, [pc, #208]	; (8006fd4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006f02:	4413      	add	r3, r2
 8006f04:	009a      	lsls	r2, r3, #2
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	441a      	add	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	441a      	add	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006f36:	fb01 f303 	mul.w	r3, r1, r3
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	441a      	add	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006f4e:	fb01 f303 	mul.w	r3, r1, r3
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	441a      	add	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006f66:	fb01 f303 	mul.w	r3, r1, r3
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	441a      	add	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	441a      	add	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f92:	6879      	ldr	r1, [r7, #4]
 8006f94:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006f96:	fb01 f303 	mul.w	r3, r1, r3
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	441a      	add	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006fb2:	fb01 f303 	mul.w	r3, r1, r3
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	441a      	add	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc6:	4a04      	ldr	r2, [pc, #16]	; (8006fd8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d915      	bls.n	8006ff8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006fcc:	e006      	b.n	8006fdc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006fce:	bf00      	nop
 8006fd0:	ffff0003 	.word	0xffff0003
 8006fd4:	10002b00 	.word	0x10002b00
 8006fd8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fe2:	f043 0220 	orr.w	r2, r3, #32
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2203      	movs	r2, #3
 8006ff0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e010      	b.n	800701a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	e005      	b.n	800700c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3304      	adds	r3, #4
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	429a      	cmp	r2, r3
 8007016:	d3f3      	bcc.n	8007000 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop

08007028 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007028:	b480      	push	{r7}
 800702a:	b089      	sub	sp, #36	; 0x24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007032:	2300      	movs	r3, #0
 8007034:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007036:	4b86      	ldr	r3, [pc, #536]	; (8007250 <HAL_GPIO_Init+0x228>)
 8007038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800703a:	e18c      	b.n	8007356 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	2101      	movs	r1, #1
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	fa01 f303 	lsl.w	r3, r1, r3
 8007048:	4013      	ands	r3, r2
 800704a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 817e 	beq.w	8007350 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f003 0303 	and.w	r3, r3, #3
 800705c:	2b01      	cmp	r3, #1
 800705e:	d005      	beq.n	800706c <HAL_GPIO_Init+0x44>
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f003 0303 	and.w	r3, r3, #3
 8007068:	2b02      	cmp	r3, #2
 800706a:	d130      	bne.n	80070ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	2203      	movs	r2, #3
 8007078:	fa02 f303 	lsl.w	r3, r2, r3
 800707c:	43db      	mvns	r3, r3
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	4013      	ands	r3, r2
 8007082:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	fa02 f303 	lsl.w	r3, r2, r3
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	4313      	orrs	r3, r2
 8007094:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80070a2:	2201      	movs	r2, #1
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	fa02 f303 	lsl.w	r3, r2, r3
 80070aa:	43db      	mvns	r3, r3
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	4013      	ands	r3, r2
 80070b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	091b      	lsrs	r3, r3, #4
 80070b8:	f003 0201 	and.w	r2, r3, #1
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	fa02 f303 	lsl.w	r3, r2, r3
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f003 0303 	and.w	r3, r3, #3
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d017      	beq.n	800710a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	2203      	movs	r2, #3
 80070e6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ea:	43db      	mvns	r3, r3
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	4013      	ands	r3, r2
 80070f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	fa02 f303 	lsl.w	r3, r2, r3
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	4313      	orrs	r3, r2
 8007102:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f003 0303 	and.w	r3, r3, #3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d123      	bne.n	800715e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	08da      	lsrs	r2, r3, #3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3208      	adds	r2, #8
 800711e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	220f      	movs	r2, #15
 800712e:	fa02 f303 	lsl.w	r3, r2, r3
 8007132:	43db      	mvns	r3, r3
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	4013      	ands	r3, r2
 8007138:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	691a      	ldr	r2, [r3, #16]
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	fa02 f303 	lsl.w	r3, r2, r3
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	4313      	orrs	r3, r2
 800714e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	08da      	lsrs	r2, r3, #3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3208      	adds	r2, #8
 8007158:	69b9      	ldr	r1, [r7, #24]
 800715a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	2203      	movs	r2, #3
 800716a:	fa02 f303 	lsl.w	r3, r2, r3
 800716e:	43db      	mvns	r3, r3
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	4013      	ands	r3, r2
 8007174:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f003 0203 	and.w	r2, r3, #3
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	fa02 f303 	lsl.w	r3, r2, r3
 8007186:	69ba      	ldr	r2, [r7, #24]
 8007188:	4313      	orrs	r3, r2
 800718a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 80d8 	beq.w	8007350 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071a0:	4b2c      	ldr	r3, [pc, #176]	; (8007254 <HAL_GPIO_Init+0x22c>)
 80071a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071a6:	4a2b      	ldr	r2, [pc, #172]	; (8007254 <HAL_GPIO_Init+0x22c>)
 80071a8:	f043 0302 	orr.w	r3, r3, #2
 80071ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80071b0:	4b28      	ldr	r3, [pc, #160]	; (8007254 <HAL_GPIO_Init+0x22c>)
 80071b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071be:	4a26      	ldr	r2, [pc, #152]	; (8007258 <HAL_GPIO_Init+0x230>)
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	089b      	lsrs	r3, r3, #2
 80071c4:	3302      	adds	r3, #2
 80071c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	220f      	movs	r2, #15
 80071d6:	fa02 f303 	lsl.w	r3, r2, r3
 80071da:	43db      	mvns	r3, r3
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	4013      	ands	r3, r2
 80071e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a1d      	ldr	r2, [pc, #116]	; (800725c <HAL_GPIO_Init+0x234>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d04a      	beq.n	8007280 <HAL_GPIO_Init+0x258>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a1c      	ldr	r2, [pc, #112]	; (8007260 <HAL_GPIO_Init+0x238>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d02b      	beq.n	800724a <HAL_GPIO_Init+0x222>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a1b      	ldr	r2, [pc, #108]	; (8007264 <HAL_GPIO_Init+0x23c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d025      	beq.n	8007246 <HAL_GPIO_Init+0x21e>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a1a      	ldr	r2, [pc, #104]	; (8007268 <HAL_GPIO_Init+0x240>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d01f      	beq.n	8007242 <HAL_GPIO_Init+0x21a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a19      	ldr	r2, [pc, #100]	; (800726c <HAL_GPIO_Init+0x244>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d019      	beq.n	800723e <HAL_GPIO_Init+0x216>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a18      	ldr	r2, [pc, #96]	; (8007270 <HAL_GPIO_Init+0x248>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d013      	beq.n	800723a <HAL_GPIO_Init+0x212>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a17      	ldr	r2, [pc, #92]	; (8007274 <HAL_GPIO_Init+0x24c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d00d      	beq.n	8007236 <HAL_GPIO_Init+0x20e>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a16      	ldr	r2, [pc, #88]	; (8007278 <HAL_GPIO_Init+0x250>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d007      	beq.n	8007232 <HAL_GPIO_Init+0x20a>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a15      	ldr	r2, [pc, #84]	; (800727c <HAL_GPIO_Init+0x254>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d101      	bne.n	800722e <HAL_GPIO_Init+0x206>
 800722a:	2309      	movs	r3, #9
 800722c:	e029      	b.n	8007282 <HAL_GPIO_Init+0x25a>
 800722e:	230a      	movs	r3, #10
 8007230:	e027      	b.n	8007282 <HAL_GPIO_Init+0x25a>
 8007232:	2307      	movs	r3, #7
 8007234:	e025      	b.n	8007282 <HAL_GPIO_Init+0x25a>
 8007236:	2306      	movs	r3, #6
 8007238:	e023      	b.n	8007282 <HAL_GPIO_Init+0x25a>
 800723a:	2305      	movs	r3, #5
 800723c:	e021      	b.n	8007282 <HAL_GPIO_Init+0x25a>
 800723e:	2304      	movs	r3, #4
 8007240:	e01f      	b.n	8007282 <HAL_GPIO_Init+0x25a>
 8007242:	2303      	movs	r3, #3
 8007244:	e01d      	b.n	8007282 <HAL_GPIO_Init+0x25a>
 8007246:	2302      	movs	r3, #2
 8007248:	e01b      	b.n	8007282 <HAL_GPIO_Init+0x25a>
 800724a:	2301      	movs	r3, #1
 800724c:	e019      	b.n	8007282 <HAL_GPIO_Init+0x25a>
 800724e:	bf00      	nop
 8007250:	58000080 	.word	0x58000080
 8007254:	58024400 	.word	0x58024400
 8007258:	58000400 	.word	0x58000400
 800725c:	58020000 	.word	0x58020000
 8007260:	58020400 	.word	0x58020400
 8007264:	58020800 	.word	0x58020800
 8007268:	58020c00 	.word	0x58020c00
 800726c:	58021000 	.word	0x58021000
 8007270:	58021400 	.word	0x58021400
 8007274:	58021800 	.word	0x58021800
 8007278:	58021c00 	.word	0x58021c00
 800727c:	58022400 	.word	0x58022400
 8007280:	2300      	movs	r3, #0
 8007282:	69fa      	ldr	r2, [r7, #28]
 8007284:	f002 0203 	and.w	r2, r2, #3
 8007288:	0092      	lsls	r2, r2, #2
 800728a:	4093      	lsls	r3, r2
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	4313      	orrs	r3, r2
 8007290:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007292:	4938      	ldr	r1, [pc, #224]	; (8007374 <HAL_GPIO_Init+0x34c>)
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	089b      	lsrs	r3, r3, #2
 8007298:	3302      	adds	r3, #2
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80072a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	43db      	mvns	r3, r3
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	4013      	ands	r3, r2
 80072b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80072be:	69ba      	ldr	r2, [r7, #24]
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80072c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80072ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	43db      	mvns	r3, r3
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	4013      	ands	r3, r2
 80072de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80072f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	43db      	mvns	r3, r3
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	4013      	ands	r3, r2
 800730a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d003      	beq.n	8007320 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	4313      	orrs	r3, r2
 800731e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	43db      	mvns	r3, r3
 8007330:	69ba      	ldr	r2, [r7, #24]
 8007332:	4013      	ands	r3, r2
 8007334:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	4313      	orrs	r3, r2
 8007348:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	3301      	adds	r3, #1
 8007354:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	fa22 f303 	lsr.w	r3, r2, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	f47f ae6b 	bne.w	800703c <HAL_GPIO_Init+0x14>
  }
}
 8007366:	bf00      	nop
 8007368:	bf00      	nop
 800736a:	3724      	adds	r7, #36	; 0x24
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	58000400 	.word	0x58000400

08007378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	807b      	strh	r3, [r7, #2]
 8007384:	4613      	mov	r3, r2
 8007386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007388:	787b      	ldrb	r3, [r7, #1]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800738e:	887a      	ldrh	r2, [r7, #2]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007394:	e003      	b.n	800739e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007396:	887b      	ldrh	r3, [r7, #2]
 8007398:	041a      	lsls	r2, r3, #16
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	619a      	str	r2, [r3, #24]
}
 800739e:	bf00      	nop
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
	...

080073ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e07f      	b.n	80074be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d106      	bne.n	80073d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7fa fd1a 	bl	8001e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2224      	movs	r2, #36	; 0x24
 80073dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 0201 	bic.w	r2, r2, #1
 80073ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80073fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800740c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d107      	bne.n	8007426 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689a      	ldr	r2, [r3, #8]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007422:	609a      	str	r2, [r3, #8]
 8007424:	e006      	b.n	8007434 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	689a      	ldr	r2, [r3, #8]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007432:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	2b02      	cmp	r3, #2
 800743a:	d104      	bne.n	8007446 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007444:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6859      	ldr	r1, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	4b1d      	ldr	r3, [pc, #116]	; (80074c8 <HAL_I2C_Init+0x11c>)
 8007452:	430b      	orrs	r3, r1
 8007454:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68da      	ldr	r2, [r3, #12]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007464:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691a      	ldr	r2, [r3, #16]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	430a      	orrs	r2, r1
 800747e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	69d9      	ldr	r1, [r3, #28]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a1a      	ldr	r2, [r3, #32]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f042 0201 	orr.w	r2, r2, #1
 800749e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2220      	movs	r2, #32
 80074aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	02008000 	.word	0x02008000

080074cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	68f9      	ldr	r1, [r7, #12]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	4798      	blx	r3
  }
}
 80074f8:	bf00      	nop
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b20      	cmp	r3, #32
 8007514:	d138      	bne.n	8007588 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800751c:	2b01      	cmp	r3, #1
 800751e:	d101      	bne.n	8007524 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007520:	2302      	movs	r3, #2
 8007522:	e032      	b.n	800758a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2224      	movs	r2, #36	; 0x24
 8007530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f022 0201 	bic.w	r2, r2, #1
 8007542:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007552:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6819      	ldr	r1, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f042 0201 	orr.w	r2, r2, #1
 8007572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	e000      	b.n	800758a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007588:	2302      	movs	r3, #2
  }
}
 800758a:	4618      	mov	r0, r3
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007596:	b480      	push	{r7}
 8007598:	b085      	sub	sp, #20
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b20      	cmp	r3, #32
 80075aa:	d139      	bne.n	8007620 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d101      	bne.n	80075ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80075b6:	2302      	movs	r3, #2
 80075b8:	e033      	b.n	8007622 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2224      	movs	r2, #36	; 0x24
 80075c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f022 0201 	bic.w	r2, r2, #1
 80075d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80075e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	021b      	lsls	r3, r3, #8
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0201 	orr.w	r2, r2, #1
 800760a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2220      	movs	r2, #32
 8007610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	e000      	b.n	8007622 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007620:	2302      	movs	r3, #2
  }
}
 8007622:	4618      	mov	r0, r3
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800762e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007630:	b08f      	sub	sp, #60	; 0x3c
 8007632:	af0a      	add	r7, sp, #40	; 0x28
 8007634:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e116      	b.n	800786e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d106      	bne.n	8007660 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f010 fa70 	bl	8017b40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2203      	movs	r2, #3
 8007664:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4618      	mov	r0, r3
 8007680:	f009 fc3f 	bl	8010f02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	603b      	str	r3, [r7, #0]
 800768a:	687e      	ldr	r6, [r7, #4]
 800768c:	466d      	mov	r5, sp
 800768e:	f106 0410 	add.w	r4, r6, #16
 8007692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800769a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800769e:	e885 0003 	stmia.w	r5, {r0, r1}
 80076a2:	1d33      	adds	r3, r6, #4
 80076a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076a6:	6838      	ldr	r0, [r7, #0]
 80076a8:	f009 fb0a 	bl	8010cc0 <USB_CoreInit>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d005      	beq.n	80076be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2202      	movs	r2, #2
 80076b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e0d7      	b.n	800786e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2100      	movs	r1, #0
 80076c4:	4618      	mov	r0, r3
 80076c6:	f009 fc2d 	bl	8010f24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
 80076ce:	e04a      	b.n	8007766 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80076d0:	7bfa      	ldrb	r2, [r7, #15]
 80076d2:	6879      	ldr	r1, [r7, #4]
 80076d4:	4613      	mov	r3, r2
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	440b      	add	r3, r1
 80076de:	333d      	adds	r3, #61	; 0x3d
 80076e0:	2201      	movs	r2, #1
 80076e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80076e4:	7bfa      	ldrb	r2, [r7, #15]
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	4613      	mov	r3, r2
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	4413      	add	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	440b      	add	r3, r1
 80076f2:	333c      	adds	r3, #60	; 0x3c
 80076f4:	7bfa      	ldrb	r2, [r7, #15]
 80076f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80076f8:	7bfa      	ldrb	r2, [r7, #15]
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	b298      	uxth	r0, r3
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	4613      	mov	r3, r2
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	440b      	add	r3, r1
 800770a:	3356      	adds	r3, #86	; 0x56
 800770c:	4602      	mov	r2, r0
 800770e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007710:	7bfa      	ldrb	r2, [r7, #15]
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	4613      	mov	r3, r2
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	4413      	add	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	440b      	add	r3, r1
 800771e:	3340      	adds	r3, #64	; 0x40
 8007720:	2200      	movs	r2, #0
 8007722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007724:	7bfa      	ldrb	r2, [r7, #15]
 8007726:	6879      	ldr	r1, [r7, #4]
 8007728:	4613      	mov	r3, r2
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	4413      	add	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	440b      	add	r3, r1
 8007732:	3344      	adds	r3, #68	; 0x44
 8007734:	2200      	movs	r2, #0
 8007736:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007738:	7bfa      	ldrb	r2, [r7, #15]
 800773a:	6879      	ldr	r1, [r7, #4]
 800773c:	4613      	mov	r3, r2
 800773e:	00db      	lsls	r3, r3, #3
 8007740:	4413      	add	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	440b      	add	r3, r1
 8007746:	3348      	adds	r3, #72	; 0x48
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800774c:	7bfa      	ldrb	r2, [r7, #15]
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	4613      	mov	r3, r2
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	440b      	add	r3, r1
 800775a:	334c      	adds	r3, #76	; 0x4c
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	3301      	adds	r3, #1
 8007764:	73fb      	strb	r3, [r7, #15]
 8007766:	7bfa      	ldrb	r2, [r7, #15]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	429a      	cmp	r2, r3
 800776e:	d3af      	bcc.n	80076d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]
 8007774:	e044      	b.n	8007800 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007776:	7bfa      	ldrb	r2, [r7, #15]
 8007778:	6879      	ldr	r1, [r7, #4]
 800777a:	4613      	mov	r3, r2
 800777c:	00db      	lsls	r3, r3, #3
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	440b      	add	r3, r1
 8007784:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007788:	2200      	movs	r2, #0
 800778a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800778c:	7bfa      	ldrb	r2, [r7, #15]
 800778e:	6879      	ldr	r1, [r7, #4]
 8007790:	4613      	mov	r3, r2
 8007792:	00db      	lsls	r3, r3, #3
 8007794:	4413      	add	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	440b      	add	r3, r1
 800779a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800779e:	7bfa      	ldrb	r2, [r7, #15]
 80077a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80077a2:	7bfa      	ldrb	r2, [r7, #15]
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	4613      	mov	r3, r2
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	4413      	add	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	440b      	add	r3, r1
 80077b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80077b4:	2200      	movs	r2, #0
 80077b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80077b8:	7bfa      	ldrb	r2, [r7, #15]
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	4613      	mov	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	4413      	add	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	440b      	add	r3, r1
 80077c6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80077ce:	7bfa      	ldrb	r2, [r7, #15]
 80077d0:	6879      	ldr	r1, [r7, #4]
 80077d2:	4613      	mov	r3, r2
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	440b      	add	r3, r1
 80077dc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80077e0:	2200      	movs	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80077e4:	7bfa      	ldrb	r2, [r7, #15]
 80077e6:	6879      	ldr	r1, [r7, #4]
 80077e8:	4613      	mov	r3, r2
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	440b      	add	r3, r1
 80077f2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80077f6:	2200      	movs	r2, #0
 80077f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	3301      	adds	r3, #1
 80077fe:	73fb      	strb	r3, [r7, #15]
 8007800:	7bfa      	ldrb	r2, [r7, #15]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	429a      	cmp	r2, r3
 8007808:	d3b5      	bcc.n	8007776 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	687e      	ldr	r6, [r7, #4]
 8007812:	466d      	mov	r5, sp
 8007814:	f106 0410 	add.w	r4, r6, #16
 8007818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800781a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800781c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800781e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007820:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007824:	e885 0003 	stmia.w	r5, {r0, r1}
 8007828:	1d33      	adds	r3, r6, #4
 800782a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800782c:	6838      	ldr	r0, [r7, #0]
 800782e:	f009 fbc5 	bl	8010fbc <USB_DevInit>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d005      	beq.n	8007844 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e014      	b.n	800786e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007858:	2b01      	cmp	r3, #1
 800785a:	d102      	bne.n	8007862 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 f96f 	bl	8008b40 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4618      	mov	r0, r3
 8007868:	f00a fc07 	bl	801207a <USB_DevDisconnect>

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007876 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_PCD_Start+0x1c>
 800788e:	2302      	movs	r3, #2
 8007890:	e022      	b.n	80078d8 <HAL_PCD_Start+0x62>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d109      	bne.n	80078ba <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d105      	bne.n	80078ba <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4618      	mov	r0, r3
 80078c0:	f009 fb0e 	bl	8010ee0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f00a fbb5 	bl	8012038 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80078e0:	b590      	push	{r4, r7, lr}
 80078e2:	b08d      	sub	sp, #52	; 0x34
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f00a fc73 	bl	80121e2 <USB_GetMode>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f040 84b7 	bne.w	8008272 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4618      	mov	r0, r3
 800790a:	f00a fbd7 	bl	80120bc <USB_ReadInterrupts>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 84ad 	beq.w	8008270 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	0a1b      	lsrs	r3, r3, #8
 8007920:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	f00a fbc4 	bl	80120bc <USB_ReadInterrupts>
 8007934:	4603      	mov	r3, r0
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b02      	cmp	r3, #2
 800793c:	d107      	bne.n	800794e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	695a      	ldr	r2, [r3, #20]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f002 0202 	and.w	r2, r2, #2
 800794c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4618      	mov	r0, r3
 8007954:	f00a fbb2 	bl	80120bc <USB_ReadInterrupts>
 8007958:	4603      	mov	r3, r0
 800795a:	f003 0310 	and.w	r3, r3, #16
 800795e:	2b10      	cmp	r3, #16
 8007960:	d161      	bne.n	8007a26 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	699a      	ldr	r2, [r3, #24]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 0210 	bic.w	r2, r2, #16
 8007970:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	f003 020f 	and.w	r2, r3, #15
 800797e:	4613      	mov	r3, r2
 8007980:	00db      	lsls	r3, r3, #3
 8007982:	4413      	add	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	4413      	add	r3, r2
 800798e:	3304      	adds	r3, #4
 8007990:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	0c5b      	lsrs	r3, r3, #17
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	2b02      	cmp	r3, #2
 800799c:	d124      	bne.n	80079e8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80079a4:	4013      	ands	r3, r2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d035      	beq.n	8007a16 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	091b      	lsrs	r3, r3, #4
 80079b2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80079b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	461a      	mov	r2, r3
 80079bc:	6a38      	ldr	r0, [r7, #32]
 80079be:	f00a f9e9 	bl	8011d94 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	091b      	lsrs	r3, r3, #4
 80079ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079ce:	441a      	add	r2, r3
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	695a      	ldr	r2, [r3, #20]
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	091b      	lsrs	r3, r3, #4
 80079dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079e0:	441a      	add	r2, r3
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	615a      	str	r2, [r3, #20]
 80079e6:	e016      	b.n	8007a16 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	0c5b      	lsrs	r3, r3, #17
 80079ec:	f003 030f 	and.w	r3, r3, #15
 80079f0:	2b06      	cmp	r3, #6
 80079f2:	d110      	bne.n	8007a16 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80079fa:	2208      	movs	r2, #8
 80079fc:	4619      	mov	r1, r3
 80079fe:	6a38      	ldr	r0, [r7, #32]
 8007a00:	f00a f9c8 	bl	8011d94 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	695a      	ldr	r2, [r3, #20]
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	091b      	lsrs	r3, r3, #4
 8007a0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a10:	441a      	add	r2, r3
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	699a      	ldr	r2, [r3, #24]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0210 	orr.w	r2, r2, #16
 8007a24:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f00a fb46 	bl	80120bc <USB_ReadInterrupts>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a3a:	f040 80a7 	bne.w	8007b8c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f00a fb4b 	bl	80120e2 <USB_ReadDevAllOutEpInterrupt>
 8007a4c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007a4e:	e099      	b.n	8007b84 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 808e 	beq.w	8007b78 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a62:	b2d2      	uxtb	r2, r2
 8007a64:	4611      	mov	r1, r2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f00a fb6f 	bl	801214a <USB_ReadDevOutEPInterrupt>
 8007a6c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00c      	beq.n	8007a92 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a84:	461a      	mov	r2, r3
 8007a86:	2301      	movs	r3, #1
 8007a88:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007a8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 fed1 	bl	8008834 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f003 0308 	and.w	r3, r3, #8
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00c      	beq.n	8007ab6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	2308      	movs	r3, #8
 8007aac:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007aae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 ffa7 	bl	8008a04 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f003 0310 	and.w	r3, r3, #16
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d008      	beq.n	8007ad2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007acc:	461a      	mov	r2, r3
 8007ace:	2310      	movs	r3, #16
 8007ad0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d030      	beq.n	8007b3e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae4:	2b80      	cmp	r3, #128	; 0x80
 8007ae6:	d109      	bne.n	8007afc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	69fa      	ldr	r2, [r7, #28]
 8007af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007afa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afe:	4613      	mov	r3, r2
 8007b00:	00db      	lsls	r3, r3, #3
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	3304      	adds	r3, #4
 8007b10:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	78db      	ldrb	r3, [r3, #3]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d108      	bne.n	8007b2c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f010 f902 	bl	8017d30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b38:	461a      	mov	r2, r3
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	f003 0320 	and.w	r3, r3, #32
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d008      	beq.n	8007b5a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b54:	461a      	mov	r2, r3
 8007b56:	2320      	movs	r3, #32
 8007b58:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d009      	beq.n	8007b78 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b70:	461a      	mov	r2, r3
 8007b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b76:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	085b      	lsrs	r3, r3, #1
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f47f af62 	bne.w	8007a50 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f00a fa93 	bl	80120bc <USB_ReadInterrupts>
 8007b96:	4603      	mov	r3, r0
 8007b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ba0:	f040 80db 	bne.w	8007d5a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f00a fab4 	bl	8012116 <USB_ReadDevAllInEpInterrupt>
 8007bae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007bb4:	e0cd      	b.n	8007d52 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 80c2 	beq.w	8007d46 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc8:	b2d2      	uxtb	r2, r2
 8007bca:	4611      	mov	r1, r2
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f00a fada 	bl	8012186 <USB_ReadDevInEPInterrupt>
 8007bd2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d057      	beq.n	8007c8e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be0:	f003 030f 	and.w	r3, r3, #15
 8007be4:	2201      	movs	r2, #1
 8007be6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	43db      	mvns	r3, r3
 8007bf8:	69f9      	ldr	r1, [r7, #28]
 8007bfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bfe:	4013      	ands	r3, r2
 8007c00:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c0e:	461a      	mov	r2, r3
 8007c10:	2301      	movs	r3, #1
 8007c12:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d132      	bne.n	8007c82 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c20:	4613      	mov	r3, r2
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	440b      	add	r3, r1
 8007c2a:	3348      	adds	r3, #72	; 0x48
 8007c2c:	6819      	ldr	r1, [r3, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c32:	4613      	mov	r3, r2
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4403      	add	r3, r0
 8007c3c:	3344      	adds	r3, #68	; 0x44
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4419      	add	r1, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c46:	4613      	mov	r3, r2
 8007c48:	00db      	lsls	r3, r3, #3
 8007c4a:	4413      	add	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4403      	add	r3, r0
 8007c50:	3348      	adds	r3, #72	; 0x48
 8007c52:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d113      	bne.n	8007c82 <HAL_PCD_IRQHandler+0x3a2>
 8007c5a:	6879      	ldr	r1, [r7, #4]
 8007c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5e:	4613      	mov	r3, r2
 8007c60:	00db      	lsls	r3, r3, #3
 8007c62:	4413      	add	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	440b      	add	r3, r1
 8007c68:	334c      	adds	r3, #76	; 0x4c
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d108      	bne.n	8007c82 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	f00a fae3 	bl	8012248 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f00f ffcc 	bl	8017c26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f003 0308 	and.w	r3, r3, #8
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d008      	beq.n	8007caa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	2308      	movs	r3, #8
 8007ca8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f003 0310 	and.w	r3, r3, #16
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d008      	beq.n	8007cc6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	2310      	movs	r3, #16
 8007cc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d008      	beq.n	8007ce2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cdc:	461a      	mov	r2, r3
 8007cde:	2340      	movs	r3, #64	; 0x40
 8007ce0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f003 0302 	and.w	r3, r3, #2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d023      	beq.n	8007d34 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007cec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cee:	6a38      	ldr	r0, [r7, #32]
 8007cf0:	f009 fac2 	bl	8011278 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	00db      	lsls	r3, r3, #3
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	3338      	adds	r3, #56	; 0x38
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	4413      	add	r3, r2
 8007d04:	3304      	adds	r3, #4
 8007d06:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	78db      	ldrb	r3, [r3, #3]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d108      	bne.n	8007d22 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	2200      	movs	r2, #0
 8007d14:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f010 f819 	bl	8017d54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2e:	461a      	mov	r2, r3
 8007d30:	2302      	movs	r3, #2
 8007d32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007d3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fcea 	bl	800871a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	3301      	adds	r3, #1
 8007d4a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4e:	085b      	lsrs	r3, r3, #1
 8007d50:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f47f af2e 	bne.w	8007bb6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f00a f9ac 	bl	80120bc <USB_ReadInterrupts>
 8007d64:	4603      	mov	r3, r0
 8007d66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d6e:	d122      	bne.n	8007db6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	69fa      	ldr	r2, [r7, #28]
 8007d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d7e:	f023 0301 	bic.w	r3, r3, #1
 8007d82:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d108      	bne.n	8007da0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007d96:	2100      	movs	r1, #0
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fef5 	bl	8008b88 <HAL_PCDEx_LPM_Callback>
 8007d9e:	e002      	b.n	8007da6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f00f ffb7 	bl	8017d14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	695a      	ldr	r2, [r3, #20]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f00a f97e 	bl	80120bc <USB_ReadInterrupts>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dca:	d112      	bne.n	8007df2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d102      	bne.n	8007de2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f00f ff73 	bl	8017cc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	695a      	ldr	r2, [r3, #20]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f00a f960 	bl	80120bc <USB_ReadInterrupts>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e06:	d121      	bne.n	8007e4c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	695a      	ldr	r2, [r3, #20]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007e16:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d111      	bne.n	8007e46 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e30:	089b      	lsrs	r3, r3, #2
 8007e32:	f003 020f 	and.w	r2, r3, #15
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fea2 	bl	8008b88 <HAL_PCDEx_LPM_Callback>
 8007e44:	e002      	b.n	8007e4c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f00f ff3e 	bl	8017cc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f00a f933 	bl	80120bc <USB_ReadInterrupts>
 8007e56:	4603      	mov	r3, r0
 8007e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e60:	f040 80b7 	bne.w	8007fd2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	69fa      	ldr	r2, [r7, #28]
 8007e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e72:	f023 0301 	bic.w	r3, r3, #1
 8007e76:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2110      	movs	r1, #16
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f009 f9fa 	bl	8011278 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e84:	2300      	movs	r3, #0
 8007e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e88:	e046      	b.n	8007f18 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8c:	015a      	lsls	r2, r3, #5
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e96:	461a      	mov	r2, r3
 8007e98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e9c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eae:	0151      	lsls	r1, r2, #5
 8007eb0:	69fa      	ldr	r2, [r7, #28]
 8007eb2:	440a      	add	r2, r1
 8007eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ebc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	015a      	lsls	r2, r3, #5
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ed0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ee2:	0151      	lsls	r1, r2, #5
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	440a      	add	r2, r1
 8007ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ef0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f02:	0151      	lsls	r1, r2, #5
 8007f04:	69fa      	ldr	r2, [r7, #28]
 8007f06:	440a      	add	r2, r1
 8007f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f10:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	3301      	adds	r3, #1
 8007f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d3b3      	bcc.n	8007e8a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	69fa      	ldr	r2, [r7, #28]
 8007f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f30:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007f34:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d016      	beq.n	8007f6c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f48:	69fa      	ldr	r2, [r7, #28]
 8007f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f4e:	f043 030b 	orr.w	r3, r3, #11
 8007f52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5e:	69fa      	ldr	r2, [r7, #28]
 8007f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f64:	f043 030b 	orr.w	r3, r3, #11
 8007f68:	6453      	str	r3, [r2, #68]	; 0x44
 8007f6a:	e015      	b.n	8007f98 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f72:	695a      	ldr	r2, [r3, #20]
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	f242 032b 	movw	r3, #8235	; 0x202b
 8007f80:	4313      	orrs	r3, r2
 8007f82:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	69fa      	ldr	r2, [r7, #28]
 8007f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f92:	f043 030b 	orr.w	r3, r3, #11
 8007f96:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	69fa      	ldr	r2, [r7, #28]
 8007fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fa6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007faa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6818      	ldr	r0, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	f00a f943 	bl	8012248 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	695a      	ldr	r2, [r3, #20]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f00a f870 	bl	80120bc <USB_ReadInterrupts>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fe6:	d124      	bne.n	8008032 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f00a f907 	bl	8012200 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f009 f9bb 	bl	8011372 <USB_GetDevSpeed>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	461a      	mov	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681c      	ldr	r4, [r3, #0]
 8008008:	f001 fd88 	bl	8009b1c <HAL_RCC_GetHCLKFreq>
 800800c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008012:	b2db      	uxtb	r3, r3
 8008014:	461a      	mov	r2, r3
 8008016:	4620      	mov	r0, r4
 8008018:	f008 fec0 	bl	8010d9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f00f fe2a 	bl	8017c76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	695a      	ldr	r2, [r3, #20]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008030:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4618      	mov	r0, r3
 8008038:	f00a f840 	bl	80120bc <USB_ReadInterrupts>
 800803c:	4603      	mov	r3, r0
 800803e:	f003 0308 	and.w	r3, r3, #8
 8008042:	2b08      	cmp	r3, #8
 8008044:	d10a      	bne.n	800805c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f00f fe07 	bl	8017c5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	695a      	ldr	r2, [r3, #20]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f002 0208 	and.w	r2, r2, #8
 800805a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f00a f82b 	bl	80120bc <USB_ReadInterrupts>
 8008066:	4603      	mov	r3, r0
 8008068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800806c:	2b80      	cmp	r3, #128	; 0x80
 800806e:	d122      	bne.n	80080b6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800807c:	2301      	movs	r3, #1
 800807e:	627b      	str	r3, [r7, #36]	; 0x24
 8008080:	e014      	b.n	80080ac <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008086:	4613      	mov	r3, r2
 8008088:	00db      	lsls	r3, r3, #3
 800808a:	4413      	add	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	440b      	add	r3, r1
 8008090:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d105      	bne.n	80080a6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	b2db      	uxtb	r3, r3
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fb09 	bl	80086b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	3301      	adds	r3, #1
 80080aa:	627b      	str	r3, [r7, #36]	; 0x24
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d3e5      	bcc.n	8008082 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f009 fffe 	bl	80120bc <USB_ReadInterrupts>
 80080c0:	4603      	mov	r3, r0
 80080c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080ca:	d13b      	bne.n	8008144 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080cc:	2301      	movs	r3, #1
 80080ce:	627b      	str	r3, [r7, #36]	; 0x24
 80080d0:	e02b      	b.n	800812a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e6:	4613      	mov	r3, r2
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	440b      	add	r3, r1
 80080f0:	3340      	adds	r3, #64	; 0x40
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d115      	bne.n	8008124 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80080f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	da12      	bge.n	8008124 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008102:	4613      	mov	r3, r2
 8008104:	00db      	lsls	r3, r3, #3
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	440b      	add	r3, r1
 800810c:	333f      	adds	r3, #63	; 0x3f
 800810e:	2201      	movs	r2, #1
 8008110:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	b2db      	uxtb	r3, r3
 8008116:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800811a:	b2db      	uxtb	r3, r3
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 faca 	bl	80086b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	3301      	adds	r3, #1
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008130:	429a      	cmp	r2, r3
 8008132:	d3ce      	bcc.n	80080d2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	695a      	ldr	r2, [r3, #20]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008142:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4618      	mov	r0, r3
 800814a:	f009 ffb7 	bl	80120bc <USB_ReadInterrupts>
 800814e:	4603      	mov	r3, r0
 8008150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008154:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008158:	d155      	bne.n	8008206 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800815a:	2301      	movs	r3, #1
 800815c:	627b      	str	r3, [r7, #36]	; 0x24
 800815e:	e045      	b.n	80081ec <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	4413      	add	r3, r2
 8008168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008170:	6879      	ldr	r1, [r7, #4]
 8008172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008174:	4613      	mov	r3, r2
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	4413      	add	r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	440b      	add	r3, r1
 800817e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d12e      	bne.n	80081e6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008188:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800818a:	2b00      	cmp	r3, #0
 800818c:	da2b      	bge.n	80081e6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800819a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800819e:	429a      	cmp	r2, r3
 80081a0:	d121      	bne.n	80081e6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a6:	4613      	mov	r3, r2
 80081a8:	00db      	lsls	r3, r3, #3
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	440b      	add	r3, r1
 80081b0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80081b4:	2201      	movs	r2, #1
 80081b6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10a      	bne.n	80081e6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	69fa      	ldr	r2, [r7, #28]
 80081da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081e2:	6053      	str	r3, [r2, #4]
            break;
 80081e4:	e007      	b.n	80081f6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	3301      	adds	r3, #1
 80081ea:	627b      	str	r3, [r7, #36]	; 0x24
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d3b4      	bcc.n	8008160 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	695a      	ldr	r2, [r3, #20]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008204:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4618      	mov	r0, r3
 800820c:	f009 ff56 	bl	80120bc <USB_ReadInterrupts>
 8008210:	4603      	mov	r3, r0
 8008212:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821a:	d10a      	bne.n	8008232 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f00f fdab 	bl	8017d78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	695a      	ldr	r2, [r3, #20]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008230:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4618      	mov	r0, r3
 8008238:	f009 ff40 	bl	80120bc <USB_ReadInterrupts>
 800823c:	4603      	mov	r3, r0
 800823e:	f003 0304 	and.w	r3, r3, #4
 8008242:	2b04      	cmp	r3, #4
 8008244:	d115      	bne.n	8008272 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f00f fd9b 	bl	8017d94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6859      	ldr	r1, [r3, #4]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	69ba      	ldr	r2, [r7, #24]
 800826a:	430a      	orrs	r2, r1
 800826c:	605a      	str	r2, [r3, #4]
 800826e:	e000      	b.n	8008272 <HAL_PCD_IRQHandler+0x992>
      return;
 8008270:	bf00      	nop
    }
  }
}
 8008272:	3734      	adds	r7, #52	; 0x34
 8008274:	46bd      	mov	sp, r7
 8008276:	bd90      	pop	{r4, r7, pc}

08008278 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800828a:	2b01      	cmp	r3, #1
 800828c:	d101      	bne.n	8008292 <HAL_PCD_SetAddress+0x1a>
 800828e:	2302      	movs	r3, #2
 8008290:	e013      	b.n	80082ba <HAL_PCD_SetAddress+0x42>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	78fa      	ldrb	r2, [r7, #3]
 800829e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	78fa      	ldrb	r2, [r7, #3]
 80082a8:	4611      	mov	r1, r2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f009 fe9e 	bl	8011fec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	4608      	mov	r0, r1
 80082cc:	4611      	mov	r1, r2
 80082ce:	461a      	mov	r2, r3
 80082d0:	4603      	mov	r3, r0
 80082d2:	70fb      	strb	r3, [r7, #3]
 80082d4:	460b      	mov	r3, r1
 80082d6:	803b      	strh	r3, [r7, #0]
 80082d8:	4613      	mov	r3, r2
 80082da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80082e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	da0f      	bge.n	8008308 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082e8:	78fb      	ldrb	r3, [r7, #3]
 80082ea:	f003 020f 	and.w	r2, r3, #15
 80082ee:	4613      	mov	r3, r2
 80082f0:	00db      	lsls	r3, r3, #3
 80082f2:	4413      	add	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	3338      	adds	r3, #56	; 0x38
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	4413      	add	r3, r2
 80082fc:	3304      	adds	r3, #4
 80082fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2201      	movs	r2, #1
 8008304:	705a      	strb	r2, [r3, #1]
 8008306:	e00f      	b.n	8008328 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008308:	78fb      	ldrb	r3, [r7, #3]
 800830a:	f003 020f 	and.w	r2, r3, #15
 800830e:	4613      	mov	r3, r2
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	4413      	add	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	4413      	add	r3, r2
 800831e:	3304      	adds	r3, #4
 8008320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	f003 030f 	and.w	r3, r3, #15
 800832e:	b2da      	uxtb	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008334:	883a      	ldrh	r2, [r7, #0]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	78ba      	ldrb	r2, [r7, #2]
 800833e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	785b      	ldrb	r3, [r3, #1]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d004      	beq.n	8008352 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	b29a      	uxth	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008352:	78bb      	ldrb	r3, [r7, #2]
 8008354:	2b02      	cmp	r3, #2
 8008356:	d102      	bne.n	800835e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008364:	2b01      	cmp	r3, #1
 8008366:	d101      	bne.n	800836c <HAL_PCD_EP_Open+0xaa>
 8008368:	2302      	movs	r3, #2
 800836a:	e00e      	b.n	800838a <HAL_PCD_EP_Open+0xc8>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68f9      	ldr	r1, [r7, #12]
 800837a:	4618      	mov	r0, r3
 800837c:	f009 f81e 	bl	80113bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008388:	7afb      	ldrb	r3, [r7, #11]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	460b      	mov	r3, r1
 800839c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800839e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	da0f      	bge.n	80083c6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083a6:	78fb      	ldrb	r3, [r7, #3]
 80083a8:	f003 020f 	and.w	r2, r3, #15
 80083ac:	4613      	mov	r3, r2
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	4413      	add	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	3338      	adds	r3, #56	; 0x38
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	4413      	add	r3, r2
 80083ba:	3304      	adds	r3, #4
 80083bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2201      	movs	r2, #1
 80083c2:	705a      	strb	r2, [r3, #1]
 80083c4:	e00f      	b.n	80083e6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083c6:	78fb      	ldrb	r3, [r7, #3]
 80083c8:	f003 020f 	and.w	r2, r3, #15
 80083cc:	4613      	mov	r3, r2
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	4413      	add	r3, r2
 80083dc:	3304      	adds	r3, #4
 80083de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80083e6:	78fb      	ldrb	r3, [r7, #3]
 80083e8:	f003 030f 	and.w	r3, r3, #15
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d101      	bne.n	8008400 <HAL_PCD_EP_Close+0x6e>
 80083fc:	2302      	movs	r3, #2
 80083fe:	e00e      	b.n	800841e <HAL_PCD_EP_Close+0x8c>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68f9      	ldr	r1, [r7, #12]
 800840e:	4618      	mov	r0, r3
 8008410:	f009 f85c 	bl	80114cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b086      	sub	sp, #24
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	607a      	str	r2, [r7, #4]
 8008430:	603b      	str	r3, [r7, #0]
 8008432:	460b      	mov	r3, r1
 8008434:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008436:	7afb      	ldrb	r3, [r7, #11]
 8008438:	f003 020f 	and.w	r2, r3, #15
 800843c:	4613      	mov	r3, r2
 800843e:	00db      	lsls	r3, r3, #3
 8008440:	4413      	add	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	4413      	add	r3, r2
 800844c:	3304      	adds	r3, #4
 800844e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	2200      	movs	r2, #0
 8008460:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	2200      	movs	r2, #0
 8008466:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008468:	7afb      	ldrb	r3, [r7, #11]
 800846a:	f003 030f 	and.w	r3, r3, #15
 800846e:	b2da      	uxtb	r2, r3
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d102      	bne.n	8008482 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6818      	ldr	r0, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	b2db      	uxtb	r3, r3
 800848c:	461a      	mov	r2, r3
 800848e:	6979      	ldr	r1, [r7, #20]
 8008490:	f009 f8f8 	bl	8011684 <USB_EPStartXfer>

  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800849e:	b480      	push	{r7}
 80084a0:	b083      	sub	sp, #12
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	460b      	mov	r3, r1
 80084a8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80084aa:	78fb      	ldrb	r3, [r7, #3]
 80084ac:	f003 020f 	and.w	r2, r3, #15
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	4613      	mov	r3, r2
 80084b4:	00db      	lsls	r3, r3, #3
 80084b6:	4413      	add	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	440b      	add	r3, r1
 80084bc:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80084c0:	681b      	ldr	r3, [r3, #0]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b086      	sub	sp, #24
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	603b      	str	r3, [r7, #0]
 80084da:	460b      	mov	r3, r1
 80084dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084de:	7afb      	ldrb	r3, [r7, #11]
 80084e0:	f003 020f 	and.w	r2, r3, #15
 80084e4:	4613      	mov	r3, r2
 80084e6:	00db      	lsls	r3, r3, #3
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	3338      	adds	r3, #56	; 0x38
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	4413      	add	r3, r2
 80084f2:	3304      	adds	r3, #4
 80084f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2200      	movs	r2, #0
 8008506:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	2201      	movs	r2, #1
 800850c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800850e:	7afb      	ldrb	r3, [r7, #11]
 8008510:	f003 030f 	and.w	r3, r3, #15
 8008514:	b2da      	uxtb	r2, r3
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d102      	bne.n	8008528 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6818      	ldr	r0, [r3, #0]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	b2db      	uxtb	r3, r3
 8008532:	461a      	mov	r2, r3
 8008534:	6979      	ldr	r1, [r7, #20]
 8008536:	f009 f8a5 	bl	8011684 <USB_EPStartXfer>

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	460b      	mov	r3, r1
 800854e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	f003 020f 	and.w	r2, r3, #15
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	429a      	cmp	r2, r3
 800855c:	d901      	bls.n	8008562 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e050      	b.n	8008604 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008566:	2b00      	cmp	r3, #0
 8008568:	da0f      	bge.n	800858a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800856a:	78fb      	ldrb	r3, [r7, #3]
 800856c:	f003 020f 	and.w	r2, r3, #15
 8008570:	4613      	mov	r3, r2
 8008572:	00db      	lsls	r3, r3, #3
 8008574:	4413      	add	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	3338      	adds	r3, #56	; 0x38
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	3304      	adds	r3, #4
 8008580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2201      	movs	r2, #1
 8008586:	705a      	strb	r2, [r3, #1]
 8008588:	e00d      	b.n	80085a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800858a:	78fa      	ldrb	r2, [r7, #3]
 800858c:	4613      	mov	r3, r2
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	4413      	add	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	4413      	add	r3, r2
 800859c:	3304      	adds	r3, #4
 800859e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80085ac:	78fb      	ldrb	r3, [r7, #3]
 80085ae:	f003 030f 	and.w	r3, r3, #15
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d101      	bne.n	80085c6 <HAL_PCD_EP_SetStall+0x82>
 80085c2:	2302      	movs	r3, #2
 80085c4:	e01e      	b.n	8008604 <HAL_PCD_EP_SetStall+0xc0>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68f9      	ldr	r1, [r7, #12]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f009 fc35 	bl	8011e44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80085da:	78fb      	ldrb	r3, [r7, #3]
 80085dc:	f003 030f 	and.w	r3, r3, #15
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10a      	bne.n	80085fa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6818      	ldr	r0, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	b2d9      	uxtb	r1, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80085f4:	461a      	mov	r2, r3
 80085f6:	f009 fe27 	bl	8012248 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	f003 020f 	and.w	r2, r3, #15
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	429a      	cmp	r2, r3
 8008624:	d901      	bls.n	800862a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e042      	b.n	80086b0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800862a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800862e:	2b00      	cmp	r3, #0
 8008630:	da0f      	bge.n	8008652 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008632:	78fb      	ldrb	r3, [r7, #3]
 8008634:	f003 020f 	and.w	r2, r3, #15
 8008638:	4613      	mov	r3, r2
 800863a:	00db      	lsls	r3, r3, #3
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	3338      	adds	r3, #56	; 0x38
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	4413      	add	r3, r2
 8008646:	3304      	adds	r3, #4
 8008648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2201      	movs	r2, #1
 800864e:	705a      	strb	r2, [r3, #1]
 8008650:	e00f      	b.n	8008672 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	f003 020f 	and.w	r2, r3, #15
 8008658:	4613      	mov	r3, r2
 800865a:	00db      	lsls	r3, r3, #3
 800865c:	4413      	add	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	4413      	add	r3, r2
 8008668:	3304      	adds	r3, #4
 800866a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	f003 030f 	and.w	r3, r3, #15
 800867e:	b2da      	uxtb	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800868a:	2b01      	cmp	r3, #1
 800868c:	d101      	bne.n	8008692 <HAL_PCD_EP_ClrStall+0x86>
 800868e:	2302      	movs	r3, #2
 8008690:	e00e      	b.n	80086b0 <HAL_PCD_EP_ClrStall+0xa4>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68f9      	ldr	r1, [r7, #12]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f009 fc3d 	bl	8011f20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80086c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	da0c      	bge.n	80086e6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	f003 020f 	and.w	r2, r3, #15
 80086d2:	4613      	mov	r3, r2
 80086d4:	00db      	lsls	r3, r3, #3
 80086d6:	4413      	add	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	3338      	adds	r3, #56	; 0x38
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	4413      	add	r3, r2
 80086e0:	3304      	adds	r3, #4
 80086e2:	60fb      	str	r3, [r7, #12]
 80086e4:	e00c      	b.n	8008700 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086e6:	78fb      	ldrb	r3, [r7, #3]
 80086e8:	f003 020f 	and.w	r2, r3, #15
 80086ec:	4613      	mov	r3, r2
 80086ee:	00db      	lsls	r3, r3, #3
 80086f0:	4413      	add	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	4413      	add	r3, r2
 80086fc:	3304      	adds	r3, #4
 80086fe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68f9      	ldr	r1, [r7, #12]
 8008706:	4618      	mov	r0, r3
 8008708:	f009 fa5c 	bl	8011bc4 <USB_EPStopXfer>
 800870c:	4603      	mov	r3, r0
 800870e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008710:	7afb      	ldrb	r3, [r7, #11]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b08a      	sub	sp, #40	; 0x28
 800871e:	af02      	add	r7, sp, #8
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	4613      	mov	r3, r2
 8008732:	00db      	lsls	r3, r3, #3
 8008734:	4413      	add	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	3338      	adds	r3, #56	; 0x38
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	4413      	add	r3, r2
 800873e:	3304      	adds	r3, #4
 8008740:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	695a      	ldr	r2, [r3, #20]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	429a      	cmp	r2, r3
 800874c:	d901      	bls.n	8008752 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e06c      	b.n	800882c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	691a      	ldr	r2, [r3, #16]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	69fa      	ldr	r2, [r7, #28]
 8008764:	429a      	cmp	r2, r3
 8008766:	d902      	bls.n	800876e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	3303      	adds	r3, #3
 8008772:	089b      	lsrs	r3, r3, #2
 8008774:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008776:	e02b      	b.n	80087d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	691a      	ldr	r2, [r3, #16]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	69fa      	ldr	r2, [r7, #28]
 800878a:	429a      	cmp	r2, r3
 800878c:	d902      	bls.n	8008794 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	3303      	adds	r3, #3
 8008798:	089b      	lsrs	r3, r3, #2
 800879a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	68d9      	ldr	r1, [r3, #12]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	b2da      	uxtb	r2, r3
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	4603      	mov	r3, r0
 80087b2:	6978      	ldr	r0, [r7, #20]
 80087b4:	f009 fab0 	bl	8011d18 <USB_WritePacket>

    ep->xfer_buff  += len;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	68da      	ldr	r2, [r3, #12]
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	441a      	add	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	695a      	ldr	r2, [r3, #20]
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	441a      	add	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	69ba      	ldr	r2, [r7, #24]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d809      	bhi.n	80087fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	695a      	ldr	r2, [r3, #20]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d203      	bcs.n	80087fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1be      	bne.n	8008778 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	691a      	ldr	r2, [r3, #16]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	429a      	cmp	r2, r3
 8008804:	d811      	bhi.n	800882a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	f003 030f 	and.w	r3, r3, #15
 800880c:	2201      	movs	r2, #1
 800880e:	fa02 f303 	lsl.w	r3, r2, r3
 8008812:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800881a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	43db      	mvns	r3, r3
 8008820:	6939      	ldr	r1, [r7, #16]
 8008822:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008826:	4013      	ands	r3, r2
 8008828:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3720      	adds	r7, #32
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b088      	sub	sp, #32
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	333c      	adds	r3, #60	; 0x3c
 800884c:	3304      	adds	r3, #4
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d17b      	bne.n	8008962 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	f003 0308 	and.w	r3, r3, #8
 8008870:	2b00      	cmp	r3, #0
 8008872:	d015      	beq.n	80088a0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	4a61      	ldr	r2, [pc, #388]	; (80089fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008878:	4293      	cmp	r3, r2
 800887a:	f240 80b9 	bls.w	80089f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008884:	2b00      	cmp	r3, #0
 8008886:	f000 80b3 	beq.w	80089f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	4413      	add	r3, r2
 8008892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008896:	461a      	mov	r2, r3
 8008898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800889c:	6093      	str	r3, [r2, #8]
 800889e:	e0a7      	b.n	80089f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f003 0320 	and.w	r3, r3, #32
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d009      	beq.n	80088be <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b6:	461a      	mov	r2, r3
 80088b8:	2320      	movs	r3, #32
 80088ba:	6093      	str	r3, [r2, #8]
 80088bc:	e098      	b.n	80089f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f040 8093 	bne.w	80089f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	4a4b      	ldr	r2, [pc, #300]	; (80089fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d90f      	bls.n	80088f2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00a      	beq.n	80088f2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e8:	461a      	mov	r2, r3
 80088ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088ee:	6093      	str	r3, [r2, #8]
 80088f0:	e07e      	b.n	80089f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	4613      	mov	r3, r2
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	4413      	add	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	4413      	add	r3, r2
 8008904:	3304      	adds	r3, #4
 8008906:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6a1a      	ldr	r2, [r3, #32]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	0159      	lsls	r1, r3, #5
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	440b      	add	r3, r1
 8008914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800891e:	1ad2      	subs	r2, r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d114      	bne.n	8008954 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d109      	bne.n	8008946 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6818      	ldr	r0, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800893c:	461a      	mov	r2, r3
 800893e:	2101      	movs	r1, #1
 8008940:	f009 fc82 	bl	8012248 <USB_EP0_OutStart>
 8008944:	e006      	b.n	8008954 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	441a      	add	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	b2db      	uxtb	r3, r3
 8008958:	4619      	mov	r1, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f00f f948 	bl	8017bf0 <HAL_PCD_DataOutStageCallback>
 8008960:	e046      	b.n	80089f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	4a26      	ldr	r2, [pc, #152]	; (8008a00 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d124      	bne.n	80089b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	4413      	add	r3, r2
 800897c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008980:	461a      	mov	r2, r3
 8008982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008986:	6093      	str	r3, [r2, #8]
 8008988:	e032      	b.n	80089f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	f003 0320 	and.w	r3, r3, #32
 8008990:	2b00      	cmp	r3, #0
 8008992:	d008      	beq.n	80089a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a0:	461a      	mov	r2, r3
 80089a2:	2320      	movs	r3, #32
 80089a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f00f f91f 	bl	8017bf0 <HAL_PCD_DataOutStageCallback>
 80089b2:	e01d      	b.n	80089f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d114      	bne.n	80089e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80089ba:	6879      	ldr	r1, [r7, #4]
 80089bc:	683a      	ldr	r2, [r7, #0]
 80089be:	4613      	mov	r3, r2
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	440b      	add	r3, r1
 80089c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d108      	bne.n	80089e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6818      	ldr	r0, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089dc:	461a      	mov	r2, r3
 80089de:	2100      	movs	r1, #0
 80089e0:	f009 fc32 	bl	8012248 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f00f f900 	bl	8017bf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3720      	adds	r7, #32
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	4f54300a 	.word	0x4f54300a
 8008a00:	4f54310a 	.word	0x4f54310a

08008a04 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	333c      	adds	r3, #60	; 0x3c
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	015a      	lsls	r2, r3, #5
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4a15      	ldr	r2, [pc, #84]	; (8008a8c <PCD_EP_OutSetupPacket_int+0x88>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d90e      	bls.n	8008a58 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d009      	beq.n	8008a58 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	015a      	lsls	r2, r3, #5
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a50:	461a      	mov	r2, r3
 8008a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a56:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f00f f8b7 	bl	8017bcc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	4a0a      	ldr	r2, [pc, #40]	; (8008a8c <PCD_EP_OutSetupPacket_int+0x88>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d90c      	bls.n	8008a80 <PCD_EP_OutSetupPacket_int+0x7c>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d108      	bne.n	8008a80 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6818      	ldr	r0, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a78:	461a      	mov	r2, r3
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	f009 fbe4 	bl	8012248 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3718      	adds	r7, #24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	4f54300a 	.word	0x4f54300a

08008a90 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	70fb      	strb	r3, [r7, #3]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008aa8:	78fb      	ldrb	r3, [r7, #3]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d107      	bne.n	8008abe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008aae:	883b      	ldrh	r3, [r7, #0]
 8008ab0:	0419      	lsls	r1, r3, #16
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	430a      	orrs	r2, r1
 8008aba:	629a      	str	r2, [r3, #40]	; 0x28
 8008abc:	e028      	b.n	8008b10 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac4:	0c1b      	lsrs	r3, r3, #16
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	4413      	add	r3, r2
 8008aca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]
 8008ad0:	e00d      	b.n	8008aee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	3340      	adds	r3, #64	; 0x40
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4413      	add	r3, r2
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	0c1b      	lsrs	r3, r3, #16
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	3301      	adds	r3, #1
 8008aec:	73fb      	strb	r3, [r7, #15]
 8008aee:	7bfa      	ldrb	r2, [r7, #15]
 8008af0:	78fb      	ldrb	r3, [r7, #3]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d3ec      	bcc.n	8008ad2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008af8:	883b      	ldrh	r3, [r7, #0]
 8008afa:	0418      	lsls	r0, r3, #16
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6819      	ldr	r1, [r3, #0]
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	3b01      	subs	r3, #1
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	4302      	orrs	r2, r0
 8008b08:	3340      	adds	r3, #64	; 0x40
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	440b      	add	r3, r1
 8008b0e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	460b      	mov	r3, r1
 8008b28:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	887a      	ldrh	r2, [r7, #2]
 8008b30:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b6e:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <HAL_PCDEx_ActivateLPM+0x44>)
 8008b70:	4313      	orrs	r3, r2
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	10000003 	.word	0x10000003

08008b88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008ba8:	4b19      	ldr	r3, [pc, #100]	; (8008c10 <HAL_PWREx_ConfigSupply+0x70>)
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	f003 0304 	and.w	r3, r3, #4
 8008bb0:	2b04      	cmp	r3, #4
 8008bb2:	d00a      	beq.n	8008bca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008bb4:	4b16      	ldr	r3, [pc, #88]	; (8008c10 <HAL_PWREx_ConfigSupply+0x70>)
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	f003 0307 	and.w	r3, r3, #7
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d001      	beq.n	8008bc6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e01f      	b.n	8008c06 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	e01d      	b.n	8008c06 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008bca:	4b11      	ldr	r3, [pc, #68]	; (8008c10 <HAL_PWREx_ConfigSupply+0x70>)
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	f023 0207 	bic.w	r2, r3, #7
 8008bd2:	490f      	ldr	r1, [pc, #60]	; (8008c10 <HAL_PWREx_ConfigSupply+0x70>)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008bda:	f7fa f8ef 	bl	8002dbc <HAL_GetTick>
 8008bde:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008be0:	e009      	b.n	8008bf6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008be2:	f7fa f8eb 	bl	8002dbc <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bf0:	d901      	bls.n	8008bf6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e007      	b.n	8008c06 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008bf6:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <HAL_PWREx_ConfigSupply+0x70>)
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c02:	d1ee      	bne.n	8008be2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	58024800 	.word	0x58024800

08008c14 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008c14:	b480      	push	{r7}
 8008c16:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008c18:	4b05      	ldr	r3, [pc, #20]	; (8008c30 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	4a04      	ldr	r2, [pc, #16]	; (8008c30 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c22:	60d3      	str	r3, [r2, #12]
}
 8008c24:	bf00      	nop
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	58024800 	.word	0x58024800

08008c34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b08c      	sub	sp, #48	; 0x30
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e3c8      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f000 8087 	beq.w	8008d62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c54:	4b88      	ldr	r3, [pc, #544]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c5e:	4b86      	ldr	r3, [pc, #536]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c62:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c66:	2b10      	cmp	r3, #16
 8008c68:	d007      	beq.n	8008c7a <HAL_RCC_OscConfig+0x46>
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	2b18      	cmp	r3, #24
 8008c6e:	d110      	bne.n	8008c92 <HAL_RCC_OscConfig+0x5e>
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	f003 0303 	and.w	r3, r3, #3
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d10b      	bne.n	8008c92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c7a:	4b7f      	ldr	r3, [pc, #508]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d06c      	beq.n	8008d60 <HAL_RCC_OscConfig+0x12c>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d168      	bne.n	8008d60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e3a2      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c9a:	d106      	bne.n	8008caa <HAL_RCC_OscConfig+0x76>
 8008c9c:	4b76      	ldr	r3, [pc, #472]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a75      	ldr	r2, [pc, #468]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	e02e      	b.n	8008d08 <HAL_RCC_OscConfig+0xd4>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10c      	bne.n	8008ccc <HAL_RCC_OscConfig+0x98>
 8008cb2:	4b71      	ldr	r3, [pc, #452]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a70      	ldr	r2, [pc, #448]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	4b6e      	ldr	r3, [pc, #440]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a6d      	ldr	r2, [pc, #436]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cc8:	6013      	str	r3, [r2, #0]
 8008cca:	e01d      	b.n	8008d08 <HAL_RCC_OscConfig+0xd4>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cd4:	d10c      	bne.n	8008cf0 <HAL_RCC_OscConfig+0xbc>
 8008cd6:	4b68      	ldr	r3, [pc, #416]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a67      	ldr	r2, [pc, #412]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	4b65      	ldr	r3, [pc, #404]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a64      	ldr	r2, [pc, #400]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cec:	6013      	str	r3, [r2, #0]
 8008cee:	e00b      	b.n	8008d08 <HAL_RCC_OscConfig+0xd4>
 8008cf0:	4b61      	ldr	r3, [pc, #388]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a60      	ldr	r2, [pc, #384]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	4b5e      	ldr	r3, [pc, #376]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a5d      	ldr	r2, [pc, #372]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d013      	beq.n	8008d38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d10:	f7fa f854 	bl	8002dbc <HAL_GetTick>
 8008d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d16:	e008      	b.n	8008d2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d18:	f7fa f850 	bl	8002dbc <HAL_GetTick>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	2b64      	cmp	r3, #100	; 0x64
 8008d24:	d901      	bls.n	8008d2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e356      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d2a:	4b53      	ldr	r3, [pc, #332]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0f0      	beq.n	8008d18 <HAL_RCC_OscConfig+0xe4>
 8008d36:	e014      	b.n	8008d62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d38:	f7fa f840 	bl	8002dbc <HAL_GetTick>
 8008d3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d3e:	e008      	b.n	8008d52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d40:	f7fa f83c 	bl	8002dbc <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	2b64      	cmp	r3, #100	; 0x64
 8008d4c:	d901      	bls.n	8008d52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e342      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d52:	4b49      	ldr	r3, [pc, #292]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1f0      	bne.n	8008d40 <HAL_RCC_OscConfig+0x10c>
 8008d5e:	e000      	b.n	8008d62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f000 808c 	beq.w	8008e88 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d70:	4b41      	ldr	r3, [pc, #260]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d78:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d7a:	4b3f      	ldr	r3, [pc, #252]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008d80:	6a3b      	ldr	r3, [r7, #32]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d007      	beq.n	8008d96 <HAL_RCC_OscConfig+0x162>
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	2b18      	cmp	r3, #24
 8008d8a:	d137      	bne.n	8008dfc <HAL_RCC_OscConfig+0x1c8>
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	f003 0303 	and.w	r3, r3, #3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d132      	bne.n	8008dfc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d96:	4b38      	ldr	r3, [pc, #224]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0304 	and.w	r3, r3, #4
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d005      	beq.n	8008dae <HAL_RCC_OscConfig+0x17a>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e314      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008dae:	4b32      	ldr	r3, [pc, #200]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f023 0219 	bic.w	r2, r3, #25
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	492f      	ldr	r1, [pc, #188]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc0:	f7f9 fffc 	bl	8002dbc <HAL_GetTick>
 8008dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008dc6:	e008      	b.n	8008dda <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dc8:	f7f9 fff8 	bl	8002dbc <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d901      	bls.n	8008dda <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e2fe      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008dda:	4b27      	ldr	r3, [pc, #156]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0304 	and.w	r3, r3, #4
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d0f0      	beq.n	8008dc8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008de6:	4b24      	ldr	r3, [pc, #144]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	061b      	lsls	r3, r3, #24
 8008df4:	4920      	ldr	r1, [pc, #128]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008dfa:	e045      	b.n	8008e88 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d026      	beq.n	8008e52 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e04:	4b1c      	ldr	r3, [pc, #112]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f023 0219 	bic.w	r2, r3, #25
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	4919      	ldr	r1, [pc, #100]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008e12:	4313      	orrs	r3, r2
 8008e14:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e16:	f7f9 ffd1 	bl	8002dbc <HAL_GetTick>
 8008e1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e1c:	e008      	b.n	8008e30 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e1e:	f7f9 ffcd 	bl	8002dbc <HAL_GetTick>
 8008e22:	4602      	mov	r2, r0
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d901      	bls.n	8008e30 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e2d3      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e30:	4b11      	ldr	r3, [pc, #68]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0304 	and.w	r3, r3, #4
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d0f0      	beq.n	8008e1e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e3c:	4b0e      	ldr	r3, [pc, #56]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	061b      	lsls	r3, r3, #24
 8008e4a:	490b      	ldr	r1, [pc, #44]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	604b      	str	r3, [r1, #4]
 8008e50:	e01a      	b.n	8008e88 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e52:	4b09      	ldr	r3, [pc, #36]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a08      	ldr	r2, [pc, #32]	; (8008e78 <HAL_RCC_OscConfig+0x244>)
 8008e58:	f023 0301 	bic.w	r3, r3, #1
 8008e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e5e:	f7f9 ffad 	bl	8002dbc <HAL_GetTick>
 8008e62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e64:	e00a      	b.n	8008e7c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e66:	f7f9 ffa9 	bl	8002dbc <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d903      	bls.n	8008e7c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e2af      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
 8008e78:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e7c:	4b96      	ldr	r3, [pc, #600]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0304 	and.w	r3, r3, #4
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1ee      	bne.n	8008e66 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0310 	and.w	r3, r3, #16
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d06a      	beq.n	8008f6a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e94:	4b90      	ldr	r3, [pc, #576]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e9c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e9e:	4b8e      	ldr	r3, [pc, #568]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	2b08      	cmp	r3, #8
 8008ea8:	d007      	beq.n	8008eba <HAL_RCC_OscConfig+0x286>
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	2b18      	cmp	r3, #24
 8008eae:	d11b      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x2b4>
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f003 0303 	and.w	r3, r3, #3
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d116      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008eba:	4b87      	ldr	r3, [pc, #540]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d005      	beq.n	8008ed2 <HAL_RCC_OscConfig+0x29e>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	2b80      	cmp	r3, #128	; 0x80
 8008ecc:	d001      	beq.n	8008ed2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e282      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ed2:	4b81      	ldr	r3, [pc, #516]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	061b      	lsls	r3, r3, #24
 8008ee0:	497d      	ldr	r1, [pc, #500]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ee6:	e040      	b.n	8008f6a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d023      	beq.n	8008f38 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008ef0:	4b79      	ldr	r3, [pc, #484]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a78      	ldr	r2, [pc, #480]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008efc:	f7f9 ff5e 	bl	8002dbc <HAL_GetTick>
 8008f00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f02:	e008      	b.n	8008f16 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008f04:	f7f9 ff5a 	bl	8002dbc <HAL_GetTick>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d901      	bls.n	8008f16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e260      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f16:	4b70      	ldr	r3, [pc, #448]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d0f0      	beq.n	8008f04 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f22:	4b6d      	ldr	r3, [pc, #436]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	061b      	lsls	r3, r3, #24
 8008f30:	4969      	ldr	r1, [pc, #420]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008f32:	4313      	orrs	r3, r2
 8008f34:	60cb      	str	r3, [r1, #12]
 8008f36:	e018      	b.n	8008f6a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008f38:	4b67      	ldr	r3, [pc, #412]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a66      	ldr	r2, [pc, #408]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f44:	f7f9 ff3a 	bl	8002dbc <HAL_GetTick>
 8008f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f4a:	e008      	b.n	8008f5e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008f4c:	f7f9 ff36 	bl	8002dbc <HAL_GetTick>
 8008f50:	4602      	mov	r2, r0
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d901      	bls.n	8008f5e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e23c      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f5e:	4b5e      	ldr	r3, [pc, #376]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1f0      	bne.n	8008f4c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0308 	and.w	r3, r3, #8
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d036      	beq.n	8008fe4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	695b      	ldr	r3, [r3, #20]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d019      	beq.n	8008fb2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f7e:	4b56      	ldr	r3, [pc, #344]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f82:	4a55      	ldr	r2, [pc, #340]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008f84:	f043 0301 	orr.w	r3, r3, #1
 8008f88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f8a:	f7f9 ff17 	bl	8002dbc <HAL_GetTick>
 8008f8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f90:	e008      	b.n	8008fa4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f92:	f7f9 ff13 	bl	8002dbc <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d901      	bls.n	8008fa4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e219      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008fa4:	4b4c      	ldr	r3, [pc, #304]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fa8:	f003 0302 	and.w	r3, r3, #2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d0f0      	beq.n	8008f92 <HAL_RCC_OscConfig+0x35e>
 8008fb0:	e018      	b.n	8008fe4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008fb2:	4b49      	ldr	r3, [pc, #292]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fb6:	4a48      	ldr	r2, [pc, #288]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008fb8:	f023 0301 	bic.w	r3, r3, #1
 8008fbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fbe:	f7f9 fefd 	bl	8002dbc <HAL_GetTick>
 8008fc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008fc4:	e008      	b.n	8008fd8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fc6:	f7f9 fef9 	bl	8002dbc <HAL_GetTick>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d901      	bls.n	8008fd8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e1ff      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008fd8:	4b3f      	ldr	r3, [pc, #252]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1f0      	bne.n	8008fc6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0320 	and.w	r3, r3, #32
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d036      	beq.n	800905e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d019      	beq.n	800902c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008ff8:	4b37      	ldr	r3, [pc, #220]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a36      	ldr	r2, [pc, #216]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8008ffe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009002:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009004:	f7f9 feda 	bl	8002dbc <HAL_GetTick>
 8009008:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800900a:	e008      	b.n	800901e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800900c:	f7f9 fed6 	bl	8002dbc <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	2b02      	cmp	r3, #2
 8009018:	d901      	bls.n	800901e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	e1dc      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800901e:	4b2e      	ldr	r3, [pc, #184]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0f0      	beq.n	800900c <HAL_RCC_OscConfig+0x3d8>
 800902a:	e018      	b.n	800905e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800902c:	4b2a      	ldr	r3, [pc, #168]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a29      	ldr	r2, [pc, #164]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8009032:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009036:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009038:	f7f9 fec0 	bl	8002dbc <HAL_GetTick>
 800903c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800903e:	e008      	b.n	8009052 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009040:	f7f9 febc 	bl	8002dbc <HAL_GetTick>
 8009044:	4602      	mov	r2, r0
 8009046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	2b02      	cmp	r3, #2
 800904c:	d901      	bls.n	8009052 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800904e:	2303      	movs	r3, #3
 8009050:	e1c2      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009052:	4b21      	ldr	r3, [pc, #132]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1f0      	bne.n	8009040 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0304 	and.w	r3, r3, #4
 8009066:	2b00      	cmp	r3, #0
 8009068:	f000 8086 	beq.w	8009178 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800906c:	4b1b      	ldr	r3, [pc, #108]	; (80090dc <HAL_RCC_OscConfig+0x4a8>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a1a      	ldr	r2, [pc, #104]	; (80090dc <HAL_RCC_OscConfig+0x4a8>)
 8009072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009076:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009078:	f7f9 fea0 	bl	8002dbc <HAL_GetTick>
 800907c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800907e:	e008      	b.n	8009092 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009080:	f7f9 fe9c 	bl	8002dbc <HAL_GetTick>
 8009084:	4602      	mov	r2, r0
 8009086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	2b64      	cmp	r3, #100	; 0x64
 800908c:	d901      	bls.n	8009092 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800908e:	2303      	movs	r3, #3
 8009090:	e1a2      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009092:	4b12      	ldr	r3, [pc, #72]	; (80090dc <HAL_RCC_OscConfig+0x4a8>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800909a:	2b00      	cmp	r3, #0
 800909c:	d0f0      	beq.n	8009080 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d106      	bne.n	80090b4 <HAL_RCC_OscConfig+0x480>
 80090a6:	4b0c      	ldr	r3, [pc, #48]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 80090a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090aa:	4a0b      	ldr	r2, [pc, #44]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 80090ac:	f043 0301 	orr.w	r3, r3, #1
 80090b0:	6713      	str	r3, [r2, #112]	; 0x70
 80090b2:	e032      	b.n	800911a <HAL_RCC_OscConfig+0x4e6>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d111      	bne.n	80090e0 <HAL_RCC_OscConfig+0x4ac>
 80090bc:	4b06      	ldr	r3, [pc, #24]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 80090be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c0:	4a05      	ldr	r2, [pc, #20]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 80090c2:	f023 0301 	bic.w	r3, r3, #1
 80090c6:	6713      	str	r3, [r2, #112]	; 0x70
 80090c8:	4b03      	ldr	r3, [pc, #12]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 80090ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090cc:	4a02      	ldr	r2, [pc, #8]	; (80090d8 <HAL_RCC_OscConfig+0x4a4>)
 80090ce:	f023 0304 	bic.w	r3, r3, #4
 80090d2:	6713      	str	r3, [r2, #112]	; 0x70
 80090d4:	e021      	b.n	800911a <HAL_RCC_OscConfig+0x4e6>
 80090d6:	bf00      	nop
 80090d8:	58024400 	.word	0x58024400
 80090dc:	58024800 	.word	0x58024800
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	2b05      	cmp	r3, #5
 80090e6:	d10c      	bne.n	8009102 <HAL_RCC_OscConfig+0x4ce>
 80090e8:	4b83      	ldr	r3, [pc, #524]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 80090ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ec:	4a82      	ldr	r2, [pc, #520]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 80090ee:	f043 0304 	orr.w	r3, r3, #4
 80090f2:	6713      	str	r3, [r2, #112]	; 0x70
 80090f4:	4b80      	ldr	r3, [pc, #512]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 80090f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f8:	4a7f      	ldr	r2, [pc, #508]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 80090fa:	f043 0301 	orr.w	r3, r3, #1
 80090fe:	6713      	str	r3, [r2, #112]	; 0x70
 8009100:	e00b      	b.n	800911a <HAL_RCC_OscConfig+0x4e6>
 8009102:	4b7d      	ldr	r3, [pc, #500]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 8009104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009106:	4a7c      	ldr	r2, [pc, #496]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 8009108:	f023 0301 	bic.w	r3, r3, #1
 800910c:	6713      	str	r3, [r2, #112]	; 0x70
 800910e:	4b7a      	ldr	r3, [pc, #488]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 8009110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009112:	4a79      	ldr	r2, [pc, #484]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 8009114:	f023 0304 	bic.w	r3, r3, #4
 8009118:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d015      	beq.n	800914e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009122:	f7f9 fe4b 	bl	8002dbc <HAL_GetTick>
 8009126:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009128:	e00a      	b.n	8009140 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800912a:	f7f9 fe47 	bl	8002dbc <HAL_GetTick>
 800912e:	4602      	mov	r2, r0
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	f241 3288 	movw	r2, #5000	; 0x1388
 8009138:	4293      	cmp	r3, r2
 800913a:	d901      	bls.n	8009140 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e14b      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009140:	4b6d      	ldr	r3, [pc, #436]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 8009142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009144:	f003 0302 	and.w	r3, r3, #2
 8009148:	2b00      	cmp	r3, #0
 800914a:	d0ee      	beq.n	800912a <HAL_RCC_OscConfig+0x4f6>
 800914c:	e014      	b.n	8009178 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800914e:	f7f9 fe35 	bl	8002dbc <HAL_GetTick>
 8009152:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009154:	e00a      	b.n	800916c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009156:	f7f9 fe31 	bl	8002dbc <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	f241 3288 	movw	r2, #5000	; 0x1388
 8009164:	4293      	cmp	r3, r2
 8009166:	d901      	bls.n	800916c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e135      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800916c:	4b62      	ldr	r3, [pc, #392]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 800916e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009170:	f003 0302 	and.w	r3, r3, #2
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1ee      	bne.n	8009156 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 812a 	beq.w	80093d6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009182:	4b5d      	ldr	r3, [pc, #372]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800918a:	2b18      	cmp	r3, #24
 800918c:	f000 80ba 	beq.w	8009304 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009194:	2b02      	cmp	r3, #2
 8009196:	f040 8095 	bne.w	80092c4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800919a:	4b57      	ldr	r3, [pc, #348]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a56      	ldr	r2, [pc, #344]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 80091a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091a6:	f7f9 fe09 	bl	8002dbc <HAL_GetTick>
 80091aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091ac:	e008      	b.n	80091c0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091ae:	f7f9 fe05 	bl	8002dbc <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d901      	bls.n	80091c0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e10b      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091c0:	4b4d      	ldr	r3, [pc, #308]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1f0      	bne.n	80091ae <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80091cc:	4b4a      	ldr	r3, [pc, #296]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 80091ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091d0:	4b4a      	ldr	r3, [pc, #296]	; (80092fc <HAL_RCC_OscConfig+0x6c8>)
 80091d2:	4013      	ands	r3, r2
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80091dc:	0112      	lsls	r2, r2, #4
 80091de:	430a      	orrs	r2, r1
 80091e0:	4945      	ldr	r1, [pc, #276]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	628b      	str	r3, [r1, #40]	; 0x28
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ea:	3b01      	subs	r3, #1
 80091ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f4:	3b01      	subs	r3, #1
 80091f6:	025b      	lsls	r3, r3, #9
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	431a      	orrs	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009200:	3b01      	subs	r3, #1
 8009202:	041b      	lsls	r3, r3, #16
 8009204:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009208:	431a      	orrs	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920e:	3b01      	subs	r3, #1
 8009210:	061b      	lsls	r3, r3, #24
 8009212:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009216:	4938      	ldr	r1, [pc, #224]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 8009218:	4313      	orrs	r3, r2
 800921a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800921c:	4b36      	ldr	r3, [pc, #216]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	4a35      	ldr	r2, [pc, #212]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 8009222:	f023 0301 	bic.w	r3, r3, #1
 8009226:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009228:	4b33      	ldr	r3, [pc, #204]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 800922a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800922c:	4b34      	ldr	r3, [pc, #208]	; (8009300 <HAL_RCC_OscConfig+0x6cc>)
 800922e:	4013      	ands	r3, r2
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009234:	00d2      	lsls	r2, r2, #3
 8009236:	4930      	ldr	r1, [pc, #192]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 8009238:	4313      	orrs	r3, r2
 800923a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800923c:	4b2e      	ldr	r3, [pc, #184]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 800923e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009240:	f023 020c 	bic.w	r2, r3, #12
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009248:	492b      	ldr	r1, [pc, #172]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 800924a:	4313      	orrs	r3, r2
 800924c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800924e:	4b2a      	ldr	r3, [pc, #168]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 8009250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009252:	f023 0202 	bic.w	r2, r3, #2
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800925a:	4927      	ldr	r1, [pc, #156]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 800925c:	4313      	orrs	r3, r2
 800925e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009260:	4b25      	ldr	r3, [pc, #148]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 8009262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009264:	4a24      	ldr	r2, [pc, #144]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 8009266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800926a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800926c:	4b22      	ldr	r3, [pc, #136]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 800926e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009270:	4a21      	ldr	r2, [pc, #132]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 8009272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009276:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009278:	4b1f      	ldr	r3, [pc, #124]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 800927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927c:	4a1e      	ldr	r2, [pc, #120]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 800927e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009282:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009284:	4b1c      	ldr	r3, [pc, #112]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	4a1b      	ldr	r2, [pc, #108]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 800928a:	f043 0301 	orr.w	r3, r3, #1
 800928e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009290:	4b19      	ldr	r3, [pc, #100]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a18      	ldr	r2, [pc, #96]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 8009296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800929a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800929c:	f7f9 fd8e 	bl	8002dbc <HAL_GetTick>
 80092a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092a2:	e008      	b.n	80092b6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092a4:	f7f9 fd8a 	bl	8002dbc <HAL_GetTick>
 80092a8:	4602      	mov	r2, r0
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d901      	bls.n	80092b6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80092b2:	2303      	movs	r3, #3
 80092b4:	e090      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092b6:	4b10      	ldr	r3, [pc, #64]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d0f0      	beq.n	80092a4 <HAL_RCC_OscConfig+0x670>
 80092c2:	e088      	b.n	80093d6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092c4:	4b0c      	ldr	r3, [pc, #48]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a0b      	ldr	r2, [pc, #44]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 80092ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d0:	f7f9 fd74 	bl	8002dbc <HAL_GetTick>
 80092d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092d6:	e008      	b.n	80092ea <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092d8:	f7f9 fd70 	bl	8002dbc <HAL_GetTick>
 80092dc:	4602      	mov	r2, r0
 80092de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d901      	bls.n	80092ea <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80092e6:	2303      	movs	r3, #3
 80092e8:	e076      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092ea:	4b03      	ldr	r3, [pc, #12]	; (80092f8 <HAL_RCC_OscConfig+0x6c4>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1f0      	bne.n	80092d8 <HAL_RCC_OscConfig+0x6a4>
 80092f6:	e06e      	b.n	80093d6 <HAL_RCC_OscConfig+0x7a2>
 80092f8:	58024400 	.word	0x58024400
 80092fc:	fffffc0c 	.word	0xfffffc0c
 8009300:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009304:	4b36      	ldr	r3, [pc, #216]	; (80093e0 <HAL_RCC_OscConfig+0x7ac>)
 8009306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009308:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800930a:	4b35      	ldr	r3, [pc, #212]	; (80093e0 <HAL_RCC_OscConfig+0x7ac>)
 800930c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009314:	2b01      	cmp	r3, #1
 8009316:	d031      	beq.n	800937c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f003 0203 	and.w	r2, r3, #3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009322:	429a      	cmp	r2, r3
 8009324:	d12a      	bne.n	800937c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	091b      	lsrs	r3, r3, #4
 800932a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009332:	429a      	cmp	r2, r3
 8009334:	d122      	bne.n	800937c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009340:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009342:	429a      	cmp	r2, r3
 8009344:	d11a      	bne.n	800937c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	0a5b      	lsrs	r3, r3, #9
 800934a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009352:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009354:	429a      	cmp	r2, r3
 8009356:	d111      	bne.n	800937c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	0c1b      	lsrs	r3, r3, #16
 800935c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009364:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009366:	429a      	cmp	r2, r3
 8009368:	d108      	bne.n	800937c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	0e1b      	lsrs	r3, r3, #24
 800936e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009376:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009378:	429a      	cmp	r2, r3
 800937a:	d001      	beq.n	8009380 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e02b      	b.n	80093d8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009380:	4b17      	ldr	r3, [pc, #92]	; (80093e0 <HAL_RCC_OscConfig+0x7ac>)
 8009382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009384:	08db      	lsrs	r3, r3, #3
 8009386:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800938a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009390:	693a      	ldr	r2, [r7, #16]
 8009392:	429a      	cmp	r2, r3
 8009394:	d01f      	beq.n	80093d6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009396:	4b12      	ldr	r3, [pc, #72]	; (80093e0 <HAL_RCC_OscConfig+0x7ac>)
 8009398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939a:	4a11      	ldr	r2, [pc, #68]	; (80093e0 <HAL_RCC_OscConfig+0x7ac>)
 800939c:	f023 0301 	bic.w	r3, r3, #1
 80093a0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80093a2:	f7f9 fd0b 	bl	8002dbc <HAL_GetTick>
 80093a6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80093a8:	bf00      	nop
 80093aa:	f7f9 fd07 	bl	8002dbc <HAL_GetTick>
 80093ae:	4602      	mov	r2, r0
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d0f9      	beq.n	80093aa <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80093b6:	4b0a      	ldr	r3, [pc, #40]	; (80093e0 <HAL_RCC_OscConfig+0x7ac>)
 80093b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093ba:	4b0a      	ldr	r3, [pc, #40]	; (80093e4 <HAL_RCC_OscConfig+0x7b0>)
 80093bc:	4013      	ands	r3, r2
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80093c2:	00d2      	lsls	r2, r2, #3
 80093c4:	4906      	ldr	r1, [pc, #24]	; (80093e0 <HAL_RCC_OscConfig+0x7ac>)
 80093c6:	4313      	orrs	r3, r2
 80093c8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80093ca:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <HAL_RCC_OscConfig+0x7ac>)
 80093cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ce:	4a04      	ldr	r2, [pc, #16]	; (80093e0 <HAL_RCC_OscConfig+0x7ac>)
 80093d0:	f043 0301 	orr.w	r3, r3, #1
 80093d4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3730      	adds	r7, #48	; 0x30
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	58024400 	.word	0x58024400
 80093e4:	ffff0007 	.word	0xffff0007

080093e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e19c      	b.n	8009736 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093fc:	4b8a      	ldr	r3, [pc, #552]	; (8009628 <HAL_RCC_ClockConfig+0x240>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 030f 	and.w	r3, r3, #15
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	429a      	cmp	r2, r3
 8009408:	d910      	bls.n	800942c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800940a:	4b87      	ldr	r3, [pc, #540]	; (8009628 <HAL_RCC_ClockConfig+0x240>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f023 020f 	bic.w	r2, r3, #15
 8009412:	4985      	ldr	r1, [pc, #532]	; (8009628 <HAL_RCC_ClockConfig+0x240>)
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	4313      	orrs	r3, r2
 8009418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800941a:	4b83      	ldr	r3, [pc, #524]	; (8009628 <HAL_RCC_ClockConfig+0x240>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 030f 	and.w	r3, r3, #15
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	429a      	cmp	r2, r3
 8009426:	d001      	beq.n	800942c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e184      	b.n	8009736 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0304 	and.w	r3, r3, #4
 8009434:	2b00      	cmp	r3, #0
 8009436:	d010      	beq.n	800945a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	691a      	ldr	r2, [r3, #16]
 800943c:	4b7b      	ldr	r3, [pc, #492]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009444:	429a      	cmp	r2, r3
 8009446:	d908      	bls.n	800945a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009448:	4b78      	ldr	r3, [pc, #480]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	4975      	ldr	r1, [pc, #468]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 8009456:	4313      	orrs	r3, r2
 8009458:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0308 	and.w	r3, r3, #8
 8009462:	2b00      	cmp	r3, #0
 8009464:	d010      	beq.n	8009488 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	695a      	ldr	r2, [r3, #20]
 800946a:	4b70      	ldr	r3, [pc, #448]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009472:	429a      	cmp	r2, r3
 8009474:	d908      	bls.n	8009488 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009476:	4b6d      	ldr	r3, [pc, #436]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	695b      	ldr	r3, [r3, #20]
 8009482:	496a      	ldr	r1, [pc, #424]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 8009484:	4313      	orrs	r3, r2
 8009486:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 0310 	and.w	r3, r3, #16
 8009490:	2b00      	cmp	r3, #0
 8009492:	d010      	beq.n	80094b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	699a      	ldr	r2, [r3, #24]
 8009498:	4b64      	ldr	r3, [pc, #400]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 800949a:	69db      	ldr	r3, [r3, #28]
 800949c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d908      	bls.n	80094b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80094a4:	4b61      	ldr	r3, [pc, #388]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 80094a6:	69db      	ldr	r3, [r3, #28]
 80094a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	495e      	ldr	r1, [pc, #376]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 80094b2:	4313      	orrs	r3, r2
 80094b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 0320 	and.w	r3, r3, #32
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d010      	beq.n	80094e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	69da      	ldr	r2, [r3, #28]
 80094c6:	4b59      	ldr	r3, [pc, #356]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d908      	bls.n	80094e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80094d2:	4b56      	ldr	r3, [pc, #344]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	69db      	ldr	r3, [r3, #28]
 80094de:	4953      	ldr	r1, [pc, #332]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 80094e0:	4313      	orrs	r3, r2
 80094e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0302 	and.w	r3, r3, #2
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d010      	beq.n	8009512 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	68da      	ldr	r2, [r3, #12]
 80094f4:	4b4d      	ldr	r3, [pc, #308]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	f003 030f 	and.w	r3, r3, #15
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d908      	bls.n	8009512 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009500:	4b4a      	ldr	r3, [pc, #296]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	f023 020f 	bic.w	r2, r3, #15
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	4947      	ldr	r1, [pc, #284]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 800950e:	4313      	orrs	r3, r2
 8009510:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	d055      	beq.n	80095ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800951e:	4b43      	ldr	r3, [pc, #268]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	4940      	ldr	r1, [pc, #256]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 800952c:	4313      	orrs	r3, r2
 800952e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	2b02      	cmp	r3, #2
 8009536:	d107      	bne.n	8009548 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009538:	4b3c      	ldr	r3, [pc, #240]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009540:	2b00      	cmp	r3, #0
 8009542:	d121      	bne.n	8009588 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e0f6      	b.n	8009736 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	2b03      	cmp	r3, #3
 800954e:	d107      	bne.n	8009560 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009550:	4b36      	ldr	r3, [pc, #216]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d115      	bne.n	8009588 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e0ea      	b.n	8009736 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d107      	bne.n	8009578 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009568:	4b30      	ldr	r3, [pc, #192]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009570:	2b00      	cmp	r3, #0
 8009572:	d109      	bne.n	8009588 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e0de      	b.n	8009736 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009578:	4b2c      	ldr	r3, [pc, #176]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 0304 	and.w	r3, r3, #4
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e0d6      	b.n	8009736 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009588:	4b28      	ldr	r3, [pc, #160]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	f023 0207 	bic.w	r2, r3, #7
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	4925      	ldr	r1, [pc, #148]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 8009596:	4313      	orrs	r3, r2
 8009598:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800959a:	f7f9 fc0f 	bl	8002dbc <HAL_GetTick>
 800959e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095a0:	e00a      	b.n	80095b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095a2:	f7f9 fc0b 	bl	8002dbc <HAL_GetTick>
 80095a6:	4602      	mov	r2, r0
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d901      	bls.n	80095b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e0be      	b.n	8009736 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095b8:	4b1c      	ldr	r3, [pc, #112]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	00db      	lsls	r3, r3, #3
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d1eb      	bne.n	80095a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d010      	beq.n	80095f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	4b14      	ldr	r3, [pc, #80]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	f003 030f 	and.w	r3, r3, #15
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d208      	bcs.n	80095f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095e6:	4b11      	ldr	r3, [pc, #68]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 80095e8:	699b      	ldr	r3, [r3, #24]
 80095ea:	f023 020f 	bic.w	r2, r3, #15
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	490e      	ldr	r1, [pc, #56]	; (800962c <HAL_RCC_ClockConfig+0x244>)
 80095f4:	4313      	orrs	r3, r2
 80095f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80095f8:	4b0b      	ldr	r3, [pc, #44]	; (8009628 <HAL_RCC_ClockConfig+0x240>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 030f 	and.w	r3, r3, #15
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	429a      	cmp	r2, r3
 8009604:	d214      	bcs.n	8009630 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009606:	4b08      	ldr	r3, [pc, #32]	; (8009628 <HAL_RCC_ClockConfig+0x240>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f023 020f 	bic.w	r2, r3, #15
 800960e:	4906      	ldr	r1, [pc, #24]	; (8009628 <HAL_RCC_ClockConfig+0x240>)
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	4313      	orrs	r3, r2
 8009614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009616:	4b04      	ldr	r3, [pc, #16]	; (8009628 <HAL_RCC_ClockConfig+0x240>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 030f 	and.w	r3, r3, #15
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	429a      	cmp	r2, r3
 8009622:	d005      	beq.n	8009630 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e086      	b.n	8009736 <HAL_RCC_ClockConfig+0x34e>
 8009628:	52002000 	.word	0x52002000
 800962c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0304 	and.w	r3, r3, #4
 8009638:	2b00      	cmp	r3, #0
 800963a:	d010      	beq.n	800965e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	691a      	ldr	r2, [r3, #16]
 8009640:	4b3f      	ldr	r3, [pc, #252]	; (8009740 <HAL_RCC_ClockConfig+0x358>)
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009648:	429a      	cmp	r2, r3
 800964a:	d208      	bcs.n	800965e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800964c:	4b3c      	ldr	r3, [pc, #240]	; (8009740 <HAL_RCC_ClockConfig+0x358>)
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	4939      	ldr	r1, [pc, #228]	; (8009740 <HAL_RCC_ClockConfig+0x358>)
 800965a:	4313      	orrs	r3, r2
 800965c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 0308 	and.w	r3, r3, #8
 8009666:	2b00      	cmp	r3, #0
 8009668:	d010      	beq.n	800968c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	695a      	ldr	r2, [r3, #20]
 800966e:	4b34      	ldr	r3, [pc, #208]	; (8009740 <HAL_RCC_ClockConfig+0x358>)
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009676:	429a      	cmp	r2, r3
 8009678:	d208      	bcs.n	800968c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800967a:	4b31      	ldr	r3, [pc, #196]	; (8009740 <HAL_RCC_ClockConfig+0x358>)
 800967c:	69db      	ldr	r3, [r3, #28]
 800967e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	492e      	ldr	r1, [pc, #184]	; (8009740 <HAL_RCC_ClockConfig+0x358>)
 8009688:	4313      	orrs	r3, r2
 800968a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0310 	and.w	r3, r3, #16
 8009694:	2b00      	cmp	r3, #0
 8009696:	d010      	beq.n	80096ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	699a      	ldr	r2, [r3, #24]
 800969c:	4b28      	ldr	r3, [pc, #160]	; (8009740 <HAL_RCC_ClockConfig+0x358>)
 800969e:	69db      	ldr	r3, [r3, #28]
 80096a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d208      	bcs.n	80096ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80096a8:	4b25      	ldr	r3, [pc, #148]	; (8009740 <HAL_RCC_ClockConfig+0x358>)
 80096aa:	69db      	ldr	r3, [r3, #28]
 80096ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	4922      	ldr	r1, [pc, #136]	; (8009740 <HAL_RCC_ClockConfig+0x358>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0320 	and.w	r3, r3, #32
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d010      	beq.n	80096e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	69da      	ldr	r2, [r3, #28]
 80096ca:	4b1d      	ldr	r3, [pc, #116]	; (8009740 <HAL_RCC_ClockConfig+0x358>)
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d208      	bcs.n	80096e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80096d6:	4b1a      	ldr	r3, [pc, #104]	; (8009740 <HAL_RCC_ClockConfig+0x358>)
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	4917      	ldr	r1, [pc, #92]	; (8009740 <HAL_RCC_ClockConfig+0x358>)
 80096e4:	4313      	orrs	r3, r2
 80096e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80096e8:	f000 f89e 	bl	8009828 <HAL_RCC_GetSysClockFreq>
 80096ec:	4602      	mov	r2, r0
 80096ee:	4b14      	ldr	r3, [pc, #80]	; (8009740 <HAL_RCC_ClockConfig+0x358>)
 80096f0:	699b      	ldr	r3, [r3, #24]
 80096f2:	0a1b      	lsrs	r3, r3, #8
 80096f4:	f003 030f 	and.w	r3, r3, #15
 80096f8:	4912      	ldr	r1, [pc, #72]	; (8009744 <HAL_RCC_ClockConfig+0x35c>)
 80096fa:	5ccb      	ldrb	r3, [r1, r3]
 80096fc:	f003 031f 	and.w	r3, r3, #31
 8009700:	fa22 f303 	lsr.w	r3, r2, r3
 8009704:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009706:	4b0e      	ldr	r3, [pc, #56]	; (8009740 <HAL_RCC_ClockConfig+0x358>)
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	f003 030f 	and.w	r3, r3, #15
 800970e:	4a0d      	ldr	r2, [pc, #52]	; (8009744 <HAL_RCC_ClockConfig+0x35c>)
 8009710:	5cd3      	ldrb	r3, [r2, r3]
 8009712:	f003 031f 	and.w	r3, r3, #31
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	fa22 f303 	lsr.w	r3, r2, r3
 800971c:	4a0a      	ldr	r2, [pc, #40]	; (8009748 <HAL_RCC_ClockConfig+0x360>)
 800971e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009720:	4a0a      	ldr	r2, [pc, #40]	; (800974c <HAL_RCC_ClockConfig+0x364>)
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009726:	4b0a      	ldr	r3, [pc, #40]	; (8009750 <HAL_RCC_ClockConfig+0x368>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4618      	mov	r0, r3
 800972c:	f7f9 fafc 	bl	8002d28 <HAL_InitTick>
 8009730:	4603      	mov	r3, r0
 8009732:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009734:	7bfb      	ldrb	r3, [r7, #15]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	58024400 	.word	0x58024400
 8009744:	0801c9a4 	.word	0x0801c9a4
 8009748:	24000004 	.word	0x24000004
 800974c:	24000000 	.word	0x24000000
 8009750:	24000008 	.word	0x24000008

08009754 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b08c      	sub	sp, #48	; 0x30
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d12a      	bne.n	80097bc <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009766:	4b2d      	ldr	r3, [pc, #180]	; (800981c <HAL_RCC_MCOConfig+0xc8>)
 8009768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800976c:	4a2b      	ldr	r2, [pc, #172]	; (800981c <HAL_RCC_MCOConfig+0xc8>)
 800976e:	f043 0301 	orr.w	r3, r3, #1
 8009772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009776:	4b29      	ldr	r3, [pc, #164]	; (800981c <HAL_RCC_MCOConfig+0xc8>)
 8009778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800977c:	f003 0301 	and.w	r3, r3, #1
 8009780:	61bb      	str	r3, [r7, #24]
 8009782:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8009784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800978a:	2302      	movs	r3, #2
 800978c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800978e:	2303      	movs	r3, #3
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009792:	2300      	movs	r3, #0
 8009794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009796:	2300      	movs	r3, #0
 8009798:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800979a:	f107 031c 	add.w	r3, r7, #28
 800979e:	4619      	mov	r1, r3
 80097a0:	481f      	ldr	r0, [pc, #124]	; (8009820 <HAL_RCC_MCOConfig+0xcc>)
 80097a2:	f7fd fc41 	bl	8007028 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80097a6:	4b1d      	ldr	r3, [pc, #116]	; (800981c <HAL_RCC_MCOConfig+0xc8>)
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80097ae:	68b9      	ldr	r1, [r7, #8]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	430b      	orrs	r3, r1
 80097b4:	4919      	ldr	r1, [pc, #100]	; (800981c <HAL_RCC_MCOConfig+0xc8>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80097ba:	e02a      	b.n	8009812 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80097bc:	4b17      	ldr	r3, [pc, #92]	; (800981c <HAL_RCC_MCOConfig+0xc8>)
 80097be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097c2:	4a16      	ldr	r2, [pc, #88]	; (800981c <HAL_RCC_MCOConfig+0xc8>)
 80097c4:	f043 0304 	orr.w	r3, r3, #4
 80097c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80097cc:	4b13      	ldr	r3, [pc, #76]	; (800981c <HAL_RCC_MCOConfig+0xc8>)
 80097ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097d2:	f003 0304 	and.w	r3, r3, #4
 80097d6:	617b      	str	r3, [r7, #20]
 80097d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80097da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097e0:	2302      	movs	r3, #2
 80097e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097e4:	2303      	movs	r3, #3
 80097e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097e8:	2300      	movs	r3, #0
 80097ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80097ec:	2300      	movs	r3, #0
 80097ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80097f0:	f107 031c 	add.w	r3, r7, #28
 80097f4:	4619      	mov	r1, r3
 80097f6:	480b      	ldr	r0, [pc, #44]	; (8009824 <HAL_RCC_MCOConfig+0xd0>)
 80097f8:	f7fd fc16 	bl	8007028 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80097fc:	4b07      	ldr	r3, [pc, #28]	; (800981c <HAL_RCC_MCOConfig+0xc8>)
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	01d9      	lsls	r1, r3, #7
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	430b      	orrs	r3, r1
 800980c:	4903      	ldr	r1, [pc, #12]	; (800981c <HAL_RCC_MCOConfig+0xc8>)
 800980e:	4313      	orrs	r3, r2
 8009810:	610b      	str	r3, [r1, #16]
}
 8009812:	bf00      	nop
 8009814:	3730      	adds	r7, #48	; 0x30
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	58024400 	.word	0x58024400
 8009820:	58020000 	.word	0x58020000
 8009824:	58020800 	.word	0x58020800

08009828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009828:	b480      	push	{r7}
 800982a:	b089      	sub	sp, #36	; 0x24
 800982c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800982e:	4bb3      	ldr	r3, [pc, #716]	; (8009afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009836:	2b18      	cmp	r3, #24
 8009838:	f200 8155 	bhi.w	8009ae6 <HAL_RCC_GetSysClockFreq+0x2be>
 800983c:	a201      	add	r2, pc, #4	; (adr r2, 8009844 <HAL_RCC_GetSysClockFreq+0x1c>)
 800983e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009842:	bf00      	nop
 8009844:	080098a9 	.word	0x080098a9
 8009848:	08009ae7 	.word	0x08009ae7
 800984c:	08009ae7 	.word	0x08009ae7
 8009850:	08009ae7 	.word	0x08009ae7
 8009854:	08009ae7 	.word	0x08009ae7
 8009858:	08009ae7 	.word	0x08009ae7
 800985c:	08009ae7 	.word	0x08009ae7
 8009860:	08009ae7 	.word	0x08009ae7
 8009864:	080098cf 	.word	0x080098cf
 8009868:	08009ae7 	.word	0x08009ae7
 800986c:	08009ae7 	.word	0x08009ae7
 8009870:	08009ae7 	.word	0x08009ae7
 8009874:	08009ae7 	.word	0x08009ae7
 8009878:	08009ae7 	.word	0x08009ae7
 800987c:	08009ae7 	.word	0x08009ae7
 8009880:	08009ae7 	.word	0x08009ae7
 8009884:	080098d5 	.word	0x080098d5
 8009888:	08009ae7 	.word	0x08009ae7
 800988c:	08009ae7 	.word	0x08009ae7
 8009890:	08009ae7 	.word	0x08009ae7
 8009894:	08009ae7 	.word	0x08009ae7
 8009898:	08009ae7 	.word	0x08009ae7
 800989c:	08009ae7 	.word	0x08009ae7
 80098a0:	08009ae7 	.word	0x08009ae7
 80098a4:	080098db 	.word	0x080098db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098a8:	4b94      	ldr	r3, [pc, #592]	; (8009afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0320 	and.w	r3, r3, #32
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d009      	beq.n	80098c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098b4:	4b91      	ldr	r3, [pc, #580]	; (8009afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	08db      	lsrs	r3, r3, #3
 80098ba:	f003 0303 	and.w	r3, r3, #3
 80098be:	4a90      	ldr	r2, [pc, #576]	; (8009b00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80098c0:	fa22 f303 	lsr.w	r3, r2, r3
 80098c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80098c6:	e111      	b.n	8009aec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80098c8:	4b8d      	ldr	r3, [pc, #564]	; (8009b00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80098ca:	61bb      	str	r3, [r7, #24]
      break;
 80098cc:	e10e      	b.n	8009aec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80098ce:	4b8d      	ldr	r3, [pc, #564]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80098d0:	61bb      	str	r3, [r7, #24]
      break;
 80098d2:	e10b      	b.n	8009aec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80098d4:	4b8c      	ldr	r3, [pc, #560]	; (8009b08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80098d6:	61bb      	str	r3, [r7, #24]
      break;
 80098d8:	e108      	b.n	8009aec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098da:	4b88      	ldr	r3, [pc, #544]	; (8009afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098de:	f003 0303 	and.w	r3, r3, #3
 80098e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80098e4:	4b85      	ldr	r3, [pc, #532]	; (8009afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e8:	091b      	lsrs	r3, r3, #4
 80098ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80098f0:	4b82      	ldr	r3, [pc, #520]	; (8009afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f4:	f003 0301 	and.w	r3, r3, #1
 80098f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80098fa:	4b80      	ldr	r3, [pc, #512]	; (8009afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fe:	08db      	lsrs	r3, r3, #3
 8009900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	fb02 f303 	mul.w	r3, r2, r3
 800990a:	ee07 3a90 	vmov	s15, r3
 800990e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009912:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 80e1 	beq.w	8009ae0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	2b02      	cmp	r3, #2
 8009922:	f000 8083 	beq.w	8009a2c <HAL_RCC_GetSysClockFreq+0x204>
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	2b02      	cmp	r3, #2
 800992a:	f200 80a1 	bhi.w	8009a70 <HAL_RCC_GetSysClockFreq+0x248>
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <HAL_RCC_GetSysClockFreq+0x114>
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d056      	beq.n	80099e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800993a:	e099      	b.n	8009a70 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800993c:	4b6f      	ldr	r3, [pc, #444]	; (8009afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 0320 	and.w	r3, r3, #32
 8009944:	2b00      	cmp	r3, #0
 8009946:	d02d      	beq.n	80099a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009948:	4b6c      	ldr	r3, [pc, #432]	; (8009afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	08db      	lsrs	r3, r3, #3
 800994e:	f003 0303 	and.w	r3, r3, #3
 8009952:	4a6b      	ldr	r2, [pc, #428]	; (8009b00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009954:	fa22 f303 	lsr.w	r3, r2, r3
 8009958:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	ee07 3a90 	vmov	s15, r3
 8009960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	ee07 3a90 	vmov	s15, r3
 800996a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009972:	4b62      	ldr	r3, [pc, #392]	; (8009afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997a:	ee07 3a90 	vmov	s15, r3
 800997e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009982:	ed97 6a02 	vldr	s12, [r7, #8]
 8009986:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800998a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800998e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800999a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800999e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80099a2:	e087      	b.n	8009ab4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	ee07 3a90 	vmov	s15, r3
 80099aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009b10 <HAL_RCC_GetSysClockFreq+0x2e8>
 80099b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099b6:	4b51      	ldr	r3, [pc, #324]	; (8009afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099be:	ee07 3a90 	vmov	s15, r3
 80099c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80099ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 80099ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80099e6:	e065      	b.n	8009ab4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	ee07 3a90 	vmov	s15, r3
 80099ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009b14 <HAL_RCC_GetSysClockFreq+0x2ec>
 80099f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099fa:	4b40      	ldr	r3, [pc, #256]	; (8009afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a02:	ee07 3a90 	vmov	s15, r3
 8009a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a0e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a2a:	e043      	b.n	8009ab4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	ee07 3a90 	vmov	s15, r3
 8009a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a36:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009b18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a3e:	4b2f      	ldr	r3, [pc, #188]	; (8009afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a46:	ee07 3a90 	vmov	s15, r3
 8009a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a52:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a6e:	e021      	b.n	8009ab4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	ee07 3a90 	vmov	s15, r3
 8009a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009b14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a82:	4b1e      	ldr	r3, [pc, #120]	; (8009afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a8a:	ee07 3a90 	vmov	s15, r3
 8009a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a96:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009ab2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009ab4:	4b11      	ldr	r3, [pc, #68]	; (8009afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab8:	0a5b      	lsrs	r3, r3, #9
 8009aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009abe:	3301      	adds	r3, #1
 8009ac0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	ee07 3a90 	vmov	s15, r3
 8009ac8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ad8:	ee17 3a90 	vmov	r3, s15
 8009adc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009ade:	e005      	b.n	8009aec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	61bb      	str	r3, [r7, #24]
      break;
 8009ae4:	e002      	b.n	8009aec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009ae6:	4b07      	ldr	r3, [pc, #28]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009ae8:	61bb      	str	r3, [r7, #24]
      break;
 8009aea:	bf00      	nop
  }

  return sysclockfreq;
 8009aec:	69bb      	ldr	r3, [r7, #24]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3724      	adds	r7, #36	; 0x24
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	58024400 	.word	0x58024400
 8009b00:	03d09000 	.word	0x03d09000
 8009b04:	003d0900 	.word	0x003d0900
 8009b08:	02faf080 	.word	0x02faf080
 8009b0c:	46000000 	.word	0x46000000
 8009b10:	4c742400 	.word	0x4c742400
 8009b14:	4a742400 	.word	0x4a742400
 8009b18:	4c3ebc20 	.word	0x4c3ebc20

08009b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b22:	f7ff fe81 	bl	8009828 <HAL_RCC_GetSysClockFreq>
 8009b26:	4602      	mov	r2, r0
 8009b28:	4b10      	ldr	r3, [pc, #64]	; (8009b6c <HAL_RCC_GetHCLKFreq+0x50>)
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	0a1b      	lsrs	r3, r3, #8
 8009b2e:	f003 030f 	and.w	r3, r3, #15
 8009b32:	490f      	ldr	r1, [pc, #60]	; (8009b70 <HAL_RCC_GetHCLKFreq+0x54>)
 8009b34:	5ccb      	ldrb	r3, [r1, r3]
 8009b36:	f003 031f 	and.w	r3, r3, #31
 8009b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b40:	4b0a      	ldr	r3, [pc, #40]	; (8009b6c <HAL_RCC_GetHCLKFreq+0x50>)
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	f003 030f 	and.w	r3, r3, #15
 8009b48:	4a09      	ldr	r2, [pc, #36]	; (8009b70 <HAL_RCC_GetHCLKFreq+0x54>)
 8009b4a:	5cd3      	ldrb	r3, [r2, r3]
 8009b4c:	f003 031f 	and.w	r3, r3, #31
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	fa22 f303 	lsr.w	r3, r2, r3
 8009b56:	4a07      	ldr	r2, [pc, #28]	; (8009b74 <HAL_RCC_GetHCLKFreq+0x58>)
 8009b58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009b5a:	4a07      	ldr	r2, [pc, #28]	; (8009b78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009b60:	4b04      	ldr	r3, [pc, #16]	; (8009b74 <HAL_RCC_GetHCLKFreq+0x58>)
 8009b62:	681b      	ldr	r3, [r3, #0]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	58024400 	.word	0x58024400
 8009b70:	0801c9a4 	.word	0x0801c9a4
 8009b74:	24000004 	.word	0x24000004
 8009b78:	24000000 	.word	0x24000000

08009b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009b80:	f7ff ffcc 	bl	8009b1c <HAL_RCC_GetHCLKFreq>
 8009b84:	4602      	mov	r2, r0
 8009b86:	4b06      	ldr	r3, [pc, #24]	; (8009ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	091b      	lsrs	r3, r3, #4
 8009b8c:	f003 0307 	and.w	r3, r3, #7
 8009b90:	4904      	ldr	r1, [pc, #16]	; (8009ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009b92:	5ccb      	ldrb	r3, [r1, r3]
 8009b94:	f003 031f 	and.w	r3, r3, #31
 8009b98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	58024400 	.word	0x58024400
 8009ba4:	0801c9a4 	.word	0x0801c9a4

08009ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009bac:	f7ff ffb6 	bl	8009b1c <HAL_RCC_GetHCLKFreq>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	4b06      	ldr	r3, [pc, #24]	; (8009bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	0a1b      	lsrs	r3, r3, #8
 8009bb8:	f003 0307 	and.w	r3, r3, #7
 8009bbc:	4904      	ldr	r1, [pc, #16]	; (8009bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009bbe:	5ccb      	ldrb	r3, [r1, r3]
 8009bc0:	f003 031f 	and.w	r3, r3, #31
 8009bc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	58024400 	.word	0x58024400
 8009bd0:	0801c9a4 	.word	0x0801c9a4

08009bd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bd8:	b0c6      	sub	sp, #280	; 0x118
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009be0:	2300      	movs	r3, #0
 8009be2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009be6:	2300      	movs	r3, #0
 8009be8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009bf8:	2500      	movs	r5, #0
 8009bfa:	ea54 0305 	orrs.w	r3, r4, r5
 8009bfe:	d049      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c0a:	d02f      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009c0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c10:	d828      	bhi.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009c12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c16:	d01a      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009c18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c1c:	d822      	bhi.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c26:	d007      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009c28:	e01c      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c2a:	4bab      	ldr	r3, [pc, #684]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2e:	4aaa      	ldr	r2, [pc, #680]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c36:	e01a      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c3c:	3308      	adds	r3, #8
 8009c3e:	2102      	movs	r1, #2
 8009c40:	4618      	mov	r0, r3
 8009c42:	f002 fa49 	bl	800c0d8 <RCCEx_PLL2_Config>
 8009c46:	4603      	mov	r3, r0
 8009c48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c4c:	e00f      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c52:	3328      	adds	r3, #40	; 0x28
 8009c54:	2102      	movs	r1, #2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f002 faf0 	bl	800c23c <RCCEx_PLL3_Config>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c62:	e004      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009c6a:	e000      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10a      	bne.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009c76:	4b98      	ldr	r3, [pc, #608]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c7a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c84:	4a94      	ldr	r2, [pc, #592]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c86:	430b      	orrs	r3, r1
 8009c88:	6513      	str	r3, [r2, #80]	; 0x50
 8009c8a:	e003      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009ca0:	f04f 0900 	mov.w	r9, #0
 8009ca4:	ea58 0309 	orrs.w	r3, r8, r9
 8009ca8:	d047      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cb0:	2b04      	cmp	r3, #4
 8009cb2:	d82a      	bhi.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009cb4:	a201      	add	r2, pc, #4	; (adr r2, 8009cbc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cba:	bf00      	nop
 8009cbc:	08009cd1 	.word	0x08009cd1
 8009cc0:	08009cdf 	.word	0x08009cdf
 8009cc4:	08009cf5 	.word	0x08009cf5
 8009cc8:	08009d13 	.word	0x08009d13
 8009ccc:	08009d13 	.word	0x08009d13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cd0:	4b81      	ldr	r3, [pc, #516]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd4:	4a80      	ldr	r2, [pc, #512]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cdc:	e01a      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f002 f9f6 	bl	800c0d8 <RCCEx_PLL2_Config>
 8009cec:	4603      	mov	r3, r0
 8009cee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cf2:	e00f      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cf8:	3328      	adds	r3, #40	; 0x28
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f002 fa9d 	bl	800c23c <RCCEx_PLL3_Config>
 8009d02:	4603      	mov	r3, r0
 8009d04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d08:	e004      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009d10:	e000      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10a      	bne.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d1c:	4b6e      	ldr	r3, [pc, #440]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d20:	f023 0107 	bic.w	r1, r3, #7
 8009d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d2a:	4a6b      	ldr	r2, [pc, #428]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d2c:	430b      	orrs	r3, r1
 8009d2e:	6513      	str	r3, [r2, #80]	; 0x50
 8009d30:	e003      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d36:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8009d46:	f04f 0b00 	mov.w	fp, #0
 8009d4a:	ea5a 030b 	orrs.w	r3, sl, fp
 8009d4e:	d05b      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d58:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009d5c:	d03b      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009d5e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009d62:	d834      	bhi.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009d64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d68:	d037      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009d6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d6e:	d82e      	bhi.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009d70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d74:	d033      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009d76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d7a:	d828      	bhi.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d80:	d01a      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d86:	d822      	bhi.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d003      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009d8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d90:	d007      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009d92:	e01c      	b.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d94:	4b50      	ldr	r3, [pc, #320]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d98:	4a4f      	ldr	r2, [pc, #316]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009da0:	e01e      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009da6:	3308      	adds	r3, #8
 8009da8:	2100      	movs	r1, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f002 f994 	bl	800c0d8 <RCCEx_PLL2_Config>
 8009db0:	4603      	mov	r3, r0
 8009db2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009db6:	e013      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dbc:	3328      	adds	r3, #40	; 0x28
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f002 fa3b 	bl	800c23c <RCCEx_PLL3_Config>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009dcc:	e008      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009dd4:	e004      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009dd6:	bf00      	nop
 8009dd8:	e002      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009dda:	bf00      	nop
 8009ddc:	e000      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009de0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10b      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009de8:	4b3b      	ldr	r3, [pc, #236]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dec:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009df4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009df8:	4a37      	ldr	r2, [pc, #220]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009dfa:	430b      	orrs	r3, r1
 8009dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8009dfe:	e003      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e10:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009e14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e1e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009e22:	460b      	mov	r3, r1
 8009e24:	4313      	orrs	r3, r2
 8009e26:	d05d      	beq.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e30:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009e34:	d03b      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009e36:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009e3a:	d834      	bhi.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009e3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e40:	d037      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009e42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e46:	d82e      	bhi.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009e48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e4c:	d033      	beq.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009e4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e52:	d828      	bhi.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e58:	d01a      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009e5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e5e:	d822      	bhi.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d003      	beq.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e68:	d007      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009e6a:	e01c      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e6c:	4b1a      	ldr	r3, [pc, #104]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	4a19      	ldr	r2, [pc, #100]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e78:	e01e      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e7e:	3308      	adds	r3, #8
 8009e80:	2100      	movs	r1, #0
 8009e82:	4618      	mov	r0, r3
 8009e84:	f002 f928 	bl	800c0d8 <RCCEx_PLL2_Config>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009e8e:	e013      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e94:	3328      	adds	r3, #40	; 0x28
 8009e96:	2100      	movs	r1, #0
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f002 f9cf 	bl	800c23c <RCCEx_PLL3_Config>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ea4:	e008      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009eac:	e004      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009eae:	bf00      	nop
 8009eb0:	e002      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009eb2:	bf00      	nop
 8009eb4:	e000      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d10d      	bne.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009ec0:	4b05      	ldr	r3, [pc, #20]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ec4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ecc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009ed0:	4a01      	ldr	r2, [pc, #4]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ed2:	430b      	orrs	r3, r1
 8009ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8009ed6:	e005      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009ed8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009edc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ee0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009ef0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009efa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009efe:	460b      	mov	r3, r1
 8009f00:	4313      	orrs	r3, r2
 8009f02:	d03a      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f0a:	2b30      	cmp	r3, #48	; 0x30
 8009f0c:	d01f      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009f0e:	2b30      	cmp	r3, #48	; 0x30
 8009f10:	d819      	bhi.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009f12:	2b20      	cmp	r3, #32
 8009f14:	d00c      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009f16:	2b20      	cmp	r3, #32
 8009f18:	d815      	bhi.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d019      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009f1e:	2b10      	cmp	r3, #16
 8009f20:	d111      	bne.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f22:	4baa      	ldr	r3, [pc, #680]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f26:	4aa9      	ldr	r2, [pc, #676]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009f2e:	e011      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f34:	3308      	adds	r3, #8
 8009f36:	2102      	movs	r1, #2
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f002 f8cd 	bl	800c0d8 <RCCEx_PLL2_Config>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009f44:	e006      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009f4c:	e002      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009f4e:	bf00      	nop
 8009f50:	e000      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10a      	bne.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009f5c:	4b9b      	ldr	r3, [pc, #620]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f60:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6a:	4a98      	ldr	r2, [pc, #608]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f6c:	430b      	orrs	r3, r1
 8009f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f70:	e003      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f76:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f82:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009f86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009f90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009f94:	460b      	mov	r3, r1
 8009f96:	4313      	orrs	r3, r2
 8009f98:	d051      	beq.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fa4:	d035      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009faa:	d82e      	bhi.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009fac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fb0:	d031      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009fb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fb6:	d828      	bhi.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fbc:	d01a      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fc2:	d822      	bhi.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fcc:	d007      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009fce:	e01c      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fd0:	4b7e      	ldr	r3, [pc, #504]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	4a7d      	ldr	r2, [pc, #500]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009fdc:	e01c      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f002 f876 	bl	800c0d8 <RCCEx_PLL2_Config>
 8009fec:	4603      	mov	r3, r0
 8009fee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ff2:	e011      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ff8:	3328      	adds	r3, #40	; 0x28
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f002 f91d 	bl	800c23c <RCCEx_PLL3_Config>
 800a002:	4603      	mov	r3, r0
 800a004:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a008:	e006      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a010:	e002      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a012:	bf00      	nop
 800a014:	e000      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a016:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a018:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10a      	bne.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a020:	4b6a      	ldr	r3, [pc, #424]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a024:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a02c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a02e:	4a67      	ldr	r2, [pc, #412]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a030:	430b      	orrs	r3, r1
 800a032:	6513      	str	r3, [r2, #80]	; 0x50
 800a034:	e003      	b.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a036:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a03a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a046:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a04a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a04e:	2300      	movs	r3, #0
 800a050:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a054:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a058:	460b      	mov	r3, r1
 800a05a:	4313      	orrs	r3, r2
 800a05c:	d053      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a068:	d033      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a06a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a06e:	d82c      	bhi.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a070:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a074:	d02f      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a076:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a07a:	d826      	bhi.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a07c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a080:	d02b      	beq.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a082:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a086:	d820      	bhi.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a08c:	d012      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a08e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a092:	d81a      	bhi.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a094:	2b00      	cmp	r3, #0
 800a096:	d022      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a09c:	d115      	bne.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0a2:	3308      	adds	r3, #8
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f002 f816 	bl	800c0d8 <RCCEx_PLL2_Config>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a0b2:	e015      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0b8:	3328      	adds	r3, #40	; 0x28
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f002 f8bd 	bl	800c23c <RCCEx_PLL3_Config>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a0c8:	e00a      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a0d0:	e006      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a0d2:	bf00      	nop
 800a0d4:	e004      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a0d6:	bf00      	nop
 800a0d8:	e002      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a0da:	bf00      	nop
 800a0dc:	e000      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a0de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10a      	bne.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a0e8:	4b38      	ldr	r3, [pc, #224]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0f6:	4a35      	ldr	r2, [pc, #212]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0f8:	430b      	orrs	r3, r1
 800a0fa:	6513      	str	r3, [r2, #80]	; 0x50
 800a0fc:	e003      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a102:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a116:	2300      	movs	r3, #0
 800a118:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a11c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a120:	460b      	mov	r3, r1
 800a122:	4313      	orrs	r3, r2
 800a124:	d058      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a12a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a12e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a132:	d033      	beq.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a138:	d82c      	bhi.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a13a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a13e:	d02f      	beq.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a144:	d826      	bhi.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a146:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a14a:	d02b      	beq.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a14c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a150:	d820      	bhi.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a156:	d012      	beq.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a15c:	d81a      	bhi.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d022      	beq.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a166:	d115      	bne.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a16c:	3308      	adds	r3, #8
 800a16e:	2101      	movs	r1, #1
 800a170:	4618      	mov	r0, r3
 800a172:	f001 ffb1 	bl	800c0d8 <RCCEx_PLL2_Config>
 800a176:	4603      	mov	r3, r0
 800a178:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a17c:	e015      	b.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a17e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a182:	3328      	adds	r3, #40	; 0x28
 800a184:	2101      	movs	r1, #1
 800a186:	4618      	mov	r0, r3
 800a188:	f002 f858 	bl	800c23c <RCCEx_PLL3_Config>
 800a18c:	4603      	mov	r3, r0
 800a18e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a192:	e00a      	b.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a19a:	e006      	b.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a19c:	bf00      	nop
 800a19e:	e004      	b.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a1a0:	bf00      	nop
 800a1a2:	e002      	b.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a1a4:	bf00      	nop
 800a1a6:	e000      	b.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a1a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10e      	bne.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a1b2:	4b06      	ldr	r3, [pc, #24]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1c2:	4a02      	ldr	r2, [pc, #8]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1c4:	430b      	orrs	r3, r1
 800a1c6:	6593      	str	r3, [r2, #88]	; 0x58
 800a1c8:	e006      	b.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a1ca:	bf00      	nop
 800a1cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a1d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a1e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a1ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	d037      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a202:	d00e      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a208:	d816      	bhi.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d018      	beq.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a20e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a212:	d111      	bne.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a214:	4bc4      	ldr	r3, [pc, #784]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a218:	4ac3      	ldr	r2, [pc, #780]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a21a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a21e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a220:	e00f      	b.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a226:	3308      	adds	r3, #8
 800a228:	2101      	movs	r1, #1
 800a22a:	4618      	mov	r0, r3
 800a22c:	f001 ff54 	bl	800c0d8 <RCCEx_PLL2_Config>
 800a230:	4603      	mov	r3, r0
 800a232:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a236:	e004      	b.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a23e:	e000      	b.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a240:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a242:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10a      	bne.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a24a:	4bb7      	ldr	r3, [pc, #732]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a24c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a24e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a258:	4ab3      	ldr	r2, [pc, #716]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a25a:	430b      	orrs	r3, r1
 800a25c:	6513      	str	r3, [r2, #80]	; 0x50
 800a25e:	e003      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a260:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a264:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a270:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a274:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a278:	2300      	movs	r3, #0
 800a27a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a27e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a282:	460b      	mov	r3, r1
 800a284:	4313      	orrs	r3, r2
 800a286:	d039      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a28c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a28e:	2b03      	cmp	r3, #3
 800a290:	d81c      	bhi.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a292:	a201      	add	r2, pc, #4	; (adr r2, 800a298 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a298:	0800a2d5 	.word	0x0800a2d5
 800a29c:	0800a2a9 	.word	0x0800a2a9
 800a2a0:	0800a2b7 	.word	0x0800a2b7
 800a2a4:	0800a2d5 	.word	0x0800a2d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2a8:	4b9f      	ldr	r3, [pc, #636]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ac:	4a9e      	ldr	r2, [pc, #632]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a2b4:	e00f      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ba:	3308      	adds	r3, #8
 800a2bc:	2102      	movs	r1, #2
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f001 ff0a 	bl	800c0d8 <RCCEx_PLL2_Config>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a2ca:	e004      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a2d2:	e000      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a2d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10a      	bne.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a2de:	4b92      	ldr	r3, [pc, #584]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2e2:	f023 0103 	bic.w	r1, r3, #3
 800a2e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ec:	4a8e      	ldr	r2, [pc, #568]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2ee:	430b      	orrs	r3, r1
 800a2f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a2f2:	e003      	b.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a304:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a308:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a30c:	2300      	movs	r3, #0
 800a30e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a312:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a316:	460b      	mov	r3, r1
 800a318:	4313      	orrs	r3, r2
 800a31a:	f000 8099 	beq.w	800a450 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a31e:	4b83      	ldr	r3, [pc, #524]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a82      	ldr	r2, [pc, #520]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a328:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a32a:	f7f8 fd47 	bl	8002dbc <HAL_GetTick>
 800a32e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a332:	e00b      	b.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a334:	f7f8 fd42 	bl	8002dbc <HAL_GetTick>
 800a338:	4602      	mov	r2, r0
 800a33a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a33e:	1ad3      	subs	r3, r2, r3
 800a340:	2b64      	cmp	r3, #100	; 0x64
 800a342:	d903      	bls.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a344:	2303      	movs	r3, #3
 800a346:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a34a:	e005      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a34c:	4b77      	ldr	r3, [pc, #476]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a354:	2b00      	cmp	r3, #0
 800a356:	d0ed      	beq.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a358:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d173      	bne.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a360:	4b71      	ldr	r3, [pc, #452]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a362:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a368:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a36c:	4053      	eors	r3, r2
 800a36e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a372:	2b00      	cmp	r3, #0
 800a374:	d015      	beq.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a376:	4b6c      	ldr	r3, [pc, #432]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a37a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a37e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a382:	4b69      	ldr	r3, [pc, #420]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a386:	4a68      	ldr	r2, [pc, #416]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a38c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a38e:	4b66      	ldr	r3, [pc, #408]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a392:	4a65      	ldr	r2, [pc, #404]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a398:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a39a:	4a63      	ldr	r2, [pc, #396]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a39c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a3a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a3aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3ae:	d118      	bne.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3b0:	f7f8 fd04 	bl	8002dbc <HAL_GetTick>
 800a3b4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3b8:	e00d      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3ba:	f7f8 fcff 	bl	8002dbc <HAL_GetTick>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a3c4:	1ad2      	subs	r2, r2, r3
 800a3c6:	f241 3388 	movw	r3, #5000	; 0x1388
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d903      	bls.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800a3d4:	e005      	b.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3d6:	4b54      	ldr	r3, [pc, #336]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3da:	f003 0302 	and.w	r3, r3, #2
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d0eb      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a3e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d129      	bne.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a3f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3fa:	d10e      	bne.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a3fc:	4b4a      	ldr	r3, [pc, #296]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3fe:	691b      	ldr	r3, [r3, #16]
 800a400:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a408:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a40c:	091a      	lsrs	r2, r3, #4
 800a40e:	4b48      	ldr	r3, [pc, #288]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a410:	4013      	ands	r3, r2
 800a412:	4a45      	ldr	r2, [pc, #276]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a414:	430b      	orrs	r3, r1
 800a416:	6113      	str	r3, [r2, #16]
 800a418:	e005      	b.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a41a:	4b43      	ldr	r3, [pc, #268]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	4a42      	ldr	r2, [pc, #264]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a420:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a424:	6113      	str	r3, [r2, #16]
 800a426:	4b40      	ldr	r3, [pc, #256]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a428:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a42e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a436:	4a3c      	ldr	r2, [pc, #240]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a438:	430b      	orrs	r3, r1
 800a43a:	6713      	str	r3, [r2, #112]	; 0x70
 800a43c:	e008      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a43e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a442:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800a446:	e003      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a448:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a44c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	f002 0301 	and.w	r3, r2, #1
 800a45c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a460:	2300      	movs	r3, #0
 800a462:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a466:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a46a:	460b      	mov	r3, r1
 800a46c:	4313      	orrs	r3, r2
 800a46e:	f000 808f 	beq.w	800a590 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a476:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a478:	2b28      	cmp	r3, #40	; 0x28
 800a47a:	d871      	bhi.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a47c:	a201      	add	r2, pc, #4	; (adr r2, 800a484 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a482:	bf00      	nop
 800a484:	0800a569 	.word	0x0800a569
 800a488:	0800a561 	.word	0x0800a561
 800a48c:	0800a561 	.word	0x0800a561
 800a490:	0800a561 	.word	0x0800a561
 800a494:	0800a561 	.word	0x0800a561
 800a498:	0800a561 	.word	0x0800a561
 800a49c:	0800a561 	.word	0x0800a561
 800a4a0:	0800a561 	.word	0x0800a561
 800a4a4:	0800a535 	.word	0x0800a535
 800a4a8:	0800a561 	.word	0x0800a561
 800a4ac:	0800a561 	.word	0x0800a561
 800a4b0:	0800a561 	.word	0x0800a561
 800a4b4:	0800a561 	.word	0x0800a561
 800a4b8:	0800a561 	.word	0x0800a561
 800a4bc:	0800a561 	.word	0x0800a561
 800a4c0:	0800a561 	.word	0x0800a561
 800a4c4:	0800a54b 	.word	0x0800a54b
 800a4c8:	0800a561 	.word	0x0800a561
 800a4cc:	0800a561 	.word	0x0800a561
 800a4d0:	0800a561 	.word	0x0800a561
 800a4d4:	0800a561 	.word	0x0800a561
 800a4d8:	0800a561 	.word	0x0800a561
 800a4dc:	0800a561 	.word	0x0800a561
 800a4e0:	0800a561 	.word	0x0800a561
 800a4e4:	0800a569 	.word	0x0800a569
 800a4e8:	0800a561 	.word	0x0800a561
 800a4ec:	0800a561 	.word	0x0800a561
 800a4f0:	0800a561 	.word	0x0800a561
 800a4f4:	0800a561 	.word	0x0800a561
 800a4f8:	0800a561 	.word	0x0800a561
 800a4fc:	0800a561 	.word	0x0800a561
 800a500:	0800a561 	.word	0x0800a561
 800a504:	0800a569 	.word	0x0800a569
 800a508:	0800a561 	.word	0x0800a561
 800a50c:	0800a561 	.word	0x0800a561
 800a510:	0800a561 	.word	0x0800a561
 800a514:	0800a561 	.word	0x0800a561
 800a518:	0800a561 	.word	0x0800a561
 800a51c:	0800a561 	.word	0x0800a561
 800a520:	0800a561 	.word	0x0800a561
 800a524:	0800a569 	.word	0x0800a569
 800a528:	58024400 	.word	0x58024400
 800a52c:	58024800 	.word	0x58024800
 800a530:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a538:	3308      	adds	r3, #8
 800a53a:	2101      	movs	r1, #1
 800a53c:	4618      	mov	r0, r3
 800a53e:	f001 fdcb 	bl	800c0d8 <RCCEx_PLL2_Config>
 800a542:	4603      	mov	r3, r0
 800a544:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a548:	e00f      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a54e:	3328      	adds	r3, #40	; 0x28
 800a550:	2101      	movs	r1, #1
 800a552:	4618      	mov	r0, r3
 800a554:	f001 fe72 	bl	800c23c <RCCEx_PLL3_Config>
 800a558:	4603      	mov	r3, r0
 800a55a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a55e:	e004      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a566:	e000      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a56a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10a      	bne.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a572:	4bbf      	ldr	r3, [pc, #764]	; (800a870 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a576:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a57e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a580:	4abb      	ldr	r2, [pc, #748]	; (800a870 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a582:	430b      	orrs	r3, r1
 800a584:	6553      	str	r3, [r2, #84]	; 0x54
 800a586:	e003      	b.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a588:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a58c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	f002 0302 	and.w	r3, r2, #2
 800a59c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	d041      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5b6:	2b05      	cmp	r3, #5
 800a5b8:	d824      	bhi.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a5ba:	a201      	add	r2, pc, #4	; (adr r2, 800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c0:	0800a60d 	.word	0x0800a60d
 800a5c4:	0800a5d9 	.word	0x0800a5d9
 800a5c8:	0800a5ef 	.word	0x0800a5ef
 800a5cc:	0800a60d 	.word	0x0800a60d
 800a5d0:	0800a60d 	.word	0x0800a60d
 800a5d4:	0800a60d 	.word	0x0800a60d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5dc:	3308      	adds	r3, #8
 800a5de:	2101      	movs	r1, #1
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f001 fd79 	bl	800c0d8 <RCCEx_PLL2_Config>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a5ec:	e00f      	b.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f2:	3328      	adds	r3, #40	; 0x28
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f001 fe20 	bl	800c23c <RCCEx_PLL3_Config>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a602:	e004      	b.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a60a:	e000      	b.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a60c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a60e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a612:	2b00      	cmp	r3, #0
 800a614:	d10a      	bne.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a616:	4b96      	ldr	r3, [pc, #600]	; (800a870 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a61a:	f023 0107 	bic.w	r1, r3, #7
 800a61e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a624:	4a92      	ldr	r2, [pc, #584]	; (800a870 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a626:	430b      	orrs	r3, r1
 800a628:	6553      	str	r3, [r2, #84]	; 0x54
 800a62a:	e003      	b.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a62c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a630:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63c:	f002 0304 	and.w	r3, r2, #4
 800a640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a644:	2300      	movs	r3, #0
 800a646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a64a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a64e:	460b      	mov	r3, r1
 800a650:	4313      	orrs	r3, r2
 800a652:	d044      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a65c:	2b05      	cmp	r3, #5
 800a65e:	d825      	bhi.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a660:	a201      	add	r2, pc, #4	; (adr r2, 800a668 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a666:	bf00      	nop
 800a668:	0800a6b5 	.word	0x0800a6b5
 800a66c:	0800a681 	.word	0x0800a681
 800a670:	0800a697 	.word	0x0800a697
 800a674:	0800a6b5 	.word	0x0800a6b5
 800a678:	0800a6b5 	.word	0x0800a6b5
 800a67c:	0800a6b5 	.word	0x0800a6b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a684:	3308      	adds	r3, #8
 800a686:	2101      	movs	r1, #1
 800a688:	4618      	mov	r0, r3
 800a68a:	f001 fd25 	bl	800c0d8 <RCCEx_PLL2_Config>
 800a68e:	4603      	mov	r3, r0
 800a690:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a694:	e00f      	b.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a69a:	3328      	adds	r3, #40	; 0x28
 800a69c:	2101      	movs	r1, #1
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f001 fdcc 	bl	800c23c <RCCEx_PLL3_Config>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a6aa:	e004      	b.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a6b2:	e000      	b.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a6b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d10b      	bne.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a6be:	4b6c      	ldr	r3, [pc, #432]	; (800a870 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a6c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c2:	f023 0107 	bic.w	r1, r3, #7
 800a6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6ce:	4a68      	ldr	r2, [pc, #416]	; (800a870 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a6d0:	430b      	orrs	r3, r1
 800a6d2:	6593      	str	r3, [r2, #88]	; 0x58
 800a6d4:	e003      	b.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e6:	f002 0320 	and.w	r3, r2, #32
 800a6ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a6f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	d055      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a706:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a70a:	d033      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a70c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a710:	d82c      	bhi.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a716:	d02f      	beq.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a71c:	d826      	bhi.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a71e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a722:	d02b      	beq.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a724:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a728:	d820      	bhi.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a72a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a72e:	d012      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a734:	d81a      	bhi.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a736:	2b00      	cmp	r3, #0
 800a738:	d022      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a73a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a73e:	d115      	bne.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a744:	3308      	adds	r3, #8
 800a746:	2100      	movs	r1, #0
 800a748:	4618      	mov	r0, r3
 800a74a:	f001 fcc5 	bl	800c0d8 <RCCEx_PLL2_Config>
 800a74e:	4603      	mov	r3, r0
 800a750:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a754:	e015      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a75a:	3328      	adds	r3, #40	; 0x28
 800a75c:	2102      	movs	r1, #2
 800a75e:	4618      	mov	r0, r3
 800a760:	f001 fd6c 	bl	800c23c <RCCEx_PLL3_Config>
 800a764:	4603      	mov	r3, r0
 800a766:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a76a:	e00a      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a772:	e006      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a774:	bf00      	nop
 800a776:	e004      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a778:	bf00      	nop
 800a77a:	e002      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a77c:	bf00      	nop
 800a77e:	e000      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a780:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a782:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10b      	bne.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a78a:	4b39      	ldr	r3, [pc, #228]	; (800a870 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a78e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a79a:	4a35      	ldr	r2, [pc, #212]	; (800a870 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a79c:	430b      	orrs	r3, r1
 800a79e:	6553      	str	r3, [r2, #84]	; 0x54
 800a7a0:	e003      	b.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a7b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a7c0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	d058      	beq.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a7d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a7d6:	d033      	beq.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a7d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a7dc:	d82c      	bhi.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a7de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7e2:	d02f      	beq.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a7e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7e8:	d826      	bhi.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a7ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a7ee:	d02b      	beq.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a7f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a7f4:	d820      	bhi.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a7f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7fa:	d012      	beq.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a7fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a800:	d81a      	bhi.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a802:	2b00      	cmp	r3, #0
 800a804:	d022      	beq.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a80a:	d115      	bne.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a810:	3308      	adds	r3, #8
 800a812:	2100      	movs	r1, #0
 800a814:	4618      	mov	r0, r3
 800a816:	f001 fc5f 	bl	800c0d8 <RCCEx_PLL2_Config>
 800a81a:	4603      	mov	r3, r0
 800a81c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a820:	e015      	b.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a826:	3328      	adds	r3, #40	; 0x28
 800a828:	2102      	movs	r1, #2
 800a82a:	4618      	mov	r0, r3
 800a82c:	f001 fd06 	bl	800c23c <RCCEx_PLL3_Config>
 800a830:	4603      	mov	r3, r0
 800a832:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a836:	e00a      	b.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a83e:	e006      	b.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a840:	bf00      	nop
 800a842:	e004      	b.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a844:	bf00      	nop
 800a846:	e002      	b.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a848:	bf00      	nop
 800a84a:	e000      	b.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a84c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a84e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10e      	bne.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a856:	4b06      	ldr	r3, [pc, #24]	; (800a870 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a85a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a862:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a866:	4a02      	ldr	r2, [pc, #8]	; (800a870 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a868:	430b      	orrs	r3, r1
 800a86a:	6593      	str	r3, [r2, #88]	; 0x58
 800a86c:	e006      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a86e:	bf00      	nop
 800a870:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a874:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a878:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a87c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a884:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a88c:	2300      	movs	r3, #0
 800a88e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a892:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a896:	460b      	mov	r3, r1
 800a898:	4313      	orrs	r3, r2
 800a89a:	d055      	beq.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a89c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a8a8:	d033      	beq.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a8aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a8ae:	d82c      	bhi.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a8b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8b4:	d02f      	beq.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a8b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8ba:	d826      	bhi.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a8bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a8c0:	d02b      	beq.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a8c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a8c6:	d820      	bhi.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a8c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8cc:	d012      	beq.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a8ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8d2:	d81a      	bhi.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d022      	beq.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a8d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8dc:	d115      	bne.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e2:	3308      	adds	r3, #8
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f001 fbf6 	bl	800c0d8 <RCCEx_PLL2_Config>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a8f2:	e015      	b.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f8:	3328      	adds	r3, #40	; 0x28
 800a8fa:	2102      	movs	r1, #2
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f001 fc9d 	bl	800c23c <RCCEx_PLL3_Config>
 800a902:	4603      	mov	r3, r0
 800a904:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a908:	e00a      	b.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a910:	e006      	b.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a912:	bf00      	nop
 800a914:	e004      	b.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a916:	bf00      	nop
 800a918:	e002      	b.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a91a:	bf00      	nop
 800a91c:	e000      	b.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a91e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a920:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10b      	bne.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a928:	4ba0      	ldr	r3, [pc, #640]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a92a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a92c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a934:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a938:	4a9c      	ldr	r2, [pc, #624]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a93a:	430b      	orrs	r3, r1
 800a93c:	6593      	str	r3, [r2, #88]	; 0x58
 800a93e:	e003      	b.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a940:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a944:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a950:	f002 0308 	and.w	r3, r2, #8
 800a954:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a958:	2300      	movs	r3, #0
 800a95a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a95e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a962:	460b      	mov	r3, r1
 800a964:	4313      	orrs	r3, r2
 800a966:	d01e      	beq.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a96c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a974:	d10c      	bne.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a97a:	3328      	adds	r3, #40	; 0x28
 800a97c:	2102      	movs	r1, #2
 800a97e:	4618      	mov	r0, r3
 800a980:	f001 fc5c 	bl	800c23c <RCCEx_PLL3_Config>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d002      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a990:	4b86      	ldr	r3, [pc, #536]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a994:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a99c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9a0:	4a82      	ldr	r2, [pc, #520]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9a2:	430b      	orrs	r3, r1
 800a9a4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ae:	f002 0310 	and.w	r3, r2, #16
 800a9b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a9bc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	d01e      	beq.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a9c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9d2:	d10c      	bne.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a9d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d8:	3328      	adds	r3, #40	; 0x28
 800a9da:	2102      	movs	r1, #2
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f001 fc2d 	bl	800c23c <RCCEx_PLL3_Config>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a9ee:	4b6f      	ldr	r3, [pc, #444]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9fe:	4a6b      	ldr	r2, [pc, #428]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa00:	430b      	orrs	r3, r1
 800aa02:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800aa10:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa12:	2300      	movs	r3, #0
 800aa14:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa16:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	d03e      	beq.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800aa20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa2c:	d022      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800aa2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa32:	d81b      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d003      	beq.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800aa38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa3c:	d00b      	beq.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800aa3e:	e015      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa44:	3308      	adds	r3, #8
 800aa46:	2100      	movs	r1, #0
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f001 fb45 	bl	800c0d8 <RCCEx_PLL2_Config>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aa54:	e00f      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa5a:	3328      	adds	r3, #40	; 0x28
 800aa5c:	2102      	movs	r1, #2
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f001 fbec 	bl	800c23c <RCCEx_PLL3_Config>
 800aa64:	4603      	mov	r3, r0
 800aa66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aa6a:	e004      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa72:	e000      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800aa74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d10b      	bne.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aa7e:	4b4b      	ldr	r3, [pc, #300]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa82:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800aa86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa8e:	4a47      	ldr	r2, [pc, #284]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa90:	430b      	orrs	r3, r1
 800aa92:	6593      	str	r3, [r2, #88]	; 0x58
 800aa94:	e003      	b.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa9a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aa9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800aaaa:	673b      	str	r3, [r7, #112]	; 0x70
 800aaac:	2300      	movs	r3, #0
 800aaae:	677b      	str	r3, [r7, #116]	; 0x74
 800aab0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800aab4:	460b      	mov	r3, r1
 800aab6:	4313      	orrs	r3, r2
 800aab8:	d03b      	beq.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800aaba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aabe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aac2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aac6:	d01f      	beq.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800aac8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aacc:	d818      	bhi.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800aace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aad2:	d003      	beq.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800aad4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aad8:	d007      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800aada:	e011      	b.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aadc:	4b33      	ldr	r3, [pc, #204]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae0:	4a32      	ldr	r2, [pc, #200]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800aae8:	e00f      	b.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aaea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaee:	3328      	adds	r3, #40	; 0x28
 800aaf0:	2101      	movs	r1, #1
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f001 fba2 	bl	800c23c <RCCEx_PLL3_Config>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800aafe:	e004      	b.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab06:	e000      	b.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ab08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10b      	bne.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab12:	4b26      	ldr	r3, [pc, #152]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab16:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ab1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab22:	4a22      	ldr	r2, [pc, #136]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab24:	430b      	orrs	r3, r1
 800ab26:	6553      	str	r3, [r2, #84]	; 0x54
 800ab28:	e003      	b.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab2e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ab32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ab3e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab40:	2300      	movs	r3, #0
 800ab42:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab44:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ab48:	460b      	mov	r3, r1
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	d034      	beq.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ab4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d003      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ab58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab5c:	d007      	beq.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ab5e:	e011      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab60:	4b12      	ldr	r3, [pc, #72]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab64:	4a11      	ldr	r2, [pc, #68]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ab6c:	e00e      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab72:	3308      	adds	r3, #8
 800ab74:	2102      	movs	r1, #2
 800ab76:	4618      	mov	r0, r3
 800ab78:	f001 faae 	bl	800c0d8 <RCCEx_PLL2_Config>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ab82:	e003      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10d      	bne.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ab94:	4b05      	ldr	r3, [pc, #20]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aba2:	4a02      	ldr	r2, [pc, #8]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aba4:	430b      	orrs	r3, r1
 800aba6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aba8:	e006      	b.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800abaa:	bf00      	nop
 800abac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abb4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800abb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800abc4:	663b      	str	r3, [r7, #96]	; 0x60
 800abc6:	2300      	movs	r3, #0
 800abc8:	667b      	str	r3, [r7, #100]	; 0x64
 800abca:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800abce:	460b      	mov	r3, r1
 800abd0:	4313      	orrs	r3, r2
 800abd2:	d00c      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800abd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd8:	3328      	adds	r3, #40	; 0x28
 800abda:	2102      	movs	r1, #2
 800abdc:	4618      	mov	r0, r3
 800abde:	f001 fb2d 	bl	800c23c <RCCEx_PLL3_Config>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800abee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800abfa:	65bb      	str	r3, [r7, #88]	; 0x58
 800abfc:	2300      	movs	r3, #0
 800abfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac00:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ac04:	460b      	mov	r3, r1
 800ac06:	4313      	orrs	r3, r2
 800ac08:	d036      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ac0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac14:	d018      	beq.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ac16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac1a:	d811      	bhi.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ac1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac20:	d014      	beq.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ac22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac26:	d80b      	bhi.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d011      	beq.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800ac2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac30:	d106      	bne.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac32:	4bb7      	ldr	r3, [pc, #732]	; (800af10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac36:	4ab6      	ldr	r2, [pc, #728]	; (800af10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ac3e:	e008      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac46:	e004      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ac48:	bf00      	nop
 800ac4a:	e002      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ac4c:	bf00      	nop
 800ac4e:	e000      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ac50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10a      	bne.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ac5a:	4bad      	ldr	r3, [pc, #692]	; (800af10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ac62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac68:	4aa9      	ldr	r2, [pc, #676]	; (800af10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac6a:	430b      	orrs	r3, r1
 800ac6c:	6553      	str	r3, [r2, #84]	; 0x54
 800ac6e:	e003      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ac78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac80:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ac84:	653b      	str	r3, [r7, #80]	; 0x50
 800ac86:	2300      	movs	r3, #0
 800ac88:	657b      	str	r3, [r7, #84]	; 0x54
 800ac8a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ac8e:	460b      	mov	r3, r1
 800ac90:	4313      	orrs	r3, r2
 800ac92:	d009      	beq.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ac94:	4b9e      	ldr	r3, [pc, #632]	; (800af10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ac9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca2:	4a9b      	ldr	r2, [pc, #620]	; (800af10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aca4:	430b      	orrs	r3, r1
 800aca6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800acb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800acb6:	2300      	movs	r3, #0
 800acb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800acbe:	460b      	mov	r3, r1
 800acc0:	4313      	orrs	r3, r2
 800acc2:	d009      	beq.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800acc4:	4b92      	ldr	r3, [pc, #584]	; (800af10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acc8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800accc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acd2:	4a8f      	ldr	r2, [pc, #572]	; (800af10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acd4:	430b      	orrs	r3, r1
 800acd6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800acd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ace4:	643b      	str	r3, [r7, #64]	; 0x40
 800ace6:	2300      	movs	r3, #0
 800ace8:	647b      	str	r3, [r7, #68]	; 0x44
 800acea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800acee:	460b      	mov	r3, r1
 800acf0:	4313      	orrs	r3, r2
 800acf2:	d00e      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800acf4:	4b86      	ldr	r3, [pc, #536]	; (800af10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	4a85      	ldr	r2, [pc, #532]	; (800af10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800acfe:	6113      	str	r3, [r2, #16]
 800ad00:	4b83      	ldr	r3, [pc, #524]	; (800af10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad02:	6919      	ldr	r1, [r3, #16]
 800ad04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ad0c:	4a80      	ldr	r2, [pc, #512]	; (800af10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad0e:	430b      	orrs	r3, r1
 800ad10:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ad12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ad1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad20:	2300      	movs	r3, #0
 800ad22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad24:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ad28:	460b      	mov	r3, r1
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	d009      	beq.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ad2e:	4b78      	ldr	r3, [pc, #480]	; (800af10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad32:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ad36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad3c:	4a74      	ldr	r2, [pc, #464]	; (800af10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad3e:	430b      	orrs	r3, r1
 800ad40:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ad42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ad4e:	633b      	str	r3, [r7, #48]	; 0x30
 800ad50:	2300      	movs	r3, #0
 800ad52:	637b      	str	r3, [r7, #52]	; 0x34
 800ad54:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ad58:	460b      	mov	r3, r1
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	d00a      	beq.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ad5e:	4b6c      	ldr	r3, [pc, #432]	; (800af10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad62:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ad66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad6e:	4a68      	ldr	r2, [pc, #416]	; (800af10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad70:	430b      	orrs	r3, r1
 800ad72:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ad74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	62b9      	str	r1, [r7, #40]	; 0x28
 800ad80:	f003 0301 	and.w	r3, r3, #1
 800ad84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad86:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	d011      	beq.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad94:	3308      	adds	r3, #8
 800ad96:	2100      	movs	r1, #0
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f001 f99d 	bl	800c0d8 <RCCEx_PLL2_Config>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ada4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d003      	beq.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800adb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbc:	2100      	movs	r1, #0
 800adbe:	6239      	str	r1, [r7, #32]
 800adc0:	f003 0302 	and.w	r3, r3, #2
 800adc4:	627b      	str	r3, [r7, #36]	; 0x24
 800adc6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800adca:	460b      	mov	r3, r1
 800adcc:	4313      	orrs	r3, r2
 800adce:	d011      	beq.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800add0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add4:	3308      	adds	r3, #8
 800add6:	2101      	movs	r1, #1
 800add8:	4618      	mov	r0, r3
 800adda:	f001 f97d 	bl	800c0d8 <RCCEx_PLL2_Config>
 800adde:	4603      	mov	r3, r0
 800ade0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ade4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d003      	beq.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adf0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800adf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfc:	2100      	movs	r1, #0
 800adfe:	61b9      	str	r1, [r7, #24]
 800ae00:	f003 0304 	and.w	r3, r3, #4
 800ae04:	61fb      	str	r3, [r7, #28]
 800ae06:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	d011      	beq.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae14:	3308      	adds	r3, #8
 800ae16:	2102      	movs	r1, #2
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f001 f95d 	bl	800c0d8 <RCCEx_PLL2_Config>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ae24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d003      	beq.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ae34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	6139      	str	r1, [r7, #16]
 800ae40:	f003 0308 	and.w	r3, r3, #8
 800ae44:	617b      	str	r3, [r7, #20]
 800ae46:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	d011      	beq.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae54:	3328      	adds	r3, #40	; 0x28
 800ae56:	2100      	movs	r1, #0
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f001 f9ef 	bl	800c23c <RCCEx_PLL3_Config>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800ae64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d003      	beq.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ae74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	60b9      	str	r1, [r7, #8]
 800ae80:	f003 0310 	and.w	r3, r3, #16
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	d011      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae94:	3328      	adds	r3, #40	; 0x28
 800ae96:	2101      	movs	r1, #1
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f001 f9cf 	bl	800c23c <RCCEx_PLL3_Config>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800aea4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d003      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aeb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	2100      	movs	r1, #0
 800aebe:	6039      	str	r1, [r7, #0]
 800aec0:	f003 0320 	and.w	r3, r3, #32
 800aec4:	607b      	str	r3, [r7, #4]
 800aec6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aeca:	460b      	mov	r3, r1
 800aecc:	4313      	orrs	r3, r2
 800aece:	d011      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed4:	3328      	adds	r3, #40	; 0x28
 800aed6:	2102      	movs	r1, #2
 800aed8:	4618      	mov	r0, r3
 800aeda:	f001 f9af 	bl	800c23c <RCCEx_PLL3_Config>
 800aede:	4603      	mov	r3, r0
 800aee0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800aee4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aef0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800aef4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d101      	bne.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800aefc:	2300      	movs	r3, #0
 800aefe:	e000      	b.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800af00:	2301      	movs	r3, #1
}
 800af02:	4618      	mov	r0, r3
 800af04:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800af08:	46bd      	mov	sp, r7
 800af0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af0e:	bf00      	nop
 800af10:	58024400 	.word	0x58024400

0800af14 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b090      	sub	sp, #64	; 0x40
 800af18:	af00      	add	r7, sp, #0
 800af1a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800af1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af22:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800af26:	430b      	orrs	r3, r1
 800af28:	f040 8094 	bne.w	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800af2c:	4b9b      	ldr	r3, [pc, #620]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800af2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af30:	f003 0307 	and.w	r3, r3, #7
 800af34:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	2b04      	cmp	r3, #4
 800af3a:	f200 8087 	bhi.w	800b04c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800af3e:	a201      	add	r2, pc, #4	; (adr r2, 800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800af40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af44:	0800af59 	.word	0x0800af59
 800af48:	0800af81 	.word	0x0800af81
 800af4c:	0800afa9 	.word	0x0800afa9
 800af50:	0800b045 	.word	0x0800b045
 800af54:	0800afd1 	.word	0x0800afd1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af58:	4b90      	ldr	r3, [pc, #576]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af64:	d108      	bne.n	800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 ff62 	bl	800be34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af74:	f000 bc93 	b.w	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af78:	2300      	movs	r3, #0
 800af7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af7c:	f000 bc8f 	b.w	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af80:	4b86      	ldr	r3, [pc, #536]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af8c:	d108      	bne.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af8e:	f107 0318 	add.w	r3, r7, #24
 800af92:	4618      	mov	r0, r3
 800af94:	f000 fca6 	bl	800b8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af9c:	f000 bc7f 	b.w	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afa4:	f000 bc7b 	b.w	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800afa8:	4b7c      	ldr	r3, [pc, #496]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afb4:	d108      	bne.n	800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afb6:	f107 030c 	add.w	r3, r7, #12
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 fde6 	bl	800bb8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afc4:	f000 bc6b 	b.w	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afc8:	2300      	movs	r3, #0
 800afca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afcc:	f000 bc67 	b.w	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afd0:	4b72      	ldr	r3, [pc, #456]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800afd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800afd8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afda:	4b70      	ldr	r3, [pc, #448]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f003 0304 	and.w	r3, r3, #4
 800afe2:	2b04      	cmp	r3, #4
 800afe4:	d10c      	bne.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800afe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d109      	bne.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afec:	4b6b      	ldr	r3, [pc, #428]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	08db      	lsrs	r3, r3, #3
 800aff2:	f003 0303 	and.w	r3, r3, #3
 800aff6:	4a6a      	ldr	r2, [pc, #424]	; (800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800aff8:	fa22 f303 	lsr.w	r3, r2, r3
 800affc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800affe:	e01f      	b.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b000:	4b66      	ldr	r3, [pc, #408]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b00c:	d106      	bne.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b010:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b014:	d102      	bne.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b016:	4b63      	ldr	r3, [pc, #396]	; (800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b01a:	e011      	b.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b01c:	4b5f      	ldr	r3, [pc, #380]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b028:	d106      	bne.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b02c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b030:	d102      	bne.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b032:	4b5d      	ldr	r3, [pc, #372]	; (800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b034:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b036:	e003      	b.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b03c:	f000 bc2f 	b.w	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b040:	f000 bc2d 	b.w	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b044:	4b59      	ldr	r3, [pc, #356]	; (800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b048:	f000 bc29 	b.w	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b04c:	2300      	movs	r3, #0
 800b04e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b050:	f000 bc25 	b.w	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b054:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b058:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b05c:	430b      	orrs	r3, r1
 800b05e:	f040 80a7 	bne.w	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b062:	4b4e      	ldr	r3, [pc, #312]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b066:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b06a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b072:	d054      	beq.n	800b11e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b076:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b07a:	f200 808b 	bhi.w	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b080:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b084:	f000 8083 	beq.w	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b08e:	f200 8081 	bhi.w	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b098:	d02f      	beq.n	800b0fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0a0:	d878      	bhi.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d004      	beq.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0ae:	d012      	beq.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b0b0:	e070      	b.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0b2:	4b3a      	ldr	r3, [pc, #232]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0be:	d107      	bne.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f000 feb5 	bl	800be34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ce:	e3e6      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0d4:	e3e3      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0d6:	4b31      	ldr	r3, [pc, #196]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0e2:	d107      	bne.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0e4:	f107 0318 	add.w	r3, r7, #24
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f000 fbfb 	bl	800b8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0f2:	e3d4      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0f8:	e3d1      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0fa:	4b28      	ldr	r3, [pc, #160]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b106:	d107      	bne.n	800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b108:	f107 030c 	add.w	r3, r7, #12
 800b10c:	4618      	mov	r0, r3
 800b10e:	f000 fd3d 	bl	800bb8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b116:	e3c2      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b118:	2300      	movs	r3, #0
 800b11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b11c:	e3bf      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b11e:	4b1f      	ldr	r3, [pc, #124]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b122:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b126:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b128:	4b1c      	ldr	r3, [pc, #112]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 0304 	and.w	r3, r3, #4
 800b130:	2b04      	cmp	r3, #4
 800b132:	d10c      	bne.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b136:	2b00      	cmp	r3, #0
 800b138:	d109      	bne.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b13a:	4b18      	ldr	r3, [pc, #96]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	08db      	lsrs	r3, r3, #3
 800b140:	f003 0303 	and.w	r3, r3, #3
 800b144:	4a16      	ldr	r2, [pc, #88]	; (800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b146:	fa22 f303 	lsr.w	r3, r2, r3
 800b14a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b14c:	e01e      	b.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b14e:	4b13      	ldr	r3, [pc, #76]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b15a:	d106      	bne.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b162:	d102      	bne.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b164:	4b0f      	ldr	r3, [pc, #60]	; (800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b166:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b168:	e010      	b.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b16a:	4b0c      	ldr	r3, [pc, #48]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b172:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b176:	d106      	bne.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b17a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b17e:	d102      	bne.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b180:	4b09      	ldr	r3, [pc, #36]	; (800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b182:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b184:	e002      	b.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b186:	2300      	movs	r3, #0
 800b188:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b18a:	e388      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b18c:	e387      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b18e:	4b07      	ldr	r3, [pc, #28]	; (800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b190:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b192:	e384      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b194:	2300      	movs	r3, #0
 800b196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b198:	e381      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b19a:	bf00      	nop
 800b19c:	58024400 	.word	0x58024400
 800b1a0:	03d09000 	.word	0x03d09000
 800b1a4:	003d0900 	.word	0x003d0900
 800b1a8:	02faf080 	.word	0x02faf080
 800b1ac:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b1b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1b4:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b1b8:	430b      	orrs	r3, r1
 800b1ba:	f040 809c 	bne.w	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b1be:	4b9e      	ldr	r3, [pc, #632]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b1c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b1c6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1ce:	d054      	beq.n	800b27a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1d6:	f200 808b 	bhi.w	800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b1e0:	f000 8083 	beq.w	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b1ea:	f200 8081 	bhi.w	800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1f4:	d02f      	beq.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1fc:	d878      	bhi.n	800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b200:	2b00      	cmp	r3, #0
 800b202:	d004      	beq.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b206:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b20a:	d012      	beq.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b20c:	e070      	b.n	800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b20e:	4b8a      	ldr	r3, [pc, #552]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b21a:	d107      	bne.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b21c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b220:	4618      	mov	r0, r3
 800b222:	f000 fe07 	bl	800be34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b228:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b22a:	e338      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b22c:	2300      	movs	r3, #0
 800b22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b230:	e335      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b232:	4b81      	ldr	r3, [pc, #516]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b23a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b23e:	d107      	bne.n	800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b240:	f107 0318 	add.w	r3, r7, #24
 800b244:	4618      	mov	r0, r3
 800b246:	f000 fb4d 	bl	800b8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b24e:	e326      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b250:	2300      	movs	r3, #0
 800b252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b254:	e323      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b256:	4b78      	ldr	r3, [pc, #480]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b25e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b262:	d107      	bne.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b264:	f107 030c 	add.w	r3, r7, #12
 800b268:	4618      	mov	r0, r3
 800b26a:	f000 fc8f 	bl	800bb8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b272:	e314      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b274:	2300      	movs	r3, #0
 800b276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b278:	e311      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b27a:	4b6f      	ldr	r3, [pc, #444]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b27c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b27e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b282:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b284:	4b6c      	ldr	r3, [pc, #432]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 0304 	and.w	r3, r3, #4
 800b28c:	2b04      	cmp	r3, #4
 800b28e:	d10c      	bne.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b292:	2b00      	cmp	r3, #0
 800b294:	d109      	bne.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b296:	4b68      	ldr	r3, [pc, #416]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	08db      	lsrs	r3, r3, #3
 800b29c:	f003 0303 	and.w	r3, r3, #3
 800b2a0:	4a66      	ldr	r2, [pc, #408]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b2a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2a8:	e01e      	b.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2aa:	4b63      	ldr	r3, [pc, #396]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2b6:	d106      	bne.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2be:	d102      	bne.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b2c0:	4b5f      	ldr	r3, [pc, #380]	; (800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2c4:	e010      	b.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2c6:	4b5c      	ldr	r3, [pc, #368]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2d2:	d106      	bne.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2da:	d102      	bne.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2dc:	4b59      	ldr	r3, [pc, #356]	; (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2e0:	e002      	b.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b2e6:	e2da      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b2e8:	e2d9      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2ea:	4b57      	ldr	r3, [pc, #348]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ee:	e2d6      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2f4:	e2d3      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b2f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2fa:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b2fe:	430b      	orrs	r3, r1
 800b300:	f040 80a7 	bne.w	800b452 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b304:	4b4c      	ldr	r3, [pc, #304]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b308:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b30c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b314:	d055      	beq.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b31c:	f200 8096 	bhi.w	800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b322:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b326:	f000 8084 	beq.w	800b432 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b330:	f200 808c 	bhi.w	800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b33a:	d030      	beq.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b342:	f200 8083 	bhi.w	800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d004      	beq.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b352:	d012      	beq.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b354:	e07a      	b.n	800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b356:	4b38      	ldr	r3, [pc, #224]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b35e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b362:	d107      	bne.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b368:	4618      	mov	r0, r3
 800b36a:	f000 fd63 	bl	800be34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b370:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b372:	e294      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b378:	e291      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b37a:	4b2f      	ldr	r3, [pc, #188]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b386:	d107      	bne.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b388:	f107 0318 	add.w	r3, r7, #24
 800b38c:	4618      	mov	r0, r3
 800b38e:	f000 faa9 	bl	800b8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b396:	e282      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b39c:	e27f      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b39e:	4b26      	ldr	r3, [pc, #152]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3aa:	d107      	bne.n	800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3ac:	f107 030c 	add.w	r3, r7, #12
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f000 fbeb 	bl	800bb8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ba:	e270      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3c0:	e26d      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3c2:	4b1d      	ldr	r3, [pc, #116]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b3ca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3cc:	4b1a      	ldr	r3, [pc, #104]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f003 0304 	and.w	r3, r3, #4
 800b3d4:	2b04      	cmp	r3, #4
 800b3d6:	d10c      	bne.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d109      	bne.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3de:	4b16      	ldr	r3, [pc, #88]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	08db      	lsrs	r3, r3, #3
 800b3e4:	f003 0303 	and.w	r3, r3, #3
 800b3e8:	4a14      	ldr	r2, [pc, #80]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b3ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3f0:	e01e      	b.n	800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3f2:	4b11      	ldr	r3, [pc, #68]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3fe:	d106      	bne.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b406:	d102      	bne.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b408:	4b0d      	ldr	r3, [pc, #52]	; (800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b40a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b40c:	e010      	b.n	800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b40e:	4b0a      	ldr	r3, [pc, #40]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b41a:	d106      	bne.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b41e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b422:	d102      	bne.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b424:	4b07      	ldr	r3, [pc, #28]	; (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b426:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b428:	e002      	b.n	800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b42a:	2300      	movs	r3, #0
 800b42c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b42e:	e236      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b430:	e235      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b432:	4b05      	ldr	r3, [pc, #20]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b436:	e232      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b438:	58024400 	.word	0x58024400
 800b43c:	03d09000 	.word	0x03d09000
 800b440:	003d0900 	.word	0x003d0900
 800b444:	02faf080 	.word	0x02faf080
 800b448:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b44c:	2300      	movs	r3, #0
 800b44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b450:	e225      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b452:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b456:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b45a:	430b      	orrs	r3, r1
 800b45c:	f040 8085 	bne.w	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b460:	4b9c      	ldr	r3, [pc, #624]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b464:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b468:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b470:	d06b      	beq.n	800b54a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b478:	d874      	bhi.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b480:	d056      	beq.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b484:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b488:	d86c      	bhi.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b490:	d03b      	beq.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b494:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b498:	d864      	bhi.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4a0:	d021      	beq.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4a8:	d85c      	bhi.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d004      	beq.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4b6:	d004      	beq.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b4b8:	e054      	b.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b4ba:	f7fe fb5f 	bl	8009b7c <HAL_RCC_GetPCLK1Freq>
 800b4be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b4c0:	e1ed      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4c2:	4b84      	ldr	r3, [pc, #528]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4ce:	d107      	bne.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4d0:	f107 0318 	add.w	r3, r7, #24
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f000 fa05 	bl	800b8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4de:	e1de      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4e4:	e1db      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4e6:	4b7b      	ldr	r3, [pc, #492]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4f2:	d107      	bne.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4f4:	f107 030c 	add.w	r3, r7, #12
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f000 fb47 	bl	800bb8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b502:	e1cc      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b504:	2300      	movs	r3, #0
 800b506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b508:	e1c9      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b50a:	4b72      	ldr	r3, [pc, #456]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 0304 	and.w	r3, r3, #4
 800b512:	2b04      	cmp	r3, #4
 800b514:	d109      	bne.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b516:	4b6f      	ldr	r3, [pc, #444]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	08db      	lsrs	r3, r3, #3
 800b51c:	f003 0303 	and.w	r3, r3, #3
 800b520:	4a6d      	ldr	r2, [pc, #436]	; (800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b522:	fa22 f303 	lsr.w	r3, r2, r3
 800b526:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b528:	e1b9      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b52e:	e1b6      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b530:	4b68      	ldr	r3, [pc, #416]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b53c:	d102      	bne.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b53e:	4b67      	ldr	r3, [pc, #412]	; (800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b540:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b542:	e1ac      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b544:	2300      	movs	r3, #0
 800b546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b548:	e1a9      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b54a:	4b62      	ldr	r3, [pc, #392]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b556:	d102      	bne.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b558:	4b61      	ldr	r3, [pc, #388]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b55c:	e19f      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b562:	e19c      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b564:	2300      	movs	r3, #0
 800b566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b568:	e199      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b56a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b56e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b572:	430b      	orrs	r3, r1
 800b574:	d173      	bne.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b576:	4b57      	ldr	r3, [pc, #348]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b57a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b57e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b586:	d02f      	beq.n	800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b58e:	d863      	bhi.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b592:	2b00      	cmp	r3, #0
 800b594:	d004      	beq.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b59c:	d012      	beq.n	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b59e:	e05b      	b.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5a0:	4b4c      	ldr	r3, [pc, #304]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5ac:	d107      	bne.n	800b5be <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5ae:	f107 0318 	add.w	r3, r7, #24
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f000 f996 	bl	800b8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5bc:	e16f      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5c2:	e16c      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5c4:	4b43      	ldr	r3, [pc, #268]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5d0:	d107      	bne.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5d2:	f107 030c 	add.w	r3, r7, #12
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f000 fad8 	bl	800bb8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5e0:	e15d      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5e6:	e15a      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5e8:	4b3a      	ldr	r3, [pc, #232]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5f0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5f2:	4b38      	ldr	r3, [pc, #224]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f003 0304 	and.w	r3, r3, #4
 800b5fa:	2b04      	cmp	r3, #4
 800b5fc:	d10c      	bne.n	800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b600:	2b00      	cmp	r3, #0
 800b602:	d109      	bne.n	800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b604:	4b33      	ldr	r3, [pc, #204]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	08db      	lsrs	r3, r3, #3
 800b60a:	f003 0303 	and.w	r3, r3, #3
 800b60e:	4a32      	ldr	r2, [pc, #200]	; (800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b610:	fa22 f303 	lsr.w	r3, r2, r3
 800b614:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b616:	e01e      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b618:	4b2e      	ldr	r3, [pc, #184]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b624:	d106      	bne.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b62c:	d102      	bne.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b62e:	4b2b      	ldr	r3, [pc, #172]	; (800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b630:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b632:	e010      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b634:	4b27      	ldr	r3, [pc, #156]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b63c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b640:	d106      	bne.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b648:	d102      	bne.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b64a:	4b25      	ldr	r3, [pc, #148]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b64c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b64e:	e002      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b650:	2300      	movs	r3, #0
 800b652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b654:	e123      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b656:	e122      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b65c:	e11f      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b65e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b662:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b666:	430b      	orrs	r3, r1
 800b668:	d13c      	bne.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b66a:	4b1a      	ldr	r3, [pc, #104]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b66c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b66e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b672:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b676:	2b00      	cmp	r3, #0
 800b678:	d004      	beq.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b680:	d012      	beq.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b682:	e023      	b.n	800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b684:	4b13      	ldr	r3, [pc, #76]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b68c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b690:	d107      	bne.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b696:	4618      	mov	r0, r3
 800b698:	f000 fbcc 	bl	800be34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6a0:	e0fd      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6a6:	e0fa      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6a8:	4b0a      	ldr	r3, [pc, #40]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6b4:	d107      	bne.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6b6:	f107 0318 	add.w	r3, r7, #24
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f000 f912 	bl	800b8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b6c0:	6a3b      	ldr	r3, [r7, #32]
 800b6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6c4:	e0eb      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6ca:	e0e8      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6d0:	e0e5      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b6d2:	bf00      	nop
 800b6d4:	58024400 	.word	0x58024400
 800b6d8:	03d09000 	.word	0x03d09000
 800b6dc:	003d0900 	.word	0x003d0900
 800b6e0:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b6e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6e8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b6ec:	430b      	orrs	r3, r1
 800b6ee:	f040 8085 	bne.w	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b6f2:	4b6d      	ldr	r3, [pc, #436]	; (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b6f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6f6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b6fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b702:	d06b      	beq.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b706:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b70a:	d874      	bhi.n	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b712:	d056      	beq.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b71a:	d86c      	bhi.n	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b722:	d03b      	beq.n	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b726:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b72a:	d864      	bhi.n	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b732:	d021      	beq.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b73a:	d85c      	bhi.n	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d004      	beq.n	800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b748:	d004      	beq.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b74a:	e054      	b.n	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b74c:	f000 f8b4 	bl	800b8b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b750:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b752:	e0a4      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b754:	4b54      	ldr	r3, [pc, #336]	; (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b75c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b760:	d107      	bne.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b762:	f107 0318 	add.w	r3, r7, #24
 800b766:	4618      	mov	r0, r3
 800b768:	f000 f8bc 	bl	800b8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b770:	e095      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b772:	2300      	movs	r3, #0
 800b774:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b776:	e092      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b778:	4b4b      	ldr	r3, [pc, #300]	; (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b784:	d107      	bne.n	800b796 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b786:	f107 030c 	add.w	r3, r7, #12
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 f9fe 	bl	800bb8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b794:	e083      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b796:	2300      	movs	r3, #0
 800b798:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b79a:	e080      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b79c:	4b42      	ldr	r3, [pc, #264]	; (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 0304 	and.w	r3, r3, #4
 800b7a4:	2b04      	cmp	r3, #4
 800b7a6:	d109      	bne.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7a8:	4b3f      	ldr	r3, [pc, #252]	; (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	08db      	lsrs	r3, r3, #3
 800b7ae:	f003 0303 	and.w	r3, r3, #3
 800b7b2:	4a3e      	ldr	r2, [pc, #248]	; (800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b7b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7ba:	e070      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7c0:	e06d      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b7c2:	4b39      	ldr	r3, [pc, #228]	; (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7ce:	d102      	bne.n	800b7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b7d0:	4b37      	ldr	r3, [pc, #220]	; (800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7d4:	e063      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7da:	e060      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b7dc:	4b32      	ldr	r3, [pc, #200]	; (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7e8:	d102      	bne.n	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b7ea:	4b32      	ldr	r3, [pc, #200]	; (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7ee:	e056      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7f4:	e053      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7fa:	e050      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b7fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b800:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b804:	430b      	orrs	r3, r1
 800b806:	d148      	bne.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b808:	4b27      	ldr	r3, [pc, #156]	; (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b80a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b80c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b810:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b818:	d02a      	beq.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b820:	d838      	bhi.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b824:	2b00      	cmp	r3, #0
 800b826:	d004      	beq.n	800b832 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b82e:	d00d      	beq.n	800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b830:	e030      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b832:	4b1d      	ldr	r3, [pc, #116]	; (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b83a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b83e:	d102      	bne.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b840:	4b1c      	ldr	r3, [pc, #112]	; (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b842:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b844:	e02b      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b846:	2300      	movs	r3, #0
 800b848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b84a:	e028      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b84c:	4b16      	ldr	r3, [pc, #88]	; (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b854:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b858:	d107      	bne.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b85a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b85e:	4618      	mov	r0, r3
 800b860:	f000 fae8 	bl	800be34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b866:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b868:	e019      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b86a:	2300      	movs	r3, #0
 800b86c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b86e:	e016      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b870:	4b0d      	ldr	r3, [pc, #52]	; (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b87c:	d107      	bne.n	800b88e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b87e:	f107 0318 	add.w	r3, r7, #24
 800b882:	4618      	mov	r0, r3
 800b884:	f000 f82e 	bl	800b8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b88c:	e007      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b88e:	2300      	movs	r3, #0
 800b890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b892:	e004      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b894:	2300      	movs	r3, #0
 800b896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b898:	e001      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3740      	adds	r7, #64	; 0x40
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	58024400 	.word	0x58024400
 800b8ac:	03d09000 	.word	0x03d09000
 800b8b0:	003d0900 	.word	0x003d0900
 800b8b4:	02faf080 	.word	0x02faf080

0800b8b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b8bc:	f7fe f92e 	bl	8009b1c <HAL_RCC_GetHCLKFreq>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	4b06      	ldr	r3, [pc, #24]	; (800b8dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b8c4:	6a1b      	ldr	r3, [r3, #32]
 800b8c6:	091b      	lsrs	r3, r3, #4
 800b8c8:	f003 0307 	and.w	r3, r3, #7
 800b8cc:	4904      	ldr	r1, [pc, #16]	; (800b8e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b8ce:	5ccb      	ldrb	r3, [r1, r3]
 800b8d0:	f003 031f 	and.w	r3, r3, #31
 800b8d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	58024400 	.word	0x58024400
 800b8e0:	0801c9a4 	.word	0x0801c9a4

0800b8e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b089      	sub	sp, #36	; 0x24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8ec:	4ba1      	ldr	r3, [pc, #644]	; (800bb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f0:	f003 0303 	and.w	r3, r3, #3
 800b8f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b8f6:	4b9f      	ldr	r3, [pc, #636]	; (800bb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8fa:	0b1b      	lsrs	r3, r3, #12
 800b8fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b900:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b902:	4b9c      	ldr	r3, [pc, #624]	; (800bb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b906:	091b      	lsrs	r3, r3, #4
 800b908:	f003 0301 	and.w	r3, r3, #1
 800b90c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b90e:	4b99      	ldr	r3, [pc, #612]	; (800bb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b912:	08db      	lsrs	r3, r3, #3
 800b914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b918:	693a      	ldr	r2, [r7, #16]
 800b91a:	fb02 f303 	mul.w	r3, r2, r3
 800b91e:	ee07 3a90 	vmov	s15, r3
 800b922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b926:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f000 8111 	beq.w	800bb54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	2b02      	cmp	r3, #2
 800b936:	f000 8083 	beq.w	800ba40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	2b02      	cmp	r3, #2
 800b93e:	f200 80a1 	bhi.w	800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d003      	beq.n	800b950 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d056      	beq.n	800b9fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b94e:	e099      	b.n	800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b950:	4b88      	ldr	r3, [pc, #544]	; (800bb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f003 0320 	and.w	r3, r3, #32
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d02d      	beq.n	800b9b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b95c:	4b85      	ldr	r3, [pc, #532]	; (800bb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	08db      	lsrs	r3, r3, #3
 800b962:	f003 0303 	and.w	r3, r3, #3
 800b966:	4a84      	ldr	r2, [pc, #528]	; (800bb78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b968:	fa22 f303 	lsr.w	r3, r2, r3
 800b96c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	ee07 3a90 	vmov	s15, r3
 800b974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	ee07 3a90 	vmov	s15, r3
 800b97e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b986:	4b7b      	ldr	r3, [pc, #492]	; (800bb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b98e:	ee07 3a90 	vmov	s15, r3
 800b992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b996:	ed97 6a03 	vldr	s12, [r7, #12]
 800b99a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bb7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b99e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b9b6:	e087      	b.n	800bac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	ee07 3a90 	vmov	s15, r3
 800b9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bb80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b9c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9ca:	4b6a      	ldr	r3, [pc, #424]	; (800bb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9d2:	ee07 3a90 	vmov	s15, r3
 800b9d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bb7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9fa:	e065      	b.n	800bac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	ee07 3a90 	vmov	s15, r3
 800ba02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bb84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ba0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba0e:	4b59      	ldr	r3, [pc, #356]	; (800bb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba16:	ee07 3a90 	vmov	s15, r3
 800ba1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba22:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bb7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba3e:	e043      	b.n	800bac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	ee07 3a90 	vmov	s15, r3
 800ba46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bb88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ba4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba52:	4b48      	ldr	r3, [pc, #288]	; (800bb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba5a:	ee07 3a90 	vmov	s15, r3
 800ba5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba66:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bb7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba82:	e021      	b.n	800bac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	ee07 3a90 	vmov	s15, r3
 800ba8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bb84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ba92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba96:	4b37      	ldr	r3, [pc, #220]	; (800bb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba9e:	ee07 3a90 	vmov	s15, r3
 800baa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800baaa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bb7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800baae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800babe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bac6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bac8:	4b2a      	ldr	r3, [pc, #168]	; (800bb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bacc:	0a5b      	lsrs	r3, r3, #9
 800bace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bad2:	ee07 3a90 	vmov	s15, r3
 800bad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bada:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bade:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bae2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baee:	ee17 2a90 	vmov	r2, s15
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800baf6:	4b1f      	ldr	r3, [pc, #124]	; (800bb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bafa:	0c1b      	lsrs	r3, r3, #16
 800bafc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb00:	ee07 3a90 	vmov	s15, r3
 800bb04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb10:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb1c:	ee17 2a90 	vmov	r2, s15
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bb24:	4b13      	ldr	r3, [pc, #76]	; (800bb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb28:	0e1b      	lsrs	r3, r3, #24
 800bb2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb2e:	ee07 3a90 	vmov	s15, r3
 800bb32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb4a:	ee17 2a90 	vmov	r2, s15
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bb52:	e008      	b.n	800bb66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	609a      	str	r2, [r3, #8]
}
 800bb66:	bf00      	nop
 800bb68:	3724      	adds	r7, #36	; 0x24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	58024400 	.word	0x58024400
 800bb78:	03d09000 	.word	0x03d09000
 800bb7c:	46000000 	.word	0x46000000
 800bb80:	4c742400 	.word	0x4c742400
 800bb84:	4a742400 	.word	0x4a742400
 800bb88:	4c3ebc20 	.word	0x4c3ebc20

0800bb8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b089      	sub	sp, #36	; 0x24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb94:	4ba1      	ldr	r3, [pc, #644]	; (800be1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb98:	f003 0303 	and.w	r3, r3, #3
 800bb9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bb9e:	4b9f      	ldr	r3, [pc, #636]	; (800be1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bba2:	0d1b      	lsrs	r3, r3, #20
 800bba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bba8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bbaa:	4b9c      	ldr	r3, [pc, #624]	; (800be1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbae:	0a1b      	lsrs	r3, r3, #8
 800bbb0:	f003 0301 	and.w	r3, r3, #1
 800bbb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bbb6:	4b99      	ldr	r3, [pc, #612]	; (800be1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbba:	08db      	lsrs	r3, r3, #3
 800bbbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	fb02 f303 	mul.w	r3, r2, r3
 800bbc6:	ee07 3a90 	vmov	s15, r3
 800bbca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 8111 	beq.w	800bdfc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	f000 8083 	beq.w	800bce8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	f200 80a1 	bhi.w	800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d003      	beq.n	800bbf8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d056      	beq.n	800bca4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bbf6:	e099      	b.n	800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbf8:	4b88      	ldr	r3, [pc, #544]	; (800be1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f003 0320 	and.w	r3, r3, #32
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d02d      	beq.n	800bc60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc04:	4b85      	ldr	r3, [pc, #532]	; (800be1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	08db      	lsrs	r3, r3, #3
 800bc0a:	f003 0303 	and.w	r3, r3, #3
 800bc0e:	4a84      	ldr	r2, [pc, #528]	; (800be20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bc10:	fa22 f303 	lsr.w	r3, r2, r3
 800bc14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	ee07 3a90 	vmov	s15, r3
 800bc1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	ee07 3a90 	vmov	s15, r3
 800bc26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc2e:	4b7b      	ldr	r3, [pc, #492]	; (800be1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc36:	ee07 3a90 	vmov	s15, r3
 800bc3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc42:	eddf 5a78 	vldr	s11, [pc, #480]	; 800be24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bc5e:	e087      	b.n	800bd70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	ee07 3a90 	vmov	s15, r3
 800bc66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800be28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bc6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc72:	4b6a      	ldr	r3, [pc, #424]	; (800be1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc7a:	ee07 3a90 	vmov	s15, r3
 800bc7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc82:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc86:	eddf 5a67 	vldr	s11, [pc, #412]	; 800be24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bca2:	e065      	b.n	800bd70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	ee07 3a90 	vmov	s15, r3
 800bcaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800be2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bcb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcb6:	4b59      	ldr	r3, [pc, #356]	; (800be1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcbe:	ee07 3a90 	vmov	s15, r3
 800bcc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800be24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bcce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bce6:	e043      	b.n	800bd70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	ee07 3a90 	vmov	s15, r3
 800bcee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800be30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bcf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcfa:	4b48      	ldr	r3, [pc, #288]	; (800be1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd02:	ee07 3a90 	vmov	s15, r3
 800bd06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800be24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd2a:	e021      	b.n	800bd70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	ee07 3a90 	vmov	s15, r3
 800bd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800be2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bd3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd3e:	4b37      	ldr	r3, [pc, #220]	; (800be1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd46:	ee07 3a90 	vmov	s15, r3
 800bd4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd52:	eddf 5a34 	vldr	s11, [pc, #208]	; 800be24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bd70:	4b2a      	ldr	r3, [pc, #168]	; (800be1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd74:	0a5b      	lsrs	r3, r3, #9
 800bd76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd7a:	ee07 3a90 	vmov	s15, r3
 800bd7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd96:	ee17 2a90 	vmov	r2, s15
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bd9e:	4b1f      	ldr	r3, [pc, #124]	; (800be1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bda0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda2:	0c1b      	lsrs	r3, r3, #16
 800bda4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda8:	ee07 3a90 	vmov	s15, r3
 800bdac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdc4:	ee17 2a90 	vmov	r2, s15
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bdcc:	4b13      	ldr	r3, [pc, #76]	; (800be1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd0:	0e1b      	lsrs	r3, r3, #24
 800bdd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdd6:	ee07 3a90 	vmov	s15, r3
 800bdda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bde2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bde6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdf2:	ee17 2a90 	vmov	r2, s15
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bdfa:	e008      	b.n	800be0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	609a      	str	r2, [r3, #8]
}
 800be0e:	bf00      	nop
 800be10:	3724      	adds	r7, #36	; 0x24
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	58024400 	.word	0x58024400
 800be20:	03d09000 	.word	0x03d09000
 800be24:	46000000 	.word	0x46000000
 800be28:	4c742400 	.word	0x4c742400
 800be2c:	4a742400 	.word	0x4a742400
 800be30:	4c3ebc20 	.word	0x4c3ebc20

0800be34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800be34:	b480      	push	{r7}
 800be36:	b089      	sub	sp, #36	; 0x24
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be3c:	4ba0      	ldr	r3, [pc, #640]	; (800c0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be40:	f003 0303 	and.w	r3, r3, #3
 800be44:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800be46:	4b9e      	ldr	r3, [pc, #632]	; (800c0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be4a:	091b      	lsrs	r3, r3, #4
 800be4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be50:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800be52:	4b9b      	ldr	r3, [pc, #620]	; (800c0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be56:	f003 0301 	and.w	r3, r3, #1
 800be5a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800be5c:	4b98      	ldr	r3, [pc, #608]	; (800c0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be60:	08db      	lsrs	r3, r3, #3
 800be62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be66:	693a      	ldr	r2, [r7, #16]
 800be68:	fb02 f303 	mul.w	r3, r2, r3
 800be6c:	ee07 3a90 	vmov	s15, r3
 800be70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be74:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f000 8111 	beq.w	800c0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	2b02      	cmp	r3, #2
 800be84:	f000 8083 	beq.w	800bf8e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800be88:	69bb      	ldr	r3, [r7, #24]
 800be8a:	2b02      	cmp	r3, #2
 800be8c:	f200 80a1 	bhi.w	800bfd2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d003      	beq.n	800be9e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d056      	beq.n	800bf4a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800be9c:	e099      	b.n	800bfd2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be9e:	4b88      	ldr	r3, [pc, #544]	; (800c0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f003 0320 	and.w	r3, r3, #32
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d02d      	beq.n	800bf06 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800beaa:	4b85      	ldr	r3, [pc, #532]	; (800c0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	08db      	lsrs	r3, r3, #3
 800beb0:	f003 0303 	and.w	r3, r3, #3
 800beb4:	4a83      	ldr	r2, [pc, #524]	; (800c0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800beb6:	fa22 f303 	lsr.w	r3, r2, r3
 800beba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	ee07 3a90 	vmov	s15, r3
 800bec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	ee07 3a90 	vmov	s15, r3
 800becc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bed0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bed4:	4b7a      	ldr	r3, [pc, #488]	; (800c0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bedc:	ee07 3a90 	vmov	s15, r3
 800bee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bee4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bee8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c0c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800beec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bef4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800befc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf00:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bf04:	e087      	b.n	800c016 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	ee07 3a90 	vmov	s15, r3
 800bf0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf10:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c0cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bf14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf18:	4b69      	ldr	r3, [pc, #420]	; (800c0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf20:	ee07 3a90 	vmov	s15, r3
 800bf24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf28:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf2c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c0c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bf30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf48:	e065      	b.n	800c016 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	ee07 3a90 	vmov	s15, r3
 800bf50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf54:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c0d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bf58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf5c:	4b58      	ldr	r3, [pc, #352]	; (800c0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf64:	ee07 3a90 	vmov	s15, r3
 800bf68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf70:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c0c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bf74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf8c:	e043      	b.n	800c016 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	ee07 3a90 	vmov	s15, r3
 800bf94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf98:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c0d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bf9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfa0:	4b47      	ldr	r3, [pc, #284]	; (800c0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa8:	ee07 3a90 	vmov	s15, r3
 800bfac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfb4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c0c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bfb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfd0:	e021      	b.n	800c016 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	ee07 3a90 	vmov	s15, r3
 800bfd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfdc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c0cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bfe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfe4:	4b36      	ldr	r3, [pc, #216]	; (800c0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfec:	ee07 3a90 	vmov	s15, r3
 800bff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bff4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bff8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c0c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c00c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c010:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c014:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c016:	4b2a      	ldr	r3, [pc, #168]	; (800c0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c01a:	0a5b      	lsrs	r3, r3, #9
 800c01c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c020:	ee07 3a90 	vmov	s15, r3
 800c024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c02c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c030:	edd7 6a07 	vldr	s13, [r7, #28]
 800c034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c03c:	ee17 2a90 	vmov	r2, s15
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c044:	4b1e      	ldr	r3, [pc, #120]	; (800c0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c048:	0c1b      	lsrs	r3, r3, #16
 800c04a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c04e:	ee07 3a90 	vmov	s15, r3
 800c052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c05a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c05e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c06a:	ee17 2a90 	vmov	r2, s15
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c072:	4b13      	ldr	r3, [pc, #76]	; (800c0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c076:	0e1b      	lsrs	r3, r3, #24
 800c078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c07c:	ee07 3a90 	vmov	s15, r3
 800c080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c084:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c088:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c08c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c098:	ee17 2a90 	vmov	r2, s15
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c0a0:	e008      	b.n	800c0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	609a      	str	r2, [r3, #8]
}
 800c0b4:	bf00      	nop
 800c0b6:	3724      	adds	r7, #36	; 0x24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr
 800c0c0:	58024400 	.word	0x58024400
 800c0c4:	03d09000 	.word	0x03d09000
 800c0c8:	46000000 	.word	0x46000000
 800c0cc:	4c742400 	.word	0x4c742400
 800c0d0:	4a742400 	.word	0x4a742400
 800c0d4:	4c3ebc20 	.word	0x4c3ebc20

0800c0d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c0e6:	4b53      	ldr	r3, [pc, #332]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ea:	f003 0303 	and.w	r3, r3, #3
 800c0ee:	2b03      	cmp	r3, #3
 800c0f0:	d101      	bne.n	800c0f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e099      	b.n	800c22a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c0f6:	4b4f      	ldr	r3, [pc, #316]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a4e      	ldr	r2, [pc, #312]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c0fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c102:	f7f6 fe5b 	bl	8002dbc <HAL_GetTick>
 800c106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c108:	e008      	b.n	800c11c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c10a:	f7f6 fe57 	bl	8002dbc <HAL_GetTick>
 800c10e:	4602      	mov	r2, r0
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	1ad3      	subs	r3, r2, r3
 800c114:	2b02      	cmp	r3, #2
 800c116:	d901      	bls.n	800c11c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c118:	2303      	movs	r3, #3
 800c11a:	e086      	b.n	800c22a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c11c:	4b45      	ldr	r3, [pc, #276]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c124:	2b00      	cmp	r3, #0
 800c126:	d1f0      	bne.n	800c10a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c128:	4b42      	ldr	r3, [pc, #264]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c12c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	031b      	lsls	r3, r3, #12
 800c136:	493f      	ldr	r1, [pc, #252]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c138:	4313      	orrs	r3, r2
 800c13a:	628b      	str	r3, [r1, #40]	; 0x28
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	3b01      	subs	r3, #1
 800c142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	3b01      	subs	r3, #1
 800c14c:	025b      	lsls	r3, r3, #9
 800c14e:	b29b      	uxth	r3, r3
 800c150:	431a      	orrs	r2, r3
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	3b01      	subs	r3, #1
 800c158:	041b      	lsls	r3, r3, #16
 800c15a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c15e:	431a      	orrs	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	691b      	ldr	r3, [r3, #16]
 800c164:	3b01      	subs	r3, #1
 800c166:	061b      	lsls	r3, r3, #24
 800c168:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c16c:	4931      	ldr	r1, [pc, #196]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c16e:	4313      	orrs	r3, r2
 800c170:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c172:	4b30      	ldr	r3, [pc, #192]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c176:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	695b      	ldr	r3, [r3, #20]
 800c17e:	492d      	ldr	r1, [pc, #180]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c180:	4313      	orrs	r3, r2
 800c182:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c184:	4b2b      	ldr	r3, [pc, #172]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c188:	f023 0220 	bic.w	r2, r3, #32
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	699b      	ldr	r3, [r3, #24]
 800c190:	4928      	ldr	r1, [pc, #160]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c192:	4313      	orrs	r3, r2
 800c194:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c196:	4b27      	ldr	r3, [pc, #156]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19a:	4a26      	ldr	r2, [pc, #152]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c19c:	f023 0310 	bic.w	r3, r3, #16
 800c1a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c1a2:	4b24      	ldr	r3, [pc, #144]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c1a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1a6:	4b24      	ldr	r3, [pc, #144]	; (800c238 <RCCEx_PLL2_Config+0x160>)
 800c1a8:	4013      	ands	r3, r2
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	69d2      	ldr	r2, [r2, #28]
 800c1ae:	00d2      	lsls	r2, r2, #3
 800c1b0:	4920      	ldr	r1, [pc, #128]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c1b6:	4b1f      	ldr	r3, [pc, #124]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ba:	4a1e      	ldr	r2, [pc, #120]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c1bc:	f043 0310 	orr.w	r3, r3, #16
 800c1c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d106      	bne.n	800c1d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c1c8:	4b1a      	ldr	r3, [pc, #104]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1cc:	4a19      	ldr	r2, [pc, #100]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c1ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1d4:	e00f      	b.n	800c1f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d106      	bne.n	800c1ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c1dc:	4b15      	ldr	r3, [pc, #84]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e0:	4a14      	ldr	r2, [pc, #80]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c1e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1e8:	e005      	b.n	800c1f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c1ea:	4b12      	ldr	r3, [pc, #72]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ee:	4a11      	ldr	r2, [pc, #68]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c1f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c1f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c1f6:	4b0f      	ldr	r3, [pc, #60]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a0e      	ldr	r2, [pc, #56]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c1fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c202:	f7f6 fddb 	bl	8002dbc <HAL_GetTick>
 800c206:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c208:	e008      	b.n	800c21c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c20a:	f7f6 fdd7 	bl	8002dbc <HAL_GetTick>
 800c20e:	4602      	mov	r2, r0
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	2b02      	cmp	r3, #2
 800c216:	d901      	bls.n	800c21c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c218:	2303      	movs	r3, #3
 800c21a:	e006      	b.n	800c22a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c21c:	4b05      	ldr	r3, [pc, #20]	; (800c234 <RCCEx_PLL2_Config+0x15c>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c224:	2b00      	cmp	r3, #0
 800c226:	d0f0      	beq.n	800c20a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c228:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	58024400 	.word	0x58024400
 800c238:	ffff0007 	.word	0xffff0007

0800c23c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c246:	2300      	movs	r3, #0
 800c248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c24a:	4b53      	ldr	r3, [pc, #332]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c24e:	f003 0303 	and.w	r3, r3, #3
 800c252:	2b03      	cmp	r3, #3
 800c254:	d101      	bne.n	800c25a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c256:	2301      	movs	r3, #1
 800c258:	e099      	b.n	800c38e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c25a:	4b4f      	ldr	r3, [pc, #316]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a4e      	ldr	r2, [pc, #312]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c266:	f7f6 fda9 	bl	8002dbc <HAL_GetTick>
 800c26a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c26c:	e008      	b.n	800c280 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c26e:	f7f6 fda5 	bl	8002dbc <HAL_GetTick>
 800c272:	4602      	mov	r2, r0
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	2b02      	cmp	r3, #2
 800c27a:	d901      	bls.n	800c280 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c27c:	2303      	movs	r3, #3
 800c27e:	e086      	b.n	800c38e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c280:	4b45      	ldr	r3, [pc, #276]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1f0      	bne.n	800c26e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c28c:	4b42      	ldr	r3, [pc, #264]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c290:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	051b      	lsls	r3, r3, #20
 800c29a:	493f      	ldr	r1, [pc, #252]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c29c:	4313      	orrs	r3, r2
 800c29e:	628b      	str	r3, [r1, #40]	; 0x28
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	3b01      	subs	r3, #1
 800c2a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	025b      	lsls	r3, r3, #9
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	431a      	orrs	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	041b      	lsls	r3, r3, #16
 800c2be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c2c2:	431a      	orrs	r2, r3
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	691b      	ldr	r3, [r3, #16]
 800c2c8:	3b01      	subs	r3, #1
 800c2ca:	061b      	lsls	r3, r3, #24
 800c2cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c2d0:	4931      	ldr	r1, [pc, #196]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c2d6:	4b30      	ldr	r3, [pc, #192]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	695b      	ldr	r3, [r3, #20]
 800c2e2:	492d      	ldr	r1, [pc, #180]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c2e8:	4b2b      	ldr	r3, [pc, #172]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	699b      	ldr	r3, [r3, #24]
 800c2f4:	4928      	ldr	r1, [pc, #160]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c2fa:	4b27      	ldr	r3, [pc, #156]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fe:	4a26      	ldr	r2, [pc, #152]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c304:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c306:	4b24      	ldr	r3, [pc, #144]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c30a:	4b24      	ldr	r3, [pc, #144]	; (800c39c <RCCEx_PLL3_Config+0x160>)
 800c30c:	4013      	ands	r3, r2
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	69d2      	ldr	r2, [r2, #28]
 800c312:	00d2      	lsls	r2, r2, #3
 800c314:	4920      	ldr	r1, [pc, #128]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c316:	4313      	orrs	r3, r2
 800c318:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c31a:	4b1f      	ldr	r3, [pc, #124]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31e:	4a1e      	ldr	r2, [pc, #120]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c324:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d106      	bne.n	800c33a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c32c:	4b1a      	ldr	r3, [pc, #104]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c330:	4a19      	ldr	r2, [pc, #100]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c332:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c336:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c338:	e00f      	b.n	800c35a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d106      	bne.n	800c34e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c340:	4b15      	ldr	r3, [pc, #84]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c344:	4a14      	ldr	r2, [pc, #80]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c346:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c34a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c34c:	e005      	b.n	800c35a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c34e:	4b12      	ldr	r3, [pc, #72]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c352:	4a11      	ldr	r2, [pc, #68]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c354:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c358:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c35a:	4b0f      	ldr	r3, [pc, #60]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a0e      	ldr	r2, [pc, #56]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c366:	f7f6 fd29 	bl	8002dbc <HAL_GetTick>
 800c36a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c36c:	e008      	b.n	800c380 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c36e:	f7f6 fd25 	bl	8002dbc <HAL_GetTick>
 800c372:	4602      	mov	r2, r0
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	1ad3      	subs	r3, r2, r3
 800c378:	2b02      	cmp	r3, #2
 800c37a:	d901      	bls.n	800c380 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c37c:	2303      	movs	r3, #3
 800c37e:	e006      	b.n	800c38e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c380:	4b05      	ldr	r3, [pc, #20]	; (800c398 <RCCEx_PLL3_Config+0x15c>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d0f0      	beq.n	800c36e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	58024400 	.word	0x58024400
 800c39c:	ffff0007 	.word	0xffff0007

0800c3a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b08a      	sub	sp, #40	; 0x28
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d101      	bne.n	800c3b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e075      	b.n	800c49e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d105      	bne.n	800c3ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7f5 fd91 	bl	8001eec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2204      	movs	r2, #4
 800c3ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 f868 	bl	800c4a8 <HAL_SD_InitCard>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d001      	beq.n	800c3e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	e05d      	b.n	800c49e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c3e2:	f107 0308 	add.w	r3, r7, #8
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 fdaf 	bl	800cf4c <HAL_SD_GetCardStatus>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d001      	beq.n	800c3f8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e052      	b.n	800c49e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c3f8:	7e3b      	ldrb	r3, [r7, #24]
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c3fe:	7e7b      	ldrb	r3, [r7, #25]
 800c400:	b2db      	uxtb	r3, r3
 800c402:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d10a      	bne.n	800c422 <HAL_SD_Init+0x82>
 800c40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d102      	bne.n	800c418 <HAL_SD_Init+0x78>
 800c412:	6a3b      	ldr	r3, [r7, #32]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d004      	beq.n	800c422 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c41e:	659a      	str	r2, [r3, #88]	; 0x58
 800c420:	e00b      	b.n	800c43a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c426:	2b01      	cmp	r3, #1
 800c428:	d104      	bne.n	800c434 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c430:	659a      	str	r2, [r3, #88]	; 0x58
 800c432:	e002      	b.n	800c43a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	4619      	mov	r1, r3
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 fe6d 	bl	800d120 <HAL_SD_ConfigWideBusOperation>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d001      	beq.n	800c450 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	e026      	b.n	800c49e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c450:	f7f6 fcb4 	bl	8002dbc <HAL_GetTick>
 800c454:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c456:	e011      	b.n	800c47c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c458:	f7f6 fcb0 	bl	8002dbc <HAL_GetTick>
 800c45c:	4602      	mov	r2, r0
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c466:	d109      	bne.n	800c47c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c46e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2201      	movs	r2, #1
 800c474:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800c478:	2303      	movs	r3, #3
 800c47a:	e010      	b.n	800c49e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 ff61 	bl	800d344 <HAL_SD_GetCardState>
 800c482:	4603      	mov	r3, r0
 800c484:	2b04      	cmp	r3, #4
 800c486:	d1e7      	bne.n	800c458 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2200      	movs	r2, #0
 800c48c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3728      	adds	r7, #40	; 0x28
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
	...

0800c4a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c4a8:	b590      	push	{r4, r7, lr}
 800c4aa:	b08d      	sub	sp, #52	; 0x34
 800c4ac:	af02      	add	r7, sp, #8
 800c4ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c4c0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c4c4:	f04f 0100 	mov.w	r1, #0
 800c4c8:	f7fe fd24 	bl	800af14 <HAL_RCCEx_GetPeriphCLKFreq>
 800c4cc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800c4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d109      	bne.n	800c4e8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c4e2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e070      	b.n	800c5ca <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	0a1b      	lsrs	r3, r3, #8
 800c4ec:	4a39      	ldr	r2, [pc, #228]	; (800c5d4 <HAL_SD_InitCard+0x12c>)
 800c4ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c4f2:	091b      	lsrs	r3, r3, #4
 800c4f4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681c      	ldr	r4, [r3, #0]
 800c4fa:	466a      	mov	r2, sp
 800c4fc:	f107 0318 	add.w	r3, r7, #24
 800c500:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c504:	e882 0003 	stmia.w	r2, {r0, r1}
 800c508:	f107 030c 	add.w	r3, r7, #12
 800c50c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c50e:	4620      	mov	r0, r4
 800c510:	f003 fe0c 	bl	801012c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4618      	mov	r0, r3
 800c51a:	f003 fe4f 	bl	80101bc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d005      	beq.n	800c530 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	005b      	lsls	r3, r3, #1
 800c528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c52a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c52e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800c530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c532:	2b00      	cmp	r3, #0
 800c534:	d007      	beq.n	800c546 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c536:	4a28      	ldr	r2, [pc, #160]	; (800c5d8 <HAL_SD_InitCard+0x130>)
 800c538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c53e:	3301      	adds	r3, #1
 800c540:	4618      	mov	r0, r3
 800c542:	f7f6 fc47 	bl	8002dd4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 ffea 	bl	800d520 <SD_PowerON>
 800c54c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c54e:	6a3b      	ldr	r3, [r7, #32]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00b      	beq.n	800c56c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c560:	6a3b      	ldr	r3, [r7, #32]
 800c562:	431a      	orrs	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c568:	2301      	movs	r3, #1
 800c56a:	e02e      	b.n	800c5ca <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 ff09 	bl	800d384 <SD_InitCard>
 800c572:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c574:	6a3b      	ldr	r3, [r7, #32]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00b      	beq.n	800c592 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2201      	movs	r2, #1
 800c57e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c586:	6a3b      	ldr	r3, [r7, #32]
 800c588:	431a      	orrs	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	e01b      	b.n	800c5ca <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c59a:	4618      	mov	r0, r3
 800c59c:	f003 fea4 	bl	80102e8 <SDMMC_CmdBlockLength>
 800c5a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c5a2:	6a3b      	ldr	r3, [r7, #32]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00f      	beq.n	800c5c8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a0b      	ldr	r2, [pc, #44]	; (800c5dc <HAL_SD_InitCard+0x134>)
 800c5ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5b4:	6a3b      	ldr	r3, [r7, #32]
 800c5b6:	431a      	orrs	r2, r3
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	e000      	b.n	800c5ca <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	372c      	adds	r7, #44	; 0x2c
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd90      	pop	{r4, r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	014f8b59 	.word	0x014f8b59
 800c5d8:	00012110 	.word	0x00012110
 800c5dc:	1fe00fff 	.word	0x1fe00fff

0800c5e0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b08c      	sub	sp, #48	; 0x30
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
 800c5ec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d107      	bne.n	800c608 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c604:	2301      	movs	r3, #1
 800c606:	e08d      	b.n	800c724 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b01      	cmp	r3, #1
 800c612:	f040 8086 	bne.w	800c722 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2200      	movs	r2, #0
 800c61a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c61c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	441a      	add	r2, r3
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c626:	429a      	cmp	r2, r3
 800c628:	d907      	bls.n	800c63a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c62e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c636:	2301      	movs	r3, #1
 800c638:	e074      	b.n	800c724 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2203      	movs	r2, #3
 800c63e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2200      	movs	r2, #0
 800c648:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	025a      	lsls	r2, r3, #9
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d002      	beq.n	800c666 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c662:	025b      	lsls	r3, r3, #9
 800c664:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c666:	f04f 33ff 	mov.w	r3, #4294967295
 800c66a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	025b      	lsls	r3, r3, #9
 800c670:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c672:	2390      	movs	r3, #144	; 0x90
 800c674:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c676:	2302      	movs	r3, #2
 800c678:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c67a:	2300      	movs	r3, #0
 800c67c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c67e:	2300      	movs	r3, #0
 800c680:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f107 0210 	add.w	r2, r7, #16
 800c68a:	4611      	mov	r1, r2
 800c68c:	4618      	mov	r0, r3
 800c68e:	f003 fdff 	bl	8010290 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	68da      	ldr	r2, [r3, #12]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6a0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	68ba      	ldr	r2, [r7, #8]
 800c6a8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d90a      	bls.n	800c6ce <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2282      	movs	r2, #130	; 0x82
 800c6bc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f003 fe55 	bl	8010374 <SDMMC_CmdReadMultiBlock>
 800c6ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c6cc:	e009      	b.n	800c6e2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2281      	movs	r2, #129	; 0x81
 800c6d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f003 fe27 	bl	801032e <SDMMC_CmdReadSingleBlock>
 800c6e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d012      	beq.n	800c70e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a0f      	ldr	r2, [pc, #60]	; (800c72c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c6ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f6:	431a      	orrs	r2, r3
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2201      	movs	r2, #1
 800c700:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2200      	movs	r2, #0
 800c708:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	e00a      	b.n	800c724 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c71c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	e000      	b.n	800c724 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c722:	2302      	movs	r3, #2
  }
}
 800c724:	4618      	mov	r0, r3
 800c726:	3730      	adds	r7, #48	; 0x30
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	1fe00fff 	.word	0x1fe00fff

0800c730 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b08c      	sub	sp, #48	; 0x30
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
 800c73c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d107      	bne.n	800c758 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c74c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c754:	2301      	movs	r3, #1
 800c756:	e08d      	b.n	800c874 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	2b01      	cmp	r3, #1
 800c762:	f040 8086 	bne.w	800c872 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2200      	movs	r2, #0
 800c76a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c76c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	441a      	add	r2, r3
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c776:	429a      	cmp	r2, r3
 800c778:	d907      	bls.n	800c78a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c77e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c786:	2301      	movs	r3, #1
 800c788:	e074      	b.n	800c874 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2203      	movs	r2, #3
 800c78e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2200      	movs	r2, #0
 800c798:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	025a      	lsls	r2, r3, #9
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d002      	beq.n	800c7b6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b2:	025b      	lsls	r3, r3, #9
 800c7b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ba:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	025b      	lsls	r3, r3, #9
 800c7c0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c7c2:	2390      	movs	r3, #144	; 0x90
 800c7c4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f107 0210 	add.w	r2, r7, #16
 800c7da:	4611      	mov	r1, r2
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f003 fd57 	bl	8010290 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	68da      	ldr	r2, [r3, #12]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7f0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2201      	movs	r2, #1
 800c800:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	2b01      	cmp	r3, #1
 800c806:	d90a      	bls.n	800c81e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	22a0      	movs	r2, #160	; 0xa0
 800c80c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c814:	4618      	mov	r0, r3
 800c816:	f003 fdf3 	bl	8010400 <SDMMC_CmdWriteMultiBlock>
 800c81a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c81c:	e009      	b.n	800c832 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2290      	movs	r2, #144	; 0x90
 800c822:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c82a:	4618      	mov	r0, r3
 800c82c:	f003 fdc5 	bl	80103ba <SDMMC_CmdWriteSingleBlock>
 800c830:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c834:	2b00      	cmp	r3, #0
 800c836:	d012      	beq.n	800c85e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a0f      	ldr	r2, [pc, #60]	; (800c87c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c83e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c846:	431a      	orrs	r2, r3
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2201      	movs	r2, #1
 800c850:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2200      	movs	r2, #0
 800c858:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800c85a:	2301      	movs	r3, #1
 800c85c:	e00a      	b.n	800c874 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800c86c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c86e:	2300      	movs	r3, #0
 800c870:	e000      	b.n	800c874 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c872:	2302      	movs	r3, #2
  }
}
 800c874:	4618      	mov	r0, r3
 800c876:	3730      	adds	r7, #48	; 0x30
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	1fe00fff 	.word	0x1fe00fff

0800c880 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d008      	beq.n	800c8ae <HAL_SD_IRQHandler+0x2e>
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f003 0308 	and.w	r3, r3, #8
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d003      	beq.n	800c8ae <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f001 f926 	bl	800daf8 <SD_Read_IT>
 800c8ac:	e19a      	b.n	800cbe4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f000 80ac 	beq.w	800ca16 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8c6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	4b59      	ldr	r3, [pc, #356]	; (800ca38 <HAL_SD_IRQHandler+0x1b8>)
 800c8d4:	400b      	ands	r3, r1
 800c8d6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c8e6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68da      	ldr	r2, [r3, #12]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8f6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f003 0308 	and.w	r3, r3, #8
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d038      	beq.n	800c974 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f003 0302 	and.w	r3, r3, #2
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d104      	bne.n	800c916 <HAL_SD_IRQHandler+0x96>
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f003 0320 	and.w	r3, r3, #32
 800c912:	2b00      	cmp	r3, #0
 800c914:	d011      	beq.n	800c93a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f003 fd94 	bl	8010448 <SDMMC_CmdStopTransfer>
 800c920:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d008      	beq.n	800c93a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	431a      	orrs	r2, r3
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f000 f95b 	bl	800cbf0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a3f      	ldr	r2, [pc, #252]	; (800ca3c <HAL_SD_IRQHandler+0x1bc>)
 800c940:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2201      	movs	r2, #1
 800c946:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2200      	movs	r2, #0
 800c94e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f003 0301 	and.w	r3, r3, #1
 800c956:	2b00      	cmp	r3, #0
 800c958:	d104      	bne.n	800c964 <HAL_SD_IRQHandler+0xe4>
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f003 0302 	and.w	r3, r3, #2
 800c960:	2b00      	cmp	r3, #0
 800c962:	d003      	beq.n	800c96c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f005 fd9d 	bl	80124a4 <HAL_SD_RxCpltCallback>
 800c96a:	e13b      	b.n	800cbe4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f005 fd8f 	bl	8012490 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c972:	e137      	b.n	800cbe4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	f000 8132 	beq.w	800cbe4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2200      	movs	r2, #0
 800c986:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	2200      	movs	r2, #0
 800c98e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2200      	movs	r2, #0
 800c996:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f003 0302 	and.w	r3, r3, #2
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d104      	bne.n	800c9ac <HAL_SD_IRQHandler+0x12c>
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f003 0320 	and.w	r3, r3, #32
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d011      	beq.n	800c9d0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f003 fd49 	bl	8010448 <SDMMC_CmdStopTransfer>
 800c9b6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d008      	beq.n	800c9d0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	431a      	orrs	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 f910 	bl	800cbf0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f003 0310 	and.w	r3, r3, #16
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d104      	bne.n	800c9f2 <HAL_SD_IRQHandler+0x172>
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f003 0320 	and.w	r3, r3, #32
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d002      	beq.n	800c9f8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f005 fd4c 	bl	8012490 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f003 0301 	and.w	r3, r3, #1
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d105      	bne.n	800ca0e <HAL_SD_IRQHandler+0x18e>
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f003 0302 	and.w	r3, r3, #2
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f000 80eb 	beq.w	800cbe4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f005 fd48 	bl	80124a4 <HAL_SD_RxCpltCallback>
}
 800ca14:	e0e6      	b.n	800cbe4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d00d      	beq.n	800ca40 <HAL_SD_IRQHandler+0x1c0>
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f003 0308 	and.w	r3, r3, #8
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d008      	beq.n	800ca40 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f001 f8a8 	bl	800db84 <SD_Write_IT>
 800ca34:	e0d6      	b.n	800cbe4 <HAL_SD_IRQHandler+0x364>
 800ca36:	bf00      	nop
 800ca38:	ffff3ec5 	.word	0xffff3ec5
 800ca3c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca46:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	f000 809d 	beq.w	800cb8a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca56:	f003 0302 	and.w	r3, r3, #2
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d005      	beq.n	800ca6a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca62:	f043 0202 	orr.w	r2, r3, #2
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca70:	f003 0308 	and.w	r3, r3, #8
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d005      	beq.n	800ca84 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca7c:	f043 0208 	orr.w	r2, r3, #8
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca8a:	f003 0320 	and.w	r3, r3, #32
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d005      	beq.n	800ca9e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca96:	f043 0220 	orr.w	r2, r3, #32
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caa4:	f003 0310 	and.w	r3, r3, #16
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d005      	beq.n	800cab8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cab0:	f043 0210 	orr.w	r2, r3, #16
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a4b      	ldr	r2, [pc, #300]	; (800cbec <HAL_SD_IRQHandler+0x36c>)
 800cabe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cace:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	68da      	ldr	r2, [r3, #12]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cade:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800caee:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	68da      	ldr	r2, [r3, #12]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cafe:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f003 fc9f 	bl	8010448 <SDMMC_CmdStopTransfer>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb10:	431a      	orrs	r2, r3
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	68da      	ldr	r2, [r3, #12]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cb24:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb2e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f003 0308 	and.w	r3, r3, #8
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00a      	beq.n	800cb50 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 f851 	bl	800cbf0 <HAL_SD_ErrorCallback>
}
 800cb4e:	e049      	b.n	800cbe4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d044      	beq.n	800cbe4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d040      	beq.n	800cbe4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cb70:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2200      	movs	r2, #0
 800cb78:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 f834 	bl	800cbf0 <HAL_SD_ErrorCallback>
}
 800cb88:	e02c      	b.n	800cbe4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d025      	beq.n	800cbe4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cba0:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cba8:	f003 0304 	and.w	r3, r3, #4
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d10c      	bne.n	800cbca <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f003 0320 	and.w	r3, r3, #32
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d003      	beq.n	800cbc2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f001 f84a 	bl	800dc54 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800cbc0:	e010      	b.n	800cbe4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f001 f832 	bl	800dc2c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800cbc8:	e00c      	b.n	800cbe4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f003 0320 	and.w	r3, r3, #32
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d003      	beq.n	800cbdc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f001 f833 	bl	800dc40 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800cbda:	e003      	b.n	800cbe4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f001 f81b 	bl	800dc18 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800cbe2:	e7ff      	b.n	800cbe4 <HAL_SD_IRQHandler+0x364>
 800cbe4:	bf00      	nop
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	18000f3a 	.word	0x18000f3a

0800cbf0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cbf8:	bf00      	nop
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc12:	0f9b      	lsrs	r3, r3, #30
 800cc14:	b2da      	uxtb	r2, r3
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc1e:	0e9b      	lsrs	r3, r3, #26
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	f003 030f 	and.w	r3, r3, #15
 800cc26:	b2da      	uxtb	r2, r3
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc30:	0e1b      	lsrs	r3, r3, #24
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	f003 0303 	and.w	r3, r3, #3
 800cc38:	b2da      	uxtb	r2, r3
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc42:	0c1b      	lsrs	r3, r3, #16
 800cc44:	b2da      	uxtb	r2, r3
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc4e:	0a1b      	lsrs	r3, r3, #8
 800cc50:	b2da      	uxtb	r2, r3
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc5a:	b2da      	uxtb	r2, r3
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc64:	0d1b      	lsrs	r3, r3, #20
 800cc66:	b29a      	uxth	r2, r3
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc70:	0c1b      	lsrs	r3, r3, #16
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	f003 030f 	and.w	r3, r3, #15
 800cc78:	b2da      	uxtb	r2, r3
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc82:	0bdb      	lsrs	r3, r3, #15
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	f003 0301 	and.w	r3, r3, #1
 800cc8a:	b2da      	uxtb	r2, r3
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc94:	0b9b      	lsrs	r3, r3, #14
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	f003 0301 	and.w	r3, r3, #1
 800cc9c:	b2da      	uxtb	r2, r3
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cca6:	0b5b      	lsrs	r3, r3, #13
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	f003 0301 	and.w	r3, r3, #1
 800ccae:	b2da      	uxtb	r2, r3
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccb8:	0b1b      	lsrs	r3, r3, #12
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	f003 0301 	and.w	r3, r3, #1
 800ccc0:	b2da      	uxtb	r2, r3
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d163      	bne.n	800cd9c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccd8:	009a      	lsls	r2, r3, #2
 800ccda:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ccde:	4013      	ands	r3, r2
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800cce4:	0f92      	lsrs	r2, r2, #30
 800cce6:	431a      	orrs	r2, r3
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccf0:	0edb      	lsrs	r3, r3, #27
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	f003 0307 	and.w	r3, r3, #7
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd02:	0e1b      	lsrs	r3, r3, #24
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	f003 0307 	and.w	r3, r3, #7
 800cd0a:	b2da      	uxtb	r2, r3
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd14:	0d5b      	lsrs	r3, r3, #21
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	f003 0307 	and.w	r3, r3, #7
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd26:	0c9b      	lsrs	r3, r3, #18
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	f003 0307 	and.w	r3, r3, #7
 800cd2e:	b2da      	uxtb	r2, r3
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd38:	0bdb      	lsrs	r3, r3, #15
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	f003 0307 	and.w	r3, r3, #7
 800cd40:	b2da      	uxtb	r2, r3
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	691b      	ldr	r3, [r3, #16]
 800cd4a:	1c5a      	adds	r2, r3, #1
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	7e1b      	ldrb	r3, [r3, #24]
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	f003 0307 	and.w	r3, r3, #7
 800cd5a:	3302      	adds	r3, #2
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cd66:	fb03 f202 	mul.w	r2, r3, r2
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	7a1b      	ldrb	r3, [r3, #8]
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	f003 030f 	and.w	r3, r3, #15
 800cd78:	2201      	movs	r2, #1
 800cd7a:	409a      	lsls	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800cd88:	0a52      	lsrs	r2, r2, #9
 800cd8a:	fb03 f202 	mul.w	r2, r3, r2
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd98:	655a      	str	r2, [r3, #84]	; 0x54
 800cd9a:	e031      	b.n	800ce00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d11d      	bne.n	800cde0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cda8:	041b      	lsls	r3, r3, #16
 800cdaa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdb2:	0c1b      	lsrs	r3, r3, #16
 800cdb4:	431a      	orrs	r2, r3
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	029a      	lsls	r2, r3, #10
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cdd4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	655a      	str	r2, [r3, #84]	; 0x54
 800cdde:	e00f      	b.n	800ce00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a58      	ldr	r2, [pc, #352]	; (800cf48 <HAL_SD_GetCardCSD+0x344>)
 800cde6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e09d      	b.n	800cf3c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce04:	0b9b      	lsrs	r3, r3, #14
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	f003 0301 	and.w	r3, r3, #1
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce16:	09db      	lsrs	r3, r3, #7
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce1e:	b2da      	uxtb	r2, r3
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce2e:	b2da      	uxtb	r2, r3
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce38:	0fdb      	lsrs	r3, r3, #31
 800ce3a:	b2da      	uxtb	r2, r3
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce44:	0f5b      	lsrs	r3, r3, #29
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	f003 0303 	and.w	r3, r3, #3
 800ce4c:	b2da      	uxtb	r2, r3
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce56:	0e9b      	lsrs	r3, r3, #26
 800ce58:	b2db      	uxtb	r3, r3
 800ce5a:	f003 0307 	and.w	r3, r3, #7
 800ce5e:	b2da      	uxtb	r2, r3
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce68:	0d9b      	lsrs	r3, r3, #22
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	f003 030f 	and.w	r3, r3, #15
 800ce70:	b2da      	uxtb	r2, r3
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce7a:	0d5b      	lsrs	r3, r3, #21
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	f003 0301 	and.w	r3, r3, #1
 800ce82:	b2da      	uxtb	r2, r3
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce96:	0c1b      	lsrs	r3, r3, #16
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	f003 0301 	and.w	r3, r3, #1
 800ce9e:	b2da      	uxtb	r2, r3
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ceaa:	0bdb      	lsrs	r3, r3, #15
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	f003 0301 	and.w	r3, r3, #1
 800ceb2:	b2da      	uxtb	r2, r3
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cebe:	0b9b      	lsrs	r3, r3, #14
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	f003 0301 	and.w	r3, r3, #1
 800cec6:	b2da      	uxtb	r2, r3
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ced2:	0b5b      	lsrs	r3, r3, #13
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	f003 0301 	and.w	r3, r3, #1
 800ceda:	b2da      	uxtb	r2, r3
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cee6:	0b1b      	lsrs	r3, r3, #12
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	f003 0301 	and.w	r3, r3, #1
 800ceee:	b2da      	uxtb	r2, r3
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cefa:	0a9b      	lsrs	r3, r3, #10
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	f003 0303 	and.w	r3, r3, #3
 800cf02:	b2da      	uxtb	r2, r3
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf0e:	0a1b      	lsrs	r3, r3, #8
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	f003 0303 	and.w	r3, r3, #3
 800cf16:	b2da      	uxtb	r2, r3
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf22:	085b      	lsrs	r3, r3, #1
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	2201      	movs	r2, #1
 800cf36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	370c      	adds	r7, #12
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr
 800cf48:	1fe00fff 	.word	0x1fe00fff

0800cf4c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b094      	sub	sp, #80	; 0x50
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cf56:	2300      	movs	r3, #0
 800cf58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	2b03      	cmp	r3, #3
 800cf66:	d101      	bne.n	800cf6c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	e0a7      	b.n	800d0bc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800cf6c:	f107 0308 	add.w	r3, r7, #8
 800cf70:	4619      	mov	r1, r3
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 fb62 	bl	800d63c <SD_SendSDStatus>
 800cf78:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d011      	beq.n	800cfa4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a4f      	ldr	r2, [pc, #316]	; (800d0c4 <HAL_SD_GetCardStatus+0x178>)
 800cf86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf8e:	431a      	orrs	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2201      	movs	r2, #1
 800cf98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cfa2:	e070      	b.n	800d086 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	099b      	lsrs	r3, r3, #6
 800cfa8:	b2db      	uxtb	r3, r3
 800cfaa:	f003 0303 	and.w	r3, r3, #3
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	095b      	lsrs	r3, r3, #5
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	f003 0301 	and.w	r3, r3, #1
 800cfbe:	b2da      	uxtb	r2, r3
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	0a1b      	lsrs	r3, r3, #8
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	0e1b      	lsrs	r3, r3, #24
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	b29a      	uxth	r2, r3
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	061a      	lsls	r2, r3, #24
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	021b      	lsls	r3, r3, #8
 800cfe6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cfea:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	0a1b      	lsrs	r3, r3, #8
 800cff0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cff4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	0e1b      	lsrs	r3, r3, #24
 800cffa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	b2da      	uxtb	r2, r3
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	0a1b      	lsrs	r3, r3, #8
 800d00c:	b2da      	uxtb	r2, r3
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	0d1b      	lsrs	r3, r3, #20
 800d016:	b2db      	uxtb	r3, r3
 800d018:	f003 030f 	and.w	r3, r3, #15
 800d01c:	b2da      	uxtb	r2, r3
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	0c1b      	lsrs	r3, r3, #16
 800d026:	b29b      	uxth	r3, r3
 800d028:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d02c:	b29a      	uxth	r2, r3
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	b29b      	uxth	r3, r3
 800d032:	b2db      	uxtb	r3, r3
 800d034:	b29b      	uxth	r3, r3
 800d036:	4313      	orrs	r3, r2
 800d038:	b29a      	uxth	r2, r3
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	0a9b      	lsrs	r3, r3, #10
 800d042:	b2db      	uxtb	r3, r3
 800d044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d048:	b2da      	uxtb	r2, r3
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	0a1b      	lsrs	r3, r3, #8
 800d052:	b2db      	uxtb	r3, r3
 800d054:	f003 0303 	and.w	r3, r3, #3
 800d058:	b2da      	uxtb	r2, r3
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	091b      	lsrs	r3, r3, #4
 800d062:	b2db      	uxtb	r3, r3
 800d064:	f003 030f 	and.w	r3, r3, #15
 800d068:	b2da      	uxtb	r2, r3
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	b2db      	uxtb	r3, r3
 800d072:	f003 030f 	and.w	r3, r3, #15
 800d076:	b2da      	uxtb	r2, r3
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	0e1b      	lsrs	r3, r3, #24
 800d080:	b2da      	uxtb	r2, r3
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d08e:	4618      	mov	r0, r3
 800d090:	f003 f92a 	bl	80102e8 <SDMMC_CmdBlockLength>
 800d094:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00d      	beq.n	800d0b8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a08      	ldr	r2, [pc, #32]	; (800d0c4 <HAL_SD_GetCardStatus+0x178>)
 800d0a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0a8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800d0b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3750      	adds	r7, #80	; 0x50
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	1fe00fff 	.word	0x1fe00fff

0800d0c8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b083      	sub	sp, #12
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d112:	2300      	movs	r3, #0
}
 800d114:	4618      	mov	r0, r3
 800d116:	370c      	adds	r7, #12
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d120:	b590      	push	{r4, r7, lr}
 800d122:	b08d      	sub	sp, #52	; 0x34
 800d124:	af02      	add	r7, sp, #8
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d12a:	2300      	movs	r3, #0
 800d12c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2203      	movs	r2, #3
 800d134:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13c:	2b03      	cmp	r3, #3
 800d13e:	d02e      	beq.n	800d19e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d146:	d106      	bne.n	800d156 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d14c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	635a      	str	r2, [r3, #52]	; 0x34
 800d154:	e029      	b.n	800d1aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d15c:	d10a      	bne.n	800d174 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 fb64 	bl	800d82c <SD_WideBus_Enable>
 800d164:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d16a:	6a3b      	ldr	r3, [r7, #32]
 800d16c:	431a      	orrs	r2, r3
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	635a      	str	r2, [r3, #52]	; 0x34
 800d172:	e01a      	b.n	800d1aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d10a      	bne.n	800d190 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 fba1 	bl	800d8c2 <SD_WideBus_Disable>
 800d180:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	431a      	orrs	r2, r3
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	635a      	str	r2, [r3, #52]	; 0x34
 800d18e:	e00c      	b.n	800d1aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d194:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	635a      	str	r2, [r3, #52]	; 0x34
 800d19c:	e005      	b.n	800d1aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1a2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d007      	beq.n	800d1c2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a5f      	ldr	r2, [pc, #380]	; (800d334 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d1b8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1c0:	e096      	b.n	800d2f0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d1c2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d1c6:	f04f 0100 	mov.w	r1, #0
 800d1ca:	f7fd fea3 	bl	800af14 <HAL_RCCEx_GetPeriphCLKFreq>
 800d1ce:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f000 8083 	beq.w	800d2de <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	691b      	ldr	r3, [r3, #16]
 800d1ec:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	695a      	ldr	r2, [r3, #20]
 800d1f2:	69fb      	ldr	r3, [r7, #28]
 800d1f4:	4950      	ldr	r1, [pc, #320]	; (800d338 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d1f6:	fba1 1303 	umull	r1, r3, r1, r3
 800d1fa:	0e1b      	lsrs	r3, r3, #24
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d303      	bcc.n	800d208 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	695b      	ldr	r3, [r3, #20]
 800d204:	61bb      	str	r3, [r7, #24]
 800d206:	e05a      	b.n	800d2be <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d20c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d210:	d103      	bne.n	800d21a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	695b      	ldr	r3, [r3, #20]
 800d216:	61bb      	str	r3, [r7, #24]
 800d218:	e051      	b.n	800d2be <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d21e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d222:	d126      	bne.n	800d272 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	695b      	ldr	r3, [r3, #20]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d10e      	bne.n	800d24a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	4a43      	ldr	r2, [pc, #268]	; (800d33c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d906      	bls.n	800d242 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	4a40      	ldr	r2, [pc, #256]	; (800d338 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d238:	fba2 2303 	umull	r2, r3, r2, r3
 800d23c:	0e5b      	lsrs	r3, r3, #25
 800d23e:	61bb      	str	r3, [r7, #24]
 800d240:	e03d      	b.n	800d2be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	695b      	ldr	r3, [r3, #20]
 800d246:	61bb      	str	r3, [r7, #24]
 800d248:	e039      	b.n	800d2be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	695b      	ldr	r3, [r3, #20]
 800d24e:	005b      	lsls	r3, r3, #1
 800d250:	69fa      	ldr	r2, [r7, #28]
 800d252:	fbb2 f3f3 	udiv	r3, r2, r3
 800d256:	4a39      	ldr	r2, [pc, #228]	; (800d33c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d906      	bls.n	800d26a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d25c:	69fb      	ldr	r3, [r7, #28]
 800d25e:	4a36      	ldr	r2, [pc, #216]	; (800d338 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d260:	fba2 2303 	umull	r2, r3, r2, r3
 800d264:	0e5b      	lsrs	r3, r3, #25
 800d266:	61bb      	str	r3, [r7, #24]
 800d268:	e029      	b.n	800d2be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	695b      	ldr	r3, [r3, #20]
 800d26e:	61bb      	str	r3, [r7, #24]
 800d270:	e025      	b.n	800d2be <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	695b      	ldr	r3, [r3, #20]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d10e      	bne.n	800d298 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	4a30      	ldr	r2, [pc, #192]	; (800d340 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d906      	bls.n	800d290 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d282:	69fb      	ldr	r3, [r7, #28]
 800d284:	4a2c      	ldr	r2, [pc, #176]	; (800d338 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d286:	fba2 2303 	umull	r2, r3, r2, r3
 800d28a:	0e1b      	lsrs	r3, r3, #24
 800d28c:	61bb      	str	r3, [r7, #24]
 800d28e:	e016      	b.n	800d2be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	695b      	ldr	r3, [r3, #20]
 800d294:	61bb      	str	r3, [r7, #24]
 800d296:	e012      	b.n	800d2be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	695b      	ldr	r3, [r3, #20]
 800d29c:	005b      	lsls	r3, r3, #1
 800d29e:	69fa      	ldr	r2, [r7, #28]
 800d2a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2a4:	4a26      	ldr	r2, [pc, #152]	; (800d340 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d906      	bls.n	800d2b8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d2aa:	69fb      	ldr	r3, [r7, #28]
 800d2ac:	4a22      	ldr	r2, [pc, #136]	; (800d338 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800d2b2:	0e1b      	lsrs	r3, r3, #24
 800d2b4:	61bb      	str	r3, [r7, #24]
 800d2b6:	e002      	b.n	800d2be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	695b      	ldr	r3, [r3, #20]
 800d2bc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681c      	ldr	r4, [r3, #0]
 800d2c2:	466a      	mov	r2, sp
 800d2c4:	f107 0314 	add.w	r3, r7, #20
 800d2c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d2cc:	e882 0003 	stmia.w	r2, {r0, r1}
 800d2d0:	f107 0308 	add.w	r3, r7, #8
 800d2d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f002 ff28 	bl	801012c <SDMMC_Init>
 800d2dc:	e008      	b.n	800d2f0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f002 fff5 	bl	80102e8 <SDMMC_CmdBlockLength>
 800d2fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d300:	6a3b      	ldr	r3, [r7, #32]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00c      	beq.n	800d320 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a0a      	ldr	r2, [pc, #40]	; (800d334 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d30c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d312:	6a3b      	ldr	r3, [r7, #32]
 800d314:	431a      	orrs	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d31a:	2301      	movs	r3, #1
 800d31c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2201      	movs	r2, #1
 800d324:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800d328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	372c      	adds	r7, #44	; 0x2c
 800d330:	46bd      	mov	sp, r7
 800d332:	bd90      	pop	{r4, r7, pc}
 800d334:	1fe00fff 	.word	0x1fe00fff
 800d338:	55e63b89 	.word	0x55e63b89
 800d33c:	02faf080 	.word	0x02faf080
 800d340:	017d7840 	.word	0x017d7840

0800d344 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b086      	sub	sp, #24
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d34c:	2300      	movs	r3, #0
 800d34e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d350:	f107 030c 	add.w	r3, r7, #12
 800d354:	4619      	mov	r1, r3
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 fa40 	bl	800d7dc <SD_SendStatus>
 800d35c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d005      	beq.n	800d370 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	431a      	orrs	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	0a5b      	lsrs	r3, r3, #9
 800d374:	f003 030f 	and.w	r3, r3, #15
 800d378:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d37a:	693b      	ldr	r3, [r7, #16]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3718      	adds	r7, #24
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b090      	sub	sp, #64	; 0x40
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d38c:	2300      	movs	r3, #0
 800d38e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d390:	f7f5 fd14 	bl	8002dbc <HAL_GetTick>
 800d394:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4618      	mov	r0, r3
 800d39c:	f002 ff1f 	bl	80101de <SDMMC_GetPowerState>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d102      	bne.n	800d3ac <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d3a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d3aa:	e0b5      	b.n	800d518 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b0:	2b03      	cmp	r3, #3
 800d3b2:	d02e      	beq.n	800d412 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f003 f96a 	bl	8010692 <SDMMC_CmdSendCID>
 800d3be:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d001      	beq.n	800d3ca <SD_InitCard+0x46>
    {
      return errorstate;
 800d3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c8:	e0a6      	b.n	800d518 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2100      	movs	r1, #0
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f002 ff4a 	bl	801026a <SDMMC_GetResponse>
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2104      	movs	r1, #4
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f002 ff41 	bl	801026a <SDMMC_GetResponse>
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	2108      	movs	r1, #8
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f002 ff38 	bl	801026a <SDMMC_GetResponse>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	210c      	movs	r1, #12
 800d406:	4618      	mov	r0, r3
 800d408:	f002 ff2f 	bl	801026a <SDMMC_GetResponse>
 800d40c:	4602      	mov	r2, r0
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d416:	2b03      	cmp	r3, #3
 800d418:	d01d      	beq.n	800d456 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d41a:	e019      	b.n	800d450 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f107 020a 	add.w	r2, r7, #10
 800d424:	4611      	mov	r1, r2
 800d426:	4618      	mov	r0, r3
 800d428:	f003 f972 	bl	8010710 <SDMMC_CmdSetRelAdd>
 800d42c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d430:	2b00      	cmp	r3, #0
 800d432:	d001      	beq.n	800d438 <SD_InitCard+0xb4>
      {
        return errorstate;
 800d434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d436:	e06f      	b.n	800d518 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d438:	f7f5 fcc0 	bl	8002dbc <HAL_GetTick>
 800d43c:	4602      	mov	r2, r0
 800d43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d440:	1ad3      	subs	r3, r2, r3
 800d442:	f241 3287 	movw	r2, #4999	; 0x1387
 800d446:	4293      	cmp	r3, r2
 800d448:	d902      	bls.n	800d450 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d44a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d44e:	e063      	b.n	800d518 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d450:	897b      	ldrh	r3, [r7, #10]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d0e2      	beq.n	800d41c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d45a:	2b03      	cmp	r3, #3
 800d45c:	d036      	beq.n	800d4cc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d45e:	897b      	ldrh	r3, [r7, #10]
 800d460:	461a      	mov	r2, r3
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d46e:	041b      	lsls	r3, r3, #16
 800d470:	4619      	mov	r1, r3
 800d472:	4610      	mov	r0, r2
 800d474:	f003 f92c 	bl	80106d0 <SDMMC_CmdSendCSD>
 800d478:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d001      	beq.n	800d484 <SD_InitCard+0x100>
    {
      return errorstate;
 800d480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d482:	e049      	b.n	800d518 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2100      	movs	r1, #0
 800d48a:	4618      	mov	r0, r3
 800d48c:	f002 feed 	bl	801026a <SDMMC_GetResponse>
 800d490:	4602      	mov	r2, r0
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2104      	movs	r1, #4
 800d49c:	4618      	mov	r0, r3
 800d49e:	f002 fee4 	bl	801026a <SDMMC_GetResponse>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2108      	movs	r1, #8
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f002 fedb 	bl	801026a <SDMMC_GetResponse>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	210c      	movs	r1, #12
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f002 fed2 	bl	801026a <SDMMC_GetResponse>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2104      	movs	r1, #4
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f002 fec9 	bl	801026a <SDMMC_GetResponse>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	0d1a      	lsrs	r2, r3, #20
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d4e0:	f107 030c 	add.w	r3, r7, #12
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f7ff fb8c 	bl	800cc04 <HAL_SD_GetCardCSD>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d002      	beq.n	800d4f8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d4f6:	e00f      	b.n	800d518 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d500:	041b      	lsls	r3, r3, #16
 800d502:	4619      	mov	r1, r3
 800d504:	4610      	mov	r0, r2
 800d506:	f002 ffdb 	bl	80104c0 <SDMMC_CmdSelDesel>
 800d50a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d001      	beq.n	800d516 <SD_InitCard+0x192>
  {
    return errorstate;
 800d512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d514:	e000      	b.n	800d518 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d516:	2300      	movs	r3, #0
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3740      	adds	r7, #64	; 0x40
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b086      	sub	sp, #24
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d528:	2300      	movs	r3, #0
 800d52a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d52c:	2300      	movs	r3, #0
 800d52e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d530:	2300      	movs	r3, #0
 800d532:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4618      	mov	r0, r3
 800d53a:	f002 ffe4 	bl	8010506 <SDMMC_CmdGoIdleState>
 800d53e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d001      	beq.n	800d54a <SD_PowerON+0x2a>
  {
    return errorstate;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	e072      	b.n	800d630 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4618      	mov	r0, r3
 800d550:	f002 fff7 	bl	8010542 <SDMMC_CmdOperCond>
 800d554:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d55c:	d10d      	bne.n	800d57a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4618      	mov	r0, r3
 800d56a:	f002 ffcc 	bl	8010506 <SDMMC_CmdGoIdleState>
 800d56e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d004      	beq.n	800d580 <SD_PowerON+0x60>
    {
      return errorstate;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	e05a      	b.n	800d630 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2201      	movs	r2, #1
 800d57e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d584:	2b01      	cmp	r3, #1
 800d586:	d137      	bne.n	800d5f8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2100      	movs	r1, #0
 800d58e:	4618      	mov	r0, r3
 800d590:	f002 fff7 	bl	8010582 <SDMMC_CmdAppCommand>
 800d594:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d02d      	beq.n	800d5f8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d59c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d5a0:	e046      	b.n	800d630 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f002 ffea 	bl	8010582 <SDMMC_CmdAppCommand>
 800d5ae:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d001      	beq.n	800d5ba <SD_PowerON+0x9a>
    {
      return errorstate;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	e03a      	b.n	800d630 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	491e      	ldr	r1, [pc, #120]	; (800d638 <SD_PowerON+0x118>)
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f003 f801 	bl	80105c8 <SDMMC_CmdAppOperCommand>
 800d5c6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d002      	beq.n	800d5d4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d5ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d5d2:	e02d      	b.n	800d630 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2100      	movs	r1, #0
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f002 fe45 	bl	801026a <SDMMC_GetResponse>
 800d5e0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	0fdb      	lsrs	r3, r3, #31
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d101      	bne.n	800d5ee <SD_PowerON+0xce>
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e000      	b.n	800d5f0 <SD_PowerON+0xd0>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	613b      	str	r3, [r7, #16]

    count++;
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d802      	bhi.n	800d608 <SD_PowerON+0xe8>
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d0cc      	beq.n	800d5a2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d60e:	4293      	cmp	r3, r2
 800d610:	d902      	bls.n	800d618 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d612:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d616:	e00b      	b.n	800d630 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2200      	movs	r2, #0
 800d61c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d624:	2b00      	cmp	r3, #0
 800d626:	d002      	beq.n	800d62e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2201      	movs	r2, #1
 800d62c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d62e:	2300      	movs	r3, #0
}
 800d630:	4618      	mov	r0, r3
 800d632:	3718      	adds	r7, #24
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	c1100000 	.word	0xc1100000

0800d63c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b08c      	sub	sp, #48	; 0x30
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d646:	f7f5 fbb9 	bl	8002dbc <HAL_GetTick>
 800d64a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	2100      	movs	r1, #0
 800d656:	4618      	mov	r0, r3
 800d658:	f002 fe07 	bl	801026a <SDMMC_GetResponse>
 800d65c:	4603      	mov	r3, r0
 800d65e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d666:	d102      	bne.n	800d66e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d668:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d66c:	e0b0      	b.n	800d7d0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	2140      	movs	r1, #64	; 0x40
 800d674:	4618      	mov	r0, r3
 800d676:	f002 fe37 	bl	80102e8 <SDMMC_CmdBlockLength>
 800d67a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d67c:	6a3b      	ldr	r3, [r7, #32]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d005      	beq.n	800d68e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d68a:	6a3b      	ldr	r3, [r7, #32]
 800d68c:	e0a0      	b.n	800d7d0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d696:	041b      	lsls	r3, r3, #16
 800d698:	4619      	mov	r1, r3
 800d69a:	4610      	mov	r0, r2
 800d69c:	f002 ff71 	bl	8010582 <SDMMC_CmdAppCommand>
 800d6a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6a2:	6a3b      	ldr	r3, [r7, #32]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d005      	beq.n	800d6b4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d6b0:	6a3b      	ldr	r3, [r7, #32]
 800d6b2:	e08d      	b.n	800d7d0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6b8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d6ba:	2340      	movs	r3, #64	; 0x40
 800d6bc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d6be:	2360      	movs	r3, #96	; 0x60
 800d6c0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d6c2:	2302      	movs	r3, #2
 800d6c4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f107 0208 	add.w	r2, r7, #8
 800d6d6:	4611      	mov	r1, r2
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f002 fdd9 	bl	8010290 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f003 f859 	bl	801079a <SDMMC_CmdStatusRegister>
 800d6e8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6ea:	6a3b      	ldr	r3, [r7, #32]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d02b      	beq.n	800d748 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d6f8:	6a3b      	ldr	r3, [r7, #32]
 800d6fa:	e069      	b.n	800d7d0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d706:	2b00      	cmp	r3, #0
 800d708:	d013      	beq.n	800d732 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d70a:	2300      	movs	r3, #0
 800d70c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d70e:	e00d      	b.n	800d72c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4618      	mov	r0, r3
 800d716:	f002 fd33 	bl	8010180 <SDMMC_ReadFIFO>
 800d71a:	4602      	mov	r2, r0
 800d71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71e:	601a      	str	r2, [r3, #0]
        pData++;
 800d720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d722:	3304      	adds	r3, #4
 800d724:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800d726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d728:	3301      	adds	r3, #1
 800d72a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72e:	2b07      	cmp	r3, #7
 800d730:	d9ee      	bls.n	800d710 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d732:	f7f5 fb43 	bl	8002dbc <HAL_GetTick>
 800d736:	4602      	mov	r2, r0
 800d738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73a:	1ad3      	subs	r3, r2, r3
 800d73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d740:	d102      	bne.n	800d748 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d742:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d746:	e043      	b.n	800d7d0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d74e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d752:	2b00      	cmp	r3, #0
 800d754:	d0d2      	beq.n	800d6fc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d75c:	f003 0308 	and.w	r3, r3, #8
 800d760:	2b00      	cmp	r3, #0
 800d762:	d001      	beq.n	800d768 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d764:	2308      	movs	r3, #8
 800d766:	e033      	b.n	800d7d0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d76e:	f003 0302 	and.w	r3, r3, #2
 800d772:	2b00      	cmp	r3, #0
 800d774:	d001      	beq.n	800d77a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d776:	2302      	movs	r3, #2
 800d778:	e02a      	b.n	800d7d0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d780:	f003 0320 	and.w	r3, r3, #32
 800d784:	2b00      	cmp	r3, #0
 800d786:	d017      	beq.n	800d7b8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d788:	2320      	movs	r3, #32
 800d78a:	e021      	b.n	800d7d0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4618      	mov	r0, r3
 800d792:	f002 fcf5 	bl	8010180 <SDMMC_ReadFIFO>
 800d796:	4602      	mov	r2, r0
 800d798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79a:	601a      	str	r2, [r3, #0]
    pData++;
 800d79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79e:	3304      	adds	r3, #4
 800d7a0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d7a2:	f7f5 fb0b 	bl	8002dbc <HAL_GetTick>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7aa:	1ad3      	subs	r3, r2, r3
 800d7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b0:	d102      	bne.n	800d7b8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d7b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d7b6:	e00b      	b.n	800d7d0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d1e2      	bne.n	800d78c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a03      	ldr	r2, [pc, #12]	; (800d7d8 <SD_SendSDStatus+0x19c>)
 800d7cc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800d7ce:	2300      	movs	r3, #0
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3730      	adds	r7, #48	; 0x30
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	18000f3a 	.word	0x18000f3a

0800d7dc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d102      	bne.n	800d7f2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d7ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d7f0:	e018      	b.n	800d824 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7fa:	041b      	lsls	r3, r3, #16
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	4610      	mov	r0, r2
 800d800:	f002 ffa8 	bl	8010754 <SDMMC_CmdSendStatus>
 800d804:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d001      	beq.n	800d810 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	e009      	b.n	800d824 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	2100      	movs	r1, #0
 800d816:	4618      	mov	r0, r3
 800d818:	f002 fd27 	bl	801026a <SDMMC_GetResponse>
 800d81c:	4602      	mov	r2, r0
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3710      	adds	r7, #16
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b086      	sub	sp, #24
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d834:	2300      	movs	r3, #0
 800d836:	60fb      	str	r3, [r7, #12]
 800d838:	2300      	movs	r3, #0
 800d83a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2100      	movs	r1, #0
 800d842:	4618      	mov	r0, r3
 800d844:	f002 fd11 	bl	801026a <SDMMC_GetResponse>
 800d848:	4603      	mov	r3, r0
 800d84a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d84e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d852:	d102      	bne.n	800d85a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d854:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d858:	e02f      	b.n	800d8ba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d85a:	f107 030c 	add.w	r3, r7, #12
 800d85e:	4619      	mov	r1, r3
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f000 f879 	bl	800d958 <SD_FindSCR>
 800d866:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d001      	beq.n	800d872 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	e023      	b.n	800d8ba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d01c      	beq.n	800d8b6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d884:	041b      	lsls	r3, r3, #16
 800d886:	4619      	mov	r1, r3
 800d888:	4610      	mov	r0, r2
 800d88a:	f002 fe7a 	bl	8010582 <SDMMC_CmdAppCommand>
 800d88e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d001      	beq.n	800d89a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	e00f      	b.n	800d8ba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2102      	movs	r1, #2
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f002 feb1 	bl	8010608 <SDMMC_CmdBusWidth>
 800d8a6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d001      	beq.n	800d8b2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	e003      	b.n	800d8ba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	e001      	b.n	800d8ba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d8b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3718      	adds	r7, #24
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}

0800d8c2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d8c2:	b580      	push	{r7, lr}
 800d8c4:	b086      	sub	sp, #24
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	60fb      	str	r3, [r7, #12]
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	2100      	movs	r1, #0
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f002 fcc6 	bl	801026a <SDMMC_GetResponse>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d8e8:	d102      	bne.n	800d8f0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d8ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d8ee:	e02f      	b.n	800d950 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d8f0:	f107 030c 	add.w	r3, r7, #12
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 f82e 	bl	800d958 <SD_FindSCR>
 800d8fc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d001      	beq.n	800d908 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	e023      	b.n	800d950 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d01c      	beq.n	800d94c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d91a:	041b      	lsls	r3, r3, #16
 800d91c:	4619      	mov	r1, r3
 800d91e:	4610      	mov	r0, r2
 800d920:	f002 fe2f 	bl	8010582 <SDMMC_CmdAppCommand>
 800d924:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d001      	beq.n	800d930 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	e00f      	b.n	800d950 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2100      	movs	r1, #0
 800d936:	4618      	mov	r0, r3
 800d938:	f002 fe66 	bl	8010608 <SDMMC_CmdBusWidth>
 800d93c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d001      	beq.n	800d948 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	e003      	b.n	800d950 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d948:	2300      	movs	r3, #0
 800d94a:	e001      	b.n	800d950 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d94c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d950:	4618      	mov	r0, r3
 800d952:	3718      	adds	r7, #24
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b08e      	sub	sp, #56	; 0x38
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d962:	f7f5 fa2b 	bl	8002dbc <HAL_GetTick>
 800d966:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d968:	2300      	movs	r3, #0
 800d96a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d96c:	2300      	movs	r3, #0
 800d96e:	60bb      	str	r3, [r7, #8]
 800d970:	2300      	movs	r3, #0
 800d972:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	2108      	movs	r1, #8
 800d97e:	4618      	mov	r0, r3
 800d980:	f002 fcb2 	bl	80102e8 <SDMMC_CmdBlockLength>
 800d984:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d001      	beq.n	800d990 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98e:	e0ad      	b.n	800daec <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d998:	041b      	lsls	r3, r3, #16
 800d99a:	4619      	mov	r1, r3
 800d99c:	4610      	mov	r0, r2
 800d99e:	f002 fdf0 	bl	8010582 <SDMMC_CmdAppCommand>
 800d9a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d001      	beq.n	800d9ae <SD_FindSCR+0x56>
  {
    return errorstate;
 800d9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ac:	e09e      	b.n	800daec <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d9b2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d9b4:	2308      	movs	r3, #8
 800d9b6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d9b8:	2330      	movs	r3, #48	; 0x30
 800d9ba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d9bc:	2302      	movs	r3, #2
 800d9be:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f107 0210 	add.w	r2, r7, #16
 800d9d0:	4611      	mov	r1, r2
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f002 fc5c 	bl	8010290 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f002 fe36 	bl	801064e <SDMMC_CmdSendSCR>
 800d9e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d027      	beq.n	800da3a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ec:	e07e      	b.n	800daec <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d113      	bne.n	800da24 <SD_FindSCR+0xcc>
 800d9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d110      	bne.n	800da24 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	4618      	mov	r0, r3
 800da08:	f002 fbba 	bl	8010180 <SDMMC_ReadFIFO>
 800da0c:	4603      	mov	r3, r0
 800da0e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4618      	mov	r0, r3
 800da16:	f002 fbb3 	bl	8010180 <SDMMC_ReadFIFO>
 800da1a:	4603      	mov	r3, r0
 800da1c:	60fb      	str	r3, [r7, #12]
      index++;
 800da1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da20:	3301      	adds	r3, #1
 800da22:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800da24:	f7f5 f9ca 	bl	8002dbc <HAL_GetTick>
 800da28:	4602      	mov	r2, r0
 800da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2c:	1ad3      	subs	r3, r2, r3
 800da2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da32:	d102      	bne.n	800da3a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800da34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da38:	e058      	b.n	800daec <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da40:	f240 532a 	movw	r3, #1322	; 0x52a
 800da44:	4013      	ands	r3, r2
 800da46:	2b00      	cmp	r3, #0
 800da48:	d0d1      	beq.n	800d9ee <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da50:	f003 0308 	and.w	r3, r3, #8
 800da54:	2b00      	cmp	r3, #0
 800da56:	d005      	beq.n	800da64 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2208      	movs	r2, #8
 800da5e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800da60:	2308      	movs	r3, #8
 800da62:	e043      	b.n	800daec <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da6a:	f003 0302 	and.w	r3, r3, #2
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d005      	beq.n	800da7e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	2202      	movs	r2, #2
 800da78:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800da7a:	2302      	movs	r3, #2
 800da7c:	e036      	b.n	800daec <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da84:	f003 0320 	and.w	r3, r3, #32
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d005      	beq.n	800da98 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2220      	movs	r2, #32
 800da92:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800da94:	2320      	movs	r3, #32
 800da96:	e029      	b.n	800daec <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a15      	ldr	r2, [pc, #84]	; (800daf4 <SD_FindSCR+0x19c>)
 800da9e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	061a      	lsls	r2, r3, #24
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	021b      	lsls	r3, r3, #8
 800daa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800daac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	0a1b      	lsrs	r3, r3, #8
 800dab2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dab6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	0e1b      	lsrs	r3, r3, #24
 800dabc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac0:	601a      	str	r2, [r3, #0]
    scr++;
 800dac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac4:	3304      	adds	r3, #4
 800dac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	061a      	lsls	r2, r3, #24
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	021b      	lsls	r3, r3, #8
 800dad0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dad4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	0a1b      	lsrs	r3, r3, #8
 800dada:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dade:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	0e1b      	lsrs	r3, r3, #24
 800dae4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800daea:	2300      	movs	r3, #0
}
 800daec:	4618      	mov	r0, r3
 800daee:	3738      	adds	r7, #56	; 0x38
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}
 800daf4:	18000f3a 	.word	0x18000f3a

0800daf8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b086      	sub	sp, #24
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db04:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db0a:	2b1f      	cmp	r3, #31
 800db0c:	d936      	bls.n	800db7c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800db0e:	2300      	movs	r3, #0
 800db10:	617b      	str	r3, [r7, #20]
 800db12:	e027      	b.n	800db64 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4618      	mov	r0, r3
 800db1a:	f002 fb31 	bl	8010180 <SDMMC_ReadFIFO>
 800db1e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	b2da      	uxtb	r2, r3
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	701a      	strb	r2, [r3, #0]
      tmp++;
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	3301      	adds	r3, #1
 800db2c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	0a1b      	lsrs	r3, r3, #8
 800db32:	b2da      	uxtb	r2, r3
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	701a      	strb	r2, [r3, #0]
      tmp++;
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	3301      	adds	r3, #1
 800db3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	0c1b      	lsrs	r3, r3, #16
 800db42:	b2da      	uxtb	r2, r3
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	701a      	strb	r2, [r3, #0]
      tmp++;
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	3301      	adds	r3, #1
 800db4c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	0e1b      	lsrs	r3, r3, #24
 800db52:	b2da      	uxtb	r2, r3
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	701a      	strb	r2, [r3, #0]
      tmp++;
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	3301      	adds	r3, #1
 800db5c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	3301      	adds	r3, #1
 800db62:	617b      	str	r3, [r7, #20]
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	2b07      	cmp	r3, #7
 800db68:	d9d4      	bls.n	800db14 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	693a      	ldr	r2, [r7, #16]
 800db6e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db74:	f1a3 0220 	sub.w	r2, r3, #32
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800db7c:	bf00      	nop
 800db7e:	3718      	adds	r7, #24
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b086      	sub	sp, #24
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	69db      	ldr	r3, [r3, #28]
 800db90:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6a1b      	ldr	r3, [r3, #32]
 800db96:	2b1f      	cmp	r3, #31
 800db98:	d93a      	bls.n	800dc10 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800db9a:	2300      	movs	r3, #0
 800db9c:	617b      	str	r3, [r7, #20]
 800db9e:	e02b      	b.n	800dbf8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	3301      	adds	r3, #1
 800dbaa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	021a      	lsls	r2, r3, #8
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	041a      	lsls	r2, r3, #16
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	061a      	lsls	r2, r3, #24
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f107 020c 	add.w	r2, r7, #12
 800dbea:	4611      	mov	r1, r2
 800dbec:	4618      	mov	r0, r3
 800dbee:	f002 fad4 	bl	801019a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	617b      	str	r3, [r7, #20]
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	2b07      	cmp	r3, #7
 800dbfc:	d9d0      	bls.n	800dba0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	693a      	ldr	r2, [r7, #16]
 800dc02:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6a1b      	ldr	r3, [r3, #32]
 800dc08:	f1a3 0220 	sub.w	r2, r3, #32
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	621a      	str	r2, [r3, #32]
  }
}
 800dc10:	bf00      	nop
 800dc12:	3718      	adds	r7, #24
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800dc20:	bf00      	nop
 800dc22:	370c      	adds	r7, #12
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800dc34:	bf00      	nop
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800dc48:	bf00      	nop
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800dc5c:	bf00      	nop
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d101      	bne.n	800dc7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dc76:	2301      	movs	r3, #1
 800dc78:	e10f      	b.n	800de9a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a87      	ldr	r2, [pc, #540]	; (800dea4 <HAL_SPI_Init+0x23c>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d00f      	beq.n	800dcaa <HAL_SPI_Init+0x42>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4a86      	ldr	r2, [pc, #536]	; (800dea8 <HAL_SPI_Init+0x240>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d00a      	beq.n	800dcaa <HAL_SPI_Init+0x42>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4a84      	ldr	r2, [pc, #528]	; (800deac <HAL_SPI_Init+0x244>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d005      	beq.n	800dcaa <HAL_SPI_Init+0x42>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	2b0f      	cmp	r3, #15
 800dca4:	d901      	bls.n	800dcaa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	e0f7      	b.n	800de9a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 f900 	bl	800deb0 <SPI_GetPacketSize>
 800dcb0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4a7b      	ldr	r2, [pc, #492]	; (800dea4 <HAL_SPI_Init+0x23c>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d00c      	beq.n	800dcd6 <HAL_SPI_Init+0x6e>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a79      	ldr	r2, [pc, #484]	; (800dea8 <HAL_SPI_Init+0x240>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d007      	beq.n	800dcd6 <HAL_SPI_Init+0x6e>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4a78      	ldr	r2, [pc, #480]	; (800deac <HAL_SPI_Init+0x244>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d002      	beq.n	800dcd6 <HAL_SPI_Init+0x6e>
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2b08      	cmp	r3, #8
 800dcd4:	d811      	bhi.n	800dcfa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dcda:	4a72      	ldr	r2, [pc, #456]	; (800dea4 <HAL_SPI_Init+0x23c>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d009      	beq.n	800dcf4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4a70      	ldr	r2, [pc, #448]	; (800dea8 <HAL_SPI_Init+0x240>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d004      	beq.n	800dcf4 <HAL_SPI_Init+0x8c>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4a6f      	ldr	r2, [pc, #444]	; (800deac <HAL_SPI_Init+0x244>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d104      	bne.n	800dcfe <HAL_SPI_Init+0x96>
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2b10      	cmp	r3, #16
 800dcf8:	d901      	bls.n	800dcfe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e0cd      	b.n	800de9a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d106      	bne.n	800dd18 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f7f4 f9c2 	bl	800209c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2202      	movs	r2, #2
 800dd1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f022 0201 	bic.w	r2, r2, #1
 800dd2e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	689b      	ldr	r3, [r3, #8]
 800dd36:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800dd3a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	699b      	ldr	r3, [r3, #24]
 800dd40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dd44:	d119      	bne.n	800dd7a <HAL_SPI_Init+0x112>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd4e:	d103      	bne.n	800dd58 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d008      	beq.n	800dd6a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d10c      	bne.n	800dd7a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dd64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd68:	d107      	bne.n	800dd7a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dd78:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d00f      	beq.n	800dda6 <HAL_SPI_Init+0x13e>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	2b06      	cmp	r3, #6
 800dd8c:	d90b      	bls.n	800dda6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	430a      	orrs	r2, r1
 800dda2:	601a      	str	r2, [r3, #0]
 800dda4:	e007      	b.n	800ddb6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ddb4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	69da      	ldr	r2, [r3, #28]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddbe:	431a      	orrs	r2, r3
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	431a      	orrs	r2, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddc8:	ea42 0103 	orr.w	r1, r2, r3
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	68da      	ldr	r2, [r3, #12]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	430a      	orrs	r2, r1
 800ddd6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde0:	431a      	orrs	r2, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dde6:	431a      	orrs	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	699b      	ldr	r3, [r3, #24]
 800ddec:	431a      	orrs	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	691b      	ldr	r3, [r3, #16]
 800ddf2:	431a      	orrs	r2, r3
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	695b      	ldr	r3, [r3, #20]
 800ddf8:	431a      	orrs	r2, r3
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6a1b      	ldr	r3, [r3, #32]
 800ddfe:	431a      	orrs	r2, r3
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	431a      	orrs	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de0a:	431a      	orrs	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	689b      	ldr	r3, [r3, #8]
 800de10:	431a      	orrs	r2, r3
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de16:	ea42 0103 	orr.w	r1, r2, r3
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	430a      	orrs	r2, r1
 800de24:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	685b      	ldr	r3, [r3, #4]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d113      	bne.n	800de56 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	689b      	ldr	r3, [r3, #8]
 800de34:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de40:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de54:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f022 0201 	bic.w	r2, r2, #1
 800de64:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d00a      	beq.n	800de88 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	68db      	ldr	r3, [r3, #12]
 800de78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	430a      	orrs	r2, r1
 800de86:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2200      	movs	r2, #0
 800de8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800de98:	2300      	movs	r3, #0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3710      	adds	r7, #16
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	bf00      	nop
 800dea4:	40013000 	.word	0x40013000
 800dea8:	40003800 	.word	0x40003800
 800deac:	40003c00 	.word	0x40003c00

0800deb0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b085      	sub	sp, #20
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800debc:	095b      	lsrs	r3, r3, #5
 800debe:	3301      	adds	r3, #1
 800dec0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	3301      	adds	r3, #1
 800dec8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	3307      	adds	r3, #7
 800dece:	08db      	lsrs	r3, r3, #3
 800ded0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	68fa      	ldr	r2, [r7, #12]
 800ded6:	fb02 f303 	mul.w	r3, r2, r3
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3714      	adds	r7, #20
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr

0800dee6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dee6:	b580      	push	{r7, lr}
 800dee8:	b082      	sub	sp, #8
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d101      	bne.n	800def8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800def4:	2301      	movs	r3, #1
 800def6:	e049      	b.n	800df8c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800defe:	b2db      	uxtb	r3, r3
 800df00:	2b00      	cmp	r3, #0
 800df02:	d106      	bne.n	800df12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2200      	movs	r2, #0
 800df08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f7f4 fb17 	bl	8002540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2202      	movs	r2, #2
 800df16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	3304      	adds	r3, #4
 800df22:	4619      	mov	r1, r3
 800df24:	4610      	mov	r0, r2
 800df26:	f000 faf1 	bl	800e50c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2201      	movs	r2, #1
 800df2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2201      	movs	r2, #1
 800df36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2201      	movs	r2, #1
 800df3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2201      	movs	r2, #1
 800df46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2201      	movs	r2, #1
 800df4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2201      	movs	r2, #1
 800df56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2201      	movs	r2, #1
 800df5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2201      	movs	r2, #1
 800df66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2201      	movs	r2, #1
 800df6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2201      	movs	r2, #1
 800df76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2201      	movs	r2, #1
 800df7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2201      	movs	r2, #1
 800df86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800df8a:	2300      	movs	r3, #0
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d101      	bne.n	800dfa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e049      	b.n	800e03a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d106      	bne.n	800dfc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f7f4 f92a 	bl	8002214 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2202      	movs	r2, #2
 800dfc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681a      	ldr	r2, [r3, #0]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	3304      	adds	r3, #4
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	4610      	mov	r0, r2
 800dfd4:	f000 fa9a 	bl	800e50c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2201      	movs	r2, #1
 800dfdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2201      	movs	r2, #1
 800dfe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2201      	movs	r2, #1
 800dfec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2201      	movs	r2, #1
 800dff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2201      	movs	r2, #1
 800dffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2201      	movs	r2, #1
 800e004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2201      	movs	r2, #1
 800e00c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2201      	movs	r2, #1
 800e014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2201      	movs	r2, #1
 800e01c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2201      	movs	r2, #1
 800e024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2201      	movs	r2, #1
 800e02c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2201      	movs	r2, #1
 800e034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e038:	2300      	movs	r3, #0
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3708      	adds	r7, #8
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b082      	sub	sp, #8
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	691b      	ldr	r3, [r3, #16]
 800e050:	f003 0302 	and.w	r3, r3, #2
 800e054:	2b02      	cmp	r3, #2
 800e056:	d122      	bne.n	800e09e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	f003 0302 	and.w	r3, r3, #2
 800e062:	2b02      	cmp	r3, #2
 800e064:	d11b      	bne.n	800e09e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f06f 0202 	mvn.w	r2, #2
 800e06e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2201      	movs	r2, #1
 800e074:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	699b      	ldr	r3, [r3, #24]
 800e07c:	f003 0303 	and.w	r3, r3, #3
 800e080:	2b00      	cmp	r3, #0
 800e082:	d003      	beq.n	800e08c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 fa23 	bl	800e4d0 <HAL_TIM_IC_CaptureCallback>
 800e08a:	e005      	b.n	800e098 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 fa15 	bl	800e4bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 fa26 	bl	800e4e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2200      	movs	r2, #0
 800e09c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	691b      	ldr	r3, [r3, #16]
 800e0a4:	f003 0304 	and.w	r3, r3, #4
 800e0a8:	2b04      	cmp	r3, #4
 800e0aa:	d122      	bne.n	800e0f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	f003 0304 	and.w	r3, r3, #4
 800e0b6:	2b04      	cmp	r3, #4
 800e0b8:	d11b      	bne.n	800e0f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f06f 0204 	mvn.w	r2, #4
 800e0c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2202      	movs	r2, #2
 800e0c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	699b      	ldr	r3, [r3, #24]
 800e0d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d003      	beq.n	800e0e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 f9f9 	bl	800e4d0 <HAL_TIM_IC_CaptureCallback>
 800e0de:	e005      	b.n	800e0ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 f9eb 	bl	800e4bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 f9fc 	bl	800e4e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	691b      	ldr	r3, [r3, #16]
 800e0f8:	f003 0308 	and.w	r3, r3, #8
 800e0fc:	2b08      	cmp	r3, #8
 800e0fe:	d122      	bne.n	800e146 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	f003 0308 	and.w	r3, r3, #8
 800e10a:	2b08      	cmp	r3, #8
 800e10c:	d11b      	bne.n	800e146 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f06f 0208 	mvn.w	r2, #8
 800e116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2204      	movs	r2, #4
 800e11c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	69db      	ldr	r3, [r3, #28]
 800e124:	f003 0303 	and.w	r3, r3, #3
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d003      	beq.n	800e134 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f000 f9cf 	bl	800e4d0 <HAL_TIM_IC_CaptureCallback>
 800e132:	e005      	b.n	800e140 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f000 f9c1 	bl	800e4bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 f9d2 	bl	800e4e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2200      	movs	r2, #0
 800e144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	691b      	ldr	r3, [r3, #16]
 800e14c:	f003 0310 	and.w	r3, r3, #16
 800e150:	2b10      	cmp	r3, #16
 800e152:	d122      	bne.n	800e19a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	f003 0310 	and.w	r3, r3, #16
 800e15e:	2b10      	cmp	r3, #16
 800e160:	d11b      	bne.n	800e19a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f06f 0210 	mvn.w	r2, #16
 800e16a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2208      	movs	r2, #8
 800e170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	69db      	ldr	r3, [r3, #28]
 800e178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d003      	beq.n	800e188 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 f9a5 	bl	800e4d0 <HAL_TIM_IC_CaptureCallback>
 800e186:	e005      	b.n	800e194 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 f997 	bl	800e4bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f000 f9a8 	bl	800e4e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2200      	movs	r2, #0
 800e198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	691b      	ldr	r3, [r3, #16]
 800e1a0:	f003 0301 	and.w	r3, r3, #1
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d10e      	bne.n	800e1c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	68db      	ldr	r3, [r3, #12]
 800e1ae:	f003 0301 	and.w	r3, r3, #1
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d107      	bne.n	800e1c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f06f 0201 	mvn.w	r2, #1
 800e1be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 f971 	bl	800e4a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	691b      	ldr	r3, [r3, #16]
 800e1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1d0:	2b80      	cmp	r3, #128	; 0x80
 800e1d2:	d10e      	bne.n	800e1f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1de:	2b80      	cmp	r3, #128	; 0x80
 800e1e0:	d107      	bne.n	800e1f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e1ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 fdaf 	bl	800ed50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	691b      	ldr	r3, [r3, #16]
 800e1f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e200:	d10e      	bne.n	800e220 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	68db      	ldr	r3, [r3, #12]
 800e208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e20c:	2b80      	cmp	r3, #128	; 0x80
 800e20e:	d107      	bne.n	800e220 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 fda2 	bl	800ed64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	691b      	ldr	r3, [r3, #16]
 800e226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e22a:	2b40      	cmp	r3, #64	; 0x40
 800e22c:	d10e      	bne.n	800e24c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e238:	2b40      	cmp	r3, #64	; 0x40
 800e23a:	d107      	bne.n	800e24c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 f956 	bl	800e4f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	691b      	ldr	r3, [r3, #16]
 800e252:	f003 0320 	and.w	r3, r3, #32
 800e256:	2b20      	cmp	r3, #32
 800e258:	d10e      	bne.n	800e278 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	f003 0320 	and.w	r3, r3, #32
 800e264:	2b20      	cmp	r3, #32
 800e266:	d107      	bne.n	800e278 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f06f 0220 	mvn.w	r2, #32
 800e270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 fd62 	bl	800ed3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e278:	bf00      	nop
 800e27a:	3708      	adds	r7, #8
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e28c:	2300      	movs	r3, #0
 800e28e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e296:	2b01      	cmp	r3, #1
 800e298:	d101      	bne.n	800e29e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e29a:	2302      	movs	r3, #2
 800e29c:	e0ff      	b.n	800e49e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2b14      	cmp	r3, #20
 800e2aa:	f200 80f0 	bhi.w	800e48e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e2ae:	a201      	add	r2, pc, #4	; (adr r2, 800e2b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2b4:	0800e309 	.word	0x0800e309
 800e2b8:	0800e48f 	.word	0x0800e48f
 800e2bc:	0800e48f 	.word	0x0800e48f
 800e2c0:	0800e48f 	.word	0x0800e48f
 800e2c4:	0800e349 	.word	0x0800e349
 800e2c8:	0800e48f 	.word	0x0800e48f
 800e2cc:	0800e48f 	.word	0x0800e48f
 800e2d0:	0800e48f 	.word	0x0800e48f
 800e2d4:	0800e38b 	.word	0x0800e38b
 800e2d8:	0800e48f 	.word	0x0800e48f
 800e2dc:	0800e48f 	.word	0x0800e48f
 800e2e0:	0800e48f 	.word	0x0800e48f
 800e2e4:	0800e3cb 	.word	0x0800e3cb
 800e2e8:	0800e48f 	.word	0x0800e48f
 800e2ec:	0800e48f 	.word	0x0800e48f
 800e2f0:	0800e48f 	.word	0x0800e48f
 800e2f4:	0800e40d 	.word	0x0800e40d
 800e2f8:	0800e48f 	.word	0x0800e48f
 800e2fc:	0800e48f 	.word	0x0800e48f
 800e300:	0800e48f 	.word	0x0800e48f
 800e304:	0800e44d 	.word	0x0800e44d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	68b9      	ldr	r1, [r7, #8]
 800e30e:	4618      	mov	r0, r3
 800e310:	f000 f9a2 	bl	800e658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	699a      	ldr	r2, [r3, #24]
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f042 0208 	orr.w	r2, r2, #8
 800e322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	699a      	ldr	r2, [r3, #24]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f022 0204 	bic.w	r2, r2, #4
 800e332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	6999      	ldr	r1, [r3, #24]
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	691a      	ldr	r2, [r3, #16]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	430a      	orrs	r2, r1
 800e344:	619a      	str	r2, [r3, #24]
      break;
 800e346:	e0a5      	b.n	800e494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	68b9      	ldr	r1, [r7, #8]
 800e34e:	4618      	mov	r0, r3
 800e350:	f000 fa12 	bl	800e778 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	699a      	ldr	r2, [r3, #24]
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	699a      	ldr	r2, [r3, #24]
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	6999      	ldr	r1, [r3, #24]
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	691b      	ldr	r3, [r3, #16]
 800e37e:	021a      	lsls	r2, r3, #8
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	430a      	orrs	r2, r1
 800e386:	619a      	str	r2, [r3, #24]
      break;
 800e388:	e084      	b.n	800e494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	68b9      	ldr	r1, [r7, #8]
 800e390:	4618      	mov	r0, r3
 800e392:	f000 fa7b 	bl	800e88c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	69da      	ldr	r2, [r3, #28]
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f042 0208 	orr.w	r2, r2, #8
 800e3a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	69da      	ldr	r2, [r3, #28]
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f022 0204 	bic.w	r2, r2, #4
 800e3b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	69d9      	ldr	r1, [r3, #28]
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	691a      	ldr	r2, [r3, #16]
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	430a      	orrs	r2, r1
 800e3c6:	61da      	str	r2, [r3, #28]
      break;
 800e3c8:	e064      	b.n	800e494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	68b9      	ldr	r1, [r7, #8]
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f000 fae3 	bl	800e99c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	69da      	ldr	r2, [r3, #28]
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e3e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	69da      	ldr	r2, [r3, #28]
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e3f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	69d9      	ldr	r1, [r3, #28]
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	021a      	lsls	r2, r3, #8
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	430a      	orrs	r2, r1
 800e408:	61da      	str	r2, [r3, #28]
      break;
 800e40a:	e043      	b.n	800e494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	68b9      	ldr	r1, [r7, #8]
 800e412:	4618      	mov	r0, r3
 800e414:	f000 fb2c 	bl	800ea70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f042 0208 	orr.w	r2, r2, #8
 800e426:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f022 0204 	bic.w	r2, r2, #4
 800e436:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	691a      	ldr	r2, [r3, #16]
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	430a      	orrs	r2, r1
 800e448:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e44a:	e023      	b.n	800e494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	68b9      	ldr	r1, [r7, #8]
 800e452:	4618      	mov	r0, r3
 800e454:	f000 fb70 	bl	800eb38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e466:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e476:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	691b      	ldr	r3, [r3, #16]
 800e482:	021a      	lsls	r2, r3, #8
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	430a      	orrs	r2, r1
 800e48a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e48c:	e002      	b.n	800e494 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e48e:	2301      	movs	r3, #1
 800e490:	75fb      	strb	r3, [r7, #23]
      break;
 800e492:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	2200      	movs	r2, #0
 800e498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e49c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3718      	adds	r7, #24
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop

0800e4a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e4b0:	bf00      	nop
 800e4b2:	370c      	adds	r7, #12
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr

0800e4bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b083      	sub	sp, #12
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e4c4:	bf00      	nop
 800e4c6:	370c      	adds	r7, #12
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr

0800e4d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e4d8:	bf00      	nop
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e4ec:	bf00      	nop
 800e4ee:	370c      	adds	r7, #12
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr

0800e4f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b083      	sub	sp, #12
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e500:	bf00      	nop
 800e502:	370c      	adds	r7, #12
 800e504:	46bd      	mov	sp, r7
 800e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50a:	4770      	bx	lr

0800e50c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e50c:	b480      	push	{r7}
 800e50e:	b085      	sub	sp, #20
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	4a44      	ldr	r2, [pc, #272]	; (800e630 <TIM_Base_SetConfig+0x124>)
 800e520:	4293      	cmp	r3, r2
 800e522:	d013      	beq.n	800e54c <TIM_Base_SetConfig+0x40>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e52a:	d00f      	beq.n	800e54c <TIM_Base_SetConfig+0x40>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	4a41      	ldr	r2, [pc, #260]	; (800e634 <TIM_Base_SetConfig+0x128>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d00b      	beq.n	800e54c <TIM_Base_SetConfig+0x40>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	4a40      	ldr	r2, [pc, #256]	; (800e638 <TIM_Base_SetConfig+0x12c>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	d007      	beq.n	800e54c <TIM_Base_SetConfig+0x40>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	4a3f      	ldr	r2, [pc, #252]	; (800e63c <TIM_Base_SetConfig+0x130>)
 800e540:	4293      	cmp	r3, r2
 800e542:	d003      	beq.n	800e54c <TIM_Base_SetConfig+0x40>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	4a3e      	ldr	r2, [pc, #248]	; (800e640 <TIM_Base_SetConfig+0x134>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d108      	bne.n	800e55e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	685b      	ldr	r3, [r3, #4]
 800e558:	68fa      	ldr	r2, [r7, #12]
 800e55a:	4313      	orrs	r3, r2
 800e55c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	4a33      	ldr	r2, [pc, #204]	; (800e630 <TIM_Base_SetConfig+0x124>)
 800e562:	4293      	cmp	r3, r2
 800e564:	d027      	beq.n	800e5b6 <TIM_Base_SetConfig+0xaa>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e56c:	d023      	beq.n	800e5b6 <TIM_Base_SetConfig+0xaa>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	4a30      	ldr	r2, [pc, #192]	; (800e634 <TIM_Base_SetConfig+0x128>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d01f      	beq.n	800e5b6 <TIM_Base_SetConfig+0xaa>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4a2f      	ldr	r2, [pc, #188]	; (800e638 <TIM_Base_SetConfig+0x12c>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d01b      	beq.n	800e5b6 <TIM_Base_SetConfig+0xaa>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4a2e      	ldr	r2, [pc, #184]	; (800e63c <TIM_Base_SetConfig+0x130>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d017      	beq.n	800e5b6 <TIM_Base_SetConfig+0xaa>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4a2d      	ldr	r2, [pc, #180]	; (800e640 <TIM_Base_SetConfig+0x134>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d013      	beq.n	800e5b6 <TIM_Base_SetConfig+0xaa>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4a2c      	ldr	r2, [pc, #176]	; (800e644 <TIM_Base_SetConfig+0x138>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d00f      	beq.n	800e5b6 <TIM_Base_SetConfig+0xaa>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4a2b      	ldr	r2, [pc, #172]	; (800e648 <TIM_Base_SetConfig+0x13c>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d00b      	beq.n	800e5b6 <TIM_Base_SetConfig+0xaa>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4a2a      	ldr	r2, [pc, #168]	; (800e64c <TIM_Base_SetConfig+0x140>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d007      	beq.n	800e5b6 <TIM_Base_SetConfig+0xaa>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4a29      	ldr	r2, [pc, #164]	; (800e650 <TIM_Base_SetConfig+0x144>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d003      	beq.n	800e5b6 <TIM_Base_SetConfig+0xaa>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4a28      	ldr	r2, [pc, #160]	; (800e654 <TIM_Base_SetConfig+0x148>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d108      	bne.n	800e5c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e5bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	68db      	ldr	r3, [r3, #12]
 800e5c2:	68fa      	ldr	r2, [r7, #12]
 800e5c4:	4313      	orrs	r3, r2
 800e5c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	695b      	ldr	r3, [r3, #20]
 800e5d2:	4313      	orrs	r3, r2
 800e5d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	689a      	ldr	r2, [r3, #8]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	681a      	ldr	r2, [r3, #0]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	4a10      	ldr	r2, [pc, #64]	; (800e630 <TIM_Base_SetConfig+0x124>)
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d00f      	beq.n	800e614 <TIM_Base_SetConfig+0x108>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	4a12      	ldr	r2, [pc, #72]	; (800e640 <TIM_Base_SetConfig+0x134>)
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d00b      	beq.n	800e614 <TIM_Base_SetConfig+0x108>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	4a11      	ldr	r2, [pc, #68]	; (800e644 <TIM_Base_SetConfig+0x138>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d007      	beq.n	800e614 <TIM_Base_SetConfig+0x108>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	4a10      	ldr	r2, [pc, #64]	; (800e648 <TIM_Base_SetConfig+0x13c>)
 800e608:	4293      	cmp	r3, r2
 800e60a:	d003      	beq.n	800e614 <TIM_Base_SetConfig+0x108>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	4a0f      	ldr	r2, [pc, #60]	; (800e64c <TIM_Base_SetConfig+0x140>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d103      	bne.n	800e61c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	691a      	ldr	r2, [r3, #16]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2201      	movs	r2, #1
 800e620:	615a      	str	r2, [r3, #20]
}
 800e622:	bf00      	nop
 800e624:	3714      	adds	r7, #20
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	40010000 	.word	0x40010000
 800e634:	40000400 	.word	0x40000400
 800e638:	40000800 	.word	0x40000800
 800e63c:	40000c00 	.word	0x40000c00
 800e640:	40010400 	.word	0x40010400
 800e644:	40014000 	.word	0x40014000
 800e648:	40014400 	.word	0x40014400
 800e64c:	40014800 	.word	0x40014800
 800e650:	4000e000 	.word	0x4000e000
 800e654:	4000e400 	.word	0x4000e400

0800e658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e658:	b480      	push	{r7}
 800e65a:	b087      	sub	sp, #28
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6a1b      	ldr	r3, [r3, #32]
 800e666:	f023 0201 	bic.w	r2, r3, #1
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6a1b      	ldr	r3, [r3, #32]
 800e672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	699b      	ldr	r3, [r3, #24]
 800e67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e680:	68fa      	ldr	r2, [r7, #12]
 800e682:	4b37      	ldr	r3, [pc, #220]	; (800e760 <TIM_OC1_SetConfig+0x108>)
 800e684:	4013      	ands	r3, r2
 800e686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f023 0303 	bic.w	r3, r3, #3
 800e68e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	68fa      	ldr	r2, [r7, #12]
 800e696:	4313      	orrs	r3, r2
 800e698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	f023 0302 	bic.w	r3, r3, #2
 800e6a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	689b      	ldr	r3, [r3, #8]
 800e6a6:	697a      	ldr	r2, [r7, #20]
 800e6a8:	4313      	orrs	r3, r2
 800e6aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	4a2d      	ldr	r2, [pc, #180]	; (800e764 <TIM_OC1_SetConfig+0x10c>)
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	d00f      	beq.n	800e6d4 <TIM_OC1_SetConfig+0x7c>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	4a2c      	ldr	r2, [pc, #176]	; (800e768 <TIM_OC1_SetConfig+0x110>)
 800e6b8:	4293      	cmp	r3, r2
 800e6ba:	d00b      	beq.n	800e6d4 <TIM_OC1_SetConfig+0x7c>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	4a2b      	ldr	r2, [pc, #172]	; (800e76c <TIM_OC1_SetConfig+0x114>)
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d007      	beq.n	800e6d4 <TIM_OC1_SetConfig+0x7c>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	4a2a      	ldr	r2, [pc, #168]	; (800e770 <TIM_OC1_SetConfig+0x118>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d003      	beq.n	800e6d4 <TIM_OC1_SetConfig+0x7c>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	4a29      	ldr	r2, [pc, #164]	; (800e774 <TIM_OC1_SetConfig+0x11c>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d10c      	bne.n	800e6ee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	f023 0308 	bic.w	r3, r3, #8
 800e6da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	697a      	ldr	r2, [r7, #20]
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	f023 0304 	bic.w	r3, r3, #4
 800e6ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4a1c      	ldr	r2, [pc, #112]	; (800e764 <TIM_OC1_SetConfig+0x10c>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d00f      	beq.n	800e716 <TIM_OC1_SetConfig+0xbe>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	4a1b      	ldr	r2, [pc, #108]	; (800e768 <TIM_OC1_SetConfig+0x110>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d00b      	beq.n	800e716 <TIM_OC1_SetConfig+0xbe>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4a1a      	ldr	r2, [pc, #104]	; (800e76c <TIM_OC1_SetConfig+0x114>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d007      	beq.n	800e716 <TIM_OC1_SetConfig+0xbe>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	4a19      	ldr	r2, [pc, #100]	; (800e770 <TIM_OC1_SetConfig+0x118>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d003      	beq.n	800e716 <TIM_OC1_SetConfig+0xbe>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	4a18      	ldr	r2, [pc, #96]	; (800e774 <TIM_OC1_SetConfig+0x11c>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d111      	bne.n	800e73a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e71c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	695b      	ldr	r3, [r3, #20]
 800e72a:	693a      	ldr	r2, [r7, #16]
 800e72c:	4313      	orrs	r3, r2
 800e72e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	699b      	ldr	r3, [r3, #24]
 800e734:	693a      	ldr	r2, [r7, #16]
 800e736:	4313      	orrs	r3, r2
 800e738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	693a      	ldr	r2, [r7, #16]
 800e73e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	68fa      	ldr	r2, [r7, #12]
 800e744:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	685a      	ldr	r2, [r3, #4]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	697a      	ldr	r2, [r7, #20]
 800e752:	621a      	str	r2, [r3, #32]
}
 800e754:	bf00      	nop
 800e756:	371c      	adds	r7, #28
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr
 800e760:	fffeff8f 	.word	0xfffeff8f
 800e764:	40010000 	.word	0x40010000
 800e768:	40010400 	.word	0x40010400
 800e76c:	40014000 	.word	0x40014000
 800e770:	40014400 	.word	0x40014400
 800e774:	40014800 	.word	0x40014800

0800e778 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e778:	b480      	push	{r7}
 800e77a:	b087      	sub	sp, #28
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6a1b      	ldr	r3, [r3, #32]
 800e786:	f023 0210 	bic.w	r2, r3, #16
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6a1b      	ldr	r3, [r3, #32]
 800e792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	699b      	ldr	r3, [r3, #24]
 800e79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	4b34      	ldr	r3, [pc, #208]	; (800e874 <TIM_OC2_SetConfig+0xfc>)
 800e7a4:	4013      	ands	r3, r2
 800e7a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	021b      	lsls	r3, r3, #8
 800e7b6:	68fa      	ldr	r2, [r7, #12]
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	f023 0320 	bic.w	r3, r3, #32
 800e7c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	689b      	ldr	r3, [r3, #8]
 800e7c8:	011b      	lsls	r3, r3, #4
 800e7ca:	697a      	ldr	r2, [r7, #20]
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	4a29      	ldr	r2, [pc, #164]	; (800e878 <TIM_OC2_SetConfig+0x100>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d003      	beq.n	800e7e0 <TIM_OC2_SetConfig+0x68>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	4a28      	ldr	r2, [pc, #160]	; (800e87c <TIM_OC2_SetConfig+0x104>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d10d      	bne.n	800e7fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	011b      	lsls	r3, r3, #4
 800e7ee:	697a      	ldr	r2, [r7, #20]
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	4a1e      	ldr	r2, [pc, #120]	; (800e878 <TIM_OC2_SetConfig+0x100>)
 800e800:	4293      	cmp	r3, r2
 800e802:	d00f      	beq.n	800e824 <TIM_OC2_SetConfig+0xac>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	4a1d      	ldr	r2, [pc, #116]	; (800e87c <TIM_OC2_SetConfig+0x104>)
 800e808:	4293      	cmp	r3, r2
 800e80a:	d00b      	beq.n	800e824 <TIM_OC2_SetConfig+0xac>
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	4a1c      	ldr	r2, [pc, #112]	; (800e880 <TIM_OC2_SetConfig+0x108>)
 800e810:	4293      	cmp	r3, r2
 800e812:	d007      	beq.n	800e824 <TIM_OC2_SetConfig+0xac>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	4a1b      	ldr	r2, [pc, #108]	; (800e884 <TIM_OC2_SetConfig+0x10c>)
 800e818:	4293      	cmp	r3, r2
 800e81a:	d003      	beq.n	800e824 <TIM_OC2_SetConfig+0xac>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	4a1a      	ldr	r2, [pc, #104]	; (800e888 <TIM_OC2_SetConfig+0x110>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d113      	bne.n	800e84c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e82a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	695b      	ldr	r3, [r3, #20]
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	693a      	ldr	r2, [r7, #16]
 800e83c:	4313      	orrs	r3, r2
 800e83e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	699b      	ldr	r3, [r3, #24]
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	693a      	ldr	r2, [r7, #16]
 800e848:	4313      	orrs	r3, r2
 800e84a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	693a      	ldr	r2, [r7, #16]
 800e850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	68fa      	ldr	r2, [r7, #12]
 800e856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	685a      	ldr	r2, [r3, #4]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	697a      	ldr	r2, [r7, #20]
 800e864:	621a      	str	r2, [r3, #32]
}
 800e866:	bf00      	nop
 800e868:	371c      	adds	r7, #28
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr
 800e872:	bf00      	nop
 800e874:	feff8fff 	.word	0xfeff8fff
 800e878:	40010000 	.word	0x40010000
 800e87c:	40010400 	.word	0x40010400
 800e880:	40014000 	.word	0x40014000
 800e884:	40014400 	.word	0x40014400
 800e888:	40014800 	.word	0x40014800

0800e88c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b087      	sub	sp, #28
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6a1b      	ldr	r3, [r3, #32]
 800e89a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6a1b      	ldr	r3, [r3, #32]
 800e8a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	69db      	ldr	r3, [r3, #28]
 800e8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e8b4:	68fa      	ldr	r2, [r7, #12]
 800e8b6:	4b33      	ldr	r3, [pc, #204]	; (800e984 <TIM_OC3_SetConfig+0xf8>)
 800e8b8:	4013      	ands	r3, r2
 800e8ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f023 0303 	bic.w	r3, r3, #3
 800e8c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e8d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	689b      	ldr	r3, [r3, #8]
 800e8da:	021b      	lsls	r3, r3, #8
 800e8dc:	697a      	ldr	r2, [r7, #20]
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	4a28      	ldr	r2, [pc, #160]	; (800e988 <TIM_OC3_SetConfig+0xfc>)
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d003      	beq.n	800e8f2 <TIM_OC3_SetConfig+0x66>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	4a27      	ldr	r2, [pc, #156]	; (800e98c <TIM_OC3_SetConfig+0x100>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d10d      	bne.n	800e90e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e8f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	68db      	ldr	r3, [r3, #12]
 800e8fe:	021b      	lsls	r3, r3, #8
 800e900:	697a      	ldr	r2, [r7, #20]
 800e902:	4313      	orrs	r3, r2
 800e904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e90c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	4a1d      	ldr	r2, [pc, #116]	; (800e988 <TIM_OC3_SetConfig+0xfc>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d00f      	beq.n	800e936 <TIM_OC3_SetConfig+0xaa>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	4a1c      	ldr	r2, [pc, #112]	; (800e98c <TIM_OC3_SetConfig+0x100>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d00b      	beq.n	800e936 <TIM_OC3_SetConfig+0xaa>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	4a1b      	ldr	r2, [pc, #108]	; (800e990 <TIM_OC3_SetConfig+0x104>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d007      	beq.n	800e936 <TIM_OC3_SetConfig+0xaa>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	4a1a      	ldr	r2, [pc, #104]	; (800e994 <TIM_OC3_SetConfig+0x108>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d003      	beq.n	800e936 <TIM_OC3_SetConfig+0xaa>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	4a19      	ldr	r2, [pc, #100]	; (800e998 <TIM_OC3_SetConfig+0x10c>)
 800e932:	4293      	cmp	r3, r2
 800e934:	d113      	bne.n	800e95e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e93c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	695b      	ldr	r3, [r3, #20]
 800e94a:	011b      	lsls	r3, r3, #4
 800e94c:	693a      	ldr	r2, [r7, #16]
 800e94e:	4313      	orrs	r3, r2
 800e950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	699b      	ldr	r3, [r3, #24]
 800e956:	011b      	lsls	r3, r3, #4
 800e958:	693a      	ldr	r2, [r7, #16]
 800e95a:	4313      	orrs	r3, r2
 800e95c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	693a      	ldr	r2, [r7, #16]
 800e962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	68fa      	ldr	r2, [r7, #12]
 800e968:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	685a      	ldr	r2, [r3, #4]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	697a      	ldr	r2, [r7, #20]
 800e976:	621a      	str	r2, [r3, #32]
}
 800e978:	bf00      	nop
 800e97a:	371c      	adds	r7, #28
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr
 800e984:	fffeff8f 	.word	0xfffeff8f
 800e988:	40010000 	.word	0x40010000
 800e98c:	40010400 	.word	0x40010400
 800e990:	40014000 	.word	0x40014000
 800e994:	40014400 	.word	0x40014400
 800e998:	40014800 	.word	0x40014800

0800e99c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b087      	sub	sp, #28
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6a1b      	ldr	r3, [r3, #32]
 800e9aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6a1b      	ldr	r3, [r3, #32]
 800e9b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	69db      	ldr	r3, [r3, #28]
 800e9c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	4b24      	ldr	r3, [pc, #144]	; (800ea58 <TIM_OC4_SetConfig+0xbc>)
 800e9c8:	4013      	ands	r3, r2
 800e9ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	021b      	lsls	r3, r3, #8
 800e9da:	68fa      	ldr	r2, [r7, #12]
 800e9dc:	4313      	orrs	r3, r2
 800e9de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e9e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	689b      	ldr	r3, [r3, #8]
 800e9ec:	031b      	lsls	r3, r3, #12
 800e9ee:	693a      	ldr	r2, [r7, #16]
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	4a19      	ldr	r2, [pc, #100]	; (800ea5c <TIM_OC4_SetConfig+0xc0>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d00f      	beq.n	800ea1c <TIM_OC4_SetConfig+0x80>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	4a18      	ldr	r2, [pc, #96]	; (800ea60 <TIM_OC4_SetConfig+0xc4>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d00b      	beq.n	800ea1c <TIM_OC4_SetConfig+0x80>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	4a17      	ldr	r2, [pc, #92]	; (800ea64 <TIM_OC4_SetConfig+0xc8>)
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d007      	beq.n	800ea1c <TIM_OC4_SetConfig+0x80>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	4a16      	ldr	r2, [pc, #88]	; (800ea68 <TIM_OC4_SetConfig+0xcc>)
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d003      	beq.n	800ea1c <TIM_OC4_SetConfig+0x80>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	4a15      	ldr	r2, [pc, #84]	; (800ea6c <TIM_OC4_SetConfig+0xd0>)
 800ea18:	4293      	cmp	r3, r2
 800ea1a:	d109      	bne.n	800ea30 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ea22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	695b      	ldr	r3, [r3, #20]
 800ea28:	019b      	lsls	r3, r3, #6
 800ea2a:	697a      	ldr	r2, [r7, #20]
 800ea2c:	4313      	orrs	r3, r2
 800ea2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	697a      	ldr	r2, [r7, #20]
 800ea34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	68fa      	ldr	r2, [r7, #12]
 800ea3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	685a      	ldr	r2, [r3, #4]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	693a      	ldr	r2, [r7, #16]
 800ea48:	621a      	str	r2, [r3, #32]
}
 800ea4a:	bf00      	nop
 800ea4c:	371c      	adds	r7, #28
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop
 800ea58:	feff8fff 	.word	0xfeff8fff
 800ea5c:	40010000 	.word	0x40010000
 800ea60:	40010400 	.word	0x40010400
 800ea64:	40014000 	.word	0x40014000
 800ea68:	40014400 	.word	0x40014400
 800ea6c:	40014800 	.word	0x40014800

0800ea70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b087      	sub	sp, #28
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6a1b      	ldr	r3, [r3, #32]
 800ea7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6a1b      	ldr	r3, [r3, #32]
 800ea8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ea98:	68fa      	ldr	r2, [r7, #12]
 800ea9a:	4b21      	ldr	r3, [pc, #132]	; (800eb20 <TIM_OC5_SetConfig+0xb0>)
 800ea9c:	4013      	ands	r3, r2
 800ea9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	68fa      	ldr	r2, [r7, #12]
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800eab0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	689b      	ldr	r3, [r3, #8]
 800eab6:	041b      	lsls	r3, r3, #16
 800eab8:	693a      	ldr	r2, [r7, #16]
 800eaba:	4313      	orrs	r3, r2
 800eabc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4a18      	ldr	r2, [pc, #96]	; (800eb24 <TIM_OC5_SetConfig+0xb4>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d00f      	beq.n	800eae6 <TIM_OC5_SetConfig+0x76>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4a17      	ldr	r2, [pc, #92]	; (800eb28 <TIM_OC5_SetConfig+0xb8>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d00b      	beq.n	800eae6 <TIM_OC5_SetConfig+0x76>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	4a16      	ldr	r2, [pc, #88]	; (800eb2c <TIM_OC5_SetConfig+0xbc>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d007      	beq.n	800eae6 <TIM_OC5_SetConfig+0x76>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4a15      	ldr	r2, [pc, #84]	; (800eb30 <TIM_OC5_SetConfig+0xc0>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d003      	beq.n	800eae6 <TIM_OC5_SetConfig+0x76>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	4a14      	ldr	r2, [pc, #80]	; (800eb34 <TIM_OC5_SetConfig+0xc4>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d109      	bne.n	800eafa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eaec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	695b      	ldr	r3, [r3, #20]
 800eaf2:	021b      	lsls	r3, r3, #8
 800eaf4:	697a      	ldr	r2, [r7, #20]
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	697a      	ldr	r2, [r7, #20]
 800eafe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	685a      	ldr	r2, [r3, #4]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	693a      	ldr	r2, [r7, #16]
 800eb12:	621a      	str	r2, [r3, #32]
}
 800eb14:	bf00      	nop
 800eb16:	371c      	adds	r7, #28
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr
 800eb20:	fffeff8f 	.word	0xfffeff8f
 800eb24:	40010000 	.word	0x40010000
 800eb28:	40010400 	.word	0x40010400
 800eb2c:	40014000 	.word	0x40014000
 800eb30:	40014400 	.word	0x40014400
 800eb34:	40014800 	.word	0x40014800

0800eb38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b087      	sub	sp, #28
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6a1b      	ldr	r3, [r3, #32]
 800eb46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6a1b      	ldr	r3, [r3, #32]
 800eb52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eb60:	68fa      	ldr	r2, [r7, #12]
 800eb62:	4b22      	ldr	r3, [pc, #136]	; (800ebec <TIM_OC6_SetConfig+0xb4>)
 800eb64:	4013      	ands	r3, r2
 800eb66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	021b      	lsls	r3, r3, #8
 800eb6e:	68fa      	ldr	r2, [r7, #12]
 800eb70:	4313      	orrs	r3, r2
 800eb72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eb7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	689b      	ldr	r3, [r3, #8]
 800eb80:	051b      	lsls	r3, r3, #20
 800eb82:	693a      	ldr	r2, [r7, #16]
 800eb84:	4313      	orrs	r3, r2
 800eb86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	4a19      	ldr	r2, [pc, #100]	; (800ebf0 <TIM_OC6_SetConfig+0xb8>)
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d00f      	beq.n	800ebb0 <TIM_OC6_SetConfig+0x78>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	4a18      	ldr	r2, [pc, #96]	; (800ebf4 <TIM_OC6_SetConfig+0xbc>)
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d00b      	beq.n	800ebb0 <TIM_OC6_SetConfig+0x78>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	4a17      	ldr	r2, [pc, #92]	; (800ebf8 <TIM_OC6_SetConfig+0xc0>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d007      	beq.n	800ebb0 <TIM_OC6_SetConfig+0x78>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	4a16      	ldr	r2, [pc, #88]	; (800ebfc <TIM_OC6_SetConfig+0xc4>)
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d003      	beq.n	800ebb0 <TIM_OC6_SetConfig+0x78>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	4a15      	ldr	r2, [pc, #84]	; (800ec00 <TIM_OC6_SetConfig+0xc8>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d109      	bne.n	800ebc4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ebb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	695b      	ldr	r3, [r3, #20]
 800ebbc:	029b      	lsls	r3, r3, #10
 800ebbe:	697a      	ldr	r2, [r7, #20]
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	697a      	ldr	r2, [r7, #20]
 800ebc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	685a      	ldr	r2, [r3, #4]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	693a      	ldr	r2, [r7, #16]
 800ebdc:	621a      	str	r2, [r3, #32]
}
 800ebde:	bf00      	nop
 800ebe0:	371c      	adds	r7, #28
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	feff8fff 	.word	0xfeff8fff
 800ebf0:	40010000 	.word	0x40010000
 800ebf4:	40010400 	.word	0x40010400
 800ebf8:	40014000 	.word	0x40014000
 800ebfc:	40014400 	.word	0x40014400
 800ec00:	40014800 	.word	0x40014800

0800ec04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b085      	sub	sp, #20
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d101      	bne.n	800ec1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ec18:	2302      	movs	r3, #2
 800ec1a:	e077      	b.n	800ed0c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2201      	movs	r2, #1
 800ec20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2202      	movs	r2, #2
 800ec28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	689b      	ldr	r3, [r3, #8]
 800ec3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4a35      	ldr	r2, [pc, #212]	; (800ed18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ec42:	4293      	cmp	r3, r2
 800ec44:	d004      	beq.n	800ec50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	4a34      	ldr	r2, [pc, #208]	; (800ed1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d108      	bne.n	800ec62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ec56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	685b      	ldr	r3, [r3, #4]
 800ec5c:	68fa      	ldr	r2, [r7, #12]
 800ec5e:	4313      	orrs	r3, r2
 800ec60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	68fa      	ldr	r2, [r7, #12]
 800ec70:	4313      	orrs	r3, r2
 800ec72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a25      	ldr	r2, [pc, #148]	; (800ed18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d02c      	beq.n	800ece0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec8e:	d027      	beq.n	800ece0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4a22      	ldr	r2, [pc, #136]	; (800ed20 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d022      	beq.n	800ece0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4a21      	ldr	r2, [pc, #132]	; (800ed24 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d01d      	beq.n	800ece0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4a1f      	ldr	r2, [pc, #124]	; (800ed28 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d018      	beq.n	800ece0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	4a1a      	ldr	r2, [pc, #104]	; (800ed1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d013      	beq.n	800ece0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4a1b      	ldr	r2, [pc, #108]	; (800ed2c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	d00e      	beq.n	800ece0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	4a1a      	ldr	r2, [pc, #104]	; (800ed30 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d009      	beq.n	800ece0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	4a18      	ldr	r2, [pc, #96]	; (800ed34 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d004      	beq.n	800ece0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	4a17      	ldr	r2, [pc, #92]	; (800ed38 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d10c      	bne.n	800ecfa <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ece6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	689b      	ldr	r3, [r3, #8]
 800ecec:	68ba      	ldr	r2, [r7, #8]
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	68ba      	ldr	r2, [r7, #8]
 800ecf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2201      	movs	r2, #1
 800ecfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ed0a:	2300      	movs	r3, #0
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3714      	adds	r7, #20
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr
 800ed18:	40010000 	.word	0x40010000
 800ed1c:	40010400 	.word	0x40010400
 800ed20:	40000400 	.word	0x40000400
 800ed24:	40000800 	.word	0x40000800
 800ed28:	40000c00 	.word	0x40000c00
 800ed2c:	40001800 	.word	0x40001800
 800ed30:	40014000 	.word	0x40014000
 800ed34:	4000e000 	.word	0x4000e000
 800ed38:	4000e400 	.word	0x4000e400

0800ed3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ed44:	bf00      	nop
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b083      	sub	sp, #12
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ed58:	bf00      	nop
 800ed5a:	370c      	adds	r7, #12
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr

0800ed64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b083      	sub	sp, #12
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ed6c:	bf00      	nop
 800ed6e:	370c      	adds	r7, #12
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b082      	sub	sp, #8
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d101      	bne.n	800ed8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ed86:	2301      	movs	r3, #1
 800ed88:	e042      	b.n	800ee10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d106      	bne.n	800eda2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f7f3 fccd 	bl	800273c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2224      	movs	r2, #36	; 0x24
 800eda6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f022 0201 	bic.w	r2, r2, #1
 800edb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f000 f82c 	bl	800ee18 <UART_SetConfig>
 800edc0:	4603      	mov	r3, r0
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d101      	bne.n	800edca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800edc6:	2301      	movs	r3, #1
 800edc8:	e022      	b.n	800ee10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d002      	beq.n	800edd8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f000 fe8c 	bl	800faf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	685a      	ldr	r2, [r3, #4]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ede6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	689a      	ldr	r2, [r3, #8]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800edf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f042 0201 	orr.w	r2, r2, #1
 800ee06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f000 ff13 	bl	800fc34 <UART_CheckIdleState>
 800ee0e:	4603      	mov	r3, r0
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3708      	adds	r7, #8
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ee18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee1c:	b092      	sub	sp, #72	; 0x48
 800ee1e:	af00      	add	r7, sp, #0
 800ee20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ee22:	2300      	movs	r3, #0
 800ee24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	689a      	ldr	r2, [r3, #8]
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	691b      	ldr	r3, [r3, #16]
 800ee30:	431a      	orrs	r2, r3
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	695b      	ldr	r3, [r3, #20]
 800ee36:	431a      	orrs	r2, r3
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	69db      	ldr	r3, [r3, #28]
 800ee3c:	4313      	orrs	r3, r2
 800ee3e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	4bbe      	ldr	r3, [pc, #760]	; (800f140 <UART_SetConfig+0x328>)
 800ee48:	4013      	ands	r3, r2
 800ee4a:	697a      	ldr	r2, [r7, #20]
 800ee4c:	6812      	ldr	r2, [r2, #0]
 800ee4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee50:	430b      	orrs	r3, r1
 800ee52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	68da      	ldr	r2, [r3, #12]
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	430a      	orrs	r2, r1
 800ee68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	699b      	ldr	r3, [r3, #24]
 800ee6e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	4ab3      	ldr	r2, [pc, #716]	; (800f144 <UART_SetConfig+0x32c>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d004      	beq.n	800ee84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	6a1b      	ldr	r3, [r3, #32]
 800ee7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee80:	4313      	orrs	r3, r2
 800ee82:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	689a      	ldr	r2, [r3, #8]
 800ee8a:	4baf      	ldr	r3, [pc, #700]	; (800f148 <UART_SetConfig+0x330>)
 800ee8c:	4013      	ands	r3, r2
 800ee8e:	697a      	ldr	r2, [r7, #20]
 800ee90:	6812      	ldr	r2, [r2, #0]
 800ee92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee94:	430b      	orrs	r3, r1
 800ee96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee9e:	f023 010f 	bic.w	r1, r3, #15
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	430a      	orrs	r2, r1
 800eeac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4aa6      	ldr	r2, [pc, #664]	; (800f14c <UART_SetConfig+0x334>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d177      	bne.n	800efa8 <UART_SetConfig+0x190>
 800eeb8:	4ba5      	ldr	r3, [pc, #660]	; (800f150 <UART_SetConfig+0x338>)
 800eeba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eebc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eec0:	2b28      	cmp	r3, #40	; 0x28
 800eec2:	d86d      	bhi.n	800efa0 <UART_SetConfig+0x188>
 800eec4:	a201      	add	r2, pc, #4	; (adr r2, 800eecc <UART_SetConfig+0xb4>)
 800eec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeca:	bf00      	nop
 800eecc:	0800ef71 	.word	0x0800ef71
 800eed0:	0800efa1 	.word	0x0800efa1
 800eed4:	0800efa1 	.word	0x0800efa1
 800eed8:	0800efa1 	.word	0x0800efa1
 800eedc:	0800efa1 	.word	0x0800efa1
 800eee0:	0800efa1 	.word	0x0800efa1
 800eee4:	0800efa1 	.word	0x0800efa1
 800eee8:	0800efa1 	.word	0x0800efa1
 800eeec:	0800ef79 	.word	0x0800ef79
 800eef0:	0800efa1 	.word	0x0800efa1
 800eef4:	0800efa1 	.word	0x0800efa1
 800eef8:	0800efa1 	.word	0x0800efa1
 800eefc:	0800efa1 	.word	0x0800efa1
 800ef00:	0800efa1 	.word	0x0800efa1
 800ef04:	0800efa1 	.word	0x0800efa1
 800ef08:	0800efa1 	.word	0x0800efa1
 800ef0c:	0800ef81 	.word	0x0800ef81
 800ef10:	0800efa1 	.word	0x0800efa1
 800ef14:	0800efa1 	.word	0x0800efa1
 800ef18:	0800efa1 	.word	0x0800efa1
 800ef1c:	0800efa1 	.word	0x0800efa1
 800ef20:	0800efa1 	.word	0x0800efa1
 800ef24:	0800efa1 	.word	0x0800efa1
 800ef28:	0800efa1 	.word	0x0800efa1
 800ef2c:	0800ef89 	.word	0x0800ef89
 800ef30:	0800efa1 	.word	0x0800efa1
 800ef34:	0800efa1 	.word	0x0800efa1
 800ef38:	0800efa1 	.word	0x0800efa1
 800ef3c:	0800efa1 	.word	0x0800efa1
 800ef40:	0800efa1 	.word	0x0800efa1
 800ef44:	0800efa1 	.word	0x0800efa1
 800ef48:	0800efa1 	.word	0x0800efa1
 800ef4c:	0800ef91 	.word	0x0800ef91
 800ef50:	0800efa1 	.word	0x0800efa1
 800ef54:	0800efa1 	.word	0x0800efa1
 800ef58:	0800efa1 	.word	0x0800efa1
 800ef5c:	0800efa1 	.word	0x0800efa1
 800ef60:	0800efa1 	.word	0x0800efa1
 800ef64:	0800efa1 	.word	0x0800efa1
 800ef68:	0800efa1 	.word	0x0800efa1
 800ef6c:	0800ef99 	.word	0x0800ef99
 800ef70:	2301      	movs	r3, #1
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef76:	e326      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800ef78:	2304      	movs	r3, #4
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef7e:	e322      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800ef80:	2308      	movs	r3, #8
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef86:	e31e      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800ef88:	2310      	movs	r3, #16
 800ef8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef8e:	e31a      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800ef90:	2320      	movs	r3, #32
 800ef92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef96:	e316      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800ef98:	2340      	movs	r3, #64	; 0x40
 800ef9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef9e:	e312      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800efa0:	2380      	movs	r3, #128	; 0x80
 800efa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efa6:	e30e      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4a69      	ldr	r2, [pc, #420]	; (800f154 <UART_SetConfig+0x33c>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d130      	bne.n	800f014 <UART_SetConfig+0x1fc>
 800efb2:	4b67      	ldr	r3, [pc, #412]	; (800f150 <UART_SetConfig+0x338>)
 800efb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efb6:	f003 0307 	and.w	r3, r3, #7
 800efba:	2b05      	cmp	r3, #5
 800efbc:	d826      	bhi.n	800f00c <UART_SetConfig+0x1f4>
 800efbe:	a201      	add	r2, pc, #4	; (adr r2, 800efc4 <UART_SetConfig+0x1ac>)
 800efc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efc4:	0800efdd 	.word	0x0800efdd
 800efc8:	0800efe5 	.word	0x0800efe5
 800efcc:	0800efed 	.word	0x0800efed
 800efd0:	0800eff5 	.word	0x0800eff5
 800efd4:	0800effd 	.word	0x0800effd
 800efd8:	0800f005 	.word	0x0800f005
 800efdc:	2300      	movs	r3, #0
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efe2:	e2f0      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800efe4:	2304      	movs	r3, #4
 800efe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efea:	e2ec      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800efec:	2308      	movs	r3, #8
 800efee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eff2:	e2e8      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800eff4:	2310      	movs	r3, #16
 800eff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800effa:	e2e4      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800effc:	2320      	movs	r3, #32
 800effe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f002:	e2e0      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f004:	2340      	movs	r3, #64	; 0x40
 800f006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f00a:	e2dc      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f00c:	2380      	movs	r3, #128	; 0x80
 800f00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f012:	e2d8      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4a4f      	ldr	r2, [pc, #316]	; (800f158 <UART_SetConfig+0x340>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d130      	bne.n	800f080 <UART_SetConfig+0x268>
 800f01e:	4b4c      	ldr	r3, [pc, #304]	; (800f150 <UART_SetConfig+0x338>)
 800f020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f022:	f003 0307 	and.w	r3, r3, #7
 800f026:	2b05      	cmp	r3, #5
 800f028:	d826      	bhi.n	800f078 <UART_SetConfig+0x260>
 800f02a:	a201      	add	r2, pc, #4	; (adr r2, 800f030 <UART_SetConfig+0x218>)
 800f02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f030:	0800f049 	.word	0x0800f049
 800f034:	0800f051 	.word	0x0800f051
 800f038:	0800f059 	.word	0x0800f059
 800f03c:	0800f061 	.word	0x0800f061
 800f040:	0800f069 	.word	0x0800f069
 800f044:	0800f071 	.word	0x0800f071
 800f048:	2300      	movs	r3, #0
 800f04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04e:	e2ba      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f050:	2304      	movs	r3, #4
 800f052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f056:	e2b6      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f058:	2308      	movs	r3, #8
 800f05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05e:	e2b2      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f060:	2310      	movs	r3, #16
 800f062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f066:	e2ae      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f068:	2320      	movs	r3, #32
 800f06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f06e:	e2aa      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f070:	2340      	movs	r3, #64	; 0x40
 800f072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f076:	e2a6      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f078:	2380      	movs	r3, #128	; 0x80
 800f07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f07e:	e2a2      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	4a35      	ldr	r2, [pc, #212]	; (800f15c <UART_SetConfig+0x344>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d130      	bne.n	800f0ec <UART_SetConfig+0x2d4>
 800f08a:	4b31      	ldr	r3, [pc, #196]	; (800f150 <UART_SetConfig+0x338>)
 800f08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f08e:	f003 0307 	and.w	r3, r3, #7
 800f092:	2b05      	cmp	r3, #5
 800f094:	d826      	bhi.n	800f0e4 <UART_SetConfig+0x2cc>
 800f096:	a201      	add	r2, pc, #4	; (adr r2, 800f09c <UART_SetConfig+0x284>)
 800f098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f09c:	0800f0b5 	.word	0x0800f0b5
 800f0a0:	0800f0bd 	.word	0x0800f0bd
 800f0a4:	0800f0c5 	.word	0x0800f0c5
 800f0a8:	0800f0cd 	.word	0x0800f0cd
 800f0ac:	0800f0d5 	.word	0x0800f0d5
 800f0b0:	0800f0dd 	.word	0x0800f0dd
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ba:	e284      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f0bc:	2304      	movs	r3, #4
 800f0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c2:	e280      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f0c4:	2308      	movs	r3, #8
 800f0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ca:	e27c      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f0cc:	2310      	movs	r3, #16
 800f0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0d2:	e278      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f0d4:	2320      	movs	r3, #32
 800f0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0da:	e274      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f0dc:	2340      	movs	r3, #64	; 0x40
 800f0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0e2:	e270      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f0e4:	2380      	movs	r3, #128	; 0x80
 800f0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ea:	e26c      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	4a1b      	ldr	r2, [pc, #108]	; (800f160 <UART_SetConfig+0x348>)
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	d142      	bne.n	800f17c <UART_SetConfig+0x364>
 800f0f6:	4b16      	ldr	r3, [pc, #88]	; (800f150 <UART_SetConfig+0x338>)
 800f0f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0fa:	f003 0307 	and.w	r3, r3, #7
 800f0fe:	2b05      	cmp	r3, #5
 800f100:	d838      	bhi.n	800f174 <UART_SetConfig+0x35c>
 800f102:	a201      	add	r2, pc, #4	; (adr r2, 800f108 <UART_SetConfig+0x2f0>)
 800f104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f108:	0800f121 	.word	0x0800f121
 800f10c:	0800f129 	.word	0x0800f129
 800f110:	0800f131 	.word	0x0800f131
 800f114:	0800f139 	.word	0x0800f139
 800f118:	0800f165 	.word	0x0800f165
 800f11c:	0800f16d 	.word	0x0800f16d
 800f120:	2300      	movs	r3, #0
 800f122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f126:	e24e      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f128:	2304      	movs	r3, #4
 800f12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f12e:	e24a      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f130:	2308      	movs	r3, #8
 800f132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f136:	e246      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f138:	2310      	movs	r3, #16
 800f13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f13e:	e242      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f140:	cfff69f3 	.word	0xcfff69f3
 800f144:	58000c00 	.word	0x58000c00
 800f148:	11fff4ff 	.word	0x11fff4ff
 800f14c:	40011000 	.word	0x40011000
 800f150:	58024400 	.word	0x58024400
 800f154:	40004400 	.word	0x40004400
 800f158:	40004800 	.word	0x40004800
 800f15c:	40004c00 	.word	0x40004c00
 800f160:	40005000 	.word	0x40005000
 800f164:	2320      	movs	r3, #32
 800f166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f16a:	e22c      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f16c:	2340      	movs	r3, #64	; 0x40
 800f16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f172:	e228      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f174:	2380      	movs	r3, #128	; 0x80
 800f176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f17a:	e224      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4ab1      	ldr	r2, [pc, #708]	; (800f448 <UART_SetConfig+0x630>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d176      	bne.n	800f274 <UART_SetConfig+0x45c>
 800f186:	4bb1      	ldr	r3, [pc, #708]	; (800f44c <UART_SetConfig+0x634>)
 800f188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f18a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f18e:	2b28      	cmp	r3, #40	; 0x28
 800f190:	d86c      	bhi.n	800f26c <UART_SetConfig+0x454>
 800f192:	a201      	add	r2, pc, #4	; (adr r2, 800f198 <UART_SetConfig+0x380>)
 800f194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f198:	0800f23d 	.word	0x0800f23d
 800f19c:	0800f26d 	.word	0x0800f26d
 800f1a0:	0800f26d 	.word	0x0800f26d
 800f1a4:	0800f26d 	.word	0x0800f26d
 800f1a8:	0800f26d 	.word	0x0800f26d
 800f1ac:	0800f26d 	.word	0x0800f26d
 800f1b0:	0800f26d 	.word	0x0800f26d
 800f1b4:	0800f26d 	.word	0x0800f26d
 800f1b8:	0800f245 	.word	0x0800f245
 800f1bc:	0800f26d 	.word	0x0800f26d
 800f1c0:	0800f26d 	.word	0x0800f26d
 800f1c4:	0800f26d 	.word	0x0800f26d
 800f1c8:	0800f26d 	.word	0x0800f26d
 800f1cc:	0800f26d 	.word	0x0800f26d
 800f1d0:	0800f26d 	.word	0x0800f26d
 800f1d4:	0800f26d 	.word	0x0800f26d
 800f1d8:	0800f24d 	.word	0x0800f24d
 800f1dc:	0800f26d 	.word	0x0800f26d
 800f1e0:	0800f26d 	.word	0x0800f26d
 800f1e4:	0800f26d 	.word	0x0800f26d
 800f1e8:	0800f26d 	.word	0x0800f26d
 800f1ec:	0800f26d 	.word	0x0800f26d
 800f1f0:	0800f26d 	.word	0x0800f26d
 800f1f4:	0800f26d 	.word	0x0800f26d
 800f1f8:	0800f255 	.word	0x0800f255
 800f1fc:	0800f26d 	.word	0x0800f26d
 800f200:	0800f26d 	.word	0x0800f26d
 800f204:	0800f26d 	.word	0x0800f26d
 800f208:	0800f26d 	.word	0x0800f26d
 800f20c:	0800f26d 	.word	0x0800f26d
 800f210:	0800f26d 	.word	0x0800f26d
 800f214:	0800f26d 	.word	0x0800f26d
 800f218:	0800f25d 	.word	0x0800f25d
 800f21c:	0800f26d 	.word	0x0800f26d
 800f220:	0800f26d 	.word	0x0800f26d
 800f224:	0800f26d 	.word	0x0800f26d
 800f228:	0800f26d 	.word	0x0800f26d
 800f22c:	0800f26d 	.word	0x0800f26d
 800f230:	0800f26d 	.word	0x0800f26d
 800f234:	0800f26d 	.word	0x0800f26d
 800f238:	0800f265 	.word	0x0800f265
 800f23c:	2301      	movs	r3, #1
 800f23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f242:	e1c0      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f244:	2304      	movs	r3, #4
 800f246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f24a:	e1bc      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f24c:	2308      	movs	r3, #8
 800f24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f252:	e1b8      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f254:	2310      	movs	r3, #16
 800f256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f25a:	e1b4      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f25c:	2320      	movs	r3, #32
 800f25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f262:	e1b0      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f264:	2340      	movs	r3, #64	; 0x40
 800f266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f26a:	e1ac      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f26c:	2380      	movs	r3, #128	; 0x80
 800f26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f272:	e1a8      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	4a75      	ldr	r2, [pc, #468]	; (800f450 <UART_SetConfig+0x638>)
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d130      	bne.n	800f2e0 <UART_SetConfig+0x4c8>
 800f27e:	4b73      	ldr	r3, [pc, #460]	; (800f44c <UART_SetConfig+0x634>)
 800f280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f282:	f003 0307 	and.w	r3, r3, #7
 800f286:	2b05      	cmp	r3, #5
 800f288:	d826      	bhi.n	800f2d8 <UART_SetConfig+0x4c0>
 800f28a:	a201      	add	r2, pc, #4	; (adr r2, 800f290 <UART_SetConfig+0x478>)
 800f28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f290:	0800f2a9 	.word	0x0800f2a9
 800f294:	0800f2b1 	.word	0x0800f2b1
 800f298:	0800f2b9 	.word	0x0800f2b9
 800f29c:	0800f2c1 	.word	0x0800f2c1
 800f2a0:	0800f2c9 	.word	0x0800f2c9
 800f2a4:	0800f2d1 	.word	0x0800f2d1
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ae:	e18a      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f2b0:	2304      	movs	r3, #4
 800f2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2b6:	e186      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f2b8:	2308      	movs	r3, #8
 800f2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2be:	e182      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f2c0:	2310      	movs	r3, #16
 800f2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2c6:	e17e      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f2c8:	2320      	movs	r3, #32
 800f2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ce:	e17a      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f2d0:	2340      	movs	r3, #64	; 0x40
 800f2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2d6:	e176      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f2d8:	2380      	movs	r3, #128	; 0x80
 800f2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2de:	e172      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	4a5b      	ldr	r2, [pc, #364]	; (800f454 <UART_SetConfig+0x63c>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d130      	bne.n	800f34c <UART_SetConfig+0x534>
 800f2ea:	4b58      	ldr	r3, [pc, #352]	; (800f44c <UART_SetConfig+0x634>)
 800f2ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2ee:	f003 0307 	and.w	r3, r3, #7
 800f2f2:	2b05      	cmp	r3, #5
 800f2f4:	d826      	bhi.n	800f344 <UART_SetConfig+0x52c>
 800f2f6:	a201      	add	r2, pc, #4	; (adr r2, 800f2fc <UART_SetConfig+0x4e4>)
 800f2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2fc:	0800f315 	.word	0x0800f315
 800f300:	0800f31d 	.word	0x0800f31d
 800f304:	0800f325 	.word	0x0800f325
 800f308:	0800f32d 	.word	0x0800f32d
 800f30c:	0800f335 	.word	0x0800f335
 800f310:	0800f33d 	.word	0x0800f33d
 800f314:	2300      	movs	r3, #0
 800f316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f31a:	e154      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f31c:	2304      	movs	r3, #4
 800f31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f322:	e150      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f324:	2308      	movs	r3, #8
 800f326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f32a:	e14c      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f32c:	2310      	movs	r3, #16
 800f32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f332:	e148      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f334:	2320      	movs	r3, #32
 800f336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f33a:	e144      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f33c:	2340      	movs	r3, #64	; 0x40
 800f33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f342:	e140      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f344:	2380      	movs	r3, #128	; 0x80
 800f346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f34a:	e13c      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	4a41      	ldr	r2, [pc, #260]	; (800f458 <UART_SetConfig+0x640>)
 800f352:	4293      	cmp	r3, r2
 800f354:	f040 8082 	bne.w	800f45c <UART_SetConfig+0x644>
 800f358:	4b3c      	ldr	r3, [pc, #240]	; (800f44c <UART_SetConfig+0x634>)
 800f35a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f35c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f360:	2b28      	cmp	r3, #40	; 0x28
 800f362:	d86d      	bhi.n	800f440 <UART_SetConfig+0x628>
 800f364:	a201      	add	r2, pc, #4	; (adr r2, 800f36c <UART_SetConfig+0x554>)
 800f366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f36a:	bf00      	nop
 800f36c:	0800f411 	.word	0x0800f411
 800f370:	0800f441 	.word	0x0800f441
 800f374:	0800f441 	.word	0x0800f441
 800f378:	0800f441 	.word	0x0800f441
 800f37c:	0800f441 	.word	0x0800f441
 800f380:	0800f441 	.word	0x0800f441
 800f384:	0800f441 	.word	0x0800f441
 800f388:	0800f441 	.word	0x0800f441
 800f38c:	0800f419 	.word	0x0800f419
 800f390:	0800f441 	.word	0x0800f441
 800f394:	0800f441 	.word	0x0800f441
 800f398:	0800f441 	.word	0x0800f441
 800f39c:	0800f441 	.word	0x0800f441
 800f3a0:	0800f441 	.word	0x0800f441
 800f3a4:	0800f441 	.word	0x0800f441
 800f3a8:	0800f441 	.word	0x0800f441
 800f3ac:	0800f421 	.word	0x0800f421
 800f3b0:	0800f441 	.word	0x0800f441
 800f3b4:	0800f441 	.word	0x0800f441
 800f3b8:	0800f441 	.word	0x0800f441
 800f3bc:	0800f441 	.word	0x0800f441
 800f3c0:	0800f441 	.word	0x0800f441
 800f3c4:	0800f441 	.word	0x0800f441
 800f3c8:	0800f441 	.word	0x0800f441
 800f3cc:	0800f429 	.word	0x0800f429
 800f3d0:	0800f441 	.word	0x0800f441
 800f3d4:	0800f441 	.word	0x0800f441
 800f3d8:	0800f441 	.word	0x0800f441
 800f3dc:	0800f441 	.word	0x0800f441
 800f3e0:	0800f441 	.word	0x0800f441
 800f3e4:	0800f441 	.word	0x0800f441
 800f3e8:	0800f441 	.word	0x0800f441
 800f3ec:	0800f431 	.word	0x0800f431
 800f3f0:	0800f441 	.word	0x0800f441
 800f3f4:	0800f441 	.word	0x0800f441
 800f3f8:	0800f441 	.word	0x0800f441
 800f3fc:	0800f441 	.word	0x0800f441
 800f400:	0800f441 	.word	0x0800f441
 800f404:	0800f441 	.word	0x0800f441
 800f408:	0800f441 	.word	0x0800f441
 800f40c:	0800f439 	.word	0x0800f439
 800f410:	2301      	movs	r3, #1
 800f412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f416:	e0d6      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f418:	2304      	movs	r3, #4
 800f41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f41e:	e0d2      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f420:	2308      	movs	r3, #8
 800f422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f426:	e0ce      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f428:	2310      	movs	r3, #16
 800f42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f42e:	e0ca      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f430:	2320      	movs	r3, #32
 800f432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f436:	e0c6      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f438:	2340      	movs	r3, #64	; 0x40
 800f43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f43e:	e0c2      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f440:	2380      	movs	r3, #128	; 0x80
 800f442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f446:	e0be      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f448:	40011400 	.word	0x40011400
 800f44c:	58024400 	.word	0x58024400
 800f450:	40007800 	.word	0x40007800
 800f454:	40007c00 	.word	0x40007c00
 800f458:	40011800 	.word	0x40011800
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4aad      	ldr	r2, [pc, #692]	; (800f718 <UART_SetConfig+0x900>)
 800f462:	4293      	cmp	r3, r2
 800f464:	d176      	bne.n	800f554 <UART_SetConfig+0x73c>
 800f466:	4bad      	ldr	r3, [pc, #692]	; (800f71c <UART_SetConfig+0x904>)
 800f468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f46a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f46e:	2b28      	cmp	r3, #40	; 0x28
 800f470:	d86c      	bhi.n	800f54c <UART_SetConfig+0x734>
 800f472:	a201      	add	r2, pc, #4	; (adr r2, 800f478 <UART_SetConfig+0x660>)
 800f474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f478:	0800f51d 	.word	0x0800f51d
 800f47c:	0800f54d 	.word	0x0800f54d
 800f480:	0800f54d 	.word	0x0800f54d
 800f484:	0800f54d 	.word	0x0800f54d
 800f488:	0800f54d 	.word	0x0800f54d
 800f48c:	0800f54d 	.word	0x0800f54d
 800f490:	0800f54d 	.word	0x0800f54d
 800f494:	0800f54d 	.word	0x0800f54d
 800f498:	0800f525 	.word	0x0800f525
 800f49c:	0800f54d 	.word	0x0800f54d
 800f4a0:	0800f54d 	.word	0x0800f54d
 800f4a4:	0800f54d 	.word	0x0800f54d
 800f4a8:	0800f54d 	.word	0x0800f54d
 800f4ac:	0800f54d 	.word	0x0800f54d
 800f4b0:	0800f54d 	.word	0x0800f54d
 800f4b4:	0800f54d 	.word	0x0800f54d
 800f4b8:	0800f52d 	.word	0x0800f52d
 800f4bc:	0800f54d 	.word	0x0800f54d
 800f4c0:	0800f54d 	.word	0x0800f54d
 800f4c4:	0800f54d 	.word	0x0800f54d
 800f4c8:	0800f54d 	.word	0x0800f54d
 800f4cc:	0800f54d 	.word	0x0800f54d
 800f4d0:	0800f54d 	.word	0x0800f54d
 800f4d4:	0800f54d 	.word	0x0800f54d
 800f4d8:	0800f535 	.word	0x0800f535
 800f4dc:	0800f54d 	.word	0x0800f54d
 800f4e0:	0800f54d 	.word	0x0800f54d
 800f4e4:	0800f54d 	.word	0x0800f54d
 800f4e8:	0800f54d 	.word	0x0800f54d
 800f4ec:	0800f54d 	.word	0x0800f54d
 800f4f0:	0800f54d 	.word	0x0800f54d
 800f4f4:	0800f54d 	.word	0x0800f54d
 800f4f8:	0800f53d 	.word	0x0800f53d
 800f4fc:	0800f54d 	.word	0x0800f54d
 800f500:	0800f54d 	.word	0x0800f54d
 800f504:	0800f54d 	.word	0x0800f54d
 800f508:	0800f54d 	.word	0x0800f54d
 800f50c:	0800f54d 	.word	0x0800f54d
 800f510:	0800f54d 	.word	0x0800f54d
 800f514:	0800f54d 	.word	0x0800f54d
 800f518:	0800f545 	.word	0x0800f545
 800f51c:	2301      	movs	r3, #1
 800f51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f522:	e050      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f524:	2304      	movs	r3, #4
 800f526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f52a:	e04c      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f52c:	2308      	movs	r3, #8
 800f52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f532:	e048      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f534:	2310      	movs	r3, #16
 800f536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f53a:	e044      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f53c:	2320      	movs	r3, #32
 800f53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f542:	e040      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f544:	2340      	movs	r3, #64	; 0x40
 800f546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f54a:	e03c      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f54c:	2380      	movs	r3, #128	; 0x80
 800f54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f552:	e038      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	4a71      	ldr	r2, [pc, #452]	; (800f720 <UART_SetConfig+0x908>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d130      	bne.n	800f5c0 <UART_SetConfig+0x7a8>
 800f55e:	4b6f      	ldr	r3, [pc, #444]	; (800f71c <UART_SetConfig+0x904>)
 800f560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f562:	f003 0307 	and.w	r3, r3, #7
 800f566:	2b05      	cmp	r3, #5
 800f568:	d826      	bhi.n	800f5b8 <UART_SetConfig+0x7a0>
 800f56a:	a201      	add	r2, pc, #4	; (adr r2, 800f570 <UART_SetConfig+0x758>)
 800f56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f570:	0800f589 	.word	0x0800f589
 800f574:	0800f591 	.word	0x0800f591
 800f578:	0800f599 	.word	0x0800f599
 800f57c:	0800f5a1 	.word	0x0800f5a1
 800f580:	0800f5a9 	.word	0x0800f5a9
 800f584:	0800f5b1 	.word	0x0800f5b1
 800f588:	2302      	movs	r3, #2
 800f58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f58e:	e01a      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f590:	2304      	movs	r3, #4
 800f592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f596:	e016      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f598:	2308      	movs	r3, #8
 800f59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f59e:	e012      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f5a0:	2310      	movs	r3, #16
 800f5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5a6:	e00e      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f5a8:	2320      	movs	r3, #32
 800f5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ae:	e00a      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f5b0:	2340      	movs	r3, #64	; 0x40
 800f5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5b6:	e006      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f5b8:	2380      	movs	r3, #128	; 0x80
 800f5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5be:	e002      	b.n	800f5c6 <UART_SetConfig+0x7ae>
 800f5c0:	2380      	movs	r3, #128	; 0x80
 800f5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	4a55      	ldr	r2, [pc, #340]	; (800f720 <UART_SetConfig+0x908>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	f040 80f8 	bne.w	800f7c2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f5d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f5d6:	2b20      	cmp	r3, #32
 800f5d8:	dc46      	bgt.n	800f668 <UART_SetConfig+0x850>
 800f5da:	2b02      	cmp	r3, #2
 800f5dc:	db75      	blt.n	800f6ca <UART_SetConfig+0x8b2>
 800f5de:	3b02      	subs	r3, #2
 800f5e0:	2b1e      	cmp	r3, #30
 800f5e2:	d872      	bhi.n	800f6ca <UART_SetConfig+0x8b2>
 800f5e4:	a201      	add	r2, pc, #4	; (adr r2, 800f5ec <UART_SetConfig+0x7d4>)
 800f5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ea:	bf00      	nop
 800f5ec:	0800f66f 	.word	0x0800f66f
 800f5f0:	0800f6cb 	.word	0x0800f6cb
 800f5f4:	0800f677 	.word	0x0800f677
 800f5f8:	0800f6cb 	.word	0x0800f6cb
 800f5fc:	0800f6cb 	.word	0x0800f6cb
 800f600:	0800f6cb 	.word	0x0800f6cb
 800f604:	0800f687 	.word	0x0800f687
 800f608:	0800f6cb 	.word	0x0800f6cb
 800f60c:	0800f6cb 	.word	0x0800f6cb
 800f610:	0800f6cb 	.word	0x0800f6cb
 800f614:	0800f6cb 	.word	0x0800f6cb
 800f618:	0800f6cb 	.word	0x0800f6cb
 800f61c:	0800f6cb 	.word	0x0800f6cb
 800f620:	0800f6cb 	.word	0x0800f6cb
 800f624:	0800f697 	.word	0x0800f697
 800f628:	0800f6cb 	.word	0x0800f6cb
 800f62c:	0800f6cb 	.word	0x0800f6cb
 800f630:	0800f6cb 	.word	0x0800f6cb
 800f634:	0800f6cb 	.word	0x0800f6cb
 800f638:	0800f6cb 	.word	0x0800f6cb
 800f63c:	0800f6cb 	.word	0x0800f6cb
 800f640:	0800f6cb 	.word	0x0800f6cb
 800f644:	0800f6cb 	.word	0x0800f6cb
 800f648:	0800f6cb 	.word	0x0800f6cb
 800f64c:	0800f6cb 	.word	0x0800f6cb
 800f650:	0800f6cb 	.word	0x0800f6cb
 800f654:	0800f6cb 	.word	0x0800f6cb
 800f658:	0800f6cb 	.word	0x0800f6cb
 800f65c:	0800f6cb 	.word	0x0800f6cb
 800f660:	0800f6cb 	.word	0x0800f6cb
 800f664:	0800f6bd 	.word	0x0800f6bd
 800f668:	2b40      	cmp	r3, #64	; 0x40
 800f66a:	d02a      	beq.n	800f6c2 <UART_SetConfig+0x8aa>
 800f66c:	e02d      	b.n	800f6ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f66e:	f7fc f923 	bl	800b8b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800f672:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f674:	e02f      	b.n	800f6d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7fc f932 	bl	800b8e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f684:	e027      	b.n	800f6d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f686:	f107 0318 	add.w	r3, r7, #24
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fc fa7e 	bl	800bb8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f694:	e01f      	b.n	800f6d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f696:	4b21      	ldr	r3, [pc, #132]	; (800f71c <UART_SetConfig+0x904>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f003 0320 	and.w	r3, r3, #32
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d009      	beq.n	800f6b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f6a2:	4b1e      	ldr	r3, [pc, #120]	; (800f71c <UART_SetConfig+0x904>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	08db      	lsrs	r3, r3, #3
 800f6a8:	f003 0303 	and.w	r3, r3, #3
 800f6ac:	4a1d      	ldr	r2, [pc, #116]	; (800f724 <UART_SetConfig+0x90c>)
 800f6ae:	fa22 f303 	lsr.w	r3, r2, r3
 800f6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f6b4:	e00f      	b.n	800f6d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f6b6:	4b1b      	ldr	r3, [pc, #108]	; (800f724 <UART_SetConfig+0x90c>)
 800f6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6ba:	e00c      	b.n	800f6d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f6bc:	4b1a      	ldr	r3, [pc, #104]	; (800f728 <UART_SetConfig+0x910>)
 800f6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6c0:	e009      	b.n	800f6d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f6c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6c8:	e005      	b.n	800f6d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f6d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	f000 81ee 	beq.w	800faba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6e2:	4a12      	ldr	r2, [pc, #72]	; (800f72c <UART_SetConfig+0x914>)
 800f6e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6f0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	685a      	ldr	r2, [r3, #4]
 800f6f6:	4613      	mov	r3, r2
 800f6f8:	005b      	lsls	r3, r3, #1
 800f6fa:	4413      	add	r3, r2
 800f6fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d305      	bcc.n	800f70e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	685b      	ldr	r3, [r3, #4]
 800f706:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d910      	bls.n	800f730 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f70e:	2301      	movs	r3, #1
 800f710:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f714:	e1d1      	b.n	800faba <UART_SetConfig+0xca2>
 800f716:	bf00      	nop
 800f718:	40011c00 	.word	0x40011c00
 800f71c:	58024400 	.word	0x58024400
 800f720:	58000c00 	.word	0x58000c00
 800f724:	03d09000 	.word	0x03d09000
 800f728:	003d0900 	.word	0x003d0900
 800f72c:	0801c9bc 	.word	0x0801c9bc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f732:	2200      	movs	r2, #0
 800f734:	60bb      	str	r3, [r7, #8]
 800f736:	60fa      	str	r2, [r7, #12]
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f73c:	4ac0      	ldr	r2, [pc, #768]	; (800fa40 <UART_SetConfig+0xc28>)
 800f73e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f742:	b29b      	uxth	r3, r3
 800f744:	2200      	movs	r2, #0
 800f746:	603b      	str	r3, [r7, #0]
 800f748:	607a      	str	r2, [r7, #4]
 800f74a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f74e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f752:	f7f0 fff1 	bl	8000738 <__aeabi_uldivmod>
 800f756:	4602      	mov	r2, r0
 800f758:	460b      	mov	r3, r1
 800f75a:	4610      	mov	r0, r2
 800f75c:	4619      	mov	r1, r3
 800f75e:	f04f 0200 	mov.w	r2, #0
 800f762:	f04f 0300 	mov.w	r3, #0
 800f766:	020b      	lsls	r3, r1, #8
 800f768:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f76c:	0202      	lsls	r2, r0, #8
 800f76e:	6979      	ldr	r1, [r7, #20]
 800f770:	6849      	ldr	r1, [r1, #4]
 800f772:	0849      	lsrs	r1, r1, #1
 800f774:	2000      	movs	r0, #0
 800f776:	460c      	mov	r4, r1
 800f778:	4605      	mov	r5, r0
 800f77a:	eb12 0804 	adds.w	r8, r2, r4
 800f77e:	eb43 0905 	adc.w	r9, r3, r5
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	2200      	movs	r2, #0
 800f788:	469a      	mov	sl, r3
 800f78a:	4693      	mov	fp, r2
 800f78c:	4652      	mov	r2, sl
 800f78e:	465b      	mov	r3, fp
 800f790:	4640      	mov	r0, r8
 800f792:	4649      	mov	r1, r9
 800f794:	f7f0 ffd0 	bl	8000738 <__aeabi_uldivmod>
 800f798:	4602      	mov	r2, r0
 800f79a:	460b      	mov	r3, r1
 800f79c:	4613      	mov	r3, r2
 800f79e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f7a6:	d308      	bcc.n	800f7ba <UART_SetConfig+0x9a2>
 800f7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f7ae:	d204      	bcs.n	800f7ba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7b6:	60da      	str	r2, [r3, #12]
 800f7b8:	e17f      	b.n	800faba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f7c0:	e17b      	b.n	800faba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	69db      	ldr	r3, [r3, #28]
 800f7c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7ca:	f040 80bd 	bne.w	800f948 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f7ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f7d2:	2b20      	cmp	r3, #32
 800f7d4:	dc48      	bgt.n	800f868 <UART_SetConfig+0xa50>
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	db7b      	blt.n	800f8d2 <UART_SetConfig+0xaba>
 800f7da:	2b20      	cmp	r3, #32
 800f7dc:	d879      	bhi.n	800f8d2 <UART_SetConfig+0xaba>
 800f7de:	a201      	add	r2, pc, #4	; (adr r2, 800f7e4 <UART_SetConfig+0x9cc>)
 800f7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7e4:	0800f86f 	.word	0x0800f86f
 800f7e8:	0800f877 	.word	0x0800f877
 800f7ec:	0800f8d3 	.word	0x0800f8d3
 800f7f0:	0800f8d3 	.word	0x0800f8d3
 800f7f4:	0800f87f 	.word	0x0800f87f
 800f7f8:	0800f8d3 	.word	0x0800f8d3
 800f7fc:	0800f8d3 	.word	0x0800f8d3
 800f800:	0800f8d3 	.word	0x0800f8d3
 800f804:	0800f88f 	.word	0x0800f88f
 800f808:	0800f8d3 	.word	0x0800f8d3
 800f80c:	0800f8d3 	.word	0x0800f8d3
 800f810:	0800f8d3 	.word	0x0800f8d3
 800f814:	0800f8d3 	.word	0x0800f8d3
 800f818:	0800f8d3 	.word	0x0800f8d3
 800f81c:	0800f8d3 	.word	0x0800f8d3
 800f820:	0800f8d3 	.word	0x0800f8d3
 800f824:	0800f89f 	.word	0x0800f89f
 800f828:	0800f8d3 	.word	0x0800f8d3
 800f82c:	0800f8d3 	.word	0x0800f8d3
 800f830:	0800f8d3 	.word	0x0800f8d3
 800f834:	0800f8d3 	.word	0x0800f8d3
 800f838:	0800f8d3 	.word	0x0800f8d3
 800f83c:	0800f8d3 	.word	0x0800f8d3
 800f840:	0800f8d3 	.word	0x0800f8d3
 800f844:	0800f8d3 	.word	0x0800f8d3
 800f848:	0800f8d3 	.word	0x0800f8d3
 800f84c:	0800f8d3 	.word	0x0800f8d3
 800f850:	0800f8d3 	.word	0x0800f8d3
 800f854:	0800f8d3 	.word	0x0800f8d3
 800f858:	0800f8d3 	.word	0x0800f8d3
 800f85c:	0800f8d3 	.word	0x0800f8d3
 800f860:	0800f8d3 	.word	0x0800f8d3
 800f864:	0800f8c5 	.word	0x0800f8c5
 800f868:	2b40      	cmp	r3, #64	; 0x40
 800f86a:	d02e      	beq.n	800f8ca <UART_SetConfig+0xab2>
 800f86c:	e031      	b.n	800f8d2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f86e:	f7fa f985 	bl	8009b7c <HAL_RCC_GetPCLK1Freq>
 800f872:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f874:	e033      	b.n	800f8de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f876:	f7fa f997 	bl	8009ba8 <HAL_RCC_GetPCLK2Freq>
 800f87a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f87c:	e02f      	b.n	800f8de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f87e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f882:	4618      	mov	r0, r3
 800f884:	f7fc f82e 	bl	800b8e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f88c:	e027      	b.n	800f8de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f88e:	f107 0318 	add.w	r3, r7, #24
 800f892:	4618      	mov	r0, r3
 800f894:	f7fc f97a 	bl	800bb8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f898:	69fb      	ldr	r3, [r7, #28]
 800f89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f89c:	e01f      	b.n	800f8de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f89e:	4b69      	ldr	r3, [pc, #420]	; (800fa44 <UART_SetConfig+0xc2c>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f003 0320 	and.w	r3, r3, #32
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d009      	beq.n	800f8be <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f8aa:	4b66      	ldr	r3, [pc, #408]	; (800fa44 <UART_SetConfig+0xc2c>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	08db      	lsrs	r3, r3, #3
 800f8b0:	f003 0303 	and.w	r3, r3, #3
 800f8b4:	4a64      	ldr	r2, [pc, #400]	; (800fa48 <UART_SetConfig+0xc30>)
 800f8b6:	fa22 f303 	lsr.w	r3, r2, r3
 800f8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f8bc:	e00f      	b.n	800f8de <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f8be:	4b62      	ldr	r3, [pc, #392]	; (800fa48 <UART_SetConfig+0xc30>)
 800f8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8c2:	e00c      	b.n	800f8de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f8c4:	4b61      	ldr	r3, [pc, #388]	; (800fa4c <UART_SetConfig+0xc34>)
 800f8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8c8:	e009      	b.n	800f8de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f8ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8d0:	e005      	b.n	800f8de <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f8dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f8de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	f000 80ea 	beq.w	800faba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ea:	4a55      	ldr	r2, [pc, #340]	; (800fa40 <UART_SetConfig+0xc28>)
 800f8ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8f8:	005a      	lsls	r2, r3, #1
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	685b      	ldr	r3, [r3, #4]
 800f8fe:	085b      	lsrs	r3, r3, #1
 800f900:	441a      	add	r2, r3
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	fbb2 f3f3 	udiv	r3, r2, r3
 800f90a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f90e:	2b0f      	cmp	r3, #15
 800f910:	d916      	bls.n	800f940 <UART_SetConfig+0xb28>
 800f912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f918:	d212      	bcs.n	800f940 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	f023 030f 	bic.w	r3, r3, #15
 800f922:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f926:	085b      	lsrs	r3, r3, #1
 800f928:	b29b      	uxth	r3, r3
 800f92a:	f003 0307 	and.w	r3, r3, #7
 800f92e:	b29a      	uxth	r2, r3
 800f930:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f932:	4313      	orrs	r3, r2
 800f934:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f93c:	60da      	str	r2, [r3, #12]
 800f93e:	e0bc      	b.n	800faba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f940:	2301      	movs	r3, #1
 800f942:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f946:	e0b8      	b.n	800faba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f948:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f94c:	2b20      	cmp	r3, #32
 800f94e:	dc4b      	bgt.n	800f9e8 <UART_SetConfig+0xbd0>
 800f950:	2b00      	cmp	r3, #0
 800f952:	f2c0 8087 	blt.w	800fa64 <UART_SetConfig+0xc4c>
 800f956:	2b20      	cmp	r3, #32
 800f958:	f200 8084 	bhi.w	800fa64 <UART_SetConfig+0xc4c>
 800f95c:	a201      	add	r2, pc, #4	; (adr r2, 800f964 <UART_SetConfig+0xb4c>)
 800f95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f962:	bf00      	nop
 800f964:	0800f9ef 	.word	0x0800f9ef
 800f968:	0800f9f7 	.word	0x0800f9f7
 800f96c:	0800fa65 	.word	0x0800fa65
 800f970:	0800fa65 	.word	0x0800fa65
 800f974:	0800f9ff 	.word	0x0800f9ff
 800f978:	0800fa65 	.word	0x0800fa65
 800f97c:	0800fa65 	.word	0x0800fa65
 800f980:	0800fa65 	.word	0x0800fa65
 800f984:	0800fa0f 	.word	0x0800fa0f
 800f988:	0800fa65 	.word	0x0800fa65
 800f98c:	0800fa65 	.word	0x0800fa65
 800f990:	0800fa65 	.word	0x0800fa65
 800f994:	0800fa65 	.word	0x0800fa65
 800f998:	0800fa65 	.word	0x0800fa65
 800f99c:	0800fa65 	.word	0x0800fa65
 800f9a0:	0800fa65 	.word	0x0800fa65
 800f9a4:	0800fa1f 	.word	0x0800fa1f
 800f9a8:	0800fa65 	.word	0x0800fa65
 800f9ac:	0800fa65 	.word	0x0800fa65
 800f9b0:	0800fa65 	.word	0x0800fa65
 800f9b4:	0800fa65 	.word	0x0800fa65
 800f9b8:	0800fa65 	.word	0x0800fa65
 800f9bc:	0800fa65 	.word	0x0800fa65
 800f9c0:	0800fa65 	.word	0x0800fa65
 800f9c4:	0800fa65 	.word	0x0800fa65
 800f9c8:	0800fa65 	.word	0x0800fa65
 800f9cc:	0800fa65 	.word	0x0800fa65
 800f9d0:	0800fa65 	.word	0x0800fa65
 800f9d4:	0800fa65 	.word	0x0800fa65
 800f9d8:	0800fa65 	.word	0x0800fa65
 800f9dc:	0800fa65 	.word	0x0800fa65
 800f9e0:	0800fa65 	.word	0x0800fa65
 800f9e4:	0800fa57 	.word	0x0800fa57
 800f9e8:	2b40      	cmp	r3, #64	; 0x40
 800f9ea:	d037      	beq.n	800fa5c <UART_SetConfig+0xc44>
 800f9ec:	e03a      	b.n	800fa64 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f9ee:	f7fa f8c5 	bl	8009b7c <HAL_RCC_GetPCLK1Freq>
 800f9f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f9f4:	e03c      	b.n	800fa70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f9f6:	f7fa f8d7 	bl	8009ba8 <HAL_RCC_GetPCLK2Freq>
 800f9fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f9fc:	e038      	b.n	800fa70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7fb ff6e 	bl	800b8e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa0c:	e030      	b.n	800fa70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa0e:	f107 0318 	add.w	r3, r7, #24
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7fc f8ba 	bl	800bb8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fa18:	69fb      	ldr	r3, [r7, #28]
 800fa1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa1c:	e028      	b.n	800fa70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa1e:	4b09      	ldr	r3, [pc, #36]	; (800fa44 <UART_SetConfig+0xc2c>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	f003 0320 	and.w	r3, r3, #32
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d012      	beq.n	800fa50 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa2a:	4b06      	ldr	r3, [pc, #24]	; (800fa44 <UART_SetConfig+0xc2c>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	08db      	lsrs	r3, r3, #3
 800fa30:	f003 0303 	and.w	r3, r3, #3
 800fa34:	4a04      	ldr	r2, [pc, #16]	; (800fa48 <UART_SetConfig+0xc30>)
 800fa36:	fa22 f303 	lsr.w	r3, r2, r3
 800fa3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa3c:	e018      	b.n	800fa70 <UART_SetConfig+0xc58>
 800fa3e:	bf00      	nop
 800fa40:	0801c9bc 	.word	0x0801c9bc
 800fa44:	58024400 	.word	0x58024400
 800fa48:	03d09000 	.word	0x03d09000
 800fa4c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800fa50:	4b24      	ldr	r3, [pc, #144]	; (800fae4 <UART_SetConfig+0xccc>)
 800fa52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa54:	e00c      	b.n	800fa70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa56:	4b24      	ldr	r3, [pc, #144]	; (800fae8 <UART_SetConfig+0xcd0>)
 800fa58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa5a:	e009      	b.n	800fa70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa62:	e005      	b.n	800fa70 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800fa64:	2300      	movs	r3, #0
 800fa66:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fa68:	2301      	movs	r3, #1
 800fa6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fa6e:	bf00      	nop
    }

    if (pclk != 0U)
 800fa70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d021      	beq.n	800faba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa7a:	4a1c      	ldr	r2, [pc, #112]	; (800faec <UART_SetConfig+0xcd4>)
 800fa7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa80:	461a      	mov	r2, r3
 800fa82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa84:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	085b      	lsrs	r3, r3, #1
 800fa8e:	441a      	add	r2, r3
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa98:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa9c:	2b0f      	cmp	r3, #15
 800fa9e:	d909      	bls.n	800fab4 <UART_SetConfig+0xc9c>
 800faa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800faa6:	d205      	bcs.n	800fab4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800faa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faaa:	b29a      	uxth	r2, r3
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	60da      	str	r2, [r3, #12]
 800fab2:	e002      	b.n	800faba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fab4:	2301      	movs	r3, #1
 800fab6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	2201      	movs	r2, #1
 800fabe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	2201      	movs	r2, #1
 800fac6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	2200      	movs	r2, #0
 800face:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	2200      	movs	r2, #0
 800fad4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800fad6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3748      	adds	r7, #72	; 0x48
 800fade:	46bd      	mov	sp, r7
 800fae0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fae4:	03d09000 	.word	0x03d09000
 800fae8:	003d0900 	.word	0x003d0900
 800faec:	0801c9bc 	.word	0x0801c9bc

0800faf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b083      	sub	sp, #12
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fafc:	f003 0301 	and.w	r3, r3, #1
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d00a      	beq.n	800fb1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	685b      	ldr	r3, [r3, #4]
 800fb0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	430a      	orrs	r2, r1
 800fb18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb1e:	f003 0302 	and.w	r3, r3, #2
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d00a      	beq.n	800fb3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	685b      	ldr	r3, [r3, #4]
 800fb2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	430a      	orrs	r2, r1
 800fb3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb40:	f003 0304 	and.w	r3, r3, #4
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d00a      	beq.n	800fb5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	430a      	orrs	r2, r1
 800fb5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb62:	f003 0308 	and.w	r3, r3, #8
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d00a      	beq.n	800fb80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	430a      	orrs	r2, r1
 800fb7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb84:	f003 0310 	and.w	r3, r3, #16
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d00a      	beq.n	800fba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	689b      	ldr	r3, [r3, #8]
 800fb92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	430a      	orrs	r2, r1
 800fba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fba6:	f003 0320 	and.w	r3, r3, #32
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d00a      	beq.n	800fbc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	689b      	ldr	r3, [r3, #8]
 800fbb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	430a      	orrs	r2, r1
 800fbc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d01a      	beq.n	800fc06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	430a      	orrs	r2, r1
 800fbe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fbee:	d10a      	bne.n	800fc06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	430a      	orrs	r2, r1
 800fc04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d00a      	beq.n	800fc28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	685b      	ldr	r3, [r3, #4]
 800fc18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	430a      	orrs	r2, r1
 800fc26:	605a      	str	r2, [r3, #4]
  }
}
 800fc28:	bf00      	nop
 800fc2a:	370c      	adds	r7, #12
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr

0800fc34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b098      	sub	sp, #96	; 0x60
 800fc38:	af02      	add	r7, sp, #8
 800fc3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fc44:	f7f3 f8ba 	bl	8002dbc <HAL_GetTick>
 800fc48:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f003 0308 	and.w	r3, r3, #8
 800fc54:	2b08      	cmp	r3, #8
 800fc56:	d12f      	bne.n	800fcb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fc5c:	9300      	str	r3, [sp, #0]
 800fc5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc60:	2200      	movs	r2, #0
 800fc62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f000 f88e 	bl	800fd88 <UART_WaitOnFlagUntilTimeout>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d022      	beq.n	800fcb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7a:	e853 3f00 	ldrex	r3, [r3]
 800fc7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc86:	653b      	str	r3, [r7, #80]	; 0x50
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	461a      	mov	r2, r3
 800fc8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc90:	647b      	str	r3, [r7, #68]	; 0x44
 800fc92:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fc96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc98:	e841 2300 	strex	r3, r2, [r1]
 800fc9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fc9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d1e6      	bne.n	800fc72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2220      	movs	r2, #32
 800fca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fcb4:	2303      	movs	r3, #3
 800fcb6:	e063      	b.n	800fd80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	f003 0304 	and.w	r3, r3, #4
 800fcc2:	2b04      	cmp	r3, #4
 800fcc4:	d149      	bne.n	800fd5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fcc6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fcca:	9300      	str	r3, [sp, #0]
 800fccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcce:	2200      	movs	r2, #0
 800fcd0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f000 f857 	bl	800fd88 <UART_WaitOnFlagUntilTimeout>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d03c      	beq.n	800fd5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce8:	e853 3f00 	ldrex	r3, [r3]
 800fcec:	623b      	str	r3, [r7, #32]
   return(result);
 800fcee:	6a3b      	ldr	r3, [r7, #32]
 800fcf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fcf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcfe:	633b      	str	r3, [r7, #48]	; 0x30
 800fd00:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd06:	e841 2300 	strex	r3, r2, [r1]
 800fd0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d1e6      	bne.n	800fce0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	3308      	adds	r3, #8
 800fd18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	e853 3f00 	ldrex	r3, [r3]
 800fd20:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f023 0301 	bic.w	r3, r3, #1
 800fd28:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	3308      	adds	r3, #8
 800fd30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd32:	61fa      	str	r2, [r7, #28]
 800fd34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd36:	69b9      	ldr	r1, [r7, #24]
 800fd38:	69fa      	ldr	r2, [r7, #28]
 800fd3a:	e841 2300 	strex	r3, r2, [r1]
 800fd3e:	617b      	str	r3, [r7, #20]
   return(result);
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d1e5      	bne.n	800fd12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2220      	movs	r2, #32
 800fd4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd56:	2303      	movs	r3, #3
 800fd58:	e012      	b.n	800fd80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2220      	movs	r2, #32
 800fd5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2220      	movs	r2, #32
 800fd66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2200      	movs	r2, #0
 800fd74:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2200      	movs	r2, #0
 800fd7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fd7e:	2300      	movs	r3, #0
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3758      	adds	r7, #88	; 0x58
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	60f8      	str	r0, [r7, #12]
 800fd90:	60b9      	str	r1, [r7, #8]
 800fd92:	603b      	str	r3, [r7, #0]
 800fd94:	4613      	mov	r3, r2
 800fd96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd98:	e049      	b.n	800fe2e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fda0:	d045      	beq.n	800fe2e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fda2:	f7f3 f80b 	bl	8002dbc <HAL_GetTick>
 800fda6:	4602      	mov	r2, r0
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	1ad3      	subs	r3, r2, r3
 800fdac:	69ba      	ldr	r2, [r7, #24]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d302      	bcc.n	800fdb8 <UART_WaitOnFlagUntilTimeout+0x30>
 800fdb2:	69bb      	ldr	r3, [r7, #24]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d101      	bne.n	800fdbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fdb8:	2303      	movs	r3, #3
 800fdba:	e048      	b.n	800fe4e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	f003 0304 	and.w	r3, r3, #4
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d031      	beq.n	800fe2e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	69db      	ldr	r3, [r3, #28]
 800fdd0:	f003 0308 	and.w	r3, r3, #8
 800fdd4:	2b08      	cmp	r3, #8
 800fdd6:	d110      	bne.n	800fdfa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	2208      	movs	r2, #8
 800fdde:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800fde0:	68f8      	ldr	r0, [r7, #12]
 800fde2:	f000 f839 	bl	800fe58 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2208      	movs	r2, #8
 800fdea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	e029      	b.n	800fe4e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	69db      	ldr	r3, [r3, #28]
 800fe00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe08:	d111      	bne.n	800fe2e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fe14:	68f8      	ldr	r0, [r7, #12]
 800fe16:	f000 f81f 	bl	800fe58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	2220      	movs	r2, #32
 800fe1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	2200      	movs	r2, #0
 800fe26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fe2a:	2303      	movs	r3, #3
 800fe2c:	e00f      	b.n	800fe4e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	69da      	ldr	r2, [r3, #28]
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	4013      	ands	r3, r2
 800fe38:	68ba      	ldr	r2, [r7, #8]
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	bf0c      	ite	eq
 800fe3e:	2301      	moveq	r3, #1
 800fe40:	2300      	movne	r3, #0
 800fe42:	b2db      	uxtb	r3, r3
 800fe44:	461a      	mov	r2, r3
 800fe46:	79fb      	ldrb	r3, [r7, #7]
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d0a6      	beq.n	800fd9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fe4c:	2300      	movs	r3, #0
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3710      	adds	r7, #16
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
	...

0800fe58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b095      	sub	sp, #84	; 0x54
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe68:	e853 3f00 	ldrex	r3, [r3]
 800fe6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fe6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fe74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe7e:	643b      	str	r3, [r7, #64]	; 0x40
 800fe80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fe84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fe86:	e841 2300 	strex	r3, r2, [r1]
 800fe8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fe8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d1e6      	bne.n	800fe60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	3308      	adds	r3, #8
 800fe98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe9a:	6a3b      	ldr	r3, [r7, #32]
 800fe9c:	e853 3f00 	ldrex	r3, [r3]
 800fea0:	61fb      	str	r3, [r7, #28]
   return(result);
 800fea2:	69fa      	ldr	r2, [r7, #28]
 800fea4:	4b1e      	ldr	r3, [pc, #120]	; (800ff20 <UART_EndRxTransfer+0xc8>)
 800fea6:	4013      	ands	r3, r2
 800fea8:	64bb      	str	r3, [r7, #72]	; 0x48
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	3308      	adds	r3, #8
 800feb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800feb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800feb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800feb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800feba:	e841 2300 	strex	r3, r2, [r1]
 800febe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d1e5      	bne.n	800fe92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800feca:	2b01      	cmp	r3, #1
 800fecc:	d118      	bne.n	800ff00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	e853 3f00 	ldrex	r3, [r3]
 800feda:	60bb      	str	r3, [r7, #8]
   return(result);
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	f023 0310 	bic.w	r3, r3, #16
 800fee2:	647b      	str	r3, [r7, #68]	; 0x44
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	461a      	mov	r2, r3
 800feea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800feec:	61bb      	str	r3, [r7, #24]
 800feee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fef0:	6979      	ldr	r1, [r7, #20]
 800fef2:	69ba      	ldr	r2, [r7, #24]
 800fef4:	e841 2300 	strex	r3, r2, [r1]
 800fef8:	613b      	str	r3, [r7, #16]
   return(result);
 800fefa:	693b      	ldr	r3, [r7, #16]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d1e6      	bne.n	800fece <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2220      	movs	r2, #32
 800ff04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2200      	movs	r2, #0
 800ff12:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ff14:	bf00      	nop
 800ff16:	3754      	adds	r7, #84	; 0x54
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr
 800ff20:	effffffe 	.word	0xeffffffe

0800ff24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff24:	b480      	push	{r7}
 800ff26:	b085      	sub	sp, #20
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	d101      	bne.n	800ff3a <HAL_UARTEx_DisableFifoMode+0x16>
 800ff36:	2302      	movs	r3, #2
 800ff38:	e027      	b.n	800ff8a <HAL_UARTEx_DisableFifoMode+0x66>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2201      	movs	r2, #1
 800ff3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2224      	movs	r2, #36	; 0x24
 800ff46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	681a      	ldr	r2, [r3, #0]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	f022 0201 	bic.w	r2, r2, #1
 800ff60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ff68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	68fa      	ldr	r2, [r7, #12]
 800ff76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2220      	movs	r2, #32
 800ff7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2200      	movs	r2, #0
 800ff84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ff88:	2300      	movs	r3, #0
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3714      	adds	r7, #20
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr

0800ff96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff96:	b580      	push	{r7, lr}
 800ff98:	b084      	sub	sp, #16
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
 800ff9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ffa6:	2b01      	cmp	r3, #1
 800ffa8:	d101      	bne.n	800ffae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ffaa:	2302      	movs	r3, #2
 800ffac:	e02d      	b.n	801000a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2201      	movs	r2, #1
 800ffb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2224      	movs	r2, #36	; 0x24
 800ffba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f022 0201 	bic.w	r2, r2, #1
 800ffd4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	689b      	ldr	r3, [r3, #8]
 800ffdc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	683a      	ldr	r2, [r7, #0]
 800ffe6:	430a      	orrs	r2, r1
 800ffe8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 f850 	bl	8010090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	68fa      	ldr	r2, [r7, #12]
 800fff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2220      	movs	r2, #32
 800fffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2200      	movs	r2, #0
 8010004:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010008:	2300      	movs	r3, #0
}
 801000a:	4618      	mov	r0, r3
 801000c:	3710      	adds	r7, #16
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}

08010012 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010012:	b580      	push	{r7, lr}
 8010014:	b084      	sub	sp, #16
 8010016:	af00      	add	r7, sp, #0
 8010018:	6078      	str	r0, [r7, #4]
 801001a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010022:	2b01      	cmp	r3, #1
 8010024:	d101      	bne.n	801002a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010026:	2302      	movs	r3, #2
 8010028:	e02d      	b.n	8010086 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2201      	movs	r2, #1
 801002e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2224      	movs	r2, #36	; 0x24
 8010036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	681a      	ldr	r2, [r3, #0]
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	f022 0201 	bic.w	r2, r2, #1
 8010050:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	689b      	ldr	r3, [r3, #8]
 8010058:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	683a      	ldr	r2, [r7, #0]
 8010062:	430a      	orrs	r2, r1
 8010064:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f000 f812 	bl	8010090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	68fa      	ldr	r2, [r7, #12]
 8010072:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2220      	movs	r2, #32
 8010078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2200      	movs	r2, #0
 8010080:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010084:	2300      	movs	r3, #0
}
 8010086:	4618      	mov	r0, r3
 8010088:	3710      	adds	r7, #16
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
	...

08010090 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010090:	b480      	push	{r7}
 8010092:	b085      	sub	sp, #20
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801009c:	2b00      	cmp	r3, #0
 801009e:	d108      	bne.n	80100b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2201      	movs	r2, #1
 80100a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2201      	movs	r2, #1
 80100ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80100b0:	e031      	b.n	8010116 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80100b2:	2310      	movs	r3, #16
 80100b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80100b6:	2310      	movs	r3, #16
 80100b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	689b      	ldr	r3, [r3, #8]
 80100c0:	0e5b      	lsrs	r3, r3, #25
 80100c2:	b2db      	uxtb	r3, r3
 80100c4:	f003 0307 	and.w	r3, r3, #7
 80100c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	689b      	ldr	r3, [r3, #8]
 80100d0:	0f5b      	lsrs	r3, r3, #29
 80100d2:	b2db      	uxtb	r3, r3
 80100d4:	f003 0307 	and.w	r3, r3, #7
 80100d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100da:	7bbb      	ldrb	r3, [r7, #14]
 80100dc:	7b3a      	ldrb	r2, [r7, #12]
 80100de:	4911      	ldr	r1, [pc, #68]	; (8010124 <UARTEx_SetNbDataToProcess+0x94>)
 80100e0:	5c8a      	ldrb	r2, [r1, r2]
 80100e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80100e6:	7b3a      	ldrb	r2, [r7, #12]
 80100e8:	490f      	ldr	r1, [pc, #60]	; (8010128 <UARTEx_SetNbDataToProcess+0x98>)
 80100ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100f8:	7bfb      	ldrb	r3, [r7, #15]
 80100fa:	7b7a      	ldrb	r2, [r7, #13]
 80100fc:	4909      	ldr	r1, [pc, #36]	; (8010124 <UARTEx_SetNbDataToProcess+0x94>)
 80100fe:	5c8a      	ldrb	r2, [r1, r2]
 8010100:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010104:	7b7a      	ldrb	r2, [r7, #13]
 8010106:	4908      	ldr	r1, [pc, #32]	; (8010128 <UARTEx_SetNbDataToProcess+0x98>)
 8010108:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801010a:	fb93 f3f2 	sdiv	r3, r3, r2
 801010e:	b29a      	uxth	r2, r3
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010116:	bf00      	nop
 8010118:	3714      	adds	r7, #20
 801011a:	46bd      	mov	sp, r7
 801011c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010120:	4770      	bx	lr
 8010122:	bf00      	nop
 8010124:	0801c9d4 	.word	0x0801c9d4
 8010128:	0801c9dc 	.word	0x0801c9dc

0801012c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801012c:	b084      	sub	sp, #16
 801012e:	b480      	push	{r7}
 8010130:	b085      	sub	sp, #20
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
 8010136:	f107 001c 	add.w	r0, r7, #28
 801013a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801013e:	2300      	movs	r3, #0
 8010140:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8010142:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8010144:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8010146:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 801014a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 801014c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801014e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8010152:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	4313      	orrs	r3, r2
 8010158:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	685a      	ldr	r2, [r3, #4]
 801015e:	4b07      	ldr	r3, [pc, #28]	; (801017c <SDMMC_Init+0x50>)
 8010160:	4013      	ands	r3, r2
 8010162:	68fa      	ldr	r2, [r7, #12]
 8010164:	431a      	orrs	r2, r3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801016a:	2300      	movs	r3, #0
}
 801016c:	4618      	mov	r0, r3
 801016e:	3714      	adds	r7, #20
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	b004      	add	sp, #16
 8010178:	4770      	bx	lr
 801017a:	bf00      	nop
 801017c:	ffc02c00 	.word	0xffc02c00

08010180 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010180:	b480      	push	{r7}
 8010182:	b083      	sub	sp, #12
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801018e:	4618      	mov	r0, r3
 8010190:	370c      	adds	r7, #12
 8010192:	46bd      	mov	sp, r7
 8010194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010198:	4770      	bx	lr

0801019a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801019a:	b480      	push	{r7}
 801019c:	b083      	sub	sp, #12
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
 80101a2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	681a      	ldr	r2, [r3, #0]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80101ae:	2300      	movs	r3, #0
}
 80101b0:	4618      	mov	r0, r3
 80101b2:	370c      	adds	r7, #12
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr

080101bc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80101bc:	b480      	push	{r7}
 80101be:	b083      	sub	sp, #12
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	f043 0203 	orr.w	r2, r3, #3
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80101d0:	2300      	movs	r3, #0
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	370c      	adds	r7, #12
 80101d6:	46bd      	mov	sp, r7
 80101d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101dc:	4770      	bx	lr

080101de <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80101de:	b480      	push	{r7}
 80101e0:	b083      	sub	sp, #12
 80101e2:	af00      	add	r7, sp, #0
 80101e4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	f003 0303 	and.w	r3, r3, #3
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	370c      	adds	r7, #12
 80101f2:	46bd      	mov	sp, r7
 80101f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f8:	4770      	bx	lr
	...

080101fc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80101fc:	b480      	push	{r7}
 80101fe:	b085      	sub	sp, #20
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010206:	2300      	movs	r3, #0
 8010208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	681a      	ldr	r2, [r3, #0]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801021a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010220:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010226:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010228:	68fa      	ldr	r2, [r7, #12]
 801022a:	4313      	orrs	r3, r2
 801022c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	68da      	ldr	r2, [r3, #12]
 8010232:	4b06      	ldr	r3, [pc, #24]	; (801024c <SDMMC_SendCommand+0x50>)
 8010234:	4013      	ands	r3, r2
 8010236:	68fa      	ldr	r2, [r7, #12]
 8010238:	431a      	orrs	r2, r3
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801023e:	2300      	movs	r3, #0
}
 8010240:	4618      	mov	r0, r3
 8010242:	3714      	adds	r7, #20
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr
 801024c:	fffee0c0 	.word	0xfffee0c0

08010250 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010250:	b480      	push	{r7}
 8010252:	b083      	sub	sp, #12
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	691b      	ldr	r3, [r3, #16]
 801025c:	b2db      	uxtb	r3, r3
}
 801025e:	4618      	mov	r0, r3
 8010260:	370c      	adds	r7, #12
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr

0801026a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801026a:	b480      	push	{r7}
 801026c:	b085      	sub	sp, #20
 801026e:	af00      	add	r7, sp, #0
 8010270:	6078      	str	r0, [r7, #4]
 8010272:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	3314      	adds	r3, #20
 8010278:	461a      	mov	r2, r3
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	4413      	add	r3, r2
 801027e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
}
 8010284:	4618      	mov	r0, r3
 8010286:	3714      	adds	r7, #20
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr

08010290 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8010290:	b480      	push	{r7}
 8010292:	b085      	sub	sp, #20
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801029a:	2300      	movs	r3, #0
 801029c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	685a      	ldr	r2, [r3, #4]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80102b6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80102bc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80102c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80102c4:	68fa      	ldr	r2, [r7, #12]
 80102c6:	4313      	orrs	r3, r2
 80102c8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	431a      	orrs	r2, r3
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80102da:	2300      	movs	r3, #0

}
 80102dc:	4618      	mov	r0, r3
 80102de:	3714      	adds	r7, #20
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b088      	sub	sp, #32
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80102f6:	2310      	movs	r3, #16
 80102f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80102fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010300:	2300      	movs	r3, #0
 8010302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010308:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801030a:	f107 0308 	add.w	r3, r7, #8
 801030e:	4619      	mov	r1, r3
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f7ff ff73 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010316:	f241 3288 	movw	r2, #5000	; 0x1388
 801031a:	2110      	movs	r1, #16
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f000 fa5f 	bl	80107e0 <SDMMC_GetCmdResp1>
 8010322:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010324:	69fb      	ldr	r3, [r7, #28]
}
 8010326:	4618      	mov	r0, r3
 8010328:	3720      	adds	r7, #32
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801032e:	b580      	push	{r7, lr}
 8010330:	b088      	sub	sp, #32
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
 8010336:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801033c:	2311      	movs	r3, #17
 801033e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010346:	2300      	movs	r3, #0
 8010348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801034a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801034e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010350:	f107 0308 	add.w	r3, r7, #8
 8010354:	4619      	mov	r1, r3
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f7ff ff50 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801035c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010360:	2111      	movs	r1, #17
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f000 fa3c 	bl	80107e0 <SDMMC_GetCmdResp1>
 8010368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801036a:	69fb      	ldr	r3, [r7, #28]
}
 801036c:	4618      	mov	r0, r3
 801036e:	3720      	adds	r7, #32
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b088      	sub	sp, #32
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010382:	2312      	movs	r3, #18
 8010384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010386:	f44f 7380 	mov.w	r3, #256	; 0x100
 801038a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801038c:	2300      	movs	r3, #0
 801038e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010394:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010396:	f107 0308 	add.w	r3, r7, #8
 801039a:	4619      	mov	r1, r3
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f7ff ff2d 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80103a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80103a6:	2112      	movs	r1, #18
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f000 fa19 	bl	80107e0 <SDMMC_GetCmdResp1>
 80103ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103b0:	69fb      	ldr	r3, [r7, #28]
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3720      	adds	r7, #32
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}

080103ba <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80103ba:	b580      	push	{r7, lr}
 80103bc:	b088      	sub	sp, #32
 80103be:	af00      	add	r7, sp, #0
 80103c0:	6078      	str	r0, [r7, #4]
 80103c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80103c8:	2318      	movs	r3, #24
 80103ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103d2:	2300      	movs	r3, #0
 80103d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103dc:	f107 0308 	add.w	r3, r7, #8
 80103e0:	4619      	mov	r1, r3
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f7ff ff0a 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80103e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80103ec:	2118      	movs	r1, #24
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 f9f6 	bl	80107e0 <SDMMC_GetCmdResp1>
 80103f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103f6:	69fb      	ldr	r3, [r7, #28]
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3720      	adds	r7, #32
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b088      	sub	sp, #32
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801040e:	2319      	movs	r3, #25
 8010410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010416:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010418:	2300      	movs	r3, #0
 801041a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801041c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010420:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010422:	f107 0308 	add.w	r3, r7, #8
 8010426:	4619      	mov	r1, r3
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f7ff fee7 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801042e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010432:	2119      	movs	r1, #25
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f000 f9d3 	bl	80107e0 <SDMMC_GetCmdResp1>
 801043a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801043c:	69fb      	ldr	r3, [r7, #28]
}
 801043e:	4618      	mov	r0, r3
 8010440:	3720      	adds	r7, #32
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
	...

08010448 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b088      	sub	sp, #32
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010450:	2300      	movs	r3, #0
 8010452:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010454:	230c      	movs	r3, #12
 8010456:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010458:	f44f 7380 	mov.w	r3, #256	; 0x100
 801045c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801045e:	2300      	movs	r3, #0
 8010460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010466:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	68db      	ldr	r3, [r3, #12]
 8010478:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010480:	f107 0308 	add.w	r3, r7, #8
 8010484:	4619      	mov	r1, r3
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f7ff feb8 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801048c:	4a0b      	ldr	r2, [pc, #44]	; (80104bc <SDMMC_CmdStopTransfer+0x74>)
 801048e:	210c      	movs	r1, #12
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	f000 f9a5 	bl	80107e0 <SDMMC_GetCmdResp1>
 8010496:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	68db      	ldr	r3, [r3, #12]
 801049c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80104a4:	69fb      	ldr	r3, [r7, #28]
 80104a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80104aa:	d101      	bne.n	80104b0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80104ac:	2300      	movs	r3, #0
 80104ae:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80104b0:	69fb      	ldr	r3, [r7, #28]
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3720      	adds	r7, #32
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
 80104ba:	bf00      	nop
 80104bc:	05f5e100 	.word	0x05f5e100

080104c0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b088      	sub	sp, #32
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80104ce:	2307      	movs	r3, #7
 80104d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104d8:	2300      	movs	r3, #0
 80104da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104e2:	f107 0308 	add.w	r3, r7, #8
 80104e6:	4619      	mov	r1, r3
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f7ff fe87 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80104ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80104f2:	2107      	movs	r1, #7
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f000 f973 	bl	80107e0 <SDMMC_GetCmdResp1>
 80104fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104fc:	69fb      	ldr	r3, [r7, #28]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3720      	adds	r7, #32
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}

08010506 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010506:	b580      	push	{r7, lr}
 8010508:	b088      	sub	sp, #32
 801050a:	af00      	add	r7, sp, #0
 801050c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801050e:	2300      	movs	r3, #0
 8010510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010512:	2300      	movs	r3, #0
 8010514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010516:	2300      	movs	r3, #0
 8010518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801051a:	2300      	movs	r3, #0
 801051c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801051e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010522:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010524:	f107 0308 	add.w	r3, r7, #8
 8010528:	4619      	mov	r1, r3
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f7ff fe66 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f000 fb97 	bl	8010c64 <SDMMC_GetCmdError>
 8010536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010538:	69fb      	ldr	r3, [r7, #28]
}
 801053a:	4618      	mov	r0, r3
 801053c:	3720      	adds	r7, #32
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010542:	b580      	push	{r7, lr}
 8010544:	b088      	sub	sp, #32
 8010546:	af00      	add	r7, sp, #0
 8010548:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801054a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801054e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010550:	2308      	movs	r3, #8
 8010552:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010558:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801055a:	2300      	movs	r3, #0
 801055c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801055e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010562:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010564:	f107 0308 	add.w	r3, r7, #8
 8010568:	4619      	mov	r1, r3
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f7ff fe46 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f000 fb29 	bl	8010bc8 <SDMMC_GetCmdResp7>
 8010576:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010578:	69fb      	ldr	r3, [r7, #28]
}
 801057a:	4618      	mov	r0, r3
 801057c:	3720      	adds	r7, #32
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}

08010582 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010582:	b580      	push	{r7, lr}
 8010584:	b088      	sub	sp, #32
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
 801058a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010590:	2337      	movs	r3, #55	; 0x37
 8010592:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010598:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801059a:	2300      	movs	r3, #0
 801059c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801059e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105a4:	f107 0308 	add.w	r3, r7, #8
 80105a8:	4619      	mov	r1, r3
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f7ff fe26 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80105b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80105b4:	2137      	movs	r1, #55	; 0x37
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f000 f912 	bl	80107e0 <SDMMC_GetCmdResp1>
 80105bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105be:	69fb      	ldr	r3, [r7, #28]
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3720      	adds	r7, #32
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b088      	sub	sp, #32
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80105d6:	2329      	movs	r3, #41	; 0x29
 80105d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105e0:	2300      	movs	r3, #0
 80105e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105ea:	f107 0308 	add.w	r3, r7, #8
 80105ee:	4619      	mov	r1, r3
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f7ff fe03 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f000 fa2e 	bl	8010a58 <SDMMC_GetCmdResp3>
 80105fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105fe:	69fb      	ldr	r3, [r7, #28]
}
 8010600:	4618      	mov	r0, r3
 8010602:	3720      	adds	r7, #32
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}

08010608 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b088      	sub	sp, #32
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010616:	2306      	movs	r3, #6
 8010618:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801061a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801061e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010620:	2300      	movs	r3, #0
 8010622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010628:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801062a:	f107 0308 	add.w	r3, r7, #8
 801062e:	4619      	mov	r1, r3
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f7ff fde3 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010636:	f241 3288 	movw	r2, #5000	; 0x1388
 801063a:	2106      	movs	r1, #6
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f000 f8cf 	bl	80107e0 <SDMMC_GetCmdResp1>
 8010642:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010644:	69fb      	ldr	r3, [r7, #28]
}
 8010646:	4618      	mov	r0, r3
 8010648:	3720      	adds	r7, #32
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}

0801064e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801064e:	b580      	push	{r7, lr}
 8010650:	b088      	sub	sp, #32
 8010652:	af00      	add	r7, sp, #0
 8010654:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010656:	2300      	movs	r3, #0
 8010658:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801065a:	2333      	movs	r3, #51	; 0x33
 801065c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801065e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010664:	2300      	movs	r3, #0
 8010666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801066c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801066e:	f107 0308 	add.w	r3, r7, #8
 8010672:	4619      	mov	r1, r3
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f7ff fdc1 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801067a:	f241 3288 	movw	r2, #5000	; 0x1388
 801067e:	2133      	movs	r1, #51	; 0x33
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f000 f8ad 	bl	80107e0 <SDMMC_GetCmdResp1>
 8010686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010688:	69fb      	ldr	r3, [r7, #28]
}
 801068a:	4618      	mov	r0, r3
 801068c:	3720      	adds	r7, #32
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}

08010692 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010692:	b580      	push	{r7, lr}
 8010694:	b088      	sub	sp, #32
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801069a:	2300      	movs	r3, #0
 801069c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801069e:	2302      	movs	r3, #2
 80106a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80106a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80106a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106a8:	2300      	movs	r3, #0
 80106aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106b2:	f107 0308 	add.w	r3, r7, #8
 80106b6:	4619      	mov	r1, r3
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f7ff fd9f 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f000 f980 	bl	80109c4 <SDMMC_GetCmdResp2>
 80106c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106c6:	69fb      	ldr	r3, [r7, #28]
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3720      	adds	r7, #32
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b088      	sub	sp, #32
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80106de:	2309      	movs	r3, #9
 80106e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80106e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80106e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106e8:	2300      	movs	r3, #0
 80106ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106f2:	f107 0308 	add.w	r3, r7, #8
 80106f6:	4619      	mov	r1, r3
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f7ff fd7f 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f000 f960 	bl	80109c4 <SDMMC_GetCmdResp2>
 8010704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010706:	69fb      	ldr	r3, [r7, #28]
}
 8010708:	4618      	mov	r0, r3
 801070a:	3720      	adds	r7, #32
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b088      	sub	sp, #32
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801071a:	2300      	movs	r3, #0
 801071c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801071e:	2303      	movs	r3, #3
 8010720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010726:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010728:	2300      	movs	r3, #0
 801072a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010730:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010732:	f107 0308 	add.w	r3, r7, #8
 8010736:	4619      	mov	r1, r3
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f7ff fd5f 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801073e:	683a      	ldr	r2, [r7, #0]
 8010740:	2103      	movs	r1, #3
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f000 f9c8 	bl	8010ad8 <SDMMC_GetCmdResp6>
 8010748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801074a:	69fb      	ldr	r3, [r7, #28]
}
 801074c:	4618      	mov	r0, r3
 801074e:	3720      	adds	r7, #32
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}

08010754 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b088      	sub	sp, #32
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010762:	230d      	movs	r3, #13
 8010764:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010766:	f44f 7380 	mov.w	r3, #256	; 0x100
 801076a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801076c:	2300      	movs	r3, #0
 801076e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010774:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010776:	f107 0308 	add.w	r3, r7, #8
 801077a:	4619      	mov	r1, r3
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f7ff fd3d 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010782:	f241 3288 	movw	r2, #5000	; 0x1388
 8010786:	210d      	movs	r1, #13
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f000 f829 	bl	80107e0 <SDMMC_GetCmdResp1>
 801078e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010790:	69fb      	ldr	r3, [r7, #28]
}
 8010792:	4618      	mov	r0, r3
 8010794:	3720      	adds	r7, #32
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}

0801079a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801079a:	b580      	push	{r7, lr}
 801079c:	b088      	sub	sp, #32
 801079e:	af00      	add	r7, sp, #0
 80107a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80107a2:	2300      	movs	r3, #0
 80107a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80107a6:	230d      	movs	r3, #13
 80107a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107b0:	2300      	movs	r3, #0
 80107b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107ba:	f107 0308 	add.w	r3, r7, #8
 80107be:	4619      	mov	r1, r3
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f7ff fd1b 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80107c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80107ca:	210d      	movs	r1, #13
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f000 f807 	bl	80107e0 <SDMMC_GetCmdResp1>
 80107d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107d4:	69fb      	ldr	r3, [r7, #28]
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3720      	adds	r7, #32
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}
	...

080107e0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b088      	sub	sp, #32
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	60f8      	str	r0, [r7, #12]
 80107e8:	460b      	mov	r3, r1
 80107ea:	607a      	str	r2, [r7, #4]
 80107ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80107ee:	4b70      	ldr	r3, [pc, #448]	; (80109b0 <SDMMC_GetCmdResp1+0x1d0>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	4a70      	ldr	r2, [pc, #448]	; (80109b4 <SDMMC_GetCmdResp1+0x1d4>)
 80107f4:	fba2 2303 	umull	r2, r3, r2, r3
 80107f8:	0a5a      	lsrs	r2, r3, #9
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	fb02 f303 	mul.w	r3, r2, r3
 8010800:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010802:	69fb      	ldr	r3, [r7, #28]
 8010804:	1e5a      	subs	r2, r3, #1
 8010806:	61fa      	str	r2, [r7, #28]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d102      	bne.n	8010812 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801080c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010810:	e0c9      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010816:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010818:	69ba      	ldr	r2, [r7, #24]
 801081a:	4b67      	ldr	r3, [pc, #412]	; (80109b8 <SDMMC_GetCmdResp1+0x1d8>)
 801081c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801081e:	2b00      	cmp	r3, #0
 8010820:	d0ef      	beq.n	8010802 <SDMMC_GetCmdResp1+0x22>
 8010822:	69bb      	ldr	r3, [r7, #24]
 8010824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010828:	2b00      	cmp	r3, #0
 801082a:	d1ea      	bne.n	8010802 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010830:	f003 0304 	and.w	r3, r3, #4
 8010834:	2b00      	cmp	r3, #0
 8010836:	d004      	beq.n	8010842 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2204      	movs	r2, #4
 801083c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801083e:	2304      	movs	r3, #4
 8010840:	e0b1      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010846:	f003 0301 	and.w	r3, r3, #1
 801084a:	2b00      	cmp	r3, #0
 801084c:	d004      	beq.n	8010858 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	2201      	movs	r2, #1
 8010852:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010854:	2301      	movs	r3, #1
 8010856:	e0a6      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	4a58      	ldr	r2, [pc, #352]	; (80109bc <SDMMC_GetCmdResp1+0x1dc>)
 801085c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801085e:	68f8      	ldr	r0, [r7, #12]
 8010860:	f7ff fcf6 	bl	8010250 <SDMMC_GetCommandResponse>
 8010864:	4603      	mov	r3, r0
 8010866:	461a      	mov	r2, r3
 8010868:	7afb      	ldrb	r3, [r7, #11]
 801086a:	4293      	cmp	r3, r2
 801086c:	d001      	beq.n	8010872 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801086e:	2301      	movs	r3, #1
 8010870:	e099      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010872:	2100      	movs	r1, #0
 8010874:	68f8      	ldr	r0, [r7, #12]
 8010876:	f7ff fcf8 	bl	801026a <SDMMC_GetResponse>
 801087a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801087c:	697a      	ldr	r2, [r7, #20]
 801087e:	4b50      	ldr	r3, [pc, #320]	; (80109c0 <SDMMC_GetCmdResp1+0x1e0>)
 8010880:	4013      	ands	r3, r2
 8010882:	2b00      	cmp	r3, #0
 8010884:	d101      	bne.n	801088a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010886:	2300      	movs	r3, #0
 8010888:	e08d      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	2b00      	cmp	r3, #0
 801088e:	da02      	bge.n	8010896 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010890:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010894:	e087      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801089c:	2b00      	cmp	r3, #0
 801089e:	d001      	beq.n	80108a4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80108a0:	2340      	movs	r3, #64	; 0x40
 80108a2:	e080      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d001      	beq.n	80108b2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80108ae:	2380      	movs	r3, #128	; 0x80
 80108b0:	e079      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d002      	beq.n	80108c2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80108bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108c0:	e071      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d002      	beq.n	80108d2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80108cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80108d0:	e069      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d002      	beq.n	80108e2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80108dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108e0:	e061      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d002      	beq.n	80108f2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80108ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80108f0:	e059      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80108f2:	697b      	ldr	r3, [r7, #20]
 80108f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d002      	beq.n	8010902 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80108fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010900:	e051      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010908:	2b00      	cmp	r3, #0
 801090a:	d002      	beq.n	8010912 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801090c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010910:	e049      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010918:	2b00      	cmp	r3, #0
 801091a:	d002      	beq.n	8010922 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801091c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010920:	e041      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010928:	2b00      	cmp	r3, #0
 801092a:	d002      	beq.n	8010932 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801092c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010930:	e039      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010938:	2b00      	cmp	r3, #0
 801093a:	d002      	beq.n	8010942 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801093c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010940:	e031      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010948:	2b00      	cmp	r3, #0
 801094a:	d002      	beq.n	8010952 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801094c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010950:	e029      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010958:	2b00      	cmp	r3, #0
 801095a:	d002      	beq.n	8010962 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801095c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010960:	e021      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010968:	2b00      	cmp	r3, #0
 801096a:	d002      	beq.n	8010972 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801096c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010970:	e019      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010978:	2b00      	cmp	r3, #0
 801097a:	d002      	beq.n	8010982 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801097c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010980:	e011      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010988:	2b00      	cmp	r3, #0
 801098a:	d002      	beq.n	8010992 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801098c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010990:	e009      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	f003 0308 	and.w	r3, r3, #8
 8010998:	2b00      	cmp	r3, #0
 801099a:	d002      	beq.n	80109a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801099c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80109a0:	e001      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80109a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3720      	adds	r7, #32
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	24000000 	.word	0x24000000
 80109b4:	10624dd3 	.word	0x10624dd3
 80109b8:	00200045 	.word	0x00200045
 80109bc:	002000c5 	.word	0x002000c5
 80109c0:	fdffe008 	.word	0xfdffe008

080109c4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80109c4:	b480      	push	{r7}
 80109c6:	b085      	sub	sp, #20
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109cc:	4b1f      	ldr	r3, [pc, #124]	; (8010a4c <SDMMC_GetCmdResp2+0x88>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	4a1f      	ldr	r2, [pc, #124]	; (8010a50 <SDMMC_GetCmdResp2+0x8c>)
 80109d2:	fba2 2303 	umull	r2, r3, r2, r3
 80109d6:	0a5b      	lsrs	r3, r3, #9
 80109d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80109dc:	fb02 f303 	mul.w	r3, r2, r3
 80109e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	1e5a      	subs	r2, r3, #1
 80109e6:	60fa      	str	r2, [r7, #12]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d102      	bne.n	80109f2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80109f0:	e026      	b.n	8010a40 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109f6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d0ef      	beq.n	80109e2 <SDMMC_GetCmdResp2+0x1e>
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d1ea      	bne.n	80109e2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a10:	f003 0304 	and.w	r3, r3, #4
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d004      	beq.n	8010a22 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2204      	movs	r2, #4
 8010a1c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a1e:	2304      	movs	r3, #4
 8010a20:	e00e      	b.n	8010a40 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a26:	f003 0301 	and.w	r3, r3, #1
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d004      	beq.n	8010a38 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2201      	movs	r2, #1
 8010a32:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a34:	2301      	movs	r3, #1
 8010a36:	e003      	b.n	8010a40 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	4a06      	ldr	r2, [pc, #24]	; (8010a54 <SDMMC_GetCmdResp2+0x90>)
 8010a3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a3e:	2300      	movs	r3, #0
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3714      	adds	r7, #20
 8010a44:	46bd      	mov	sp, r7
 8010a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4a:	4770      	bx	lr
 8010a4c:	24000000 	.word	0x24000000
 8010a50:	10624dd3 	.word	0x10624dd3
 8010a54:	002000c5 	.word	0x002000c5

08010a58 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b085      	sub	sp, #20
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010a60:	4b1a      	ldr	r3, [pc, #104]	; (8010acc <SDMMC_GetCmdResp3+0x74>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4a1a      	ldr	r2, [pc, #104]	; (8010ad0 <SDMMC_GetCmdResp3+0x78>)
 8010a66:	fba2 2303 	umull	r2, r3, r2, r3
 8010a6a:	0a5b      	lsrs	r3, r3, #9
 8010a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a70:	fb02 f303 	mul.w	r3, r2, r3
 8010a74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	1e5a      	subs	r2, r3, #1
 8010a7a:	60fa      	str	r2, [r7, #12]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d102      	bne.n	8010a86 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a84:	e01b      	b.n	8010abe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a8a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d0ef      	beq.n	8010a76 <SDMMC_GetCmdResp3+0x1e>
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d1ea      	bne.n	8010a76 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aa4:	f003 0304 	and.w	r3, r3, #4
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d004      	beq.n	8010ab6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2204      	movs	r2, #4
 8010ab0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ab2:	2304      	movs	r3, #4
 8010ab4:	e003      	b.n	8010abe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	4a06      	ldr	r2, [pc, #24]	; (8010ad4 <SDMMC_GetCmdResp3+0x7c>)
 8010aba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010abc:	2300      	movs	r3, #0
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3714      	adds	r7, #20
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr
 8010aca:	bf00      	nop
 8010acc:	24000000 	.word	0x24000000
 8010ad0:	10624dd3 	.word	0x10624dd3
 8010ad4:	002000c5 	.word	0x002000c5

08010ad8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b088      	sub	sp, #32
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	60f8      	str	r0, [r7, #12]
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	607a      	str	r2, [r7, #4]
 8010ae4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010ae6:	4b35      	ldr	r3, [pc, #212]	; (8010bbc <SDMMC_GetCmdResp6+0xe4>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	4a35      	ldr	r2, [pc, #212]	; (8010bc0 <SDMMC_GetCmdResp6+0xe8>)
 8010aec:	fba2 2303 	umull	r2, r3, r2, r3
 8010af0:	0a5b      	lsrs	r3, r3, #9
 8010af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8010af6:	fb02 f303 	mul.w	r3, r2, r3
 8010afa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010afc:	69fb      	ldr	r3, [r7, #28]
 8010afe:	1e5a      	subs	r2, r3, #1
 8010b00:	61fa      	str	r2, [r7, #28]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d102      	bne.n	8010b0c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b0a:	e052      	b.n	8010bb2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b10:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b12:	69bb      	ldr	r3, [r7, #24]
 8010b14:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d0ef      	beq.n	8010afc <SDMMC_GetCmdResp6+0x24>
 8010b1c:	69bb      	ldr	r3, [r7, #24]
 8010b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d1ea      	bne.n	8010afc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b2a:	f003 0304 	and.w	r3, r3, #4
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d004      	beq.n	8010b3c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	2204      	movs	r2, #4
 8010b36:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b38:	2304      	movs	r3, #4
 8010b3a:	e03a      	b.n	8010bb2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b40:	f003 0301 	and.w	r3, r3, #1
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d004      	beq.n	8010b52 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	2201      	movs	r2, #1
 8010b4c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	e02f      	b.n	8010bb2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010b52:	68f8      	ldr	r0, [r7, #12]
 8010b54:	f7ff fb7c 	bl	8010250 <SDMMC_GetCommandResponse>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	7afb      	ldrb	r3, [r7, #11]
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	d001      	beq.n	8010b66 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b62:	2301      	movs	r3, #1
 8010b64:	e025      	b.n	8010bb2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	4a16      	ldr	r2, [pc, #88]	; (8010bc4 <SDMMC_GetCmdResp6+0xec>)
 8010b6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010b6c:	2100      	movs	r1, #0
 8010b6e:	68f8      	ldr	r0, [r7, #12]
 8010b70:	f7ff fb7b 	bl	801026a <SDMMC_GetResponse>
 8010b74:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d106      	bne.n	8010b8e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	0c1b      	lsrs	r3, r3, #16
 8010b84:	b29a      	uxth	r2, r3
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	e011      	b.n	8010bb2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d002      	beq.n	8010b9e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b9c:	e009      	b.n	8010bb2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d002      	beq.n	8010bae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bac:	e001      	b.n	8010bb2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010bae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	3720      	adds	r7, #32
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}
 8010bba:	bf00      	nop
 8010bbc:	24000000 	.word	0x24000000
 8010bc0:	10624dd3 	.word	0x10624dd3
 8010bc4:	002000c5 	.word	0x002000c5

08010bc8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b085      	sub	sp, #20
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010bd0:	4b22      	ldr	r3, [pc, #136]	; (8010c5c <SDMMC_GetCmdResp7+0x94>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	4a22      	ldr	r2, [pc, #136]	; (8010c60 <SDMMC_GetCmdResp7+0x98>)
 8010bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8010bda:	0a5b      	lsrs	r3, r3, #9
 8010bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010be0:	fb02 f303 	mul.w	r3, r2, r3
 8010be4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	1e5a      	subs	r2, r3, #1
 8010bea:	60fa      	str	r2, [r7, #12]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d102      	bne.n	8010bf6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010bf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010bf4:	e02c      	b.n	8010c50 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bfa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d0ef      	beq.n	8010be6 <SDMMC_GetCmdResp7+0x1e>
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d1ea      	bne.n	8010be6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c14:	f003 0304 	and.w	r3, r3, #4
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d004      	beq.n	8010c26 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2204      	movs	r2, #4
 8010c20:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c22:	2304      	movs	r3, #4
 8010c24:	e014      	b.n	8010c50 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c2a:	f003 0301 	and.w	r3, r3, #1
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d004      	beq.n	8010c3c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2201      	movs	r2, #1
 8010c36:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c38:	2301      	movs	r3, #1
 8010c3a:	e009      	b.n	8010c50 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d002      	beq.n	8010c4e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2240      	movs	r2, #64	; 0x40
 8010c4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010c4e:	2300      	movs	r3, #0

}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3714      	adds	r7, #20
 8010c54:	46bd      	mov	sp, r7
 8010c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5a:	4770      	bx	lr
 8010c5c:	24000000 	.word	0x24000000
 8010c60:	10624dd3 	.word	0x10624dd3

08010c64 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010c64:	b480      	push	{r7}
 8010c66:	b085      	sub	sp, #20
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c6c:	4b11      	ldr	r3, [pc, #68]	; (8010cb4 <SDMMC_GetCmdError+0x50>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4a11      	ldr	r2, [pc, #68]	; (8010cb8 <SDMMC_GetCmdError+0x54>)
 8010c72:	fba2 2303 	umull	r2, r3, r2, r3
 8010c76:	0a5b      	lsrs	r3, r3, #9
 8010c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c7c:	fb02 f303 	mul.w	r3, r2, r3
 8010c80:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	1e5a      	subs	r2, r3, #1
 8010c86:	60fa      	str	r2, [r7, #12]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d102      	bne.n	8010c92 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c90:	e009      	b.n	8010ca6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d0f1      	beq.n	8010c82 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	4a06      	ldr	r2, [pc, #24]	; (8010cbc <SDMMC_GetCmdError+0x58>)
 8010ca2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8010ca4:	2300      	movs	r3, #0
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3714      	adds	r7, #20
 8010caa:	46bd      	mov	sp, r7
 8010cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb0:	4770      	bx	lr
 8010cb2:	bf00      	nop
 8010cb4:	24000000 	.word	0x24000000
 8010cb8:	10624dd3 	.word	0x10624dd3
 8010cbc:	002000c5 	.word	0x002000c5

08010cc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010cc0:	b084      	sub	sp, #16
 8010cc2:	b580      	push	{r7, lr}
 8010cc4:	b084      	sub	sp, #16
 8010cc6:	af00      	add	r7, sp, #0
 8010cc8:	6078      	str	r0, [r7, #4]
 8010cca:	f107 001c 	add.w	r0, r7, #28
 8010cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd4:	2b01      	cmp	r3, #1
 8010cd6:	d120      	bne.n	8010d1a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	68da      	ldr	r2, [r3, #12]
 8010ce8:	4b2a      	ldr	r3, [pc, #168]	; (8010d94 <USB_CoreInit+0xd4>)
 8010cea:	4013      	ands	r3, r2
 8010cec:	687a      	ldr	r2, [r7, #4]
 8010cee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	68db      	ldr	r3, [r3, #12]
 8010cf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d105      	bne.n	8010d0e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	68db      	ldr	r3, [r3, #12]
 8010d06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f001 faf8 	bl	8012304 <USB_CoreReset>
 8010d14:	4603      	mov	r3, r0
 8010d16:	73fb      	strb	r3, [r7, #15]
 8010d18:	e01a      	b.n	8010d50 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	68db      	ldr	r3, [r3, #12]
 8010d1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f001 faec 	bl	8012304 <USB_CoreReset>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d106      	bne.n	8010d44 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	639a      	str	r2, [r3, #56]	; 0x38
 8010d42:	e005      	b.n	8010d50 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d52:	2b01      	cmp	r3, #1
 8010d54:	d116      	bne.n	8010d84 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d5a:	b29a      	uxth	r2, r3
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010d64:	4b0c      	ldr	r3, [pc, #48]	; (8010d98 <USB_CoreInit+0xd8>)
 8010d66:	4313      	orrs	r3, r2
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	689b      	ldr	r3, [r3, #8]
 8010d70:	f043 0206 	orr.w	r2, r3, #6
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	689b      	ldr	r3, [r3, #8]
 8010d7c:	f043 0220 	orr.w	r2, r3, #32
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3710      	adds	r7, #16
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010d90:	b004      	add	sp, #16
 8010d92:	4770      	bx	lr
 8010d94:	ffbdffbf 	.word	0xffbdffbf
 8010d98:	03ee0000 	.word	0x03ee0000

08010d9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b087      	sub	sp, #28
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	60f8      	str	r0, [r7, #12]
 8010da4:	60b9      	str	r1, [r7, #8]
 8010da6:	4613      	mov	r3, r2
 8010da8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010daa:	79fb      	ldrb	r3, [r7, #7]
 8010dac:	2b02      	cmp	r3, #2
 8010dae:	d165      	bne.n	8010e7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	4a41      	ldr	r2, [pc, #260]	; (8010eb8 <USB_SetTurnaroundTime+0x11c>)
 8010db4:	4293      	cmp	r3, r2
 8010db6:	d906      	bls.n	8010dc6 <USB_SetTurnaroundTime+0x2a>
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	4a40      	ldr	r2, [pc, #256]	; (8010ebc <USB_SetTurnaroundTime+0x120>)
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	d202      	bcs.n	8010dc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010dc0:	230f      	movs	r3, #15
 8010dc2:	617b      	str	r3, [r7, #20]
 8010dc4:	e062      	b.n	8010e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	4a3c      	ldr	r2, [pc, #240]	; (8010ebc <USB_SetTurnaroundTime+0x120>)
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	d306      	bcc.n	8010ddc <USB_SetTurnaroundTime+0x40>
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	4a3b      	ldr	r2, [pc, #236]	; (8010ec0 <USB_SetTurnaroundTime+0x124>)
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d202      	bcs.n	8010ddc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010dd6:	230e      	movs	r3, #14
 8010dd8:	617b      	str	r3, [r7, #20]
 8010dda:	e057      	b.n	8010e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	4a38      	ldr	r2, [pc, #224]	; (8010ec0 <USB_SetTurnaroundTime+0x124>)
 8010de0:	4293      	cmp	r3, r2
 8010de2:	d306      	bcc.n	8010df2 <USB_SetTurnaroundTime+0x56>
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	4a37      	ldr	r2, [pc, #220]	; (8010ec4 <USB_SetTurnaroundTime+0x128>)
 8010de8:	4293      	cmp	r3, r2
 8010dea:	d202      	bcs.n	8010df2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010dec:	230d      	movs	r3, #13
 8010dee:	617b      	str	r3, [r7, #20]
 8010df0:	e04c      	b.n	8010e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	4a33      	ldr	r2, [pc, #204]	; (8010ec4 <USB_SetTurnaroundTime+0x128>)
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d306      	bcc.n	8010e08 <USB_SetTurnaroundTime+0x6c>
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	4a32      	ldr	r2, [pc, #200]	; (8010ec8 <USB_SetTurnaroundTime+0x12c>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d802      	bhi.n	8010e08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010e02:	230c      	movs	r3, #12
 8010e04:	617b      	str	r3, [r7, #20]
 8010e06:	e041      	b.n	8010e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	4a2f      	ldr	r2, [pc, #188]	; (8010ec8 <USB_SetTurnaroundTime+0x12c>)
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d906      	bls.n	8010e1e <USB_SetTurnaroundTime+0x82>
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	4a2e      	ldr	r2, [pc, #184]	; (8010ecc <USB_SetTurnaroundTime+0x130>)
 8010e14:	4293      	cmp	r3, r2
 8010e16:	d802      	bhi.n	8010e1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010e18:	230b      	movs	r3, #11
 8010e1a:	617b      	str	r3, [r7, #20]
 8010e1c:	e036      	b.n	8010e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	4a2a      	ldr	r2, [pc, #168]	; (8010ecc <USB_SetTurnaroundTime+0x130>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d906      	bls.n	8010e34 <USB_SetTurnaroundTime+0x98>
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	4a29      	ldr	r2, [pc, #164]	; (8010ed0 <USB_SetTurnaroundTime+0x134>)
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	d802      	bhi.n	8010e34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010e2e:	230a      	movs	r3, #10
 8010e30:	617b      	str	r3, [r7, #20]
 8010e32:	e02b      	b.n	8010e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	4a26      	ldr	r2, [pc, #152]	; (8010ed0 <USB_SetTurnaroundTime+0x134>)
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	d906      	bls.n	8010e4a <USB_SetTurnaroundTime+0xae>
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	4a25      	ldr	r2, [pc, #148]	; (8010ed4 <USB_SetTurnaroundTime+0x138>)
 8010e40:	4293      	cmp	r3, r2
 8010e42:	d202      	bcs.n	8010e4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010e44:	2309      	movs	r3, #9
 8010e46:	617b      	str	r3, [r7, #20]
 8010e48:	e020      	b.n	8010e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	4a21      	ldr	r2, [pc, #132]	; (8010ed4 <USB_SetTurnaroundTime+0x138>)
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d306      	bcc.n	8010e60 <USB_SetTurnaroundTime+0xc4>
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	4a20      	ldr	r2, [pc, #128]	; (8010ed8 <USB_SetTurnaroundTime+0x13c>)
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d802      	bhi.n	8010e60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010e5a:	2308      	movs	r3, #8
 8010e5c:	617b      	str	r3, [r7, #20]
 8010e5e:	e015      	b.n	8010e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	4a1d      	ldr	r2, [pc, #116]	; (8010ed8 <USB_SetTurnaroundTime+0x13c>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d906      	bls.n	8010e76 <USB_SetTurnaroundTime+0xda>
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	4a1c      	ldr	r2, [pc, #112]	; (8010edc <USB_SetTurnaroundTime+0x140>)
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d202      	bcs.n	8010e76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010e70:	2307      	movs	r3, #7
 8010e72:	617b      	str	r3, [r7, #20]
 8010e74:	e00a      	b.n	8010e8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010e76:	2306      	movs	r3, #6
 8010e78:	617b      	str	r3, [r7, #20]
 8010e7a:	e007      	b.n	8010e8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010e7c:	79fb      	ldrb	r3, [r7, #7]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d102      	bne.n	8010e88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010e82:	2309      	movs	r3, #9
 8010e84:	617b      	str	r3, [r7, #20]
 8010e86:	e001      	b.n	8010e8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010e88:	2309      	movs	r3, #9
 8010e8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	68db      	ldr	r3, [r3, #12]
 8010e90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	68da      	ldr	r2, [r3, #12]
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	029b      	lsls	r3, r3, #10
 8010ea0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010ea4:	431a      	orrs	r2, r3
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010eaa:	2300      	movs	r3, #0
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	371c      	adds	r7, #28
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr
 8010eb8:	00d8acbf 	.word	0x00d8acbf
 8010ebc:	00e4e1c0 	.word	0x00e4e1c0
 8010ec0:	00f42400 	.word	0x00f42400
 8010ec4:	01067380 	.word	0x01067380
 8010ec8:	011a499f 	.word	0x011a499f
 8010ecc:	01312cff 	.word	0x01312cff
 8010ed0:	014ca43f 	.word	0x014ca43f
 8010ed4:	016e3600 	.word	0x016e3600
 8010ed8:	01a6ab1f 	.word	0x01a6ab1f
 8010edc:	01e84800 	.word	0x01e84800

08010ee0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b083      	sub	sp, #12
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	689b      	ldr	r3, [r3, #8]
 8010eec:	f043 0201 	orr.w	r2, r3, #1
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010ef4:	2300      	movs	r3, #0
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	370c      	adds	r7, #12
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr

08010f02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010f02:	b480      	push	{r7}
 8010f04:	b083      	sub	sp, #12
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	689b      	ldr	r3, [r3, #8]
 8010f0e:	f023 0201 	bic.w	r2, r3, #1
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010f16:	2300      	movs	r3, #0
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	370c      	adds	r7, #12
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f22:	4770      	bx	lr

08010f24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b084      	sub	sp, #16
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010f30:	2300      	movs	r3, #0
 8010f32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	68db      	ldr	r3, [r3, #12]
 8010f38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010f40:	78fb      	ldrb	r3, [r7, #3]
 8010f42:	2b01      	cmp	r3, #1
 8010f44:	d115      	bne.n	8010f72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010f52:	2001      	movs	r0, #1
 8010f54:	f7f1 ff3e 	bl	8002dd4 <HAL_Delay>
      ms++;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	3301      	adds	r3, #1
 8010f5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f001 f93f 	bl	80121e2 <USB_GetMode>
 8010f64:	4603      	mov	r3, r0
 8010f66:	2b01      	cmp	r3, #1
 8010f68:	d01e      	beq.n	8010fa8 <USB_SetCurrentMode+0x84>
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	2b31      	cmp	r3, #49	; 0x31
 8010f6e:	d9f0      	bls.n	8010f52 <USB_SetCurrentMode+0x2e>
 8010f70:	e01a      	b.n	8010fa8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010f72:	78fb      	ldrb	r3, [r7, #3]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d115      	bne.n	8010fa4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	68db      	ldr	r3, [r3, #12]
 8010f7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010f84:	2001      	movs	r0, #1
 8010f86:	f7f1 ff25 	bl	8002dd4 <HAL_Delay>
      ms++;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	3301      	adds	r3, #1
 8010f8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f001 f926 	bl	80121e2 <USB_GetMode>
 8010f96:	4603      	mov	r3, r0
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d005      	beq.n	8010fa8 <USB_SetCurrentMode+0x84>
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	2b31      	cmp	r3, #49	; 0x31
 8010fa0:	d9f0      	bls.n	8010f84 <USB_SetCurrentMode+0x60>
 8010fa2:	e001      	b.n	8010fa8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	e005      	b.n	8010fb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	2b32      	cmp	r3, #50	; 0x32
 8010fac:	d101      	bne.n	8010fb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010fae:	2301      	movs	r3, #1
 8010fb0:	e000      	b.n	8010fb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010fb2:	2300      	movs	r3, #0
}
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	3710      	adds	r7, #16
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}

08010fbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010fbc:	b084      	sub	sp, #16
 8010fbe:	b580      	push	{r7, lr}
 8010fc0:	b086      	sub	sp, #24
 8010fc2:	af00      	add	r7, sp, #0
 8010fc4:	6078      	str	r0, [r7, #4]
 8010fc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010fce:	2300      	movs	r3, #0
 8010fd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	613b      	str	r3, [r7, #16]
 8010fda:	e009      	b.n	8010ff0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010fdc:	687a      	ldr	r2, [r7, #4]
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	3340      	adds	r3, #64	; 0x40
 8010fe2:	009b      	lsls	r3, r3, #2
 8010fe4:	4413      	add	r3, r2
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	3301      	adds	r3, #1
 8010fee:	613b      	str	r3, [r7, #16]
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	2b0e      	cmp	r3, #14
 8010ff4:	d9f2      	bls.n	8010fdc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d11c      	bne.n	8011036 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	68fa      	ldr	r2, [r7, #12]
 8011006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801100a:	f043 0302 	orr.w	r3, r3, #2
 801100e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011014:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	601a      	str	r2, [r3, #0]
 8011034:	e005      	b.n	8011042 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801103a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011048:	461a      	mov	r2, r3
 801104a:	2300      	movs	r3, #0
 801104c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011054:	4619      	mov	r1, r3
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801105c:	461a      	mov	r2, r3
 801105e:	680b      	ldr	r3, [r1, #0]
 8011060:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011064:	2b01      	cmp	r3, #1
 8011066:	d10c      	bne.n	8011082 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801106a:	2b00      	cmp	r3, #0
 801106c:	d104      	bne.n	8011078 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801106e:	2100      	movs	r1, #0
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f000 f965 	bl	8011340 <USB_SetDevSpeed>
 8011076:	e008      	b.n	801108a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011078:	2101      	movs	r1, #1
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f000 f960 	bl	8011340 <USB_SetDevSpeed>
 8011080:	e003      	b.n	801108a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011082:	2103      	movs	r1, #3
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f000 f95b 	bl	8011340 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801108a:	2110      	movs	r1, #16
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f000 f8f3 	bl	8011278 <USB_FlushTxFifo>
 8011092:	4603      	mov	r3, r0
 8011094:	2b00      	cmp	r3, #0
 8011096:	d001      	beq.n	801109c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8011098:	2301      	movs	r3, #1
 801109a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f000 f91f 	bl	80112e0 <USB_FlushRxFifo>
 80110a2:	4603      	mov	r3, r0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d001      	beq.n	80110ac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80110a8:	2301      	movs	r3, #1
 80110aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110b2:	461a      	mov	r2, r3
 80110b4:	2300      	movs	r3, #0
 80110b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110be:	461a      	mov	r2, r3
 80110c0:	2300      	movs	r3, #0
 80110c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110ca:	461a      	mov	r2, r3
 80110cc:	2300      	movs	r3, #0
 80110ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80110d0:	2300      	movs	r3, #0
 80110d2:	613b      	str	r3, [r7, #16]
 80110d4:	e043      	b.n	801115e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	015a      	lsls	r2, r3, #5
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	4413      	add	r3, r2
 80110de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80110e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80110ec:	d118      	bne.n	8011120 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d10a      	bne.n	801110a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	015a      	lsls	r2, r3, #5
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	4413      	add	r3, r2
 80110fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011100:	461a      	mov	r2, r3
 8011102:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011106:	6013      	str	r3, [r2, #0]
 8011108:	e013      	b.n	8011132 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	015a      	lsls	r2, r3, #5
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	4413      	add	r3, r2
 8011112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011116:	461a      	mov	r2, r3
 8011118:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801111c:	6013      	str	r3, [r2, #0]
 801111e:	e008      	b.n	8011132 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	015a      	lsls	r2, r3, #5
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	4413      	add	r3, r2
 8011128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801112c:	461a      	mov	r2, r3
 801112e:	2300      	movs	r3, #0
 8011130:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011132:	693b      	ldr	r3, [r7, #16]
 8011134:	015a      	lsls	r2, r3, #5
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	4413      	add	r3, r2
 801113a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801113e:	461a      	mov	r2, r3
 8011140:	2300      	movs	r3, #0
 8011142:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011144:	693b      	ldr	r3, [r7, #16]
 8011146:	015a      	lsls	r2, r3, #5
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	4413      	add	r3, r2
 801114c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011150:	461a      	mov	r2, r3
 8011152:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011156:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	3301      	adds	r3, #1
 801115c:	613b      	str	r3, [r7, #16]
 801115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011160:	693a      	ldr	r2, [r7, #16]
 8011162:	429a      	cmp	r2, r3
 8011164:	d3b7      	bcc.n	80110d6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011166:	2300      	movs	r3, #0
 8011168:	613b      	str	r3, [r7, #16]
 801116a:	e043      	b.n	80111f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	015a      	lsls	r2, r3, #5
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	4413      	add	r3, r2
 8011174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801117e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011182:	d118      	bne.n	80111b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d10a      	bne.n	80111a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	015a      	lsls	r2, r3, #5
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	4413      	add	r3, r2
 8011192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011196:	461a      	mov	r2, r3
 8011198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801119c:	6013      	str	r3, [r2, #0]
 801119e:	e013      	b.n	80111c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	015a      	lsls	r2, r3, #5
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	4413      	add	r3, r2
 80111a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111ac:	461a      	mov	r2, r3
 80111ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80111b2:	6013      	str	r3, [r2, #0]
 80111b4:	e008      	b.n	80111c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	015a      	lsls	r2, r3, #5
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	4413      	add	r3, r2
 80111be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111c2:	461a      	mov	r2, r3
 80111c4:	2300      	movs	r3, #0
 80111c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	015a      	lsls	r2, r3, #5
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	4413      	add	r3, r2
 80111d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111d4:	461a      	mov	r2, r3
 80111d6:	2300      	movs	r3, #0
 80111d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	015a      	lsls	r2, r3, #5
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	4413      	add	r3, r2
 80111e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111e6:	461a      	mov	r2, r3
 80111e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80111ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80111ee:	693b      	ldr	r3, [r7, #16]
 80111f0:	3301      	adds	r3, #1
 80111f2:	613b      	str	r3, [r7, #16]
 80111f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f6:	693a      	ldr	r2, [r7, #16]
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d3b7      	bcc.n	801116c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011202:	691b      	ldr	r3, [r3, #16]
 8011204:	68fa      	ldr	r2, [r7, #12]
 8011206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801120a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801120e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2200      	movs	r2, #0
 8011214:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801121c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011220:	2b00      	cmp	r3, #0
 8011222:	d105      	bne.n	8011230 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	699b      	ldr	r3, [r3, #24]
 8011228:	f043 0210 	orr.w	r2, r3, #16
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	699a      	ldr	r2, [r3, #24]
 8011234:	4b0e      	ldr	r3, [pc, #56]	; (8011270 <USB_DevInit+0x2b4>)
 8011236:	4313      	orrs	r3, r2
 8011238:	687a      	ldr	r2, [r7, #4]
 801123a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801123c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801123e:	2b00      	cmp	r3, #0
 8011240:	d005      	beq.n	801124e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	699b      	ldr	r3, [r3, #24]
 8011246:	f043 0208 	orr.w	r2, r3, #8
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801124e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011250:	2b01      	cmp	r3, #1
 8011252:	d105      	bne.n	8011260 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	699a      	ldr	r2, [r3, #24]
 8011258:	4b06      	ldr	r3, [pc, #24]	; (8011274 <USB_DevInit+0x2b8>)
 801125a:	4313      	orrs	r3, r2
 801125c:	687a      	ldr	r2, [r7, #4]
 801125e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011260:	7dfb      	ldrb	r3, [r7, #23]
}
 8011262:	4618      	mov	r0, r3
 8011264:	3718      	adds	r7, #24
 8011266:	46bd      	mov	sp, r7
 8011268:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801126c:	b004      	add	sp, #16
 801126e:	4770      	bx	lr
 8011270:	803c3800 	.word	0x803c3800
 8011274:	40000004 	.word	0x40000004

08011278 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011278:	b480      	push	{r7}
 801127a:	b085      	sub	sp, #20
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011282:	2300      	movs	r3, #0
 8011284:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	3301      	adds	r3, #1
 801128a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	4a13      	ldr	r2, [pc, #76]	; (80112dc <USB_FlushTxFifo+0x64>)
 8011290:	4293      	cmp	r3, r2
 8011292:	d901      	bls.n	8011298 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011294:	2303      	movs	r3, #3
 8011296:	e01b      	b.n	80112d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	691b      	ldr	r3, [r3, #16]
 801129c:	2b00      	cmp	r3, #0
 801129e:	daf2      	bge.n	8011286 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80112a0:	2300      	movs	r3, #0
 80112a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	019b      	lsls	r3, r3, #6
 80112a8:	f043 0220 	orr.w	r2, r3, #32
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	3301      	adds	r3, #1
 80112b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	4a08      	ldr	r2, [pc, #32]	; (80112dc <USB_FlushTxFifo+0x64>)
 80112ba:	4293      	cmp	r3, r2
 80112bc:	d901      	bls.n	80112c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80112be:	2303      	movs	r3, #3
 80112c0:	e006      	b.n	80112d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	691b      	ldr	r3, [r3, #16]
 80112c6:	f003 0320 	and.w	r3, r3, #32
 80112ca:	2b20      	cmp	r3, #32
 80112cc:	d0f0      	beq.n	80112b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80112ce:	2300      	movs	r3, #0
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3714      	adds	r7, #20
 80112d4:	46bd      	mov	sp, r7
 80112d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112da:	4770      	bx	lr
 80112dc:	00030d40 	.word	0x00030d40

080112e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80112e0:	b480      	push	{r7}
 80112e2:	b085      	sub	sp, #20
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80112e8:	2300      	movs	r3, #0
 80112ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	3301      	adds	r3, #1
 80112f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	4a11      	ldr	r2, [pc, #68]	; (801133c <USB_FlushRxFifo+0x5c>)
 80112f6:	4293      	cmp	r3, r2
 80112f8:	d901      	bls.n	80112fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80112fa:	2303      	movs	r3, #3
 80112fc:	e018      	b.n	8011330 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	691b      	ldr	r3, [r3, #16]
 8011302:	2b00      	cmp	r3, #0
 8011304:	daf2      	bge.n	80112ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011306:	2300      	movs	r3, #0
 8011308:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2210      	movs	r2, #16
 801130e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	3301      	adds	r3, #1
 8011314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	4a08      	ldr	r2, [pc, #32]	; (801133c <USB_FlushRxFifo+0x5c>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d901      	bls.n	8011322 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801131e:	2303      	movs	r3, #3
 8011320:	e006      	b.n	8011330 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	691b      	ldr	r3, [r3, #16]
 8011326:	f003 0310 	and.w	r3, r3, #16
 801132a:	2b10      	cmp	r3, #16
 801132c:	d0f0      	beq.n	8011310 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801132e:	2300      	movs	r3, #0
}
 8011330:	4618      	mov	r0, r3
 8011332:	3714      	adds	r7, #20
 8011334:	46bd      	mov	sp, r7
 8011336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133a:	4770      	bx	lr
 801133c:	00030d40 	.word	0x00030d40

08011340 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011340:	b480      	push	{r7}
 8011342:	b085      	sub	sp, #20
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
 8011348:	460b      	mov	r3, r1
 801134a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011356:	681a      	ldr	r2, [r3, #0]
 8011358:	78fb      	ldrb	r3, [r7, #3]
 801135a:	68f9      	ldr	r1, [r7, #12]
 801135c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011360:	4313      	orrs	r3, r2
 8011362:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011364:	2300      	movs	r3, #0
}
 8011366:	4618      	mov	r0, r3
 8011368:	3714      	adds	r7, #20
 801136a:	46bd      	mov	sp, r7
 801136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011370:	4770      	bx	lr

08011372 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011372:	b480      	push	{r7}
 8011374:	b087      	sub	sp, #28
 8011376:	af00      	add	r7, sp, #0
 8011378:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801137e:	693b      	ldr	r3, [r7, #16]
 8011380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011384:	689b      	ldr	r3, [r3, #8]
 8011386:	f003 0306 	and.w	r3, r3, #6
 801138a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d102      	bne.n	8011398 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8011392:	2300      	movs	r3, #0
 8011394:	75fb      	strb	r3, [r7, #23]
 8011396:	e00a      	b.n	80113ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	2b02      	cmp	r3, #2
 801139c:	d002      	beq.n	80113a4 <USB_GetDevSpeed+0x32>
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	2b06      	cmp	r3, #6
 80113a2:	d102      	bne.n	80113aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80113a4:	2302      	movs	r3, #2
 80113a6:	75fb      	strb	r3, [r7, #23]
 80113a8:	e001      	b.n	80113ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80113aa:	230f      	movs	r3, #15
 80113ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80113ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	371c      	adds	r7, #28
 80113b4:	46bd      	mov	sp, r7
 80113b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ba:	4770      	bx	lr

080113bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80113bc:	b480      	push	{r7}
 80113be:	b085      	sub	sp, #20
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	781b      	ldrb	r3, [r3, #0]
 80113ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	785b      	ldrb	r3, [r3, #1]
 80113d4:	2b01      	cmp	r3, #1
 80113d6:	d139      	bne.n	801144c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113de:	69da      	ldr	r2, [r3, #28]
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	781b      	ldrb	r3, [r3, #0]
 80113e4:	f003 030f 	and.w	r3, r3, #15
 80113e8:	2101      	movs	r1, #1
 80113ea:	fa01 f303 	lsl.w	r3, r1, r3
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	68f9      	ldr	r1, [r7, #12]
 80113f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80113f6:	4313      	orrs	r3, r2
 80113f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	015a      	lsls	r2, r3, #5
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	4413      	add	r3, r2
 8011402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801140c:	2b00      	cmp	r3, #0
 801140e:	d153      	bne.n	80114b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	015a      	lsls	r2, r3, #5
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	4413      	add	r3, r2
 8011418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801141c:	681a      	ldr	r2, [r3, #0]
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	689b      	ldr	r3, [r3, #8]
 8011422:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	791b      	ldrb	r3, [r3, #4]
 801142a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801142c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	059b      	lsls	r3, r3, #22
 8011432:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011434:	431a      	orrs	r2, r3
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	0159      	lsls	r1, r3, #5
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	440b      	add	r3, r1
 801143e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011442:	4619      	mov	r1, r3
 8011444:	4b20      	ldr	r3, [pc, #128]	; (80114c8 <USB_ActivateEndpoint+0x10c>)
 8011446:	4313      	orrs	r3, r2
 8011448:	600b      	str	r3, [r1, #0]
 801144a:	e035      	b.n	80114b8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011452:	69da      	ldr	r2, [r3, #28]
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	f003 030f 	and.w	r3, r3, #15
 801145c:	2101      	movs	r1, #1
 801145e:	fa01 f303 	lsl.w	r3, r1, r3
 8011462:	041b      	lsls	r3, r3, #16
 8011464:	68f9      	ldr	r1, [r7, #12]
 8011466:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801146a:	4313      	orrs	r3, r2
 801146c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	015a      	lsls	r2, r3, #5
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	4413      	add	r3, r2
 8011476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011480:	2b00      	cmp	r3, #0
 8011482:	d119      	bne.n	80114b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	015a      	lsls	r2, r3, #5
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	4413      	add	r3, r2
 801148c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011490:	681a      	ldr	r2, [r3, #0]
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	689b      	ldr	r3, [r3, #8]
 8011496:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	791b      	ldrb	r3, [r3, #4]
 801149e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80114a0:	430b      	orrs	r3, r1
 80114a2:	431a      	orrs	r2, r3
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	0159      	lsls	r1, r3, #5
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	440b      	add	r3, r1
 80114ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114b0:	4619      	mov	r1, r3
 80114b2:	4b05      	ldr	r3, [pc, #20]	; (80114c8 <USB_ActivateEndpoint+0x10c>)
 80114b4:	4313      	orrs	r3, r2
 80114b6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80114b8:	2300      	movs	r3, #0
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3714      	adds	r7, #20
 80114be:	46bd      	mov	sp, r7
 80114c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c4:	4770      	bx	lr
 80114c6:	bf00      	nop
 80114c8:	10008000 	.word	0x10008000

080114cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80114cc:	b480      	push	{r7}
 80114ce:	b085      	sub	sp, #20
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
 80114d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	781b      	ldrb	r3, [r3, #0]
 80114de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	785b      	ldrb	r3, [r3, #1]
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	d161      	bne.n	80115ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	015a      	lsls	r2, r3, #5
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	4413      	add	r3, r2
 80114f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80114fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80114fe:	d11f      	bne.n	8011540 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	015a      	lsls	r2, r3, #5
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	4413      	add	r3, r2
 8011508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	68ba      	ldr	r2, [r7, #8]
 8011510:	0151      	lsls	r1, r2, #5
 8011512:	68fa      	ldr	r2, [r7, #12]
 8011514:	440a      	add	r2, r1
 8011516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801151a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801151e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	015a      	lsls	r2, r3, #5
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	4413      	add	r3, r2
 8011528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	68ba      	ldr	r2, [r7, #8]
 8011530:	0151      	lsls	r1, r2, #5
 8011532:	68fa      	ldr	r2, [r7, #12]
 8011534:	440a      	add	r2, r1
 8011536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801153a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801153e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	f003 030f 	and.w	r3, r3, #15
 8011550:	2101      	movs	r1, #1
 8011552:	fa01 f303 	lsl.w	r3, r1, r3
 8011556:	b29b      	uxth	r3, r3
 8011558:	43db      	mvns	r3, r3
 801155a:	68f9      	ldr	r1, [r7, #12]
 801155c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011560:	4013      	ands	r3, r2
 8011562:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801156a:	69da      	ldr	r2, [r3, #28]
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	f003 030f 	and.w	r3, r3, #15
 8011574:	2101      	movs	r1, #1
 8011576:	fa01 f303 	lsl.w	r3, r1, r3
 801157a:	b29b      	uxth	r3, r3
 801157c:	43db      	mvns	r3, r3
 801157e:	68f9      	ldr	r1, [r7, #12]
 8011580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011584:	4013      	ands	r3, r2
 8011586:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	015a      	lsls	r2, r3, #5
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	4413      	add	r3, r2
 8011590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011594:	681a      	ldr	r2, [r3, #0]
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	0159      	lsls	r1, r3, #5
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	440b      	add	r3, r1
 801159e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115a2:	4619      	mov	r1, r3
 80115a4:	4b35      	ldr	r3, [pc, #212]	; (801167c <USB_DeactivateEndpoint+0x1b0>)
 80115a6:	4013      	ands	r3, r2
 80115a8:	600b      	str	r3, [r1, #0]
 80115aa:	e060      	b.n	801166e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	015a      	lsls	r2, r3, #5
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	4413      	add	r3, r2
 80115b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80115be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80115c2:	d11f      	bne.n	8011604 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	015a      	lsls	r2, r3, #5
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	4413      	add	r3, r2
 80115cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	68ba      	ldr	r2, [r7, #8]
 80115d4:	0151      	lsls	r1, r2, #5
 80115d6:	68fa      	ldr	r2, [r7, #12]
 80115d8:	440a      	add	r2, r1
 80115da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80115de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80115e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	015a      	lsls	r2, r3, #5
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	4413      	add	r3, r2
 80115ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	68ba      	ldr	r2, [r7, #8]
 80115f4:	0151      	lsls	r1, r2, #5
 80115f6:	68fa      	ldr	r2, [r7, #12]
 80115f8:	440a      	add	r2, r1
 80115fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80115fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011602:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801160a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	f003 030f 	and.w	r3, r3, #15
 8011614:	2101      	movs	r1, #1
 8011616:	fa01 f303 	lsl.w	r3, r1, r3
 801161a:	041b      	lsls	r3, r3, #16
 801161c:	43db      	mvns	r3, r3
 801161e:	68f9      	ldr	r1, [r7, #12]
 8011620:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011624:	4013      	ands	r3, r2
 8011626:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801162e:	69da      	ldr	r2, [r3, #28]
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	f003 030f 	and.w	r3, r3, #15
 8011638:	2101      	movs	r1, #1
 801163a:	fa01 f303 	lsl.w	r3, r1, r3
 801163e:	041b      	lsls	r3, r3, #16
 8011640:	43db      	mvns	r3, r3
 8011642:	68f9      	ldr	r1, [r7, #12]
 8011644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011648:	4013      	ands	r3, r2
 801164a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801164c:	68bb      	ldr	r3, [r7, #8]
 801164e:	015a      	lsls	r2, r3, #5
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	4413      	add	r3, r2
 8011654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011658:	681a      	ldr	r2, [r3, #0]
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	0159      	lsls	r1, r3, #5
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	440b      	add	r3, r1
 8011662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011666:	4619      	mov	r1, r3
 8011668:	4b05      	ldr	r3, [pc, #20]	; (8011680 <USB_DeactivateEndpoint+0x1b4>)
 801166a:	4013      	ands	r3, r2
 801166c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801166e:	2300      	movs	r3, #0
}
 8011670:	4618      	mov	r0, r3
 8011672:	3714      	adds	r7, #20
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr
 801167c:	ec337800 	.word	0xec337800
 8011680:	eff37800 	.word	0xeff37800

08011684 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b08a      	sub	sp, #40	; 0x28
 8011688:	af02      	add	r7, sp, #8
 801168a:	60f8      	str	r0, [r7, #12]
 801168c:	60b9      	str	r1, [r7, #8]
 801168e:	4613      	mov	r3, r2
 8011690:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	785b      	ldrb	r3, [r3, #1]
 80116a0:	2b01      	cmp	r3, #1
 80116a2:	f040 8181 	bne.w	80119a8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	691b      	ldr	r3, [r3, #16]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d132      	bne.n	8011714 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80116ae:	69bb      	ldr	r3, [r7, #24]
 80116b0:	015a      	lsls	r2, r3, #5
 80116b2:	69fb      	ldr	r3, [r7, #28]
 80116b4:	4413      	add	r3, r2
 80116b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116ba:	691a      	ldr	r2, [r3, #16]
 80116bc:	69bb      	ldr	r3, [r7, #24]
 80116be:	0159      	lsls	r1, r3, #5
 80116c0:	69fb      	ldr	r3, [r7, #28]
 80116c2:	440b      	add	r3, r1
 80116c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116c8:	4619      	mov	r1, r3
 80116ca:	4ba5      	ldr	r3, [pc, #660]	; (8011960 <USB_EPStartXfer+0x2dc>)
 80116cc:	4013      	ands	r3, r2
 80116ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80116d0:	69bb      	ldr	r3, [r7, #24]
 80116d2:	015a      	lsls	r2, r3, #5
 80116d4:	69fb      	ldr	r3, [r7, #28]
 80116d6:	4413      	add	r3, r2
 80116d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116dc:	691b      	ldr	r3, [r3, #16]
 80116de:	69ba      	ldr	r2, [r7, #24]
 80116e0:	0151      	lsls	r1, r2, #5
 80116e2:	69fa      	ldr	r2, [r7, #28]
 80116e4:	440a      	add	r2, r1
 80116e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80116ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80116f0:	69bb      	ldr	r3, [r7, #24]
 80116f2:	015a      	lsls	r2, r3, #5
 80116f4:	69fb      	ldr	r3, [r7, #28]
 80116f6:	4413      	add	r3, r2
 80116f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116fc:	691a      	ldr	r2, [r3, #16]
 80116fe:	69bb      	ldr	r3, [r7, #24]
 8011700:	0159      	lsls	r1, r3, #5
 8011702:	69fb      	ldr	r3, [r7, #28]
 8011704:	440b      	add	r3, r1
 8011706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801170a:	4619      	mov	r1, r3
 801170c:	4b95      	ldr	r3, [pc, #596]	; (8011964 <USB_EPStartXfer+0x2e0>)
 801170e:	4013      	ands	r3, r2
 8011710:	610b      	str	r3, [r1, #16]
 8011712:	e092      	b.n	801183a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011714:	69bb      	ldr	r3, [r7, #24]
 8011716:	015a      	lsls	r2, r3, #5
 8011718:	69fb      	ldr	r3, [r7, #28]
 801171a:	4413      	add	r3, r2
 801171c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011720:	691a      	ldr	r2, [r3, #16]
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	0159      	lsls	r1, r3, #5
 8011726:	69fb      	ldr	r3, [r7, #28]
 8011728:	440b      	add	r3, r1
 801172a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801172e:	4619      	mov	r1, r3
 8011730:	4b8c      	ldr	r3, [pc, #560]	; (8011964 <USB_EPStartXfer+0x2e0>)
 8011732:	4013      	ands	r3, r2
 8011734:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011736:	69bb      	ldr	r3, [r7, #24]
 8011738:	015a      	lsls	r2, r3, #5
 801173a:	69fb      	ldr	r3, [r7, #28]
 801173c:	4413      	add	r3, r2
 801173e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011742:	691a      	ldr	r2, [r3, #16]
 8011744:	69bb      	ldr	r3, [r7, #24]
 8011746:	0159      	lsls	r1, r3, #5
 8011748:	69fb      	ldr	r3, [r7, #28]
 801174a:	440b      	add	r3, r1
 801174c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011750:	4619      	mov	r1, r3
 8011752:	4b83      	ldr	r3, [pc, #524]	; (8011960 <USB_EPStartXfer+0x2dc>)
 8011754:	4013      	ands	r3, r2
 8011756:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8011758:	69bb      	ldr	r3, [r7, #24]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d11a      	bne.n	8011794 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	691a      	ldr	r2, [r3, #16]
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	689b      	ldr	r3, [r3, #8]
 8011766:	429a      	cmp	r2, r3
 8011768:	d903      	bls.n	8011772 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	689a      	ldr	r2, [r3, #8]
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011772:	69bb      	ldr	r3, [r7, #24]
 8011774:	015a      	lsls	r2, r3, #5
 8011776:	69fb      	ldr	r3, [r7, #28]
 8011778:	4413      	add	r3, r2
 801177a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801177e:	691b      	ldr	r3, [r3, #16]
 8011780:	69ba      	ldr	r2, [r7, #24]
 8011782:	0151      	lsls	r1, r2, #5
 8011784:	69fa      	ldr	r2, [r7, #28]
 8011786:	440a      	add	r2, r1
 8011788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801178c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011790:	6113      	str	r3, [r2, #16]
 8011792:	e01b      	b.n	80117cc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011794:	69bb      	ldr	r3, [r7, #24]
 8011796:	015a      	lsls	r2, r3, #5
 8011798:	69fb      	ldr	r3, [r7, #28]
 801179a:	4413      	add	r3, r2
 801179c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117a0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	6919      	ldr	r1, [r3, #16]
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	689b      	ldr	r3, [r3, #8]
 80117aa:	440b      	add	r3, r1
 80117ac:	1e59      	subs	r1, r3, #1
 80117ae:	68bb      	ldr	r3, [r7, #8]
 80117b0:	689b      	ldr	r3, [r3, #8]
 80117b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80117b6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80117b8:	4b6b      	ldr	r3, [pc, #428]	; (8011968 <USB_EPStartXfer+0x2e4>)
 80117ba:	400b      	ands	r3, r1
 80117bc:	69b9      	ldr	r1, [r7, #24]
 80117be:	0148      	lsls	r0, r1, #5
 80117c0:	69f9      	ldr	r1, [r7, #28]
 80117c2:	4401      	add	r1, r0
 80117c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80117c8:	4313      	orrs	r3, r2
 80117ca:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80117cc:	69bb      	ldr	r3, [r7, #24]
 80117ce:	015a      	lsls	r2, r3, #5
 80117d0:	69fb      	ldr	r3, [r7, #28]
 80117d2:	4413      	add	r3, r2
 80117d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117d8:	691a      	ldr	r2, [r3, #16]
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	691b      	ldr	r3, [r3, #16]
 80117de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80117e2:	69b9      	ldr	r1, [r7, #24]
 80117e4:	0148      	lsls	r0, r1, #5
 80117e6:	69f9      	ldr	r1, [r7, #28]
 80117e8:	4401      	add	r1, r0
 80117ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80117ee:	4313      	orrs	r3, r2
 80117f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	791b      	ldrb	r3, [r3, #4]
 80117f6:	2b01      	cmp	r3, #1
 80117f8:	d11f      	bne.n	801183a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80117fa:	69bb      	ldr	r3, [r7, #24]
 80117fc:	015a      	lsls	r2, r3, #5
 80117fe:	69fb      	ldr	r3, [r7, #28]
 8011800:	4413      	add	r3, r2
 8011802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011806:	691b      	ldr	r3, [r3, #16]
 8011808:	69ba      	ldr	r2, [r7, #24]
 801180a:	0151      	lsls	r1, r2, #5
 801180c:	69fa      	ldr	r2, [r7, #28]
 801180e:	440a      	add	r2, r1
 8011810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011814:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011818:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801181a:	69bb      	ldr	r3, [r7, #24]
 801181c:	015a      	lsls	r2, r3, #5
 801181e:	69fb      	ldr	r3, [r7, #28]
 8011820:	4413      	add	r3, r2
 8011822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011826:	691b      	ldr	r3, [r3, #16]
 8011828:	69ba      	ldr	r2, [r7, #24]
 801182a:	0151      	lsls	r1, r2, #5
 801182c:	69fa      	ldr	r2, [r7, #28]
 801182e:	440a      	add	r2, r1
 8011830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011838:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801183a:	79fb      	ldrb	r3, [r7, #7]
 801183c:	2b01      	cmp	r3, #1
 801183e:	d14b      	bne.n	80118d8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	69db      	ldr	r3, [r3, #28]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d009      	beq.n	801185c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011848:	69bb      	ldr	r3, [r7, #24]
 801184a:	015a      	lsls	r2, r3, #5
 801184c:	69fb      	ldr	r3, [r7, #28]
 801184e:	4413      	add	r3, r2
 8011850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011854:	461a      	mov	r2, r3
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	69db      	ldr	r3, [r3, #28]
 801185a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	791b      	ldrb	r3, [r3, #4]
 8011860:	2b01      	cmp	r3, #1
 8011862:	d128      	bne.n	80118b6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011864:	69fb      	ldr	r3, [r7, #28]
 8011866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801186a:	689b      	ldr	r3, [r3, #8]
 801186c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011870:	2b00      	cmp	r3, #0
 8011872:	d110      	bne.n	8011896 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011874:	69bb      	ldr	r3, [r7, #24]
 8011876:	015a      	lsls	r2, r3, #5
 8011878:	69fb      	ldr	r3, [r7, #28]
 801187a:	4413      	add	r3, r2
 801187c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	69ba      	ldr	r2, [r7, #24]
 8011884:	0151      	lsls	r1, r2, #5
 8011886:	69fa      	ldr	r2, [r7, #28]
 8011888:	440a      	add	r2, r1
 801188a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801188e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011892:	6013      	str	r3, [r2, #0]
 8011894:	e00f      	b.n	80118b6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011896:	69bb      	ldr	r3, [r7, #24]
 8011898:	015a      	lsls	r2, r3, #5
 801189a:	69fb      	ldr	r3, [r7, #28]
 801189c:	4413      	add	r3, r2
 801189e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	69ba      	ldr	r2, [r7, #24]
 80118a6:	0151      	lsls	r1, r2, #5
 80118a8:	69fa      	ldr	r2, [r7, #28]
 80118aa:	440a      	add	r2, r1
 80118ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80118b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80118b6:	69bb      	ldr	r3, [r7, #24]
 80118b8:	015a      	lsls	r2, r3, #5
 80118ba:	69fb      	ldr	r3, [r7, #28]
 80118bc:	4413      	add	r3, r2
 80118be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	69ba      	ldr	r2, [r7, #24]
 80118c6:	0151      	lsls	r1, r2, #5
 80118c8:	69fa      	ldr	r2, [r7, #28]
 80118ca:	440a      	add	r2, r1
 80118cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80118d4:	6013      	str	r3, [r2, #0]
 80118d6:	e16a      	b.n	8011bae <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	015a      	lsls	r2, r3, #5
 80118dc:	69fb      	ldr	r3, [r7, #28]
 80118de:	4413      	add	r3, r2
 80118e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	69ba      	ldr	r2, [r7, #24]
 80118e8:	0151      	lsls	r1, r2, #5
 80118ea:	69fa      	ldr	r2, [r7, #28]
 80118ec:	440a      	add	r2, r1
 80118ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80118f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	791b      	ldrb	r3, [r3, #4]
 80118fc:	2b01      	cmp	r3, #1
 80118fe:	d015      	beq.n	801192c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	691b      	ldr	r3, [r3, #16]
 8011904:	2b00      	cmp	r3, #0
 8011906:	f000 8152 	beq.w	8011bae <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801190a:	69fb      	ldr	r3, [r7, #28]
 801190c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	781b      	ldrb	r3, [r3, #0]
 8011916:	f003 030f 	and.w	r3, r3, #15
 801191a:	2101      	movs	r1, #1
 801191c:	fa01 f303 	lsl.w	r3, r1, r3
 8011920:	69f9      	ldr	r1, [r7, #28]
 8011922:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011926:	4313      	orrs	r3, r2
 8011928:	634b      	str	r3, [r1, #52]	; 0x34
 801192a:	e140      	b.n	8011bae <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801192c:	69fb      	ldr	r3, [r7, #28]
 801192e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011932:	689b      	ldr	r3, [r3, #8]
 8011934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011938:	2b00      	cmp	r3, #0
 801193a:	d117      	bne.n	801196c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801193c:	69bb      	ldr	r3, [r7, #24]
 801193e:	015a      	lsls	r2, r3, #5
 8011940:	69fb      	ldr	r3, [r7, #28]
 8011942:	4413      	add	r3, r2
 8011944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	69ba      	ldr	r2, [r7, #24]
 801194c:	0151      	lsls	r1, r2, #5
 801194e:	69fa      	ldr	r2, [r7, #28]
 8011950:	440a      	add	r2, r1
 8011952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011956:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801195a:	6013      	str	r3, [r2, #0]
 801195c:	e016      	b.n	801198c <USB_EPStartXfer+0x308>
 801195e:	bf00      	nop
 8011960:	e007ffff 	.word	0xe007ffff
 8011964:	fff80000 	.word	0xfff80000
 8011968:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801196c:	69bb      	ldr	r3, [r7, #24]
 801196e:	015a      	lsls	r2, r3, #5
 8011970:	69fb      	ldr	r3, [r7, #28]
 8011972:	4413      	add	r3, r2
 8011974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	69ba      	ldr	r2, [r7, #24]
 801197c:	0151      	lsls	r1, r2, #5
 801197e:	69fa      	ldr	r2, [r7, #28]
 8011980:	440a      	add	r2, r1
 8011982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801198a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	68d9      	ldr	r1, [r3, #12]
 8011990:	68bb      	ldr	r3, [r7, #8]
 8011992:	781a      	ldrb	r2, [r3, #0]
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	691b      	ldr	r3, [r3, #16]
 8011998:	b298      	uxth	r0, r3
 801199a:	79fb      	ldrb	r3, [r7, #7]
 801199c:	9300      	str	r3, [sp, #0]
 801199e:	4603      	mov	r3, r0
 80119a0:	68f8      	ldr	r0, [r7, #12]
 80119a2:	f000 f9b9 	bl	8011d18 <USB_WritePacket>
 80119a6:	e102      	b.n	8011bae <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80119a8:	69bb      	ldr	r3, [r7, #24]
 80119aa:	015a      	lsls	r2, r3, #5
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	4413      	add	r3, r2
 80119b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119b4:	691a      	ldr	r2, [r3, #16]
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	0159      	lsls	r1, r3, #5
 80119ba:	69fb      	ldr	r3, [r7, #28]
 80119bc:	440b      	add	r3, r1
 80119be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119c2:	4619      	mov	r1, r3
 80119c4:	4b7c      	ldr	r3, [pc, #496]	; (8011bb8 <USB_EPStartXfer+0x534>)
 80119c6:	4013      	ands	r3, r2
 80119c8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80119ca:	69bb      	ldr	r3, [r7, #24]
 80119cc:	015a      	lsls	r2, r3, #5
 80119ce:	69fb      	ldr	r3, [r7, #28]
 80119d0:	4413      	add	r3, r2
 80119d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119d6:	691a      	ldr	r2, [r3, #16]
 80119d8:	69bb      	ldr	r3, [r7, #24]
 80119da:	0159      	lsls	r1, r3, #5
 80119dc:	69fb      	ldr	r3, [r7, #28]
 80119de:	440b      	add	r3, r1
 80119e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119e4:	4619      	mov	r1, r3
 80119e6:	4b75      	ldr	r3, [pc, #468]	; (8011bbc <USB_EPStartXfer+0x538>)
 80119e8:	4013      	ands	r3, r2
 80119ea:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80119ec:	69bb      	ldr	r3, [r7, #24]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d12f      	bne.n	8011a52 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	691b      	ldr	r3, [r3, #16]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d003      	beq.n	8011a02 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80119fa:	68bb      	ldr	r3, [r7, #8]
 80119fc:	689a      	ldr	r2, [r3, #8]
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	689a      	ldr	r2, [r3, #8]
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8011a0a:	69bb      	ldr	r3, [r7, #24]
 8011a0c:	015a      	lsls	r2, r3, #5
 8011a0e:	69fb      	ldr	r3, [r7, #28]
 8011a10:	4413      	add	r3, r2
 8011a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a16:	691a      	ldr	r2, [r3, #16]
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	6a1b      	ldr	r3, [r3, #32]
 8011a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a20:	69b9      	ldr	r1, [r7, #24]
 8011a22:	0148      	lsls	r0, r1, #5
 8011a24:	69f9      	ldr	r1, [r7, #28]
 8011a26:	4401      	add	r1, r0
 8011a28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011a2c:	4313      	orrs	r3, r2
 8011a2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011a30:	69bb      	ldr	r3, [r7, #24]
 8011a32:	015a      	lsls	r2, r3, #5
 8011a34:	69fb      	ldr	r3, [r7, #28]
 8011a36:	4413      	add	r3, r2
 8011a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a3c:	691b      	ldr	r3, [r3, #16]
 8011a3e:	69ba      	ldr	r2, [r7, #24]
 8011a40:	0151      	lsls	r1, r2, #5
 8011a42:	69fa      	ldr	r2, [r7, #28]
 8011a44:	440a      	add	r2, r1
 8011a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a4e:	6113      	str	r3, [r2, #16]
 8011a50:	e05f      	b.n	8011b12 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	691b      	ldr	r3, [r3, #16]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d123      	bne.n	8011aa2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011a5a:	69bb      	ldr	r3, [r7, #24]
 8011a5c:	015a      	lsls	r2, r3, #5
 8011a5e:	69fb      	ldr	r3, [r7, #28]
 8011a60:	4413      	add	r3, r2
 8011a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a66:	691a      	ldr	r2, [r3, #16]
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	689b      	ldr	r3, [r3, #8]
 8011a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a70:	69b9      	ldr	r1, [r7, #24]
 8011a72:	0148      	lsls	r0, r1, #5
 8011a74:	69f9      	ldr	r1, [r7, #28]
 8011a76:	4401      	add	r1, r0
 8011a78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011a7c:	4313      	orrs	r3, r2
 8011a7e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011a80:	69bb      	ldr	r3, [r7, #24]
 8011a82:	015a      	lsls	r2, r3, #5
 8011a84:	69fb      	ldr	r3, [r7, #28]
 8011a86:	4413      	add	r3, r2
 8011a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a8c:	691b      	ldr	r3, [r3, #16]
 8011a8e:	69ba      	ldr	r2, [r7, #24]
 8011a90:	0151      	lsls	r1, r2, #5
 8011a92:	69fa      	ldr	r2, [r7, #28]
 8011a94:	440a      	add	r2, r1
 8011a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a9e:	6113      	str	r3, [r2, #16]
 8011aa0:	e037      	b.n	8011b12 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011aa2:	68bb      	ldr	r3, [r7, #8]
 8011aa4:	691a      	ldr	r2, [r3, #16]
 8011aa6:	68bb      	ldr	r3, [r7, #8]
 8011aa8:	689b      	ldr	r3, [r3, #8]
 8011aaa:	4413      	add	r3, r2
 8011aac:	1e5a      	subs	r2, r3, #1
 8011aae:	68bb      	ldr	r3, [r7, #8]
 8011ab0:	689b      	ldr	r3, [r3, #8]
 8011ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ab6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	689b      	ldr	r3, [r3, #8]
 8011abc:	8afa      	ldrh	r2, [r7, #22]
 8011abe:	fb03 f202 	mul.w	r2, r3, r2
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011ac6:	69bb      	ldr	r3, [r7, #24]
 8011ac8:	015a      	lsls	r2, r3, #5
 8011aca:	69fb      	ldr	r3, [r7, #28]
 8011acc:	4413      	add	r3, r2
 8011ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ad2:	691a      	ldr	r2, [r3, #16]
 8011ad4:	8afb      	ldrh	r3, [r7, #22]
 8011ad6:	04d9      	lsls	r1, r3, #19
 8011ad8:	4b39      	ldr	r3, [pc, #228]	; (8011bc0 <USB_EPStartXfer+0x53c>)
 8011ada:	400b      	ands	r3, r1
 8011adc:	69b9      	ldr	r1, [r7, #24]
 8011ade:	0148      	lsls	r0, r1, #5
 8011ae0:	69f9      	ldr	r1, [r7, #28]
 8011ae2:	4401      	add	r1, r0
 8011ae4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011ae8:	4313      	orrs	r3, r2
 8011aea:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8011aec:	69bb      	ldr	r3, [r7, #24]
 8011aee:	015a      	lsls	r2, r3, #5
 8011af0:	69fb      	ldr	r3, [r7, #28]
 8011af2:	4413      	add	r3, r2
 8011af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011af8:	691a      	ldr	r2, [r3, #16]
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	6a1b      	ldr	r3, [r3, #32]
 8011afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011b02:	69b9      	ldr	r1, [r7, #24]
 8011b04:	0148      	lsls	r0, r1, #5
 8011b06:	69f9      	ldr	r1, [r7, #28]
 8011b08:	4401      	add	r1, r0
 8011b0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011b0e:	4313      	orrs	r3, r2
 8011b10:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8011b12:	79fb      	ldrb	r3, [r7, #7]
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	d10d      	bne.n	8011b34 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	68db      	ldr	r3, [r3, #12]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d009      	beq.n	8011b34 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	68d9      	ldr	r1, [r3, #12]
 8011b24:	69bb      	ldr	r3, [r7, #24]
 8011b26:	015a      	lsls	r2, r3, #5
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	4413      	add	r3, r2
 8011b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b30:	460a      	mov	r2, r1
 8011b32:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	791b      	ldrb	r3, [r3, #4]
 8011b38:	2b01      	cmp	r3, #1
 8011b3a:	d128      	bne.n	8011b8e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011b3c:	69fb      	ldr	r3, [r7, #28]
 8011b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b42:	689b      	ldr	r3, [r3, #8]
 8011b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d110      	bne.n	8011b6e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011b4c:	69bb      	ldr	r3, [r7, #24]
 8011b4e:	015a      	lsls	r2, r3, #5
 8011b50:	69fb      	ldr	r3, [r7, #28]
 8011b52:	4413      	add	r3, r2
 8011b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	69ba      	ldr	r2, [r7, #24]
 8011b5c:	0151      	lsls	r1, r2, #5
 8011b5e:	69fa      	ldr	r2, [r7, #28]
 8011b60:	440a      	add	r2, r1
 8011b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011b6a:	6013      	str	r3, [r2, #0]
 8011b6c:	e00f      	b.n	8011b8e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011b6e:	69bb      	ldr	r3, [r7, #24]
 8011b70:	015a      	lsls	r2, r3, #5
 8011b72:	69fb      	ldr	r3, [r7, #28]
 8011b74:	4413      	add	r3, r2
 8011b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	69ba      	ldr	r2, [r7, #24]
 8011b7e:	0151      	lsls	r1, r2, #5
 8011b80:	69fa      	ldr	r2, [r7, #28]
 8011b82:	440a      	add	r2, r1
 8011b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011b8c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011b8e:	69bb      	ldr	r3, [r7, #24]
 8011b90:	015a      	lsls	r2, r3, #5
 8011b92:	69fb      	ldr	r3, [r7, #28]
 8011b94:	4413      	add	r3, r2
 8011b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	69ba      	ldr	r2, [r7, #24]
 8011b9e:	0151      	lsls	r1, r2, #5
 8011ba0:	69fa      	ldr	r2, [r7, #28]
 8011ba2:	440a      	add	r2, r1
 8011ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ba8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011bac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011bae:	2300      	movs	r3, #0
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3720      	adds	r7, #32
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}
 8011bb8:	fff80000 	.word	0xfff80000
 8011bbc:	e007ffff 	.word	0xe007ffff
 8011bc0:	1ff80000 	.word	0x1ff80000

08011bc4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011bc4:	b480      	push	{r7}
 8011bc6:	b087      	sub	sp, #28
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	785b      	ldrb	r3, [r3, #1]
 8011bde:	2b01      	cmp	r3, #1
 8011be0:	d14a      	bne.n	8011c78 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	015a      	lsls	r2, r3, #5
 8011be8:	693b      	ldr	r3, [r7, #16]
 8011bea:	4413      	add	r3, r2
 8011bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011bfa:	f040 8086 	bne.w	8011d0a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	015a      	lsls	r2, r3, #5
 8011c04:	693b      	ldr	r3, [r7, #16]
 8011c06:	4413      	add	r3, r2
 8011c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	683a      	ldr	r2, [r7, #0]
 8011c10:	7812      	ldrb	r2, [r2, #0]
 8011c12:	0151      	lsls	r1, r2, #5
 8011c14:	693a      	ldr	r2, [r7, #16]
 8011c16:	440a      	add	r2, r1
 8011c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c20:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	015a      	lsls	r2, r3, #5
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	4413      	add	r3, r2
 8011c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	683a      	ldr	r2, [r7, #0]
 8011c34:	7812      	ldrb	r2, [r2, #0]
 8011c36:	0151      	lsls	r1, r2, #5
 8011c38:	693a      	ldr	r2, [r7, #16]
 8011c3a:	440a      	add	r2, r1
 8011c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011c44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	3301      	adds	r3, #1
 8011c4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8011c52:	4293      	cmp	r3, r2
 8011c54:	d902      	bls.n	8011c5c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8011c56:	2301      	movs	r3, #1
 8011c58:	75fb      	strb	r3, [r7, #23]
          break;
 8011c5a:	e056      	b.n	8011d0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	781b      	ldrb	r3, [r3, #0]
 8011c60:	015a      	lsls	r2, r3, #5
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	4413      	add	r3, r2
 8011c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011c70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011c74:	d0e7      	beq.n	8011c46 <USB_EPStopXfer+0x82>
 8011c76:	e048      	b.n	8011d0a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	781b      	ldrb	r3, [r3, #0]
 8011c7c:	015a      	lsls	r2, r3, #5
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	4413      	add	r3, r2
 8011c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011c90:	d13b      	bne.n	8011d0a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	781b      	ldrb	r3, [r3, #0]
 8011c96:	015a      	lsls	r2, r3, #5
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	4413      	add	r3, r2
 8011c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	683a      	ldr	r2, [r7, #0]
 8011ca4:	7812      	ldrb	r2, [r2, #0]
 8011ca6:	0151      	lsls	r1, r2, #5
 8011ca8:	693a      	ldr	r2, [r7, #16]
 8011caa:	440a      	add	r2, r1
 8011cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011cb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011cb4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	015a      	lsls	r2, r3, #5
 8011cbc:	693b      	ldr	r3, [r7, #16]
 8011cbe:	4413      	add	r3, r2
 8011cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	683a      	ldr	r2, [r7, #0]
 8011cc8:	7812      	ldrb	r2, [r2, #0]
 8011cca:	0151      	lsls	r1, r2, #5
 8011ccc:	693a      	ldr	r2, [r7, #16]
 8011cce:	440a      	add	r2, r1
 8011cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011cd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011cd8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	3301      	adds	r3, #1
 8011cde:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	f242 7210 	movw	r2, #10000	; 0x2710
 8011ce6:	4293      	cmp	r3, r2
 8011ce8:	d902      	bls.n	8011cf0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8011cea:	2301      	movs	r3, #1
 8011cec:	75fb      	strb	r3, [r7, #23]
          break;
 8011cee:	e00c      	b.n	8011d0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	015a      	lsls	r2, r3, #5
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	4413      	add	r3, r2
 8011cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011d08:	d0e7      	beq.n	8011cda <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8011d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	371c      	adds	r7, #28
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr

08011d18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b089      	sub	sp, #36	; 0x24
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	60f8      	str	r0, [r7, #12]
 8011d20:	60b9      	str	r1, [r7, #8]
 8011d22:	4611      	mov	r1, r2
 8011d24:	461a      	mov	r2, r3
 8011d26:	460b      	mov	r3, r1
 8011d28:	71fb      	strb	r3, [r7, #7]
 8011d2a:	4613      	mov	r3, r2
 8011d2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011d36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d123      	bne.n	8011d86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011d3e:	88bb      	ldrh	r3, [r7, #4]
 8011d40:	3303      	adds	r3, #3
 8011d42:	089b      	lsrs	r3, r3, #2
 8011d44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011d46:	2300      	movs	r3, #0
 8011d48:	61bb      	str	r3, [r7, #24]
 8011d4a:	e018      	b.n	8011d7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011d4c:	79fb      	ldrb	r3, [r7, #7]
 8011d4e:	031a      	lsls	r2, r3, #12
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	4413      	add	r3, r2
 8011d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d58:	461a      	mov	r2, r3
 8011d5a:	69fb      	ldr	r3, [r7, #28]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011d60:	69fb      	ldr	r3, [r7, #28]
 8011d62:	3301      	adds	r3, #1
 8011d64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011d66:	69fb      	ldr	r3, [r7, #28]
 8011d68:	3301      	adds	r3, #1
 8011d6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	3301      	adds	r3, #1
 8011d70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011d72:	69fb      	ldr	r3, [r7, #28]
 8011d74:	3301      	adds	r3, #1
 8011d76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011d78:	69bb      	ldr	r3, [r7, #24]
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	61bb      	str	r3, [r7, #24]
 8011d7e:	69ba      	ldr	r2, [r7, #24]
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d3e2      	bcc.n	8011d4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011d86:	2300      	movs	r3, #0
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3724      	adds	r7, #36	; 0x24
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d92:	4770      	bx	lr

08011d94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011d94:	b480      	push	{r7}
 8011d96:	b08b      	sub	sp, #44	; 0x2c
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	60f8      	str	r0, [r7, #12]
 8011d9c:	60b9      	str	r1, [r7, #8]
 8011d9e:	4613      	mov	r3, r2
 8011da0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011daa:	88fb      	ldrh	r3, [r7, #6]
 8011dac:	089b      	lsrs	r3, r3, #2
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011db2:	88fb      	ldrh	r3, [r7, #6]
 8011db4:	f003 0303 	and.w	r3, r3, #3
 8011db8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011dba:	2300      	movs	r3, #0
 8011dbc:	623b      	str	r3, [r7, #32]
 8011dbe:	e014      	b.n	8011dea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011dc0:	69bb      	ldr	r3, [r7, #24]
 8011dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011dc6:	681a      	ldr	r2, [r3, #0]
 8011dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dca:	601a      	str	r2, [r3, #0]
    pDest++;
 8011dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dce:	3301      	adds	r3, #1
 8011dd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd4:	3301      	adds	r3, #1
 8011dd6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dda:	3301      	adds	r3, #1
 8011ddc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de0:	3301      	adds	r3, #1
 8011de2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8011de4:	6a3b      	ldr	r3, [r7, #32]
 8011de6:	3301      	adds	r3, #1
 8011de8:	623b      	str	r3, [r7, #32]
 8011dea:	6a3a      	ldr	r2, [r7, #32]
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d3e6      	bcc.n	8011dc0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011df2:	8bfb      	ldrh	r3, [r7, #30]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d01e      	beq.n	8011e36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e02:	461a      	mov	r2, r3
 8011e04:	f107 0310 	add.w	r3, r7, #16
 8011e08:	6812      	ldr	r2, [r2, #0]
 8011e0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011e0c:	693a      	ldr	r2, [r7, #16]
 8011e0e:	6a3b      	ldr	r3, [r7, #32]
 8011e10:	b2db      	uxtb	r3, r3
 8011e12:	00db      	lsls	r3, r3, #3
 8011e14:	fa22 f303 	lsr.w	r3, r2, r3
 8011e18:	b2da      	uxtb	r2, r3
 8011e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1c:	701a      	strb	r2, [r3, #0]
      i++;
 8011e1e:	6a3b      	ldr	r3, [r7, #32]
 8011e20:	3301      	adds	r3, #1
 8011e22:	623b      	str	r3, [r7, #32]
      pDest++;
 8011e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e26:	3301      	adds	r3, #1
 8011e28:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8011e2a:	8bfb      	ldrh	r3, [r7, #30]
 8011e2c:	3b01      	subs	r3, #1
 8011e2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011e30:	8bfb      	ldrh	r3, [r7, #30]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d1ea      	bne.n	8011e0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011e38:	4618      	mov	r0, r3
 8011e3a:	372c      	adds	r7, #44	; 0x2c
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e42:	4770      	bx	lr

08011e44 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011e44:	b480      	push	{r7}
 8011e46:	b085      	sub	sp, #20
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	781b      	ldrb	r3, [r3, #0]
 8011e56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	785b      	ldrb	r3, [r3, #1]
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	d12c      	bne.n	8011eba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	015a      	lsls	r2, r3, #5
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	4413      	add	r3, r2
 8011e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	db12      	blt.n	8011e98 <USB_EPSetStall+0x54>
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d00f      	beq.n	8011e98 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	015a      	lsls	r2, r3, #5
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	4413      	add	r3, r2
 8011e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	68ba      	ldr	r2, [r7, #8]
 8011e88:	0151      	lsls	r1, r2, #5
 8011e8a:	68fa      	ldr	r2, [r7, #12]
 8011e8c:	440a      	add	r2, r1
 8011e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011e96:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	015a      	lsls	r2, r3, #5
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	4413      	add	r3, r2
 8011ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	68ba      	ldr	r2, [r7, #8]
 8011ea8:	0151      	lsls	r1, r2, #5
 8011eaa:	68fa      	ldr	r2, [r7, #12]
 8011eac:	440a      	add	r2, r1
 8011eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011eb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011eb6:	6013      	str	r3, [r2, #0]
 8011eb8:	e02b      	b.n	8011f12 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011eba:	68bb      	ldr	r3, [r7, #8]
 8011ebc:	015a      	lsls	r2, r3, #5
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	4413      	add	r3, r2
 8011ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	db12      	blt.n	8011ef2 <USB_EPSetStall+0xae>
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d00f      	beq.n	8011ef2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	015a      	lsls	r2, r3, #5
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	4413      	add	r3, r2
 8011eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	68ba      	ldr	r2, [r7, #8]
 8011ee2:	0151      	lsls	r1, r2, #5
 8011ee4:	68fa      	ldr	r2, [r7, #12]
 8011ee6:	440a      	add	r2, r1
 8011ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011eec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011ef0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	015a      	lsls	r2, r3, #5
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	4413      	add	r3, r2
 8011efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	68ba      	ldr	r2, [r7, #8]
 8011f02:	0151      	lsls	r1, r2, #5
 8011f04:	68fa      	ldr	r2, [r7, #12]
 8011f06:	440a      	add	r2, r1
 8011f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011f10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011f12:	2300      	movs	r3, #0
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3714      	adds	r7, #20
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1e:	4770      	bx	lr

08011f20 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011f20:	b480      	push	{r7}
 8011f22:	b085      	sub	sp, #20
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	781b      	ldrb	r3, [r3, #0]
 8011f32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	785b      	ldrb	r3, [r3, #1]
 8011f38:	2b01      	cmp	r3, #1
 8011f3a:	d128      	bne.n	8011f8e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	015a      	lsls	r2, r3, #5
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	4413      	add	r3, r2
 8011f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	68ba      	ldr	r2, [r7, #8]
 8011f4c:	0151      	lsls	r1, r2, #5
 8011f4e:	68fa      	ldr	r2, [r7, #12]
 8011f50:	440a      	add	r2, r1
 8011f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011f5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	791b      	ldrb	r3, [r3, #4]
 8011f60:	2b03      	cmp	r3, #3
 8011f62:	d003      	beq.n	8011f6c <USB_EPClearStall+0x4c>
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	791b      	ldrb	r3, [r3, #4]
 8011f68:	2b02      	cmp	r3, #2
 8011f6a:	d138      	bne.n	8011fde <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	015a      	lsls	r2, r3, #5
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	4413      	add	r3, r2
 8011f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	68ba      	ldr	r2, [r7, #8]
 8011f7c:	0151      	lsls	r1, r2, #5
 8011f7e:	68fa      	ldr	r2, [r7, #12]
 8011f80:	440a      	add	r2, r1
 8011f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f8a:	6013      	str	r3, [r2, #0]
 8011f8c:	e027      	b.n	8011fde <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	015a      	lsls	r2, r3, #5
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	4413      	add	r3, r2
 8011f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	68ba      	ldr	r2, [r7, #8]
 8011f9e:	0151      	lsls	r1, r2, #5
 8011fa0:	68fa      	ldr	r2, [r7, #12]
 8011fa2:	440a      	add	r2, r1
 8011fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fa8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011fac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	791b      	ldrb	r3, [r3, #4]
 8011fb2:	2b03      	cmp	r3, #3
 8011fb4:	d003      	beq.n	8011fbe <USB_EPClearStall+0x9e>
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	791b      	ldrb	r3, [r3, #4]
 8011fba:	2b02      	cmp	r3, #2
 8011fbc:	d10f      	bne.n	8011fde <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	015a      	lsls	r2, r3, #5
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	4413      	add	r3, r2
 8011fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	68ba      	ldr	r2, [r7, #8]
 8011fce:	0151      	lsls	r1, r2, #5
 8011fd0:	68fa      	ldr	r2, [r7, #12]
 8011fd2:	440a      	add	r2, r1
 8011fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011fdc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011fde:	2300      	movs	r3, #0
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3714      	adds	r7, #20
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fea:	4770      	bx	lr

08011fec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011fec:	b480      	push	{r7}
 8011fee:	b085      	sub	sp, #20
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	460b      	mov	r3, r1
 8011ff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	68fa      	ldr	r2, [r7, #12]
 8012006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801200a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801200e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012016:	681a      	ldr	r2, [r3, #0]
 8012018:	78fb      	ldrb	r3, [r7, #3]
 801201a:	011b      	lsls	r3, r3, #4
 801201c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012020:	68f9      	ldr	r1, [r7, #12]
 8012022:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012026:	4313      	orrs	r3, r2
 8012028:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801202a:	2300      	movs	r3, #0
}
 801202c:	4618      	mov	r0, r3
 801202e:	3714      	adds	r7, #20
 8012030:	46bd      	mov	sp, r7
 8012032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012036:	4770      	bx	lr

08012038 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012038:	b480      	push	{r7}
 801203a:	b085      	sub	sp, #20
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	68fa      	ldr	r2, [r7, #12]
 801204e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012052:	f023 0303 	bic.w	r3, r3, #3
 8012056:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801205e:	685b      	ldr	r3, [r3, #4]
 8012060:	68fa      	ldr	r2, [r7, #12]
 8012062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012066:	f023 0302 	bic.w	r3, r3, #2
 801206a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801206c:	2300      	movs	r3, #0
}
 801206e:	4618      	mov	r0, r3
 8012070:	3714      	adds	r7, #20
 8012072:	46bd      	mov	sp, r7
 8012074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012078:	4770      	bx	lr

0801207a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801207a:	b480      	push	{r7}
 801207c:	b085      	sub	sp, #20
 801207e:	af00      	add	r7, sp, #0
 8012080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	68fa      	ldr	r2, [r7, #12]
 8012090:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012094:	f023 0303 	bic.w	r3, r3, #3
 8012098:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120a0:	685b      	ldr	r3, [r3, #4]
 80120a2:	68fa      	ldr	r2, [r7, #12]
 80120a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80120a8:	f043 0302 	orr.w	r3, r3, #2
 80120ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80120ae:	2300      	movs	r3, #0
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3714      	adds	r7, #20
 80120b4:	46bd      	mov	sp, r7
 80120b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ba:	4770      	bx	lr

080120bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80120bc:	b480      	push	{r7}
 80120be:	b085      	sub	sp, #20
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	695b      	ldr	r3, [r3, #20]
 80120c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	699b      	ldr	r3, [r3, #24]
 80120ce:	68fa      	ldr	r2, [r7, #12]
 80120d0:	4013      	ands	r3, r2
 80120d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80120d4:	68fb      	ldr	r3, [r7, #12]
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3714      	adds	r7, #20
 80120da:	46bd      	mov	sp, r7
 80120dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e0:	4770      	bx	lr

080120e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80120e2:	b480      	push	{r7}
 80120e4:	b085      	sub	sp, #20
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120f4:	699b      	ldr	r3, [r3, #24]
 80120f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120fe:	69db      	ldr	r3, [r3, #28]
 8012100:	68ba      	ldr	r2, [r7, #8]
 8012102:	4013      	ands	r3, r2
 8012104:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	0c1b      	lsrs	r3, r3, #16
}
 801210a:	4618      	mov	r0, r3
 801210c:	3714      	adds	r7, #20
 801210e:	46bd      	mov	sp, r7
 8012110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012114:	4770      	bx	lr

08012116 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012116:	b480      	push	{r7}
 8012118:	b085      	sub	sp, #20
 801211a:	af00      	add	r7, sp, #0
 801211c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012128:	699b      	ldr	r3, [r3, #24]
 801212a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012132:	69db      	ldr	r3, [r3, #28]
 8012134:	68ba      	ldr	r2, [r7, #8]
 8012136:	4013      	ands	r3, r2
 8012138:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801213a:	68bb      	ldr	r3, [r7, #8]
 801213c:	b29b      	uxth	r3, r3
}
 801213e:	4618      	mov	r0, r3
 8012140:	3714      	adds	r7, #20
 8012142:	46bd      	mov	sp, r7
 8012144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012148:	4770      	bx	lr

0801214a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801214a:	b480      	push	{r7}
 801214c:	b085      	sub	sp, #20
 801214e:	af00      	add	r7, sp, #0
 8012150:	6078      	str	r0, [r7, #4]
 8012152:	460b      	mov	r3, r1
 8012154:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801215a:	78fb      	ldrb	r3, [r7, #3]
 801215c:	015a      	lsls	r2, r3, #5
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	4413      	add	r3, r2
 8012162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012166:	689b      	ldr	r3, [r3, #8]
 8012168:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012170:	695b      	ldr	r3, [r3, #20]
 8012172:	68ba      	ldr	r2, [r7, #8]
 8012174:	4013      	ands	r3, r2
 8012176:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012178:	68bb      	ldr	r3, [r7, #8]
}
 801217a:	4618      	mov	r0, r3
 801217c:	3714      	adds	r7, #20
 801217e:	46bd      	mov	sp, r7
 8012180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012184:	4770      	bx	lr

08012186 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012186:	b480      	push	{r7}
 8012188:	b087      	sub	sp, #28
 801218a:	af00      	add	r7, sp, #0
 801218c:	6078      	str	r0, [r7, #4]
 801218e:	460b      	mov	r3, r1
 8012190:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801219c:	691b      	ldr	r3, [r3, #16]
 801219e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80121aa:	78fb      	ldrb	r3, [r7, #3]
 80121ac:	f003 030f 	and.w	r3, r3, #15
 80121b0:	68fa      	ldr	r2, [r7, #12]
 80121b2:	fa22 f303 	lsr.w	r3, r2, r3
 80121b6:	01db      	lsls	r3, r3, #7
 80121b8:	b2db      	uxtb	r3, r3
 80121ba:	693a      	ldr	r2, [r7, #16]
 80121bc:	4313      	orrs	r3, r2
 80121be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80121c0:	78fb      	ldrb	r3, [r7, #3]
 80121c2:	015a      	lsls	r2, r3, #5
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	4413      	add	r3, r2
 80121c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121cc:	689b      	ldr	r3, [r3, #8]
 80121ce:	693a      	ldr	r2, [r7, #16]
 80121d0:	4013      	ands	r3, r2
 80121d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80121d4:	68bb      	ldr	r3, [r7, #8]
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	371c      	adds	r7, #28
 80121da:	46bd      	mov	sp, r7
 80121dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e0:	4770      	bx	lr

080121e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80121e2:	b480      	push	{r7}
 80121e4:	b083      	sub	sp, #12
 80121e6:	af00      	add	r7, sp, #0
 80121e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	695b      	ldr	r3, [r3, #20]
 80121ee:	f003 0301 	and.w	r3, r3, #1
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	370c      	adds	r7, #12
 80121f6:	46bd      	mov	sp, r7
 80121f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fc:	4770      	bx	lr
	...

08012200 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012200:	b480      	push	{r7}
 8012202:	b085      	sub	sp, #20
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012212:	681a      	ldr	r2, [r3, #0]
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801221a:	4619      	mov	r1, r3
 801221c:	4b09      	ldr	r3, [pc, #36]	; (8012244 <USB_ActivateSetup+0x44>)
 801221e:	4013      	ands	r3, r2
 8012220:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	68fa      	ldr	r2, [r7, #12]
 801222c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012234:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012236:	2300      	movs	r3, #0
}
 8012238:	4618      	mov	r0, r3
 801223a:	3714      	adds	r7, #20
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr
 8012244:	fffff800 	.word	0xfffff800

08012248 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8012248:	b480      	push	{r7}
 801224a:	b087      	sub	sp, #28
 801224c:	af00      	add	r7, sp, #0
 801224e:	60f8      	str	r0, [r7, #12]
 8012250:	460b      	mov	r3, r1
 8012252:	607a      	str	r2, [r7, #4]
 8012254:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	333c      	adds	r3, #60	; 0x3c
 801225e:	3304      	adds	r3, #4
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012264:	693b      	ldr	r3, [r7, #16]
 8012266:	4a26      	ldr	r2, [pc, #152]	; (8012300 <USB_EP0_OutStart+0xb8>)
 8012268:	4293      	cmp	r3, r2
 801226a:	d90a      	bls.n	8012282 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801227c:	d101      	bne.n	8012282 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801227e:	2300      	movs	r3, #0
 8012280:	e037      	b.n	80122f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012288:	461a      	mov	r2, r3
 801228a:	2300      	movs	r3, #0
 801228c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012294:	691b      	ldr	r3, [r3, #16]
 8012296:	697a      	ldr	r2, [r7, #20]
 8012298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801229c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80122a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122a8:	691b      	ldr	r3, [r3, #16]
 80122aa:	697a      	ldr	r2, [r7, #20]
 80122ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122b0:	f043 0318 	orr.w	r3, r3, #24
 80122b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122bc:	691b      	ldr	r3, [r3, #16]
 80122be:	697a      	ldr	r2, [r7, #20]
 80122c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80122c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80122ca:	7afb      	ldrb	r3, [r7, #11]
 80122cc:	2b01      	cmp	r3, #1
 80122ce:	d10f      	bne.n	80122f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122d6:	461a      	mov	r2, r3
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	697a      	ldr	r2, [r7, #20]
 80122e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80122ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80122f0:	2300      	movs	r3, #0
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	371c      	adds	r7, #28
 80122f6:	46bd      	mov	sp, r7
 80122f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fc:	4770      	bx	lr
 80122fe:	bf00      	nop
 8012300:	4f54300a 	.word	0x4f54300a

08012304 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012304:	b480      	push	{r7}
 8012306:	b085      	sub	sp, #20
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801230c:	2300      	movs	r3, #0
 801230e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	3301      	adds	r3, #1
 8012314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	4a13      	ldr	r2, [pc, #76]	; (8012368 <USB_CoreReset+0x64>)
 801231a:	4293      	cmp	r3, r2
 801231c:	d901      	bls.n	8012322 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801231e:	2303      	movs	r3, #3
 8012320:	e01b      	b.n	801235a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	691b      	ldr	r3, [r3, #16]
 8012326:	2b00      	cmp	r3, #0
 8012328:	daf2      	bge.n	8012310 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801232a:	2300      	movs	r3, #0
 801232c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	691b      	ldr	r3, [r3, #16]
 8012332:	f043 0201 	orr.w	r2, r3, #1
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	3301      	adds	r3, #1
 801233e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	4a09      	ldr	r2, [pc, #36]	; (8012368 <USB_CoreReset+0x64>)
 8012344:	4293      	cmp	r3, r2
 8012346:	d901      	bls.n	801234c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012348:	2303      	movs	r3, #3
 801234a:	e006      	b.n	801235a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	691b      	ldr	r3, [r3, #16]
 8012350:	f003 0301 	and.w	r3, r3, #1
 8012354:	2b01      	cmp	r3, #1
 8012356:	d0f0      	beq.n	801233a <USB_CoreReset+0x36>

  return HAL_OK;
 8012358:	2300      	movs	r3, #0
}
 801235a:	4618      	mov	r0, r3
 801235c:	3714      	adds	r7, #20
 801235e:	46bd      	mov	sp, r7
 8012360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop
 8012368:	00030d40 	.word	0x00030d40

0801236c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012370:	4904      	ldr	r1, [pc, #16]	; (8012384 <MX_FATFS_Init+0x18>)
 8012372:	4805      	ldr	r0, [pc, #20]	; (8012388 <MX_FATFS_Init+0x1c>)
 8012374:	f005 f906 	bl	8017584 <FATFS_LinkDriver>
 8012378:	4603      	mov	r3, r0
 801237a:	461a      	mov	r2, r3
 801237c:	4b03      	ldr	r3, [pc, #12]	; (801238c <MX_FATFS_Init+0x20>)
 801237e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012380:	bf00      	nop
 8012382:	bd80      	pop	{r7, pc}
 8012384:	24000d1c 	.word	0x24000d1c
 8012388:	0801c9e4 	.word	0x0801c9e4
 801238c:	24000d18 	.word	0x24000d18

08012390 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012390:	b480      	push	{r7}
 8012392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012394:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8012396:	4618      	mov	r0, r3
 8012398:	46bd      	mov	sp, r7
 801239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239e:	4770      	bx	lr

080123a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b082      	sub	sp, #8
 80123a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80123a6:	2300      	movs	r3, #0
 80123a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80123aa:	f000 f885 	bl	80124b8 <BSP_SD_IsDetected>
 80123ae:	4603      	mov	r3, r0
 80123b0:	2b01      	cmp	r3, #1
 80123b2:	d001      	beq.n	80123b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80123b4:	2302      	movs	r3, #2
 80123b6:	e012      	b.n	80123de <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80123b8:	480b      	ldr	r0, [pc, #44]	; (80123e8 <BSP_SD_Init+0x48>)
 80123ba:	f7f9 fff1 	bl	800c3a0 <HAL_SD_Init>
 80123be:	4603      	mov	r3, r0
 80123c0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80123c2:	79fb      	ldrb	r3, [r7, #7]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d109      	bne.n	80123dc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80123c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80123cc:	4806      	ldr	r0, [pc, #24]	; (80123e8 <BSP_SD_Init+0x48>)
 80123ce:	f7fa fea7 	bl	800d120 <HAL_SD_ConfigWideBusOperation>
 80123d2:	4603      	mov	r3, r0
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d001      	beq.n	80123dc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80123d8:	2301      	movs	r3, #1
 80123da:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80123dc:	79fb      	ldrb	r3, [r7, #7]
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3708      	adds	r7, #8
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}
 80123e6:	bf00      	nop
 80123e8:	240005b4 	.word	0x240005b4

080123ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b086      	sub	sp, #24
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	60b9      	str	r1, [r7, #8]
 80123f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80123f8:	2300      	movs	r3, #0
 80123fa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	68ba      	ldr	r2, [r7, #8]
 8012400:	68f9      	ldr	r1, [r7, #12]
 8012402:	4806      	ldr	r0, [pc, #24]	; (801241c <BSP_SD_ReadBlocks_DMA+0x30>)
 8012404:	f7fa f8ec 	bl	800c5e0 <HAL_SD_ReadBlocks_DMA>
 8012408:	4603      	mov	r3, r0
 801240a:	2b00      	cmp	r3, #0
 801240c:	d001      	beq.n	8012412 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801240e:	2301      	movs	r3, #1
 8012410:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012412:	7dfb      	ldrb	r3, [r7, #23]
}
 8012414:	4618      	mov	r0, r3
 8012416:	3718      	adds	r7, #24
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}
 801241c:	240005b4 	.word	0x240005b4

08012420 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b086      	sub	sp, #24
 8012424:	af00      	add	r7, sp, #0
 8012426:	60f8      	str	r0, [r7, #12]
 8012428:	60b9      	str	r1, [r7, #8]
 801242a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801242c:	2300      	movs	r3, #0
 801242e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	68ba      	ldr	r2, [r7, #8]
 8012434:	68f9      	ldr	r1, [r7, #12]
 8012436:	4806      	ldr	r0, [pc, #24]	; (8012450 <BSP_SD_WriteBlocks_DMA+0x30>)
 8012438:	f7fa f97a 	bl	800c730 <HAL_SD_WriteBlocks_DMA>
 801243c:	4603      	mov	r3, r0
 801243e:	2b00      	cmp	r3, #0
 8012440:	d001      	beq.n	8012446 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012442:	2301      	movs	r3, #1
 8012444:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012446:	7dfb      	ldrb	r3, [r7, #23]
}
 8012448:	4618      	mov	r0, r3
 801244a:	3718      	adds	r7, #24
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}
 8012450:	240005b4 	.word	0x240005b4

08012454 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012458:	4805      	ldr	r0, [pc, #20]	; (8012470 <BSP_SD_GetCardState+0x1c>)
 801245a:	f7fa ff73 	bl	800d344 <HAL_SD_GetCardState>
 801245e:	4603      	mov	r3, r0
 8012460:	2b04      	cmp	r3, #4
 8012462:	bf14      	ite	ne
 8012464:	2301      	movne	r3, #1
 8012466:	2300      	moveq	r3, #0
 8012468:	b2db      	uxtb	r3, r3
}
 801246a:	4618      	mov	r0, r3
 801246c:	bd80      	pop	{r7, pc}
 801246e:	bf00      	nop
 8012470:	240005b4 	.word	0x240005b4

08012474 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 801247c:	6879      	ldr	r1, [r7, #4]
 801247e:	4803      	ldr	r0, [pc, #12]	; (801248c <BSP_SD_GetCardInfo+0x18>)
 8012480:	f7fa fe22 	bl	800d0c8 <HAL_SD_GetCardInfo>
}
 8012484:	bf00      	nop
 8012486:	3708      	adds	r7, #8
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}
 801248c:	240005b4 	.word	0x240005b4

08012490 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b082      	sub	sp, #8
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012498:	f000 f984 	bl	80127a4 <BSP_SD_WriteCpltCallback>
}
 801249c:	bf00      	nop
 801249e:	3708      	adds	r7, #8
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}

080124a4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b082      	sub	sp, #8
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80124ac:	f000 f986 	bl	80127bc <BSP_SD_ReadCpltCallback>
}
 80124b0:	bf00      	nop
 80124b2:	3708      	adds	r7, #8
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd80      	pop	{r7, pc}

080124b8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80124b8:	b480      	push	{r7}
 80124ba:	b083      	sub	sp, #12
 80124bc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80124be:	2301      	movs	r3, #1
 80124c0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 80124c2:	79fb      	ldrb	r3, [r7, #7]
 80124c4:	b2db      	uxtb	r3, r3
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	370c      	adds	r7, #12
 80124ca:	46bd      	mov	sp, r7
 80124cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d0:	4770      	bx	lr

080124d2 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80124d2:	b580      	push	{r7, lr}
 80124d4:	b084      	sub	sp, #16
 80124d6:	af00      	add	r7, sp, #0
 80124d8:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80124da:	f7f0 fc6f 	bl	8002dbc <HAL_GetTick>
 80124de:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80124e0:	e006      	b.n	80124f0 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80124e2:	f7ff ffb7 	bl	8012454 <BSP_SD_GetCardState>
 80124e6:	4603      	mov	r3, r0
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d101      	bne.n	80124f0 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80124ec:	2300      	movs	r3, #0
 80124ee:	e009      	b.n	8012504 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80124f0:	f7f0 fc64 	bl	8002dbc <HAL_GetTick>
 80124f4:	4602      	mov	r2, r0
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	1ad3      	subs	r3, r2, r3
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	429a      	cmp	r2, r3
 80124fe:	d8f0      	bhi.n	80124e2 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012500:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012504:	4618      	mov	r0, r3
 8012506:	3710      	adds	r7, #16
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}

0801250c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b082      	sub	sp, #8
 8012510:	af00      	add	r7, sp, #0
 8012512:	4603      	mov	r3, r0
 8012514:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012516:	4b0b      	ldr	r3, [pc, #44]	; (8012544 <SD_CheckStatus+0x38>)
 8012518:	2201      	movs	r2, #1
 801251a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801251c:	f7ff ff9a 	bl	8012454 <BSP_SD_GetCardState>
 8012520:	4603      	mov	r3, r0
 8012522:	2b00      	cmp	r3, #0
 8012524:	d107      	bne.n	8012536 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012526:	4b07      	ldr	r3, [pc, #28]	; (8012544 <SD_CheckStatus+0x38>)
 8012528:	781b      	ldrb	r3, [r3, #0]
 801252a:	b2db      	uxtb	r3, r3
 801252c:	f023 0301 	bic.w	r3, r3, #1
 8012530:	b2da      	uxtb	r2, r3
 8012532:	4b04      	ldr	r3, [pc, #16]	; (8012544 <SD_CheckStatus+0x38>)
 8012534:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012536:	4b03      	ldr	r3, [pc, #12]	; (8012544 <SD_CheckStatus+0x38>)
 8012538:	781b      	ldrb	r3, [r3, #0]
 801253a:	b2db      	uxtb	r3, r3
}
 801253c:	4618      	mov	r0, r3
 801253e:	3708      	adds	r7, #8
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}
 8012544:	2400000d 	.word	0x2400000d

08012548 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b082      	sub	sp, #8
 801254c:	af00      	add	r7, sp, #0
 801254e:	4603      	mov	r3, r0
 8012550:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8012552:	f7ff ff25 	bl	80123a0 <BSP_SD_Init>
 8012556:	4603      	mov	r3, r0
 8012558:	2b00      	cmp	r3, #0
 801255a:	d107      	bne.n	801256c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801255c:	79fb      	ldrb	r3, [r7, #7]
 801255e:	4618      	mov	r0, r3
 8012560:	f7ff ffd4 	bl	801250c <SD_CheckStatus>
 8012564:	4603      	mov	r3, r0
 8012566:	461a      	mov	r2, r3
 8012568:	4b04      	ldr	r3, [pc, #16]	; (801257c <SD_initialize+0x34>)
 801256a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801256c:	4b03      	ldr	r3, [pc, #12]	; (801257c <SD_initialize+0x34>)
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	b2db      	uxtb	r3, r3
}
 8012572:	4618      	mov	r0, r3
 8012574:	3708      	adds	r7, #8
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}
 801257a:	bf00      	nop
 801257c:	2400000d 	.word	0x2400000d

08012580 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b082      	sub	sp, #8
 8012584:	af00      	add	r7, sp, #0
 8012586:	4603      	mov	r3, r0
 8012588:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801258a:	79fb      	ldrb	r3, [r7, #7]
 801258c:	4618      	mov	r0, r3
 801258e:	f7ff ffbd 	bl	801250c <SD_CheckStatus>
 8012592:	4603      	mov	r3, r0
}
 8012594:	4618      	mov	r0, r3
 8012596:	3708      	adds	r7, #8
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}

0801259c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b086      	sub	sp, #24
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	60b9      	str	r1, [r7, #8]
 80125a4:	607a      	str	r2, [r7, #4]
 80125a6:	603b      	str	r3, [r7, #0]
 80125a8:	4603      	mov	r3, r0
 80125aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80125ac:	2301      	movs	r3, #1
 80125ae:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80125b0:	f247 5030 	movw	r0, #30000	; 0x7530
 80125b4:	f7ff ff8d 	bl	80124d2 <SD_CheckStatusWithTimeout>
 80125b8:	4603      	mov	r3, r0
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	da01      	bge.n	80125c2 <SD_read+0x26>
  {
    return res;
 80125be:	7dfb      	ldrb	r3, [r7, #23]
 80125c0:	e03b      	b.n	801263a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80125c2:	683a      	ldr	r2, [r7, #0]
 80125c4:	6879      	ldr	r1, [r7, #4]
 80125c6:	68b8      	ldr	r0, [r7, #8]
 80125c8:	f7ff ff10 	bl	80123ec <BSP_SD_ReadBlocks_DMA>
 80125cc:	4603      	mov	r3, r0
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d132      	bne.n	8012638 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80125d2:	4b1c      	ldr	r3, [pc, #112]	; (8012644 <SD_read+0xa8>)
 80125d4:	2200      	movs	r2, #0
 80125d6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80125d8:	f7f0 fbf0 	bl	8002dbc <HAL_GetTick>
 80125dc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80125de:	bf00      	nop
 80125e0:	4b18      	ldr	r3, [pc, #96]	; (8012644 <SD_read+0xa8>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d108      	bne.n	80125fa <SD_read+0x5e>
 80125e8:	f7f0 fbe8 	bl	8002dbc <HAL_GetTick>
 80125ec:	4602      	mov	r2, r0
 80125ee:	693b      	ldr	r3, [r7, #16]
 80125f0:	1ad3      	subs	r3, r2, r3
 80125f2:	f247 522f 	movw	r2, #29999	; 0x752f
 80125f6:	4293      	cmp	r3, r2
 80125f8:	d9f2      	bls.n	80125e0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80125fa:	4b12      	ldr	r3, [pc, #72]	; (8012644 <SD_read+0xa8>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d102      	bne.n	8012608 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8012602:	2301      	movs	r3, #1
 8012604:	75fb      	strb	r3, [r7, #23]
 8012606:	e017      	b.n	8012638 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8012608:	4b0e      	ldr	r3, [pc, #56]	; (8012644 <SD_read+0xa8>)
 801260a:	2200      	movs	r2, #0
 801260c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801260e:	f7f0 fbd5 	bl	8002dbc <HAL_GetTick>
 8012612:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012614:	e007      	b.n	8012626 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012616:	f7ff ff1d 	bl	8012454 <BSP_SD_GetCardState>
 801261a:	4603      	mov	r3, r0
 801261c:	2b00      	cmp	r3, #0
 801261e:	d102      	bne.n	8012626 <SD_read+0x8a>
          {
            res = RES_OK;
 8012620:	2300      	movs	r3, #0
 8012622:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8012624:	e008      	b.n	8012638 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012626:	f7f0 fbc9 	bl	8002dbc <HAL_GetTick>
 801262a:	4602      	mov	r2, r0
 801262c:	693b      	ldr	r3, [r7, #16]
 801262e:	1ad3      	subs	r3, r2, r3
 8012630:	f247 522f 	movw	r2, #29999	; 0x752f
 8012634:	4293      	cmp	r3, r2
 8012636:	d9ee      	bls.n	8012616 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8012638:	7dfb      	ldrb	r3, [r7, #23]
}
 801263a:	4618      	mov	r0, r3
 801263c:	3718      	adds	r7, #24
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}
 8012642:	bf00      	nop
 8012644:	24000d24 	.word	0x24000d24

08012648 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b086      	sub	sp, #24
 801264c:	af00      	add	r7, sp, #0
 801264e:	60b9      	str	r1, [r7, #8]
 8012650:	607a      	str	r2, [r7, #4]
 8012652:	603b      	str	r3, [r7, #0]
 8012654:	4603      	mov	r3, r0
 8012656:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012658:	2301      	movs	r3, #1
 801265a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801265c:	4b24      	ldr	r3, [pc, #144]	; (80126f0 <SD_write+0xa8>)
 801265e:	2200      	movs	r2, #0
 8012660:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012662:	f247 5030 	movw	r0, #30000	; 0x7530
 8012666:	f7ff ff34 	bl	80124d2 <SD_CheckStatusWithTimeout>
 801266a:	4603      	mov	r3, r0
 801266c:	2b00      	cmp	r3, #0
 801266e:	da01      	bge.n	8012674 <SD_write+0x2c>
  {
    return res;
 8012670:	7dfb      	ldrb	r3, [r7, #23]
 8012672:	e038      	b.n	80126e6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012674:	683a      	ldr	r2, [r7, #0]
 8012676:	6879      	ldr	r1, [r7, #4]
 8012678:	68b8      	ldr	r0, [r7, #8]
 801267a:	f7ff fed1 	bl	8012420 <BSP_SD_WriteBlocks_DMA>
 801267e:	4603      	mov	r3, r0
 8012680:	2b00      	cmp	r3, #0
 8012682:	d12f      	bne.n	80126e4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8012684:	f7f0 fb9a 	bl	8002dbc <HAL_GetTick>
 8012688:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801268a:	bf00      	nop
 801268c:	4b18      	ldr	r3, [pc, #96]	; (80126f0 <SD_write+0xa8>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d108      	bne.n	80126a6 <SD_write+0x5e>
 8012694:	f7f0 fb92 	bl	8002dbc <HAL_GetTick>
 8012698:	4602      	mov	r2, r0
 801269a:	693b      	ldr	r3, [r7, #16]
 801269c:	1ad3      	subs	r3, r2, r3
 801269e:	f247 522f 	movw	r2, #29999	; 0x752f
 80126a2:	4293      	cmp	r3, r2
 80126a4:	d9f2      	bls.n	801268c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80126a6:	4b12      	ldr	r3, [pc, #72]	; (80126f0 <SD_write+0xa8>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d102      	bne.n	80126b4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80126ae:	2301      	movs	r3, #1
 80126b0:	75fb      	strb	r3, [r7, #23]
 80126b2:	e017      	b.n	80126e4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80126b4:	4b0e      	ldr	r3, [pc, #56]	; (80126f0 <SD_write+0xa8>)
 80126b6:	2200      	movs	r2, #0
 80126b8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80126ba:	f7f0 fb7f 	bl	8002dbc <HAL_GetTick>
 80126be:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80126c0:	e007      	b.n	80126d2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80126c2:	f7ff fec7 	bl	8012454 <BSP_SD_GetCardState>
 80126c6:	4603      	mov	r3, r0
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d102      	bne.n	80126d2 <SD_write+0x8a>
          {
            res = RES_OK;
 80126cc:	2300      	movs	r3, #0
 80126ce:	75fb      	strb	r3, [r7, #23]
            break;
 80126d0:	e008      	b.n	80126e4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80126d2:	f7f0 fb73 	bl	8002dbc <HAL_GetTick>
 80126d6:	4602      	mov	r2, r0
 80126d8:	693b      	ldr	r3, [r7, #16]
 80126da:	1ad3      	subs	r3, r2, r3
 80126dc:	f247 522f 	movw	r2, #29999	; 0x752f
 80126e0:	4293      	cmp	r3, r2
 80126e2:	d9ee      	bls.n	80126c2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80126e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3718      	adds	r7, #24
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}
 80126ee:	bf00      	nop
 80126f0:	24000d20 	.word	0x24000d20

080126f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b08c      	sub	sp, #48	; 0x30
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	4603      	mov	r3, r0
 80126fc:	603a      	str	r2, [r7, #0]
 80126fe:	71fb      	strb	r3, [r7, #7]
 8012700:	460b      	mov	r3, r1
 8012702:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012704:	2301      	movs	r3, #1
 8012706:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801270a:	4b25      	ldr	r3, [pc, #148]	; (80127a0 <SD_ioctl+0xac>)
 801270c:	781b      	ldrb	r3, [r3, #0]
 801270e:	b2db      	uxtb	r3, r3
 8012710:	f003 0301 	and.w	r3, r3, #1
 8012714:	2b00      	cmp	r3, #0
 8012716:	d001      	beq.n	801271c <SD_ioctl+0x28>
 8012718:	2303      	movs	r3, #3
 801271a:	e03c      	b.n	8012796 <SD_ioctl+0xa2>

  switch (cmd)
 801271c:	79bb      	ldrb	r3, [r7, #6]
 801271e:	2b03      	cmp	r3, #3
 8012720:	d834      	bhi.n	801278c <SD_ioctl+0x98>
 8012722:	a201      	add	r2, pc, #4	; (adr r2, 8012728 <SD_ioctl+0x34>)
 8012724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012728:	08012739 	.word	0x08012739
 801272c:	08012741 	.word	0x08012741
 8012730:	08012759 	.word	0x08012759
 8012734:	08012773 	.word	0x08012773
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012738:	2300      	movs	r3, #0
 801273a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801273e:	e028      	b.n	8012792 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012740:	f107 0308 	add.w	r3, r7, #8
 8012744:	4618      	mov	r0, r3
 8012746:	f7ff fe95 	bl	8012474 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801274a:	6a3a      	ldr	r2, [r7, #32]
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012750:	2300      	movs	r3, #0
 8012752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012756:	e01c      	b.n	8012792 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012758:	f107 0308 	add.w	r3, r7, #8
 801275c:	4618      	mov	r0, r3
 801275e:	f7ff fe89 	bl	8012474 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012764:	b29a      	uxth	r2, r3
 8012766:	683b      	ldr	r3, [r7, #0]
 8012768:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801276a:	2300      	movs	r3, #0
 801276c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012770:	e00f      	b.n	8012792 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012772:	f107 0308 	add.w	r3, r7, #8
 8012776:	4618      	mov	r0, r3
 8012778:	f7ff fe7c 	bl	8012474 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277e:	0a5a      	lsrs	r2, r3, #9
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012784:	2300      	movs	r3, #0
 8012786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801278a:	e002      	b.n	8012792 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801278c:	2304      	movs	r3, #4
 801278e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012796:	4618      	mov	r0, r3
 8012798:	3730      	adds	r7, #48	; 0x30
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}
 801279e:	bf00      	nop
 80127a0:	2400000d 	.word	0x2400000d

080127a4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80127a4:	b480      	push	{r7}
 80127a6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80127a8:	4b03      	ldr	r3, [pc, #12]	; (80127b8 <BSP_SD_WriteCpltCallback+0x14>)
 80127aa:	2201      	movs	r2, #1
 80127ac:	601a      	str	r2, [r3, #0]
}
 80127ae:	bf00      	nop
 80127b0:	46bd      	mov	sp, r7
 80127b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b6:	4770      	bx	lr
 80127b8:	24000d20 	.word	0x24000d20

080127bc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80127bc:	b480      	push	{r7}
 80127be:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80127c0:	4b03      	ldr	r3, [pc, #12]	; (80127d0 <BSP_SD_ReadCpltCallback+0x14>)
 80127c2:	2201      	movs	r2, #1
 80127c4:	601a      	str	r2, [r3, #0]
}
 80127c6:	bf00      	nop
 80127c8:	46bd      	mov	sp, r7
 80127ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ce:	4770      	bx	lr
 80127d0:	24000d24 	.word	0x24000d24

080127d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b084      	sub	sp, #16
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
 80127dc:	460b      	mov	r3, r1
 80127de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80127e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80127e4:	f005 fc74 	bl	80180d0 <USBD_static_malloc>
 80127e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d109      	bne.n	8012804 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	32b0      	adds	r2, #176	; 0xb0
 80127fa:	2100      	movs	r1, #0
 80127fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012800:	2302      	movs	r3, #2
 8012802:	e0d4      	b.n	80129ae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012804:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8012808:	2100      	movs	r1, #0
 801280a:	68f8      	ldr	r0, [r7, #12]
 801280c:	f005 fcdc 	bl	80181c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	32b0      	adds	r2, #176	; 0xb0
 801281a:	68f9      	ldr	r1, [r7, #12]
 801281c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	32b0      	adds	r2, #176	; 0xb0
 801282a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	7c1b      	ldrb	r3, [r3, #16]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d138      	bne.n	80128ae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801283c:	4b5e      	ldr	r3, [pc, #376]	; (80129b8 <USBD_CDC_Init+0x1e4>)
 801283e:	7819      	ldrb	r1, [r3, #0]
 8012840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012844:	2202      	movs	r2, #2
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f005 fb1f 	bl	8017e8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801284c:	4b5a      	ldr	r3, [pc, #360]	; (80129b8 <USBD_CDC_Init+0x1e4>)
 801284e:	781b      	ldrb	r3, [r3, #0]
 8012850:	f003 020f 	and.w	r2, r3, #15
 8012854:	6879      	ldr	r1, [r7, #4]
 8012856:	4613      	mov	r3, r2
 8012858:	009b      	lsls	r3, r3, #2
 801285a:	4413      	add	r3, r2
 801285c:	009b      	lsls	r3, r3, #2
 801285e:	440b      	add	r3, r1
 8012860:	3324      	adds	r3, #36	; 0x24
 8012862:	2201      	movs	r2, #1
 8012864:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012866:	4b55      	ldr	r3, [pc, #340]	; (80129bc <USBD_CDC_Init+0x1e8>)
 8012868:	7819      	ldrb	r1, [r3, #0]
 801286a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801286e:	2202      	movs	r2, #2
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f005 fb0a 	bl	8017e8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012876:	4b51      	ldr	r3, [pc, #324]	; (80129bc <USBD_CDC_Init+0x1e8>)
 8012878:	781b      	ldrb	r3, [r3, #0]
 801287a:	f003 020f 	and.w	r2, r3, #15
 801287e:	6879      	ldr	r1, [r7, #4]
 8012880:	4613      	mov	r3, r2
 8012882:	009b      	lsls	r3, r3, #2
 8012884:	4413      	add	r3, r2
 8012886:	009b      	lsls	r3, r3, #2
 8012888:	440b      	add	r3, r1
 801288a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801288e:	2201      	movs	r2, #1
 8012890:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012892:	4b4b      	ldr	r3, [pc, #300]	; (80129c0 <USBD_CDC_Init+0x1ec>)
 8012894:	781b      	ldrb	r3, [r3, #0]
 8012896:	f003 020f 	and.w	r2, r3, #15
 801289a:	6879      	ldr	r1, [r7, #4]
 801289c:	4613      	mov	r3, r2
 801289e:	009b      	lsls	r3, r3, #2
 80128a0:	4413      	add	r3, r2
 80128a2:	009b      	lsls	r3, r3, #2
 80128a4:	440b      	add	r3, r1
 80128a6:	3326      	adds	r3, #38	; 0x26
 80128a8:	2210      	movs	r2, #16
 80128aa:	801a      	strh	r2, [r3, #0]
 80128ac:	e035      	b.n	801291a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80128ae:	4b42      	ldr	r3, [pc, #264]	; (80129b8 <USBD_CDC_Init+0x1e4>)
 80128b0:	7819      	ldrb	r1, [r3, #0]
 80128b2:	2340      	movs	r3, #64	; 0x40
 80128b4:	2202      	movs	r2, #2
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f005 fae7 	bl	8017e8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80128bc:	4b3e      	ldr	r3, [pc, #248]	; (80129b8 <USBD_CDC_Init+0x1e4>)
 80128be:	781b      	ldrb	r3, [r3, #0]
 80128c0:	f003 020f 	and.w	r2, r3, #15
 80128c4:	6879      	ldr	r1, [r7, #4]
 80128c6:	4613      	mov	r3, r2
 80128c8:	009b      	lsls	r3, r3, #2
 80128ca:	4413      	add	r3, r2
 80128cc:	009b      	lsls	r3, r3, #2
 80128ce:	440b      	add	r3, r1
 80128d0:	3324      	adds	r3, #36	; 0x24
 80128d2:	2201      	movs	r2, #1
 80128d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80128d6:	4b39      	ldr	r3, [pc, #228]	; (80129bc <USBD_CDC_Init+0x1e8>)
 80128d8:	7819      	ldrb	r1, [r3, #0]
 80128da:	2340      	movs	r3, #64	; 0x40
 80128dc:	2202      	movs	r2, #2
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f005 fad3 	bl	8017e8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80128e4:	4b35      	ldr	r3, [pc, #212]	; (80129bc <USBD_CDC_Init+0x1e8>)
 80128e6:	781b      	ldrb	r3, [r3, #0]
 80128e8:	f003 020f 	and.w	r2, r3, #15
 80128ec:	6879      	ldr	r1, [r7, #4]
 80128ee:	4613      	mov	r3, r2
 80128f0:	009b      	lsls	r3, r3, #2
 80128f2:	4413      	add	r3, r2
 80128f4:	009b      	lsls	r3, r3, #2
 80128f6:	440b      	add	r3, r1
 80128f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80128fc:	2201      	movs	r2, #1
 80128fe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012900:	4b2f      	ldr	r3, [pc, #188]	; (80129c0 <USBD_CDC_Init+0x1ec>)
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	f003 020f 	and.w	r2, r3, #15
 8012908:	6879      	ldr	r1, [r7, #4]
 801290a:	4613      	mov	r3, r2
 801290c:	009b      	lsls	r3, r3, #2
 801290e:	4413      	add	r3, r2
 8012910:	009b      	lsls	r3, r3, #2
 8012912:	440b      	add	r3, r1
 8012914:	3326      	adds	r3, #38	; 0x26
 8012916:	2210      	movs	r2, #16
 8012918:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801291a:	4b29      	ldr	r3, [pc, #164]	; (80129c0 <USBD_CDC_Init+0x1ec>)
 801291c:	7819      	ldrb	r1, [r3, #0]
 801291e:	2308      	movs	r3, #8
 8012920:	2203      	movs	r2, #3
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	f005 fab1 	bl	8017e8a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012928:	4b25      	ldr	r3, [pc, #148]	; (80129c0 <USBD_CDC_Init+0x1ec>)
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	f003 020f 	and.w	r2, r3, #15
 8012930:	6879      	ldr	r1, [r7, #4]
 8012932:	4613      	mov	r3, r2
 8012934:	009b      	lsls	r3, r3, #2
 8012936:	4413      	add	r3, r2
 8012938:	009b      	lsls	r3, r3, #2
 801293a:	440b      	add	r3, r1
 801293c:	3324      	adds	r3, #36	; 0x24
 801293e:	2201      	movs	r2, #1
 8012940:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	2200      	movs	r2, #0
 8012946:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012950:	687a      	ldr	r2, [r7, #4]
 8012952:	33b0      	adds	r3, #176	; 0xb0
 8012954:	009b      	lsls	r3, r3, #2
 8012956:	4413      	add	r3, r2
 8012958:	685b      	ldr	r3, [r3, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	2200      	movs	r2, #0
 8012962:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2200      	movs	r2, #0
 801296a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8012974:	2b00      	cmp	r3, #0
 8012976:	d101      	bne.n	801297c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012978:	2302      	movs	r3, #2
 801297a:	e018      	b.n	80129ae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	7c1b      	ldrb	r3, [r3, #16]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d10a      	bne.n	801299a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012984:	4b0d      	ldr	r3, [pc, #52]	; (80129bc <USBD_CDC_Init+0x1e8>)
 8012986:	7819      	ldrb	r1, [r3, #0]
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801298e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f005 fb68 	bl	8018068 <USBD_LL_PrepareReceive>
 8012998:	e008      	b.n	80129ac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801299a:	4b08      	ldr	r3, [pc, #32]	; (80129bc <USBD_CDC_Init+0x1e8>)
 801299c:	7819      	ldrb	r1, [r3, #0]
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80129a4:	2340      	movs	r3, #64	; 0x40
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f005 fb5e 	bl	8018068 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80129ac:	2300      	movs	r3, #0
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3710      	adds	r7, #16
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}
 80129b6:	bf00      	nop
 80129b8:	24000097 	.word	0x24000097
 80129bc:	24000098 	.word	0x24000098
 80129c0:	24000099 	.word	0x24000099

080129c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b082      	sub	sp, #8
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	460b      	mov	r3, r1
 80129ce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80129d0:	4b3a      	ldr	r3, [pc, #232]	; (8012abc <USBD_CDC_DeInit+0xf8>)
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	4619      	mov	r1, r3
 80129d6:	6878      	ldr	r0, [r7, #4]
 80129d8:	f005 fa7d 	bl	8017ed6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80129dc:	4b37      	ldr	r3, [pc, #220]	; (8012abc <USBD_CDC_DeInit+0xf8>)
 80129de:	781b      	ldrb	r3, [r3, #0]
 80129e0:	f003 020f 	and.w	r2, r3, #15
 80129e4:	6879      	ldr	r1, [r7, #4]
 80129e6:	4613      	mov	r3, r2
 80129e8:	009b      	lsls	r3, r3, #2
 80129ea:	4413      	add	r3, r2
 80129ec:	009b      	lsls	r3, r3, #2
 80129ee:	440b      	add	r3, r1
 80129f0:	3324      	adds	r3, #36	; 0x24
 80129f2:	2200      	movs	r2, #0
 80129f4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80129f6:	4b32      	ldr	r3, [pc, #200]	; (8012ac0 <USBD_CDC_DeInit+0xfc>)
 80129f8:	781b      	ldrb	r3, [r3, #0]
 80129fa:	4619      	mov	r1, r3
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f005 fa6a 	bl	8017ed6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012a02:	4b2f      	ldr	r3, [pc, #188]	; (8012ac0 <USBD_CDC_DeInit+0xfc>)
 8012a04:	781b      	ldrb	r3, [r3, #0]
 8012a06:	f003 020f 	and.w	r2, r3, #15
 8012a0a:	6879      	ldr	r1, [r7, #4]
 8012a0c:	4613      	mov	r3, r2
 8012a0e:	009b      	lsls	r3, r3, #2
 8012a10:	4413      	add	r3, r2
 8012a12:	009b      	lsls	r3, r3, #2
 8012a14:	440b      	add	r3, r1
 8012a16:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012a1e:	4b29      	ldr	r3, [pc, #164]	; (8012ac4 <USBD_CDC_DeInit+0x100>)
 8012a20:	781b      	ldrb	r3, [r3, #0]
 8012a22:	4619      	mov	r1, r3
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f005 fa56 	bl	8017ed6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012a2a:	4b26      	ldr	r3, [pc, #152]	; (8012ac4 <USBD_CDC_DeInit+0x100>)
 8012a2c:	781b      	ldrb	r3, [r3, #0]
 8012a2e:	f003 020f 	and.w	r2, r3, #15
 8012a32:	6879      	ldr	r1, [r7, #4]
 8012a34:	4613      	mov	r3, r2
 8012a36:	009b      	lsls	r3, r3, #2
 8012a38:	4413      	add	r3, r2
 8012a3a:	009b      	lsls	r3, r3, #2
 8012a3c:	440b      	add	r3, r1
 8012a3e:	3324      	adds	r3, #36	; 0x24
 8012a40:	2200      	movs	r2, #0
 8012a42:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012a44:	4b1f      	ldr	r3, [pc, #124]	; (8012ac4 <USBD_CDC_DeInit+0x100>)
 8012a46:	781b      	ldrb	r3, [r3, #0]
 8012a48:	f003 020f 	and.w	r2, r3, #15
 8012a4c:	6879      	ldr	r1, [r7, #4]
 8012a4e:	4613      	mov	r3, r2
 8012a50:	009b      	lsls	r3, r3, #2
 8012a52:	4413      	add	r3, r2
 8012a54:	009b      	lsls	r3, r3, #2
 8012a56:	440b      	add	r3, r1
 8012a58:	3326      	adds	r3, #38	; 0x26
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	32b0      	adds	r2, #176	; 0xb0
 8012a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d01f      	beq.n	8012ab0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012a76:	687a      	ldr	r2, [r7, #4]
 8012a78:	33b0      	adds	r3, #176	; 0xb0
 8012a7a:	009b      	lsls	r3, r3, #2
 8012a7c:	4413      	add	r3, r2
 8012a7e:	685b      	ldr	r3, [r3, #4]
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	32b0      	adds	r2, #176	; 0xb0
 8012a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a92:	4618      	mov	r0, r3
 8012a94:	f005 fb2a 	bl	80180ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	32b0      	adds	r2, #176	; 0xb0
 8012aa2:	2100      	movs	r1, #0
 8012aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2200      	movs	r2, #0
 8012aac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012ab0:	2300      	movs	r3, #0
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3708      	adds	r7, #8
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}
 8012aba:	bf00      	nop
 8012abc:	24000097 	.word	0x24000097
 8012ac0:	24000098 	.word	0x24000098
 8012ac4:	24000099 	.word	0x24000099

08012ac8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b086      	sub	sp, #24
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	32b0      	adds	r2, #176	; 0xb0
 8012adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ae0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012aea:	2300      	movs	r3, #0
 8012aec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012aee:	693b      	ldr	r3, [r7, #16]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d101      	bne.n	8012af8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012af4:	2303      	movs	r3, #3
 8012af6:	e0bf      	b.n	8012c78 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d050      	beq.n	8012ba6 <USBD_CDC_Setup+0xde>
 8012b04:	2b20      	cmp	r3, #32
 8012b06:	f040 80af 	bne.w	8012c68 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	88db      	ldrh	r3, [r3, #6]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d03a      	beq.n	8012b88 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	781b      	ldrb	r3, [r3, #0]
 8012b16:	b25b      	sxtb	r3, r3
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	da1b      	bge.n	8012b54 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012b22:	687a      	ldr	r2, [r7, #4]
 8012b24:	33b0      	adds	r3, #176	; 0xb0
 8012b26:	009b      	lsls	r3, r3, #2
 8012b28:	4413      	add	r3, r2
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	689b      	ldr	r3, [r3, #8]
 8012b2e:	683a      	ldr	r2, [r7, #0]
 8012b30:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012b32:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012b34:	683a      	ldr	r2, [r7, #0]
 8012b36:	88d2      	ldrh	r2, [r2, #6]
 8012b38:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012b3a:	683b      	ldr	r3, [r7, #0]
 8012b3c:	88db      	ldrh	r3, [r3, #6]
 8012b3e:	2b07      	cmp	r3, #7
 8012b40:	bf28      	it	cs
 8012b42:	2307      	movcs	r3, #7
 8012b44:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012b46:	693b      	ldr	r3, [r7, #16]
 8012b48:	89fa      	ldrh	r2, [r7, #14]
 8012b4a:	4619      	mov	r1, r3
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f001 fd89 	bl	8014664 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012b52:	e090      	b.n	8012c76 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	785a      	ldrb	r2, [r3, #1]
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	88db      	ldrh	r3, [r3, #6]
 8012b62:	2b3f      	cmp	r3, #63	; 0x3f
 8012b64:	d803      	bhi.n	8012b6e <USBD_CDC_Setup+0xa6>
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	88db      	ldrh	r3, [r3, #6]
 8012b6a:	b2da      	uxtb	r2, r3
 8012b6c:	e000      	b.n	8012b70 <USBD_CDC_Setup+0xa8>
 8012b6e:	2240      	movs	r2, #64	; 0x40
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012b76:	6939      	ldr	r1, [r7, #16]
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8012b7e:	461a      	mov	r2, r3
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f001 fd9b 	bl	80146bc <USBD_CtlPrepareRx>
      break;
 8012b86:	e076      	b.n	8012c76 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012b8e:	687a      	ldr	r2, [r7, #4]
 8012b90:	33b0      	adds	r3, #176	; 0xb0
 8012b92:	009b      	lsls	r3, r3, #2
 8012b94:	4413      	add	r3, r2
 8012b96:	685b      	ldr	r3, [r3, #4]
 8012b98:	689b      	ldr	r3, [r3, #8]
 8012b9a:	683a      	ldr	r2, [r7, #0]
 8012b9c:	7850      	ldrb	r0, [r2, #1]
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	6839      	ldr	r1, [r7, #0]
 8012ba2:	4798      	blx	r3
      break;
 8012ba4:	e067      	b.n	8012c76 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	785b      	ldrb	r3, [r3, #1]
 8012baa:	2b0b      	cmp	r3, #11
 8012bac:	d851      	bhi.n	8012c52 <USBD_CDC_Setup+0x18a>
 8012bae:	a201      	add	r2, pc, #4	; (adr r2, 8012bb4 <USBD_CDC_Setup+0xec>)
 8012bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bb4:	08012be5 	.word	0x08012be5
 8012bb8:	08012c61 	.word	0x08012c61
 8012bbc:	08012c53 	.word	0x08012c53
 8012bc0:	08012c53 	.word	0x08012c53
 8012bc4:	08012c53 	.word	0x08012c53
 8012bc8:	08012c53 	.word	0x08012c53
 8012bcc:	08012c53 	.word	0x08012c53
 8012bd0:	08012c53 	.word	0x08012c53
 8012bd4:	08012c53 	.word	0x08012c53
 8012bd8:	08012c53 	.word	0x08012c53
 8012bdc:	08012c0f 	.word	0x08012c0f
 8012be0:	08012c39 	.word	0x08012c39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012bea:	b2db      	uxtb	r3, r3
 8012bec:	2b03      	cmp	r3, #3
 8012bee:	d107      	bne.n	8012c00 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012bf0:	f107 030a 	add.w	r3, r7, #10
 8012bf4:	2202      	movs	r2, #2
 8012bf6:	4619      	mov	r1, r3
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f001 fd33 	bl	8014664 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012bfe:	e032      	b.n	8012c66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012c00:	6839      	ldr	r1, [r7, #0]
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f001 fcbd 	bl	8014582 <USBD_CtlError>
            ret = USBD_FAIL;
 8012c08:	2303      	movs	r3, #3
 8012c0a:	75fb      	strb	r3, [r7, #23]
          break;
 8012c0c:	e02b      	b.n	8012c66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c14:	b2db      	uxtb	r3, r3
 8012c16:	2b03      	cmp	r3, #3
 8012c18:	d107      	bne.n	8012c2a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012c1a:	f107 030d 	add.w	r3, r7, #13
 8012c1e:	2201      	movs	r2, #1
 8012c20:	4619      	mov	r1, r3
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f001 fd1e 	bl	8014664 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012c28:	e01d      	b.n	8012c66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012c2a:	6839      	ldr	r1, [r7, #0]
 8012c2c:	6878      	ldr	r0, [r7, #4]
 8012c2e:	f001 fca8 	bl	8014582 <USBD_CtlError>
            ret = USBD_FAIL;
 8012c32:	2303      	movs	r3, #3
 8012c34:	75fb      	strb	r3, [r7, #23]
          break;
 8012c36:	e016      	b.n	8012c66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c3e:	b2db      	uxtb	r3, r3
 8012c40:	2b03      	cmp	r3, #3
 8012c42:	d00f      	beq.n	8012c64 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012c44:	6839      	ldr	r1, [r7, #0]
 8012c46:	6878      	ldr	r0, [r7, #4]
 8012c48:	f001 fc9b 	bl	8014582 <USBD_CtlError>
            ret = USBD_FAIL;
 8012c4c:	2303      	movs	r3, #3
 8012c4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012c50:	e008      	b.n	8012c64 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012c52:	6839      	ldr	r1, [r7, #0]
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f001 fc94 	bl	8014582 <USBD_CtlError>
          ret = USBD_FAIL;
 8012c5a:	2303      	movs	r3, #3
 8012c5c:	75fb      	strb	r3, [r7, #23]
          break;
 8012c5e:	e002      	b.n	8012c66 <USBD_CDC_Setup+0x19e>
          break;
 8012c60:	bf00      	nop
 8012c62:	e008      	b.n	8012c76 <USBD_CDC_Setup+0x1ae>
          break;
 8012c64:	bf00      	nop
      }
      break;
 8012c66:	e006      	b.n	8012c76 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012c68:	6839      	ldr	r1, [r7, #0]
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f001 fc89 	bl	8014582 <USBD_CtlError>
      ret = USBD_FAIL;
 8012c70:	2303      	movs	r3, #3
 8012c72:	75fb      	strb	r3, [r7, #23]
      break;
 8012c74:	bf00      	nop
  }

  return (uint8_t)ret;
 8012c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3718      	adds	r7, #24
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}

08012c80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b084      	sub	sp, #16
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	460b      	mov	r3, r1
 8012c8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012c92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	32b0      	adds	r2, #176	; 0xb0
 8012c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d101      	bne.n	8012caa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012ca6:	2303      	movs	r3, #3
 8012ca8:	e065      	b.n	8012d76 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	32b0      	adds	r2, #176	; 0xb0
 8012cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cb8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012cba:	78fb      	ldrb	r3, [r7, #3]
 8012cbc:	f003 020f 	and.w	r2, r3, #15
 8012cc0:	6879      	ldr	r1, [r7, #4]
 8012cc2:	4613      	mov	r3, r2
 8012cc4:	009b      	lsls	r3, r3, #2
 8012cc6:	4413      	add	r3, r2
 8012cc8:	009b      	lsls	r3, r3, #2
 8012cca:	440b      	add	r3, r1
 8012ccc:	3318      	adds	r3, #24
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d02f      	beq.n	8012d34 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8012cd4:	78fb      	ldrb	r3, [r7, #3]
 8012cd6:	f003 020f 	and.w	r2, r3, #15
 8012cda:	6879      	ldr	r1, [r7, #4]
 8012cdc:	4613      	mov	r3, r2
 8012cde:	009b      	lsls	r3, r3, #2
 8012ce0:	4413      	add	r3, r2
 8012ce2:	009b      	lsls	r3, r3, #2
 8012ce4:	440b      	add	r3, r1
 8012ce6:	3318      	adds	r3, #24
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	78fb      	ldrb	r3, [r7, #3]
 8012cec:	f003 010f 	and.w	r1, r3, #15
 8012cf0:	68f8      	ldr	r0, [r7, #12]
 8012cf2:	460b      	mov	r3, r1
 8012cf4:	00db      	lsls	r3, r3, #3
 8012cf6:	440b      	add	r3, r1
 8012cf8:	009b      	lsls	r3, r3, #2
 8012cfa:	4403      	add	r3, r0
 8012cfc:	3344      	adds	r3, #68	; 0x44
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	fbb2 f1f3 	udiv	r1, r2, r3
 8012d04:	fb01 f303 	mul.w	r3, r1, r3
 8012d08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d112      	bne.n	8012d34 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8012d0e:	78fb      	ldrb	r3, [r7, #3]
 8012d10:	f003 020f 	and.w	r2, r3, #15
 8012d14:	6879      	ldr	r1, [r7, #4]
 8012d16:	4613      	mov	r3, r2
 8012d18:	009b      	lsls	r3, r3, #2
 8012d1a:	4413      	add	r3, r2
 8012d1c:	009b      	lsls	r3, r3, #2
 8012d1e:	440b      	add	r3, r1
 8012d20:	3318      	adds	r3, #24
 8012d22:	2200      	movs	r2, #0
 8012d24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012d26:	78f9      	ldrb	r1, [r7, #3]
 8012d28:	2300      	movs	r3, #0
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f005 f97a 	bl	8018026 <USBD_LL_Transmit>
 8012d32:	e01f      	b.n	8012d74 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8012d34:	68bb      	ldr	r3, [r7, #8]
 8012d36:	2200      	movs	r2, #0
 8012d38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012d42:	687a      	ldr	r2, [r7, #4]
 8012d44:	33b0      	adds	r3, #176	; 0xb0
 8012d46:	009b      	lsls	r3, r3, #2
 8012d48:	4413      	add	r3, r2
 8012d4a:	685b      	ldr	r3, [r3, #4]
 8012d4c:	691b      	ldr	r3, [r3, #16]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d010      	beq.n	8012d74 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012d58:	687a      	ldr	r2, [r7, #4]
 8012d5a:	33b0      	adds	r3, #176	; 0xb0
 8012d5c:	009b      	lsls	r3, r3, #2
 8012d5e:	4413      	add	r3, r2
 8012d60:	685b      	ldr	r3, [r3, #4]
 8012d62:	691b      	ldr	r3, [r3, #16]
 8012d64:	68ba      	ldr	r2, [r7, #8]
 8012d66:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8012d6a:	68ba      	ldr	r2, [r7, #8]
 8012d6c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8012d70:	78fa      	ldrb	r2, [r7, #3]
 8012d72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012d74:	2300      	movs	r3, #0
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3710      	adds	r7, #16
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}

08012d7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012d7e:	b580      	push	{r7, lr}
 8012d80:	b084      	sub	sp, #16
 8012d82:	af00      	add	r7, sp, #0
 8012d84:	6078      	str	r0, [r7, #4]
 8012d86:	460b      	mov	r3, r1
 8012d88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	32b0      	adds	r2, #176	; 0xb0
 8012d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	32b0      	adds	r2, #176	; 0xb0
 8012da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d101      	bne.n	8012db0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012dac:	2303      	movs	r3, #3
 8012dae:	e01a      	b.n	8012de6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012db0:	78fb      	ldrb	r3, [r7, #3]
 8012db2:	4619      	mov	r1, r3
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f005 f978 	bl	80180aa <USBD_LL_GetRxDataSize>
 8012dba:	4602      	mov	r2, r0
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012dc8:	687a      	ldr	r2, [r7, #4]
 8012dca:	33b0      	adds	r3, #176	; 0xb0
 8012dcc:	009b      	lsls	r3, r3, #2
 8012dce:	4413      	add	r3, r2
 8012dd0:	685b      	ldr	r3, [r3, #4]
 8012dd2:	68db      	ldr	r3, [r3, #12]
 8012dd4:	68fa      	ldr	r2, [r7, #12]
 8012dd6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8012dda:	68fa      	ldr	r2, [r7, #12]
 8012ddc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8012de0:	4611      	mov	r1, r2
 8012de2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012de4:	2300      	movs	r3, #0
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3710      	adds	r7, #16
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}

08012dee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012dee:	b580      	push	{r7, lr}
 8012df0:	b084      	sub	sp, #16
 8012df2:	af00      	add	r7, sp, #0
 8012df4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	32b0      	adds	r2, #176	; 0xb0
 8012e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d101      	bne.n	8012e10 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012e0c:	2303      	movs	r3, #3
 8012e0e:	e025      	b.n	8012e5c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012e16:	687a      	ldr	r2, [r7, #4]
 8012e18:	33b0      	adds	r3, #176	; 0xb0
 8012e1a:	009b      	lsls	r3, r3, #2
 8012e1c:	4413      	add	r3, r2
 8012e1e:	685b      	ldr	r3, [r3, #4]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d01a      	beq.n	8012e5a <USBD_CDC_EP0_RxReady+0x6c>
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012e2a:	2bff      	cmp	r3, #255	; 0xff
 8012e2c:	d015      	beq.n	8012e5a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012e34:	687a      	ldr	r2, [r7, #4]
 8012e36:	33b0      	adds	r3, #176	; 0xb0
 8012e38:	009b      	lsls	r3, r3, #2
 8012e3a:	4413      	add	r3, r2
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	689b      	ldr	r3, [r3, #8]
 8012e40:	68fa      	ldr	r2, [r7, #12]
 8012e42:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8012e46:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8012e48:	68fa      	ldr	r2, [r7, #12]
 8012e4a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012e4e:	b292      	uxth	r2, r2
 8012e50:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	22ff      	movs	r2, #255	; 0xff
 8012e56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8012e5a:	2300      	movs	r3, #0
}
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	3710      	adds	r7, #16
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd80      	pop	{r7, pc}

08012e64 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b086      	sub	sp, #24
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012e6c:	2182      	movs	r1, #130	; 0x82
 8012e6e:	4818      	ldr	r0, [pc, #96]	; (8012ed0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012e70:	f000 fd4f 	bl	8013912 <USBD_GetEpDesc>
 8012e74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012e76:	2101      	movs	r1, #1
 8012e78:	4815      	ldr	r0, [pc, #84]	; (8012ed0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012e7a:	f000 fd4a 	bl	8013912 <USBD_GetEpDesc>
 8012e7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012e80:	2181      	movs	r1, #129	; 0x81
 8012e82:	4813      	ldr	r0, [pc, #76]	; (8012ed0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012e84:	f000 fd45 	bl	8013912 <USBD_GetEpDesc>
 8012e88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012e8a:	697b      	ldr	r3, [r7, #20]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d002      	beq.n	8012e96 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	2210      	movs	r2, #16
 8012e94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d006      	beq.n	8012eaa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012e9c:	693b      	ldr	r3, [r7, #16]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012ea4:	711a      	strb	r2, [r3, #4]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d006      	beq.n	8012ebe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012eb8:	711a      	strb	r2, [r3, #4]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	2243      	movs	r2, #67	; 0x43
 8012ec2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012ec4:	4b02      	ldr	r3, [pc, #8]	; (8012ed0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	3718      	adds	r7, #24
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
 8012ece:	bf00      	nop
 8012ed0:	24000054 	.word	0x24000054

08012ed4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b086      	sub	sp, #24
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012edc:	2182      	movs	r1, #130	; 0x82
 8012ede:	4818      	ldr	r0, [pc, #96]	; (8012f40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012ee0:	f000 fd17 	bl	8013912 <USBD_GetEpDesc>
 8012ee4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012ee6:	2101      	movs	r1, #1
 8012ee8:	4815      	ldr	r0, [pc, #84]	; (8012f40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012eea:	f000 fd12 	bl	8013912 <USBD_GetEpDesc>
 8012eee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012ef0:	2181      	movs	r1, #129	; 0x81
 8012ef2:	4813      	ldr	r0, [pc, #76]	; (8012f40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012ef4:	f000 fd0d 	bl	8013912 <USBD_GetEpDesc>
 8012ef8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d002      	beq.n	8012f06 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8012f00:	697b      	ldr	r3, [r7, #20]
 8012f02:	2210      	movs	r2, #16
 8012f04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012f06:	693b      	ldr	r3, [r7, #16]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d006      	beq.n	8012f1a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012f0c:	693b      	ldr	r3, [r7, #16]
 8012f0e:	2200      	movs	r2, #0
 8012f10:	711a      	strb	r2, [r3, #4]
 8012f12:	2200      	movs	r2, #0
 8012f14:	f042 0202 	orr.w	r2, r2, #2
 8012f18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d006      	beq.n	8012f2e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2200      	movs	r2, #0
 8012f24:	711a      	strb	r2, [r3, #4]
 8012f26:	2200      	movs	r2, #0
 8012f28:	f042 0202 	orr.w	r2, r2, #2
 8012f2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	2243      	movs	r2, #67	; 0x43
 8012f32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012f34:	4b02      	ldr	r3, [pc, #8]	; (8012f40 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3718      	adds	r7, #24
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	24000054 	.word	0x24000054

08012f44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b086      	sub	sp, #24
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012f4c:	2182      	movs	r1, #130	; 0x82
 8012f4e:	4818      	ldr	r0, [pc, #96]	; (8012fb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012f50:	f000 fcdf 	bl	8013912 <USBD_GetEpDesc>
 8012f54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012f56:	2101      	movs	r1, #1
 8012f58:	4815      	ldr	r0, [pc, #84]	; (8012fb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012f5a:	f000 fcda 	bl	8013912 <USBD_GetEpDesc>
 8012f5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012f60:	2181      	movs	r1, #129	; 0x81
 8012f62:	4813      	ldr	r0, [pc, #76]	; (8012fb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012f64:	f000 fcd5 	bl	8013912 <USBD_GetEpDesc>
 8012f68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d002      	beq.n	8012f76 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012f70:	697b      	ldr	r3, [r7, #20]
 8012f72:	2210      	movs	r2, #16
 8012f74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d006      	beq.n	8012f8a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012f7c:	693b      	ldr	r3, [r7, #16]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012f84:	711a      	strb	r2, [r3, #4]
 8012f86:	2200      	movs	r2, #0
 8012f88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d006      	beq.n	8012f9e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	2200      	movs	r2, #0
 8012f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012f98:	711a      	strb	r2, [r3, #4]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	2243      	movs	r2, #67	; 0x43
 8012fa2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012fa4:	4b02      	ldr	r3, [pc, #8]	; (8012fb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3718      	adds	r7, #24
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}
 8012fae:	bf00      	nop
 8012fb0:	24000054 	.word	0x24000054

08012fb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012fb4:	b480      	push	{r7}
 8012fb6:	b083      	sub	sp, #12
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	220a      	movs	r2, #10
 8012fc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012fc2:	4b03      	ldr	r3, [pc, #12]	; (8012fd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	370c      	adds	r7, #12
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fce:	4770      	bx	lr
 8012fd0:	24000010 	.word	0x24000010

08012fd4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012fd4:	b480      	push	{r7}
 8012fd6:	b083      	sub	sp, #12
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
 8012fdc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d101      	bne.n	8012fe8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012fe4:	2303      	movs	r3, #3
 8012fe6:	e009      	b.n	8012ffc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012fee:	687a      	ldr	r2, [r7, #4]
 8012ff0:	33b0      	adds	r3, #176	; 0xb0
 8012ff2:	009b      	lsls	r3, r3, #2
 8012ff4:	4413      	add	r3, r2
 8012ff6:	683a      	ldr	r2, [r7, #0]
 8012ff8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8012ffa:	2300      	movs	r3, #0
}
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	370c      	adds	r7, #12
 8013000:	46bd      	mov	sp, r7
 8013002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013006:	4770      	bx	lr

08013008 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013008:	b480      	push	{r7}
 801300a:	b087      	sub	sp, #28
 801300c:	af00      	add	r7, sp, #0
 801300e:	60f8      	str	r0, [r7, #12]
 8013010:	60b9      	str	r1, [r7, #8]
 8013012:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	32b0      	adds	r2, #176	; 0xb0
 801301e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013022:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013024:	697b      	ldr	r3, [r7, #20]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d101      	bne.n	801302e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801302a:	2303      	movs	r3, #3
 801302c:	e008      	b.n	8013040 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	68ba      	ldr	r2, [r7, #8]
 8013032:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	687a      	ldr	r2, [r7, #4]
 801303a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801303e:	2300      	movs	r3, #0
}
 8013040:	4618      	mov	r0, r3
 8013042:	371c      	adds	r7, #28
 8013044:	46bd      	mov	sp, r7
 8013046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304a:	4770      	bx	lr

0801304c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801304c:	b480      	push	{r7}
 801304e:	b085      	sub	sp, #20
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	32b0      	adds	r2, #176	; 0xb0
 8013060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013064:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d101      	bne.n	8013070 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801306c:	2303      	movs	r3, #3
 801306e:	e004      	b.n	801307a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	683a      	ldr	r2, [r7, #0]
 8013074:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013078:	2300      	movs	r3, #0
}
 801307a:	4618      	mov	r0, r3
 801307c:	3714      	adds	r7, #20
 801307e:	46bd      	mov	sp, r7
 8013080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013084:	4770      	bx	lr
	...

08013088 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b084      	sub	sp, #16
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	32b0      	adds	r2, #176	; 0xb0
 801309a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801309e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80130a0:	2301      	movs	r3, #1
 80130a2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d101      	bne.n	80130ae <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80130aa:	2303      	movs	r3, #3
 80130ac:	e025      	b.n	80130fa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80130ae:	68bb      	ldr	r3, [r7, #8]
 80130b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d11f      	bne.n	80130f8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	2201      	movs	r2, #1
 80130bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80130c0:	4b10      	ldr	r3, [pc, #64]	; (8013104 <USBD_CDC_TransmitPacket+0x7c>)
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	f003 020f 	and.w	r2, r3, #15
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	4613      	mov	r3, r2
 80130d2:	009b      	lsls	r3, r3, #2
 80130d4:	4413      	add	r3, r2
 80130d6:	009b      	lsls	r3, r3, #2
 80130d8:	4403      	add	r3, r0
 80130da:	3318      	adds	r3, #24
 80130dc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80130de:	4b09      	ldr	r3, [pc, #36]	; (8013104 <USBD_CDC_TransmitPacket+0x7c>)
 80130e0:	7819      	ldrb	r1, [r3, #0]
 80130e2:	68bb      	ldr	r3, [r7, #8]
 80130e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80130ee:	6878      	ldr	r0, [r7, #4]
 80130f0:	f004 ff99 	bl	8018026 <USBD_LL_Transmit>

    ret = USBD_OK;
 80130f4:	2300      	movs	r3, #0
 80130f6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80130f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80130fa:	4618      	mov	r0, r3
 80130fc:	3710      	adds	r7, #16
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}
 8013102:	bf00      	nop
 8013104:	24000097 	.word	0x24000097

08013108 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b084      	sub	sp, #16
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	32b0      	adds	r2, #176	; 0xb0
 801311a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801311e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	32b0      	adds	r2, #176	; 0xb0
 801312a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d101      	bne.n	8013136 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013132:	2303      	movs	r3, #3
 8013134:	e018      	b.n	8013168 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	7c1b      	ldrb	r3, [r3, #16]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d10a      	bne.n	8013154 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801313e:	4b0c      	ldr	r3, [pc, #48]	; (8013170 <USBD_CDC_ReceivePacket+0x68>)
 8013140:	7819      	ldrb	r1, [r3, #0]
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013148:	f44f 7300 	mov.w	r3, #512	; 0x200
 801314c:	6878      	ldr	r0, [r7, #4]
 801314e:	f004 ff8b 	bl	8018068 <USBD_LL_PrepareReceive>
 8013152:	e008      	b.n	8013166 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013154:	4b06      	ldr	r3, [pc, #24]	; (8013170 <USBD_CDC_ReceivePacket+0x68>)
 8013156:	7819      	ldrb	r1, [r3, #0]
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801315e:	2340      	movs	r3, #64	; 0x40
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f004 ff81 	bl	8018068 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013166:	2300      	movs	r3, #0
}
 8013168:	4618      	mov	r0, r3
 801316a:	3710      	adds	r7, #16
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}
 8013170:	24000098 	.word	0x24000098

08013174 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b086      	sub	sp, #24
 8013178:	af00      	add	r7, sp, #0
 801317a:	60f8      	str	r0, [r7, #12]
 801317c:	60b9      	str	r1, [r7, #8]
 801317e:	4613      	mov	r3, r2
 8013180:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d101      	bne.n	801318c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013188:	2303      	movs	r3, #3
 801318a:	e01f      	b.n	80131cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	2200      	movs	r2, #0
 8013190:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	2200      	movs	r2, #0
 8013198:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	2200      	movs	r2, #0
 80131a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d003      	beq.n	80131b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	68ba      	ldr	r2, [r7, #8]
 80131ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	2201      	movs	r2, #1
 80131b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	79fa      	ldrb	r2, [r7, #7]
 80131be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80131c0:	68f8      	ldr	r0, [r7, #12]
 80131c2:	f004 fdf5 	bl	8017db0 <USBD_LL_Init>
 80131c6:	4603      	mov	r3, r0
 80131c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80131ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80131cc:	4618      	mov	r0, r3
 80131ce:	3718      	adds	r7, #24
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bd80      	pop	{r7, pc}

080131d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b084      	sub	sp, #16
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
 80131dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80131de:	2300      	movs	r3, #0
 80131e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d101      	bne.n	80131ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80131e8:	2303      	movs	r3, #3
 80131ea:	e025      	b.n	8013238 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	683a      	ldr	r2, [r7, #0]
 80131f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	32ae      	adds	r2, #174	; 0xae
 80131fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013204:	2b00      	cmp	r3, #0
 8013206:	d00f      	beq.n	8013228 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	32ae      	adds	r2, #174	; 0xae
 8013212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013218:	f107 020e 	add.w	r2, r7, #14
 801321c:	4610      	mov	r0, r2
 801321e:	4798      	blx	r3
 8013220:	4602      	mov	r2, r0
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801322e:	1c5a      	adds	r2, r3, #1
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8013236:	2300      	movs	r3, #0
}
 8013238:	4618      	mov	r0, r3
 801323a:	3710      	adds	r7, #16
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}

08013240 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f004 fe03 	bl	8017e54 <USBD_LL_Start>
 801324e:	4603      	mov	r3, r0
}
 8013250:	4618      	mov	r0, r3
 8013252:	3708      	adds	r7, #8
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}

08013258 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013258:	b480      	push	{r7}
 801325a:	b083      	sub	sp, #12
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013260:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013262:	4618      	mov	r0, r3
 8013264:	370c      	adds	r7, #12
 8013266:	46bd      	mov	sp, r7
 8013268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326c:	4770      	bx	lr

0801326e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801326e:	b580      	push	{r7, lr}
 8013270:	b084      	sub	sp, #16
 8013272:	af00      	add	r7, sp, #0
 8013274:	6078      	str	r0, [r7, #4]
 8013276:	460b      	mov	r3, r1
 8013278:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801327a:	2300      	movs	r3, #0
 801327c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013284:	2b00      	cmp	r3, #0
 8013286:	d009      	beq.n	801329c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	78fa      	ldrb	r2, [r7, #3]
 8013292:	4611      	mov	r1, r2
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	4798      	blx	r3
 8013298:	4603      	mov	r3, r0
 801329a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801329c:	7bfb      	ldrb	r3, [r7, #15]
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3710      	adds	r7, #16
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}

080132a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80132a6:	b580      	push	{r7, lr}
 80132a8:	b084      	sub	sp, #16
 80132aa:	af00      	add	r7, sp, #0
 80132ac:	6078      	str	r0, [r7, #4]
 80132ae:	460b      	mov	r3, r1
 80132b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80132b2:	2300      	movs	r3, #0
 80132b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132bc:	685b      	ldr	r3, [r3, #4]
 80132be:	78fa      	ldrb	r2, [r7, #3]
 80132c0:	4611      	mov	r1, r2
 80132c2:	6878      	ldr	r0, [r7, #4]
 80132c4:	4798      	blx	r3
 80132c6:	4603      	mov	r3, r0
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d001      	beq.n	80132d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80132cc:	2303      	movs	r3, #3
 80132ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80132d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	3710      	adds	r7, #16
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}

080132da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80132da:	b580      	push	{r7, lr}
 80132dc:	b084      	sub	sp, #16
 80132de:	af00      	add	r7, sp, #0
 80132e0:	6078      	str	r0, [r7, #4]
 80132e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80132ea:	6839      	ldr	r1, [r7, #0]
 80132ec:	4618      	mov	r0, r3
 80132ee:	f001 f90e 	bl	801450e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	2201      	movs	r2, #1
 80132f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013300:	461a      	mov	r2, r3
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801330e:	f003 031f 	and.w	r3, r3, #31
 8013312:	2b02      	cmp	r3, #2
 8013314:	d01a      	beq.n	801334c <USBD_LL_SetupStage+0x72>
 8013316:	2b02      	cmp	r3, #2
 8013318:	d822      	bhi.n	8013360 <USBD_LL_SetupStage+0x86>
 801331a:	2b00      	cmp	r3, #0
 801331c:	d002      	beq.n	8013324 <USBD_LL_SetupStage+0x4a>
 801331e:	2b01      	cmp	r3, #1
 8013320:	d00a      	beq.n	8013338 <USBD_LL_SetupStage+0x5e>
 8013322:	e01d      	b.n	8013360 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801332a:	4619      	mov	r1, r3
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f000 fb65 	bl	80139fc <USBD_StdDevReq>
 8013332:	4603      	mov	r3, r0
 8013334:	73fb      	strb	r3, [r7, #15]
      break;
 8013336:	e020      	b.n	801337a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801333e:	4619      	mov	r1, r3
 8013340:	6878      	ldr	r0, [r7, #4]
 8013342:	f000 fbcd 	bl	8013ae0 <USBD_StdItfReq>
 8013346:	4603      	mov	r3, r0
 8013348:	73fb      	strb	r3, [r7, #15]
      break;
 801334a:	e016      	b.n	801337a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013352:	4619      	mov	r1, r3
 8013354:	6878      	ldr	r0, [r7, #4]
 8013356:	f000 fc2f 	bl	8013bb8 <USBD_StdEPReq>
 801335a:	4603      	mov	r3, r0
 801335c:	73fb      	strb	r3, [r7, #15]
      break;
 801335e:	e00c      	b.n	801337a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013366:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801336a:	b2db      	uxtb	r3, r3
 801336c:	4619      	mov	r1, r3
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f004 fdd0 	bl	8017f14 <USBD_LL_StallEP>
 8013374:	4603      	mov	r3, r0
 8013376:	73fb      	strb	r3, [r7, #15]
      break;
 8013378:	bf00      	nop
  }

  return ret;
 801337a:	7bfb      	ldrb	r3, [r7, #15]
}
 801337c:	4618      	mov	r0, r3
 801337e:	3710      	adds	r7, #16
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}

08013384 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b086      	sub	sp, #24
 8013388:	af00      	add	r7, sp, #0
 801338a:	60f8      	str	r0, [r7, #12]
 801338c:	460b      	mov	r3, r1
 801338e:	607a      	str	r2, [r7, #4]
 8013390:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013392:	2300      	movs	r3, #0
 8013394:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013396:	7afb      	ldrb	r3, [r7, #11]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d16e      	bne.n	801347a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80133a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80133aa:	2b03      	cmp	r3, #3
 80133ac:	f040 8098 	bne.w	80134e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80133b0:	693b      	ldr	r3, [r7, #16]
 80133b2:	689a      	ldr	r2, [r3, #8]
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	68db      	ldr	r3, [r3, #12]
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d913      	bls.n	80133e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80133bc:	693b      	ldr	r3, [r7, #16]
 80133be:	689a      	ldr	r2, [r3, #8]
 80133c0:	693b      	ldr	r3, [r7, #16]
 80133c2:	68db      	ldr	r3, [r3, #12]
 80133c4:	1ad2      	subs	r2, r2, r3
 80133c6:	693b      	ldr	r3, [r7, #16]
 80133c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80133ca:	693b      	ldr	r3, [r7, #16]
 80133cc:	68da      	ldr	r2, [r3, #12]
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	689b      	ldr	r3, [r3, #8]
 80133d2:	4293      	cmp	r3, r2
 80133d4:	bf28      	it	cs
 80133d6:	4613      	movcs	r3, r2
 80133d8:	461a      	mov	r2, r3
 80133da:	6879      	ldr	r1, [r7, #4]
 80133dc:	68f8      	ldr	r0, [r7, #12]
 80133de:	f001 f98a 	bl	80146f6 <USBD_CtlContinueRx>
 80133e2:	e07d      	b.n	80134e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80133ea:	f003 031f 	and.w	r3, r3, #31
 80133ee:	2b02      	cmp	r3, #2
 80133f0:	d014      	beq.n	801341c <USBD_LL_DataOutStage+0x98>
 80133f2:	2b02      	cmp	r3, #2
 80133f4:	d81d      	bhi.n	8013432 <USBD_LL_DataOutStage+0xae>
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d002      	beq.n	8013400 <USBD_LL_DataOutStage+0x7c>
 80133fa:	2b01      	cmp	r3, #1
 80133fc:	d003      	beq.n	8013406 <USBD_LL_DataOutStage+0x82>
 80133fe:	e018      	b.n	8013432 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013400:	2300      	movs	r3, #0
 8013402:	75bb      	strb	r3, [r7, #22]
            break;
 8013404:	e018      	b.n	8013438 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801340c:	b2db      	uxtb	r3, r3
 801340e:	4619      	mov	r1, r3
 8013410:	68f8      	ldr	r0, [r7, #12]
 8013412:	f000 fa64 	bl	80138de <USBD_CoreFindIF>
 8013416:	4603      	mov	r3, r0
 8013418:	75bb      	strb	r3, [r7, #22]
            break;
 801341a:	e00d      	b.n	8013438 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013422:	b2db      	uxtb	r3, r3
 8013424:	4619      	mov	r1, r3
 8013426:	68f8      	ldr	r0, [r7, #12]
 8013428:	f000 fa66 	bl	80138f8 <USBD_CoreFindEP>
 801342c:	4603      	mov	r3, r0
 801342e:	75bb      	strb	r3, [r7, #22]
            break;
 8013430:	e002      	b.n	8013438 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013432:	2300      	movs	r3, #0
 8013434:	75bb      	strb	r3, [r7, #22]
            break;
 8013436:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013438:	7dbb      	ldrb	r3, [r7, #22]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d119      	bne.n	8013472 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013444:	b2db      	uxtb	r3, r3
 8013446:	2b03      	cmp	r3, #3
 8013448:	d113      	bne.n	8013472 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801344a:	7dba      	ldrb	r2, [r7, #22]
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	32ae      	adds	r2, #174	; 0xae
 8013450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013454:	691b      	ldr	r3, [r3, #16]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d00b      	beq.n	8013472 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801345a:	7dba      	ldrb	r2, [r7, #22]
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013462:	7dba      	ldrb	r2, [r7, #22]
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	32ae      	adds	r2, #174	; 0xae
 8013468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801346c:	691b      	ldr	r3, [r3, #16]
 801346e:	68f8      	ldr	r0, [r7, #12]
 8013470:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013472:	68f8      	ldr	r0, [r7, #12]
 8013474:	f001 f950 	bl	8014718 <USBD_CtlSendStatus>
 8013478:	e032      	b.n	80134e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801347a:	7afb      	ldrb	r3, [r7, #11]
 801347c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013480:	b2db      	uxtb	r3, r3
 8013482:	4619      	mov	r1, r3
 8013484:	68f8      	ldr	r0, [r7, #12]
 8013486:	f000 fa37 	bl	80138f8 <USBD_CoreFindEP>
 801348a:	4603      	mov	r3, r0
 801348c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801348e:	7dbb      	ldrb	r3, [r7, #22]
 8013490:	2bff      	cmp	r3, #255	; 0xff
 8013492:	d025      	beq.n	80134e0 <USBD_LL_DataOutStage+0x15c>
 8013494:	7dbb      	ldrb	r3, [r7, #22]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d122      	bne.n	80134e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134a0:	b2db      	uxtb	r3, r3
 80134a2:	2b03      	cmp	r3, #3
 80134a4:	d117      	bne.n	80134d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80134a6:	7dba      	ldrb	r2, [r7, #22]
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	32ae      	adds	r2, #174	; 0xae
 80134ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134b0:	699b      	ldr	r3, [r3, #24]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d00f      	beq.n	80134d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80134b6:	7dba      	ldrb	r2, [r7, #22]
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80134be:	7dba      	ldrb	r2, [r7, #22]
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	32ae      	adds	r2, #174	; 0xae
 80134c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134c8:	699b      	ldr	r3, [r3, #24]
 80134ca:	7afa      	ldrb	r2, [r7, #11]
 80134cc:	4611      	mov	r1, r2
 80134ce:	68f8      	ldr	r0, [r7, #12]
 80134d0:	4798      	blx	r3
 80134d2:	4603      	mov	r3, r0
 80134d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80134d6:	7dfb      	ldrb	r3, [r7, #23]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d001      	beq.n	80134e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80134dc:	7dfb      	ldrb	r3, [r7, #23]
 80134de:	e000      	b.n	80134e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80134e0:	2300      	movs	r3, #0
}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3718      	adds	r7, #24
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}

080134ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80134ea:	b580      	push	{r7, lr}
 80134ec:	b086      	sub	sp, #24
 80134ee:	af00      	add	r7, sp, #0
 80134f0:	60f8      	str	r0, [r7, #12]
 80134f2:	460b      	mov	r3, r1
 80134f4:	607a      	str	r2, [r7, #4]
 80134f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80134f8:	7afb      	ldrb	r3, [r7, #11]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d16f      	bne.n	80135de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	3314      	adds	r3, #20
 8013502:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801350a:	2b02      	cmp	r3, #2
 801350c:	d15a      	bne.n	80135c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	689a      	ldr	r2, [r3, #8]
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	68db      	ldr	r3, [r3, #12]
 8013516:	429a      	cmp	r2, r3
 8013518:	d914      	bls.n	8013544 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801351a:	693b      	ldr	r3, [r7, #16]
 801351c:	689a      	ldr	r2, [r3, #8]
 801351e:	693b      	ldr	r3, [r7, #16]
 8013520:	68db      	ldr	r3, [r3, #12]
 8013522:	1ad2      	subs	r2, r2, r3
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013528:	693b      	ldr	r3, [r7, #16]
 801352a:	689b      	ldr	r3, [r3, #8]
 801352c:	461a      	mov	r2, r3
 801352e:	6879      	ldr	r1, [r7, #4]
 8013530:	68f8      	ldr	r0, [r7, #12]
 8013532:	f001 f8b2 	bl	801469a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013536:	2300      	movs	r3, #0
 8013538:	2200      	movs	r2, #0
 801353a:	2100      	movs	r1, #0
 801353c:	68f8      	ldr	r0, [r7, #12]
 801353e:	f004 fd93 	bl	8018068 <USBD_LL_PrepareReceive>
 8013542:	e03f      	b.n	80135c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013544:	693b      	ldr	r3, [r7, #16]
 8013546:	68da      	ldr	r2, [r3, #12]
 8013548:	693b      	ldr	r3, [r7, #16]
 801354a:	689b      	ldr	r3, [r3, #8]
 801354c:	429a      	cmp	r2, r3
 801354e:	d11c      	bne.n	801358a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013550:	693b      	ldr	r3, [r7, #16]
 8013552:	685a      	ldr	r2, [r3, #4]
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013558:	429a      	cmp	r2, r3
 801355a:	d316      	bcc.n	801358a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801355c:	693b      	ldr	r3, [r7, #16]
 801355e:	685a      	ldr	r2, [r3, #4]
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013566:	429a      	cmp	r2, r3
 8013568:	d20f      	bcs.n	801358a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801356a:	2200      	movs	r2, #0
 801356c:	2100      	movs	r1, #0
 801356e:	68f8      	ldr	r0, [r7, #12]
 8013570:	f001 f893 	bl	801469a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	2200      	movs	r2, #0
 8013578:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801357c:	2300      	movs	r3, #0
 801357e:	2200      	movs	r2, #0
 8013580:	2100      	movs	r1, #0
 8013582:	68f8      	ldr	r0, [r7, #12]
 8013584:	f004 fd70 	bl	8018068 <USBD_LL_PrepareReceive>
 8013588:	e01c      	b.n	80135c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013590:	b2db      	uxtb	r3, r3
 8013592:	2b03      	cmp	r3, #3
 8013594:	d10f      	bne.n	80135b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801359c:	68db      	ldr	r3, [r3, #12]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d009      	beq.n	80135b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	2200      	movs	r2, #0
 80135a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135b0:	68db      	ldr	r3, [r3, #12]
 80135b2:	68f8      	ldr	r0, [r7, #12]
 80135b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80135b6:	2180      	movs	r1, #128	; 0x80
 80135b8:	68f8      	ldr	r0, [r7, #12]
 80135ba:	f004 fcab 	bl	8017f14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80135be:	68f8      	ldr	r0, [r7, #12]
 80135c0:	f001 f8bd 	bl	801473e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d03a      	beq.n	8013644 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80135ce:	68f8      	ldr	r0, [r7, #12]
 80135d0:	f7ff fe42 	bl	8013258 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	2200      	movs	r2, #0
 80135d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80135dc:	e032      	b.n	8013644 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80135de:	7afb      	ldrb	r3, [r7, #11]
 80135e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80135e4:	b2db      	uxtb	r3, r3
 80135e6:	4619      	mov	r1, r3
 80135e8:	68f8      	ldr	r0, [r7, #12]
 80135ea:	f000 f985 	bl	80138f8 <USBD_CoreFindEP>
 80135ee:	4603      	mov	r3, r0
 80135f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80135f2:	7dfb      	ldrb	r3, [r7, #23]
 80135f4:	2bff      	cmp	r3, #255	; 0xff
 80135f6:	d025      	beq.n	8013644 <USBD_LL_DataInStage+0x15a>
 80135f8:	7dfb      	ldrb	r3, [r7, #23]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d122      	bne.n	8013644 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013604:	b2db      	uxtb	r3, r3
 8013606:	2b03      	cmp	r3, #3
 8013608:	d11c      	bne.n	8013644 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801360a:	7dfa      	ldrb	r2, [r7, #23]
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	32ae      	adds	r2, #174	; 0xae
 8013610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013614:	695b      	ldr	r3, [r3, #20]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d014      	beq.n	8013644 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801361a:	7dfa      	ldrb	r2, [r7, #23]
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013622:	7dfa      	ldrb	r2, [r7, #23]
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	32ae      	adds	r2, #174	; 0xae
 8013628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801362c:	695b      	ldr	r3, [r3, #20]
 801362e:	7afa      	ldrb	r2, [r7, #11]
 8013630:	4611      	mov	r1, r2
 8013632:	68f8      	ldr	r0, [r7, #12]
 8013634:	4798      	blx	r3
 8013636:	4603      	mov	r3, r0
 8013638:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801363a:	7dbb      	ldrb	r3, [r7, #22]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d001      	beq.n	8013644 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013640:	7dbb      	ldrb	r3, [r7, #22]
 8013642:	e000      	b.n	8013646 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013644:	2300      	movs	r3, #0
}
 8013646:	4618      	mov	r0, r3
 8013648:	3718      	adds	r7, #24
 801364a:	46bd      	mov	sp, r7
 801364c:	bd80      	pop	{r7, pc}

0801364e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801364e:	b580      	push	{r7, lr}
 8013650:	b084      	sub	sp, #16
 8013652:	af00      	add	r7, sp, #0
 8013654:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013656:	2300      	movs	r3, #0
 8013658:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	2201      	movs	r2, #1
 801365e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	2200      	movs	r2, #0
 8013666:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	2200      	movs	r2, #0
 801366e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	2200      	movs	r2, #0
 8013674:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2200      	movs	r2, #0
 801367c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013686:	2b00      	cmp	r3, #0
 8013688:	d014      	beq.n	80136b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d00e      	beq.n	80136b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801369c:	685b      	ldr	r3, [r3, #4]
 801369e:	687a      	ldr	r2, [r7, #4]
 80136a0:	6852      	ldr	r2, [r2, #4]
 80136a2:	b2d2      	uxtb	r2, r2
 80136a4:	4611      	mov	r1, r2
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	4798      	blx	r3
 80136aa:	4603      	mov	r3, r0
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d001      	beq.n	80136b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80136b0:	2303      	movs	r3, #3
 80136b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80136b4:	2340      	movs	r3, #64	; 0x40
 80136b6:	2200      	movs	r2, #0
 80136b8:	2100      	movs	r1, #0
 80136ba:	6878      	ldr	r0, [r7, #4]
 80136bc:	f004 fbe5 	bl	8017e8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2201      	movs	r2, #1
 80136c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	2240      	movs	r2, #64	; 0x40
 80136cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80136d0:	2340      	movs	r3, #64	; 0x40
 80136d2:	2200      	movs	r2, #0
 80136d4:	2180      	movs	r1, #128	; 0x80
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f004 fbd7 	bl	8017e8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2201      	movs	r2, #1
 80136e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	2240      	movs	r2, #64	; 0x40
 80136e6:	621a      	str	r2, [r3, #32]

  return ret;
 80136e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80136ea:	4618      	mov	r0, r3
 80136ec:	3710      	adds	r7, #16
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}

080136f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80136f2:	b480      	push	{r7}
 80136f4:	b083      	sub	sp, #12
 80136f6:	af00      	add	r7, sp, #0
 80136f8:	6078      	str	r0, [r7, #4]
 80136fa:	460b      	mov	r3, r1
 80136fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	78fa      	ldrb	r2, [r7, #3]
 8013702:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013704:	2300      	movs	r3, #0
}
 8013706:	4618      	mov	r0, r3
 8013708:	370c      	adds	r7, #12
 801370a:	46bd      	mov	sp, r7
 801370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013710:	4770      	bx	lr

08013712 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013712:	b480      	push	{r7}
 8013714:	b083      	sub	sp, #12
 8013716:	af00      	add	r7, sp, #0
 8013718:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013720:	b2db      	uxtb	r3, r3
 8013722:	2b04      	cmp	r3, #4
 8013724:	d006      	beq.n	8013734 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801372c:	b2da      	uxtb	r2, r3
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2204      	movs	r2, #4
 8013738:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801373c:	2300      	movs	r3, #0
}
 801373e:	4618      	mov	r0, r3
 8013740:	370c      	adds	r7, #12
 8013742:	46bd      	mov	sp, r7
 8013744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013748:	4770      	bx	lr

0801374a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801374a:	b480      	push	{r7}
 801374c:	b083      	sub	sp, #12
 801374e:	af00      	add	r7, sp, #0
 8013750:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013758:	b2db      	uxtb	r3, r3
 801375a:	2b04      	cmp	r3, #4
 801375c:	d106      	bne.n	801376c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8013764:	b2da      	uxtb	r2, r3
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801376c:	2300      	movs	r3, #0
}
 801376e:	4618      	mov	r0, r3
 8013770:	370c      	adds	r7, #12
 8013772:	46bd      	mov	sp, r7
 8013774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013778:	4770      	bx	lr

0801377a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801377a:	b580      	push	{r7, lr}
 801377c:	b082      	sub	sp, #8
 801377e:	af00      	add	r7, sp, #0
 8013780:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013788:	b2db      	uxtb	r3, r3
 801378a:	2b03      	cmp	r3, #3
 801378c:	d110      	bne.n	80137b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013794:	2b00      	cmp	r3, #0
 8013796:	d00b      	beq.n	80137b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801379e:	69db      	ldr	r3, [r3, #28]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d005      	beq.n	80137b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137aa:	69db      	ldr	r3, [r3, #28]
 80137ac:	6878      	ldr	r0, [r7, #4]
 80137ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80137b0:	2300      	movs	r3, #0
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	3708      	adds	r7, #8
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}

080137ba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80137ba:	b580      	push	{r7, lr}
 80137bc:	b082      	sub	sp, #8
 80137be:	af00      	add	r7, sp, #0
 80137c0:	6078      	str	r0, [r7, #4]
 80137c2:	460b      	mov	r3, r1
 80137c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	32ae      	adds	r2, #174	; 0xae
 80137d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d101      	bne.n	80137dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80137d8:	2303      	movs	r3, #3
 80137da:	e01c      	b.n	8013816 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137e2:	b2db      	uxtb	r3, r3
 80137e4:	2b03      	cmp	r3, #3
 80137e6:	d115      	bne.n	8013814 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	32ae      	adds	r2, #174	; 0xae
 80137f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137f6:	6a1b      	ldr	r3, [r3, #32]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d00b      	beq.n	8013814 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	32ae      	adds	r2, #174	; 0xae
 8013806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801380a:	6a1b      	ldr	r3, [r3, #32]
 801380c:	78fa      	ldrb	r2, [r7, #3]
 801380e:	4611      	mov	r1, r2
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013814:	2300      	movs	r3, #0
}
 8013816:	4618      	mov	r0, r3
 8013818:	3708      	adds	r7, #8
 801381a:	46bd      	mov	sp, r7
 801381c:	bd80      	pop	{r7, pc}

0801381e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801381e:	b580      	push	{r7, lr}
 8013820:	b082      	sub	sp, #8
 8013822:	af00      	add	r7, sp, #0
 8013824:	6078      	str	r0, [r7, #4]
 8013826:	460b      	mov	r3, r1
 8013828:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	32ae      	adds	r2, #174	; 0xae
 8013834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d101      	bne.n	8013840 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801383c:	2303      	movs	r3, #3
 801383e:	e01c      	b.n	801387a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013846:	b2db      	uxtb	r3, r3
 8013848:	2b03      	cmp	r3, #3
 801384a:	d115      	bne.n	8013878 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	32ae      	adds	r2, #174	; 0xae
 8013856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801385c:	2b00      	cmp	r3, #0
 801385e:	d00b      	beq.n	8013878 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	32ae      	adds	r2, #174	; 0xae
 801386a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013870:	78fa      	ldrb	r2, [r7, #3]
 8013872:	4611      	mov	r1, r2
 8013874:	6878      	ldr	r0, [r7, #4]
 8013876:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013878:	2300      	movs	r3, #0
}
 801387a:	4618      	mov	r0, r3
 801387c:	3708      	adds	r7, #8
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}

08013882 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013882:	b480      	push	{r7}
 8013884:	b083      	sub	sp, #12
 8013886:	af00      	add	r7, sp, #0
 8013888:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801388a:	2300      	movs	r3, #0
}
 801388c:	4618      	mov	r0, r3
 801388e:	370c      	adds	r7, #12
 8013890:	46bd      	mov	sp, r7
 8013892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013896:	4770      	bx	lr

08013898 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b084      	sub	sp, #16
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80138a0:	2300      	movs	r3, #0
 80138a2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2201      	movs	r2, #1
 80138a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d00e      	beq.n	80138d4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138bc:	685b      	ldr	r3, [r3, #4]
 80138be:	687a      	ldr	r2, [r7, #4]
 80138c0:	6852      	ldr	r2, [r2, #4]
 80138c2:	b2d2      	uxtb	r2, r2
 80138c4:	4611      	mov	r1, r2
 80138c6:	6878      	ldr	r0, [r7, #4]
 80138c8:	4798      	blx	r3
 80138ca:	4603      	mov	r3, r0
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d001      	beq.n	80138d4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80138d0:	2303      	movs	r3, #3
 80138d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80138d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3710      	adds	r7, #16
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}

080138de <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80138de:	b480      	push	{r7}
 80138e0:	b083      	sub	sp, #12
 80138e2:	af00      	add	r7, sp, #0
 80138e4:	6078      	str	r0, [r7, #4]
 80138e6:	460b      	mov	r3, r1
 80138e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80138ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	370c      	adds	r7, #12
 80138f0:	46bd      	mov	sp, r7
 80138f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f6:	4770      	bx	lr

080138f8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80138f8:	b480      	push	{r7}
 80138fa:	b083      	sub	sp, #12
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
 8013900:	460b      	mov	r3, r1
 8013902:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013904:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013906:	4618      	mov	r0, r3
 8013908:	370c      	adds	r7, #12
 801390a:	46bd      	mov	sp, r7
 801390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013910:	4770      	bx	lr

08013912 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013912:	b580      	push	{r7, lr}
 8013914:	b086      	sub	sp, #24
 8013916:	af00      	add	r7, sp, #0
 8013918:	6078      	str	r0, [r7, #4]
 801391a:	460b      	mov	r3, r1
 801391c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013926:	2300      	movs	r3, #0
 8013928:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	885b      	ldrh	r3, [r3, #2]
 801392e:	b29a      	uxth	r2, r3
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	b29b      	uxth	r3, r3
 8013936:	429a      	cmp	r2, r3
 8013938:	d920      	bls.n	801397c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	781b      	ldrb	r3, [r3, #0]
 801393e:	b29b      	uxth	r3, r3
 8013940:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013942:	e013      	b.n	801396c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013944:	f107 030a 	add.w	r3, r7, #10
 8013948:	4619      	mov	r1, r3
 801394a:	6978      	ldr	r0, [r7, #20]
 801394c:	f000 f81b 	bl	8013986 <USBD_GetNextDesc>
 8013950:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	785b      	ldrb	r3, [r3, #1]
 8013956:	2b05      	cmp	r3, #5
 8013958:	d108      	bne.n	801396c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801395a:	697b      	ldr	r3, [r7, #20]
 801395c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801395e:	693b      	ldr	r3, [r7, #16]
 8013960:	789b      	ldrb	r3, [r3, #2]
 8013962:	78fa      	ldrb	r2, [r7, #3]
 8013964:	429a      	cmp	r2, r3
 8013966:	d008      	beq.n	801397a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013968:	2300      	movs	r3, #0
 801396a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	885b      	ldrh	r3, [r3, #2]
 8013970:	b29a      	uxth	r2, r3
 8013972:	897b      	ldrh	r3, [r7, #10]
 8013974:	429a      	cmp	r2, r3
 8013976:	d8e5      	bhi.n	8013944 <USBD_GetEpDesc+0x32>
 8013978:	e000      	b.n	801397c <USBD_GetEpDesc+0x6a>
          break;
 801397a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801397c:	693b      	ldr	r3, [r7, #16]
}
 801397e:	4618      	mov	r0, r3
 8013980:	3718      	adds	r7, #24
 8013982:	46bd      	mov	sp, r7
 8013984:	bd80      	pop	{r7, pc}

08013986 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013986:	b480      	push	{r7}
 8013988:	b085      	sub	sp, #20
 801398a:	af00      	add	r7, sp, #0
 801398c:	6078      	str	r0, [r7, #4]
 801398e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013994:	683b      	ldr	r3, [r7, #0]
 8013996:	881a      	ldrh	r2, [r3, #0]
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	781b      	ldrb	r3, [r3, #0]
 801399c:	b29b      	uxth	r3, r3
 801399e:	4413      	add	r3, r2
 80139a0:	b29a      	uxth	r2, r3
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	781b      	ldrb	r3, [r3, #0]
 80139aa:	461a      	mov	r2, r3
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	4413      	add	r3, r2
 80139b0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80139b2:	68fb      	ldr	r3, [r7, #12]
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	3714      	adds	r7, #20
 80139b8:	46bd      	mov	sp, r7
 80139ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139be:	4770      	bx	lr

080139c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80139c0:	b480      	push	{r7}
 80139c2:	b087      	sub	sp, #28
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	781b      	ldrb	r3, [r3, #0]
 80139d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80139d2:	697b      	ldr	r3, [r7, #20]
 80139d4:	3301      	adds	r3, #1
 80139d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80139d8:	697b      	ldr	r3, [r7, #20]
 80139da:	781b      	ldrb	r3, [r3, #0]
 80139dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80139de:	8a3b      	ldrh	r3, [r7, #16]
 80139e0:	021b      	lsls	r3, r3, #8
 80139e2:	b21a      	sxth	r2, r3
 80139e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80139e8:	4313      	orrs	r3, r2
 80139ea:	b21b      	sxth	r3, r3
 80139ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80139ee:	89fb      	ldrh	r3, [r7, #14]
}
 80139f0:	4618      	mov	r0, r3
 80139f2:	371c      	adds	r7, #28
 80139f4:	46bd      	mov	sp, r7
 80139f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fa:	4770      	bx	lr

080139fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b084      	sub	sp, #16
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
 8013a04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013a06:	2300      	movs	r3, #0
 8013a08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013a0a:	683b      	ldr	r3, [r7, #0]
 8013a0c:	781b      	ldrb	r3, [r3, #0]
 8013a0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013a12:	2b40      	cmp	r3, #64	; 0x40
 8013a14:	d005      	beq.n	8013a22 <USBD_StdDevReq+0x26>
 8013a16:	2b40      	cmp	r3, #64	; 0x40
 8013a18:	d857      	bhi.n	8013aca <USBD_StdDevReq+0xce>
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d00f      	beq.n	8013a3e <USBD_StdDevReq+0x42>
 8013a1e:	2b20      	cmp	r3, #32
 8013a20:	d153      	bne.n	8013aca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	32ae      	adds	r2, #174	; 0xae
 8013a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a30:	689b      	ldr	r3, [r3, #8]
 8013a32:	6839      	ldr	r1, [r7, #0]
 8013a34:	6878      	ldr	r0, [r7, #4]
 8013a36:	4798      	blx	r3
 8013a38:	4603      	mov	r3, r0
 8013a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8013a3c:	e04a      	b.n	8013ad4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	785b      	ldrb	r3, [r3, #1]
 8013a42:	2b09      	cmp	r3, #9
 8013a44:	d83b      	bhi.n	8013abe <USBD_StdDevReq+0xc2>
 8013a46:	a201      	add	r2, pc, #4	; (adr r2, 8013a4c <USBD_StdDevReq+0x50>)
 8013a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a4c:	08013aa1 	.word	0x08013aa1
 8013a50:	08013ab5 	.word	0x08013ab5
 8013a54:	08013abf 	.word	0x08013abf
 8013a58:	08013aab 	.word	0x08013aab
 8013a5c:	08013abf 	.word	0x08013abf
 8013a60:	08013a7f 	.word	0x08013a7f
 8013a64:	08013a75 	.word	0x08013a75
 8013a68:	08013abf 	.word	0x08013abf
 8013a6c:	08013a97 	.word	0x08013a97
 8013a70:	08013a89 	.word	0x08013a89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013a74:	6839      	ldr	r1, [r7, #0]
 8013a76:	6878      	ldr	r0, [r7, #4]
 8013a78:	f000 fa3c 	bl	8013ef4 <USBD_GetDescriptor>
          break;
 8013a7c:	e024      	b.n	8013ac8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013a7e:	6839      	ldr	r1, [r7, #0]
 8013a80:	6878      	ldr	r0, [r7, #4]
 8013a82:	f000 fba1 	bl	80141c8 <USBD_SetAddress>
          break;
 8013a86:	e01f      	b.n	8013ac8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013a88:	6839      	ldr	r1, [r7, #0]
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f000 fbe0 	bl	8014250 <USBD_SetConfig>
 8013a90:	4603      	mov	r3, r0
 8013a92:	73fb      	strb	r3, [r7, #15]
          break;
 8013a94:	e018      	b.n	8013ac8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013a96:	6839      	ldr	r1, [r7, #0]
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f000 fc83 	bl	80143a4 <USBD_GetConfig>
          break;
 8013a9e:	e013      	b.n	8013ac8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013aa0:	6839      	ldr	r1, [r7, #0]
 8013aa2:	6878      	ldr	r0, [r7, #4]
 8013aa4:	f000 fcb4 	bl	8014410 <USBD_GetStatus>
          break;
 8013aa8:	e00e      	b.n	8013ac8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013aaa:	6839      	ldr	r1, [r7, #0]
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f000 fce3 	bl	8014478 <USBD_SetFeature>
          break;
 8013ab2:	e009      	b.n	8013ac8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013ab4:	6839      	ldr	r1, [r7, #0]
 8013ab6:	6878      	ldr	r0, [r7, #4]
 8013ab8:	f000 fd07 	bl	80144ca <USBD_ClrFeature>
          break;
 8013abc:	e004      	b.n	8013ac8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013abe:	6839      	ldr	r1, [r7, #0]
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f000 fd5e 	bl	8014582 <USBD_CtlError>
          break;
 8013ac6:	bf00      	nop
      }
      break;
 8013ac8:	e004      	b.n	8013ad4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013aca:	6839      	ldr	r1, [r7, #0]
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	f000 fd58 	bl	8014582 <USBD_CtlError>
      break;
 8013ad2:	bf00      	nop
  }

  return ret;
 8013ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	3710      	adds	r7, #16
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}
 8013ade:	bf00      	nop

08013ae0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b084      	sub	sp, #16
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
 8013ae8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013aea:	2300      	movs	r3, #0
 8013aec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013aee:	683b      	ldr	r3, [r7, #0]
 8013af0:	781b      	ldrb	r3, [r3, #0]
 8013af2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013af6:	2b40      	cmp	r3, #64	; 0x40
 8013af8:	d005      	beq.n	8013b06 <USBD_StdItfReq+0x26>
 8013afa:	2b40      	cmp	r3, #64	; 0x40
 8013afc:	d852      	bhi.n	8013ba4 <USBD_StdItfReq+0xc4>
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d001      	beq.n	8013b06 <USBD_StdItfReq+0x26>
 8013b02:	2b20      	cmp	r3, #32
 8013b04:	d14e      	bne.n	8013ba4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b0c:	b2db      	uxtb	r3, r3
 8013b0e:	3b01      	subs	r3, #1
 8013b10:	2b02      	cmp	r3, #2
 8013b12:	d840      	bhi.n	8013b96 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	889b      	ldrh	r3, [r3, #4]
 8013b18:	b2db      	uxtb	r3, r3
 8013b1a:	2b01      	cmp	r3, #1
 8013b1c:	d836      	bhi.n	8013b8c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013b1e:	683b      	ldr	r3, [r7, #0]
 8013b20:	889b      	ldrh	r3, [r3, #4]
 8013b22:	b2db      	uxtb	r3, r3
 8013b24:	4619      	mov	r1, r3
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f7ff fed9 	bl	80138de <USBD_CoreFindIF>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013b30:	7bbb      	ldrb	r3, [r7, #14]
 8013b32:	2bff      	cmp	r3, #255	; 0xff
 8013b34:	d01d      	beq.n	8013b72 <USBD_StdItfReq+0x92>
 8013b36:	7bbb      	ldrb	r3, [r7, #14]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d11a      	bne.n	8013b72 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013b3c:	7bba      	ldrb	r2, [r7, #14]
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	32ae      	adds	r2, #174	; 0xae
 8013b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b46:	689b      	ldr	r3, [r3, #8]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d00f      	beq.n	8013b6c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013b4c:	7bba      	ldrb	r2, [r7, #14]
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013b54:	7bba      	ldrb	r2, [r7, #14]
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	32ae      	adds	r2, #174	; 0xae
 8013b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b5e:	689b      	ldr	r3, [r3, #8]
 8013b60:	6839      	ldr	r1, [r7, #0]
 8013b62:	6878      	ldr	r0, [r7, #4]
 8013b64:	4798      	blx	r3
 8013b66:	4603      	mov	r3, r0
 8013b68:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013b6a:	e004      	b.n	8013b76 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013b6c:	2303      	movs	r3, #3
 8013b6e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013b70:	e001      	b.n	8013b76 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013b72:	2303      	movs	r3, #3
 8013b74:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013b76:	683b      	ldr	r3, [r7, #0]
 8013b78:	88db      	ldrh	r3, [r3, #6]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d110      	bne.n	8013ba0 <USBD_StdItfReq+0xc0>
 8013b7e:	7bfb      	ldrb	r3, [r7, #15]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d10d      	bne.n	8013ba0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f000 fdc7 	bl	8014718 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013b8a:	e009      	b.n	8013ba0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013b8c:	6839      	ldr	r1, [r7, #0]
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f000 fcf7 	bl	8014582 <USBD_CtlError>
          break;
 8013b94:	e004      	b.n	8013ba0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013b96:	6839      	ldr	r1, [r7, #0]
 8013b98:	6878      	ldr	r0, [r7, #4]
 8013b9a:	f000 fcf2 	bl	8014582 <USBD_CtlError>
          break;
 8013b9e:	e000      	b.n	8013ba2 <USBD_StdItfReq+0xc2>
          break;
 8013ba0:	bf00      	nop
      }
      break;
 8013ba2:	e004      	b.n	8013bae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013ba4:	6839      	ldr	r1, [r7, #0]
 8013ba6:	6878      	ldr	r0, [r7, #4]
 8013ba8:	f000 fceb 	bl	8014582 <USBD_CtlError>
      break;
 8013bac:	bf00      	nop
  }

  return ret;
 8013bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	3710      	adds	r7, #16
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}

08013bb8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b084      	sub	sp, #16
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
 8013bc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	889b      	ldrh	r3, [r3, #4]
 8013bca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	781b      	ldrb	r3, [r3, #0]
 8013bd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013bd4:	2b40      	cmp	r3, #64	; 0x40
 8013bd6:	d007      	beq.n	8013be8 <USBD_StdEPReq+0x30>
 8013bd8:	2b40      	cmp	r3, #64	; 0x40
 8013bda:	f200 817f 	bhi.w	8013edc <USBD_StdEPReq+0x324>
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d02a      	beq.n	8013c38 <USBD_StdEPReq+0x80>
 8013be2:	2b20      	cmp	r3, #32
 8013be4:	f040 817a 	bne.w	8013edc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013be8:	7bbb      	ldrb	r3, [r7, #14]
 8013bea:	4619      	mov	r1, r3
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f7ff fe83 	bl	80138f8 <USBD_CoreFindEP>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013bf6:	7b7b      	ldrb	r3, [r7, #13]
 8013bf8:	2bff      	cmp	r3, #255	; 0xff
 8013bfa:	f000 8174 	beq.w	8013ee6 <USBD_StdEPReq+0x32e>
 8013bfe:	7b7b      	ldrb	r3, [r7, #13]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	f040 8170 	bne.w	8013ee6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013c06:	7b7a      	ldrb	r2, [r7, #13]
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013c0e:	7b7a      	ldrb	r2, [r7, #13]
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	32ae      	adds	r2, #174	; 0xae
 8013c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c18:	689b      	ldr	r3, [r3, #8]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	f000 8163 	beq.w	8013ee6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013c20:	7b7a      	ldrb	r2, [r7, #13]
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	32ae      	adds	r2, #174	; 0xae
 8013c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c2a:	689b      	ldr	r3, [r3, #8]
 8013c2c:	6839      	ldr	r1, [r7, #0]
 8013c2e:	6878      	ldr	r0, [r7, #4]
 8013c30:	4798      	blx	r3
 8013c32:	4603      	mov	r3, r0
 8013c34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013c36:	e156      	b.n	8013ee6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	785b      	ldrb	r3, [r3, #1]
 8013c3c:	2b03      	cmp	r3, #3
 8013c3e:	d008      	beq.n	8013c52 <USBD_StdEPReq+0x9a>
 8013c40:	2b03      	cmp	r3, #3
 8013c42:	f300 8145 	bgt.w	8013ed0 <USBD_StdEPReq+0x318>
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	f000 809b 	beq.w	8013d82 <USBD_StdEPReq+0x1ca>
 8013c4c:	2b01      	cmp	r3, #1
 8013c4e:	d03c      	beq.n	8013cca <USBD_StdEPReq+0x112>
 8013c50:	e13e      	b.n	8013ed0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c58:	b2db      	uxtb	r3, r3
 8013c5a:	2b02      	cmp	r3, #2
 8013c5c:	d002      	beq.n	8013c64 <USBD_StdEPReq+0xac>
 8013c5e:	2b03      	cmp	r3, #3
 8013c60:	d016      	beq.n	8013c90 <USBD_StdEPReq+0xd8>
 8013c62:	e02c      	b.n	8013cbe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013c64:	7bbb      	ldrb	r3, [r7, #14]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d00d      	beq.n	8013c86 <USBD_StdEPReq+0xce>
 8013c6a:	7bbb      	ldrb	r3, [r7, #14]
 8013c6c:	2b80      	cmp	r3, #128	; 0x80
 8013c6e:	d00a      	beq.n	8013c86 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013c70:	7bbb      	ldrb	r3, [r7, #14]
 8013c72:	4619      	mov	r1, r3
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f004 f94d 	bl	8017f14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013c7a:	2180      	movs	r1, #128	; 0x80
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f004 f949 	bl	8017f14 <USBD_LL_StallEP>
 8013c82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013c84:	e020      	b.n	8013cc8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013c86:	6839      	ldr	r1, [r7, #0]
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f000 fc7a 	bl	8014582 <USBD_CtlError>
              break;
 8013c8e:	e01b      	b.n	8013cc8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	885b      	ldrh	r3, [r3, #2]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d10e      	bne.n	8013cb6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013c98:	7bbb      	ldrb	r3, [r7, #14]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d00b      	beq.n	8013cb6 <USBD_StdEPReq+0xfe>
 8013c9e:	7bbb      	ldrb	r3, [r7, #14]
 8013ca0:	2b80      	cmp	r3, #128	; 0x80
 8013ca2:	d008      	beq.n	8013cb6 <USBD_StdEPReq+0xfe>
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	88db      	ldrh	r3, [r3, #6]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d104      	bne.n	8013cb6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013cac:	7bbb      	ldrb	r3, [r7, #14]
 8013cae:	4619      	mov	r1, r3
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	f004 f92f 	bl	8017f14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f000 fd2e 	bl	8014718 <USBD_CtlSendStatus>

              break;
 8013cbc:	e004      	b.n	8013cc8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013cbe:	6839      	ldr	r1, [r7, #0]
 8013cc0:	6878      	ldr	r0, [r7, #4]
 8013cc2:	f000 fc5e 	bl	8014582 <USBD_CtlError>
              break;
 8013cc6:	bf00      	nop
          }
          break;
 8013cc8:	e107      	b.n	8013eda <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013cd0:	b2db      	uxtb	r3, r3
 8013cd2:	2b02      	cmp	r3, #2
 8013cd4:	d002      	beq.n	8013cdc <USBD_StdEPReq+0x124>
 8013cd6:	2b03      	cmp	r3, #3
 8013cd8:	d016      	beq.n	8013d08 <USBD_StdEPReq+0x150>
 8013cda:	e04b      	b.n	8013d74 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013cdc:	7bbb      	ldrb	r3, [r7, #14]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d00d      	beq.n	8013cfe <USBD_StdEPReq+0x146>
 8013ce2:	7bbb      	ldrb	r3, [r7, #14]
 8013ce4:	2b80      	cmp	r3, #128	; 0x80
 8013ce6:	d00a      	beq.n	8013cfe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013ce8:	7bbb      	ldrb	r3, [r7, #14]
 8013cea:	4619      	mov	r1, r3
 8013cec:	6878      	ldr	r0, [r7, #4]
 8013cee:	f004 f911 	bl	8017f14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013cf2:	2180      	movs	r1, #128	; 0x80
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f004 f90d 	bl	8017f14 <USBD_LL_StallEP>
 8013cfa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013cfc:	e040      	b.n	8013d80 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013cfe:	6839      	ldr	r1, [r7, #0]
 8013d00:	6878      	ldr	r0, [r7, #4]
 8013d02:	f000 fc3e 	bl	8014582 <USBD_CtlError>
              break;
 8013d06:	e03b      	b.n	8013d80 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013d08:	683b      	ldr	r3, [r7, #0]
 8013d0a:	885b      	ldrh	r3, [r3, #2]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d136      	bne.n	8013d7e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013d10:	7bbb      	ldrb	r3, [r7, #14]
 8013d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d004      	beq.n	8013d24 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013d1a:	7bbb      	ldrb	r3, [r7, #14]
 8013d1c:	4619      	mov	r1, r3
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f004 f917 	bl	8017f52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013d24:	6878      	ldr	r0, [r7, #4]
 8013d26:	f000 fcf7 	bl	8014718 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013d2a:	7bbb      	ldrb	r3, [r7, #14]
 8013d2c:	4619      	mov	r1, r3
 8013d2e:	6878      	ldr	r0, [r7, #4]
 8013d30:	f7ff fde2 	bl	80138f8 <USBD_CoreFindEP>
 8013d34:	4603      	mov	r3, r0
 8013d36:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013d38:	7b7b      	ldrb	r3, [r7, #13]
 8013d3a:	2bff      	cmp	r3, #255	; 0xff
 8013d3c:	d01f      	beq.n	8013d7e <USBD_StdEPReq+0x1c6>
 8013d3e:	7b7b      	ldrb	r3, [r7, #13]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d11c      	bne.n	8013d7e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013d44:	7b7a      	ldrb	r2, [r7, #13]
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013d4c:	7b7a      	ldrb	r2, [r7, #13]
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	32ae      	adds	r2, #174	; 0xae
 8013d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d56:	689b      	ldr	r3, [r3, #8]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d010      	beq.n	8013d7e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013d5c:	7b7a      	ldrb	r2, [r7, #13]
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	32ae      	adds	r2, #174	; 0xae
 8013d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d66:	689b      	ldr	r3, [r3, #8]
 8013d68:	6839      	ldr	r1, [r7, #0]
 8013d6a:	6878      	ldr	r0, [r7, #4]
 8013d6c:	4798      	blx	r3
 8013d6e:	4603      	mov	r3, r0
 8013d70:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8013d72:	e004      	b.n	8013d7e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013d74:	6839      	ldr	r1, [r7, #0]
 8013d76:	6878      	ldr	r0, [r7, #4]
 8013d78:	f000 fc03 	bl	8014582 <USBD_CtlError>
              break;
 8013d7c:	e000      	b.n	8013d80 <USBD_StdEPReq+0x1c8>
              break;
 8013d7e:	bf00      	nop
          }
          break;
 8013d80:	e0ab      	b.n	8013eda <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d88:	b2db      	uxtb	r3, r3
 8013d8a:	2b02      	cmp	r3, #2
 8013d8c:	d002      	beq.n	8013d94 <USBD_StdEPReq+0x1dc>
 8013d8e:	2b03      	cmp	r3, #3
 8013d90:	d032      	beq.n	8013df8 <USBD_StdEPReq+0x240>
 8013d92:	e097      	b.n	8013ec4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013d94:	7bbb      	ldrb	r3, [r7, #14]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d007      	beq.n	8013daa <USBD_StdEPReq+0x1f2>
 8013d9a:	7bbb      	ldrb	r3, [r7, #14]
 8013d9c:	2b80      	cmp	r3, #128	; 0x80
 8013d9e:	d004      	beq.n	8013daa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013da0:	6839      	ldr	r1, [r7, #0]
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f000 fbed 	bl	8014582 <USBD_CtlError>
                break;
 8013da8:	e091      	b.n	8013ece <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013daa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	da0b      	bge.n	8013dca <USBD_StdEPReq+0x212>
 8013db2:	7bbb      	ldrb	r3, [r7, #14]
 8013db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013db8:	4613      	mov	r3, r2
 8013dba:	009b      	lsls	r3, r3, #2
 8013dbc:	4413      	add	r3, r2
 8013dbe:	009b      	lsls	r3, r3, #2
 8013dc0:	3310      	adds	r3, #16
 8013dc2:	687a      	ldr	r2, [r7, #4]
 8013dc4:	4413      	add	r3, r2
 8013dc6:	3304      	adds	r3, #4
 8013dc8:	e00b      	b.n	8013de2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013dca:	7bbb      	ldrb	r3, [r7, #14]
 8013dcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013dd0:	4613      	mov	r3, r2
 8013dd2:	009b      	lsls	r3, r3, #2
 8013dd4:	4413      	add	r3, r2
 8013dd6:	009b      	lsls	r3, r3, #2
 8013dd8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013ddc:	687a      	ldr	r2, [r7, #4]
 8013dde:	4413      	add	r3, r2
 8013de0:	3304      	adds	r3, #4
 8013de2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	2200      	movs	r2, #0
 8013de8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013dea:	68bb      	ldr	r3, [r7, #8]
 8013dec:	2202      	movs	r2, #2
 8013dee:	4619      	mov	r1, r3
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	f000 fc37 	bl	8014664 <USBD_CtlSendData>
              break;
 8013df6:	e06a      	b.n	8013ece <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013df8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	da11      	bge.n	8013e24 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013e00:	7bbb      	ldrb	r3, [r7, #14]
 8013e02:	f003 020f 	and.w	r2, r3, #15
 8013e06:	6879      	ldr	r1, [r7, #4]
 8013e08:	4613      	mov	r3, r2
 8013e0a:	009b      	lsls	r3, r3, #2
 8013e0c:	4413      	add	r3, r2
 8013e0e:	009b      	lsls	r3, r3, #2
 8013e10:	440b      	add	r3, r1
 8013e12:	3324      	adds	r3, #36	; 0x24
 8013e14:	881b      	ldrh	r3, [r3, #0]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d117      	bne.n	8013e4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013e1a:	6839      	ldr	r1, [r7, #0]
 8013e1c:	6878      	ldr	r0, [r7, #4]
 8013e1e:	f000 fbb0 	bl	8014582 <USBD_CtlError>
                  break;
 8013e22:	e054      	b.n	8013ece <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013e24:	7bbb      	ldrb	r3, [r7, #14]
 8013e26:	f003 020f 	and.w	r2, r3, #15
 8013e2a:	6879      	ldr	r1, [r7, #4]
 8013e2c:	4613      	mov	r3, r2
 8013e2e:	009b      	lsls	r3, r3, #2
 8013e30:	4413      	add	r3, r2
 8013e32:	009b      	lsls	r3, r3, #2
 8013e34:	440b      	add	r3, r1
 8013e36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013e3a:	881b      	ldrh	r3, [r3, #0]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d104      	bne.n	8013e4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013e40:	6839      	ldr	r1, [r7, #0]
 8013e42:	6878      	ldr	r0, [r7, #4]
 8013e44:	f000 fb9d 	bl	8014582 <USBD_CtlError>
                  break;
 8013e48:	e041      	b.n	8013ece <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013e4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	da0b      	bge.n	8013e6a <USBD_StdEPReq+0x2b2>
 8013e52:	7bbb      	ldrb	r3, [r7, #14]
 8013e54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013e58:	4613      	mov	r3, r2
 8013e5a:	009b      	lsls	r3, r3, #2
 8013e5c:	4413      	add	r3, r2
 8013e5e:	009b      	lsls	r3, r3, #2
 8013e60:	3310      	adds	r3, #16
 8013e62:	687a      	ldr	r2, [r7, #4]
 8013e64:	4413      	add	r3, r2
 8013e66:	3304      	adds	r3, #4
 8013e68:	e00b      	b.n	8013e82 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013e6a:	7bbb      	ldrb	r3, [r7, #14]
 8013e6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013e70:	4613      	mov	r3, r2
 8013e72:	009b      	lsls	r3, r3, #2
 8013e74:	4413      	add	r3, r2
 8013e76:	009b      	lsls	r3, r3, #2
 8013e78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013e7c:	687a      	ldr	r2, [r7, #4]
 8013e7e:	4413      	add	r3, r2
 8013e80:	3304      	adds	r3, #4
 8013e82:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013e84:	7bbb      	ldrb	r3, [r7, #14]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d002      	beq.n	8013e90 <USBD_StdEPReq+0x2d8>
 8013e8a:	7bbb      	ldrb	r3, [r7, #14]
 8013e8c:	2b80      	cmp	r3, #128	; 0x80
 8013e8e:	d103      	bne.n	8013e98 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	2200      	movs	r2, #0
 8013e94:	601a      	str	r2, [r3, #0]
 8013e96:	e00e      	b.n	8013eb6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013e98:	7bbb      	ldrb	r3, [r7, #14]
 8013e9a:	4619      	mov	r1, r3
 8013e9c:	6878      	ldr	r0, [r7, #4]
 8013e9e:	f004 f877 	bl	8017f90 <USBD_LL_IsStallEP>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d003      	beq.n	8013eb0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	2201      	movs	r2, #1
 8013eac:	601a      	str	r2, [r3, #0]
 8013eae:	e002      	b.n	8013eb6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	2202      	movs	r2, #2
 8013eba:	4619      	mov	r1, r3
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f000 fbd1 	bl	8014664 <USBD_CtlSendData>
              break;
 8013ec2:	e004      	b.n	8013ece <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013ec4:	6839      	ldr	r1, [r7, #0]
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f000 fb5b 	bl	8014582 <USBD_CtlError>
              break;
 8013ecc:	bf00      	nop
          }
          break;
 8013ece:	e004      	b.n	8013eda <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013ed0:	6839      	ldr	r1, [r7, #0]
 8013ed2:	6878      	ldr	r0, [r7, #4]
 8013ed4:	f000 fb55 	bl	8014582 <USBD_CtlError>
          break;
 8013ed8:	bf00      	nop
      }
      break;
 8013eda:	e005      	b.n	8013ee8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013edc:	6839      	ldr	r1, [r7, #0]
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f000 fb4f 	bl	8014582 <USBD_CtlError>
      break;
 8013ee4:	e000      	b.n	8013ee8 <USBD_StdEPReq+0x330>
      break;
 8013ee6:	bf00      	nop
  }

  return ret;
 8013ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	3710      	adds	r7, #16
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	bd80      	pop	{r7, pc}
	...

08013ef4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b084      	sub	sp, #16
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
 8013efc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013efe:	2300      	movs	r3, #0
 8013f00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013f02:	2300      	movs	r3, #0
 8013f04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013f06:	2300      	movs	r3, #0
 8013f08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	885b      	ldrh	r3, [r3, #2]
 8013f0e:	0a1b      	lsrs	r3, r3, #8
 8013f10:	b29b      	uxth	r3, r3
 8013f12:	3b01      	subs	r3, #1
 8013f14:	2b06      	cmp	r3, #6
 8013f16:	f200 8128 	bhi.w	801416a <USBD_GetDescriptor+0x276>
 8013f1a:	a201      	add	r2, pc, #4	; (adr r2, 8013f20 <USBD_GetDescriptor+0x2c>)
 8013f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f20:	08013f3d 	.word	0x08013f3d
 8013f24:	08013f55 	.word	0x08013f55
 8013f28:	08013f95 	.word	0x08013f95
 8013f2c:	0801416b 	.word	0x0801416b
 8013f30:	0801416b 	.word	0x0801416b
 8013f34:	0801410b 	.word	0x0801410b
 8013f38:	08014137 	.word	0x08014137
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	687a      	ldr	r2, [r7, #4]
 8013f46:	7c12      	ldrb	r2, [r2, #16]
 8013f48:	f107 0108 	add.w	r1, r7, #8
 8013f4c:	4610      	mov	r0, r2
 8013f4e:	4798      	blx	r3
 8013f50:	60f8      	str	r0, [r7, #12]
      break;
 8013f52:	e112      	b.n	801417a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	7c1b      	ldrb	r3, [r3, #16]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d10d      	bne.n	8013f78 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f64:	f107 0208 	add.w	r2, r7, #8
 8013f68:	4610      	mov	r0, r2
 8013f6a:	4798      	blx	r3
 8013f6c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	3301      	adds	r3, #1
 8013f72:	2202      	movs	r2, #2
 8013f74:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013f76:	e100      	b.n	801417a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f80:	f107 0208 	add.w	r2, r7, #8
 8013f84:	4610      	mov	r0, r2
 8013f86:	4798      	blx	r3
 8013f88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	3301      	adds	r3, #1
 8013f8e:	2202      	movs	r2, #2
 8013f90:	701a      	strb	r2, [r3, #0]
      break;
 8013f92:	e0f2      	b.n	801417a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	885b      	ldrh	r3, [r3, #2]
 8013f98:	b2db      	uxtb	r3, r3
 8013f9a:	2b05      	cmp	r3, #5
 8013f9c:	f200 80ac 	bhi.w	80140f8 <USBD_GetDescriptor+0x204>
 8013fa0:	a201      	add	r2, pc, #4	; (adr r2, 8013fa8 <USBD_GetDescriptor+0xb4>)
 8013fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fa6:	bf00      	nop
 8013fa8:	08013fc1 	.word	0x08013fc1
 8013fac:	08013ff5 	.word	0x08013ff5
 8013fb0:	08014029 	.word	0x08014029
 8013fb4:	0801405d 	.word	0x0801405d
 8013fb8:	08014091 	.word	0x08014091
 8013fbc:	080140c5 	.word	0x080140c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013fc6:	685b      	ldr	r3, [r3, #4]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d00b      	beq.n	8013fe4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013fd2:	685b      	ldr	r3, [r3, #4]
 8013fd4:	687a      	ldr	r2, [r7, #4]
 8013fd6:	7c12      	ldrb	r2, [r2, #16]
 8013fd8:	f107 0108 	add.w	r1, r7, #8
 8013fdc:	4610      	mov	r0, r2
 8013fde:	4798      	blx	r3
 8013fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013fe2:	e091      	b.n	8014108 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013fe4:	6839      	ldr	r1, [r7, #0]
 8013fe6:	6878      	ldr	r0, [r7, #4]
 8013fe8:	f000 facb 	bl	8014582 <USBD_CtlError>
            err++;
 8013fec:	7afb      	ldrb	r3, [r7, #11]
 8013fee:	3301      	adds	r3, #1
 8013ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8013ff2:	e089      	b.n	8014108 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ffa:	689b      	ldr	r3, [r3, #8]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d00b      	beq.n	8014018 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014006:	689b      	ldr	r3, [r3, #8]
 8014008:	687a      	ldr	r2, [r7, #4]
 801400a:	7c12      	ldrb	r2, [r2, #16]
 801400c:	f107 0108 	add.w	r1, r7, #8
 8014010:	4610      	mov	r0, r2
 8014012:	4798      	blx	r3
 8014014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014016:	e077      	b.n	8014108 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014018:	6839      	ldr	r1, [r7, #0]
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f000 fab1 	bl	8014582 <USBD_CtlError>
            err++;
 8014020:	7afb      	ldrb	r3, [r7, #11]
 8014022:	3301      	adds	r3, #1
 8014024:	72fb      	strb	r3, [r7, #11]
          break;
 8014026:	e06f      	b.n	8014108 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801402e:	68db      	ldr	r3, [r3, #12]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d00b      	beq.n	801404c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801403a:	68db      	ldr	r3, [r3, #12]
 801403c:	687a      	ldr	r2, [r7, #4]
 801403e:	7c12      	ldrb	r2, [r2, #16]
 8014040:	f107 0108 	add.w	r1, r7, #8
 8014044:	4610      	mov	r0, r2
 8014046:	4798      	blx	r3
 8014048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801404a:	e05d      	b.n	8014108 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801404c:	6839      	ldr	r1, [r7, #0]
 801404e:	6878      	ldr	r0, [r7, #4]
 8014050:	f000 fa97 	bl	8014582 <USBD_CtlError>
            err++;
 8014054:	7afb      	ldrb	r3, [r7, #11]
 8014056:	3301      	adds	r3, #1
 8014058:	72fb      	strb	r3, [r7, #11]
          break;
 801405a:	e055      	b.n	8014108 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014062:	691b      	ldr	r3, [r3, #16]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d00b      	beq.n	8014080 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801406e:	691b      	ldr	r3, [r3, #16]
 8014070:	687a      	ldr	r2, [r7, #4]
 8014072:	7c12      	ldrb	r2, [r2, #16]
 8014074:	f107 0108 	add.w	r1, r7, #8
 8014078:	4610      	mov	r0, r2
 801407a:	4798      	blx	r3
 801407c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801407e:	e043      	b.n	8014108 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014080:	6839      	ldr	r1, [r7, #0]
 8014082:	6878      	ldr	r0, [r7, #4]
 8014084:	f000 fa7d 	bl	8014582 <USBD_CtlError>
            err++;
 8014088:	7afb      	ldrb	r3, [r7, #11]
 801408a:	3301      	adds	r3, #1
 801408c:	72fb      	strb	r3, [r7, #11]
          break;
 801408e:	e03b      	b.n	8014108 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014096:	695b      	ldr	r3, [r3, #20]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d00b      	beq.n	80140b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80140a2:	695b      	ldr	r3, [r3, #20]
 80140a4:	687a      	ldr	r2, [r7, #4]
 80140a6:	7c12      	ldrb	r2, [r2, #16]
 80140a8:	f107 0108 	add.w	r1, r7, #8
 80140ac:	4610      	mov	r0, r2
 80140ae:	4798      	blx	r3
 80140b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80140b2:	e029      	b.n	8014108 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80140b4:	6839      	ldr	r1, [r7, #0]
 80140b6:	6878      	ldr	r0, [r7, #4]
 80140b8:	f000 fa63 	bl	8014582 <USBD_CtlError>
            err++;
 80140bc:	7afb      	ldrb	r3, [r7, #11]
 80140be:	3301      	adds	r3, #1
 80140c0:	72fb      	strb	r3, [r7, #11]
          break;
 80140c2:	e021      	b.n	8014108 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80140ca:	699b      	ldr	r3, [r3, #24]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d00b      	beq.n	80140e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80140d6:	699b      	ldr	r3, [r3, #24]
 80140d8:	687a      	ldr	r2, [r7, #4]
 80140da:	7c12      	ldrb	r2, [r2, #16]
 80140dc:	f107 0108 	add.w	r1, r7, #8
 80140e0:	4610      	mov	r0, r2
 80140e2:	4798      	blx	r3
 80140e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80140e6:	e00f      	b.n	8014108 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80140e8:	6839      	ldr	r1, [r7, #0]
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f000 fa49 	bl	8014582 <USBD_CtlError>
            err++;
 80140f0:	7afb      	ldrb	r3, [r7, #11]
 80140f2:	3301      	adds	r3, #1
 80140f4:	72fb      	strb	r3, [r7, #11]
          break;
 80140f6:	e007      	b.n	8014108 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80140f8:	6839      	ldr	r1, [r7, #0]
 80140fa:	6878      	ldr	r0, [r7, #4]
 80140fc:	f000 fa41 	bl	8014582 <USBD_CtlError>
          err++;
 8014100:	7afb      	ldrb	r3, [r7, #11]
 8014102:	3301      	adds	r3, #1
 8014104:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014106:	bf00      	nop
      }
      break;
 8014108:	e037      	b.n	801417a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	7c1b      	ldrb	r3, [r3, #16]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d109      	bne.n	8014126 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801411a:	f107 0208 	add.w	r2, r7, #8
 801411e:	4610      	mov	r0, r2
 8014120:	4798      	blx	r3
 8014122:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014124:	e029      	b.n	801417a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014126:	6839      	ldr	r1, [r7, #0]
 8014128:	6878      	ldr	r0, [r7, #4]
 801412a:	f000 fa2a 	bl	8014582 <USBD_CtlError>
        err++;
 801412e:	7afb      	ldrb	r3, [r7, #11]
 8014130:	3301      	adds	r3, #1
 8014132:	72fb      	strb	r3, [r7, #11]
      break;
 8014134:	e021      	b.n	801417a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	7c1b      	ldrb	r3, [r3, #16]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d10d      	bne.n	801415a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014146:	f107 0208 	add.w	r2, r7, #8
 801414a:	4610      	mov	r0, r2
 801414c:	4798      	blx	r3
 801414e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	3301      	adds	r3, #1
 8014154:	2207      	movs	r2, #7
 8014156:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014158:	e00f      	b.n	801417a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801415a:	6839      	ldr	r1, [r7, #0]
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f000 fa10 	bl	8014582 <USBD_CtlError>
        err++;
 8014162:	7afb      	ldrb	r3, [r7, #11]
 8014164:	3301      	adds	r3, #1
 8014166:	72fb      	strb	r3, [r7, #11]
      break;
 8014168:	e007      	b.n	801417a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801416a:	6839      	ldr	r1, [r7, #0]
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	f000 fa08 	bl	8014582 <USBD_CtlError>
      err++;
 8014172:	7afb      	ldrb	r3, [r7, #11]
 8014174:	3301      	adds	r3, #1
 8014176:	72fb      	strb	r3, [r7, #11]
      break;
 8014178:	bf00      	nop
  }

  if (err != 0U)
 801417a:	7afb      	ldrb	r3, [r7, #11]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d11e      	bne.n	80141be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	88db      	ldrh	r3, [r3, #6]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d016      	beq.n	80141b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8014188:	893b      	ldrh	r3, [r7, #8]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d00e      	beq.n	80141ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801418e:	683b      	ldr	r3, [r7, #0]
 8014190:	88da      	ldrh	r2, [r3, #6]
 8014192:	893b      	ldrh	r3, [r7, #8]
 8014194:	4293      	cmp	r3, r2
 8014196:	bf28      	it	cs
 8014198:	4613      	movcs	r3, r2
 801419a:	b29b      	uxth	r3, r3
 801419c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801419e:	893b      	ldrh	r3, [r7, #8]
 80141a0:	461a      	mov	r2, r3
 80141a2:	68f9      	ldr	r1, [r7, #12]
 80141a4:	6878      	ldr	r0, [r7, #4]
 80141a6:	f000 fa5d 	bl	8014664 <USBD_CtlSendData>
 80141aa:	e009      	b.n	80141c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80141ac:	6839      	ldr	r1, [r7, #0]
 80141ae:	6878      	ldr	r0, [r7, #4]
 80141b0:	f000 f9e7 	bl	8014582 <USBD_CtlError>
 80141b4:	e004      	b.n	80141c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80141b6:	6878      	ldr	r0, [r7, #4]
 80141b8:	f000 faae 	bl	8014718 <USBD_CtlSendStatus>
 80141bc:	e000      	b.n	80141c0 <USBD_GetDescriptor+0x2cc>
    return;
 80141be:	bf00      	nop
  }
}
 80141c0:	3710      	adds	r7, #16
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd80      	pop	{r7, pc}
 80141c6:	bf00      	nop

080141c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b084      	sub	sp, #16
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
 80141d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	889b      	ldrh	r3, [r3, #4]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d131      	bne.n	801423e <USBD_SetAddress+0x76>
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	88db      	ldrh	r3, [r3, #6]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d12d      	bne.n	801423e <USBD_SetAddress+0x76>
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	885b      	ldrh	r3, [r3, #2]
 80141e6:	2b7f      	cmp	r3, #127	; 0x7f
 80141e8:	d829      	bhi.n	801423e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	885b      	ldrh	r3, [r3, #2]
 80141ee:	b2db      	uxtb	r3, r3
 80141f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80141f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141fc:	b2db      	uxtb	r3, r3
 80141fe:	2b03      	cmp	r3, #3
 8014200:	d104      	bne.n	801420c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014202:	6839      	ldr	r1, [r7, #0]
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f000 f9bc 	bl	8014582 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801420a:	e01d      	b.n	8014248 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	7bfa      	ldrb	r2, [r7, #15]
 8014210:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014214:	7bfb      	ldrb	r3, [r7, #15]
 8014216:	4619      	mov	r1, r3
 8014218:	6878      	ldr	r0, [r7, #4]
 801421a:	f003 fee5 	bl	8017fe8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f000 fa7a 	bl	8014718 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014224:	7bfb      	ldrb	r3, [r7, #15]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d004      	beq.n	8014234 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	2202      	movs	r2, #2
 801422e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014232:	e009      	b.n	8014248 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2201      	movs	r2, #1
 8014238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801423c:	e004      	b.n	8014248 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801423e:	6839      	ldr	r1, [r7, #0]
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	f000 f99e 	bl	8014582 <USBD_CtlError>
  }
}
 8014246:	bf00      	nop
 8014248:	bf00      	nop
 801424a:	3710      	adds	r7, #16
 801424c:	46bd      	mov	sp, r7
 801424e:	bd80      	pop	{r7, pc}

08014250 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b084      	sub	sp, #16
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
 8014258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801425a:	2300      	movs	r3, #0
 801425c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801425e:	683b      	ldr	r3, [r7, #0]
 8014260:	885b      	ldrh	r3, [r3, #2]
 8014262:	b2da      	uxtb	r2, r3
 8014264:	4b4e      	ldr	r3, [pc, #312]	; (80143a0 <USBD_SetConfig+0x150>)
 8014266:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014268:	4b4d      	ldr	r3, [pc, #308]	; (80143a0 <USBD_SetConfig+0x150>)
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	2b01      	cmp	r3, #1
 801426e:	d905      	bls.n	801427c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014270:	6839      	ldr	r1, [r7, #0]
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f000 f985 	bl	8014582 <USBD_CtlError>
    return USBD_FAIL;
 8014278:	2303      	movs	r3, #3
 801427a:	e08c      	b.n	8014396 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014282:	b2db      	uxtb	r3, r3
 8014284:	2b02      	cmp	r3, #2
 8014286:	d002      	beq.n	801428e <USBD_SetConfig+0x3e>
 8014288:	2b03      	cmp	r3, #3
 801428a:	d029      	beq.n	80142e0 <USBD_SetConfig+0x90>
 801428c:	e075      	b.n	801437a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801428e:	4b44      	ldr	r3, [pc, #272]	; (80143a0 <USBD_SetConfig+0x150>)
 8014290:	781b      	ldrb	r3, [r3, #0]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d020      	beq.n	80142d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014296:	4b42      	ldr	r3, [pc, #264]	; (80143a0 <USBD_SetConfig+0x150>)
 8014298:	781b      	ldrb	r3, [r3, #0]
 801429a:	461a      	mov	r2, r3
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80142a0:	4b3f      	ldr	r3, [pc, #252]	; (80143a0 <USBD_SetConfig+0x150>)
 80142a2:	781b      	ldrb	r3, [r3, #0]
 80142a4:	4619      	mov	r1, r3
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f7fe ffe1 	bl	801326e <USBD_SetClassConfig>
 80142ac:	4603      	mov	r3, r0
 80142ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80142b0:	7bfb      	ldrb	r3, [r7, #15]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d008      	beq.n	80142c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80142b6:	6839      	ldr	r1, [r7, #0]
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f000 f962 	bl	8014582 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	2202      	movs	r2, #2
 80142c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80142c6:	e065      	b.n	8014394 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f000 fa25 	bl	8014718 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	2203      	movs	r2, #3
 80142d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80142d6:	e05d      	b.n	8014394 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f000 fa1d 	bl	8014718 <USBD_CtlSendStatus>
      break;
 80142de:	e059      	b.n	8014394 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80142e0:	4b2f      	ldr	r3, [pc, #188]	; (80143a0 <USBD_SetConfig+0x150>)
 80142e2:	781b      	ldrb	r3, [r3, #0]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d112      	bne.n	801430e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	2202      	movs	r2, #2
 80142ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80142f0:	4b2b      	ldr	r3, [pc, #172]	; (80143a0 <USBD_SetConfig+0x150>)
 80142f2:	781b      	ldrb	r3, [r3, #0]
 80142f4:	461a      	mov	r2, r3
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80142fa:	4b29      	ldr	r3, [pc, #164]	; (80143a0 <USBD_SetConfig+0x150>)
 80142fc:	781b      	ldrb	r3, [r3, #0]
 80142fe:	4619      	mov	r1, r3
 8014300:	6878      	ldr	r0, [r7, #4]
 8014302:	f7fe ffd0 	bl	80132a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014306:	6878      	ldr	r0, [r7, #4]
 8014308:	f000 fa06 	bl	8014718 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801430c:	e042      	b.n	8014394 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801430e:	4b24      	ldr	r3, [pc, #144]	; (80143a0 <USBD_SetConfig+0x150>)
 8014310:	781b      	ldrb	r3, [r3, #0]
 8014312:	461a      	mov	r2, r3
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	685b      	ldr	r3, [r3, #4]
 8014318:	429a      	cmp	r2, r3
 801431a:	d02a      	beq.n	8014372 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	685b      	ldr	r3, [r3, #4]
 8014320:	b2db      	uxtb	r3, r3
 8014322:	4619      	mov	r1, r3
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	f7fe ffbe 	bl	80132a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801432a:	4b1d      	ldr	r3, [pc, #116]	; (80143a0 <USBD_SetConfig+0x150>)
 801432c:	781b      	ldrb	r3, [r3, #0]
 801432e:	461a      	mov	r2, r3
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014334:	4b1a      	ldr	r3, [pc, #104]	; (80143a0 <USBD_SetConfig+0x150>)
 8014336:	781b      	ldrb	r3, [r3, #0]
 8014338:	4619      	mov	r1, r3
 801433a:	6878      	ldr	r0, [r7, #4]
 801433c:	f7fe ff97 	bl	801326e <USBD_SetClassConfig>
 8014340:	4603      	mov	r3, r0
 8014342:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014344:	7bfb      	ldrb	r3, [r7, #15]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d00f      	beq.n	801436a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801434a:	6839      	ldr	r1, [r7, #0]
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	f000 f918 	bl	8014582 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	685b      	ldr	r3, [r3, #4]
 8014356:	b2db      	uxtb	r3, r3
 8014358:	4619      	mov	r1, r3
 801435a:	6878      	ldr	r0, [r7, #4]
 801435c:	f7fe ffa3 	bl	80132a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2202      	movs	r2, #2
 8014364:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014368:	e014      	b.n	8014394 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f000 f9d4 	bl	8014718 <USBD_CtlSendStatus>
      break;
 8014370:	e010      	b.n	8014394 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014372:	6878      	ldr	r0, [r7, #4]
 8014374:	f000 f9d0 	bl	8014718 <USBD_CtlSendStatus>
      break;
 8014378:	e00c      	b.n	8014394 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801437a:	6839      	ldr	r1, [r7, #0]
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	f000 f900 	bl	8014582 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014382:	4b07      	ldr	r3, [pc, #28]	; (80143a0 <USBD_SetConfig+0x150>)
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	4619      	mov	r1, r3
 8014388:	6878      	ldr	r0, [r7, #4]
 801438a:	f7fe ff8c 	bl	80132a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801438e:	2303      	movs	r3, #3
 8014390:	73fb      	strb	r3, [r7, #15]
      break;
 8014392:	bf00      	nop
  }

  return ret;
 8014394:	7bfb      	ldrb	r3, [r7, #15]
}
 8014396:	4618      	mov	r0, r3
 8014398:	3710      	adds	r7, #16
 801439a:	46bd      	mov	sp, r7
 801439c:	bd80      	pop	{r7, pc}
 801439e:	bf00      	nop
 80143a0:	24000d28 	.word	0x24000d28

080143a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b082      	sub	sp, #8
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
 80143ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	88db      	ldrh	r3, [r3, #6]
 80143b2:	2b01      	cmp	r3, #1
 80143b4:	d004      	beq.n	80143c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80143b6:	6839      	ldr	r1, [r7, #0]
 80143b8:	6878      	ldr	r0, [r7, #4]
 80143ba:	f000 f8e2 	bl	8014582 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80143be:	e023      	b.n	8014408 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143c6:	b2db      	uxtb	r3, r3
 80143c8:	2b02      	cmp	r3, #2
 80143ca:	dc02      	bgt.n	80143d2 <USBD_GetConfig+0x2e>
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	dc03      	bgt.n	80143d8 <USBD_GetConfig+0x34>
 80143d0:	e015      	b.n	80143fe <USBD_GetConfig+0x5a>
 80143d2:	2b03      	cmp	r3, #3
 80143d4:	d00b      	beq.n	80143ee <USBD_GetConfig+0x4a>
 80143d6:	e012      	b.n	80143fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2200      	movs	r2, #0
 80143dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	3308      	adds	r3, #8
 80143e2:	2201      	movs	r2, #1
 80143e4:	4619      	mov	r1, r3
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f000 f93c 	bl	8014664 <USBD_CtlSendData>
        break;
 80143ec:	e00c      	b.n	8014408 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	3304      	adds	r3, #4
 80143f2:	2201      	movs	r2, #1
 80143f4:	4619      	mov	r1, r3
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	f000 f934 	bl	8014664 <USBD_CtlSendData>
        break;
 80143fc:	e004      	b.n	8014408 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80143fe:	6839      	ldr	r1, [r7, #0]
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	f000 f8be 	bl	8014582 <USBD_CtlError>
        break;
 8014406:	bf00      	nop
}
 8014408:	bf00      	nop
 801440a:	3708      	adds	r7, #8
 801440c:	46bd      	mov	sp, r7
 801440e:	bd80      	pop	{r7, pc}

08014410 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b082      	sub	sp, #8
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
 8014418:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014420:	b2db      	uxtb	r3, r3
 8014422:	3b01      	subs	r3, #1
 8014424:	2b02      	cmp	r3, #2
 8014426:	d81e      	bhi.n	8014466 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014428:	683b      	ldr	r3, [r7, #0]
 801442a:	88db      	ldrh	r3, [r3, #6]
 801442c:	2b02      	cmp	r3, #2
 801442e:	d004      	beq.n	801443a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014430:	6839      	ldr	r1, [r7, #0]
 8014432:	6878      	ldr	r0, [r7, #4]
 8014434:	f000 f8a5 	bl	8014582 <USBD_CtlError>
        break;
 8014438:	e01a      	b.n	8014470 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	2201      	movs	r2, #1
 801443e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014446:	2b00      	cmp	r3, #0
 8014448:	d005      	beq.n	8014456 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	68db      	ldr	r3, [r3, #12]
 801444e:	f043 0202 	orr.w	r2, r3, #2
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	330c      	adds	r3, #12
 801445a:	2202      	movs	r2, #2
 801445c:	4619      	mov	r1, r3
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f000 f900 	bl	8014664 <USBD_CtlSendData>
      break;
 8014464:	e004      	b.n	8014470 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014466:	6839      	ldr	r1, [r7, #0]
 8014468:	6878      	ldr	r0, [r7, #4]
 801446a:	f000 f88a 	bl	8014582 <USBD_CtlError>
      break;
 801446e:	bf00      	nop
  }
}
 8014470:	bf00      	nop
 8014472:	3708      	adds	r7, #8
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}

08014478 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b082      	sub	sp, #8
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
 8014480:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014482:	683b      	ldr	r3, [r7, #0]
 8014484:	885b      	ldrh	r3, [r3, #2]
 8014486:	2b01      	cmp	r3, #1
 8014488:	d107      	bne.n	801449a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	2201      	movs	r2, #1
 801448e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f000 f940 	bl	8014718 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014498:	e013      	b.n	80144c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801449a:	683b      	ldr	r3, [r7, #0]
 801449c:	885b      	ldrh	r3, [r3, #2]
 801449e:	2b02      	cmp	r3, #2
 80144a0:	d10b      	bne.n	80144ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80144a2:	683b      	ldr	r3, [r7, #0]
 80144a4:	889b      	ldrh	r3, [r3, #4]
 80144a6:	0a1b      	lsrs	r3, r3, #8
 80144a8:	b29b      	uxth	r3, r3
 80144aa:	b2da      	uxtb	r2, r3
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80144b2:	6878      	ldr	r0, [r7, #4]
 80144b4:	f000 f930 	bl	8014718 <USBD_CtlSendStatus>
}
 80144b8:	e003      	b.n	80144c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80144ba:	6839      	ldr	r1, [r7, #0]
 80144bc:	6878      	ldr	r0, [r7, #4]
 80144be:	f000 f860 	bl	8014582 <USBD_CtlError>
}
 80144c2:	bf00      	nop
 80144c4:	3708      	adds	r7, #8
 80144c6:	46bd      	mov	sp, r7
 80144c8:	bd80      	pop	{r7, pc}

080144ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144ca:	b580      	push	{r7, lr}
 80144cc:	b082      	sub	sp, #8
 80144ce:	af00      	add	r7, sp, #0
 80144d0:	6078      	str	r0, [r7, #4]
 80144d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144da:	b2db      	uxtb	r3, r3
 80144dc:	3b01      	subs	r3, #1
 80144de:	2b02      	cmp	r3, #2
 80144e0:	d80b      	bhi.n	80144fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	885b      	ldrh	r3, [r3, #2]
 80144e6:	2b01      	cmp	r3, #1
 80144e8:	d10c      	bne.n	8014504 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	2200      	movs	r2, #0
 80144ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80144f2:	6878      	ldr	r0, [r7, #4]
 80144f4:	f000 f910 	bl	8014718 <USBD_CtlSendStatus>
      }
      break;
 80144f8:	e004      	b.n	8014504 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80144fa:	6839      	ldr	r1, [r7, #0]
 80144fc:	6878      	ldr	r0, [r7, #4]
 80144fe:	f000 f840 	bl	8014582 <USBD_CtlError>
      break;
 8014502:	e000      	b.n	8014506 <USBD_ClrFeature+0x3c>
      break;
 8014504:	bf00      	nop
  }
}
 8014506:	bf00      	nop
 8014508:	3708      	adds	r7, #8
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}

0801450e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801450e:	b580      	push	{r7, lr}
 8014510:	b084      	sub	sp, #16
 8014512:	af00      	add	r7, sp, #0
 8014514:	6078      	str	r0, [r7, #4]
 8014516:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014518:	683b      	ldr	r3, [r7, #0]
 801451a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	781a      	ldrb	r2, [r3, #0]
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	3301      	adds	r3, #1
 8014528:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	781a      	ldrb	r2, [r3, #0]
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	3301      	adds	r3, #1
 8014536:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014538:	68f8      	ldr	r0, [r7, #12]
 801453a:	f7ff fa41 	bl	80139c0 <SWAPBYTE>
 801453e:	4603      	mov	r3, r0
 8014540:	461a      	mov	r2, r3
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	3301      	adds	r3, #1
 801454a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	3301      	adds	r3, #1
 8014550:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014552:	68f8      	ldr	r0, [r7, #12]
 8014554:	f7ff fa34 	bl	80139c0 <SWAPBYTE>
 8014558:	4603      	mov	r3, r0
 801455a:	461a      	mov	r2, r3
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	3301      	adds	r3, #1
 8014564:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	3301      	adds	r3, #1
 801456a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801456c:	68f8      	ldr	r0, [r7, #12]
 801456e:	f7ff fa27 	bl	80139c0 <SWAPBYTE>
 8014572:	4603      	mov	r3, r0
 8014574:	461a      	mov	r2, r3
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	80da      	strh	r2, [r3, #6]
}
 801457a:	bf00      	nop
 801457c:	3710      	adds	r7, #16
 801457e:	46bd      	mov	sp, r7
 8014580:	bd80      	pop	{r7, pc}

08014582 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014582:	b580      	push	{r7, lr}
 8014584:	b082      	sub	sp, #8
 8014586:	af00      	add	r7, sp, #0
 8014588:	6078      	str	r0, [r7, #4]
 801458a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801458c:	2180      	movs	r1, #128	; 0x80
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f003 fcc0 	bl	8017f14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014594:	2100      	movs	r1, #0
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f003 fcbc 	bl	8017f14 <USBD_LL_StallEP>
}
 801459c:	bf00      	nop
 801459e:	3708      	adds	r7, #8
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}

080145a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b086      	sub	sp, #24
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	60f8      	str	r0, [r7, #12]
 80145ac:	60b9      	str	r1, [r7, #8]
 80145ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80145b0:	2300      	movs	r3, #0
 80145b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d036      	beq.n	8014628 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80145be:	6938      	ldr	r0, [r7, #16]
 80145c0:	f000 f836 	bl	8014630 <USBD_GetLen>
 80145c4:	4603      	mov	r3, r0
 80145c6:	3301      	adds	r3, #1
 80145c8:	b29b      	uxth	r3, r3
 80145ca:	005b      	lsls	r3, r3, #1
 80145cc:	b29a      	uxth	r2, r3
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80145d2:	7dfb      	ldrb	r3, [r7, #23]
 80145d4:	68ba      	ldr	r2, [r7, #8]
 80145d6:	4413      	add	r3, r2
 80145d8:	687a      	ldr	r2, [r7, #4]
 80145da:	7812      	ldrb	r2, [r2, #0]
 80145dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80145de:	7dfb      	ldrb	r3, [r7, #23]
 80145e0:	3301      	adds	r3, #1
 80145e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80145e4:	7dfb      	ldrb	r3, [r7, #23]
 80145e6:	68ba      	ldr	r2, [r7, #8]
 80145e8:	4413      	add	r3, r2
 80145ea:	2203      	movs	r2, #3
 80145ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80145ee:	7dfb      	ldrb	r3, [r7, #23]
 80145f0:	3301      	adds	r3, #1
 80145f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80145f4:	e013      	b.n	801461e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80145f6:	7dfb      	ldrb	r3, [r7, #23]
 80145f8:	68ba      	ldr	r2, [r7, #8]
 80145fa:	4413      	add	r3, r2
 80145fc:	693a      	ldr	r2, [r7, #16]
 80145fe:	7812      	ldrb	r2, [r2, #0]
 8014600:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014602:	693b      	ldr	r3, [r7, #16]
 8014604:	3301      	adds	r3, #1
 8014606:	613b      	str	r3, [r7, #16]
    idx++;
 8014608:	7dfb      	ldrb	r3, [r7, #23]
 801460a:	3301      	adds	r3, #1
 801460c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801460e:	7dfb      	ldrb	r3, [r7, #23]
 8014610:	68ba      	ldr	r2, [r7, #8]
 8014612:	4413      	add	r3, r2
 8014614:	2200      	movs	r2, #0
 8014616:	701a      	strb	r2, [r3, #0]
    idx++;
 8014618:	7dfb      	ldrb	r3, [r7, #23]
 801461a:	3301      	adds	r3, #1
 801461c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801461e:	693b      	ldr	r3, [r7, #16]
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d1e7      	bne.n	80145f6 <USBD_GetString+0x52>
 8014626:	e000      	b.n	801462a <USBD_GetString+0x86>
    return;
 8014628:	bf00      	nop
  }
}
 801462a:	3718      	adds	r7, #24
 801462c:	46bd      	mov	sp, r7
 801462e:	bd80      	pop	{r7, pc}

08014630 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014630:	b480      	push	{r7}
 8014632:	b085      	sub	sp, #20
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014638:	2300      	movs	r3, #0
 801463a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014640:	e005      	b.n	801464e <USBD_GetLen+0x1e>
  {
    len++;
 8014642:	7bfb      	ldrb	r3, [r7, #15]
 8014644:	3301      	adds	r3, #1
 8014646:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	3301      	adds	r3, #1
 801464c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	781b      	ldrb	r3, [r3, #0]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d1f5      	bne.n	8014642 <USBD_GetLen+0x12>
  }

  return len;
 8014656:	7bfb      	ldrb	r3, [r7, #15]
}
 8014658:	4618      	mov	r0, r3
 801465a:	3714      	adds	r7, #20
 801465c:	46bd      	mov	sp, r7
 801465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014662:	4770      	bx	lr

08014664 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b084      	sub	sp, #16
 8014668:	af00      	add	r7, sp, #0
 801466a:	60f8      	str	r0, [r7, #12]
 801466c:	60b9      	str	r1, [r7, #8]
 801466e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	2202      	movs	r2, #2
 8014674:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	687a      	ldr	r2, [r7, #4]
 801467c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	687a      	ldr	r2, [r7, #4]
 8014682:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	68ba      	ldr	r2, [r7, #8]
 8014688:	2100      	movs	r1, #0
 801468a:	68f8      	ldr	r0, [r7, #12]
 801468c:	f003 fccb 	bl	8018026 <USBD_LL_Transmit>

  return USBD_OK;
 8014690:	2300      	movs	r3, #0
}
 8014692:	4618      	mov	r0, r3
 8014694:	3710      	adds	r7, #16
 8014696:	46bd      	mov	sp, r7
 8014698:	bd80      	pop	{r7, pc}

0801469a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801469a:	b580      	push	{r7, lr}
 801469c:	b084      	sub	sp, #16
 801469e:	af00      	add	r7, sp, #0
 80146a0:	60f8      	str	r0, [r7, #12]
 80146a2:	60b9      	str	r1, [r7, #8]
 80146a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	68ba      	ldr	r2, [r7, #8]
 80146aa:	2100      	movs	r1, #0
 80146ac:	68f8      	ldr	r0, [r7, #12]
 80146ae:	f003 fcba 	bl	8018026 <USBD_LL_Transmit>

  return USBD_OK;
 80146b2:	2300      	movs	r3, #0
}
 80146b4:	4618      	mov	r0, r3
 80146b6:	3710      	adds	r7, #16
 80146b8:	46bd      	mov	sp, r7
 80146ba:	bd80      	pop	{r7, pc}

080146bc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b084      	sub	sp, #16
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	60f8      	str	r0, [r7, #12]
 80146c4:	60b9      	str	r1, [r7, #8]
 80146c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	2203      	movs	r2, #3
 80146cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	687a      	ldr	r2, [r7, #4]
 80146d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	687a      	ldr	r2, [r7, #4]
 80146dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	68ba      	ldr	r2, [r7, #8]
 80146e4:	2100      	movs	r1, #0
 80146e6:	68f8      	ldr	r0, [r7, #12]
 80146e8:	f003 fcbe 	bl	8018068 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80146ec:	2300      	movs	r3, #0
}
 80146ee:	4618      	mov	r0, r3
 80146f0:	3710      	adds	r7, #16
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}

080146f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80146f6:	b580      	push	{r7, lr}
 80146f8:	b084      	sub	sp, #16
 80146fa:	af00      	add	r7, sp, #0
 80146fc:	60f8      	str	r0, [r7, #12]
 80146fe:	60b9      	str	r1, [r7, #8]
 8014700:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	68ba      	ldr	r2, [r7, #8]
 8014706:	2100      	movs	r1, #0
 8014708:	68f8      	ldr	r0, [r7, #12]
 801470a:	f003 fcad 	bl	8018068 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801470e:	2300      	movs	r3, #0
}
 8014710:	4618      	mov	r0, r3
 8014712:	3710      	adds	r7, #16
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}

08014718 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b082      	sub	sp, #8
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	2204      	movs	r2, #4
 8014724:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014728:	2300      	movs	r3, #0
 801472a:	2200      	movs	r2, #0
 801472c:	2100      	movs	r1, #0
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f003 fc79 	bl	8018026 <USBD_LL_Transmit>

  return USBD_OK;
 8014734:	2300      	movs	r3, #0
}
 8014736:	4618      	mov	r0, r3
 8014738:	3708      	adds	r7, #8
 801473a:	46bd      	mov	sp, r7
 801473c:	bd80      	pop	{r7, pc}

0801473e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801473e:	b580      	push	{r7, lr}
 8014740:	b082      	sub	sp, #8
 8014742:	af00      	add	r7, sp, #0
 8014744:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	2205      	movs	r2, #5
 801474a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801474e:	2300      	movs	r3, #0
 8014750:	2200      	movs	r2, #0
 8014752:	2100      	movs	r1, #0
 8014754:	6878      	ldr	r0, [r7, #4]
 8014756:	f003 fc87 	bl	8018068 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801475a:	2300      	movs	r3, #0
}
 801475c:	4618      	mov	r0, r3
 801475e:	3708      	adds	r7, #8
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}

08014764 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b084      	sub	sp, #16
 8014768:	af00      	add	r7, sp, #0
 801476a:	4603      	mov	r3, r0
 801476c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801476e:	79fb      	ldrb	r3, [r7, #7]
 8014770:	4a08      	ldr	r2, [pc, #32]	; (8014794 <disk_status+0x30>)
 8014772:	009b      	lsls	r3, r3, #2
 8014774:	4413      	add	r3, r2
 8014776:	685b      	ldr	r3, [r3, #4]
 8014778:	685b      	ldr	r3, [r3, #4]
 801477a:	79fa      	ldrb	r2, [r7, #7]
 801477c:	4905      	ldr	r1, [pc, #20]	; (8014794 <disk_status+0x30>)
 801477e:	440a      	add	r2, r1
 8014780:	7a12      	ldrb	r2, [r2, #8]
 8014782:	4610      	mov	r0, r2
 8014784:	4798      	blx	r3
 8014786:	4603      	mov	r3, r0
 8014788:	73fb      	strb	r3, [r7, #15]
  return stat;
 801478a:	7bfb      	ldrb	r3, [r7, #15]
}
 801478c:	4618      	mov	r0, r3
 801478e:	3710      	adds	r7, #16
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}
 8014794:	24000f54 	.word	0x24000f54

08014798 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b084      	sub	sp, #16
 801479c:	af00      	add	r7, sp, #0
 801479e:	4603      	mov	r3, r0
 80147a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80147a2:	2300      	movs	r3, #0
 80147a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80147a6:	79fb      	ldrb	r3, [r7, #7]
 80147a8:	4a0d      	ldr	r2, [pc, #52]	; (80147e0 <disk_initialize+0x48>)
 80147aa:	5cd3      	ldrb	r3, [r2, r3]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d111      	bne.n	80147d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80147b0:	79fb      	ldrb	r3, [r7, #7]
 80147b2:	4a0b      	ldr	r2, [pc, #44]	; (80147e0 <disk_initialize+0x48>)
 80147b4:	2101      	movs	r1, #1
 80147b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80147b8:	79fb      	ldrb	r3, [r7, #7]
 80147ba:	4a09      	ldr	r2, [pc, #36]	; (80147e0 <disk_initialize+0x48>)
 80147bc:	009b      	lsls	r3, r3, #2
 80147be:	4413      	add	r3, r2
 80147c0:	685b      	ldr	r3, [r3, #4]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	79fa      	ldrb	r2, [r7, #7]
 80147c6:	4906      	ldr	r1, [pc, #24]	; (80147e0 <disk_initialize+0x48>)
 80147c8:	440a      	add	r2, r1
 80147ca:	7a12      	ldrb	r2, [r2, #8]
 80147cc:	4610      	mov	r0, r2
 80147ce:	4798      	blx	r3
 80147d0:	4603      	mov	r3, r0
 80147d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80147d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80147d6:	4618      	mov	r0, r3
 80147d8:	3710      	adds	r7, #16
 80147da:	46bd      	mov	sp, r7
 80147dc:	bd80      	pop	{r7, pc}
 80147de:	bf00      	nop
 80147e0:	24000f54 	.word	0x24000f54

080147e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80147e4:	b590      	push	{r4, r7, lr}
 80147e6:	b087      	sub	sp, #28
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	60b9      	str	r1, [r7, #8]
 80147ec:	607a      	str	r2, [r7, #4]
 80147ee:	603b      	str	r3, [r7, #0]
 80147f0:	4603      	mov	r3, r0
 80147f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80147f4:	7bfb      	ldrb	r3, [r7, #15]
 80147f6:	4a0a      	ldr	r2, [pc, #40]	; (8014820 <disk_read+0x3c>)
 80147f8:	009b      	lsls	r3, r3, #2
 80147fa:	4413      	add	r3, r2
 80147fc:	685b      	ldr	r3, [r3, #4]
 80147fe:	689c      	ldr	r4, [r3, #8]
 8014800:	7bfb      	ldrb	r3, [r7, #15]
 8014802:	4a07      	ldr	r2, [pc, #28]	; (8014820 <disk_read+0x3c>)
 8014804:	4413      	add	r3, r2
 8014806:	7a18      	ldrb	r0, [r3, #8]
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	687a      	ldr	r2, [r7, #4]
 801480c:	68b9      	ldr	r1, [r7, #8]
 801480e:	47a0      	blx	r4
 8014810:	4603      	mov	r3, r0
 8014812:	75fb      	strb	r3, [r7, #23]
  return res;
 8014814:	7dfb      	ldrb	r3, [r7, #23]
}
 8014816:	4618      	mov	r0, r3
 8014818:	371c      	adds	r7, #28
 801481a:	46bd      	mov	sp, r7
 801481c:	bd90      	pop	{r4, r7, pc}
 801481e:	bf00      	nop
 8014820:	24000f54 	.word	0x24000f54

08014824 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014824:	b590      	push	{r4, r7, lr}
 8014826:	b087      	sub	sp, #28
 8014828:	af00      	add	r7, sp, #0
 801482a:	60b9      	str	r1, [r7, #8]
 801482c:	607a      	str	r2, [r7, #4]
 801482e:	603b      	str	r3, [r7, #0]
 8014830:	4603      	mov	r3, r0
 8014832:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014834:	7bfb      	ldrb	r3, [r7, #15]
 8014836:	4a0a      	ldr	r2, [pc, #40]	; (8014860 <disk_write+0x3c>)
 8014838:	009b      	lsls	r3, r3, #2
 801483a:	4413      	add	r3, r2
 801483c:	685b      	ldr	r3, [r3, #4]
 801483e:	68dc      	ldr	r4, [r3, #12]
 8014840:	7bfb      	ldrb	r3, [r7, #15]
 8014842:	4a07      	ldr	r2, [pc, #28]	; (8014860 <disk_write+0x3c>)
 8014844:	4413      	add	r3, r2
 8014846:	7a18      	ldrb	r0, [r3, #8]
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	687a      	ldr	r2, [r7, #4]
 801484c:	68b9      	ldr	r1, [r7, #8]
 801484e:	47a0      	blx	r4
 8014850:	4603      	mov	r3, r0
 8014852:	75fb      	strb	r3, [r7, #23]
  return res;
 8014854:	7dfb      	ldrb	r3, [r7, #23]
}
 8014856:	4618      	mov	r0, r3
 8014858:	371c      	adds	r7, #28
 801485a:	46bd      	mov	sp, r7
 801485c:	bd90      	pop	{r4, r7, pc}
 801485e:	bf00      	nop
 8014860:	24000f54 	.word	0x24000f54

08014864 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b084      	sub	sp, #16
 8014868:	af00      	add	r7, sp, #0
 801486a:	4603      	mov	r3, r0
 801486c:	603a      	str	r2, [r7, #0]
 801486e:	71fb      	strb	r3, [r7, #7]
 8014870:	460b      	mov	r3, r1
 8014872:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014874:	79fb      	ldrb	r3, [r7, #7]
 8014876:	4a09      	ldr	r2, [pc, #36]	; (801489c <disk_ioctl+0x38>)
 8014878:	009b      	lsls	r3, r3, #2
 801487a:	4413      	add	r3, r2
 801487c:	685b      	ldr	r3, [r3, #4]
 801487e:	691b      	ldr	r3, [r3, #16]
 8014880:	79fa      	ldrb	r2, [r7, #7]
 8014882:	4906      	ldr	r1, [pc, #24]	; (801489c <disk_ioctl+0x38>)
 8014884:	440a      	add	r2, r1
 8014886:	7a10      	ldrb	r0, [r2, #8]
 8014888:	79b9      	ldrb	r1, [r7, #6]
 801488a:	683a      	ldr	r2, [r7, #0]
 801488c:	4798      	blx	r3
 801488e:	4603      	mov	r3, r0
 8014890:	73fb      	strb	r3, [r7, #15]
  return res;
 8014892:	7bfb      	ldrb	r3, [r7, #15]
}
 8014894:	4618      	mov	r0, r3
 8014896:	3710      	adds	r7, #16
 8014898:	46bd      	mov	sp, r7
 801489a:	bd80      	pop	{r7, pc}
 801489c:	24000f54 	.word	0x24000f54

080148a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80148a0:	b480      	push	{r7}
 80148a2:	b085      	sub	sp, #20
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	3301      	adds	r3, #1
 80148ac:	781b      	ldrb	r3, [r3, #0]
 80148ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80148b0:	89fb      	ldrh	r3, [r7, #14]
 80148b2:	021b      	lsls	r3, r3, #8
 80148b4:	b21a      	sxth	r2, r3
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	781b      	ldrb	r3, [r3, #0]
 80148ba:	b21b      	sxth	r3, r3
 80148bc:	4313      	orrs	r3, r2
 80148be:	b21b      	sxth	r3, r3
 80148c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80148c2:	89fb      	ldrh	r3, [r7, #14]
}
 80148c4:	4618      	mov	r0, r3
 80148c6:	3714      	adds	r7, #20
 80148c8:	46bd      	mov	sp, r7
 80148ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ce:	4770      	bx	lr

080148d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80148d0:	b480      	push	{r7}
 80148d2:	b085      	sub	sp, #20
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	3303      	adds	r3, #3
 80148dc:	781b      	ldrb	r3, [r3, #0]
 80148de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	021b      	lsls	r3, r3, #8
 80148e4:	687a      	ldr	r2, [r7, #4]
 80148e6:	3202      	adds	r2, #2
 80148e8:	7812      	ldrb	r2, [r2, #0]
 80148ea:	4313      	orrs	r3, r2
 80148ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	021b      	lsls	r3, r3, #8
 80148f2:	687a      	ldr	r2, [r7, #4]
 80148f4:	3201      	adds	r2, #1
 80148f6:	7812      	ldrb	r2, [r2, #0]
 80148f8:	4313      	orrs	r3, r2
 80148fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	021b      	lsls	r3, r3, #8
 8014900:	687a      	ldr	r2, [r7, #4]
 8014902:	7812      	ldrb	r2, [r2, #0]
 8014904:	4313      	orrs	r3, r2
 8014906:	60fb      	str	r3, [r7, #12]
	return rv;
 8014908:	68fb      	ldr	r3, [r7, #12]
}
 801490a:	4618      	mov	r0, r3
 801490c:	3714      	adds	r7, #20
 801490e:	46bd      	mov	sp, r7
 8014910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014914:	4770      	bx	lr

08014916 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8014916:	b480      	push	{r7}
 8014918:	b083      	sub	sp, #12
 801491a:	af00      	add	r7, sp, #0
 801491c:	6078      	str	r0, [r7, #4]
 801491e:	460b      	mov	r3, r1
 8014920:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	1c5a      	adds	r2, r3, #1
 8014926:	607a      	str	r2, [r7, #4]
 8014928:	887a      	ldrh	r2, [r7, #2]
 801492a:	b2d2      	uxtb	r2, r2
 801492c:	701a      	strb	r2, [r3, #0]
 801492e:	887b      	ldrh	r3, [r7, #2]
 8014930:	0a1b      	lsrs	r3, r3, #8
 8014932:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	1c5a      	adds	r2, r3, #1
 8014938:	607a      	str	r2, [r7, #4]
 801493a:	887a      	ldrh	r2, [r7, #2]
 801493c:	b2d2      	uxtb	r2, r2
 801493e:	701a      	strb	r2, [r3, #0]
}
 8014940:	bf00      	nop
 8014942:	370c      	adds	r7, #12
 8014944:	46bd      	mov	sp, r7
 8014946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494a:	4770      	bx	lr

0801494c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801494c:	b480      	push	{r7}
 801494e:	b083      	sub	sp, #12
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	1c5a      	adds	r2, r3, #1
 801495a:	607a      	str	r2, [r7, #4]
 801495c:	683a      	ldr	r2, [r7, #0]
 801495e:	b2d2      	uxtb	r2, r2
 8014960:	701a      	strb	r2, [r3, #0]
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	0a1b      	lsrs	r3, r3, #8
 8014966:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	1c5a      	adds	r2, r3, #1
 801496c:	607a      	str	r2, [r7, #4]
 801496e:	683a      	ldr	r2, [r7, #0]
 8014970:	b2d2      	uxtb	r2, r2
 8014972:	701a      	strb	r2, [r3, #0]
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	0a1b      	lsrs	r3, r3, #8
 8014978:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	1c5a      	adds	r2, r3, #1
 801497e:	607a      	str	r2, [r7, #4]
 8014980:	683a      	ldr	r2, [r7, #0]
 8014982:	b2d2      	uxtb	r2, r2
 8014984:	701a      	strb	r2, [r3, #0]
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	0a1b      	lsrs	r3, r3, #8
 801498a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	1c5a      	adds	r2, r3, #1
 8014990:	607a      	str	r2, [r7, #4]
 8014992:	683a      	ldr	r2, [r7, #0]
 8014994:	b2d2      	uxtb	r2, r2
 8014996:	701a      	strb	r2, [r3, #0]
}
 8014998:	bf00      	nop
 801499a:	370c      	adds	r7, #12
 801499c:	46bd      	mov	sp, r7
 801499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a2:	4770      	bx	lr

080149a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80149a4:	b480      	push	{r7}
 80149a6:	b087      	sub	sp, #28
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	60f8      	str	r0, [r7, #12]
 80149ac:	60b9      	str	r1, [r7, #8]
 80149ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d00d      	beq.n	80149da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80149be:	693a      	ldr	r2, [r7, #16]
 80149c0:	1c53      	adds	r3, r2, #1
 80149c2:	613b      	str	r3, [r7, #16]
 80149c4:	697b      	ldr	r3, [r7, #20]
 80149c6:	1c59      	adds	r1, r3, #1
 80149c8:	6179      	str	r1, [r7, #20]
 80149ca:	7812      	ldrb	r2, [r2, #0]
 80149cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	3b01      	subs	r3, #1
 80149d2:	607b      	str	r3, [r7, #4]
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d1f1      	bne.n	80149be <mem_cpy+0x1a>
	}
}
 80149da:	bf00      	nop
 80149dc:	371c      	adds	r7, #28
 80149de:	46bd      	mov	sp, r7
 80149e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e4:	4770      	bx	lr

080149e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80149e6:	b480      	push	{r7}
 80149e8:	b087      	sub	sp, #28
 80149ea:	af00      	add	r7, sp, #0
 80149ec:	60f8      	str	r0, [r7, #12]
 80149ee:	60b9      	str	r1, [r7, #8]
 80149f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80149f6:	697b      	ldr	r3, [r7, #20]
 80149f8:	1c5a      	adds	r2, r3, #1
 80149fa:	617a      	str	r2, [r7, #20]
 80149fc:	68ba      	ldr	r2, [r7, #8]
 80149fe:	b2d2      	uxtb	r2, r2
 8014a00:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	3b01      	subs	r3, #1
 8014a06:	607b      	str	r3, [r7, #4]
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d1f3      	bne.n	80149f6 <mem_set+0x10>
}
 8014a0e:	bf00      	nop
 8014a10:	bf00      	nop
 8014a12:	371c      	adds	r7, #28
 8014a14:	46bd      	mov	sp, r7
 8014a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1a:	4770      	bx	lr

08014a1c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014a1c:	b480      	push	{r7}
 8014a1e:	b089      	sub	sp, #36	; 0x24
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	60f8      	str	r0, [r7, #12]
 8014a24:	60b9      	str	r1, [r7, #8]
 8014a26:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	61fb      	str	r3, [r7, #28]
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8014a30:	2300      	movs	r3, #0
 8014a32:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014a34:	69fb      	ldr	r3, [r7, #28]
 8014a36:	1c5a      	adds	r2, r3, #1
 8014a38:	61fa      	str	r2, [r7, #28]
 8014a3a:	781b      	ldrb	r3, [r3, #0]
 8014a3c:	4619      	mov	r1, r3
 8014a3e:	69bb      	ldr	r3, [r7, #24]
 8014a40:	1c5a      	adds	r2, r3, #1
 8014a42:	61ba      	str	r2, [r7, #24]
 8014a44:	781b      	ldrb	r3, [r3, #0]
 8014a46:	1acb      	subs	r3, r1, r3
 8014a48:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	3b01      	subs	r3, #1
 8014a4e:	607b      	str	r3, [r7, #4]
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d002      	beq.n	8014a5c <mem_cmp+0x40>
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d0eb      	beq.n	8014a34 <mem_cmp+0x18>

	return r;
 8014a5c:	697b      	ldr	r3, [r7, #20]
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3724      	adds	r7, #36	; 0x24
 8014a62:	46bd      	mov	sp, r7
 8014a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a68:	4770      	bx	lr

08014a6a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8014a6a:	b480      	push	{r7}
 8014a6c:	b083      	sub	sp, #12
 8014a6e:	af00      	add	r7, sp, #0
 8014a70:	6078      	str	r0, [r7, #4]
 8014a72:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014a74:	e002      	b.n	8014a7c <chk_chr+0x12>
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	3301      	adds	r3, #1
 8014a7a:	607b      	str	r3, [r7, #4]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	781b      	ldrb	r3, [r3, #0]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d005      	beq.n	8014a90 <chk_chr+0x26>
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	781b      	ldrb	r3, [r3, #0]
 8014a88:	461a      	mov	r2, r3
 8014a8a:	683b      	ldr	r3, [r7, #0]
 8014a8c:	4293      	cmp	r3, r2
 8014a8e:	d1f2      	bne.n	8014a76 <chk_chr+0xc>
	return *str;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	781b      	ldrb	r3, [r3, #0]
}
 8014a94:	4618      	mov	r0, r3
 8014a96:	370c      	adds	r7, #12
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9e:	4770      	bx	lr

08014aa0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014aa0:	b480      	push	{r7}
 8014aa2:	b085      	sub	sp, #20
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
 8014aa8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014aaa:	2300      	movs	r3, #0
 8014aac:	60bb      	str	r3, [r7, #8]
 8014aae:	68bb      	ldr	r3, [r7, #8]
 8014ab0:	60fb      	str	r3, [r7, #12]
 8014ab2:	e029      	b.n	8014b08 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8014ab4:	4a27      	ldr	r2, [pc, #156]	; (8014b54 <chk_lock+0xb4>)
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	011b      	lsls	r3, r3, #4
 8014aba:	4413      	add	r3, r2
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d01d      	beq.n	8014afe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014ac2:	4a24      	ldr	r2, [pc, #144]	; (8014b54 <chk_lock+0xb4>)
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	011b      	lsls	r3, r3, #4
 8014ac8:	4413      	add	r3, r2
 8014aca:	681a      	ldr	r2, [r3, #0]
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	d116      	bne.n	8014b02 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8014ad4:	4a1f      	ldr	r2, [pc, #124]	; (8014b54 <chk_lock+0xb4>)
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	011b      	lsls	r3, r3, #4
 8014ada:	4413      	add	r3, r2
 8014adc:	3304      	adds	r3, #4
 8014ade:	681a      	ldr	r2, [r3, #0]
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014ae4:	429a      	cmp	r2, r3
 8014ae6:	d10c      	bne.n	8014b02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014ae8:	4a1a      	ldr	r2, [pc, #104]	; (8014b54 <chk_lock+0xb4>)
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	011b      	lsls	r3, r3, #4
 8014aee:	4413      	add	r3, r2
 8014af0:	3308      	adds	r3, #8
 8014af2:	681a      	ldr	r2, [r3, #0]
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8014af8:	429a      	cmp	r2, r3
 8014afa:	d102      	bne.n	8014b02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014afc:	e007      	b.n	8014b0e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8014afe:	2301      	movs	r3, #1
 8014b00:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	3301      	adds	r3, #1
 8014b06:	60fb      	str	r3, [r7, #12]
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	2b01      	cmp	r3, #1
 8014b0c:	d9d2      	bls.n	8014ab4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	2b02      	cmp	r3, #2
 8014b12:	d109      	bne.n	8014b28 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d102      	bne.n	8014b20 <chk_lock+0x80>
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	2b02      	cmp	r3, #2
 8014b1e:	d101      	bne.n	8014b24 <chk_lock+0x84>
 8014b20:	2300      	movs	r3, #0
 8014b22:	e010      	b.n	8014b46 <chk_lock+0xa6>
 8014b24:	2312      	movs	r3, #18
 8014b26:	e00e      	b.n	8014b46 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8014b28:	683b      	ldr	r3, [r7, #0]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d108      	bne.n	8014b40 <chk_lock+0xa0>
 8014b2e:	4a09      	ldr	r2, [pc, #36]	; (8014b54 <chk_lock+0xb4>)
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	011b      	lsls	r3, r3, #4
 8014b34:	4413      	add	r3, r2
 8014b36:	330c      	adds	r3, #12
 8014b38:	881b      	ldrh	r3, [r3, #0]
 8014b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014b3e:	d101      	bne.n	8014b44 <chk_lock+0xa4>
 8014b40:	2310      	movs	r3, #16
 8014b42:	e000      	b.n	8014b46 <chk_lock+0xa6>
 8014b44:	2300      	movs	r3, #0
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	3714      	adds	r7, #20
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b50:	4770      	bx	lr
 8014b52:	bf00      	nop
 8014b54:	24000d34 	.word	0x24000d34

08014b58 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8014b58:	b480      	push	{r7}
 8014b5a:	b083      	sub	sp, #12
 8014b5c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014b5e:	2300      	movs	r3, #0
 8014b60:	607b      	str	r3, [r7, #4]
 8014b62:	e002      	b.n	8014b6a <enq_lock+0x12>
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	3301      	adds	r3, #1
 8014b68:	607b      	str	r3, [r7, #4]
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2b01      	cmp	r3, #1
 8014b6e:	d806      	bhi.n	8014b7e <enq_lock+0x26>
 8014b70:	4a09      	ldr	r2, [pc, #36]	; (8014b98 <enq_lock+0x40>)
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	011b      	lsls	r3, r3, #4
 8014b76:	4413      	add	r3, r2
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d1f2      	bne.n	8014b64 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	2b02      	cmp	r3, #2
 8014b82:	bf14      	ite	ne
 8014b84:	2301      	movne	r3, #1
 8014b86:	2300      	moveq	r3, #0
 8014b88:	b2db      	uxtb	r3, r3
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	370c      	adds	r7, #12
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b94:	4770      	bx	lr
 8014b96:	bf00      	nop
 8014b98:	24000d34 	.word	0x24000d34

08014b9c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014b9c:	b480      	push	{r7}
 8014b9e:	b085      	sub	sp, #20
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
 8014ba4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	60fb      	str	r3, [r7, #12]
 8014baa:	e01f      	b.n	8014bec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8014bac:	4a41      	ldr	r2, [pc, #260]	; (8014cb4 <inc_lock+0x118>)
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	011b      	lsls	r3, r3, #4
 8014bb2:	4413      	add	r3, r2
 8014bb4:	681a      	ldr	r2, [r3, #0]
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	429a      	cmp	r2, r3
 8014bbc:	d113      	bne.n	8014be6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8014bbe:	4a3d      	ldr	r2, [pc, #244]	; (8014cb4 <inc_lock+0x118>)
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	011b      	lsls	r3, r3, #4
 8014bc4:	4413      	add	r3, r2
 8014bc6:	3304      	adds	r3, #4
 8014bc8:	681a      	ldr	r2, [r3, #0]
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8014bce:	429a      	cmp	r2, r3
 8014bd0:	d109      	bne.n	8014be6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8014bd2:	4a38      	ldr	r2, [pc, #224]	; (8014cb4 <inc_lock+0x118>)
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	011b      	lsls	r3, r3, #4
 8014bd8:	4413      	add	r3, r2
 8014bda:	3308      	adds	r3, #8
 8014bdc:	681a      	ldr	r2, [r3, #0]
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8014be2:	429a      	cmp	r2, r3
 8014be4:	d006      	beq.n	8014bf4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	3301      	adds	r3, #1
 8014bea:	60fb      	str	r3, [r7, #12]
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	2b01      	cmp	r3, #1
 8014bf0:	d9dc      	bls.n	8014bac <inc_lock+0x10>
 8014bf2:	e000      	b.n	8014bf6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8014bf4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2b02      	cmp	r3, #2
 8014bfa:	d132      	bne.n	8014c62 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	60fb      	str	r3, [r7, #12]
 8014c00:	e002      	b.n	8014c08 <inc_lock+0x6c>
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	3301      	adds	r3, #1
 8014c06:	60fb      	str	r3, [r7, #12]
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	2b01      	cmp	r3, #1
 8014c0c:	d806      	bhi.n	8014c1c <inc_lock+0x80>
 8014c0e:	4a29      	ldr	r2, [pc, #164]	; (8014cb4 <inc_lock+0x118>)
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	011b      	lsls	r3, r3, #4
 8014c14:	4413      	add	r3, r2
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d1f2      	bne.n	8014c02 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	2b02      	cmp	r3, #2
 8014c20:	d101      	bne.n	8014c26 <inc_lock+0x8a>
 8014c22:	2300      	movs	r3, #0
 8014c24:	e040      	b.n	8014ca8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	681a      	ldr	r2, [r3, #0]
 8014c2a:	4922      	ldr	r1, [pc, #136]	; (8014cb4 <inc_lock+0x118>)
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	011b      	lsls	r3, r3, #4
 8014c30:	440b      	add	r3, r1
 8014c32:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	689a      	ldr	r2, [r3, #8]
 8014c38:	491e      	ldr	r1, [pc, #120]	; (8014cb4 <inc_lock+0x118>)
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	011b      	lsls	r3, r3, #4
 8014c3e:	440b      	add	r3, r1
 8014c40:	3304      	adds	r3, #4
 8014c42:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	695a      	ldr	r2, [r3, #20]
 8014c48:	491a      	ldr	r1, [pc, #104]	; (8014cb4 <inc_lock+0x118>)
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	011b      	lsls	r3, r3, #4
 8014c4e:	440b      	add	r3, r1
 8014c50:	3308      	adds	r3, #8
 8014c52:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8014c54:	4a17      	ldr	r2, [pc, #92]	; (8014cb4 <inc_lock+0x118>)
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	011b      	lsls	r3, r3, #4
 8014c5a:	4413      	add	r3, r2
 8014c5c:	330c      	adds	r3, #12
 8014c5e:	2200      	movs	r2, #0
 8014c60:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8014c62:	683b      	ldr	r3, [r7, #0]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d009      	beq.n	8014c7c <inc_lock+0xe0>
 8014c68:	4a12      	ldr	r2, [pc, #72]	; (8014cb4 <inc_lock+0x118>)
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	011b      	lsls	r3, r3, #4
 8014c6e:	4413      	add	r3, r2
 8014c70:	330c      	adds	r3, #12
 8014c72:	881b      	ldrh	r3, [r3, #0]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d001      	beq.n	8014c7c <inc_lock+0xe0>
 8014c78:	2300      	movs	r3, #0
 8014c7a:	e015      	b.n	8014ca8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8014c7c:	683b      	ldr	r3, [r7, #0]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d108      	bne.n	8014c94 <inc_lock+0xf8>
 8014c82:	4a0c      	ldr	r2, [pc, #48]	; (8014cb4 <inc_lock+0x118>)
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	011b      	lsls	r3, r3, #4
 8014c88:	4413      	add	r3, r2
 8014c8a:	330c      	adds	r3, #12
 8014c8c:	881b      	ldrh	r3, [r3, #0]
 8014c8e:	3301      	adds	r3, #1
 8014c90:	b29a      	uxth	r2, r3
 8014c92:	e001      	b.n	8014c98 <inc_lock+0xfc>
 8014c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014c98:	4906      	ldr	r1, [pc, #24]	; (8014cb4 <inc_lock+0x118>)
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	011b      	lsls	r3, r3, #4
 8014c9e:	440b      	add	r3, r1
 8014ca0:	330c      	adds	r3, #12
 8014ca2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	3301      	adds	r3, #1
}
 8014ca8:	4618      	mov	r0, r3
 8014caa:	3714      	adds	r7, #20
 8014cac:	46bd      	mov	sp, r7
 8014cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb2:	4770      	bx	lr
 8014cb4:	24000d34 	.word	0x24000d34

08014cb8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8014cb8:	b480      	push	{r7}
 8014cba:	b085      	sub	sp, #20
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	3b01      	subs	r3, #1
 8014cc4:	607b      	str	r3, [r7, #4]
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	2b01      	cmp	r3, #1
 8014cca:	d825      	bhi.n	8014d18 <dec_lock+0x60>
		n = Files[i].ctr;
 8014ccc:	4a17      	ldr	r2, [pc, #92]	; (8014d2c <dec_lock+0x74>)
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	011b      	lsls	r3, r3, #4
 8014cd2:	4413      	add	r3, r2
 8014cd4:	330c      	adds	r3, #12
 8014cd6:	881b      	ldrh	r3, [r3, #0]
 8014cd8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8014cda:	89fb      	ldrh	r3, [r7, #14]
 8014cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014ce0:	d101      	bne.n	8014ce6 <dec_lock+0x2e>
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8014ce6:	89fb      	ldrh	r3, [r7, #14]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d002      	beq.n	8014cf2 <dec_lock+0x3a>
 8014cec:	89fb      	ldrh	r3, [r7, #14]
 8014cee:	3b01      	subs	r3, #1
 8014cf0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8014cf2:	4a0e      	ldr	r2, [pc, #56]	; (8014d2c <dec_lock+0x74>)
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	011b      	lsls	r3, r3, #4
 8014cf8:	4413      	add	r3, r2
 8014cfa:	330c      	adds	r3, #12
 8014cfc:	89fa      	ldrh	r2, [r7, #14]
 8014cfe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8014d00:	89fb      	ldrh	r3, [r7, #14]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d105      	bne.n	8014d12 <dec_lock+0x5a>
 8014d06:	4a09      	ldr	r2, [pc, #36]	; (8014d2c <dec_lock+0x74>)
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	011b      	lsls	r3, r3, #4
 8014d0c:	4413      	add	r3, r2
 8014d0e:	2200      	movs	r2, #0
 8014d10:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8014d12:	2300      	movs	r3, #0
 8014d14:	737b      	strb	r3, [r7, #13]
 8014d16:	e001      	b.n	8014d1c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8014d18:	2302      	movs	r3, #2
 8014d1a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8014d1c:	7b7b      	ldrb	r3, [r7, #13]
}
 8014d1e:	4618      	mov	r0, r3
 8014d20:	3714      	adds	r7, #20
 8014d22:	46bd      	mov	sp, r7
 8014d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d28:	4770      	bx	lr
 8014d2a:	bf00      	nop
 8014d2c:	24000d34 	.word	0x24000d34

08014d30 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8014d30:	b480      	push	{r7}
 8014d32:	b085      	sub	sp, #20
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8014d38:	2300      	movs	r3, #0
 8014d3a:	60fb      	str	r3, [r7, #12]
 8014d3c:	e010      	b.n	8014d60 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8014d3e:	4a0d      	ldr	r2, [pc, #52]	; (8014d74 <clear_lock+0x44>)
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	011b      	lsls	r3, r3, #4
 8014d44:	4413      	add	r3, r2
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	687a      	ldr	r2, [r7, #4]
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d105      	bne.n	8014d5a <clear_lock+0x2a>
 8014d4e:	4a09      	ldr	r2, [pc, #36]	; (8014d74 <clear_lock+0x44>)
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	011b      	lsls	r3, r3, #4
 8014d54:	4413      	add	r3, r2
 8014d56:	2200      	movs	r2, #0
 8014d58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	3301      	adds	r3, #1
 8014d5e:	60fb      	str	r3, [r7, #12]
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	2b01      	cmp	r3, #1
 8014d64:	d9eb      	bls.n	8014d3e <clear_lock+0xe>
	}
}
 8014d66:	bf00      	nop
 8014d68:	bf00      	nop
 8014d6a:	3714      	adds	r7, #20
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d72:	4770      	bx	lr
 8014d74:	24000d34 	.word	0x24000d34

08014d78 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b086      	sub	sp, #24
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8014d80:	2300      	movs	r3, #0
 8014d82:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	78db      	ldrb	r3, [r3, #3]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d034      	beq.n	8014df6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d90:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	7858      	ldrb	r0, [r3, #1]
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014d9c:	2301      	movs	r3, #1
 8014d9e:	697a      	ldr	r2, [r7, #20]
 8014da0:	f7ff fd40 	bl	8014824 <disk_write>
 8014da4:	4603      	mov	r3, r0
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d002      	beq.n	8014db0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8014daa:	2301      	movs	r3, #1
 8014dac:	73fb      	strb	r3, [r7, #15]
 8014dae:	e022      	b.n	8014df6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	2200      	movs	r2, #0
 8014db4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014dba:	697a      	ldr	r2, [r7, #20]
 8014dbc:	1ad2      	subs	r2, r2, r3
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	6a1b      	ldr	r3, [r3, #32]
 8014dc2:	429a      	cmp	r2, r3
 8014dc4:	d217      	bcs.n	8014df6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	789b      	ldrb	r3, [r3, #2]
 8014dca:	613b      	str	r3, [r7, #16]
 8014dcc:	e010      	b.n	8014df0 <sync_window+0x78>
					wsect += fs->fsize;
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	6a1b      	ldr	r3, [r3, #32]
 8014dd2:	697a      	ldr	r2, [r7, #20]
 8014dd4:	4413      	add	r3, r2
 8014dd6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	7858      	ldrb	r0, [r3, #1]
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014de2:	2301      	movs	r3, #1
 8014de4:	697a      	ldr	r2, [r7, #20]
 8014de6:	f7ff fd1d 	bl	8014824 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014dea:	693b      	ldr	r3, [r7, #16]
 8014dec:	3b01      	subs	r3, #1
 8014dee:	613b      	str	r3, [r7, #16]
 8014df0:	693b      	ldr	r3, [r7, #16]
 8014df2:	2b01      	cmp	r3, #1
 8014df4:	d8eb      	bhi.n	8014dce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8014df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3718      	adds	r7, #24
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}

08014e00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b084      	sub	sp, #16
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
 8014e08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e12:	683a      	ldr	r2, [r7, #0]
 8014e14:	429a      	cmp	r2, r3
 8014e16:	d01b      	beq.n	8014e50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f7ff ffad 	bl	8014d78 <sync_window>
 8014e1e:	4603      	mov	r3, r0
 8014e20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8014e22:	7bfb      	ldrb	r3, [r7, #15]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d113      	bne.n	8014e50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	7858      	ldrb	r0, [r3, #1]
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014e32:	2301      	movs	r3, #1
 8014e34:	683a      	ldr	r2, [r7, #0]
 8014e36:	f7ff fcd5 	bl	80147e4 <disk_read>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d004      	beq.n	8014e4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8014e40:	f04f 33ff 	mov.w	r3, #4294967295
 8014e44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8014e46:	2301      	movs	r3, #1
 8014e48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	683a      	ldr	r2, [r7, #0]
 8014e4e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8014e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	3710      	adds	r7, #16
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}
	...

08014e5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b084      	sub	sp, #16
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8014e64:	6878      	ldr	r0, [r7, #4]
 8014e66:	f7ff ff87 	bl	8014d78 <sync_window>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014e6e:	7bfb      	ldrb	r3, [r7, #15]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d159      	bne.n	8014f28 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	781b      	ldrb	r3, [r3, #0]
 8014e78:	2b03      	cmp	r3, #3
 8014e7a:	d149      	bne.n	8014f10 <sync_fs+0xb4>
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	791b      	ldrb	r3, [r3, #4]
 8014e80:	2b01      	cmp	r3, #1
 8014e82:	d145      	bne.n	8014f10 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	899b      	ldrh	r3, [r3, #12]
 8014e8e:	461a      	mov	r2, r3
 8014e90:	2100      	movs	r1, #0
 8014e92:	f7ff fda8 	bl	80149e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	3338      	adds	r3, #56	; 0x38
 8014e9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014e9e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f7ff fd37 	bl	8014916 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	3338      	adds	r3, #56	; 0x38
 8014eac:	4921      	ldr	r1, [pc, #132]	; (8014f34 <sync_fs+0xd8>)
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7ff fd4c 	bl	801494c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	3338      	adds	r3, #56	; 0x38
 8014eb8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014ebc:	491e      	ldr	r1, [pc, #120]	; (8014f38 <sync_fs+0xdc>)
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7ff fd44 	bl	801494c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	3338      	adds	r3, #56	; 0x38
 8014ec8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	699b      	ldr	r3, [r3, #24]
 8014ed0:	4619      	mov	r1, r3
 8014ed2:	4610      	mov	r0, r2
 8014ed4:	f7ff fd3a 	bl	801494c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	3338      	adds	r3, #56	; 0x38
 8014edc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	695b      	ldr	r3, [r3, #20]
 8014ee4:	4619      	mov	r1, r3
 8014ee6:	4610      	mov	r0, r2
 8014ee8:	f7ff fd30 	bl	801494c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ef0:	1c5a      	adds	r2, r3, #1
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	7858      	ldrb	r0, [r3, #1]
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014f04:	2301      	movs	r3, #1
 8014f06:	f7ff fc8d 	bl	8014824 <disk_write>
			fs->fsi_flag = 0;
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	785b      	ldrb	r3, [r3, #1]
 8014f14:	2200      	movs	r2, #0
 8014f16:	2100      	movs	r1, #0
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f7ff fca3 	bl	8014864 <disk_ioctl>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d001      	beq.n	8014f28 <sync_fs+0xcc>
 8014f24:	2301      	movs	r3, #1
 8014f26:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8014f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	3710      	adds	r7, #16
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}
 8014f32:	bf00      	nop
 8014f34:	41615252 	.word	0x41615252
 8014f38:	61417272 	.word	0x61417272

08014f3c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8014f3c:	b480      	push	{r7}
 8014f3e:	b083      	sub	sp, #12
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8014f46:	683b      	ldr	r3, [r7, #0]
 8014f48:	3b02      	subs	r3, #2
 8014f4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	69db      	ldr	r3, [r3, #28]
 8014f50:	3b02      	subs	r3, #2
 8014f52:	683a      	ldr	r2, [r7, #0]
 8014f54:	429a      	cmp	r2, r3
 8014f56:	d301      	bcc.n	8014f5c <clust2sect+0x20>
 8014f58:	2300      	movs	r3, #0
 8014f5a:	e008      	b.n	8014f6e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	895b      	ldrh	r3, [r3, #10]
 8014f60:	461a      	mov	r2, r3
 8014f62:	683b      	ldr	r3, [r7, #0]
 8014f64:	fb03 f202 	mul.w	r2, r3, r2
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f6c:	4413      	add	r3, r2
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	370c      	adds	r7, #12
 8014f72:	46bd      	mov	sp, r7
 8014f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f78:	4770      	bx	lr

08014f7a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8014f7a:	b580      	push	{r7, lr}
 8014f7c:	b086      	sub	sp, #24
 8014f7e:	af00      	add	r7, sp, #0
 8014f80:	6078      	str	r0, [r7, #4]
 8014f82:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	2b01      	cmp	r3, #1
 8014f8e:	d904      	bls.n	8014f9a <get_fat+0x20>
 8014f90:	693b      	ldr	r3, [r7, #16]
 8014f92:	69db      	ldr	r3, [r3, #28]
 8014f94:	683a      	ldr	r2, [r7, #0]
 8014f96:	429a      	cmp	r2, r3
 8014f98:	d302      	bcc.n	8014fa0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8014f9a:	2301      	movs	r3, #1
 8014f9c:	617b      	str	r3, [r7, #20]
 8014f9e:	e0bb      	b.n	8015118 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8014fa4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8014fa6:	693b      	ldr	r3, [r7, #16]
 8014fa8:	781b      	ldrb	r3, [r3, #0]
 8014faa:	2b03      	cmp	r3, #3
 8014fac:	f000 8083 	beq.w	80150b6 <get_fat+0x13c>
 8014fb0:	2b03      	cmp	r3, #3
 8014fb2:	f300 80a7 	bgt.w	8015104 <get_fat+0x18a>
 8014fb6:	2b01      	cmp	r3, #1
 8014fb8:	d002      	beq.n	8014fc0 <get_fat+0x46>
 8014fba:	2b02      	cmp	r3, #2
 8014fbc:	d056      	beq.n	801506c <get_fat+0xf2>
 8014fbe:	e0a1      	b.n	8015104 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8014fc0:	683b      	ldr	r3, [r7, #0]
 8014fc2:	60fb      	str	r3, [r7, #12]
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	085b      	lsrs	r3, r3, #1
 8014fc8:	68fa      	ldr	r2, [r7, #12]
 8014fca:	4413      	add	r3, r2
 8014fcc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014fce:	693b      	ldr	r3, [r7, #16]
 8014fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014fd2:	693b      	ldr	r3, [r7, #16]
 8014fd4:	899b      	ldrh	r3, [r3, #12]
 8014fd6:	4619      	mov	r1, r3
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8014fde:	4413      	add	r3, r2
 8014fe0:	4619      	mov	r1, r3
 8014fe2:	6938      	ldr	r0, [r7, #16]
 8014fe4:	f7ff ff0c 	bl	8014e00 <move_window>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	f040 808d 	bne.w	801510a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	1c5a      	adds	r2, r3, #1
 8014ff4:	60fa      	str	r2, [r7, #12]
 8014ff6:	693a      	ldr	r2, [r7, #16]
 8014ff8:	8992      	ldrh	r2, [r2, #12]
 8014ffa:	fbb3 f1f2 	udiv	r1, r3, r2
 8014ffe:	fb01 f202 	mul.w	r2, r1, r2
 8015002:	1a9b      	subs	r3, r3, r2
 8015004:	693a      	ldr	r2, [r7, #16]
 8015006:	4413      	add	r3, r2
 8015008:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801500c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801500e:	693b      	ldr	r3, [r7, #16]
 8015010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015012:	693b      	ldr	r3, [r7, #16]
 8015014:	899b      	ldrh	r3, [r3, #12]
 8015016:	4619      	mov	r1, r3
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	fbb3 f3f1 	udiv	r3, r3, r1
 801501e:	4413      	add	r3, r2
 8015020:	4619      	mov	r1, r3
 8015022:	6938      	ldr	r0, [r7, #16]
 8015024:	f7ff feec 	bl	8014e00 <move_window>
 8015028:	4603      	mov	r3, r0
 801502a:	2b00      	cmp	r3, #0
 801502c:	d16f      	bne.n	801510e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 801502e:	693b      	ldr	r3, [r7, #16]
 8015030:	899b      	ldrh	r3, [r3, #12]
 8015032:	461a      	mov	r2, r3
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	fbb3 f1f2 	udiv	r1, r3, r2
 801503a:	fb01 f202 	mul.w	r2, r1, r2
 801503e:	1a9b      	subs	r3, r3, r2
 8015040:	693a      	ldr	r2, [r7, #16]
 8015042:	4413      	add	r3, r2
 8015044:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015048:	021b      	lsls	r3, r3, #8
 801504a:	461a      	mov	r2, r3
 801504c:	68bb      	ldr	r3, [r7, #8]
 801504e:	4313      	orrs	r3, r2
 8015050:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	f003 0301 	and.w	r3, r3, #1
 8015058:	2b00      	cmp	r3, #0
 801505a:	d002      	beq.n	8015062 <get_fat+0xe8>
 801505c:	68bb      	ldr	r3, [r7, #8]
 801505e:	091b      	lsrs	r3, r3, #4
 8015060:	e002      	b.n	8015068 <get_fat+0xee>
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015068:	617b      	str	r3, [r7, #20]
			break;
 801506a:	e055      	b.n	8015118 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801506c:	693b      	ldr	r3, [r7, #16]
 801506e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015070:	693b      	ldr	r3, [r7, #16]
 8015072:	899b      	ldrh	r3, [r3, #12]
 8015074:	085b      	lsrs	r3, r3, #1
 8015076:	b29b      	uxth	r3, r3
 8015078:	4619      	mov	r1, r3
 801507a:	683b      	ldr	r3, [r7, #0]
 801507c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015080:	4413      	add	r3, r2
 8015082:	4619      	mov	r1, r3
 8015084:	6938      	ldr	r0, [r7, #16]
 8015086:	f7ff febb 	bl	8014e00 <move_window>
 801508a:	4603      	mov	r3, r0
 801508c:	2b00      	cmp	r3, #0
 801508e:	d140      	bne.n	8015112 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015090:	693b      	ldr	r3, [r7, #16]
 8015092:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015096:	683b      	ldr	r3, [r7, #0]
 8015098:	005b      	lsls	r3, r3, #1
 801509a:	693a      	ldr	r2, [r7, #16]
 801509c:	8992      	ldrh	r2, [r2, #12]
 801509e:	fbb3 f0f2 	udiv	r0, r3, r2
 80150a2:	fb00 f202 	mul.w	r2, r0, r2
 80150a6:	1a9b      	subs	r3, r3, r2
 80150a8:	440b      	add	r3, r1
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7ff fbf8 	bl	80148a0 <ld_word>
 80150b0:	4603      	mov	r3, r0
 80150b2:	617b      	str	r3, [r7, #20]
			break;
 80150b4:	e030      	b.n	8015118 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80150ba:	693b      	ldr	r3, [r7, #16]
 80150bc:	899b      	ldrh	r3, [r3, #12]
 80150be:	089b      	lsrs	r3, r3, #2
 80150c0:	b29b      	uxth	r3, r3
 80150c2:	4619      	mov	r1, r3
 80150c4:	683b      	ldr	r3, [r7, #0]
 80150c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80150ca:	4413      	add	r3, r2
 80150cc:	4619      	mov	r1, r3
 80150ce:	6938      	ldr	r0, [r7, #16]
 80150d0:	f7ff fe96 	bl	8014e00 <move_window>
 80150d4:	4603      	mov	r3, r0
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d11d      	bne.n	8015116 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80150e0:	683b      	ldr	r3, [r7, #0]
 80150e2:	009b      	lsls	r3, r3, #2
 80150e4:	693a      	ldr	r2, [r7, #16]
 80150e6:	8992      	ldrh	r2, [r2, #12]
 80150e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80150ec:	fb00 f202 	mul.w	r2, r0, r2
 80150f0:	1a9b      	subs	r3, r3, r2
 80150f2:	440b      	add	r3, r1
 80150f4:	4618      	mov	r0, r3
 80150f6:	f7ff fbeb 	bl	80148d0 <ld_dword>
 80150fa:	4603      	mov	r3, r0
 80150fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015100:	617b      	str	r3, [r7, #20]
			break;
 8015102:	e009      	b.n	8015118 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015104:	2301      	movs	r3, #1
 8015106:	617b      	str	r3, [r7, #20]
 8015108:	e006      	b.n	8015118 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801510a:	bf00      	nop
 801510c:	e004      	b.n	8015118 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801510e:	bf00      	nop
 8015110:	e002      	b.n	8015118 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015112:	bf00      	nop
 8015114:	e000      	b.n	8015118 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015116:	bf00      	nop
		}
	}

	return val;
 8015118:	697b      	ldr	r3, [r7, #20]
}
 801511a:	4618      	mov	r0, r3
 801511c:	3718      	adds	r7, #24
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}

08015122 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8015122:	b590      	push	{r4, r7, lr}
 8015124:	b089      	sub	sp, #36	; 0x24
 8015126:	af00      	add	r7, sp, #0
 8015128:	60f8      	str	r0, [r7, #12]
 801512a:	60b9      	str	r1, [r7, #8]
 801512c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801512e:	2302      	movs	r3, #2
 8015130:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015132:	68bb      	ldr	r3, [r7, #8]
 8015134:	2b01      	cmp	r3, #1
 8015136:	f240 8102 	bls.w	801533e <put_fat+0x21c>
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	69db      	ldr	r3, [r3, #28]
 801513e:	68ba      	ldr	r2, [r7, #8]
 8015140:	429a      	cmp	r2, r3
 8015142:	f080 80fc 	bcs.w	801533e <put_fat+0x21c>
		switch (fs->fs_type) {
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	781b      	ldrb	r3, [r3, #0]
 801514a:	2b03      	cmp	r3, #3
 801514c:	f000 80b6 	beq.w	80152bc <put_fat+0x19a>
 8015150:	2b03      	cmp	r3, #3
 8015152:	f300 80fd 	bgt.w	8015350 <put_fat+0x22e>
 8015156:	2b01      	cmp	r3, #1
 8015158:	d003      	beq.n	8015162 <put_fat+0x40>
 801515a:	2b02      	cmp	r3, #2
 801515c:	f000 8083 	beq.w	8015266 <put_fat+0x144>
 8015160:	e0f6      	b.n	8015350 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8015162:	68bb      	ldr	r3, [r7, #8]
 8015164:	61bb      	str	r3, [r7, #24]
 8015166:	69bb      	ldr	r3, [r7, #24]
 8015168:	085b      	lsrs	r3, r3, #1
 801516a:	69ba      	ldr	r2, [r7, #24]
 801516c:	4413      	add	r3, r2
 801516e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	899b      	ldrh	r3, [r3, #12]
 8015178:	4619      	mov	r1, r3
 801517a:	69bb      	ldr	r3, [r7, #24]
 801517c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015180:	4413      	add	r3, r2
 8015182:	4619      	mov	r1, r3
 8015184:	68f8      	ldr	r0, [r7, #12]
 8015186:	f7ff fe3b 	bl	8014e00 <move_window>
 801518a:	4603      	mov	r3, r0
 801518c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801518e:	7ffb      	ldrb	r3, [r7, #31]
 8015190:	2b00      	cmp	r3, #0
 8015192:	f040 80d6 	bne.w	8015342 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801519c:	69bb      	ldr	r3, [r7, #24]
 801519e:	1c5a      	adds	r2, r3, #1
 80151a0:	61ba      	str	r2, [r7, #24]
 80151a2:	68fa      	ldr	r2, [r7, #12]
 80151a4:	8992      	ldrh	r2, [r2, #12]
 80151a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80151aa:	fb00 f202 	mul.w	r2, r0, r2
 80151ae:	1a9b      	subs	r3, r3, r2
 80151b0:	440b      	add	r3, r1
 80151b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80151b4:	68bb      	ldr	r3, [r7, #8]
 80151b6:	f003 0301 	and.w	r3, r3, #1
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d00d      	beq.n	80151da <put_fat+0xb8>
 80151be:	697b      	ldr	r3, [r7, #20]
 80151c0:	781b      	ldrb	r3, [r3, #0]
 80151c2:	b25b      	sxtb	r3, r3
 80151c4:	f003 030f 	and.w	r3, r3, #15
 80151c8:	b25a      	sxtb	r2, r3
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	b2db      	uxtb	r3, r3
 80151ce:	011b      	lsls	r3, r3, #4
 80151d0:	b25b      	sxtb	r3, r3
 80151d2:	4313      	orrs	r3, r2
 80151d4:	b25b      	sxtb	r3, r3
 80151d6:	b2db      	uxtb	r3, r3
 80151d8:	e001      	b.n	80151de <put_fat+0xbc>
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	b2db      	uxtb	r3, r3
 80151de:	697a      	ldr	r2, [r7, #20]
 80151e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	2201      	movs	r2, #1
 80151e6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	899b      	ldrh	r3, [r3, #12]
 80151f0:	4619      	mov	r1, r3
 80151f2:	69bb      	ldr	r3, [r7, #24]
 80151f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80151f8:	4413      	add	r3, r2
 80151fa:	4619      	mov	r1, r3
 80151fc:	68f8      	ldr	r0, [r7, #12]
 80151fe:	f7ff fdff 	bl	8014e00 <move_window>
 8015202:	4603      	mov	r3, r0
 8015204:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015206:	7ffb      	ldrb	r3, [r7, #31]
 8015208:	2b00      	cmp	r3, #0
 801520a:	f040 809c 	bne.w	8015346 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	899b      	ldrh	r3, [r3, #12]
 8015218:	461a      	mov	r2, r3
 801521a:	69bb      	ldr	r3, [r7, #24]
 801521c:	fbb3 f0f2 	udiv	r0, r3, r2
 8015220:	fb00 f202 	mul.w	r2, r0, r2
 8015224:	1a9b      	subs	r3, r3, r2
 8015226:	440b      	add	r3, r1
 8015228:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801522a:	68bb      	ldr	r3, [r7, #8]
 801522c:	f003 0301 	and.w	r3, r3, #1
 8015230:	2b00      	cmp	r3, #0
 8015232:	d003      	beq.n	801523c <put_fat+0x11a>
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	091b      	lsrs	r3, r3, #4
 8015238:	b2db      	uxtb	r3, r3
 801523a:	e00e      	b.n	801525a <put_fat+0x138>
 801523c:	697b      	ldr	r3, [r7, #20]
 801523e:	781b      	ldrb	r3, [r3, #0]
 8015240:	b25b      	sxtb	r3, r3
 8015242:	f023 030f 	bic.w	r3, r3, #15
 8015246:	b25a      	sxtb	r2, r3
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	0a1b      	lsrs	r3, r3, #8
 801524c:	b25b      	sxtb	r3, r3
 801524e:	f003 030f 	and.w	r3, r3, #15
 8015252:	b25b      	sxtb	r3, r3
 8015254:	4313      	orrs	r3, r2
 8015256:	b25b      	sxtb	r3, r3
 8015258:	b2db      	uxtb	r3, r3
 801525a:	697a      	ldr	r2, [r7, #20]
 801525c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	2201      	movs	r2, #1
 8015262:	70da      	strb	r2, [r3, #3]
			break;
 8015264:	e074      	b.n	8015350 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	899b      	ldrh	r3, [r3, #12]
 801526e:	085b      	lsrs	r3, r3, #1
 8015270:	b29b      	uxth	r3, r3
 8015272:	4619      	mov	r1, r3
 8015274:	68bb      	ldr	r3, [r7, #8]
 8015276:	fbb3 f3f1 	udiv	r3, r3, r1
 801527a:	4413      	add	r3, r2
 801527c:	4619      	mov	r1, r3
 801527e:	68f8      	ldr	r0, [r7, #12]
 8015280:	f7ff fdbe 	bl	8014e00 <move_window>
 8015284:	4603      	mov	r3, r0
 8015286:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015288:	7ffb      	ldrb	r3, [r7, #31]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d15d      	bne.n	801534a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015294:	68bb      	ldr	r3, [r7, #8]
 8015296:	005b      	lsls	r3, r3, #1
 8015298:	68fa      	ldr	r2, [r7, #12]
 801529a:	8992      	ldrh	r2, [r2, #12]
 801529c:	fbb3 f0f2 	udiv	r0, r3, r2
 80152a0:	fb00 f202 	mul.w	r2, r0, r2
 80152a4:	1a9b      	subs	r3, r3, r2
 80152a6:	440b      	add	r3, r1
 80152a8:	687a      	ldr	r2, [r7, #4]
 80152aa:	b292      	uxth	r2, r2
 80152ac:	4611      	mov	r1, r2
 80152ae:	4618      	mov	r0, r3
 80152b0:	f7ff fb31 	bl	8014916 <st_word>
			fs->wflag = 1;
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	2201      	movs	r2, #1
 80152b8:	70da      	strb	r2, [r3, #3]
			break;
 80152ba:	e049      	b.n	8015350 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	899b      	ldrh	r3, [r3, #12]
 80152c4:	089b      	lsrs	r3, r3, #2
 80152c6:	b29b      	uxth	r3, r3
 80152c8:	4619      	mov	r1, r3
 80152ca:	68bb      	ldr	r3, [r7, #8]
 80152cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80152d0:	4413      	add	r3, r2
 80152d2:	4619      	mov	r1, r3
 80152d4:	68f8      	ldr	r0, [r7, #12]
 80152d6:	f7ff fd93 	bl	8014e00 <move_window>
 80152da:	4603      	mov	r3, r0
 80152dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80152de:	7ffb      	ldrb	r3, [r7, #31]
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d134      	bne.n	801534e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80152f0:	68bb      	ldr	r3, [r7, #8]
 80152f2:	009b      	lsls	r3, r3, #2
 80152f4:	68fa      	ldr	r2, [r7, #12]
 80152f6:	8992      	ldrh	r2, [r2, #12]
 80152f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80152fc:	fb00 f202 	mul.w	r2, r0, r2
 8015300:	1a9b      	subs	r3, r3, r2
 8015302:	440b      	add	r3, r1
 8015304:	4618      	mov	r0, r3
 8015306:	f7ff fae3 	bl	80148d0 <ld_dword>
 801530a:	4603      	mov	r3, r0
 801530c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015310:	4323      	orrs	r3, r4
 8015312:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801531a:	68bb      	ldr	r3, [r7, #8]
 801531c:	009b      	lsls	r3, r3, #2
 801531e:	68fa      	ldr	r2, [r7, #12]
 8015320:	8992      	ldrh	r2, [r2, #12]
 8015322:	fbb3 f0f2 	udiv	r0, r3, r2
 8015326:	fb00 f202 	mul.w	r2, r0, r2
 801532a:	1a9b      	subs	r3, r3, r2
 801532c:	440b      	add	r3, r1
 801532e:	6879      	ldr	r1, [r7, #4]
 8015330:	4618      	mov	r0, r3
 8015332:	f7ff fb0b 	bl	801494c <st_dword>
			fs->wflag = 1;
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	2201      	movs	r2, #1
 801533a:	70da      	strb	r2, [r3, #3]
			break;
 801533c:	e008      	b.n	8015350 <put_fat+0x22e>
		}
	}
 801533e:	bf00      	nop
 8015340:	e006      	b.n	8015350 <put_fat+0x22e>
			if (res != FR_OK) break;
 8015342:	bf00      	nop
 8015344:	e004      	b.n	8015350 <put_fat+0x22e>
			if (res != FR_OK) break;
 8015346:	bf00      	nop
 8015348:	e002      	b.n	8015350 <put_fat+0x22e>
			if (res != FR_OK) break;
 801534a:	bf00      	nop
 801534c:	e000      	b.n	8015350 <put_fat+0x22e>
			if (res != FR_OK) break;
 801534e:	bf00      	nop
	return res;
 8015350:	7ffb      	ldrb	r3, [r7, #31]
}
 8015352:	4618      	mov	r0, r3
 8015354:	3724      	adds	r7, #36	; 0x24
 8015356:	46bd      	mov	sp, r7
 8015358:	bd90      	pop	{r4, r7, pc}

0801535a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801535a:	b580      	push	{r7, lr}
 801535c:	b088      	sub	sp, #32
 801535e:	af00      	add	r7, sp, #0
 8015360:	60f8      	str	r0, [r7, #12]
 8015362:	60b9      	str	r1, [r7, #8]
 8015364:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8015366:	2300      	movs	r3, #0
 8015368:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015370:	68bb      	ldr	r3, [r7, #8]
 8015372:	2b01      	cmp	r3, #1
 8015374:	d904      	bls.n	8015380 <remove_chain+0x26>
 8015376:	69bb      	ldr	r3, [r7, #24]
 8015378:	69db      	ldr	r3, [r3, #28]
 801537a:	68ba      	ldr	r2, [r7, #8]
 801537c:	429a      	cmp	r2, r3
 801537e:	d301      	bcc.n	8015384 <remove_chain+0x2a>
 8015380:	2302      	movs	r3, #2
 8015382:	e04b      	b.n	801541c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d00c      	beq.n	80153a4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801538a:	f04f 32ff 	mov.w	r2, #4294967295
 801538e:	6879      	ldr	r1, [r7, #4]
 8015390:	69b8      	ldr	r0, [r7, #24]
 8015392:	f7ff fec6 	bl	8015122 <put_fat>
 8015396:	4603      	mov	r3, r0
 8015398:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801539a:	7ffb      	ldrb	r3, [r7, #31]
 801539c:	2b00      	cmp	r3, #0
 801539e:	d001      	beq.n	80153a4 <remove_chain+0x4a>
 80153a0:	7ffb      	ldrb	r3, [r7, #31]
 80153a2:	e03b      	b.n	801541c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80153a4:	68b9      	ldr	r1, [r7, #8]
 80153a6:	68f8      	ldr	r0, [r7, #12]
 80153a8:	f7ff fde7 	bl	8014f7a <get_fat>
 80153ac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80153ae:	697b      	ldr	r3, [r7, #20]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d031      	beq.n	8015418 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80153b4:	697b      	ldr	r3, [r7, #20]
 80153b6:	2b01      	cmp	r3, #1
 80153b8:	d101      	bne.n	80153be <remove_chain+0x64>
 80153ba:	2302      	movs	r3, #2
 80153bc:	e02e      	b.n	801541c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80153be:	697b      	ldr	r3, [r7, #20]
 80153c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153c4:	d101      	bne.n	80153ca <remove_chain+0x70>
 80153c6:	2301      	movs	r3, #1
 80153c8:	e028      	b.n	801541c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80153ca:	2200      	movs	r2, #0
 80153cc:	68b9      	ldr	r1, [r7, #8]
 80153ce:	69b8      	ldr	r0, [r7, #24]
 80153d0:	f7ff fea7 	bl	8015122 <put_fat>
 80153d4:	4603      	mov	r3, r0
 80153d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80153d8:	7ffb      	ldrb	r3, [r7, #31]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d001      	beq.n	80153e2 <remove_chain+0x88>
 80153de:	7ffb      	ldrb	r3, [r7, #31]
 80153e0:	e01c      	b.n	801541c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80153e2:	69bb      	ldr	r3, [r7, #24]
 80153e4:	699a      	ldr	r2, [r3, #24]
 80153e6:	69bb      	ldr	r3, [r7, #24]
 80153e8:	69db      	ldr	r3, [r3, #28]
 80153ea:	3b02      	subs	r3, #2
 80153ec:	429a      	cmp	r2, r3
 80153ee:	d20b      	bcs.n	8015408 <remove_chain+0xae>
			fs->free_clst++;
 80153f0:	69bb      	ldr	r3, [r7, #24]
 80153f2:	699b      	ldr	r3, [r3, #24]
 80153f4:	1c5a      	adds	r2, r3, #1
 80153f6:	69bb      	ldr	r3, [r7, #24]
 80153f8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80153fa:	69bb      	ldr	r3, [r7, #24]
 80153fc:	791b      	ldrb	r3, [r3, #4]
 80153fe:	f043 0301 	orr.w	r3, r3, #1
 8015402:	b2da      	uxtb	r2, r3
 8015404:	69bb      	ldr	r3, [r7, #24]
 8015406:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8015408:	697b      	ldr	r3, [r7, #20]
 801540a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801540c:	69bb      	ldr	r3, [r7, #24]
 801540e:	69db      	ldr	r3, [r3, #28]
 8015410:	68ba      	ldr	r2, [r7, #8]
 8015412:	429a      	cmp	r2, r3
 8015414:	d3c6      	bcc.n	80153a4 <remove_chain+0x4a>
 8015416:	e000      	b.n	801541a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8015418:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801541a:	2300      	movs	r3, #0
}
 801541c:	4618      	mov	r0, r3
 801541e:	3720      	adds	r7, #32
 8015420:	46bd      	mov	sp, r7
 8015422:	bd80      	pop	{r7, pc}

08015424 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b088      	sub	sp, #32
 8015428:	af00      	add	r7, sp, #0
 801542a:	6078      	str	r0, [r7, #4]
 801542c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015434:	683b      	ldr	r3, [r7, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d10d      	bne.n	8015456 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801543a:	693b      	ldr	r3, [r7, #16]
 801543c:	695b      	ldr	r3, [r3, #20]
 801543e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015440:	69bb      	ldr	r3, [r7, #24]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d004      	beq.n	8015450 <create_chain+0x2c>
 8015446:	693b      	ldr	r3, [r7, #16]
 8015448:	69db      	ldr	r3, [r3, #28]
 801544a:	69ba      	ldr	r2, [r7, #24]
 801544c:	429a      	cmp	r2, r3
 801544e:	d31b      	bcc.n	8015488 <create_chain+0x64>
 8015450:	2301      	movs	r3, #1
 8015452:	61bb      	str	r3, [r7, #24]
 8015454:	e018      	b.n	8015488 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8015456:	6839      	ldr	r1, [r7, #0]
 8015458:	6878      	ldr	r0, [r7, #4]
 801545a:	f7ff fd8e 	bl	8014f7a <get_fat>
 801545e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	2b01      	cmp	r3, #1
 8015464:	d801      	bhi.n	801546a <create_chain+0x46>
 8015466:	2301      	movs	r3, #1
 8015468:	e070      	b.n	801554c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015470:	d101      	bne.n	8015476 <create_chain+0x52>
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	e06a      	b.n	801554c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015476:	693b      	ldr	r3, [r7, #16]
 8015478:	69db      	ldr	r3, [r3, #28]
 801547a:	68fa      	ldr	r2, [r7, #12]
 801547c:	429a      	cmp	r2, r3
 801547e:	d201      	bcs.n	8015484 <create_chain+0x60>
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	e063      	b.n	801554c <create_chain+0x128>
		scl = clst;
 8015484:	683b      	ldr	r3, [r7, #0]
 8015486:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8015488:	69bb      	ldr	r3, [r7, #24]
 801548a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801548c:	69fb      	ldr	r3, [r7, #28]
 801548e:	3301      	adds	r3, #1
 8015490:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8015492:	693b      	ldr	r3, [r7, #16]
 8015494:	69db      	ldr	r3, [r3, #28]
 8015496:	69fa      	ldr	r2, [r7, #28]
 8015498:	429a      	cmp	r2, r3
 801549a:	d307      	bcc.n	80154ac <create_chain+0x88>
				ncl = 2;
 801549c:	2302      	movs	r3, #2
 801549e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80154a0:	69fa      	ldr	r2, [r7, #28]
 80154a2:	69bb      	ldr	r3, [r7, #24]
 80154a4:	429a      	cmp	r2, r3
 80154a6:	d901      	bls.n	80154ac <create_chain+0x88>
 80154a8:	2300      	movs	r3, #0
 80154aa:	e04f      	b.n	801554c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80154ac:	69f9      	ldr	r1, [r7, #28]
 80154ae:	6878      	ldr	r0, [r7, #4]
 80154b0:	f7ff fd63 	bl	8014f7a <get_fat>
 80154b4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d00e      	beq.n	80154da <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	2b01      	cmp	r3, #1
 80154c0:	d003      	beq.n	80154ca <create_chain+0xa6>
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154c8:	d101      	bne.n	80154ce <create_chain+0xaa>
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	e03e      	b.n	801554c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80154ce:	69fa      	ldr	r2, [r7, #28]
 80154d0:	69bb      	ldr	r3, [r7, #24]
 80154d2:	429a      	cmp	r2, r3
 80154d4:	d1da      	bne.n	801548c <create_chain+0x68>
 80154d6:	2300      	movs	r3, #0
 80154d8:	e038      	b.n	801554c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80154da:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80154dc:	f04f 32ff 	mov.w	r2, #4294967295
 80154e0:	69f9      	ldr	r1, [r7, #28]
 80154e2:	6938      	ldr	r0, [r7, #16]
 80154e4:	f7ff fe1d 	bl	8015122 <put_fat>
 80154e8:	4603      	mov	r3, r0
 80154ea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80154ec:	7dfb      	ldrb	r3, [r7, #23]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d109      	bne.n	8015506 <create_chain+0xe2>
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d006      	beq.n	8015506 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80154f8:	69fa      	ldr	r2, [r7, #28]
 80154fa:	6839      	ldr	r1, [r7, #0]
 80154fc:	6938      	ldr	r0, [r7, #16]
 80154fe:	f7ff fe10 	bl	8015122 <put_fat>
 8015502:	4603      	mov	r3, r0
 8015504:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8015506:	7dfb      	ldrb	r3, [r7, #23]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d116      	bne.n	801553a <create_chain+0x116>
		fs->last_clst = ncl;
 801550c:	693b      	ldr	r3, [r7, #16]
 801550e:	69fa      	ldr	r2, [r7, #28]
 8015510:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015512:	693b      	ldr	r3, [r7, #16]
 8015514:	699a      	ldr	r2, [r3, #24]
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	69db      	ldr	r3, [r3, #28]
 801551a:	3b02      	subs	r3, #2
 801551c:	429a      	cmp	r2, r3
 801551e:	d804      	bhi.n	801552a <create_chain+0x106>
 8015520:	693b      	ldr	r3, [r7, #16]
 8015522:	699b      	ldr	r3, [r3, #24]
 8015524:	1e5a      	subs	r2, r3, #1
 8015526:	693b      	ldr	r3, [r7, #16]
 8015528:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801552a:	693b      	ldr	r3, [r7, #16]
 801552c:	791b      	ldrb	r3, [r3, #4]
 801552e:	f043 0301 	orr.w	r3, r3, #1
 8015532:	b2da      	uxtb	r2, r3
 8015534:	693b      	ldr	r3, [r7, #16]
 8015536:	711a      	strb	r2, [r3, #4]
 8015538:	e007      	b.n	801554a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801553a:	7dfb      	ldrb	r3, [r7, #23]
 801553c:	2b01      	cmp	r3, #1
 801553e:	d102      	bne.n	8015546 <create_chain+0x122>
 8015540:	f04f 33ff 	mov.w	r3, #4294967295
 8015544:	e000      	b.n	8015548 <create_chain+0x124>
 8015546:	2301      	movs	r3, #1
 8015548:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801554a:	69fb      	ldr	r3, [r7, #28]
}
 801554c:	4618      	mov	r0, r3
 801554e:	3720      	adds	r7, #32
 8015550:	46bd      	mov	sp, r7
 8015552:	bd80      	pop	{r7, pc}

08015554 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015554:	b480      	push	{r7}
 8015556:	b087      	sub	sp, #28
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
 801555c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015568:	3304      	adds	r3, #4
 801556a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	899b      	ldrh	r3, [r3, #12]
 8015570:	461a      	mov	r2, r3
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	fbb3 f3f2 	udiv	r3, r3, r2
 8015578:	68fa      	ldr	r2, [r7, #12]
 801557a:	8952      	ldrh	r2, [r2, #10]
 801557c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015580:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015582:	693b      	ldr	r3, [r7, #16]
 8015584:	1d1a      	adds	r2, r3, #4
 8015586:	613a      	str	r2, [r7, #16]
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801558c:	68bb      	ldr	r3, [r7, #8]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d101      	bne.n	8015596 <clmt_clust+0x42>
 8015592:	2300      	movs	r3, #0
 8015594:	e010      	b.n	80155b8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8015596:	697a      	ldr	r2, [r7, #20]
 8015598:	68bb      	ldr	r3, [r7, #8]
 801559a:	429a      	cmp	r2, r3
 801559c:	d307      	bcc.n	80155ae <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801559e:	697a      	ldr	r2, [r7, #20]
 80155a0:	68bb      	ldr	r3, [r7, #8]
 80155a2:	1ad3      	subs	r3, r2, r3
 80155a4:	617b      	str	r3, [r7, #20]
 80155a6:	693b      	ldr	r3, [r7, #16]
 80155a8:	3304      	adds	r3, #4
 80155aa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80155ac:	e7e9      	b.n	8015582 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80155ae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80155b0:	693b      	ldr	r3, [r7, #16]
 80155b2:	681a      	ldr	r2, [r3, #0]
 80155b4:	697b      	ldr	r3, [r7, #20]
 80155b6:	4413      	add	r3, r2
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	371c      	adds	r7, #28
 80155bc:	46bd      	mov	sp, r7
 80155be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c2:	4770      	bx	lr

080155c4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b086      	sub	sp, #24
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
 80155cc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80155da:	d204      	bcs.n	80155e6 <dir_sdi+0x22>
 80155dc:	683b      	ldr	r3, [r7, #0]
 80155de:	f003 031f 	and.w	r3, r3, #31
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d001      	beq.n	80155ea <dir_sdi+0x26>
		return FR_INT_ERR;
 80155e6:	2302      	movs	r3, #2
 80155e8:	e071      	b.n	80156ce <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	683a      	ldr	r2, [r7, #0]
 80155ee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	689b      	ldr	r3, [r3, #8]
 80155f4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80155f6:	697b      	ldr	r3, [r7, #20]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d106      	bne.n	801560a <dir_sdi+0x46>
 80155fc:	693b      	ldr	r3, [r7, #16]
 80155fe:	781b      	ldrb	r3, [r3, #0]
 8015600:	2b02      	cmp	r3, #2
 8015602:	d902      	bls.n	801560a <dir_sdi+0x46>
		clst = fs->dirbase;
 8015604:	693b      	ldr	r3, [r7, #16]
 8015606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015608:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801560a:	697b      	ldr	r3, [r7, #20]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d10c      	bne.n	801562a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015610:	683b      	ldr	r3, [r7, #0]
 8015612:	095b      	lsrs	r3, r3, #5
 8015614:	693a      	ldr	r2, [r7, #16]
 8015616:	8912      	ldrh	r2, [r2, #8]
 8015618:	4293      	cmp	r3, r2
 801561a:	d301      	bcc.n	8015620 <dir_sdi+0x5c>
 801561c:	2302      	movs	r3, #2
 801561e:	e056      	b.n	80156ce <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8015620:	693b      	ldr	r3, [r7, #16]
 8015622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	61da      	str	r2, [r3, #28]
 8015628:	e02d      	b.n	8015686 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801562a:	693b      	ldr	r3, [r7, #16]
 801562c:	895b      	ldrh	r3, [r3, #10]
 801562e:	461a      	mov	r2, r3
 8015630:	693b      	ldr	r3, [r7, #16]
 8015632:	899b      	ldrh	r3, [r3, #12]
 8015634:	fb02 f303 	mul.w	r3, r2, r3
 8015638:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801563a:	e019      	b.n	8015670 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	6979      	ldr	r1, [r7, #20]
 8015640:	4618      	mov	r0, r3
 8015642:	f7ff fc9a 	bl	8014f7a <get_fat>
 8015646:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015648:	697b      	ldr	r3, [r7, #20]
 801564a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801564e:	d101      	bne.n	8015654 <dir_sdi+0x90>
 8015650:	2301      	movs	r3, #1
 8015652:	e03c      	b.n	80156ce <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	2b01      	cmp	r3, #1
 8015658:	d904      	bls.n	8015664 <dir_sdi+0xa0>
 801565a:	693b      	ldr	r3, [r7, #16]
 801565c:	69db      	ldr	r3, [r3, #28]
 801565e:	697a      	ldr	r2, [r7, #20]
 8015660:	429a      	cmp	r2, r3
 8015662:	d301      	bcc.n	8015668 <dir_sdi+0xa4>
 8015664:	2302      	movs	r3, #2
 8015666:	e032      	b.n	80156ce <dir_sdi+0x10a>
			ofs -= csz;
 8015668:	683a      	ldr	r2, [r7, #0]
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	1ad3      	subs	r3, r2, r3
 801566e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015670:	683a      	ldr	r2, [r7, #0]
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	429a      	cmp	r2, r3
 8015676:	d2e1      	bcs.n	801563c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8015678:	6979      	ldr	r1, [r7, #20]
 801567a:	6938      	ldr	r0, [r7, #16]
 801567c:	f7ff fc5e 	bl	8014f3c <clust2sect>
 8015680:	4602      	mov	r2, r0
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	697a      	ldr	r2, [r7, #20]
 801568a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	69db      	ldr	r3, [r3, #28]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d101      	bne.n	8015698 <dir_sdi+0xd4>
 8015694:	2302      	movs	r3, #2
 8015696:	e01a      	b.n	80156ce <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	69da      	ldr	r2, [r3, #28]
 801569c:	693b      	ldr	r3, [r7, #16]
 801569e:	899b      	ldrh	r3, [r3, #12]
 80156a0:	4619      	mov	r1, r3
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80156a8:	441a      	add	r2, r3
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80156ae:	693b      	ldr	r3, [r7, #16]
 80156b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80156b4:	693b      	ldr	r3, [r7, #16]
 80156b6:	899b      	ldrh	r3, [r3, #12]
 80156b8:	461a      	mov	r2, r3
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80156c0:	fb00 f202 	mul.w	r2, r0, r2
 80156c4:	1a9b      	subs	r3, r3, r2
 80156c6:	18ca      	adds	r2, r1, r3
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80156cc:	2300      	movs	r3, #0
}
 80156ce:	4618      	mov	r0, r3
 80156d0:	3718      	adds	r7, #24
 80156d2:	46bd      	mov	sp, r7
 80156d4:	bd80      	pop	{r7, pc}

080156d6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80156d6:	b580      	push	{r7, lr}
 80156d8:	b086      	sub	sp, #24
 80156da:	af00      	add	r7, sp, #0
 80156dc:	6078      	str	r0, [r7, #4]
 80156de:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	695b      	ldr	r3, [r3, #20]
 80156ea:	3320      	adds	r3, #32
 80156ec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	69db      	ldr	r3, [r3, #28]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d003      	beq.n	80156fe <dir_next+0x28>
 80156f6:	68bb      	ldr	r3, [r7, #8]
 80156f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80156fc:	d301      	bcc.n	8015702 <dir_next+0x2c>
 80156fe:	2304      	movs	r3, #4
 8015700:	e0bb      	b.n	801587a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	899b      	ldrh	r3, [r3, #12]
 8015706:	461a      	mov	r2, r3
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	fbb3 f1f2 	udiv	r1, r3, r2
 801570e:	fb01 f202 	mul.w	r2, r1, r2
 8015712:	1a9b      	subs	r3, r3, r2
 8015714:	2b00      	cmp	r3, #0
 8015716:	f040 809d 	bne.w	8015854 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	69db      	ldr	r3, [r3, #28]
 801571e:	1c5a      	adds	r2, r3, #1
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	699b      	ldr	r3, [r3, #24]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d10b      	bne.n	8015744 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801572c:	68bb      	ldr	r3, [r7, #8]
 801572e:	095b      	lsrs	r3, r3, #5
 8015730:	68fa      	ldr	r2, [r7, #12]
 8015732:	8912      	ldrh	r2, [r2, #8]
 8015734:	4293      	cmp	r3, r2
 8015736:	f0c0 808d 	bcc.w	8015854 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	2200      	movs	r2, #0
 801573e:	61da      	str	r2, [r3, #28]
 8015740:	2304      	movs	r3, #4
 8015742:	e09a      	b.n	801587a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	899b      	ldrh	r3, [r3, #12]
 8015748:	461a      	mov	r2, r3
 801574a:	68bb      	ldr	r3, [r7, #8]
 801574c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015750:	68fa      	ldr	r2, [r7, #12]
 8015752:	8952      	ldrh	r2, [r2, #10]
 8015754:	3a01      	subs	r2, #1
 8015756:	4013      	ands	r3, r2
 8015758:	2b00      	cmp	r3, #0
 801575a:	d17b      	bne.n	8015854 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801575c:	687a      	ldr	r2, [r7, #4]
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	699b      	ldr	r3, [r3, #24]
 8015762:	4619      	mov	r1, r3
 8015764:	4610      	mov	r0, r2
 8015766:	f7ff fc08 	bl	8014f7a <get_fat>
 801576a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801576c:	697b      	ldr	r3, [r7, #20]
 801576e:	2b01      	cmp	r3, #1
 8015770:	d801      	bhi.n	8015776 <dir_next+0xa0>
 8015772:	2302      	movs	r3, #2
 8015774:	e081      	b.n	801587a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015776:	697b      	ldr	r3, [r7, #20]
 8015778:	f1b3 3fff 	cmp.w	r3, #4294967295
 801577c:	d101      	bne.n	8015782 <dir_next+0xac>
 801577e:	2301      	movs	r3, #1
 8015780:	e07b      	b.n	801587a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	69db      	ldr	r3, [r3, #28]
 8015786:	697a      	ldr	r2, [r7, #20]
 8015788:	429a      	cmp	r2, r3
 801578a:	d359      	bcc.n	8015840 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801578c:	683b      	ldr	r3, [r7, #0]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d104      	bne.n	801579c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	2200      	movs	r2, #0
 8015796:	61da      	str	r2, [r3, #28]
 8015798:	2304      	movs	r3, #4
 801579a:	e06e      	b.n	801587a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801579c:	687a      	ldr	r2, [r7, #4]
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	699b      	ldr	r3, [r3, #24]
 80157a2:	4619      	mov	r1, r3
 80157a4:	4610      	mov	r0, r2
 80157a6:	f7ff fe3d 	bl	8015424 <create_chain>
 80157aa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80157ac:	697b      	ldr	r3, [r7, #20]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d101      	bne.n	80157b6 <dir_next+0xe0>
 80157b2:	2307      	movs	r3, #7
 80157b4:	e061      	b.n	801587a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80157b6:	697b      	ldr	r3, [r7, #20]
 80157b8:	2b01      	cmp	r3, #1
 80157ba:	d101      	bne.n	80157c0 <dir_next+0xea>
 80157bc:	2302      	movs	r3, #2
 80157be:	e05c      	b.n	801587a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80157c0:	697b      	ldr	r3, [r7, #20]
 80157c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157c6:	d101      	bne.n	80157cc <dir_next+0xf6>
 80157c8:	2301      	movs	r3, #1
 80157ca:	e056      	b.n	801587a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80157cc:	68f8      	ldr	r0, [r7, #12]
 80157ce:	f7ff fad3 	bl	8014d78 <sync_window>
 80157d2:	4603      	mov	r3, r0
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d001      	beq.n	80157dc <dir_next+0x106>
 80157d8:	2301      	movs	r3, #1
 80157da:	e04e      	b.n	801587a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	899b      	ldrh	r3, [r3, #12]
 80157e6:	461a      	mov	r2, r3
 80157e8:	2100      	movs	r1, #0
 80157ea:	f7ff f8fc 	bl	80149e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80157ee:	2300      	movs	r3, #0
 80157f0:	613b      	str	r3, [r7, #16]
 80157f2:	6979      	ldr	r1, [r7, #20]
 80157f4:	68f8      	ldr	r0, [r7, #12]
 80157f6:	f7ff fba1 	bl	8014f3c <clust2sect>
 80157fa:	4602      	mov	r2, r0
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	635a      	str	r2, [r3, #52]	; 0x34
 8015800:	e012      	b.n	8015828 <dir_next+0x152>
						fs->wflag = 1;
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	2201      	movs	r2, #1
 8015806:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015808:	68f8      	ldr	r0, [r7, #12]
 801580a:	f7ff fab5 	bl	8014d78 <sync_window>
 801580e:	4603      	mov	r3, r0
 8015810:	2b00      	cmp	r3, #0
 8015812:	d001      	beq.n	8015818 <dir_next+0x142>
 8015814:	2301      	movs	r3, #1
 8015816:	e030      	b.n	801587a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015818:	693b      	ldr	r3, [r7, #16]
 801581a:	3301      	adds	r3, #1
 801581c:	613b      	str	r3, [r7, #16]
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015822:	1c5a      	adds	r2, r3, #1
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	635a      	str	r2, [r3, #52]	; 0x34
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	895b      	ldrh	r3, [r3, #10]
 801582c:	461a      	mov	r2, r3
 801582e:	693b      	ldr	r3, [r7, #16]
 8015830:	4293      	cmp	r3, r2
 8015832:	d3e6      	bcc.n	8015802 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015838:	693b      	ldr	r3, [r7, #16]
 801583a:	1ad2      	subs	r2, r2, r3
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	697a      	ldr	r2, [r7, #20]
 8015844:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8015846:	6979      	ldr	r1, [r7, #20]
 8015848:	68f8      	ldr	r0, [r7, #12]
 801584a:	f7ff fb77 	bl	8014f3c <clust2sect>
 801584e:	4602      	mov	r2, r0
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	68ba      	ldr	r2, [r7, #8]
 8015858:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	899b      	ldrh	r3, [r3, #12]
 8015864:	461a      	mov	r2, r3
 8015866:	68bb      	ldr	r3, [r7, #8]
 8015868:	fbb3 f0f2 	udiv	r0, r3, r2
 801586c:	fb00 f202 	mul.w	r2, r0, r2
 8015870:	1a9b      	subs	r3, r3, r2
 8015872:	18ca      	adds	r2, r1, r3
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015878:	2300      	movs	r3, #0
}
 801587a:	4618      	mov	r0, r3
 801587c:	3718      	adds	r7, #24
 801587e:	46bd      	mov	sp, r7
 8015880:	bd80      	pop	{r7, pc}

08015882 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015882:	b580      	push	{r7, lr}
 8015884:	b086      	sub	sp, #24
 8015886:	af00      	add	r7, sp, #0
 8015888:	6078      	str	r0, [r7, #4]
 801588a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015892:	2100      	movs	r1, #0
 8015894:	6878      	ldr	r0, [r7, #4]
 8015896:	f7ff fe95 	bl	80155c4 <dir_sdi>
 801589a:	4603      	mov	r3, r0
 801589c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801589e:	7dfb      	ldrb	r3, [r7, #23]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d12b      	bne.n	80158fc <dir_alloc+0x7a>
		n = 0;
 80158a4:	2300      	movs	r3, #0
 80158a6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	69db      	ldr	r3, [r3, #28]
 80158ac:	4619      	mov	r1, r3
 80158ae:	68f8      	ldr	r0, [r7, #12]
 80158b0:	f7ff faa6 	bl	8014e00 <move_window>
 80158b4:	4603      	mov	r3, r0
 80158b6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80158b8:	7dfb      	ldrb	r3, [r7, #23]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d11d      	bne.n	80158fa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	6a1b      	ldr	r3, [r3, #32]
 80158c2:	781b      	ldrb	r3, [r3, #0]
 80158c4:	2be5      	cmp	r3, #229	; 0xe5
 80158c6:	d004      	beq.n	80158d2 <dir_alloc+0x50>
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	6a1b      	ldr	r3, [r3, #32]
 80158cc:	781b      	ldrb	r3, [r3, #0]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d107      	bne.n	80158e2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80158d2:	693b      	ldr	r3, [r7, #16]
 80158d4:	3301      	adds	r3, #1
 80158d6:	613b      	str	r3, [r7, #16]
 80158d8:	693a      	ldr	r2, [r7, #16]
 80158da:	683b      	ldr	r3, [r7, #0]
 80158dc:	429a      	cmp	r2, r3
 80158de:	d102      	bne.n	80158e6 <dir_alloc+0x64>
 80158e0:	e00c      	b.n	80158fc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80158e2:	2300      	movs	r3, #0
 80158e4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80158e6:	2101      	movs	r1, #1
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f7ff fef4 	bl	80156d6 <dir_next>
 80158ee:	4603      	mov	r3, r0
 80158f0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80158f2:	7dfb      	ldrb	r3, [r7, #23]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d0d7      	beq.n	80158a8 <dir_alloc+0x26>
 80158f8:	e000      	b.n	80158fc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80158fa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80158fc:	7dfb      	ldrb	r3, [r7, #23]
 80158fe:	2b04      	cmp	r3, #4
 8015900:	d101      	bne.n	8015906 <dir_alloc+0x84>
 8015902:	2307      	movs	r3, #7
 8015904:	75fb      	strb	r3, [r7, #23]
	return res;
 8015906:	7dfb      	ldrb	r3, [r7, #23]
}
 8015908:	4618      	mov	r0, r3
 801590a:	3718      	adds	r7, #24
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}

08015910 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b084      	sub	sp, #16
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
 8015918:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801591a:	683b      	ldr	r3, [r7, #0]
 801591c:	331a      	adds	r3, #26
 801591e:	4618      	mov	r0, r3
 8015920:	f7fe ffbe 	bl	80148a0 <ld_word>
 8015924:	4603      	mov	r3, r0
 8015926:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	781b      	ldrb	r3, [r3, #0]
 801592c:	2b03      	cmp	r3, #3
 801592e:	d109      	bne.n	8015944 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015930:	683b      	ldr	r3, [r7, #0]
 8015932:	3314      	adds	r3, #20
 8015934:	4618      	mov	r0, r3
 8015936:	f7fe ffb3 	bl	80148a0 <ld_word>
 801593a:	4603      	mov	r3, r0
 801593c:	041b      	lsls	r3, r3, #16
 801593e:	68fa      	ldr	r2, [r7, #12]
 8015940:	4313      	orrs	r3, r2
 8015942:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8015944:	68fb      	ldr	r3, [r7, #12]
}
 8015946:	4618      	mov	r0, r3
 8015948:	3710      	adds	r7, #16
 801594a:	46bd      	mov	sp, r7
 801594c:	bd80      	pop	{r7, pc}

0801594e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801594e:	b580      	push	{r7, lr}
 8015950:	b084      	sub	sp, #16
 8015952:	af00      	add	r7, sp, #0
 8015954:	60f8      	str	r0, [r7, #12]
 8015956:	60b9      	str	r1, [r7, #8]
 8015958:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801595a:	68bb      	ldr	r3, [r7, #8]
 801595c:	331a      	adds	r3, #26
 801595e:	687a      	ldr	r2, [r7, #4]
 8015960:	b292      	uxth	r2, r2
 8015962:	4611      	mov	r1, r2
 8015964:	4618      	mov	r0, r3
 8015966:	f7fe ffd6 	bl	8014916 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	781b      	ldrb	r3, [r3, #0]
 801596e:	2b03      	cmp	r3, #3
 8015970:	d109      	bne.n	8015986 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015972:	68bb      	ldr	r3, [r7, #8]
 8015974:	f103 0214 	add.w	r2, r3, #20
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	0c1b      	lsrs	r3, r3, #16
 801597c:	b29b      	uxth	r3, r3
 801597e:	4619      	mov	r1, r3
 8015980:	4610      	mov	r0, r2
 8015982:	f7fe ffc8 	bl	8014916 <st_word>
	}
}
 8015986:	bf00      	nop
 8015988:	3710      	adds	r7, #16
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}
	...

08015990 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8015990:	b590      	push	{r4, r7, lr}
 8015992:	b087      	sub	sp, #28
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
 8015998:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	331a      	adds	r3, #26
 801599e:	4618      	mov	r0, r3
 80159a0:	f7fe ff7e 	bl	80148a0 <ld_word>
 80159a4:	4603      	mov	r3, r0
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d001      	beq.n	80159ae <cmp_lfn+0x1e>
 80159aa:	2300      	movs	r3, #0
 80159ac:	e059      	b.n	8015a62 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80159ae:	683b      	ldr	r3, [r7, #0]
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80159b6:	1e5a      	subs	r2, r3, #1
 80159b8:	4613      	mov	r3, r2
 80159ba:	005b      	lsls	r3, r3, #1
 80159bc:	4413      	add	r3, r2
 80159be:	009b      	lsls	r3, r3, #2
 80159c0:	4413      	add	r3, r2
 80159c2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80159c4:	2301      	movs	r3, #1
 80159c6:	81fb      	strh	r3, [r7, #14]
 80159c8:	2300      	movs	r3, #0
 80159ca:	613b      	str	r3, [r7, #16]
 80159cc:	e033      	b.n	8015a36 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80159ce:	4a27      	ldr	r2, [pc, #156]	; (8015a6c <cmp_lfn+0xdc>)
 80159d0:	693b      	ldr	r3, [r7, #16]
 80159d2:	4413      	add	r3, r2
 80159d4:	781b      	ldrb	r3, [r3, #0]
 80159d6:	461a      	mov	r2, r3
 80159d8:	683b      	ldr	r3, [r7, #0]
 80159da:	4413      	add	r3, r2
 80159dc:	4618      	mov	r0, r3
 80159de:	f7fe ff5f 	bl	80148a0 <ld_word>
 80159e2:	4603      	mov	r3, r0
 80159e4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80159e6:	89fb      	ldrh	r3, [r7, #14]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d01a      	beq.n	8015a22 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80159ec:	697b      	ldr	r3, [r7, #20]
 80159ee:	2bfe      	cmp	r3, #254	; 0xfe
 80159f0:	d812      	bhi.n	8015a18 <cmp_lfn+0x88>
 80159f2:	89bb      	ldrh	r3, [r7, #12]
 80159f4:	4618      	mov	r0, r3
 80159f6:	f001 fe11 	bl	801761c <ff_wtoupper>
 80159fa:	4603      	mov	r3, r0
 80159fc:	461c      	mov	r4, r3
 80159fe:	697b      	ldr	r3, [r7, #20]
 8015a00:	1c5a      	adds	r2, r3, #1
 8015a02:	617a      	str	r2, [r7, #20]
 8015a04:	005b      	lsls	r3, r3, #1
 8015a06:	687a      	ldr	r2, [r7, #4]
 8015a08:	4413      	add	r3, r2
 8015a0a:	881b      	ldrh	r3, [r3, #0]
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	f001 fe05 	bl	801761c <ff_wtoupper>
 8015a12:	4603      	mov	r3, r0
 8015a14:	429c      	cmp	r4, r3
 8015a16:	d001      	beq.n	8015a1c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8015a18:	2300      	movs	r3, #0
 8015a1a:	e022      	b.n	8015a62 <cmp_lfn+0xd2>
			}
			wc = uc;
 8015a1c:	89bb      	ldrh	r3, [r7, #12]
 8015a1e:	81fb      	strh	r3, [r7, #14]
 8015a20:	e006      	b.n	8015a30 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015a22:	89bb      	ldrh	r3, [r7, #12]
 8015a24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015a28:	4293      	cmp	r3, r2
 8015a2a:	d001      	beq.n	8015a30 <cmp_lfn+0xa0>
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	e018      	b.n	8015a62 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015a30:	693b      	ldr	r3, [r7, #16]
 8015a32:	3301      	adds	r3, #1
 8015a34:	613b      	str	r3, [r7, #16]
 8015a36:	693b      	ldr	r3, [r7, #16]
 8015a38:	2b0c      	cmp	r3, #12
 8015a3a:	d9c8      	bls.n	80159ce <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8015a3c:	683b      	ldr	r3, [r7, #0]
 8015a3e:	781b      	ldrb	r3, [r3, #0]
 8015a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d00b      	beq.n	8015a60 <cmp_lfn+0xd0>
 8015a48:	89fb      	ldrh	r3, [r7, #14]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d008      	beq.n	8015a60 <cmp_lfn+0xd0>
 8015a4e:	697b      	ldr	r3, [r7, #20]
 8015a50:	005b      	lsls	r3, r3, #1
 8015a52:	687a      	ldr	r2, [r7, #4]
 8015a54:	4413      	add	r3, r2
 8015a56:	881b      	ldrh	r3, [r3, #0]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d001      	beq.n	8015a60 <cmp_lfn+0xd0>
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	e000      	b.n	8015a62 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8015a60:	2301      	movs	r3, #1
}
 8015a62:	4618      	mov	r0, r3
 8015a64:	371c      	adds	r7, #28
 8015a66:	46bd      	mov	sp, r7
 8015a68:	bd90      	pop	{r4, r7, pc}
 8015a6a:	bf00      	nop
 8015a6c:	0801ca78 	.word	0x0801ca78

08015a70 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b088      	sub	sp, #32
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	60f8      	str	r0, [r7, #12]
 8015a78:	60b9      	str	r1, [r7, #8]
 8015a7a:	4611      	mov	r1, r2
 8015a7c:	461a      	mov	r2, r3
 8015a7e:	460b      	mov	r3, r1
 8015a80:	71fb      	strb	r3, [r7, #7]
 8015a82:	4613      	mov	r3, r2
 8015a84:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8015a86:	68bb      	ldr	r3, [r7, #8]
 8015a88:	330d      	adds	r3, #13
 8015a8a:	79ba      	ldrb	r2, [r7, #6]
 8015a8c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8015a8e:	68bb      	ldr	r3, [r7, #8]
 8015a90:	330b      	adds	r3, #11
 8015a92:	220f      	movs	r2, #15
 8015a94:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8015a96:	68bb      	ldr	r3, [r7, #8]
 8015a98:	330c      	adds	r3, #12
 8015a9a:	2200      	movs	r2, #0
 8015a9c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8015a9e:	68bb      	ldr	r3, [r7, #8]
 8015aa0:	331a      	adds	r3, #26
 8015aa2:	2100      	movs	r1, #0
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7fe ff36 	bl	8014916 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8015aaa:	79fb      	ldrb	r3, [r7, #7]
 8015aac:	1e5a      	subs	r2, r3, #1
 8015aae:	4613      	mov	r3, r2
 8015ab0:	005b      	lsls	r3, r3, #1
 8015ab2:	4413      	add	r3, r2
 8015ab4:	009b      	lsls	r3, r3, #2
 8015ab6:	4413      	add	r3, r2
 8015ab8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8015aba:	2300      	movs	r3, #0
 8015abc:	82fb      	strh	r3, [r7, #22]
 8015abe:	2300      	movs	r3, #0
 8015ac0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015ac2:	8afb      	ldrh	r3, [r7, #22]
 8015ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015ac8:	4293      	cmp	r3, r2
 8015aca:	d007      	beq.n	8015adc <put_lfn+0x6c>
 8015acc:	69fb      	ldr	r3, [r7, #28]
 8015ace:	1c5a      	adds	r2, r3, #1
 8015ad0:	61fa      	str	r2, [r7, #28]
 8015ad2:	005b      	lsls	r3, r3, #1
 8015ad4:	68fa      	ldr	r2, [r7, #12]
 8015ad6:	4413      	add	r3, r2
 8015ad8:	881b      	ldrh	r3, [r3, #0]
 8015ada:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8015adc:	4a17      	ldr	r2, [pc, #92]	; (8015b3c <put_lfn+0xcc>)
 8015ade:	69bb      	ldr	r3, [r7, #24]
 8015ae0:	4413      	add	r3, r2
 8015ae2:	781b      	ldrb	r3, [r3, #0]
 8015ae4:	461a      	mov	r2, r3
 8015ae6:	68bb      	ldr	r3, [r7, #8]
 8015ae8:	4413      	add	r3, r2
 8015aea:	8afa      	ldrh	r2, [r7, #22]
 8015aec:	4611      	mov	r1, r2
 8015aee:	4618      	mov	r0, r3
 8015af0:	f7fe ff11 	bl	8014916 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015af4:	8afb      	ldrh	r3, [r7, #22]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d102      	bne.n	8015b00 <put_lfn+0x90>
 8015afa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015afe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8015b00:	69bb      	ldr	r3, [r7, #24]
 8015b02:	3301      	adds	r3, #1
 8015b04:	61bb      	str	r3, [r7, #24]
 8015b06:	69bb      	ldr	r3, [r7, #24]
 8015b08:	2b0c      	cmp	r3, #12
 8015b0a:	d9da      	bls.n	8015ac2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8015b0c:	8afb      	ldrh	r3, [r7, #22]
 8015b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b12:	4293      	cmp	r3, r2
 8015b14:	d006      	beq.n	8015b24 <put_lfn+0xb4>
 8015b16:	69fb      	ldr	r3, [r7, #28]
 8015b18:	005b      	lsls	r3, r3, #1
 8015b1a:	68fa      	ldr	r2, [r7, #12]
 8015b1c:	4413      	add	r3, r2
 8015b1e:	881b      	ldrh	r3, [r3, #0]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d103      	bne.n	8015b2c <put_lfn+0xbc>
 8015b24:	79fb      	ldrb	r3, [r7, #7]
 8015b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b2a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8015b2c:	68bb      	ldr	r3, [r7, #8]
 8015b2e:	79fa      	ldrb	r2, [r7, #7]
 8015b30:	701a      	strb	r2, [r3, #0]
}
 8015b32:	bf00      	nop
 8015b34:	3720      	adds	r7, #32
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bd80      	pop	{r7, pc}
 8015b3a:	bf00      	nop
 8015b3c:	0801ca78 	.word	0x0801ca78

08015b40 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b08c      	sub	sp, #48	; 0x30
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	60f8      	str	r0, [r7, #12]
 8015b48:	60b9      	str	r1, [r7, #8]
 8015b4a:	607a      	str	r2, [r7, #4]
 8015b4c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8015b4e:	220b      	movs	r2, #11
 8015b50:	68b9      	ldr	r1, [r7, #8]
 8015b52:	68f8      	ldr	r0, [r7, #12]
 8015b54:	f7fe ff26 	bl	80149a4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8015b58:	683b      	ldr	r3, [r7, #0]
 8015b5a:	2b05      	cmp	r3, #5
 8015b5c:	d929      	bls.n	8015bb2 <gen_numname+0x72>
		sr = seq;
 8015b5e:	683b      	ldr	r3, [r7, #0]
 8015b60:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8015b62:	e020      	b.n	8015ba6 <gen_numname+0x66>
			wc = *lfn++;
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	1c9a      	adds	r2, r3, #2
 8015b68:	607a      	str	r2, [r7, #4]
 8015b6a:	881b      	ldrh	r3, [r3, #0]
 8015b6c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8015b6e:	2300      	movs	r3, #0
 8015b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8015b72:	e015      	b.n	8015ba0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8015b74:	69fb      	ldr	r3, [r7, #28]
 8015b76:	005a      	lsls	r2, r3, #1
 8015b78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b7a:	f003 0301 	and.w	r3, r3, #1
 8015b7e:	4413      	add	r3, r2
 8015b80:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8015b82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b84:	085b      	lsrs	r3, r3, #1
 8015b86:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8015b88:	69fb      	ldr	r3, [r7, #28]
 8015b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d003      	beq.n	8015b9a <gen_numname+0x5a>
 8015b92:	69fa      	ldr	r2, [r7, #28]
 8015b94:	4b30      	ldr	r3, [pc, #192]	; (8015c58 <gen_numname+0x118>)
 8015b96:	4053      	eors	r3, r2
 8015b98:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8015b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b9c:	3301      	adds	r3, #1
 8015b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ba2:	2b0f      	cmp	r3, #15
 8015ba4:	d9e6      	bls.n	8015b74 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	881b      	ldrh	r3, [r3, #0]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d1da      	bne.n	8015b64 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8015bae:	69fb      	ldr	r3, [r7, #28]
 8015bb0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8015bb2:	2307      	movs	r3, #7
 8015bb4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8015bb6:	683b      	ldr	r3, [r7, #0]
 8015bb8:	b2db      	uxtb	r3, r3
 8015bba:	f003 030f 	and.w	r3, r3, #15
 8015bbe:	b2db      	uxtb	r3, r3
 8015bc0:	3330      	adds	r3, #48	; 0x30
 8015bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8015bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015bca:	2b39      	cmp	r3, #57	; 0x39
 8015bcc:	d904      	bls.n	8015bd8 <gen_numname+0x98>
 8015bce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015bd2:	3307      	adds	r3, #7
 8015bd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8015bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bda:	1e5a      	subs	r2, r3, #1
 8015bdc:	62ba      	str	r2, [r7, #40]	; 0x28
 8015bde:	3330      	adds	r3, #48	; 0x30
 8015be0:	443b      	add	r3, r7
 8015be2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8015be6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8015bea:	683b      	ldr	r3, [r7, #0]
 8015bec:	091b      	lsrs	r3, r3, #4
 8015bee:	603b      	str	r3, [r7, #0]
	} while (seq);
 8015bf0:	683b      	ldr	r3, [r7, #0]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d1df      	bne.n	8015bb6 <gen_numname+0x76>
	ns[i] = '~';
 8015bf6:	f107 0214 	add.w	r2, r7, #20
 8015bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bfc:	4413      	add	r3, r2
 8015bfe:	227e      	movs	r2, #126	; 0x7e
 8015c00:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015c02:	2300      	movs	r3, #0
 8015c04:	627b      	str	r3, [r7, #36]	; 0x24
 8015c06:	e002      	b.n	8015c0e <gen_numname+0xce>
 8015c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c0a:	3301      	adds	r3, #1
 8015c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8015c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c12:	429a      	cmp	r2, r3
 8015c14:	d205      	bcs.n	8015c22 <gen_numname+0xe2>
 8015c16:	68fa      	ldr	r2, [r7, #12]
 8015c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c1a:	4413      	add	r3, r2
 8015c1c:	781b      	ldrb	r3, [r3, #0]
 8015c1e:	2b20      	cmp	r3, #32
 8015c20:	d1f2      	bne.n	8015c08 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c24:	2b07      	cmp	r3, #7
 8015c26:	d807      	bhi.n	8015c38 <gen_numname+0xf8>
 8015c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c2a:	1c5a      	adds	r2, r3, #1
 8015c2c:	62ba      	str	r2, [r7, #40]	; 0x28
 8015c2e:	3330      	adds	r3, #48	; 0x30
 8015c30:	443b      	add	r3, r7
 8015c32:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8015c36:	e000      	b.n	8015c3a <gen_numname+0xfa>
 8015c38:	2120      	movs	r1, #32
 8015c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c3c:	1c5a      	adds	r2, r3, #1
 8015c3e:	627a      	str	r2, [r7, #36]	; 0x24
 8015c40:	68fa      	ldr	r2, [r7, #12]
 8015c42:	4413      	add	r3, r2
 8015c44:	460a      	mov	r2, r1
 8015c46:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8015c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c4a:	2b07      	cmp	r3, #7
 8015c4c:	d9e9      	bls.n	8015c22 <gen_numname+0xe2>
}
 8015c4e:	bf00      	nop
 8015c50:	bf00      	nop
 8015c52:	3730      	adds	r7, #48	; 0x30
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd80      	pop	{r7, pc}
 8015c58:	00011021 	.word	0x00011021

08015c5c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8015c5c:	b480      	push	{r7}
 8015c5e:	b085      	sub	sp, #20
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8015c64:	2300      	movs	r3, #0
 8015c66:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8015c68:	230b      	movs	r3, #11
 8015c6a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8015c6c:	7bfb      	ldrb	r3, [r7, #15]
 8015c6e:	b2da      	uxtb	r2, r3
 8015c70:	0852      	lsrs	r2, r2, #1
 8015c72:	01db      	lsls	r3, r3, #7
 8015c74:	4313      	orrs	r3, r2
 8015c76:	b2da      	uxtb	r2, r3
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	1c59      	adds	r1, r3, #1
 8015c7c:	6079      	str	r1, [r7, #4]
 8015c7e:	781b      	ldrb	r3, [r3, #0]
 8015c80:	4413      	add	r3, r2
 8015c82:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8015c84:	68bb      	ldr	r3, [r7, #8]
 8015c86:	3b01      	subs	r3, #1
 8015c88:	60bb      	str	r3, [r7, #8]
 8015c8a:	68bb      	ldr	r3, [r7, #8]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d1ed      	bne.n	8015c6c <sum_sfn+0x10>
	return sum;
 8015c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c92:	4618      	mov	r0, r3
 8015c94:	3714      	adds	r7, #20
 8015c96:	46bd      	mov	sp, r7
 8015c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9c:	4770      	bx	lr

08015c9e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015c9e:	b580      	push	{r7, lr}
 8015ca0:	b086      	sub	sp, #24
 8015ca2:	af00      	add	r7, sp, #0
 8015ca4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015cac:	2100      	movs	r1, #0
 8015cae:	6878      	ldr	r0, [r7, #4]
 8015cb0:	f7ff fc88 	bl	80155c4 <dir_sdi>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015cb8:	7dfb      	ldrb	r3, [r7, #23]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d001      	beq.n	8015cc2 <dir_find+0x24>
 8015cbe:	7dfb      	ldrb	r3, [r7, #23]
 8015cc0:	e0a9      	b.n	8015e16 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015cc2:	23ff      	movs	r3, #255	; 0xff
 8015cc4:	753b      	strb	r3, [r7, #20]
 8015cc6:	7d3b      	ldrb	r3, [r7, #20]
 8015cc8:	757b      	strb	r3, [r7, #21]
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8015cd0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	69db      	ldr	r3, [r3, #28]
 8015cd6:	4619      	mov	r1, r3
 8015cd8:	6938      	ldr	r0, [r7, #16]
 8015cda:	f7ff f891 	bl	8014e00 <move_window>
 8015cde:	4603      	mov	r3, r0
 8015ce0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015ce2:	7dfb      	ldrb	r3, [r7, #23]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	f040 8090 	bne.w	8015e0a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	6a1b      	ldr	r3, [r3, #32]
 8015cee:	781b      	ldrb	r3, [r3, #0]
 8015cf0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015cf2:	7dbb      	ldrb	r3, [r7, #22]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d102      	bne.n	8015cfe <dir_find+0x60>
 8015cf8:	2304      	movs	r3, #4
 8015cfa:	75fb      	strb	r3, [r7, #23]
 8015cfc:	e08a      	b.n	8015e14 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	6a1b      	ldr	r3, [r3, #32]
 8015d02:	330b      	adds	r3, #11
 8015d04:	781b      	ldrb	r3, [r3, #0]
 8015d06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015d0a:	73fb      	strb	r3, [r7, #15]
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	7bfa      	ldrb	r2, [r7, #15]
 8015d10:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8015d12:	7dbb      	ldrb	r3, [r7, #22]
 8015d14:	2be5      	cmp	r3, #229	; 0xe5
 8015d16:	d007      	beq.n	8015d28 <dir_find+0x8a>
 8015d18:	7bfb      	ldrb	r3, [r7, #15]
 8015d1a:	f003 0308 	and.w	r3, r3, #8
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d009      	beq.n	8015d36 <dir_find+0x98>
 8015d22:	7bfb      	ldrb	r3, [r7, #15]
 8015d24:	2b0f      	cmp	r3, #15
 8015d26:	d006      	beq.n	8015d36 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015d28:	23ff      	movs	r3, #255	; 0xff
 8015d2a:	757b      	strb	r3, [r7, #21]
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8015d32:	631a      	str	r2, [r3, #48]	; 0x30
 8015d34:	e05e      	b.n	8015df4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8015d36:	7bfb      	ldrb	r3, [r7, #15]
 8015d38:	2b0f      	cmp	r3, #15
 8015d3a:	d136      	bne.n	8015daa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d154      	bne.n	8015df4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8015d4a:	7dbb      	ldrb	r3, [r7, #22]
 8015d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d00d      	beq.n	8015d70 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	6a1b      	ldr	r3, [r3, #32]
 8015d58:	7b5b      	ldrb	r3, [r3, #13]
 8015d5a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8015d5c:	7dbb      	ldrb	r3, [r7, #22]
 8015d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015d62:	75bb      	strb	r3, [r7, #22]
 8015d64:	7dbb      	ldrb	r3, [r7, #22]
 8015d66:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	695a      	ldr	r2, [r3, #20]
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015d70:	7dba      	ldrb	r2, [r7, #22]
 8015d72:	7d7b      	ldrb	r3, [r7, #21]
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d115      	bne.n	8015da4 <dir_find+0x106>
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	6a1b      	ldr	r3, [r3, #32]
 8015d7c:	330d      	adds	r3, #13
 8015d7e:	781b      	ldrb	r3, [r3, #0]
 8015d80:	7d3a      	ldrb	r2, [r7, #20]
 8015d82:	429a      	cmp	r2, r3
 8015d84:	d10e      	bne.n	8015da4 <dir_find+0x106>
 8015d86:	693b      	ldr	r3, [r7, #16]
 8015d88:	691a      	ldr	r2, [r3, #16]
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	6a1b      	ldr	r3, [r3, #32]
 8015d8e:	4619      	mov	r1, r3
 8015d90:	4610      	mov	r0, r2
 8015d92:	f7ff fdfd 	bl	8015990 <cmp_lfn>
 8015d96:	4603      	mov	r3, r0
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d003      	beq.n	8015da4 <dir_find+0x106>
 8015d9c:	7d7b      	ldrb	r3, [r7, #21]
 8015d9e:	3b01      	subs	r3, #1
 8015da0:	b2db      	uxtb	r3, r3
 8015da2:	e000      	b.n	8015da6 <dir_find+0x108>
 8015da4:	23ff      	movs	r3, #255	; 0xff
 8015da6:	757b      	strb	r3, [r7, #21]
 8015da8:	e024      	b.n	8015df4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015daa:	7d7b      	ldrb	r3, [r7, #21]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d109      	bne.n	8015dc4 <dir_find+0x126>
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	6a1b      	ldr	r3, [r3, #32]
 8015db4:	4618      	mov	r0, r3
 8015db6:	f7ff ff51 	bl	8015c5c <sum_sfn>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	461a      	mov	r2, r3
 8015dbe:	7d3b      	ldrb	r3, [r7, #20]
 8015dc0:	4293      	cmp	r3, r2
 8015dc2:	d024      	beq.n	8015e0e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015dca:	f003 0301 	and.w	r3, r3, #1
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d10a      	bne.n	8015de8 <dir_find+0x14a>
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	6a18      	ldr	r0, [r3, #32]
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	3324      	adds	r3, #36	; 0x24
 8015dda:	220b      	movs	r2, #11
 8015ddc:	4619      	mov	r1, r3
 8015dde:	f7fe fe1d 	bl	8014a1c <mem_cmp>
 8015de2:	4603      	mov	r3, r0
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d014      	beq.n	8015e12 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015de8:	23ff      	movs	r3, #255	; 0xff
 8015dea:	757b      	strb	r3, [r7, #21]
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	f04f 32ff 	mov.w	r2, #4294967295
 8015df2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015df4:	2100      	movs	r1, #0
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	f7ff fc6d 	bl	80156d6 <dir_next>
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015e00:	7dfb      	ldrb	r3, [r7, #23]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	f43f af65 	beq.w	8015cd2 <dir_find+0x34>
 8015e08:	e004      	b.n	8015e14 <dir_find+0x176>
		if (res != FR_OK) break;
 8015e0a:	bf00      	nop
 8015e0c:	e002      	b.n	8015e14 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015e0e:	bf00      	nop
 8015e10:	e000      	b.n	8015e14 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015e12:	bf00      	nop

	return res;
 8015e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e16:	4618      	mov	r0, r3
 8015e18:	3718      	adds	r7, #24
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}
	...

08015e20 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b08c      	sub	sp, #48	; 0x30
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015e34:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d001      	beq.n	8015e40 <dir_register+0x20>
 8015e3c:	2306      	movs	r3, #6
 8015e3e:	e0e0      	b.n	8016002 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8015e40:	2300      	movs	r3, #0
 8015e42:	627b      	str	r3, [r7, #36]	; 0x24
 8015e44:	e002      	b.n	8015e4c <dir_register+0x2c>
 8015e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e48:	3301      	adds	r3, #1
 8015e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8015e4c:	69fb      	ldr	r3, [r7, #28]
 8015e4e:	691a      	ldr	r2, [r3, #16]
 8015e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e52:	005b      	lsls	r3, r3, #1
 8015e54:	4413      	add	r3, r2
 8015e56:	881b      	ldrh	r3, [r3, #0]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d1f4      	bne.n	8015e46 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8015e62:	f107 030c 	add.w	r3, r7, #12
 8015e66:	220c      	movs	r2, #12
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f7fe fd9b 	bl	80149a4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8015e6e:	7dfb      	ldrb	r3, [r7, #23]
 8015e70:	f003 0301 	and.w	r3, r3, #1
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d032      	beq.n	8015ede <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2240      	movs	r2, #64	; 0x40
 8015e7c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8015e80:	2301      	movs	r3, #1
 8015e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8015e84:	e016      	b.n	8015eb4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8015e8c:	69fb      	ldr	r3, [r7, #28]
 8015e8e:	691a      	ldr	r2, [r3, #16]
 8015e90:	f107 010c 	add.w	r1, r7, #12
 8015e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e96:	f7ff fe53 	bl	8015b40 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8015e9a:	6878      	ldr	r0, [r7, #4]
 8015e9c:	f7ff feff 	bl	8015c9e <dir_find>
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8015ea6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d106      	bne.n	8015ebc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8015eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eb0:	3301      	adds	r3, #1
 8015eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8015eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eb6:	2b63      	cmp	r3, #99	; 0x63
 8015eb8:	d9e5      	bls.n	8015e86 <dir_register+0x66>
 8015eba:	e000      	b.n	8015ebe <dir_register+0x9e>
			if (res != FR_OK) break;
 8015ebc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8015ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ec0:	2b64      	cmp	r3, #100	; 0x64
 8015ec2:	d101      	bne.n	8015ec8 <dir_register+0xa8>
 8015ec4:	2307      	movs	r3, #7
 8015ec6:	e09c      	b.n	8016002 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8015ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015ecc:	2b04      	cmp	r3, #4
 8015ece:	d002      	beq.n	8015ed6 <dir_register+0xb6>
 8015ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015ed4:	e095      	b.n	8016002 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8015ed6:	7dfa      	ldrb	r2, [r7, #23]
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015ede:	7dfb      	ldrb	r3, [r7, #23]
 8015ee0:	f003 0302 	and.w	r3, r3, #2
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d007      	beq.n	8015ef8 <dir_register+0xd8>
 8015ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eea:	330c      	adds	r3, #12
 8015eec:	4a47      	ldr	r2, [pc, #284]	; (801600c <dir_register+0x1ec>)
 8015eee:	fba2 2303 	umull	r2, r3, r2, r3
 8015ef2:	089b      	lsrs	r3, r3, #2
 8015ef4:	3301      	adds	r3, #1
 8015ef6:	e000      	b.n	8015efa <dir_register+0xda>
 8015ef8:	2301      	movs	r3, #1
 8015efa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8015efc:	6a39      	ldr	r1, [r7, #32]
 8015efe:	6878      	ldr	r0, [r7, #4]
 8015f00:	f7ff fcbf 	bl	8015882 <dir_alloc>
 8015f04:	4603      	mov	r3, r0
 8015f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8015f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d148      	bne.n	8015fa4 <dir_register+0x184>
 8015f12:	6a3b      	ldr	r3, [r7, #32]
 8015f14:	3b01      	subs	r3, #1
 8015f16:	623b      	str	r3, [r7, #32]
 8015f18:	6a3b      	ldr	r3, [r7, #32]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d042      	beq.n	8015fa4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	695a      	ldr	r2, [r3, #20]
 8015f22:	6a3b      	ldr	r3, [r7, #32]
 8015f24:	015b      	lsls	r3, r3, #5
 8015f26:	1ad3      	subs	r3, r2, r3
 8015f28:	4619      	mov	r1, r3
 8015f2a:	6878      	ldr	r0, [r7, #4]
 8015f2c:	f7ff fb4a 	bl	80155c4 <dir_sdi>
 8015f30:	4603      	mov	r3, r0
 8015f32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015f36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d132      	bne.n	8015fa4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	3324      	adds	r3, #36	; 0x24
 8015f42:	4618      	mov	r0, r3
 8015f44:	f7ff fe8a 	bl	8015c5c <sum_sfn>
 8015f48:	4603      	mov	r3, r0
 8015f4a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	69db      	ldr	r3, [r3, #28]
 8015f50:	4619      	mov	r1, r3
 8015f52:	69f8      	ldr	r0, [r7, #28]
 8015f54:	f7fe ff54 	bl	8014e00 <move_window>
 8015f58:	4603      	mov	r3, r0
 8015f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8015f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d11d      	bne.n	8015fa2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8015f66:	69fb      	ldr	r3, [r7, #28]
 8015f68:	6918      	ldr	r0, [r3, #16]
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	6a19      	ldr	r1, [r3, #32]
 8015f6e:	6a3b      	ldr	r3, [r7, #32]
 8015f70:	b2da      	uxtb	r2, r3
 8015f72:	7efb      	ldrb	r3, [r7, #27]
 8015f74:	f7ff fd7c 	bl	8015a70 <put_lfn>
				fs->wflag = 1;
 8015f78:	69fb      	ldr	r3, [r7, #28]
 8015f7a:	2201      	movs	r2, #1
 8015f7c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8015f7e:	2100      	movs	r1, #0
 8015f80:	6878      	ldr	r0, [r7, #4]
 8015f82:	f7ff fba8 	bl	80156d6 <dir_next>
 8015f86:	4603      	mov	r3, r0
 8015f88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8015f8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d107      	bne.n	8015fa4 <dir_register+0x184>
 8015f94:	6a3b      	ldr	r3, [r7, #32]
 8015f96:	3b01      	subs	r3, #1
 8015f98:	623b      	str	r3, [r7, #32]
 8015f9a:	6a3b      	ldr	r3, [r7, #32]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d1d5      	bne.n	8015f4c <dir_register+0x12c>
 8015fa0:	e000      	b.n	8015fa4 <dir_register+0x184>
				if (res != FR_OK) break;
 8015fa2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015fa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d128      	bne.n	8015ffe <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	69db      	ldr	r3, [r3, #28]
 8015fb0:	4619      	mov	r1, r3
 8015fb2:	69f8      	ldr	r0, [r7, #28]
 8015fb4:	f7fe ff24 	bl	8014e00 <move_window>
 8015fb8:	4603      	mov	r3, r0
 8015fba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d11b      	bne.n	8015ffe <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	6a1b      	ldr	r3, [r3, #32]
 8015fca:	2220      	movs	r2, #32
 8015fcc:	2100      	movs	r1, #0
 8015fce:	4618      	mov	r0, r3
 8015fd0:	f7fe fd09 	bl	80149e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	6a18      	ldr	r0, [r3, #32]
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	3324      	adds	r3, #36	; 0x24
 8015fdc:	220b      	movs	r2, #11
 8015fde:	4619      	mov	r1, r3
 8015fe0:	f7fe fce0 	bl	80149a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	6a1b      	ldr	r3, [r3, #32]
 8015fee:	330c      	adds	r3, #12
 8015ff0:	f002 0218 	and.w	r2, r2, #24
 8015ff4:	b2d2      	uxtb	r2, r2
 8015ff6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8015ff8:	69fb      	ldr	r3, [r7, #28]
 8015ffa:	2201      	movs	r2, #1
 8015ffc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016002:	4618      	mov	r0, r3
 8016004:	3730      	adds	r7, #48	; 0x30
 8016006:	46bd      	mov	sp, r7
 8016008:	bd80      	pop	{r7, pc}
 801600a:	bf00      	nop
 801600c:	4ec4ec4f 	.word	0x4ec4ec4f

08016010 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b08a      	sub	sp, #40	; 0x28
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
 8016018:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801601a:	683b      	ldr	r3, [r7, #0]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	613b      	str	r3, [r7, #16]
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	691b      	ldr	r3, [r3, #16]
 8016026:	60fb      	str	r3, [r7, #12]
 8016028:	2300      	movs	r3, #0
 801602a:	617b      	str	r3, [r7, #20]
 801602c:	697b      	ldr	r3, [r7, #20]
 801602e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8016030:	69bb      	ldr	r3, [r7, #24]
 8016032:	1c5a      	adds	r2, r3, #1
 8016034:	61ba      	str	r2, [r7, #24]
 8016036:	693a      	ldr	r2, [r7, #16]
 8016038:	4413      	add	r3, r2
 801603a:	781b      	ldrb	r3, [r3, #0]
 801603c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801603e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016040:	2b1f      	cmp	r3, #31
 8016042:	d940      	bls.n	80160c6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8016044:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016046:	2b2f      	cmp	r3, #47	; 0x2f
 8016048:	d006      	beq.n	8016058 <create_name+0x48>
 801604a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801604c:	2b5c      	cmp	r3, #92	; 0x5c
 801604e:	d110      	bne.n	8016072 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8016050:	e002      	b.n	8016058 <create_name+0x48>
 8016052:	69bb      	ldr	r3, [r7, #24]
 8016054:	3301      	adds	r3, #1
 8016056:	61bb      	str	r3, [r7, #24]
 8016058:	693a      	ldr	r2, [r7, #16]
 801605a:	69bb      	ldr	r3, [r7, #24]
 801605c:	4413      	add	r3, r2
 801605e:	781b      	ldrb	r3, [r3, #0]
 8016060:	2b2f      	cmp	r3, #47	; 0x2f
 8016062:	d0f6      	beq.n	8016052 <create_name+0x42>
 8016064:	693a      	ldr	r2, [r7, #16]
 8016066:	69bb      	ldr	r3, [r7, #24]
 8016068:	4413      	add	r3, r2
 801606a:	781b      	ldrb	r3, [r3, #0]
 801606c:	2b5c      	cmp	r3, #92	; 0x5c
 801606e:	d0f0      	beq.n	8016052 <create_name+0x42>
			break;
 8016070:	e02a      	b.n	80160c8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8016072:	697b      	ldr	r3, [r7, #20]
 8016074:	2bfe      	cmp	r3, #254	; 0xfe
 8016076:	d901      	bls.n	801607c <create_name+0x6c>
 8016078:	2306      	movs	r3, #6
 801607a:	e17d      	b.n	8016378 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801607c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801607e:	b2db      	uxtb	r3, r3
 8016080:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8016082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016084:	2101      	movs	r1, #1
 8016086:	4618      	mov	r0, r3
 8016088:	f001 fa8c 	bl	80175a4 <ff_convert>
 801608c:	4603      	mov	r3, r0
 801608e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8016090:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016092:	2b00      	cmp	r3, #0
 8016094:	d101      	bne.n	801609a <create_name+0x8a>
 8016096:	2306      	movs	r3, #6
 8016098:	e16e      	b.n	8016378 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801609a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801609c:	2b7f      	cmp	r3, #127	; 0x7f
 801609e:	d809      	bhi.n	80160b4 <create_name+0xa4>
 80160a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160a2:	4619      	mov	r1, r3
 80160a4:	488d      	ldr	r0, [pc, #564]	; (80162dc <create_name+0x2cc>)
 80160a6:	f7fe fce0 	bl	8014a6a <chk_chr>
 80160aa:	4603      	mov	r3, r0
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d001      	beq.n	80160b4 <create_name+0xa4>
 80160b0:	2306      	movs	r3, #6
 80160b2:	e161      	b.n	8016378 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80160b4:	697b      	ldr	r3, [r7, #20]
 80160b6:	1c5a      	adds	r2, r3, #1
 80160b8:	617a      	str	r2, [r7, #20]
 80160ba:	005b      	lsls	r3, r3, #1
 80160bc:	68fa      	ldr	r2, [r7, #12]
 80160be:	4413      	add	r3, r2
 80160c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80160c2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80160c4:	e7b4      	b.n	8016030 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80160c6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80160c8:	693a      	ldr	r2, [r7, #16]
 80160ca:	69bb      	ldr	r3, [r7, #24]
 80160cc:	441a      	add	r2, r3
 80160ce:	683b      	ldr	r3, [r7, #0]
 80160d0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80160d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160d4:	2b1f      	cmp	r3, #31
 80160d6:	d801      	bhi.n	80160dc <create_name+0xcc>
 80160d8:	2304      	movs	r3, #4
 80160da:	e000      	b.n	80160de <create_name+0xce>
 80160dc:	2300      	movs	r3, #0
 80160de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80160e2:	e011      	b.n	8016108 <create_name+0xf8>
		w = lfn[di - 1];
 80160e4:	697a      	ldr	r2, [r7, #20]
 80160e6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80160ea:	4413      	add	r3, r2
 80160ec:	005b      	lsls	r3, r3, #1
 80160ee:	68fa      	ldr	r2, [r7, #12]
 80160f0:	4413      	add	r3, r2
 80160f2:	881b      	ldrh	r3, [r3, #0]
 80160f4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80160f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160f8:	2b20      	cmp	r3, #32
 80160fa:	d002      	beq.n	8016102 <create_name+0xf2>
 80160fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160fe:	2b2e      	cmp	r3, #46	; 0x2e
 8016100:	d106      	bne.n	8016110 <create_name+0x100>
		di--;
 8016102:	697b      	ldr	r3, [r7, #20]
 8016104:	3b01      	subs	r3, #1
 8016106:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8016108:	697b      	ldr	r3, [r7, #20]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d1ea      	bne.n	80160e4 <create_name+0xd4>
 801610e:	e000      	b.n	8016112 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8016110:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8016112:	697b      	ldr	r3, [r7, #20]
 8016114:	005b      	lsls	r3, r3, #1
 8016116:	68fa      	ldr	r2, [r7, #12]
 8016118:	4413      	add	r3, r2
 801611a:	2200      	movs	r2, #0
 801611c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801611e:	697b      	ldr	r3, [r7, #20]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d101      	bne.n	8016128 <create_name+0x118>
 8016124:	2306      	movs	r3, #6
 8016126:	e127      	b.n	8016378 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	3324      	adds	r3, #36	; 0x24
 801612c:	220b      	movs	r2, #11
 801612e:	2120      	movs	r1, #32
 8016130:	4618      	mov	r0, r3
 8016132:	f7fe fc58 	bl	80149e6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8016136:	2300      	movs	r3, #0
 8016138:	61bb      	str	r3, [r7, #24]
 801613a:	e002      	b.n	8016142 <create_name+0x132>
 801613c:	69bb      	ldr	r3, [r7, #24]
 801613e:	3301      	adds	r3, #1
 8016140:	61bb      	str	r3, [r7, #24]
 8016142:	69bb      	ldr	r3, [r7, #24]
 8016144:	005b      	lsls	r3, r3, #1
 8016146:	68fa      	ldr	r2, [r7, #12]
 8016148:	4413      	add	r3, r2
 801614a:	881b      	ldrh	r3, [r3, #0]
 801614c:	2b20      	cmp	r3, #32
 801614e:	d0f5      	beq.n	801613c <create_name+0x12c>
 8016150:	69bb      	ldr	r3, [r7, #24]
 8016152:	005b      	lsls	r3, r3, #1
 8016154:	68fa      	ldr	r2, [r7, #12]
 8016156:	4413      	add	r3, r2
 8016158:	881b      	ldrh	r3, [r3, #0]
 801615a:	2b2e      	cmp	r3, #46	; 0x2e
 801615c:	d0ee      	beq.n	801613c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801615e:	69bb      	ldr	r3, [r7, #24]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d009      	beq.n	8016178 <create_name+0x168>
 8016164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016168:	f043 0303 	orr.w	r3, r3, #3
 801616c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8016170:	e002      	b.n	8016178 <create_name+0x168>
 8016172:	697b      	ldr	r3, [r7, #20]
 8016174:	3b01      	subs	r3, #1
 8016176:	617b      	str	r3, [r7, #20]
 8016178:	697b      	ldr	r3, [r7, #20]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d009      	beq.n	8016192 <create_name+0x182>
 801617e:	697a      	ldr	r2, [r7, #20]
 8016180:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016184:	4413      	add	r3, r2
 8016186:	005b      	lsls	r3, r3, #1
 8016188:	68fa      	ldr	r2, [r7, #12]
 801618a:	4413      	add	r3, r2
 801618c:	881b      	ldrh	r3, [r3, #0]
 801618e:	2b2e      	cmp	r3, #46	; 0x2e
 8016190:	d1ef      	bne.n	8016172 <create_name+0x162>

	i = b = 0; ni = 8;
 8016192:	2300      	movs	r3, #0
 8016194:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016198:	2300      	movs	r3, #0
 801619a:	623b      	str	r3, [r7, #32]
 801619c:	2308      	movs	r3, #8
 801619e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80161a0:	69bb      	ldr	r3, [r7, #24]
 80161a2:	1c5a      	adds	r2, r3, #1
 80161a4:	61ba      	str	r2, [r7, #24]
 80161a6:	005b      	lsls	r3, r3, #1
 80161a8:	68fa      	ldr	r2, [r7, #12]
 80161aa:	4413      	add	r3, r2
 80161ac:	881b      	ldrh	r3, [r3, #0]
 80161ae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80161b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	f000 8090 	beq.w	80162d8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80161b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161ba:	2b20      	cmp	r3, #32
 80161bc:	d006      	beq.n	80161cc <create_name+0x1bc>
 80161be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161c0:	2b2e      	cmp	r3, #46	; 0x2e
 80161c2:	d10a      	bne.n	80161da <create_name+0x1ca>
 80161c4:	69ba      	ldr	r2, [r7, #24]
 80161c6:	697b      	ldr	r3, [r7, #20]
 80161c8:	429a      	cmp	r2, r3
 80161ca:	d006      	beq.n	80161da <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80161cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161d0:	f043 0303 	orr.w	r3, r3, #3
 80161d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80161d8:	e07d      	b.n	80162d6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80161da:	6a3a      	ldr	r2, [r7, #32]
 80161dc:	69fb      	ldr	r3, [r7, #28]
 80161de:	429a      	cmp	r2, r3
 80161e0:	d203      	bcs.n	80161ea <create_name+0x1da>
 80161e2:	69ba      	ldr	r2, [r7, #24]
 80161e4:	697b      	ldr	r3, [r7, #20]
 80161e6:	429a      	cmp	r2, r3
 80161e8:	d123      	bne.n	8016232 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80161ea:	69fb      	ldr	r3, [r7, #28]
 80161ec:	2b0b      	cmp	r3, #11
 80161ee:	d106      	bne.n	80161fe <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80161f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161f4:	f043 0303 	orr.w	r3, r3, #3
 80161f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80161fc:	e075      	b.n	80162ea <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80161fe:	69ba      	ldr	r2, [r7, #24]
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	429a      	cmp	r2, r3
 8016204:	d005      	beq.n	8016212 <create_name+0x202>
 8016206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801620a:	f043 0303 	orr.w	r3, r3, #3
 801620e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8016212:	69ba      	ldr	r2, [r7, #24]
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	429a      	cmp	r2, r3
 8016218:	d866      	bhi.n	80162e8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801621a:	697b      	ldr	r3, [r7, #20]
 801621c:	61bb      	str	r3, [r7, #24]
 801621e:	2308      	movs	r3, #8
 8016220:	623b      	str	r3, [r7, #32]
 8016222:	230b      	movs	r3, #11
 8016224:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8016226:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801622a:	009b      	lsls	r3, r3, #2
 801622c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016230:	e051      	b.n	80162d6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8016232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016234:	2b7f      	cmp	r3, #127	; 0x7f
 8016236:	d914      	bls.n	8016262 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8016238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801623a:	2100      	movs	r1, #0
 801623c:	4618      	mov	r0, r3
 801623e:	f001 f9b1 	bl	80175a4 <ff_convert>
 8016242:	4603      	mov	r3, r0
 8016244:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8016246:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016248:	2b00      	cmp	r3, #0
 801624a:	d004      	beq.n	8016256 <create_name+0x246>
 801624c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801624e:	3b80      	subs	r3, #128	; 0x80
 8016250:	4a23      	ldr	r2, [pc, #140]	; (80162e0 <create_name+0x2d0>)
 8016252:	5cd3      	ldrb	r3, [r2, r3]
 8016254:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8016256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801625a:	f043 0302 	orr.w	r3, r3, #2
 801625e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8016262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016264:	2b00      	cmp	r3, #0
 8016266:	d007      	beq.n	8016278 <create_name+0x268>
 8016268:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801626a:	4619      	mov	r1, r3
 801626c:	481d      	ldr	r0, [pc, #116]	; (80162e4 <create_name+0x2d4>)
 801626e:	f7fe fbfc 	bl	8014a6a <chk_chr>
 8016272:	4603      	mov	r3, r0
 8016274:	2b00      	cmp	r3, #0
 8016276:	d008      	beq.n	801628a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8016278:	235f      	movs	r3, #95	; 0x5f
 801627a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801627c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016280:	f043 0303 	orr.w	r3, r3, #3
 8016284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016288:	e01b      	b.n	80162c2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801628a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801628c:	2b40      	cmp	r3, #64	; 0x40
 801628e:	d909      	bls.n	80162a4 <create_name+0x294>
 8016290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016292:	2b5a      	cmp	r3, #90	; 0x5a
 8016294:	d806      	bhi.n	80162a4 <create_name+0x294>
					b |= 2;
 8016296:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801629a:	f043 0302 	orr.w	r3, r3, #2
 801629e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80162a2:	e00e      	b.n	80162c2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80162a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80162a6:	2b60      	cmp	r3, #96	; 0x60
 80162a8:	d90b      	bls.n	80162c2 <create_name+0x2b2>
 80162aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80162ac:	2b7a      	cmp	r3, #122	; 0x7a
 80162ae:	d808      	bhi.n	80162c2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80162b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80162b4:	f043 0301 	orr.w	r3, r3, #1
 80162b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80162bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80162be:	3b20      	subs	r3, #32
 80162c0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80162c2:	6a3b      	ldr	r3, [r7, #32]
 80162c4:	1c5a      	adds	r2, r3, #1
 80162c6:	623a      	str	r2, [r7, #32]
 80162c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80162ca:	b2d1      	uxtb	r1, r2
 80162cc:	687a      	ldr	r2, [r7, #4]
 80162ce:	4413      	add	r3, r2
 80162d0:	460a      	mov	r2, r1
 80162d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80162d6:	e763      	b.n	80161a0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80162d8:	bf00      	nop
 80162da:	e006      	b.n	80162ea <create_name+0x2da>
 80162dc:	0801c920 	.word	0x0801c920
 80162e0:	0801c9f8 	.word	0x0801c9f8
 80162e4:	0801c92c 	.word	0x0801c92c
			if (si > di) break;			/* No extension */
 80162e8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80162f0:	2be5      	cmp	r3, #229	; 0xe5
 80162f2:	d103      	bne.n	80162fc <create_name+0x2ec>
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	2205      	movs	r2, #5
 80162f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80162fc:	69fb      	ldr	r3, [r7, #28]
 80162fe:	2b08      	cmp	r3, #8
 8016300:	d104      	bne.n	801630c <create_name+0x2fc>
 8016302:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016306:	009b      	lsls	r3, r3, #2
 8016308:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801630c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016310:	f003 030c 	and.w	r3, r3, #12
 8016314:	2b0c      	cmp	r3, #12
 8016316:	d005      	beq.n	8016324 <create_name+0x314>
 8016318:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801631c:	f003 0303 	and.w	r3, r3, #3
 8016320:	2b03      	cmp	r3, #3
 8016322:	d105      	bne.n	8016330 <create_name+0x320>
 8016324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016328:	f043 0302 	orr.w	r3, r3, #2
 801632c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8016330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016334:	f003 0302 	and.w	r3, r3, #2
 8016338:	2b00      	cmp	r3, #0
 801633a:	d117      	bne.n	801636c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801633c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016340:	f003 0303 	and.w	r3, r3, #3
 8016344:	2b01      	cmp	r3, #1
 8016346:	d105      	bne.n	8016354 <create_name+0x344>
 8016348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801634c:	f043 0310 	orr.w	r3, r3, #16
 8016350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8016354:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016358:	f003 030c 	and.w	r3, r3, #12
 801635c:	2b04      	cmp	r3, #4
 801635e:	d105      	bne.n	801636c <create_name+0x35c>
 8016360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016364:	f043 0308 	orr.w	r3, r3, #8
 8016368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016372:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8016376:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8016378:	4618      	mov	r0, r3
 801637a:	3728      	adds	r7, #40	; 0x28
 801637c:	46bd      	mov	sp, r7
 801637e:	bd80      	pop	{r7, pc}

08016380 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b086      	sub	sp, #24
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
 8016388:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801638e:	693b      	ldr	r3, [r7, #16]
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8016394:	e002      	b.n	801639c <follow_path+0x1c>
 8016396:	683b      	ldr	r3, [r7, #0]
 8016398:	3301      	adds	r3, #1
 801639a:	603b      	str	r3, [r7, #0]
 801639c:	683b      	ldr	r3, [r7, #0]
 801639e:	781b      	ldrb	r3, [r3, #0]
 80163a0:	2b2f      	cmp	r3, #47	; 0x2f
 80163a2:	d0f8      	beq.n	8016396 <follow_path+0x16>
 80163a4:	683b      	ldr	r3, [r7, #0]
 80163a6:	781b      	ldrb	r3, [r3, #0]
 80163a8:	2b5c      	cmp	r3, #92	; 0x5c
 80163aa:	d0f4      	beq.n	8016396 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	2200      	movs	r2, #0
 80163b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80163b2:	683b      	ldr	r3, [r7, #0]
 80163b4:	781b      	ldrb	r3, [r3, #0]
 80163b6:	2b1f      	cmp	r3, #31
 80163b8:	d80a      	bhi.n	80163d0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	2280      	movs	r2, #128	; 0x80
 80163be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80163c2:	2100      	movs	r1, #0
 80163c4:	6878      	ldr	r0, [r7, #4]
 80163c6:	f7ff f8fd 	bl	80155c4 <dir_sdi>
 80163ca:	4603      	mov	r3, r0
 80163cc:	75fb      	strb	r3, [r7, #23]
 80163ce:	e048      	b.n	8016462 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80163d0:	463b      	mov	r3, r7
 80163d2:	4619      	mov	r1, r3
 80163d4:	6878      	ldr	r0, [r7, #4]
 80163d6:	f7ff fe1b 	bl	8016010 <create_name>
 80163da:	4603      	mov	r3, r0
 80163dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80163de:	7dfb      	ldrb	r3, [r7, #23]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d139      	bne.n	8016458 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80163e4:	6878      	ldr	r0, [r7, #4]
 80163e6:	f7ff fc5a 	bl	8015c9e <dir_find>
 80163ea:	4603      	mov	r3, r0
 80163ec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80163f4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80163f6:	7dfb      	ldrb	r3, [r7, #23]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d00a      	beq.n	8016412 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80163fc:	7dfb      	ldrb	r3, [r7, #23]
 80163fe:	2b04      	cmp	r3, #4
 8016400:	d12c      	bne.n	801645c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016402:	7afb      	ldrb	r3, [r7, #11]
 8016404:	f003 0304 	and.w	r3, r3, #4
 8016408:	2b00      	cmp	r3, #0
 801640a:	d127      	bne.n	801645c <follow_path+0xdc>
 801640c:	2305      	movs	r3, #5
 801640e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016410:	e024      	b.n	801645c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016412:	7afb      	ldrb	r3, [r7, #11]
 8016414:	f003 0304 	and.w	r3, r3, #4
 8016418:	2b00      	cmp	r3, #0
 801641a:	d121      	bne.n	8016460 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801641c:	693b      	ldr	r3, [r7, #16]
 801641e:	799b      	ldrb	r3, [r3, #6]
 8016420:	f003 0310 	and.w	r3, r3, #16
 8016424:	2b00      	cmp	r3, #0
 8016426:	d102      	bne.n	801642e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016428:	2305      	movs	r3, #5
 801642a:	75fb      	strb	r3, [r7, #23]
 801642c:	e019      	b.n	8016462 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	695b      	ldr	r3, [r3, #20]
 8016438:	68fa      	ldr	r2, [r7, #12]
 801643a:	8992      	ldrh	r2, [r2, #12]
 801643c:	fbb3 f0f2 	udiv	r0, r3, r2
 8016440:	fb00 f202 	mul.w	r2, r0, r2
 8016444:	1a9b      	subs	r3, r3, r2
 8016446:	440b      	add	r3, r1
 8016448:	4619      	mov	r1, r3
 801644a:	68f8      	ldr	r0, [r7, #12]
 801644c:	f7ff fa60 	bl	8015910 <ld_clust>
 8016450:	4602      	mov	r2, r0
 8016452:	693b      	ldr	r3, [r7, #16]
 8016454:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016456:	e7bb      	b.n	80163d0 <follow_path+0x50>
			if (res != FR_OK) break;
 8016458:	bf00      	nop
 801645a:	e002      	b.n	8016462 <follow_path+0xe2>
				break;
 801645c:	bf00      	nop
 801645e:	e000      	b.n	8016462 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016460:	bf00      	nop
			}
		}
	}

	return res;
 8016462:	7dfb      	ldrb	r3, [r7, #23]
}
 8016464:	4618      	mov	r0, r3
 8016466:	3718      	adds	r7, #24
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}

0801646c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801646c:	b480      	push	{r7}
 801646e:	b087      	sub	sp, #28
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016474:	f04f 33ff 	mov.w	r3, #4294967295
 8016478:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d031      	beq.n	80164e6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	617b      	str	r3, [r7, #20]
 8016488:	e002      	b.n	8016490 <get_ldnumber+0x24>
 801648a:	697b      	ldr	r3, [r7, #20]
 801648c:	3301      	adds	r3, #1
 801648e:	617b      	str	r3, [r7, #20]
 8016490:	697b      	ldr	r3, [r7, #20]
 8016492:	781b      	ldrb	r3, [r3, #0]
 8016494:	2b1f      	cmp	r3, #31
 8016496:	d903      	bls.n	80164a0 <get_ldnumber+0x34>
 8016498:	697b      	ldr	r3, [r7, #20]
 801649a:	781b      	ldrb	r3, [r3, #0]
 801649c:	2b3a      	cmp	r3, #58	; 0x3a
 801649e:	d1f4      	bne.n	801648a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80164a0:	697b      	ldr	r3, [r7, #20]
 80164a2:	781b      	ldrb	r3, [r3, #0]
 80164a4:	2b3a      	cmp	r3, #58	; 0x3a
 80164a6:	d11c      	bne.n	80164e2 <get_ldnumber+0x76>
			tp = *path;
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	1c5a      	adds	r2, r3, #1
 80164b2:	60fa      	str	r2, [r7, #12]
 80164b4:	781b      	ldrb	r3, [r3, #0]
 80164b6:	3b30      	subs	r3, #48	; 0x30
 80164b8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80164ba:	68bb      	ldr	r3, [r7, #8]
 80164bc:	2b09      	cmp	r3, #9
 80164be:	d80e      	bhi.n	80164de <get_ldnumber+0x72>
 80164c0:	68fa      	ldr	r2, [r7, #12]
 80164c2:	697b      	ldr	r3, [r7, #20]
 80164c4:	429a      	cmp	r2, r3
 80164c6:	d10a      	bne.n	80164de <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80164c8:	68bb      	ldr	r3, [r7, #8]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d107      	bne.n	80164de <get_ldnumber+0x72>
					vol = (int)i;
 80164ce:	68bb      	ldr	r3, [r7, #8]
 80164d0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80164d2:	697b      	ldr	r3, [r7, #20]
 80164d4:	3301      	adds	r3, #1
 80164d6:	617b      	str	r3, [r7, #20]
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	697a      	ldr	r2, [r7, #20]
 80164dc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80164de:	693b      	ldr	r3, [r7, #16]
 80164e0:	e002      	b.n	80164e8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80164e2:	2300      	movs	r3, #0
 80164e4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80164e6:	693b      	ldr	r3, [r7, #16]
}
 80164e8:	4618      	mov	r0, r3
 80164ea:	371c      	adds	r7, #28
 80164ec:	46bd      	mov	sp, r7
 80164ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f2:	4770      	bx	lr

080164f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b082      	sub	sp, #8
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
 80164fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	2200      	movs	r2, #0
 8016502:	70da      	strb	r2, [r3, #3]
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	f04f 32ff 	mov.w	r2, #4294967295
 801650a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801650c:	6839      	ldr	r1, [r7, #0]
 801650e:	6878      	ldr	r0, [r7, #4]
 8016510:	f7fe fc76 	bl	8014e00 <move_window>
 8016514:	4603      	mov	r3, r0
 8016516:	2b00      	cmp	r3, #0
 8016518:	d001      	beq.n	801651e <check_fs+0x2a>
 801651a:	2304      	movs	r3, #4
 801651c:	e038      	b.n	8016590 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	3338      	adds	r3, #56	; 0x38
 8016522:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016526:	4618      	mov	r0, r3
 8016528:	f7fe f9ba 	bl	80148a0 <ld_word>
 801652c:	4603      	mov	r3, r0
 801652e:	461a      	mov	r2, r3
 8016530:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016534:	429a      	cmp	r2, r3
 8016536:	d001      	beq.n	801653c <check_fs+0x48>
 8016538:	2303      	movs	r3, #3
 801653a:	e029      	b.n	8016590 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016542:	2be9      	cmp	r3, #233	; 0xe9
 8016544:	d009      	beq.n	801655a <check_fs+0x66>
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801654c:	2beb      	cmp	r3, #235	; 0xeb
 801654e:	d11e      	bne.n	801658e <check_fs+0x9a>
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8016556:	2b90      	cmp	r3, #144	; 0x90
 8016558:	d119      	bne.n	801658e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	3338      	adds	r3, #56	; 0x38
 801655e:	3336      	adds	r3, #54	; 0x36
 8016560:	4618      	mov	r0, r3
 8016562:	f7fe f9b5 	bl	80148d0 <ld_dword>
 8016566:	4603      	mov	r3, r0
 8016568:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801656c:	4a0a      	ldr	r2, [pc, #40]	; (8016598 <check_fs+0xa4>)
 801656e:	4293      	cmp	r3, r2
 8016570:	d101      	bne.n	8016576 <check_fs+0x82>
 8016572:	2300      	movs	r3, #0
 8016574:	e00c      	b.n	8016590 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	3338      	adds	r3, #56	; 0x38
 801657a:	3352      	adds	r3, #82	; 0x52
 801657c:	4618      	mov	r0, r3
 801657e:	f7fe f9a7 	bl	80148d0 <ld_dword>
 8016582:	4603      	mov	r3, r0
 8016584:	4a05      	ldr	r2, [pc, #20]	; (801659c <check_fs+0xa8>)
 8016586:	4293      	cmp	r3, r2
 8016588:	d101      	bne.n	801658e <check_fs+0x9a>
 801658a:	2300      	movs	r3, #0
 801658c:	e000      	b.n	8016590 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801658e:	2302      	movs	r3, #2
}
 8016590:	4618      	mov	r0, r3
 8016592:	3708      	adds	r7, #8
 8016594:	46bd      	mov	sp, r7
 8016596:	bd80      	pop	{r7, pc}
 8016598:	00544146 	.word	0x00544146
 801659c:	33544146 	.word	0x33544146

080165a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b096      	sub	sp, #88	; 0x58
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	60f8      	str	r0, [r7, #12]
 80165a8:	60b9      	str	r1, [r7, #8]
 80165aa:	4613      	mov	r3, r2
 80165ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80165ae:	68bb      	ldr	r3, [r7, #8]
 80165b0:	2200      	movs	r2, #0
 80165b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80165b4:	68f8      	ldr	r0, [r7, #12]
 80165b6:	f7ff ff59 	bl	801646c <get_ldnumber>
 80165ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80165bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165be:	2b00      	cmp	r3, #0
 80165c0:	da01      	bge.n	80165c6 <find_volume+0x26>
 80165c2:	230b      	movs	r3, #11
 80165c4:	e265      	b.n	8016a92 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80165c6:	4a9f      	ldr	r2, [pc, #636]	; (8016844 <find_volume+0x2a4>)
 80165c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80165ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80165d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d101      	bne.n	80165da <find_volume+0x3a>
 80165d6:	230c      	movs	r3, #12
 80165d8:	e25b      	b.n	8016a92 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80165da:	68bb      	ldr	r3, [r7, #8]
 80165dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80165de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80165e0:	79fb      	ldrb	r3, [r7, #7]
 80165e2:	f023 0301 	bic.w	r3, r3, #1
 80165e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80165e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ea:	781b      	ldrb	r3, [r3, #0]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d01a      	beq.n	8016626 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80165f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165f2:	785b      	ldrb	r3, [r3, #1]
 80165f4:	4618      	mov	r0, r3
 80165f6:	f7fe f8b5 	bl	8014764 <disk_status>
 80165fa:	4603      	mov	r3, r0
 80165fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016600:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016604:	f003 0301 	and.w	r3, r3, #1
 8016608:	2b00      	cmp	r3, #0
 801660a:	d10c      	bne.n	8016626 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801660c:	79fb      	ldrb	r3, [r7, #7]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d007      	beq.n	8016622 <find_volume+0x82>
 8016612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016616:	f003 0304 	and.w	r3, r3, #4
 801661a:	2b00      	cmp	r3, #0
 801661c:	d001      	beq.n	8016622 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801661e:	230a      	movs	r3, #10
 8016620:	e237      	b.n	8016a92 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8016622:	2300      	movs	r3, #0
 8016624:	e235      	b.n	8016a92 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016628:	2200      	movs	r2, #0
 801662a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801662c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801662e:	b2da      	uxtb	r2, r3
 8016630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016632:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016636:	785b      	ldrb	r3, [r3, #1]
 8016638:	4618      	mov	r0, r3
 801663a:	f7fe f8ad 	bl	8014798 <disk_initialize>
 801663e:	4603      	mov	r3, r0
 8016640:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016644:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016648:	f003 0301 	and.w	r3, r3, #1
 801664c:	2b00      	cmp	r3, #0
 801664e:	d001      	beq.n	8016654 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016650:	2303      	movs	r3, #3
 8016652:	e21e      	b.n	8016a92 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016654:	79fb      	ldrb	r3, [r7, #7]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d007      	beq.n	801666a <find_volume+0xca>
 801665a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801665e:	f003 0304 	and.w	r3, r3, #4
 8016662:	2b00      	cmp	r3, #0
 8016664:	d001      	beq.n	801666a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016666:	230a      	movs	r3, #10
 8016668:	e213      	b.n	8016a92 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801666c:	7858      	ldrb	r0, [r3, #1]
 801666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016670:	330c      	adds	r3, #12
 8016672:	461a      	mov	r2, r3
 8016674:	2102      	movs	r1, #2
 8016676:	f7fe f8f5 	bl	8014864 <disk_ioctl>
 801667a:	4603      	mov	r3, r0
 801667c:	2b00      	cmp	r3, #0
 801667e:	d001      	beq.n	8016684 <find_volume+0xe4>
 8016680:	2301      	movs	r3, #1
 8016682:	e206      	b.n	8016a92 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8016684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016686:	899b      	ldrh	r3, [r3, #12]
 8016688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801668c:	d80d      	bhi.n	80166aa <find_volume+0x10a>
 801668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016690:	899b      	ldrh	r3, [r3, #12]
 8016692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016696:	d308      	bcc.n	80166aa <find_volume+0x10a>
 8016698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801669a:	899b      	ldrh	r3, [r3, #12]
 801669c:	461a      	mov	r2, r3
 801669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166a0:	899b      	ldrh	r3, [r3, #12]
 80166a2:	3b01      	subs	r3, #1
 80166a4:	4013      	ands	r3, r2
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d001      	beq.n	80166ae <find_volume+0x10e>
 80166aa:	2301      	movs	r3, #1
 80166ac:	e1f1      	b.n	8016a92 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80166ae:	2300      	movs	r3, #0
 80166b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80166b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80166b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80166b6:	f7ff ff1d 	bl	80164f4 <check_fs>
 80166ba:	4603      	mov	r3, r0
 80166bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80166c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80166c4:	2b02      	cmp	r3, #2
 80166c6:	d149      	bne.n	801675c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80166c8:	2300      	movs	r3, #0
 80166ca:	643b      	str	r3, [r7, #64]	; 0x40
 80166cc:	e01e      	b.n	801670c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80166ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166d0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80166d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80166d6:	011b      	lsls	r3, r3, #4
 80166d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80166dc:	4413      	add	r3, r2
 80166de:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80166e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166e2:	3304      	adds	r3, #4
 80166e4:	781b      	ldrb	r3, [r3, #0]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d006      	beq.n	80166f8 <find_volume+0x158>
 80166ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ec:	3308      	adds	r3, #8
 80166ee:	4618      	mov	r0, r3
 80166f0:	f7fe f8ee 	bl	80148d0 <ld_dword>
 80166f4:	4602      	mov	r2, r0
 80166f6:	e000      	b.n	80166fa <find_volume+0x15a>
 80166f8:	2200      	movs	r2, #0
 80166fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80166fc:	009b      	lsls	r3, r3, #2
 80166fe:	3358      	adds	r3, #88	; 0x58
 8016700:	443b      	add	r3, r7
 8016702:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016708:	3301      	adds	r3, #1
 801670a:	643b      	str	r3, [r7, #64]	; 0x40
 801670c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801670e:	2b03      	cmp	r3, #3
 8016710:	d9dd      	bls.n	80166ce <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016712:	2300      	movs	r3, #0
 8016714:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016718:	2b00      	cmp	r3, #0
 801671a:	d002      	beq.n	8016722 <find_volume+0x182>
 801671c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801671e:	3b01      	subs	r3, #1
 8016720:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016724:	009b      	lsls	r3, r3, #2
 8016726:	3358      	adds	r3, #88	; 0x58
 8016728:	443b      	add	r3, r7
 801672a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801672e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016732:	2b00      	cmp	r3, #0
 8016734:	d005      	beq.n	8016742 <find_volume+0x1a2>
 8016736:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016738:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801673a:	f7ff fedb 	bl	80164f4 <check_fs>
 801673e:	4603      	mov	r3, r0
 8016740:	e000      	b.n	8016744 <find_volume+0x1a4>
 8016742:	2303      	movs	r3, #3
 8016744:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801674c:	2b01      	cmp	r3, #1
 801674e:	d905      	bls.n	801675c <find_volume+0x1bc>
 8016750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016752:	3301      	adds	r3, #1
 8016754:	643b      	str	r3, [r7, #64]	; 0x40
 8016756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016758:	2b03      	cmp	r3, #3
 801675a:	d9e2      	bls.n	8016722 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801675c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016760:	2b04      	cmp	r3, #4
 8016762:	d101      	bne.n	8016768 <find_volume+0x1c8>
 8016764:	2301      	movs	r3, #1
 8016766:	e194      	b.n	8016a92 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016768:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801676c:	2b01      	cmp	r3, #1
 801676e:	d901      	bls.n	8016774 <find_volume+0x1d4>
 8016770:	230d      	movs	r3, #13
 8016772:	e18e      	b.n	8016a92 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016776:	3338      	adds	r3, #56	; 0x38
 8016778:	330b      	adds	r3, #11
 801677a:	4618      	mov	r0, r3
 801677c:	f7fe f890 	bl	80148a0 <ld_word>
 8016780:	4603      	mov	r3, r0
 8016782:	461a      	mov	r2, r3
 8016784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016786:	899b      	ldrh	r3, [r3, #12]
 8016788:	429a      	cmp	r2, r3
 801678a:	d001      	beq.n	8016790 <find_volume+0x1f0>
 801678c:	230d      	movs	r3, #13
 801678e:	e180      	b.n	8016a92 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016792:	3338      	adds	r3, #56	; 0x38
 8016794:	3316      	adds	r3, #22
 8016796:	4618      	mov	r0, r3
 8016798:	f7fe f882 	bl	80148a0 <ld_word>
 801679c:	4603      	mov	r3, r0
 801679e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80167a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d106      	bne.n	80167b4 <find_volume+0x214>
 80167a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167a8:	3338      	adds	r3, #56	; 0x38
 80167aa:	3324      	adds	r3, #36	; 0x24
 80167ac:	4618      	mov	r0, r3
 80167ae:	f7fe f88f 	bl	80148d0 <ld_dword>
 80167b2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80167b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80167b8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80167ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167bc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80167c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167c2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80167c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167c6:	789b      	ldrb	r3, [r3, #2]
 80167c8:	2b01      	cmp	r3, #1
 80167ca:	d005      	beq.n	80167d8 <find_volume+0x238>
 80167cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167ce:	789b      	ldrb	r3, [r3, #2]
 80167d0:	2b02      	cmp	r3, #2
 80167d2:	d001      	beq.n	80167d8 <find_volume+0x238>
 80167d4:	230d      	movs	r3, #13
 80167d6:	e15c      	b.n	8016a92 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80167d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167da:	789b      	ldrb	r3, [r3, #2]
 80167dc:	461a      	mov	r2, r3
 80167de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167e0:	fb02 f303 	mul.w	r3, r2, r3
 80167e4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80167e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80167ec:	b29a      	uxth	r2, r3
 80167ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167f0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80167f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167f4:	895b      	ldrh	r3, [r3, #10]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d008      	beq.n	801680c <find_volume+0x26c>
 80167fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167fc:	895b      	ldrh	r3, [r3, #10]
 80167fe:	461a      	mov	r2, r3
 8016800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016802:	895b      	ldrh	r3, [r3, #10]
 8016804:	3b01      	subs	r3, #1
 8016806:	4013      	ands	r3, r2
 8016808:	2b00      	cmp	r3, #0
 801680a:	d001      	beq.n	8016810 <find_volume+0x270>
 801680c:	230d      	movs	r3, #13
 801680e:	e140      	b.n	8016a92 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016812:	3338      	adds	r3, #56	; 0x38
 8016814:	3311      	adds	r3, #17
 8016816:	4618      	mov	r0, r3
 8016818:	f7fe f842 	bl	80148a0 <ld_word>
 801681c:	4603      	mov	r3, r0
 801681e:	461a      	mov	r2, r3
 8016820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016822:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016826:	891b      	ldrh	r3, [r3, #8]
 8016828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801682a:	8992      	ldrh	r2, [r2, #12]
 801682c:	0952      	lsrs	r2, r2, #5
 801682e:	b292      	uxth	r2, r2
 8016830:	fbb3 f1f2 	udiv	r1, r3, r2
 8016834:	fb01 f202 	mul.w	r2, r1, r2
 8016838:	1a9b      	subs	r3, r3, r2
 801683a:	b29b      	uxth	r3, r3
 801683c:	2b00      	cmp	r3, #0
 801683e:	d003      	beq.n	8016848 <find_volume+0x2a8>
 8016840:	230d      	movs	r3, #13
 8016842:	e126      	b.n	8016a92 <find_volume+0x4f2>
 8016844:	24000d2c 	.word	0x24000d2c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801684a:	3338      	adds	r3, #56	; 0x38
 801684c:	3313      	adds	r3, #19
 801684e:	4618      	mov	r0, r3
 8016850:	f7fe f826 	bl	80148a0 <ld_word>
 8016854:	4603      	mov	r3, r0
 8016856:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801685a:	2b00      	cmp	r3, #0
 801685c:	d106      	bne.n	801686c <find_volume+0x2cc>
 801685e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016860:	3338      	adds	r3, #56	; 0x38
 8016862:	3320      	adds	r3, #32
 8016864:	4618      	mov	r0, r3
 8016866:	f7fe f833 	bl	80148d0 <ld_dword>
 801686a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801686e:	3338      	adds	r3, #56	; 0x38
 8016870:	330e      	adds	r3, #14
 8016872:	4618      	mov	r0, r3
 8016874:	f7fe f814 	bl	80148a0 <ld_word>
 8016878:	4603      	mov	r3, r0
 801687a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801687c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801687e:	2b00      	cmp	r3, #0
 8016880:	d101      	bne.n	8016886 <find_volume+0x2e6>
 8016882:	230d      	movs	r3, #13
 8016884:	e105      	b.n	8016a92 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016886:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801688a:	4413      	add	r3, r2
 801688c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801688e:	8911      	ldrh	r1, [r2, #8]
 8016890:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016892:	8992      	ldrh	r2, [r2, #12]
 8016894:	0952      	lsrs	r2, r2, #5
 8016896:	b292      	uxth	r2, r2
 8016898:	fbb1 f2f2 	udiv	r2, r1, r2
 801689c:	b292      	uxth	r2, r2
 801689e:	4413      	add	r3, r2
 80168a0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80168a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80168a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168a6:	429a      	cmp	r2, r3
 80168a8:	d201      	bcs.n	80168ae <find_volume+0x30e>
 80168aa:	230d      	movs	r3, #13
 80168ac:	e0f1      	b.n	8016a92 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80168ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80168b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168b2:	1ad3      	subs	r3, r2, r3
 80168b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80168b6:	8952      	ldrh	r2, [r2, #10]
 80168b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80168bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80168be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d101      	bne.n	80168c8 <find_volume+0x328>
 80168c4:	230d      	movs	r3, #13
 80168c6:	e0e4      	b.n	8016a92 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80168c8:	2303      	movs	r3, #3
 80168ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80168ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80168d4:	4293      	cmp	r3, r2
 80168d6:	d802      	bhi.n	80168de <find_volume+0x33e>
 80168d8:	2302      	movs	r3, #2
 80168da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80168de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168e0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80168e4:	4293      	cmp	r3, r2
 80168e6:	d802      	bhi.n	80168ee <find_volume+0x34e>
 80168e8:	2301      	movs	r3, #1
 80168ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80168ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168f0:	1c9a      	adds	r2, r3, #2
 80168f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168f4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80168f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80168fa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80168fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80168fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016900:	441a      	add	r2, r3
 8016902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016904:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8016906:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801690a:	441a      	add	r2, r3
 801690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801690e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8016910:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016914:	2b03      	cmp	r3, #3
 8016916:	d11e      	bne.n	8016956 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801691a:	3338      	adds	r3, #56	; 0x38
 801691c:	332a      	adds	r3, #42	; 0x2a
 801691e:	4618      	mov	r0, r3
 8016920:	f7fd ffbe 	bl	80148a0 <ld_word>
 8016924:	4603      	mov	r3, r0
 8016926:	2b00      	cmp	r3, #0
 8016928:	d001      	beq.n	801692e <find_volume+0x38e>
 801692a:	230d      	movs	r3, #13
 801692c:	e0b1      	b.n	8016a92 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016930:	891b      	ldrh	r3, [r3, #8]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d001      	beq.n	801693a <find_volume+0x39a>
 8016936:	230d      	movs	r3, #13
 8016938:	e0ab      	b.n	8016a92 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801693a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801693c:	3338      	adds	r3, #56	; 0x38
 801693e:	332c      	adds	r3, #44	; 0x2c
 8016940:	4618      	mov	r0, r3
 8016942:	f7fd ffc5 	bl	80148d0 <ld_dword>
 8016946:	4602      	mov	r2, r0
 8016948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801694a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801694e:	69db      	ldr	r3, [r3, #28]
 8016950:	009b      	lsls	r3, r3, #2
 8016952:	647b      	str	r3, [r7, #68]	; 0x44
 8016954:	e01f      	b.n	8016996 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016958:	891b      	ldrh	r3, [r3, #8]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d101      	bne.n	8016962 <find_volume+0x3c2>
 801695e:	230d      	movs	r3, #13
 8016960:	e097      	b.n	8016a92 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016968:	441a      	add	r2, r3
 801696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801696c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801696e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016972:	2b02      	cmp	r3, #2
 8016974:	d103      	bne.n	801697e <find_volume+0x3de>
 8016976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016978:	69db      	ldr	r3, [r3, #28]
 801697a:	005b      	lsls	r3, r3, #1
 801697c:	e00a      	b.n	8016994 <find_volume+0x3f4>
 801697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016980:	69da      	ldr	r2, [r3, #28]
 8016982:	4613      	mov	r3, r2
 8016984:	005b      	lsls	r3, r3, #1
 8016986:	4413      	add	r3, r2
 8016988:	085a      	lsrs	r2, r3, #1
 801698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801698c:	69db      	ldr	r3, [r3, #28]
 801698e:	f003 0301 	and.w	r3, r3, #1
 8016992:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016994:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016998:	6a1a      	ldr	r2, [r3, #32]
 801699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801699c:	899b      	ldrh	r3, [r3, #12]
 801699e:	4619      	mov	r1, r3
 80169a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169a2:	440b      	add	r3, r1
 80169a4:	3b01      	subs	r3, #1
 80169a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80169a8:	8989      	ldrh	r1, [r1, #12]
 80169aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80169ae:	429a      	cmp	r2, r3
 80169b0:	d201      	bcs.n	80169b6 <find_volume+0x416>
 80169b2:	230d      	movs	r3, #13
 80169b4:	e06d      	b.n	8016a92 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80169b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169b8:	f04f 32ff 	mov.w	r2, #4294967295
 80169bc:	619a      	str	r2, [r3, #24]
 80169be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169c0:	699a      	ldr	r2, [r3, #24]
 80169c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169c4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80169c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169c8:	2280      	movs	r2, #128	; 0x80
 80169ca:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80169cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80169d0:	2b03      	cmp	r3, #3
 80169d2:	d149      	bne.n	8016a68 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80169d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169d6:	3338      	adds	r3, #56	; 0x38
 80169d8:	3330      	adds	r3, #48	; 0x30
 80169da:	4618      	mov	r0, r3
 80169dc:	f7fd ff60 	bl	80148a0 <ld_word>
 80169e0:	4603      	mov	r3, r0
 80169e2:	2b01      	cmp	r3, #1
 80169e4:	d140      	bne.n	8016a68 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80169e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80169e8:	3301      	adds	r3, #1
 80169ea:	4619      	mov	r1, r3
 80169ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80169ee:	f7fe fa07 	bl	8014e00 <move_window>
 80169f2:	4603      	mov	r3, r0
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d137      	bne.n	8016a68 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80169f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169fa:	2200      	movs	r2, #0
 80169fc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80169fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a00:	3338      	adds	r3, #56	; 0x38
 8016a02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016a06:	4618      	mov	r0, r3
 8016a08:	f7fd ff4a 	bl	80148a0 <ld_word>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	461a      	mov	r2, r3
 8016a10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016a14:	429a      	cmp	r2, r3
 8016a16:	d127      	bne.n	8016a68 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8016a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a1a:	3338      	adds	r3, #56	; 0x38
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	f7fd ff57 	bl	80148d0 <ld_dword>
 8016a22:	4603      	mov	r3, r0
 8016a24:	4a1d      	ldr	r2, [pc, #116]	; (8016a9c <find_volume+0x4fc>)
 8016a26:	4293      	cmp	r3, r2
 8016a28:	d11e      	bne.n	8016a68 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8016a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a2c:	3338      	adds	r3, #56	; 0x38
 8016a2e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016a32:	4618      	mov	r0, r3
 8016a34:	f7fd ff4c 	bl	80148d0 <ld_dword>
 8016a38:	4603      	mov	r3, r0
 8016a3a:	4a19      	ldr	r2, [pc, #100]	; (8016aa0 <find_volume+0x500>)
 8016a3c:	4293      	cmp	r3, r2
 8016a3e:	d113      	bne.n	8016a68 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a42:	3338      	adds	r3, #56	; 0x38
 8016a44:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8016a48:	4618      	mov	r0, r3
 8016a4a:	f7fd ff41 	bl	80148d0 <ld_dword>
 8016a4e:	4602      	mov	r2, r0
 8016a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a52:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8016a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a56:	3338      	adds	r3, #56	; 0x38
 8016a58:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	f7fd ff37 	bl	80148d0 <ld_dword>
 8016a62:	4602      	mov	r2, r0
 8016a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a66:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8016a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a6a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8016a6e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016a70:	4b0c      	ldr	r3, [pc, #48]	; (8016aa4 <find_volume+0x504>)
 8016a72:	881b      	ldrh	r3, [r3, #0]
 8016a74:	3301      	adds	r3, #1
 8016a76:	b29a      	uxth	r2, r3
 8016a78:	4b0a      	ldr	r3, [pc, #40]	; (8016aa4 <find_volume+0x504>)
 8016a7a:	801a      	strh	r2, [r3, #0]
 8016a7c:	4b09      	ldr	r3, [pc, #36]	; (8016aa4 <find_volume+0x504>)
 8016a7e:	881a      	ldrh	r2, [r3, #0]
 8016a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a82:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8016a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a86:	4a08      	ldr	r2, [pc, #32]	; (8016aa8 <find_volume+0x508>)
 8016a88:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8016a8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016a8c:	f7fe f950 	bl	8014d30 <clear_lock>
#endif
	return FR_OK;
 8016a90:	2300      	movs	r3, #0
}
 8016a92:	4618      	mov	r0, r3
 8016a94:	3758      	adds	r7, #88	; 0x58
 8016a96:	46bd      	mov	sp, r7
 8016a98:	bd80      	pop	{r7, pc}
 8016a9a:	bf00      	nop
 8016a9c:	41615252 	.word	0x41615252
 8016aa0:	61417272 	.word	0x61417272
 8016aa4:	24000d30 	.word	0x24000d30
 8016aa8:	24000d54 	.word	0x24000d54

08016aac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b084      	sub	sp, #16
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
 8016ab4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8016ab6:	2309      	movs	r3, #9
 8016ab8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d01c      	beq.n	8016afa <validate+0x4e>
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d018      	beq.n	8016afa <validate+0x4e>
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	781b      	ldrb	r3, [r3, #0]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d013      	beq.n	8016afa <validate+0x4e>
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	889a      	ldrh	r2, [r3, #4]
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	88db      	ldrh	r3, [r3, #6]
 8016adc:	429a      	cmp	r2, r3
 8016ade:	d10c      	bne.n	8016afa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	785b      	ldrb	r3, [r3, #1]
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	f7fd fe3c 	bl	8014764 <disk_status>
 8016aec:	4603      	mov	r3, r0
 8016aee:	f003 0301 	and.w	r3, r3, #1
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d101      	bne.n	8016afa <validate+0x4e>
			res = FR_OK;
 8016af6:	2300      	movs	r3, #0
 8016af8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016afa:	7bfb      	ldrb	r3, [r7, #15]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d102      	bne.n	8016b06 <validate+0x5a>
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	e000      	b.n	8016b08 <validate+0x5c>
 8016b06:	2300      	movs	r3, #0
 8016b08:	683a      	ldr	r2, [r7, #0]
 8016b0a:	6013      	str	r3, [r2, #0]
	return res;
 8016b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b0e:	4618      	mov	r0, r3
 8016b10:	3710      	adds	r7, #16
 8016b12:	46bd      	mov	sp, r7
 8016b14:	bd80      	pop	{r7, pc}
	...

08016b18 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b088      	sub	sp, #32
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	60f8      	str	r0, [r7, #12]
 8016b20:	60b9      	str	r1, [r7, #8]
 8016b22:	4613      	mov	r3, r2
 8016b24:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016b26:	68bb      	ldr	r3, [r7, #8]
 8016b28:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016b2a:	f107 0310 	add.w	r3, r7, #16
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f7ff fc9c 	bl	801646c <get_ldnumber>
 8016b34:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016b36:	69fb      	ldr	r3, [r7, #28]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	da01      	bge.n	8016b40 <f_mount+0x28>
 8016b3c:	230b      	movs	r3, #11
 8016b3e:	e02b      	b.n	8016b98 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016b40:	4a17      	ldr	r2, [pc, #92]	; (8016ba0 <f_mount+0x88>)
 8016b42:	69fb      	ldr	r3, [r7, #28]
 8016b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016b48:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8016b4a:	69bb      	ldr	r3, [r7, #24]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d005      	beq.n	8016b5c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8016b50:	69b8      	ldr	r0, [r7, #24]
 8016b52:	f7fe f8ed 	bl	8014d30 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8016b56:	69bb      	ldr	r3, [r7, #24]
 8016b58:	2200      	movs	r2, #0
 8016b5a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d002      	beq.n	8016b68 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	2200      	movs	r2, #0
 8016b66:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8016b68:	68fa      	ldr	r2, [r7, #12]
 8016b6a:	490d      	ldr	r1, [pc, #52]	; (8016ba0 <f_mount+0x88>)
 8016b6c:	69fb      	ldr	r3, [r7, #28]
 8016b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d002      	beq.n	8016b7e <f_mount+0x66>
 8016b78:	79fb      	ldrb	r3, [r7, #7]
 8016b7a:	2b01      	cmp	r3, #1
 8016b7c:	d001      	beq.n	8016b82 <f_mount+0x6a>
 8016b7e:	2300      	movs	r3, #0
 8016b80:	e00a      	b.n	8016b98 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016b82:	f107 010c 	add.w	r1, r7, #12
 8016b86:	f107 0308 	add.w	r3, r7, #8
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f7ff fd07 	bl	80165a0 <find_volume>
 8016b92:	4603      	mov	r3, r0
 8016b94:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b98:	4618      	mov	r0, r3
 8016b9a:	3720      	adds	r7, #32
 8016b9c:	46bd      	mov	sp, r7
 8016b9e:	bd80      	pop	{r7, pc}
 8016ba0:	24000d2c 	.word	0x24000d2c

08016ba4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b09a      	sub	sp, #104	; 0x68
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	60f8      	str	r0, [r7, #12]
 8016bac:	60b9      	str	r1, [r7, #8]
 8016bae:	4613      	mov	r3, r2
 8016bb0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d101      	bne.n	8016bbc <f_open+0x18>
 8016bb8:	2309      	movs	r3, #9
 8016bba:	e1bb      	b.n	8016f34 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016bbc:	79fb      	ldrb	r3, [r7, #7]
 8016bbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016bc2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8016bc4:	79fa      	ldrb	r2, [r7, #7]
 8016bc6:	f107 0114 	add.w	r1, r7, #20
 8016bca:	f107 0308 	add.w	r3, r7, #8
 8016bce:	4618      	mov	r0, r3
 8016bd0:	f7ff fce6 	bl	80165a0 <find_volume>
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8016bda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	f040 819f 	bne.w	8016f22 <f_open+0x37e>
		dj.obj.fs = fs;
 8016be4:	697b      	ldr	r3, [r7, #20]
 8016be6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016be8:	68ba      	ldr	r2, [r7, #8]
 8016bea:	f107 0318 	add.w	r3, r7, #24
 8016bee:	4611      	mov	r1, r2
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	f7ff fbc5 	bl	8016380 <follow_path>
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016bfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d11a      	bne.n	8016c3a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016c04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016c08:	b25b      	sxtb	r3, r3
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	da03      	bge.n	8016c16 <f_open+0x72>
				res = FR_INVALID_NAME;
 8016c0e:	2306      	movs	r3, #6
 8016c10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016c14:	e011      	b.n	8016c3a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016c16:	79fb      	ldrb	r3, [r7, #7]
 8016c18:	f023 0301 	bic.w	r3, r3, #1
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	bf14      	ite	ne
 8016c20:	2301      	movne	r3, #1
 8016c22:	2300      	moveq	r3, #0
 8016c24:	b2db      	uxtb	r3, r3
 8016c26:	461a      	mov	r2, r3
 8016c28:	f107 0318 	add.w	r3, r7, #24
 8016c2c:	4611      	mov	r1, r2
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f7fd ff36 	bl	8014aa0 <chk_lock>
 8016c34:	4603      	mov	r3, r0
 8016c36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016c3a:	79fb      	ldrb	r3, [r7, #7]
 8016c3c:	f003 031c 	and.w	r3, r3, #28
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d07f      	beq.n	8016d44 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8016c44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d017      	beq.n	8016c7c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016c4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016c50:	2b04      	cmp	r3, #4
 8016c52:	d10e      	bne.n	8016c72 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016c54:	f7fd ff80 	bl	8014b58 <enq_lock>
 8016c58:	4603      	mov	r3, r0
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d006      	beq.n	8016c6c <f_open+0xc8>
 8016c5e:	f107 0318 	add.w	r3, r7, #24
 8016c62:	4618      	mov	r0, r3
 8016c64:	f7ff f8dc 	bl	8015e20 <dir_register>
 8016c68:	4603      	mov	r3, r0
 8016c6a:	e000      	b.n	8016c6e <f_open+0xca>
 8016c6c:	2312      	movs	r3, #18
 8016c6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016c72:	79fb      	ldrb	r3, [r7, #7]
 8016c74:	f043 0308 	orr.w	r3, r3, #8
 8016c78:	71fb      	strb	r3, [r7, #7]
 8016c7a:	e010      	b.n	8016c9e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016c7c:	7fbb      	ldrb	r3, [r7, #30]
 8016c7e:	f003 0311 	and.w	r3, r3, #17
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d003      	beq.n	8016c8e <f_open+0xea>
					res = FR_DENIED;
 8016c86:	2307      	movs	r3, #7
 8016c88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016c8c:	e007      	b.n	8016c9e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016c8e:	79fb      	ldrb	r3, [r7, #7]
 8016c90:	f003 0304 	and.w	r3, r3, #4
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d002      	beq.n	8016c9e <f_open+0xfa>
 8016c98:	2308      	movs	r3, #8
 8016c9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016c9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d168      	bne.n	8016d78 <f_open+0x1d4>
 8016ca6:	79fb      	ldrb	r3, [r7, #7]
 8016ca8:	f003 0308 	and.w	r3, r3, #8
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d063      	beq.n	8016d78 <f_open+0x1d4>
				dw = GET_FATTIME();
 8016cb0:	f7fb fb6e 	bl	8012390 <get_fattime>
 8016cb4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cb8:	330e      	adds	r3, #14
 8016cba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	f7fd fe45 	bl	801494c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cc4:	3316      	adds	r3, #22
 8016cc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f7fd fe3f 	bl	801494c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cd0:	330b      	adds	r3, #11
 8016cd2:	2220      	movs	r2, #32
 8016cd4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016cd6:	697b      	ldr	r3, [r7, #20]
 8016cd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016cda:	4611      	mov	r1, r2
 8016cdc:	4618      	mov	r0, r3
 8016cde:	f7fe fe17 	bl	8015910 <ld_clust>
 8016ce2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016ce4:	697b      	ldr	r3, [r7, #20]
 8016ce6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016ce8:	2200      	movs	r2, #0
 8016cea:	4618      	mov	r0, r3
 8016cec:	f7fe fe2f 	bl	801594e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8016cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cf2:	331c      	adds	r3, #28
 8016cf4:	2100      	movs	r1, #0
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	f7fd fe28 	bl	801494c <st_dword>
					fs->wflag = 1;
 8016cfc:	697b      	ldr	r3, [r7, #20]
 8016cfe:	2201      	movs	r2, #1
 8016d00:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8016d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d037      	beq.n	8016d78 <f_open+0x1d4>
						dw = fs->winsect;
 8016d08:	697b      	ldr	r3, [r7, #20]
 8016d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d0c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8016d0e:	f107 0318 	add.w	r3, r7, #24
 8016d12:	2200      	movs	r2, #0
 8016d14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7fe fb1f 	bl	801535a <remove_chain>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8016d22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d126      	bne.n	8016d78 <f_open+0x1d4>
							res = move_window(fs, dw);
 8016d2a:	697b      	ldr	r3, [r7, #20]
 8016d2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7fe f866 	bl	8014e00 <move_window>
 8016d34:	4603      	mov	r3, r0
 8016d36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016d3a:	697b      	ldr	r3, [r7, #20]
 8016d3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016d3e:	3a01      	subs	r2, #1
 8016d40:	615a      	str	r2, [r3, #20]
 8016d42:	e019      	b.n	8016d78 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016d44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d115      	bne.n	8016d78 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016d4c:	7fbb      	ldrb	r3, [r7, #30]
 8016d4e:	f003 0310 	and.w	r3, r3, #16
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d003      	beq.n	8016d5e <f_open+0x1ba>
					res = FR_NO_FILE;
 8016d56:	2304      	movs	r3, #4
 8016d58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016d5c:	e00c      	b.n	8016d78 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8016d5e:	79fb      	ldrb	r3, [r7, #7]
 8016d60:	f003 0302 	and.w	r3, r3, #2
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d007      	beq.n	8016d78 <f_open+0x1d4>
 8016d68:	7fbb      	ldrb	r3, [r7, #30]
 8016d6a:	f003 0301 	and.w	r3, r3, #1
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d002      	beq.n	8016d78 <f_open+0x1d4>
						res = FR_DENIED;
 8016d72:	2307      	movs	r3, #7
 8016d74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8016d78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d128      	bne.n	8016dd2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016d80:	79fb      	ldrb	r3, [r7, #7]
 8016d82:	f003 0308 	and.w	r3, r3, #8
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d003      	beq.n	8016d92 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8016d8a:	79fb      	ldrb	r3, [r7, #7]
 8016d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d90:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016d92:	697b      	ldr	r3, [r7, #20]
 8016d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8016d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016da0:	79fb      	ldrb	r3, [r7, #7]
 8016da2:	f023 0301 	bic.w	r3, r3, #1
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	bf14      	ite	ne
 8016daa:	2301      	movne	r3, #1
 8016dac:	2300      	moveq	r3, #0
 8016dae:	b2db      	uxtb	r3, r3
 8016db0:	461a      	mov	r2, r3
 8016db2:	f107 0318 	add.w	r3, r7, #24
 8016db6:	4611      	mov	r1, r2
 8016db8:	4618      	mov	r0, r3
 8016dba:	f7fd feef 	bl	8014b9c <inc_lock>
 8016dbe:	4602      	mov	r2, r0
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	691b      	ldr	r3, [r3, #16]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d102      	bne.n	8016dd2 <f_open+0x22e>
 8016dcc:	2302      	movs	r3, #2
 8016dce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8016dd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	f040 80a3 	bne.w	8016f22 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016ddc:	697b      	ldr	r3, [r7, #20]
 8016dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016de0:	4611      	mov	r1, r2
 8016de2:	4618      	mov	r0, r3
 8016de4:	f7fe fd94 	bl	8015910 <ld_clust>
 8016de8:	4602      	mov	r2, r0
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016df0:	331c      	adds	r3, #28
 8016df2:	4618      	mov	r0, r3
 8016df4:	f7fd fd6c 	bl	80148d0 <ld_dword>
 8016df8:	4602      	mov	r2, r0
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	2200      	movs	r2, #0
 8016e02:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016e04:	697a      	ldr	r2, [r7, #20]
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016e0a:	697b      	ldr	r3, [r7, #20]
 8016e0c:	88da      	ldrh	r2, [r3, #6]
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	79fa      	ldrb	r2, [r7, #7]
 8016e16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	2200      	movs	r2, #0
 8016e22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	2200      	movs	r2, #0
 8016e28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	3330      	adds	r3, #48	; 0x30
 8016e2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016e32:	2100      	movs	r1, #0
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7fd fdd6 	bl	80149e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016e3a:	79fb      	ldrb	r3, [r7, #7]
 8016e3c:	f003 0320 	and.w	r3, r3, #32
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d06e      	beq.n	8016f22 <f_open+0x37e>
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	68db      	ldr	r3, [r3, #12]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d06a      	beq.n	8016f22 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	68da      	ldr	r2, [r3, #12]
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016e54:	697b      	ldr	r3, [r7, #20]
 8016e56:	895b      	ldrh	r3, [r3, #10]
 8016e58:	461a      	mov	r2, r3
 8016e5a:	697b      	ldr	r3, [r7, #20]
 8016e5c:	899b      	ldrh	r3, [r3, #12]
 8016e5e:	fb02 f303 	mul.w	r3, r2, r3
 8016e62:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	689b      	ldr	r3, [r3, #8]
 8016e68:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	68db      	ldr	r3, [r3, #12]
 8016e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016e70:	e016      	b.n	8016ea0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016e76:	4618      	mov	r0, r3
 8016e78:	f7fe f87f 	bl	8014f7a <get_fat>
 8016e7c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8016e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016e80:	2b01      	cmp	r3, #1
 8016e82:	d802      	bhi.n	8016e8a <f_open+0x2e6>
 8016e84:	2302      	movs	r3, #2
 8016e86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e90:	d102      	bne.n	8016e98 <f_open+0x2f4>
 8016e92:	2301      	movs	r3, #1
 8016e94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016e98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e9c:	1ad3      	subs	r3, r2, r3
 8016e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016ea0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d103      	bne.n	8016eb0 <f_open+0x30c>
 8016ea8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016eac:	429a      	cmp	r2, r3
 8016eae:	d8e0      	bhi.n	8016e72 <f_open+0x2ce>
				}
				fp->clust = clst;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016eb4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016eb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d131      	bne.n	8016f22 <f_open+0x37e>
 8016ebe:	697b      	ldr	r3, [r7, #20]
 8016ec0:	899b      	ldrh	r3, [r3, #12]
 8016ec2:	461a      	mov	r2, r3
 8016ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ec6:	fbb3 f1f2 	udiv	r1, r3, r2
 8016eca:	fb01 f202 	mul.w	r2, r1, r2
 8016ece:	1a9b      	subs	r3, r3, r2
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d026      	beq.n	8016f22 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016ed4:	697b      	ldr	r3, [r7, #20]
 8016ed6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f7fe f82f 	bl	8014f3c <clust2sect>
 8016ede:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d103      	bne.n	8016eee <f_open+0x34a>
						res = FR_INT_ERR;
 8016ee6:	2302      	movs	r3, #2
 8016ee8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016eec:	e019      	b.n	8016f22 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016eee:	697b      	ldr	r3, [r7, #20]
 8016ef0:	899b      	ldrh	r3, [r3, #12]
 8016ef2:	461a      	mov	r2, r3
 8016ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ef6:	fbb3 f2f2 	udiv	r2, r3, r2
 8016efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016efc:	441a      	add	r2, r3
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016f02:	697b      	ldr	r3, [r7, #20]
 8016f04:	7858      	ldrb	r0, [r3, #1]
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	6a1a      	ldr	r2, [r3, #32]
 8016f10:	2301      	movs	r3, #1
 8016f12:	f7fd fc67 	bl	80147e4 <disk_read>
 8016f16:	4603      	mov	r3, r0
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d002      	beq.n	8016f22 <f_open+0x37e>
 8016f1c:	2301      	movs	r3, #1
 8016f1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016f22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d002      	beq.n	8016f30 <f_open+0x38c>
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016f30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8016f34:	4618      	mov	r0, r3
 8016f36:	3768      	adds	r7, #104	; 0x68
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	bd80      	pop	{r7, pc}

08016f3c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b08c      	sub	sp, #48	; 0x30
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	60f8      	str	r0, [r7, #12]
 8016f44:	60b9      	str	r1, [r7, #8]
 8016f46:	607a      	str	r2, [r7, #4]
 8016f48:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8016f4a:	68bb      	ldr	r3, [r7, #8]
 8016f4c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8016f4e:	683b      	ldr	r3, [r7, #0]
 8016f50:	2200      	movs	r2, #0
 8016f52:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	f107 0210 	add.w	r2, r7, #16
 8016f5a:	4611      	mov	r1, r2
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	f7ff fda5 	bl	8016aac <validate>
 8016f62:	4603      	mov	r3, r0
 8016f64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016f68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d107      	bne.n	8016f80 <f_write+0x44>
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	7d5b      	ldrb	r3, [r3, #21]
 8016f74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016f78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d002      	beq.n	8016f86 <f_write+0x4a>
 8016f80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016f84:	e16a      	b.n	801725c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	7d1b      	ldrb	r3, [r3, #20]
 8016f8a:	f003 0302 	and.w	r3, r3, #2
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d101      	bne.n	8016f96 <f_write+0x5a>
 8016f92:	2307      	movs	r3, #7
 8016f94:	e162      	b.n	801725c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	699a      	ldr	r2, [r3, #24]
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	441a      	add	r2, r3
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	699b      	ldr	r3, [r3, #24]
 8016fa2:	429a      	cmp	r2, r3
 8016fa4:	f080 814c 	bcs.w	8017240 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	699b      	ldr	r3, [r3, #24]
 8016fac:	43db      	mvns	r3, r3
 8016fae:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8016fb0:	e146      	b.n	8017240 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	699b      	ldr	r3, [r3, #24]
 8016fb6:	693a      	ldr	r2, [r7, #16]
 8016fb8:	8992      	ldrh	r2, [r2, #12]
 8016fba:	fbb3 f1f2 	udiv	r1, r3, r2
 8016fbe:	fb01 f202 	mul.w	r2, r1, r2
 8016fc2:	1a9b      	subs	r3, r3, r2
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	f040 80f1 	bne.w	80171ac <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	699b      	ldr	r3, [r3, #24]
 8016fce:	693a      	ldr	r2, [r7, #16]
 8016fd0:	8992      	ldrh	r2, [r2, #12]
 8016fd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8016fd6:	693a      	ldr	r2, [r7, #16]
 8016fd8:	8952      	ldrh	r2, [r2, #10]
 8016fda:	3a01      	subs	r2, #1
 8016fdc:	4013      	ands	r3, r2
 8016fde:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8016fe0:	69bb      	ldr	r3, [r7, #24]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d143      	bne.n	801706e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	699b      	ldr	r3, [r3, #24]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d10c      	bne.n	8017008 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	689b      	ldr	r3, [r3, #8]
 8016ff2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8016ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d11a      	bne.n	8017030 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	2100      	movs	r1, #0
 8016ffe:	4618      	mov	r0, r3
 8017000:	f7fe fa10 	bl	8015424 <create_chain>
 8017004:	62b8      	str	r0, [r7, #40]	; 0x28
 8017006:	e013      	b.n	8017030 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801700c:	2b00      	cmp	r3, #0
 801700e:	d007      	beq.n	8017020 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	699b      	ldr	r3, [r3, #24]
 8017014:	4619      	mov	r1, r3
 8017016:	68f8      	ldr	r0, [r7, #12]
 8017018:	f7fe fa9c 	bl	8015554 <clmt_clust>
 801701c:	62b8      	str	r0, [r7, #40]	; 0x28
 801701e:	e007      	b.n	8017030 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8017020:	68fa      	ldr	r2, [r7, #12]
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	69db      	ldr	r3, [r3, #28]
 8017026:	4619      	mov	r1, r3
 8017028:	4610      	mov	r0, r2
 801702a:	f7fe f9fb 	bl	8015424 <create_chain>
 801702e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017032:	2b00      	cmp	r3, #0
 8017034:	f000 8109 	beq.w	801724a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801703a:	2b01      	cmp	r3, #1
 801703c:	d104      	bne.n	8017048 <f_write+0x10c>
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	2202      	movs	r2, #2
 8017042:	755a      	strb	r2, [r3, #21]
 8017044:	2302      	movs	r3, #2
 8017046:	e109      	b.n	801725c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801704a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801704e:	d104      	bne.n	801705a <f_write+0x11e>
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	2201      	movs	r2, #1
 8017054:	755a      	strb	r2, [r3, #21]
 8017056:	2301      	movs	r3, #1
 8017058:	e100      	b.n	801725c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801705e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	689b      	ldr	r3, [r3, #8]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d102      	bne.n	801706e <f_write+0x132>
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801706c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	7d1b      	ldrb	r3, [r3, #20]
 8017072:	b25b      	sxtb	r3, r3
 8017074:	2b00      	cmp	r3, #0
 8017076:	da18      	bge.n	80170aa <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017078:	693b      	ldr	r3, [r7, #16]
 801707a:	7858      	ldrb	r0, [r3, #1]
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	6a1a      	ldr	r2, [r3, #32]
 8017086:	2301      	movs	r3, #1
 8017088:	f7fd fbcc 	bl	8014824 <disk_write>
 801708c:	4603      	mov	r3, r0
 801708e:	2b00      	cmp	r3, #0
 8017090:	d004      	beq.n	801709c <f_write+0x160>
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	2201      	movs	r2, #1
 8017096:	755a      	strb	r2, [r3, #21]
 8017098:	2301      	movs	r3, #1
 801709a:	e0df      	b.n	801725c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	7d1b      	ldrb	r3, [r3, #20]
 80170a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80170a4:	b2da      	uxtb	r2, r3
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80170aa:	693a      	ldr	r2, [r7, #16]
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	69db      	ldr	r3, [r3, #28]
 80170b0:	4619      	mov	r1, r3
 80170b2:	4610      	mov	r0, r2
 80170b4:	f7fd ff42 	bl	8014f3c <clust2sect>
 80170b8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80170ba:	697b      	ldr	r3, [r7, #20]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d104      	bne.n	80170ca <f_write+0x18e>
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	2202      	movs	r2, #2
 80170c4:	755a      	strb	r2, [r3, #21]
 80170c6:	2302      	movs	r3, #2
 80170c8:	e0c8      	b.n	801725c <f_write+0x320>
			sect += csect;
 80170ca:	697a      	ldr	r2, [r7, #20]
 80170cc:	69bb      	ldr	r3, [r7, #24]
 80170ce:	4413      	add	r3, r2
 80170d0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80170d2:	693b      	ldr	r3, [r7, #16]
 80170d4:	899b      	ldrh	r3, [r3, #12]
 80170d6:	461a      	mov	r2, r3
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	fbb3 f3f2 	udiv	r3, r3, r2
 80170de:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80170e0:	6a3b      	ldr	r3, [r7, #32]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d043      	beq.n	801716e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80170e6:	69ba      	ldr	r2, [r7, #24]
 80170e8:	6a3b      	ldr	r3, [r7, #32]
 80170ea:	4413      	add	r3, r2
 80170ec:	693a      	ldr	r2, [r7, #16]
 80170ee:	8952      	ldrh	r2, [r2, #10]
 80170f0:	4293      	cmp	r3, r2
 80170f2:	d905      	bls.n	8017100 <f_write+0x1c4>
					cc = fs->csize - csect;
 80170f4:	693b      	ldr	r3, [r7, #16]
 80170f6:	895b      	ldrh	r3, [r3, #10]
 80170f8:	461a      	mov	r2, r3
 80170fa:	69bb      	ldr	r3, [r7, #24]
 80170fc:	1ad3      	subs	r3, r2, r3
 80170fe:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017100:	693b      	ldr	r3, [r7, #16]
 8017102:	7858      	ldrb	r0, [r3, #1]
 8017104:	6a3b      	ldr	r3, [r7, #32]
 8017106:	697a      	ldr	r2, [r7, #20]
 8017108:	69f9      	ldr	r1, [r7, #28]
 801710a:	f7fd fb8b 	bl	8014824 <disk_write>
 801710e:	4603      	mov	r3, r0
 8017110:	2b00      	cmp	r3, #0
 8017112:	d004      	beq.n	801711e <f_write+0x1e2>
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	2201      	movs	r2, #1
 8017118:	755a      	strb	r2, [r3, #21]
 801711a:	2301      	movs	r3, #1
 801711c:	e09e      	b.n	801725c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	6a1a      	ldr	r2, [r3, #32]
 8017122:	697b      	ldr	r3, [r7, #20]
 8017124:	1ad3      	subs	r3, r2, r3
 8017126:	6a3a      	ldr	r2, [r7, #32]
 8017128:	429a      	cmp	r2, r3
 801712a:	d918      	bls.n	801715e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	6a1a      	ldr	r2, [r3, #32]
 8017136:	697b      	ldr	r3, [r7, #20]
 8017138:	1ad3      	subs	r3, r2, r3
 801713a:	693a      	ldr	r2, [r7, #16]
 801713c:	8992      	ldrh	r2, [r2, #12]
 801713e:	fb02 f303 	mul.w	r3, r2, r3
 8017142:	69fa      	ldr	r2, [r7, #28]
 8017144:	18d1      	adds	r1, r2, r3
 8017146:	693b      	ldr	r3, [r7, #16]
 8017148:	899b      	ldrh	r3, [r3, #12]
 801714a:	461a      	mov	r2, r3
 801714c:	f7fd fc2a 	bl	80149a4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	7d1b      	ldrb	r3, [r3, #20]
 8017154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017158:	b2da      	uxtb	r2, r3
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801715e:	693b      	ldr	r3, [r7, #16]
 8017160:	899b      	ldrh	r3, [r3, #12]
 8017162:	461a      	mov	r2, r3
 8017164:	6a3b      	ldr	r3, [r7, #32]
 8017166:	fb02 f303 	mul.w	r3, r2, r3
 801716a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801716c:	e04b      	b.n	8017206 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	6a1b      	ldr	r3, [r3, #32]
 8017172:	697a      	ldr	r2, [r7, #20]
 8017174:	429a      	cmp	r2, r3
 8017176:	d016      	beq.n	80171a6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	699a      	ldr	r2, [r3, #24]
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017180:	429a      	cmp	r2, r3
 8017182:	d210      	bcs.n	80171a6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8017184:	693b      	ldr	r3, [r7, #16]
 8017186:	7858      	ldrb	r0, [r3, #1]
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801718e:	2301      	movs	r3, #1
 8017190:	697a      	ldr	r2, [r7, #20]
 8017192:	f7fd fb27 	bl	80147e4 <disk_read>
 8017196:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8017198:	2b00      	cmp	r3, #0
 801719a:	d004      	beq.n	80171a6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	2201      	movs	r2, #1
 80171a0:	755a      	strb	r2, [r3, #21]
 80171a2:	2301      	movs	r3, #1
 80171a4:	e05a      	b.n	801725c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	697a      	ldr	r2, [r7, #20]
 80171aa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80171ac:	693b      	ldr	r3, [r7, #16]
 80171ae:	899b      	ldrh	r3, [r3, #12]
 80171b0:	4618      	mov	r0, r3
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	699b      	ldr	r3, [r3, #24]
 80171b6:	693a      	ldr	r2, [r7, #16]
 80171b8:	8992      	ldrh	r2, [r2, #12]
 80171ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80171be:	fb01 f202 	mul.w	r2, r1, r2
 80171c2:	1a9b      	subs	r3, r3, r2
 80171c4:	1ac3      	subs	r3, r0, r3
 80171c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80171c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	429a      	cmp	r2, r3
 80171ce:	d901      	bls.n	80171d4 <f_write+0x298>
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	699b      	ldr	r3, [r3, #24]
 80171de:	693a      	ldr	r2, [r7, #16]
 80171e0:	8992      	ldrh	r2, [r2, #12]
 80171e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80171e6:	fb00 f202 	mul.w	r2, r0, r2
 80171ea:	1a9b      	subs	r3, r3, r2
 80171ec:	440b      	add	r3, r1
 80171ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171f0:	69f9      	ldr	r1, [r7, #28]
 80171f2:	4618      	mov	r0, r3
 80171f4:	f7fd fbd6 	bl	80149a4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	7d1b      	ldrb	r3, [r3, #20]
 80171fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017200:	b2da      	uxtb	r2, r3
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017206:	69fa      	ldr	r2, [r7, #28]
 8017208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801720a:	4413      	add	r3, r2
 801720c:	61fb      	str	r3, [r7, #28]
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	699a      	ldr	r2, [r3, #24]
 8017212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017214:	441a      	add	r2, r3
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	619a      	str	r2, [r3, #24]
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	68da      	ldr	r2, [r3, #12]
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	699b      	ldr	r3, [r3, #24]
 8017222:	429a      	cmp	r2, r3
 8017224:	bf38      	it	cc
 8017226:	461a      	movcc	r2, r3
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	60da      	str	r2, [r3, #12]
 801722c:	683b      	ldr	r3, [r7, #0]
 801722e:	681a      	ldr	r2, [r3, #0]
 8017230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017232:	441a      	add	r2, r3
 8017234:	683b      	ldr	r3, [r7, #0]
 8017236:	601a      	str	r2, [r3, #0]
 8017238:	687a      	ldr	r2, [r7, #4]
 801723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801723c:	1ad3      	subs	r3, r2, r3
 801723e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	2b00      	cmp	r3, #0
 8017244:	f47f aeb5 	bne.w	8016fb2 <f_write+0x76>
 8017248:	e000      	b.n	801724c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801724a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	7d1b      	ldrb	r3, [r3, #20]
 8017250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017254:	b2da      	uxtb	r2, r3
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801725a:	2300      	movs	r3, #0
}
 801725c:	4618      	mov	r0, r3
 801725e:	3730      	adds	r7, #48	; 0x30
 8017260:	46bd      	mov	sp, r7
 8017262:	bd80      	pop	{r7, pc}

08017264 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017264:	b580      	push	{r7, lr}
 8017266:	b086      	sub	sp, #24
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	f107 0208 	add.w	r2, r7, #8
 8017272:	4611      	mov	r1, r2
 8017274:	4618      	mov	r0, r3
 8017276:	f7ff fc19 	bl	8016aac <validate>
 801727a:	4603      	mov	r3, r0
 801727c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801727e:	7dfb      	ldrb	r3, [r7, #23]
 8017280:	2b00      	cmp	r3, #0
 8017282:	d168      	bne.n	8017356 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	7d1b      	ldrb	r3, [r3, #20]
 8017288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801728c:	2b00      	cmp	r3, #0
 801728e:	d062      	beq.n	8017356 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	7d1b      	ldrb	r3, [r3, #20]
 8017294:	b25b      	sxtb	r3, r3
 8017296:	2b00      	cmp	r3, #0
 8017298:	da15      	bge.n	80172c6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801729a:	68bb      	ldr	r3, [r7, #8]
 801729c:	7858      	ldrb	r0, [r3, #1]
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	6a1a      	ldr	r2, [r3, #32]
 80172a8:	2301      	movs	r3, #1
 80172aa:	f7fd fabb 	bl	8014824 <disk_write>
 80172ae:	4603      	mov	r3, r0
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d001      	beq.n	80172b8 <f_sync+0x54>
 80172b4:	2301      	movs	r3, #1
 80172b6:	e04f      	b.n	8017358 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	7d1b      	ldrb	r3, [r3, #20]
 80172bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80172c0:	b2da      	uxtb	r2, r3
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80172c6:	f7fb f863 	bl	8012390 <get_fattime>
 80172ca:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80172cc:	68ba      	ldr	r2, [r7, #8]
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172d2:	4619      	mov	r1, r3
 80172d4:	4610      	mov	r0, r2
 80172d6:	f7fd fd93 	bl	8014e00 <move_window>
 80172da:	4603      	mov	r3, r0
 80172dc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80172de:	7dfb      	ldrb	r3, [r7, #23]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d138      	bne.n	8017356 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172e8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	330b      	adds	r3, #11
 80172ee:	781a      	ldrb	r2, [r3, #0]
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	330b      	adds	r3, #11
 80172f4:	f042 0220 	orr.w	r2, r2, #32
 80172f8:	b2d2      	uxtb	r2, r2
 80172fa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	6818      	ldr	r0, [r3, #0]
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	689b      	ldr	r3, [r3, #8]
 8017304:	461a      	mov	r2, r3
 8017306:	68f9      	ldr	r1, [r7, #12]
 8017308:	f7fe fb21 	bl	801594e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	f103 021c 	add.w	r2, r3, #28
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	68db      	ldr	r3, [r3, #12]
 8017316:	4619      	mov	r1, r3
 8017318:	4610      	mov	r0, r2
 801731a:	f7fd fb17 	bl	801494c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	3316      	adds	r3, #22
 8017322:	6939      	ldr	r1, [r7, #16]
 8017324:	4618      	mov	r0, r3
 8017326:	f7fd fb11 	bl	801494c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	3312      	adds	r3, #18
 801732e:	2100      	movs	r1, #0
 8017330:	4618      	mov	r0, r3
 8017332:	f7fd faf0 	bl	8014916 <st_word>
					fs->wflag = 1;
 8017336:	68bb      	ldr	r3, [r7, #8]
 8017338:	2201      	movs	r2, #1
 801733a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801733c:	68bb      	ldr	r3, [r7, #8]
 801733e:	4618      	mov	r0, r3
 8017340:	f7fd fd8c 	bl	8014e5c <sync_fs>
 8017344:	4603      	mov	r3, r0
 8017346:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	7d1b      	ldrb	r3, [r3, #20]
 801734c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017350:	b2da      	uxtb	r2, r3
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017356:	7dfb      	ldrb	r3, [r7, #23]
}
 8017358:	4618      	mov	r0, r3
 801735a:	3718      	adds	r7, #24
 801735c:	46bd      	mov	sp, r7
 801735e:	bd80      	pop	{r7, pc}

08017360 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8017360:	b580      	push	{r7, lr}
 8017362:	b084      	sub	sp, #16
 8017364:	af00      	add	r7, sp, #0
 8017366:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017368:	6878      	ldr	r0, [r7, #4]
 801736a:	f7ff ff7b 	bl	8017264 <f_sync>
 801736e:	4603      	mov	r3, r0
 8017370:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017372:	7bfb      	ldrb	r3, [r7, #15]
 8017374:	2b00      	cmp	r3, #0
 8017376:	d118      	bne.n	80173aa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	f107 0208 	add.w	r2, r7, #8
 801737e:	4611      	mov	r1, r2
 8017380:	4618      	mov	r0, r3
 8017382:	f7ff fb93 	bl	8016aac <validate>
 8017386:	4603      	mov	r3, r0
 8017388:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801738a:	7bfb      	ldrb	r3, [r7, #15]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d10c      	bne.n	80173aa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	691b      	ldr	r3, [r3, #16]
 8017394:	4618      	mov	r0, r3
 8017396:	f7fd fc8f 	bl	8014cb8 <dec_lock>
 801739a:	4603      	mov	r3, r0
 801739c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801739e:	7bfb      	ldrb	r3, [r7, #15]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d102      	bne.n	80173aa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	2200      	movs	r2, #0
 80173a8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80173aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80173ac:	4618      	mov	r0, r3
 80173ae:	3710      	adds	r7, #16
 80173b0:	46bd      	mov	sp, r7
 80173b2:	bd80      	pop	{r7, pc}

080173b4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b084      	sub	sp, #16
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
 80173bc:	460b      	mov	r3, r1
 80173be:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80173c0:	78fb      	ldrb	r3, [r7, #3]
 80173c2:	2b0a      	cmp	r3, #10
 80173c4:	d103      	bne.n	80173ce <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80173c6:	210d      	movs	r1, #13
 80173c8:	6878      	ldr	r0, [r7, #4]
 80173ca:	f7ff fff3 	bl	80173b4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	685b      	ldr	r3, [r3, #4]
 80173d2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	db25      	blt.n	8017426 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	1c5a      	adds	r2, r3, #1
 80173de:	60fa      	str	r2, [r7, #12]
 80173e0:	687a      	ldr	r2, [r7, #4]
 80173e2:	4413      	add	r3, r2
 80173e4:	78fa      	ldrb	r2, [r7, #3]
 80173e6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	2b3c      	cmp	r3, #60	; 0x3c
 80173ec:	dd12      	ble.n	8017414 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	6818      	ldr	r0, [r3, #0]
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	f103 010c 	add.w	r1, r3, #12
 80173f8:	68fa      	ldr	r2, [r7, #12]
 80173fa:	f107 0308 	add.w	r3, r7, #8
 80173fe:	f7ff fd9d 	bl	8016f3c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8017402:	68ba      	ldr	r2, [r7, #8]
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	429a      	cmp	r2, r3
 8017408:	d101      	bne.n	801740e <putc_bfd+0x5a>
 801740a:	2300      	movs	r3, #0
 801740c:	e001      	b.n	8017412 <putc_bfd+0x5e>
 801740e:	f04f 33ff 	mov.w	r3, #4294967295
 8017412:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	68fa      	ldr	r2, [r7, #12]
 8017418:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	689b      	ldr	r3, [r3, #8]
 801741e:	1c5a      	adds	r2, r3, #1
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	609a      	str	r2, [r3, #8]
 8017424:	e000      	b.n	8017428 <putc_bfd+0x74>
	if (i < 0) return;
 8017426:	bf00      	nop
}
 8017428:	3710      	adds	r7, #16
 801742a:	46bd      	mov	sp, r7
 801742c:	bd80      	pop	{r7, pc}

0801742e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801742e:	b580      	push	{r7, lr}
 8017430:	b084      	sub	sp, #16
 8017432:	af00      	add	r7, sp, #0
 8017434:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	685b      	ldr	r3, [r3, #4]
 801743a:	2b00      	cmp	r3, #0
 801743c:	db16      	blt.n	801746c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	6818      	ldr	r0, [r3, #0]
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	f103 010c 	add.w	r1, r3, #12
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	685b      	ldr	r3, [r3, #4]
 801744c:	461a      	mov	r2, r3
 801744e:	f107 030c 	add.w	r3, r7, #12
 8017452:	f7ff fd73 	bl	8016f3c <f_write>
 8017456:	4603      	mov	r3, r0
 8017458:	2b00      	cmp	r3, #0
 801745a:	d107      	bne.n	801746c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	685b      	ldr	r3, [r3, #4]
 8017460:	68fa      	ldr	r2, [r7, #12]
 8017462:	4293      	cmp	r3, r2
 8017464:	d102      	bne.n	801746c <putc_flush+0x3e>
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	689b      	ldr	r3, [r3, #8]
 801746a:	e001      	b.n	8017470 <putc_flush+0x42>
	return EOF;
 801746c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017470:	4618      	mov	r0, r3
 8017472:	3710      	adds	r7, #16
 8017474:	46bd      	mov	sp, r7
 8017476:	bd80      	pop	{r7, pc}

08017478 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8017478:	b480      	push	{r7}
 801747a:	b083      	sub	sp, #12
 801747c:	af00      	add	r7, sp, #0
 801747e:	6078      	str	r0, [r7, #4]
 8017480:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	683a      	ldr	r2, [r7, #0]
 8017486:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	2200      	movs	r2, #0
 801748c:	605a      	str	r2, [r3, #4]
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	685a      	ldr	r2, [r3, #4]
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	609a      	str	r2, [r3, #8]
}
 8017496:	bf00      	nop
 8017498:	370c      	adds	r7, #12
 801749a:	46bd      	mov	sp, r7
 801749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a0:	4770      	bx	lr

080174a2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80174a2:	b580      	push	{r7, lr}
 80174a4:	b096      	sub	sp, #88	; 0x58
 80174a6:	af00      	add	r7, sp, #0
 80174a8:	6078      	str	r0, [r7, #4]
 80174aa:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80174ac:	f107 030c 	add.w	r3, r7, #12
 80174b0:	6839      	ldr	r1, [r7, #0]
 80174b2:	4618      	mov	r0, r3
 80174b4:	f7ff ffe0 	bl	8017478 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80174b8:	e009      	b.n	80174ce <f_puts+0x2c>
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	1c5a      	adds	r2, r3, #1
 80174be:	607a      	str	r2, [r7, #4]
 80174c0:	781a      	ldrb	r2, [r3, #0]
 80174c2:	f107 030c 	add.w	r3, r7, #12
 80174c6:	4611      	mov	r1, r2
 80174c8:	4618      	mov	r0, r3
 80174ca:	f7ff ff73 	bl	80173b4 <putc_bfd>
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	781b      	ldrb	r3, [r3, #0]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d1f1      	bne.n	80174ba <f_puts+0x18>
	return putc_flush(&pb);
 80174d6:	f107 030c 	add.w	r3, r7, #12
 80174da:	4618      	mov	r0, r3
 80174dc:	f7ff ffa7 	bl	801742e <putc_flush>
 80174e0:	4603      	mov	r3, r0
}
 80174e2:	4618      	mov	r0, r3
 80174e4:	3758      	adds	r7, #88	; 0x58
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd80      	pop	{r7, pc}
	...

080174ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80174ec:	b480      	push	{r7}
 80174ee:	b087      	sub	sp, #28
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	60f8      	str	r0, [r7, #12]
 80174f4:	60b9      	str	r1, [r7, #8]
 80174f6:	4613      	mov	r3, r2
 80174f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80174fa:	2301      	movs	r3, #1
 80174fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80174fe:	2300      	movs	r3, #0
 8017500:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8017502:	4b1f      	ldr	r3, [pc, #124]	; (8017580 <FATFS_LinkDriverEx+0x94>)
 8017504:	7a5b      	ldrb	r3, [r3, #9]
 8017506:	b2db      	uxtb	r3, r3
 8017508:	2b00      	cmp	r3, #0
 801750a:	d131      	bne.n	8017570 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801750c:	4b1c      	ldr	r3, [pc, #112]	; (8017580 <FATFS_LinkDriverEx+0x94>)
 801750e:	7a5b      	ldrb	r3, [r3, #9]
 8017510:	b2db      	uxtb	r3, r3
 8017512:	461a      	mov	r2, r3
 8017514:	4b1a      	ldr	r3, [pc, #104]	; (8017580 <FATFS_LinkDriverEx+0x94>)
 8017516:	2100      	movs	r1, #0
 8017518:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801751a:	4b19      	ldr	r3, [pc, #100]	; (8017580 <FATFS_LinkDriverEx+0x94>)
 801751c:	7a5b      	ldrb	r3, [r3, #9]
 801751e:	b2db      	uxtb	r3, r3
 8017520:	4a17      	ldr	r2, [pc, #92]	; (8017580 <FATFS_LinkDriverEx+0x94>)
 8017522:	009b      	lsls	r3, r3, #2
 8017524:	4413      	add	r3, r2
 8017526:	68fa      	ldr	r2, [r7, #12]
 8017528:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801752a:	4b15      	ldr	r3, [pc, #84]	; (8017580 <FATFS_LinkDriverEx+0x94>)
 801752c:	7a5b      	ldrb	r3, [r3, #9]
 801752e:	b2db      	uxtb	r3, r3
 8017530:	461a      	mov	r2, r3
 8017532:	4b13      	ldr	r3, [pc, #76]	; (8017580 <FATFS_LinkDriverEx+0x94>)
 8017534:	4413      	add	r3, r2
 8017536:	79fa      	ldrb	r2, [r7, #7]
 8017538:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801753a:	4b11      	ldr	r3, [pc, #68]	; (8017580 <FATFS_LinkDriverEx+0x94>)
 801753c:	7a5b      	ldrb	r3, [r3, #9]
 801753e:	b2db      	uxtb	r3, r3
 8017540:	1c5a      	adds	r2, r3, #1
 8017542:	b2d1      	uxtb	r1, r2
 8017544:	4a0e      	ldr	r2, [pc, #56]	; (8017580 <FATFS_LinkDriverEx+0x94>)
 8017546:	7251      	strb	r1, [r2, #9]
 8017548:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801754a:	7dbb      	ldrb	r3, [r7, #22]
 801754c:	3330      	adds	r3, #48	; 0x30
 801754e:	b2da      	uxtb	r2, r3
 8017550:	68bb      	ldr	r3, [r7, #8]
 8017552:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017554:	68bb      	ldr	r3, [r7, #8]
 8017556:	3301      	adds	r3, #1
 8017558:	223a      	movs	r2, #58	; 0x3a
 801755a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801755c:	68bb      	ldr	r3, [r7, #8]
 801755e:	3302      	adds	r3, #2
 8017560:	222f      	movs	r2, #47	; 0x2f
 8017562:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017564:	68bb      	ldr	r3, [r7, #8]
 8017566:	3303      	adds	r3, #3
 8017568:	2200      	movs	r2, #0
 801756a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801756c:	2300      	movs	r3, #0
 801756e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017570:	7dfb      	ldrb	r3, [r7, #23]
}
 8017572:	4618      	mov	r0, r3
 8017574:	371c      	adds	r7, #28
 8017576:	46bd      	mov	sp, r7
 8017578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801757c:	4770      	bx	lr
 801757e:	bf00      	nop
 8017580:	24000f54 	.word	0x24000f54

08017584 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b082      	sub	sp, #8
 8017588:	af00      	add	r7, sp, #0
 801758a:	6078      	str	r0, [r7, #4]
 801758c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801758e:	2200      	movs	r2, #0
 8017590:	6839      	ldr	r1, [r7, #0]
 8017592:	6878      	ldr	r0, [r7, #4]
 8017594:	f7ff ffaa 	bl	80174ec <FATFS_LinkDriverEx>
 8017598:	4603      	mov	r3, r0
}
 801759a:	4618      	mov	r0, r3
 801759c:	3708      	adds	r7, #8
 801759e:	46bd      	mov	sp, r7
 80175a0:	bd80      	pop	{r7, pc}
	...

080175a4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80175a4:	b480      	push	{r7}
 80175a6:	b085      	sub	sp, #20
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	4603      	mov	r3, r0
 80175ac:	6039      	str	r1, [r7, #0]
 80175ae:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80175b0:	88fb      	ldrh	r3, [r7, #6]
 80175b2:	2b7f      	cmp	r3, #127	; 0x7f
 80175b4:	d802      	bhi.n	80175bc <ff_convert+0x18>
		c = chr;
 80175b6:	88fb      	ldrh	r3, [r7, #6]
 80175b8:	81fb      	strh	r3, [r7, #14]
 80175ba:	e025      	b.n	8017608 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80175bc:	683b      	ldr	r3, [r7, #0]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d00b      	beq.n	80175da <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80175c2:	88fb      	ldrh	r3, [r7, #6]
 80175c4:	2bff      	cmp	r3, #255	; 0xff
 80175c6:	d805      	bhi.n	80175d4 <ff_convert+0x30>
 80175c8:	88fb      	ldrh	r3, [r7, #6]
 80175ca:	3b80      	subs	r3, #128	; 0x80
 80175cc:	4a12      	ldr	r2, [pc, #72]	; (8017618 <ff_convert+0x74>)
 80175ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80175d2:	e000      	b.n	80175d6 <ff_convert+0x32>
 80175d4:	2300      	movs	r3, #0
 80175d6:	81fb      	strh	r3, [r7, #14]
 80175d8:	e016      	b.n	8017608 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80175da:	2300      	movs	r3, #0
 80175dc:	81fb      	strh	r3, [r7, #14]
 80175de:	e009      	b.n	80175f4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80175e0:	89fb      	ldrh	r3, [r7, #14]
 80175e2:	4a0d      	ldr	r2, [pc, #52]	; (8017618 <ff_convert+0x74>)
 80175e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80175e8:	88fa      	ldrh	r2, [r7, #6]
 80175ea:	429a      	cmp	r2, r3
 80175ec:	d006      	beq.n	80175fc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80175ee:	89fb      	ldrh	r3, [r7, #14]
 80175f0:	3301      	adds	r3, #1
 80175f2:	81fb      	strh	r3, [r7, #14]
 80175f4:	89fb      	ldrh	r3, [r7, #14]
 80175f6:	2b7f      	cmp	r3, #127	; 0x7f
 80175f8:	d9f2      	bls.n	80175e0 <ff_convert+0x3c>
 80175fa:	e000      	b.n	80175fe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80175fc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80175fe:	89fb      	ldrh	r3, [r7, #14]
 8017600:	3380      	adds	r3, #128	; 0x80
 8017602:	b29b      	uxth	r3, r3
 8017604:	b2db      	uxtb	r3, r3
 8017606:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8017608:	89fb      	ldrh	r3, [r7, #14]
}
 801760a:	4618      	mov	r0, r3
 801760c:	3714      	adds	r7, #20
 801760e:	46bd      	mov	sp, r7
 8017610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017614:	4770      	bx	lr
 8017616:	bf00      	nop
 8017618:	0801ca88 	.word	0x0801ca88

0801761c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801761c:	b480      	push	{r7}
 801761e:	b087      	sub	sp, #28
 8017620:	af00      	add	r7, sp, #0
 8017622:	4603      	mov	r3, r0
 8017624:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8017626:	88fb      	ldrh	r3, [r7, #6]
 8017628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801762c:	d201      	bcs.n	8017632 <ff_wtoupper+0x16>
 801762e:	4b3e      	ldr	r3, [pc, #248]	; (8017728 <ff_wtoupper+0x10c>)
 8017630:	e000      	b.n	8017634 <ff_wtoupper+0x18>
 8017632:	4b3e      	ldr	r3, [pc, #248]	; (801772c <ff_wtoupper+0x110>)
 8017634:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8017636:	697b      	ldr	r3, [r7, #20]
 8017638:	1c9a      	adds	r2, r3, #2
 801763a:	617a      	str	r2, [r7, #20]
 801763c:	881b      	ldrh	r3, [r3, #0]
 801763e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8017640:	8a7b      	ldrh	r3, [r7, #18]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d068      	beq.n	8017718 <ff_wtoupper+0xfc>
 8017646:	88fa      	ldrh	r2, [r7, #6]
 8017648:	8a7b      	ldrh	r3, [r7, #18]
 801764a:	429a      	cmp	r2, r3
 801764c:	d364      	bcc.n	8017718 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801764e:	697b      	ldr	r3, [r7, #20]
 8017650:	1c9a      	adds	r2, r3, #2
 8017652:	617a      	str	r2, [r7, #20]
 8017654:	881b      	ldrh	r3, [r3, #0]
 8017656:	823b      	strh	r3, [r7, #16]
 8017658:	8a3b      	ldrh	r3, [r7, #16]
 801765a:	0a1b      	lsrs	r3, r3, #8
 801765c:	81fb      	strh	r3, [r7, #14]
 801765e:	8a3b      	ldrh	r3, [r7, #16]
 8017660:	b2db      	uxtb	r3, r3
 8017662:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8017664:	88fa      	ldrh	r2, [r7, #6]
 8017666:	8a79      	ldrh	r1, [r7, #18]
 8017668:	8a3b      	ldrh	r3, [r7, #16]
 801766a:	440b      	add	r3, r1
 801766c:	429a      	cmp	r2, r3
 801766e:	da49      	bge.n	8017704 <ff_wtoupper+0xe8>
			switch (cmd) {
 8017670:	89fb      	ldrh	r3, [r7, #14]
 8017672:	2b08      	cmp	r3, #8
 8017674:	d84f      	bhi.n	8017716 <ff_wtoupper+0xfa>
 8017676:	a201      	add	r2, pc, #4	; (adr r2, 801767c <ff_wtoupper+0x60>)
 8017678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801767c:	080176a1 	.word	0x080176a1
 8017680:	080176b3 	.word	0x080176b3
 8017684:	080176c9 	.word	0x080176c9
 8017688:	080176d1 	.word	0x080176d1
 801768c:	080176d9 	.word	0x080176d9
 8017690:	080176e1 	.word	0x080176e1
 8017694:	080176e9 	.word	0x080176e9
 8017698:	080176f1 	.word	0x080176f1
 801769c:	080176f9 	.word	0x080176f9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80176a0:	88fa      	ldrh	r2, [r7, #6]
 80176a2:	8a7b      	ldrh	r3, [r7, #18]
 80176a4:	1ad3      	subs	r3, r2, r3
 80176a6:	005b      	lsls	r3, r3, #1
 80176a8:	697a      	ldr	r2, [r7, #20]
 80176aa:	4413      	add	r3, r2
 80176ac:	881b      	ldrh	r3, [r3, #0]
 80176ae:	80fb      	strh	r3, [r7, #6]
 80176b0:	e027      	b.n	8017702 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80176b2:	88fa      	ldrh	r2, [r7, #6]
 80176b4:	8a7b      	ldrh	r3, [r7, #18]
 80176b6:	1ad3      	subs	r3, r2, r3
 80176b8:	b29b      	uxth	r3, r3
 80176ba:	f003 0301 	and.w	r3, r3, #1
 80176be:	b29b      	uxth	r3, r3
 80176c0:	88fa      	ldrh	r2, [r7, #6]
 80176c2:	1ad3      	subs	r3, r2, r3
 80176c4:	80fb      	strh	r3, [r7, #6]
 80176c6:	e01c      	b.n	8017702 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80176c8:	88fb      	ldrh	r3, [r7, #6]
 80176ca:	3b10      	subs	r3, #16
 80176cc:	80fb      	strh	r3, [r7, #6]
 80176ce:	e018      	b.n	8017702 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80176d0:	88fb      	ldrh	r3, [r7, #6]
 80176d2:	3b20      	subs	r3, #32
 80176d4:	80fb      	strh	r3, [r7, #6]
 80176d6:	e014      	b.n	8017702 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80176d8:	88fb      	ldrh	r3, [r7, #6]
 80176da:	3b30      	subs	r3, #48	; 0x30
 80176dc:	80fb      	strh	r3, [r7, #6]
 80176de:	e010      	b.n	8017702 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80176e0:	88fb      	ldrh	r3, [r7, #6]
 80176e2:	3b1a      	subs	r3, #26
 80176e4:	80fb      	strh	r3, [r7, #6]
 80176e6:	e00c      	b.n	8017702 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80176e8:	88fb      	ldrh	r3, [r7, #6]
 80176ea:	3308      	adds	r3, #8
 80176ec:	80fb      	strh	r3, [r7, #6]
 80176ee:	e008      	b.n	8017702 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80176f0:	88fb      	ldrh	r3, [r7, #6]
 80176f2:	3b50      	subs	r3, #80	; 0x50
 80176f4:	80fb      	strh	r3, [r7, #6]
 80176f6:	e004      	b.n	8017702 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80176f8:	88fb      	ldrh	r3, [r7, #6]
 80176fa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80176fe:	80fb      	strh	r3, [r7, #6]
 8017700:	bf00      	nop
			}
			break;
 8017702:	e008      	b.n	8017716 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8017704:	89fb      	ldrh	r3, [r7, #14]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d195      	bne.n	8017636 <ff_wtoupper+0x1a>
 801770a:	8a3b      	ldrh	r3, [r7, #16]
 801770c:	005b      	lsls	r3, r3, #1
 801770e:	697a      	ldr	r2, [r7, #20]
 8017710:	4413      	add	r3, r2
 8017712:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8017714:	e78f      	b.n	8017636 <ff_wtoupper+0x1a>
			break;
 8017716:	bf00      	nop
	}

	return chr;
 8017718:	88fb      	ldrh	r3, [r7, #6]
}
 801771a:	4618      	mov	r0, r3
 801771c:	371c      	adds	r7, #28
 801771e:	46bd      	mov	sp, r7
 8017720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017724:	4770      	bx	lr
 8017726:	bf00      	nop
 8017728:	0801cb88 	.word	0x0801cb88
 801772c:	0801cd7c 	.word	0x0801cd7c

08017730 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017730:	b580      	push	{r7, lr}
 8017732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8017734:	2201      	movs	r2, #1
 8017736:	4913      	ldr	r1, [pc, #76]	; (8017784 <MX_USB_DEVICE_Init+0x54>)
 8017738:	4813      	ldr	r0, [pc, #76]	; (8017788 <MX_USB_DEVICE_Init+0x58>)
 801773a:	f7fb fd1b 	bl	8013174 <USBD_Init>
 801773e:	4603      	mov	r3, r0
 8017740:	2b00      	cmp	r3, #0
 8017742:	d001      	beq.n	8017748 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017744:	f7ea fa00 	bl	8001b48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8017748:	4910      	ldr	r1, [pc, #64]	; (801778c <MX_USB_DEVICE_Init+0x5c>)
 801774a:	480f      	ldr	r0, [pc, #60]	; (8017788 <MX_USB_DEVICE_Init+0x58>)
 801774c:	f7fb fd42 	bl	80131d4 <USBD_RegisterClass>
 8017750:	4603      	mov	r3, r0
 8017752:	2b00      	cmp	r3, #0
 8017754:	d001      	beq.n	801775a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017756:	f7ea f9f7 	bl	8001b48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801775a:	490d      	ldr	r1, [pc, #52]	; (8017790 <MX_USB_DEVICE_Init+0x60>)
 801775c:	480a      	ldr	r0, [pc, #40]	; (8017788 <MX_USB_DEVICE_Init+0x58>)
 801775e:	f7fb fc39 	bl	8012fd4 <USBD_CDC_RegisterInterface>
 8017762:	4603      	mov	r3, r0
 8017764:	2b00      	cmp	r3, #0
 8017766:	d001      	beq.n	801776c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017768:	f7ea f9ee 	bl	8001b48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801776c:	4806      	ldr	r0, [pc, #24]	; (8017788 <MX_USB_DEVICE_Init+0x58>)
 801776e:	f7fb fd67 	bl	8013240 <USBD_Start>
 8017772:	4603      	mov	r3, r0
 8017774:	2b00      	cmp	r3, #0
 8017776:	d001      	beq.n	801777c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017778:	f7ea f9e6 	bl	8001b48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801777c:	f7f1 fa4a 	bl	8008c14 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017780:	bf00      	nop
 8017782:	bd80      	pop	{r7, pc}
 8017784:	240000b0 	.word	0x240000b0
 8017788:	24000f60 	.word	0x24000f60
 801778c:	2400001c 	.word	0x2400001c
 8017790:	2400009c 	.word	0x2400009c

08017794 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8017794:	b580      	push	{r7, lr}
 8017796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8017798:	2200      	movs	r2, #0
 801779a:	4905      	ldr	r1, [pc, #20]	; (80177b0 <CDC_Init_HS+0x1c>)
 801779c:	4805      	ldr	r0, [pc, #20]	; (80177b4 <CDC_Init_HS+0x20>)
 801779e:	f7fb fc33 	bl	8013008 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80177a2:	4905      	ldr	r1, [pc, #20]	; (80177b8 <CDC_Init_HS+0x24>)
 80177a4:	4803      	ldr	r0, [pc, #12]	; (80177b4 <CDC_Init_HS+0x20>)
 80177a6:	f7fb fc51 	bl	801304c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80177aa:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80177ac:	4618      	mov	r0, r3
 80177ae:	bd80      	pop	{r7, pc}
 80177b0:	24001a3c 	.word	0x24001a3c
 80177b4:	24000f60 	.word	0x24000f60
 80177b8:	2400123c 	.word	0x2400123c

080177bc <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80177bc:	b480      	push	{r7}
 80177be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80177c0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80177c2:	4618      	mov	r0, r3
 80177c4:	46bd      	mov	sp, r7
 80177c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ca:	4770      	bx	lr

080177cc <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80177cc:	b480      	push	{r7}
 80177ce:	b083      	sub	sp, #12
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	4603      	mov	r3, r0
 80177d4:	6039      	str	r1, [r7, #0]
 80177d6:	71fb      	strb	r3, [r7, #7]
 80177d8:	4613      	mov	r3, r2
 80177da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80177dc:	79fb      	ldrb	r3, [r7, #7]
 80177de:	2b23      	cmp	r3, #35	; 0x23
 80177e0:	d84a      	bhi.n	8017878 <CDC_Control_HS+0xac>
 80177e2:	a201      	add	r2, pc, #4	; (adr r2, 80177e8 <CDC_Control_HS+0x1c>)
 80177e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80177e8:	08017879 	.word	0x08017879
 80177ec:	08017879 	.word	0x08017879
 80177f0:	08017879 	.word	0x08017879
 80177f4:	08017879 	.word	0x08017879
 80177f8:	08017879 	.word	0x08017879
 80177fc:	08017879 	.word	0x08017879
 8017800:	08017879 	.word	0x08017879
 8017804:	08017879 	.word	0x08017879
 8017808:	08017879 	.word	0x08017879
 801780c:	08017879 	.word	0x08017879
 8017810:	08017879 	.word	0x08017879
 8017814:	08017879 	.word	0x08017879
 8017818:	08017879 	.word	0x08017879
 801781c:	08017879 	.word	0x08017879
 8017820:	08017879 	.word	0x08017879
 8017824:	08017879 	.word	0x08017879
 8017828:	08017879 	.word	0x08017879
 801782c:	08017879 	.word	0x08017879
 8017830:	08017879 	.word	0x08017879
 8017834:	08017879 	.word	0x08017879
 8017838:	08017879 	.word	0x08017879
 801783c:	08017879 	.word	0x08017879
 8017840:	08017879 	.word	0x08017879
 8017844:	08017879 	.word	0x08017879
 8017848:	08017879 	.word	0x08017879
 801784c:	08017879 	.word	0x08017879
 8017850:	08017879 	.word	0x08017879
 8017854:	08017879 	.word	0x08017879
 8017858:	08017879 	.word	0x08017879
 801785c:	08017879 	.word	0x08017879
 8017860:	08017879 	.word	0x08017879
 8017864:	08017879 	.word	0x08017879
 8017868:	08017879 	.word	0x08017879
 801786c:	08017879 	.word	0x08017879
 8017870:	08017879 	.word	0x08017879
 8017874:	08017879 	.word	0x08017879
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017878:	bf00      	nop
  }

  return (USBD_OK);
 801787a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801787c:	4618      	mov	r0, r3
 801787e:	370c      	adds	r7, #12
 8017880:	46bd      	mov	sp, r7
 8017882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017886:	4770      	bx	lr

08017888 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b082      	sub	sp, #8
 801788c:	af00      	add	r7, sp, #0
 801788e:	6078      	str	r0, [r7, #4]
 8017890:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8017892:	6879      	ldr	r1, [r7, #4]
 8017894:	4805      	ldr	r0, [pc, #20]	; (80178ac <CDC_Receive_HS+0x24>)
 8017896:	f7fb fbd9 	bl	801304c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801789a:	4804      	ldr	r0, [pc, #16]	; (80178ac <CDC_Receive_HS+0x24>)
 801789c:	f7fb fc34 	bl	8013108 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80178a0:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80178a2:	4618      	mov	r0, r3
 80178a4:	3708      	adds	r7, #8
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}
 80178aa:	bf00      	nop
 80178ac:	24000f60 	.word	0x24000f60

080178b0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b084      	sub	sp, #16
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
 80178b8:	460b      	mov	r3, r1
 80178ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80178bc:	2300      	movs	r3, #0
 80178be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80178c0:	4b0d      	ldr	r3, [pc, #52]	; (80178f8 <CDC_Transmit_HS+0x48>)
 80178c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80178c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80178c8:	68bb      	ldr	r3, [r7, #8]
 80178ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d001      	beq.n	80178d6 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80178d2:	2301      	movs	r3, #1
 80178d4:	e00b      	b.n	80178ee <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80178d6:	887b      	ldrh	r3, [r7, #2]
 80178d8:	461a      	mov	r2, r3
 80178da:	6879      	ldr	r1, [r7, #4]
 80178dc:	4806      	ldr	r0, [pc, #24]	; (80178f8 <CDC_Transmit_HS+0x48>)
 80178de:	f7fb fb93 	bl	8013008 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80178e2:	4805      	ldr	r0, [pc, #20]	; (80178f8 <CDC_Transmit_HS+0x48>)
 80178e4:	f7fb fbd0 	bl	8013088 <USBD_CDC_TransmitPacket>
 80178e8:	4603      	mov	r3, r0
 80178ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80178ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80178ee:	4618      	mov	r0, r3
 80178f0:	3710      	adds	r7, #16
 80178f2:	46bd      	mov	sp, r7
 80178f4:	bd80      	pop	{r7, pc}
 80178f6:	bf00      	nop
 80178f8:	24000f60 	.word	0x24000f60

080178fc <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80178fc:	b480      	push	{r7}
 80178fe:	b087      	sub	sp, #28
 8017900:	af00      	add	r7, sp, #0
 8017902:	60f8      	str	r0, [r7, #12]
 8017904:	60b9      	str	r1, [r7, #8]
 8017906:	4613      	mov	r3, r2
 8017908:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801790a:	2300      	movs	r3, #0
 801790c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801790e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017912:	4618      	mov	r0, r3
 8017914:	371c      	adds	r7, #28
 8017916:	46bd      	mov	sp, r7
 8017918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801791c:	4770      	bx	lr
	...

08017920 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017920:	b480      	push	{r7}
 8017922:	b083      	sub	sp, #12
 8017924:	af00      	add	r7, sp, #0
 8017926:	4603      	mov	r3, r0
 8017928:	6039      	str	r1, [r7, #0]
 801792a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	2212      	movs	r2, #18
 8017930:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8017932:	4b03      	ldr	r3, [pc, #12]	; (8017940 <USBD_HS_DeviceDescriptor+0x20>)
}
 8017934:	4618      	mov	r0, r3
 8017936:	370c      	adds	r7, #12
 8017938:	46bd      	mov	sp, r7
 801793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793e:	4770      	bx	lr
 8017940:	240000cc 	.word	0x240000cc

08017944 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017944:	b480      	push	{r7}
 8017946:	b083      	sub	sp, #12
 8017948:	af00      	add	r7, sp, #0
 801794a:	4603      	mov	r3, r0
 801794c:	6039      	str	r1, [r7, #0]
 801794e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017950:	683b      	ldr	r3, [r7, #0]
 8017952:	2204      	movs	r2, #4
 8017954:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017956:	4b03      	ldr	r3, [pc, #12]	; (8017964 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8017958:	4618      	mov	r0, r3
 801795a:	370c      	adds	r7, #12
 801795c:	46bd      	mov	sp, r7
 801795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017962:	4770      	bx	lr
 8017964:	240000e0 	.word	0x240000e0

08017968 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017968:	b580      	push	{r7, lr}
 801796a:	b082      	sub	sp, #8
 801796c:	af00      	add	r7, sp, #0
 801796e:	4603      	mov	r3, r0
 8017970:	6039      	str	r1, [r7, #0]
 8017972:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017974:	79fb      	ldrb	r3, [r7, #7]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d105      	bne.n	8017986 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801797a:	683a      	ldr	r2, [r7, #0]
 801797c:	4907      	ldr	r1, [pc, #28]	; (801799c <USBD_HS_ProductStrDescriptor+0x34>)
 801797e:	4808      	ldr	r0, [pc, #32]	; (80179a0 <USBD_HS_ProductStrDescriptor+0x38>)
 8017980:	f7fc fe10 	bl	80145a4 <USBD_GetString>
 8017984:	e004      	b.n	8017990 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8017986:	683a      	ldr	r2, [r7, #0]
 8017988:	4904      	ldr	r1, [pc, #16]	; (801799c <USBD_HS_ProductStrDescriptor+0x34>)
 801798a:	4805      	ldr	r0, [pc, #20]	; (80179a0 <USBD_HS_ProductStrDescriptor+0x38>)
 801798c:	f7fc fe0a 	bl	80145a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017990:	4b02      	ldr	r3, [pc, #8]	; (801799c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8017992:	4618      	mov	r0, r3
 8017994:	3708      	adds	r7, #8
 8017996:	46bd      	mov	sp, r7
 8017998:	bd80      	pop	{r7, pc}
 801799a:	bf00      	nop
 801799c:	2400223c 	.word	0x2400223c
 80179a0:	0801c968 	.word	0x0801c968

080179a4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b082      	sub	sp, #8
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	4603      	mov	r3, r0
 80179ac:	6039      	str	r1, [r7, #0]
 80179ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80179b0:	683a      	ldr	r2, [r7, #0]
 80179b2:	4904      	ldr	r1, [pc, #16]	; (80179c4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80179b4:	4804      	ldr	r0, [pc, #16]	; (80179c8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80179b6:	f7fc fdf5 	bl	80145a4 <USBD_GetString>
  return USBD_StrDesc;
 80179ba:	4b02      	ldr	r3, [pc, #8]	; (80179c4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80179bc:	4618      	mov	r0, r3
 80179be:	3708      	adds	r7, #8
 80179c0:	46bd      	mov	sp, r7
 80179c2:	bd80      	pop	{r7, pc}
 80179c4:	2400223c 	.word	0x2400223c
 80179c8:	0801c984 	.word	0x0801c984

080179cc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179cc:	b580      	push	{r7, lr}
 80179ce:	b082      	sub	sp, #8
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	4603      	mov	r3, r0
 80179d4:	6039      	str	r1, [r7, #0]
 80179d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80179d8:	683b      	ldr	r3, [r7, #0]
 80179da:	221a      	movs	r2, #26
 80179dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80179de:	f000 f843 	bl	8017a68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80179e2:	4b02      	ldr	r3, [pc, #8]	; (80179ec <USBD_HS_SerialStrDescriptor+0x20>)
}
 80179e4:	4618      	mov	r0, r3
 80179e6:	3708      	adds	r7, #8
 80179e8:	46bd      	mov	sp, r7
 80179ea:	bd80      	pop	{r7, pc}
 80179ec:	240000e4 	.word	0x240000e4

080179f0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b082      	sub	sp, #8
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	4603      	mov	r3, r0
 80179f8:	6039      	str	r1, [r7, #0]
 80179fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80179fc:	79fb      	ldrb	r3, [r7, #7]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d105      	bne.n	8017a0e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8017a02:	683a      	ldr	r2, [r7, #0]
 8017a04:	4907      	ldr	r1, [pc, #28]	; (8017a24 <USBD_HS_ConfigStrDescriptor+0x34>)
 8017a06:	4808      	ldr	r0, [pc, #32]	; (8017a28 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017a08:	f7fc fdcc 	bl	80145a4 <USBD_GetString>
 8017a0c:	e004      	b.n	8017a18 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8017a0e:	683a      	ldr	r2, [r7, #0]
 8017a10:	4904      	ldr	r1, [pc, #16]	; (8017a24 <USBD_HS_ConfigStrDescriptor+0x34>)
 8017a12:	4805      	ldr	r0, [pc, #20]	; (8017a28 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017a14:	f7fc fdc6 	bl	80145a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017a18:	4b02      	ldr	r3, [pc, #8]	; (8017a24 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	3708      	adds	r7, #8
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bd80      	pop	{r7, pc}
 8017a22:	bf00      	nop
 8017a24:	2400223c 	.word	0x2400223c
 8017a28:	0801c988 	.word	0x0801c988

08017a2c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b082      	sub	sp, #8
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	4603      	mov	r3, r0
 8017a34:	6039      	str	r1, [r7, #0]
 8017a36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017a38:	79fb      	ldrb	r3, [r7, #7]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d105      	bne.n	8017a4a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8017a3e:	683a      	ldr	r2, [r7, #0]
 8017a40:	4907      	ldr	r1, [pc, #28]	; (8017a60 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017a42:	4808      	ldr	r0, [pc, #32]	; (8017a64 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017a44:	f7fc fdae 	bl	80145a4 <USBD_GetString>
 8017a48:	e004      	b.n	8017a54 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8017a4a:	683a      	ldr	r2, [r7, #0]
 8017a4c:	4904      	ldr	r1, [pc, #16]	; (8017a60 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017a4e:	4805      	ldr	r0, [pc, #20]	; (8017a64 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017a50:	f7fc fda8 	bl	80145a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017a54:	4b02      	ldr	r3, [pc, #8]	; (8017a60 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8017a56:	4618      	mov	r0, r3
 8017a58:	3708      	adds	r7, #8
 8017a5a:	46bd      	mov	sp, r7
 8017a5c:	bd80      	pop	{r7, pc}
 8017a5e:	bf00      	nop
 8017a60:	2400223c 	.word	0x2400223c
 8017a64:	0801c994 	.word	0x0801c994

08017a68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b084      	sub	sp, #16
 8017a6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017a6e:	4b0f      	ldr	r3, [pc, #60]	; (8017aac <Get_SerialNum+0x44>)
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017a74:	4b0e      	ldr	r3, [pc, #56]	; (8017ab0 <Get_SerialNum+0x48>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017a7a:	4b0e      	ldr	r3, [pc, #56]	; (8017ab4 <Get_SerialNum+0x4c>)
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017a80:	68fa      	ldr	r2, [r7, #12]
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	4413      	add	r3, r2
 8017a86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d009      	beq.n	8017aa2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017a8e:	2208      	movs	r2, #8
 8017a90:	4909      	ldr	r1, [pc, #36]	; (8017ab8 <Get_SerialNum+0x50>)
 8017a92:	68f8      	ldr	r0, [r7, #12]
 8017a94:	f000 f814 	bl	8017ac0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017a98:	2204      	movs	r2, #4
 8017a9a:	4908      	ldr	r1, [pc, #32]	; (8017abc <Get_SerialNum+0x54>)
 8017a9c:	68b8      	ldr	r0, [r7, #8]
 8017a9e:	f000 f80f 	bl	8017ac0 <IntToUnicode>
  }
}
 8017aa2:	bf00      	nop
 8017aa4:	3710      	adds	r7, #16
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	bd80      	pop	{r7, pc}
 8017aaa:	bf00      	nop
 8017aac:	1ff1e800 	.word	0x1ff1e800
 8017ab0:	1ff1e804 	.word	0x1ff1e804
 8017ab4:	1ff1e808 	.word	0x1ff1e808
 8017ab8:	240000e6 	.word	0x240000e6
 8017abc:	240000f6 	.word	0x240000f6

08017ac0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017ac0:	b480      	push	{r7}
 8017ac2:	b087      	sub	sp, #28
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	60f8      	str	r0, [r7, #12]
 8017ac8:	60b9      	str	r1, [r7, #8]
 8017aca:	4613      	mov	r3, r2
 8017acc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017ace:	2300      	movs	r3, #0
 8017ad0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	75fb      	strb	r3, [r7, #23]
 8017ad6:	e027      	b.n	8017b28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	0f1b      	lsrs	r3, r3, #28
 8017adc:	2b09      	cmp	r3, #9
 8017ade:	d80b      	bhi.n	8017af8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	0f1b      	lsrs	r3, r3, #28
 8017ae4:	b2da      	uxtb	r2, r3
 8017ae6:	7dfb      	ldrb	r3, [r7, #23]
 8017ae8:	005b      	lsls	r3, r3, #1
 8017aea:	4619      	mov	r1, r3
 8017aec:	68bb      	ldr	r3, [r7, #8]
 8017aee:	440b      	add	r3, r1
 8017af0:	3230      	adds	r2, #48	; 0x30
 8017af2:	b2d2      	uxtb	r2, r2
 8017af4:	701a      	strb	r2, [r3, #0]
 8017af6:	e00a      	b.n	8017b0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	0f1b      	lsrs	r3, r3, #28
 8017afc:	b2da      	uxtb	r2, r3
 8017afe:	7dfb      	ldrb	r3, [r7, #23]
 8017b00:	005b      	lsls	r3, r3, #1
 8017b02:	4619      	mov	r1, r3
 8017b04:	68bb      	ldr	r3, [r7, #8]
 8017b06:	440b      	add	r3, r1
 8017b08:	3237      	adds	r2, #55	; 0x37
 8017b0a:	b2d2      	uxtb	r2, r2
 8017b0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	011b      	lsls	r3, r3, #4
 8017b12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017b14:	7dfb      	ldrb	r3, [r7, #23]
 8017b16:	005b      	lsls	r3, r3, #1
 8017b18:	3301      	adds	r3, #1
 8017b1a:	68ba      	ldr	r2, [r7, #8]
 8017b1c:	4413      	add	r3, r2
 8017b1e:	2200      	movs	r2, #0
 8017b20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017b22:	7dfb      	ldrb	r3, [r7, #23]
 8017b24:	3301      	adds	r3, #1
 8017b26:	75fb      	strb	r3, [r7, #23]
 8017b28:	7dfa      	ldrb	r2, [r7, #23]
 8017b2a:	79fb      	ldrb	r3, [r7, #7]
 8017b2c:	429a      	cmp	r2, r3
 8017b2e:	d3d3      	bcc.n	8017ad8 <IntToUnicode+0x18>
  }
}
 8017b30:	bf00      	nop
 8017b32:	bf00      	nop
 8017b34:	371c      	adds	r7, #28
 8017b36:	46bd      	mov	sp, r7
 8017b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b3c:	4770      	bx	lr
	...

08017b40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	b0b2      	sub	sp, #200	; 0xc8
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017b48:	f107 0310 	add.w	r3, r7, #16
 8017b4c:	22b8      	movs	r2, #184	; 0xb8
 8017b4e:	2100      	movs	r1, #0
 8017b50:	4618      	mov	r0, r3
 8017b52:	f000 fb39 	bl	80181c8 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	4a1a      	ldr	r2, [pc, #104]	; (8017bc4 <HAL_PCD_MspInit+0x84>)
 8017b5c:	4293      	cmp	r3, r2
 8017b5e:	d12c      	bne.n	8017bba <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017b60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8017b64:	f04f 0300 	mov.w	r3, #0
 8017b68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8017b6c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8017b70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017b74:	f107 0310 	add.w	r3, r7, #16
 8017b78:	4618      	mov	r0, r3
 8017b7a:	f7f2 f82b 	bl	8009bd4 <HAL_RCCEx_PeriphCLKConfig>
 8017b7e:	4603      	mov	r3, r0
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d001      	beq.n	8017b88 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8017b84:	f7e9 ffe0 	bl	8001b48 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017b88:	f7f1 f844 	bl	8008c14 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8017b8c:	4b0e      	ldr	r3, [pc, #56]	; (8017bc8 <HAL_PCD_MspInit+0x88>)
 8017b8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017b92:	4a0d      	ldr	r2, [pc, #52]	; (8017bc8 <HAL_PCD_MspInit+0x88>)
 8017b94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017b98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8017b9c:	4b0a      	ldr	r3, [pc, #40]	; (8017bc8 <HAL_PCD_MspInit+0x88>)
 8017b9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017ba6:	60fb      	str	r3, [r7, #12]
 8017ba8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8017baa:	2200      	movs	r2, #0
 8017bac:	2100      	movs	r1, #0
 8017bae:	204d      	movs	r0, #77	; 0x4d
 8017bb0:	f7ed f9e1 	bl	8004f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8017bb4:	204d      	movs	r0, #77	; 0x4d
 8017bb6:	f7ed f9f8 	bl	8004faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8017bba:	bf00      	nop
 8017bbc:	37c8      	adds	r7, #200	; 0xc8
 8017bbe:	46bd      	mov	sp, r7
 8017bc0:	bd80      	pop	{r7, pc}
 8017bc2:	bf00      	nop
 8017bc4:	40040000 	.word	0x40040000
 8017bc8:	58024400 	.word	0x58024400

08017bcc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b082      	sub	sp, #8
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017be0:	4619      	mov	r1, r3
 8017be2:	4610      	mov	r0, r2
 8017be4:	f7fb fb79 	bl	80132da <USBD_LL_SetupStage>
}
 8017be8:	bf00      	nop
 8017bea:	3708      	adds	r7, #8
 8017bec:	46bd      	mov	sp, r7
 8017bee:	bd80      	pop	{r7, pc}

08017bf0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b082      	sub	sp, #8
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	6078      	str	r0, [r7, #4]
 8017bf8:	460b      	mov	r3, r1
 8017bfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017c02:	78fa      	ldrb	r2, [r7, #3]
 8017c04:	6879      	ldr	r1, [r7, #4]
 8017c06:	4613      	mov	r3, r2
 8017c08:	00db      	lsls	r3, r3, #3
 8017c0a:	4413      	add	r3, r2
 8017c0c:	009b      	lsls	r3, r3, #2
 8017c0e:	440b      	add	r3, r1
 8017c10:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8017c14:	681a      	ldr	r2, [r3, #0]
 8017c16:	78fb      	ldrb	r3, [r7, #3]
 8017c18:	4619      	mov	r1, r3
 8017c1a:	f7fb fbb3 	bl	8013384 <USBD_LL_DataOutStage>
}
 8017c1e:	bf00      	nop
 8017c20:	3708      	adds	r7, #8
 8017c22:	46bd      	mov	sp, r7
 8017c24:	bd80      	pop	{r7, pc}

08017c26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c26:	b580      	push	{r7, lr}
 8017c28:	b082      	sub	sp, #8
 8017c2a:	af00      	add	r7, sp, #0
 8017c2c:	6078      	str	r0, [r7, #4]
 8017c2e:	460b      	mov	r3, r1
 8017c30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017c38:	78fa      	ldrb	r2, [r7, #3]
 8017c3a:	6879      	ldr	r1, [r7, #4]
 8017c3c:	4613      	mov	r3, r2
 8017c3e:	00db      	lsls	r3, r3, #3
 8017c40:	4413      	add	r3, r2
 8017c42:	009b      	lsls	r3, r3, #2
 8017c44:	440b      	add	r3, r1
 8017c46:	3348      	adds	r3, #72	; 0x48
 8017c48:	681a      	ldr	r2, [r3, #0]
 8017c4a:	78fb      	ldrb	r3, [r7, #3]
 8017c4c:	4619      	mov	r1, r3
 8017c4e:	f7fb fc4c 	bl	80134ea <USBD_LL_DataInStage>
}
 8017c52:	bf00      	nop
 8017c54:	3708      	adds	r7, #8
 8017c56:	46bd      	mov	sp, r7
 8017c58:	bd80      	pop	{r7, pc}

08017c5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c5a:	b580      	push	{r7, lr}
 8017c5c:	b082      	sub	sp, #8
 8017c5e:	af00      	add	r7, sp, #0
 8017c60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f7fb fd86 	bl	801377a <USBD_LL_SOF>
}
 8017c6e:	bf00      	nop
 8017c70:	3708      	adds	r7, #8
 8017c72:	46bd      	mov	sp, r7
 8017c74:	bd80      	pop	{r7, pc}

08017c76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c76:	b580      	push	{r7, lr}
 8017c78:	b084      	sub	sp, #16
 8017c7a:	af00      	add	r7, sp, #0
 8017c7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017c7e:	2301      	movs	r3, #1
 8017c80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	691b      	ldr	r3, [r3, #16]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d102      	bne.n	8017c90 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	73fb      	strb	r3, [r7, #15]
 8017c8e:	e008      	b.n	8017ca2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	691b      	ldr	r3, [r3, #16]
 8017c94:	2b02      	cmp	r3, #2
 8017c96:	d102      	bne.n	8017c9e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017c98:	2301      	movs	r3, #1
 8017c9a:	73fb      	strb	r3, [r7, #15]
 8017c9c:	e001      	b.n	8017ca2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017c9e:	f7e9 ff53 	bl	8001b48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017ca8:	7bfa      	ldrb	r2, [r7, #15]
 8017caa:	4611      	mov	r1, r2
 8017cac:	4618      	mov	r0, r3
 8017cae:	f7fb fd20 	bl	80136f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017cb8:	4618      	mov	r0, r3
 8017cba:	f7fb fcc8 	bl	801364e <USBD_LL_Reset>
}
 8017cbe:	bf00      	nop
 8017cc0:	3710      	adds	r7, #16
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	bd80      	pop	{r7, pc}
	...

08017cc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017cc8:	b580      	push	{r7, lr}
 8017cca:	b082      	sub	sp, #8
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f7fb fd1b 	bl	8013712 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	687a      	ldr	r2, [r7, #4]
 8017ce8:	6812      	ldr	r2, [r2, #0]
 8017cea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017cee:	f043 0301 	orr.w	r3, r3, #1
 8017cf2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	6a1b      	ldr	r3, [r3, #32]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d005      	beq.n	8017d08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017cfc:	4b04      	ldr	r3, [pc, #16]	; (8017d10 <HAL_PCD_SuspendCallback+0x48>)
 8017cfe:	691b      	ldr	r3, [r3, #16]
 8017d00:	4a03      	ldr	r2, [pc, #12]	; (8017d10 <HAL_PCD_SuspendCallback+0x48>)
 8017d02:	f043 0306 	orr.w	r3, r3, #6
 8017d06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017d08:	bf00      	nop
 8017d0a:	3708      	adds	r7, #8
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	bd80      	pop	{r7, pc}
 8017d10:	e000ed00 	.word	0xe000ed00

08017d14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b082      	sub	sp, #8
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017d22:	4618      	mov	r0, r3
 8017d24:	f7fb fd11 	bl	801374a <USBD_LL_Resume>
}
 8017d28:	bf00      	nop
 8017d2a:	3708      	adds	r7, #8
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	bd80      	pop	{r7, pc}

08017d30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b082      	sub	sp, #8
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	6078      	str	r0, [r7, #4]
 8017d38:	460b      	mov	r3, r1
 8017d3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017d42:	78fa      	ldrb	r2, [r7, #3]
 8017d44:	4611      	mov	r1, r2
 8017d46:	4618      	mov	r0, r3
 8017d48:	f7fb fd69 	bl	801381e <USBD_LL_IsoOUTIncomplete>
}
 8017d4c:	bf00      	nop
 8017d4e:	3708      	adds	r7, #8
 8017d50:	46bd      	mov	sp, r7
 8017d52:	bd80      	pop	{r7, pc}

08017d54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b082      	sub	sp, #8
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	6078      	str	r0, [r7, #4]
 8017d5c:	460b      	mov	r3, r1
 8017d5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017d66:	78fa      	ldrb	r2, [r7, #3]
 8017d68:	4611      	mov	r1, r2
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	f7fb fd25 	bl	80137ba <USBD_LL_IsoINIncomplete>
}
 8017d70:	bf00      	nop
 8017d72:	3708      	adds	r7, #8
 8017d74:	46bd      	mov	sp, r7
 8017d76:	bd80      	pop	{r7, pc}

08017d78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b082      	sub	sp, #8
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017d86:	4618      	mov	r0, r3
 8017d88:	f7fb fd7b 	bl	8013882 <USBD_LL_DevConnected>
}
 8017d8c:	bf00      	nop
 8017d8e:	3708      	adds	r7, #8
 8017d90:	46bd      	mov	sp, r7
 8017d92:	bd80      	pop	{r7, pc}

08017d94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d94:	b580      	push	{r7, lr}
 8017d96:	b082      	sub	sp, #8
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017da2:	4618      	mov	r0, r3
 8017da4:	f7fb fd78 	bl	8013898 <USBD_LL_DevDisconnected>
}
 8017da8:	bf00      	nop
 8017daa:	3708      	adds	r7, #8
 8017dac:	46bd      	mov	sp, r7
 8017dae:	bd80      	pop	{r7, pc}

08017db0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b082      	sub	sp, #8
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	781b      	ldrb	r3, [r3, #0]
 8017dbc:	2b01      	cmp	r3, #1
 8017dbe:	d140      	bne.n	8017e42 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8017dc0:	4a22      	ldr	r2, [pc, #136]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	4a20      	ldr	r2, [pc, #128]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017dcc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8017dd0:	4b1e      	ldr	r3, [pc, #120]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017dd2:	4a1f      	ldr	r2, [pc, #124]	; (8017e50 <USBD_LL_Init+0xa0>)
 8017dd4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8017dd6:	4b1d      	ldr	r3, [pc, #116]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017dd8:	2209      	movs	r2, #9
 8017dda:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8017ddc:	4b1b      	ldr	r3, [pc, #108]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017dde:	2202      	movs	r2, #2
 8017de0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8017de2:	4b1a      	ldr	r3, [pc, #104]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017de4:	2200      	movs	r2, #0
 8017de6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8017de8:	4b18      	ldr	r3, [pc, #96]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017dea:	2202      	movs	r2, #2
 8017dec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8017dee:	4b17      	ldr	r3, [pc, #92]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017df0:	2200      	movs	r2, #0
 8017df2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8017df4:	4b15      	ldr	r3, [pc, #84]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017df6:	2200      	movs	r2, #0
 8017df8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8017dfa:	4b14      	ldr	r3, [pc, #80]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017dfc:	2200      	movs	r2, #0
 8017dfe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8017e00:	4b12      	ldr	r3, [pc, #72]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017e02:	2200      	movs	r2, #0
 8017e04:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8017e06:	4b11      	ldr	r3, [pc, #68]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017e08:	2200      	movs	r2, #0
 8017e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8017e0c:	4b0f      	ldr	r3, [pc, #60]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017e0e:	2200      	movs	r2, #0
 8017e10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8017e12:	480e      	ldr	r0, [pc, #56]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017e14:	f7ef fc0b 	bl	800762e <HAL_PCD_Init>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d001      	beq.n	8017e22 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017e1e:	f7e9 fe93 	bl	8001b48 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8017e22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017e26:	4809      	ldr	r0, [pc, #36]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017e28:	f7f0 fe79 	bl	8008b1e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8017e2c:	2280      	movs	r2, #128	; 0x80
 8017e2e:	2100      	movs	r1, #0
 8017e30:	4806      	ldr	r0, [pc, #24]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017e32:	f7f0 fe2d 	bl	8008a90 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8017e36:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8017e3a:	2101      	movs	r1, #1
 8017e3c:	4803      	ldr	r0, [pc, #12]	; (8017e4c <USBD_LL_Init+0x9c>)
 8017e3e:	f7f0 fe27 	bl	8008a90 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8017e42:	2300      	movs	r3, #0
}
 8017e44:	4618      	mov	r0, r3
 8017e46:	3708      	adds	r7, #8
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	bd80      	pop	{r7, pc}
 8017e4c:	2400243c 	.word	0x2400243c
 8017e50:	40040000 	.word	0x40040000

08017e54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017e54:	b580      	push	{r7, lr}
 8017e56:	b084      	sub	sp, #16
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e60:	2300      	movs	r3, #0
 8017e62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	f7ef fd03 	bl	8007876 <HAL_PCD_Start>
 8017e70:	4603      	mov	r3, r0
 8017e72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e74:	7bfb      	ldrb	r3, [r7, #15]
 8017e76:	4618      	mov	r0, r3
 8017e78:	f000 f942 	bl	8018100 <USBD_Get_USB_Status>
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e80:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e82:	4618      	mov	r0, r3
 8017e84:	3710      	adds	r7, #16
 8017e86:	46bd      	mov	sp, r7
 8017e88:	bd80      	pop	{r7, pc}

08017e8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017e8a:	b580      	push	{r7, lr}
 8017e8c:	b084      	sub	sp, #16
 8017e8e:	af00      	add	r7, sp, #0
 8017e90:	6078      	str	r0, [r7, #4]
 8017e92:	4608      	mov	r0, r1
 8017e94:	4611      	mov	r1, r2
 8017e96:	461a      	mov	r2, r3
 8017e98:	4603      	mov	r3, r0
 8017e9a:	70fb      	strb	r3, [r7, #3]
 8017e9c:	460b      	mov	r3, r1
 8017e9e:	70bb      	strb	r3, [r7, #2]
 8017ea0:	4613      	mov	r3, r2
 8017ea2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ea4:	2300      	movs	r3, #0
 8017ea6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017eb2:	78bb      	ldrb	r3, [r7, #2]
 8017eb4:	883a      	ldrh	r2, [r7, #0]
 8017eb6:	78f9      	ldrb	r1, [r7, #3]
 8017eb8:	f7f0 fa03 	bl	80082c2 <HAL_PCD_EP_Open>
 8017ebc:	4603      	mov	r3, r0
 8017ebe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ec0:	7bfb      	ldrb	r3, [r7, #15]
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	f000 f91c 	bl	8018100 <USBD_Get_USB_Status>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ecc:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ece:	4618      	mov	r0, r3
 8017ed0:	3710      	adds	r7, #16
 8017ed2:	46bd      	mov	sp, r7
 8017ed4:	bd80      	pop	{r7, pc}

08017ed6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ed6:	b580      	push	{r7, lr}
 8017ed8:	b084      	sub	sp, #16
 8017eda:	af00      	add	r7, sp, #0
 8017edc:	6078      	str	r0, [r7, #4]
 8017ede:	460b      	mov	r3, r1
 8017ee0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017ef0:	78fa      	ldrb	r2, [r7, #3]
 8017ef2:	4611      	mov	r1, r2
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	f7f0 fa4c 	bl	8008392 <HAL_PCD_EP_Close>
 8017efa:	4603      	mov	r3, r0
 8017efc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017efe:	7bfb      	ldrb	r3, [r7, #15]
 8017f00:	4618      	mov	r0, r3
 8017f02:	f000 f8fd 	bl	8018100 <USBD_Get_USB_Status>
 8017f06:	4603      	mov	r3, r0
 8017f08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	3710      	adds	r7, #16
 8017f10:	46bd      	mov	sp, r7
 8017f12:	bd80      	pop	{r7, pc}

08017f14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f14:	b580      	push	{r7, lr}
 8017f16:	b084      	sub	sp, #16
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	6078      	str	r0, [r7, #4]
 8017f1c:	460b      	mov	r3, r1
 8017f1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f20:	2300      	movs	r3, #0
 8017f22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f24:	2300      	movs	r3, #0
 8017f26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017f2e:	78fa      	ldrb	r2, [r7, #3]
 8017f30:	4611      	mov	r1, r2
 8017f32:	4618      	mov	r0, r3
 8017f34:	f7f0 fb06 	bl	8008544 <HAL_PCD_EP_SetStall>
 8017f38:	4603      	mov	r3, r0
 8017f3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f3c:	7bfb      	ldrb	r3, [r7, #15]
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f000 f8de 	bl	8018100 <USBD_Get_USB_Status>
 8017f44:	4603      	mov	r3, r0
 8017f46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	3710      	adds	r7, #16
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bd80      	pop	{r7, pc}

08017f52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f52:	b580      	push	{r7, lr}
 8017f54:	b084      	sub	sp, #16
 8017f56:	af00      	add	r7, sp, #0
 8017f58:	6078      	str	r0, [r7, #4]
 8017f5a:	460b      	mov	r3, r1
 8017f5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f5e:	2300      	movs	r3, #0
 8017f60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f62:	2300      	movs	r3, #0
 8017f64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017f6c:	78fa      	ldrb	r2, [r7, #3]
 8017f6e:	4611      	mov	r1, r2
 8017f70:	4618      	mov	r0, r3
 8017f72:	f7f0 fb4b 	bl	800860c <HAL_PCD_EP_ClrStall>
 8017f76:	4603      	mov	r3, r0
 8017f78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f7a:	7bfb      	ldrb	r3, [r7, #15]
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	f000 f8bf 	bl	8018100 <USBD_Get_USB_Status>
 8017f82:	4603      	mov	r3, r0
 8017f84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f86:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f88:	4618      	mov	r0, r3
 8017f8a:	3710      	adds	r7, #16
 8017f8c:	46bd      	mov	sp, r7
 8017f8e:	bd80      	pop	{r7, pc}

08017f90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f90:	b480      	push	{r7}
 8017f92:	b085      	sub	sp, #20
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
 8017f98:	460b      	mov	r3, r1
 8017f9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017fa2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	da0b      	bge.n	8017fc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017fac:	78fb      	ldrb	r3, [r7, #3]
 8017fae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017fb2:	68f9      	ldr	r1, [r7, #12]
 8017fb4:	4613      	mov	r3, r2
 8017fb6:	00db      	lsls	r3, r3, #3
 8017fb8:	4413      	add	r3, r2
 8017fba:	009b      	lsls	r3, r3, #2
 8017fbc:	440b      	add	r3, r1
 8017fbe:	333e      	adds	r3, #62	; 0x3e
 8017fc0:	781b      	ldrb	r3, [r3, #0]
 8017fc2:	e00b      	b.n	8017fdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017fc4:	78fb      	ldrb	r3, [r7, #3]
 8017fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017fca:	68f9      	ldr	r1, [r7, #12]
 8017fcc:	4613      	mov	r3, r2
 8017fce:	00db      	lsls	r3, r3, #3
 8017fd0:	4413      	add	r3, r2
 8017fd2:	009b      	lsls	r3, r3, #2
 8017fd4:	440b      	add	r3, r1
 8017fd6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8017fda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017fdc:	4618      	mov	r0, r3
 8017fde:	3714      	adds	r7, #20
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe6:	4770      	bx	lr

08017fe8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b084      	sub	sp, #16
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	6078      	str	r0, [r7, #4]
 8017ff0:	460b      	mov	r3, r1
 8017ff2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018002:	78fa      	ldrb	r2, [r7, #3]
 8018004:	4611      	mov	r1, r2
 8018006:	4618      	mov	r0, r3
 8018008:	f7f0 f936 	bl	8008278 <HAL_PCD_SetAddress>
 801800c:	4603      	mov	r3, r0
 801800e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018010:	7bfb      	ldrb	r3, [r7, #15]
 8018012:	4618      	mov	r0, r3
 8018014:	f000 f874 	bl	8018100 <USBD_Get_USB_Status>
 8018018:	4603      	mov	r3, r0
 801801a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801801c:	7bbb      	ldrb	r3, [r7, #14]
}
 801801e:	4618      	mov	r0, r3
 8018020:	3710      	adds	r7, #16
 8018022:	46bd      	mov	sp, r7
 8018024:	bd80      	pop	{r7, pc}

08018026 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018026:	b580      	push	{r7, lr}
 8018028:	b086      	sub	sp, #24
 801802a:	af00      	add	r7, sp, #0
 801802c:	60f8      	str	r0, [r7, #12]
 801802e:	607a      	str	r2, [r7, #4]
 8018030:	603b      	str	r3, [r7, #0]
 8018032:	460b      	mov	r3, r1
 8018034:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018036:	2300      	movs	r3, #0
 8018038:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801803a:	2300      	movs	r3, #0
 801803c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018044:	7af9      	ldrb	r1, [r7, #11]
 8018046:	683b      	ldr	r3, [r7, #0]
 8018048:	687a      	ldr	r2, [r7, #4]
 801804a:	f7f0 fa40 	bl	80084ce <HAL_PCD_EP_Transmit>
 801804e:	4603      	mov	r3, r0
 8018050:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018052:	7dfb      	ldrb	r3, [r7, #23]
 8018054:	4618      	mov	r0, r3
 8018056:	f000 f853 	bl	8018100 <USBD_Get_USB_Status>
 801805a:	4603      	mov	r3, r0
 801805c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801805e:	7dbb      	ldrb	r3, [r7, #22]
}
 8018060:	4618      	mov	r0, r3
 8018062:	3718      	adds	r7, #24
 8018064:	46bd      	mov	sp, r7
 8018066:	bd80      	pop	{r7, pc}

08018068 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018068:	b580      	push	{r7, lr}
 801806a:	b086      	sub	sp, #24
 801806c:	af00      	add	r7, sp, #0
 801806e:	60f8      	str	r0, [r7, #12]
 8018070:	607a      	str	r2, [r7, #4]
 8018072:	603b      	str	r3, [r7, #0]
 8018074:	460b      	mov	r3, r1
 8018076:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018078:	2300      	movs	r3, #0
 801807a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801807c:	2300      	movs	r3, #0
 801807e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018086:	7af9      	ldrb	r1, [r7, #11]
 8018088:	683b      	ldr	r3, [r7, #0]
 801808a:	687a      	ldr	r2, [r7, #4]
 801808c:	f7f0 f9cb 	bl	8008426 <HAL_PCD_EP_Receive>
 8018090:	4603      	mov	r3, r0
 8018092:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018094:	7dfb      	ldrb	r3, [r7, #23]
 8018096:	4618      	mov	r0, r3
 8018098:	f000 f832 	bl	8018100 <USBD_Get_USB_Status>
 801809c:	4603      	mov	r3, r0
 801809e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80180a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80180a2:	4618      	mov	r0, r3
 80180a4:	3718      	adds	r7, #24
 80180a6:	46bd      	mov	sp, r7
 80180a8:	bd80      	pop	{r7, pc}

080180aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80180aa:	b580      	push	{r7, lr}
 80180ac:	b082      	sub	sp, #8
 80180ae:	af00      	add	r7, sp, #0
 80180b0:	6078      	str	r0, [r7, #4]
 80180b2:	460b      	mov	r3, r1
 80180b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80180bc:	78fa      	ldrb	r2, [r7, #3]
 80180be:	4611      	mov	r1, r2
 80180c0:	4618      	mov	r0, r3
 80180c2:	f7f0 f9ec 	bl	800849e <HAL_PCD_EP_GetRxCount>
 80180c6:	4603      	mov	r3, r0
}
 80180c8:	4618      	mov	r0, r3
 80180ca:	3708      	adds	r7, #8
 80180cc:	46bd      	mov	sp, r7
 80180ce:	bd80      	pop	{r7, pc}

080180d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80180d0:	b480      	push	{r7}
 80180d2:	b083      	sub	sp, #12
 80180d4:	af00      	add	r7, sp, #0
 80180d6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80180d8:	4b03      	ldr	r3, [pc, #12]	; (80180e8 <USBD_static_malloc+0x18>)
}
 80180da:	4618      	mov	r0, r3
 80180dc:	370c      	adds	r7, #12
 80180de:	46bd      	mov	sp, r7
 80180e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e4:	4770      	bx	lr
 80180e6:	bf00      	nop
 80180e8:	24002948 	.word	0x24002948

080180ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80180ec:	b480      	push	{r7}
 80180ee:	b083      	sub	sp, #12
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80180f4:	bf00      	nop
 80180f6:	370c      	adds	r7, #12
 80180f8:	46bd      	mov	sp, r7
 80180fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180fe:	4770      	bx	lr

08018100 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018100:	b480      	push	{r7}
 8018102:	b085      	sub	sp, #20
 8018104:	af00      	add	r7, sp, #0
 8018106:	4603      	mov	r3, r0
 8018108:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801810a:	2300      	movs	r3, #0
 801810c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801810e:	79fb      	ldrb	r3, [r7, #7]
 8018110:	2b03      	cmp	r3, #3
 8018112:	d817      	bhi.n	8018144 <USBD_Get_USB_Status+0x44>
 8018114:	a201      	add	r2, pc, #4	; (adr r2, 801811c <USBD_Get_USB_Status+0x1c>)
 8018116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801811a:	bf00      	nop
 801811c:	0801812d 	.word	0x0801812d
 8018120:	08018133 	.word	0x08018133
 8018124:	08018139 	.word	0x08018139
 8018128:	0801813f 	.word	0x0801813f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801812c:	2300      	movs	r3, #0
 801812e:	73fb      	strb	r3, [r7, #15]
    break;
 8018130:	e00b      	b.n	801814a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018132:	2303      	movs	r3, #3
 8018134:	73fb      	strb	r3, [r7, #15]
    break;
 8018136:	e008      	b.n	801814a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018138:	2301      	movs	r3, #1
 801813a:	73fb      	strb	r3, [r7, #15]
    break;
 801813c:	e005      	b.n	801814a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801813e:	2303      	movs	r3, #3
 8018140:	73fb      	strb	r3, [r7, #15]
    break;
 8018142:	e002      	b.n	801814a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018144:	2303      	movs	r3, #3
 8018146:	73fb      	strb	r3, [r7, #15]
    break;
 8018148:	bf00      	nop
  }
  return usb_status;
 801814a:	7bfb      	ldrb	r3, [r7, #15]
}
 801814c:	4618      	mov	r0, r3
 801814e:	3714      	adds	r7, #20
 8018150:	46bd      	mov	sp, r7
 8018152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018156:	4770      	bx	lr

08018158 <__errno>:
 8018158:	4b01      	ldr	r3, [pc, #4]	; (8018160 <__errno+0x8>)
 801815a:	6818      	ldr	r0, [r3, #0]
 801815c:	4770      	bx	lr
 801815e:	bf00      	nop
 8018160:	24000100 	.word	0x24000100

08018164 <__libc_init_array>:
 8018164:	b570      	push	{r4, r5, r6, lr}
 8018166:	4d0d      	ldr	r5, [pc, #52]	; (801819c <__libc_init_array+0x38>)
 8018168:	4c0d      	ldr	r4, [pc, #52]	; (80181a0 <__libc_init_array+0x3c>)
 801816a:	1b64      	subs	r4, r4, r5
 801816c:	10a4      	asrs	r4, r4, #2
 801816e:	2600      	movs	r6, #0
 8018170:	42a6      	cmp	r6, r4
 8018172:	d109      	bne.n	8018188 <__libc_init_array+0x24>
 8018174:	4d0b      	ldr	r5, [pc, #44]	; (80181a4 <__libc_init_array+0x40>)
 8018176:	4c0c      	ldr	r4, [pc, #48]	; (80181a8 <__libc_init_array+0x44>)
 8018178:	f004 fb86 	bl	801c888 <_init>
 801817c:	1b64      	subs	r4, r4, r5
 801817e:	10a4      	asrs	r4, r4, #2
 8018180:	2600      	movs	r6, #0
 8018182:	42a6      	cmp	r6, r4
 8018184:	d105      	bne.n	8018192 <__libc_init_array+0x2e>
 8018186:	bd70      	pop	{r4, r5, r6, pc}
 8018188:	f855 3b04 	ldr.w	r3, [r5], #4
 801818c:	4798      	blx	r3
 801818e:	3601      	adds	r6, #1
 8018190:	e7ee      	b.n	8018170 <__libc_init_array+0xc>
 8018192:	f855 3b04 	ldr.w	r3, [r5], #4
 8018196:	4798      	blx	r3
 8018198:	3601      	adds	r6, #1
 801819a:	e7f2      	b.n	8018182 <__libc_init_array+0x1e>
 801819c:	0801d2e4 	.word	0x0801d2e4
 80181a0:	0801d2e4 	.word	0x0801d2e4
 80181a4:	0801d2e4 	.word	0x0801d2e4
 80181a8:	0801d2e8 	.word	0x0801d2e8

080181ac <memcpy>:
 80181ac:	440a      	add	r2, r1
 80181ae:	4291      	cmp	r1, r2
 80181b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80181b4:	d100      	bne.n	80181b8 <memcpy+0xc>
 80181b6:	4770      	bx	lr
 80181b8:	b510      	push	{r4, lr}
 80181ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80181be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80181c2:	4291      	cmp	r1, r2
 80181c4:	d1f9      	bne.n	80181ba <memcpy+0xe>
 80181c6:	bd10      	pop	{r4, pc}

080181c8 <memset>:
 80181c8:	4402      	add	r2, r0
 80181ca:	4603      	mov	r3, r0
 80181cc:	4293      	cmp	r3, r2
 80181ce:	d100      	bne.n	80181d2 <memset+0xa>
 80181d0:	4770      	bx	lr
 80181d2:	f803 1b01 	strb.w	r1, [r3], #1
 80181d6:	e7f9      	b.n	80181cc <memset+0x4>

080181d8 <__cvt>:
 80181d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181da:	ed2d 8b02 	vpush	{d8}
 80181de:	eeb0 8b40 	vmov.f64	d8, d0
 80181e2:	b085      	sub	sp, #20
 80181e4:	4617      	mov	r7, r2
 80181e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80181e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80181ea:	ee18 2a90 	vmov	r2, s17
 80181ee:	f025 0520 	bic.w	r5, r5, #32
 80181f2:	2a00      	cmp	r2, #0
 80181f4:	bfb6      	itet	lt
 80181f6:	222d      	movlt	r2, #45	; 0x2d
 80181f8:	2200      	movge	r2, #0
 80181fa:	eeb1 8b40 	vneglt.f64	d8, d0
 80181fe:	2d46      	cmp	r5, #70	; 0x46
 8018200:	460c      	mov	r4, r1
 8018202:	701a      	strb	r2, [r3, #0]
 8018204:	d004      	beq.n	8018210 <__cvt+0x38>
 8018206:	2d45      	cmp	r5, #69	; 0x45
 8018208:	d100      	bne.n	801820c <__cvt+0x34>
 801820a:	3401      	adds	r4, #1
 801820c:	2102      	movs	r1, #2
 801820e:	e000      	b.n	8018212 <__cvt+0x3a>
 8018210:	2103      	movs	r1, #3
 8018212:	ab03      	add	r3, sp, #12
 8018214:	9301      	str	r3, [sp, #4]
 8018216:	ab02      	add	r3, sp, #8
 8018218:	9300      	str	r3, [sp, #0]
 801821a:	4622      	mov	r2, r4
 801821c:	4633      	mov	r3, r6
 801821e:	eeb0 0b48 	vmov.f64	d0, d8
 8018222:	f001 fd95 	bl	8019d50 <_dtoa_r>
 8018226:	2d47      	cmp	r5, #71	; 0x47
 8018228:	d101      	bne.n	801822e <__cvt+0x56>
 801822a:	07fb      	lsls	r3, r7, #31
 801822c:	d51a      	bpl.n	8018264 <__cvt+0x8c>
 801822e:	2d46      	cmp	r5, #70	; 0x46
 8018230:	eb00 0204 	add.w	r2, r0, r4
 8018234:	d10c      	bne.n	8018250 <__cvt+0x78>
 8018236:	7803      	ldrb	r3, [r0, #0]
 8018238:	2b30      	cmp	r3, #48	; 0x30
 801823a:	d107      	bne.n	801824c <__cvt+0x74>
 801823c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018244:	bf1c      	itt	ne
 8018246:	f1c4 0401 	rsbne	r4, r4, #1
 801824a:	6034      	strne	r4, [r6, #0]
 801824c:	6833      	ldr	r3, [r6, #0]
 801824e:	441a      	add	r2, r3
 8018250:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018258:	bf08      	it	eq
 801825a:	9203      	streq	r2, [sp, #12]
 801825c:	2130      	movs	r1, #48	; 0x30
 801825e:	9b03      	ldr	r3, [sp, #12]
 8018260:	4293      	cmp	r3, r2
 8018262:	d307      	bcc.n	8018274 <__cvt+0x9c>
 8018264:	9b03      	ldr	r3, [sp, #12]
 8018266:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018268:	1a1b      	subs	r3, r3, r0
 801826a:	6013      	str	r3, [r2, #0]
 801826c:	b005      	add	sp, #20
 801826e:	ecbd 8b02 	vpop	{d8}
 8018272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018274:	1c5c      	adds	r4, r3, #1
 8018276:	9403      	str	r4, [sp, #12]
 8018278:	7019      	strb	r1, [r3, #0]
 801827a:	e7f0      	b.n	801825e <__cvt+0x86>

0801827c <__exponent>:
 801827c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801827e:	4603      	mov	r3, r0
 8018280:	2900      	cmp	r1, #0
 8018282:	bfb8      	it	lt
 8018284:	4249      	neglt	r1, r1
 8018286:	f803 2b02 	strb.w	r2, [r3], #2
 801828a:	bfb4      	ite	lt
 801828c:	222d      	movlt	r2, #45	; 0x2d
 801828e:	222b      	movge	r2, #43	; 0x2b
 8018290:	2909      	cmp	r1, #9
 8018292:	7042      	strb	r2, [r0, #1]
 8018294:	dd2a      	ble.n	80182ec <__exponent+0x70>
 8018296:	f10d 0407 	add.w	r4, sp, #7
 801829a:	46a4      	mov	ip, r4
 801829c:	270a      	movs	r7, #10
 801829e:	46a6      	mov	lr, r4
 80182a0:	460a      	mov	r2, r1
 80182a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80182a6:	fb07 1516 	mls	r5, r7, r6, r1
 80182aa:	3530      	adds	r5, #48	; 0x30
 80182ac:	2a63      	cmp	r2, #99	; 0x63
 80182ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80182b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80182b6:	4631      	mov	r1, r6
 80182b8:	dcf1      	bgt.n	801829e <__exponent+0x22>
 80182ba:	3130      	adds	r1, #48	; 0x30
 80182bc:	f1ae 0502 	sub.w	r5, lr, #2
 80182c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80182c4:	1c44      	adds	r4, r0, #1
 80182c6:	4629      	mov	r1, r5
 80182c8:	4561      	cmp	r1, ip
 80182ca:	d30a      	bcc.n	80182e2 <__exponent+0x66>
 80182cc:	f10d 0209 	add.w	r2, sp, #9
 80182d0:	eba2 020e 	sub.w	r2, r2, lr
 80182d4:	4565      	cmp	r5, ip
 80182d6:	bf88      	it	hi
 80182d8:	2200      	movhi	r2, #0
 80182da:	4413      	add	r3, r2
 80182dc:	1a18      	subs	r0, r3, r0
 80182de:	b003      	add	sp, #12
 80182e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80182e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80182ea:	e7ed      	b.n	80182c8 <__exponent+0x4c>
 80182ec:	2330      	movs	r3, #48	; 0x30
 80182ee:	3130      	adds	r1, #48	; 0x30
 80182f0:	7083      	strb	r3, [r0, #2]
 80182f2:	70c1      	strb	r1, [r0, #3]
 80182f4:	1d03      	adds	r3, r0, #4
 80182f6:	e7f1      	b.n	80182dc <__exponent+0x60>

080182f8 <_printf_float>:
 80182f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182fc:	b08b      	sub	sp, #44	; 0x2c
 80182fe:	460c      	mov	r4, r1
 8018300:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8018304:	4616      	mov	r6, r2
 8018306:	461f      	mov	r7, r3
 8018308:	4605      	mov	r5, r0
 801830a:	f002 fdff 	bl	801af0c <_localeconv_r>
 801830e:	f8d0 b000 	ldr.w	fp, [r0]
 8018312:	4658      	mov	r0, fp
 8018314:	f7e7 fffc 	bl	8000310 <strlen>
 8018318:	2300      	movs	r3, #0
 801831a:	9308      	str	r3, [sp, #32]
 801831c:	f8d8 3000 	ldr.w	r3, [r8]
 8018320:	f894 9018 	ldrb.w	r9, [r4, #24]
 8018324:	6822      	ldr	r2, [r4, #0]
 8018326:	3307      	adds	r3, #7
 8018328:	f023 0307 	bic.w	r3, r3, #7
 801832c:	f103 0108 	add.w	r1, r3, #8
 8018330:	f8c8 1000 	str.w	r1, [r8]
 8018334:	4682      	mov	sl, r0
 8018336:	e9d3 0100 	ldrd	r0, r1, [r3]
 801833a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801833e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80185a0 <_printf_float+0x2a8>
 8018342:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8018346:	eeb0 6bc0 	vabs.f64	d6, d0
 801834a:	eeb4 6b47 	vcmp.f64	d6, d7
 801834e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018352:	dd24      	ble.n	801839e <_printf_float+0xa6>
 8018354:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801835c:	d502      	bpl.n	8018364 <_printf_float+0x6c>
 801835e:	232d      	movs	r3, #45	; 0x2d
 8018360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018364:	4b90      	ldr	r3, [pc, #576]	; (80185a8 <_printf_float+0x2b0>)
 8018366:	4891      	ldr	r0, [pc, #580]	; (80185ac <_printf_float+0x2b4>)
 8018368:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801836c:	bf94      	ite	ls
 801836e:	4698      	movls	r8, r3
 8018370:	4680      	movhi	r8, r0
 8018372:	2303      	movs	r3, #3
 8018374:	6123      	str	r3, [r4, #16]
 8018376:	f022 0204 	bic.w	r2, r2, #4
 801837a:	2300      	movs	r3, #0
 801837c:	6022      	str	r2, [r4, #0]
 801837e:	9304      	str	r3, [sp, #16]
 8018380:	9700      	str	r7, [sp, #0]
 8018382:	4633      	mov	r3, r6
 8018384:	aa09      	add	r2, sp, #36	; 0x24
 8018386:	4621      	mov	r1, r4
 8018388:	4628      	mov	r0, r5
 801838a:	f000 f9d3 	bl	8018734 <_printf_common>
 801838e:	3001      	adds	r0, #1
 8018390:	f040 808a 	bne.w	80184a8 <_printf_float+0x1b0>
 8018394:	f04f 30ff 	mov.w	r0, #4294967295
 8018398:	b00b      	add	sp, #44	; 0x2c
 801839a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801839e:	eeb4 0b40 	vcmp.f64	d0, d0
 80183a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183a6:	d709      	bvc.n	80183bc <_printf_float+0xc4>
 80183a8:	ee10 3a90 	vmov	r3, s1
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	bfbc      	itt	lt
 80183b0:	232d      	movlt	r3, #45	; 0x2d
 80183b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80183b6:	487e      	ldr	r0, [pc, #504]	; (80185b0 <_printf_float+0x2b8>)
 80183b8:	4b7e      	ldr	r3, [pc, #504]	; (80185b4 <_printf_float+0x2bc>)
 80183ba:	e7d5      	b.n	8018368 <_printf_float+0x70>
 80183bc:	6863      	ldr	r3, [r4, #4]
 80183be:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80183c2:	9104      	str	r1, [sp, #16]
 80183c4:	1c59      	adds	r1, r3, #1
 80183c6:	d13c      	bne.n	8018442 <_printf_float+0x14a>
 80183c8:	2306      	movs	r3, #6
 80183ca:	6063      	str	r3, [r4, #4]
 80183cc:	2300      	movs	r3, #0
 80183ce:	9303      	str	r3, [sp, #12]
 80183d0:	ab08      	add	r3, sp, #32
 80183d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80183d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80183da:	ab07      	add	r3, sp, #28
 80183dc:	6861      	ldr	r1, [r4, #4]
 80183de:	9300      	str	r3, [sp, #0]
 80183e0:	6022      	str	r2, [r4, #0]
 80183e2:	f10d 031b 	add.w	r3, sp, #27
 80183e6:	4628      	mov	r0, r5
 80183e8:	f7ff fef6 	bl	80181d8 <__cvt>
 80183ec:	9b04      	ldr	r3, [sp, #16]
 80183ee:	9907      	ldr	r1, [sp, #28]
 80183f0:	2b47      	cmp	r3, #71	; 0x47
 80183f2:	4680      	mov	r8, r0
 80183f4:	d108      	bne.n	8018408 <_printf_float+0x110>
 80183f6:	1cc8      	adds	r0, r1, #3
 80183f8:	db02      	blt.n	8018400 <_printf_float+0x108>
 80183fa:	6863      	ldr	r3, [r4, #4]
 80183fc:	4299      	cmp	r1, r3
 80183fe:	dd41      	ble.n	8018484 <_printf_float+0x18c>
 8018400:	f1a9 0902 	sub.w	r9, r9, #2
 8018404:	fa5f f989 	uxtb.w	r9, r9
 8018408:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801840c:	d820      	bhi.n	8018450 <_printf_float+0x158>
 801840e:	3901      	subs	r1, #1
 8018410:	464a      	mov	r2, r9
 8018412:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018416:	9107      	str	r1, [sp, #28]
 8018418:	f7ff ff30 	bl	801827c <__exponent>
 801841c:	9a08      	ldr	r2, [sp, #32]
 801841e:	9004      	str	r0, [sp, #16]
 8018420:	1813      	adds	r3, r2, r0
 8018422:	2a01      	cmp	r2, #1
 8018424:	6123      	str	r3, [r4, #16]
 8018426:	dc02      	bgt.n	801842e <_printf_float+0x136>
 8018428:	6822      	ldr	r2, [r4, #0]
 801842a:	07d2      	lsls	r2, r2, #31
 801842c:	d501      	bpl.n	8018432 <_printf_float+0x13a>
 801842e:	3301      	adds	r3, #1
 8018430:	6123      	str	r3, [r4, #16]
 8018432:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d0a2      	beq.n	8018380 <_printf_float+0x88>
 801843a:	232d      	movs	r3, #45	; 0x2d
 801843c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018440:	e79e      	b.n	8018380 <_printf_float+0x88>
 8018442:	9904      	ldr	r1, [sp, #16]
 8018444:	2947      	cmp	r1, #71	; 0x47
 8018446:	d1c1      	bne.n	80183cc <_printf_float+0xd4>
 8018448:	2b00      	cmp	r3, #0
 801844a:	d1bf      	bne.n	80183cc <_printf_float+0xd4>
 801844c:	2301      	movs	r3, #1
 801844e:	e7bc      	b.n	80183ca <_printf_float+0xd2>
 8018450:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8018454:	d118      	bne.n	8018488 <_printf_float+0x190>
 8018456:	2900      	cmp	r1, #0
 8018458:	6863      	ldr	r3, [r4, #4]
 801845a:	dd0b      	ble.n	8018474 <_printf_float+0x17c>
 801845c:	6121      	str	r1, [r4, #16]
 801845e:	b913      	cbnz	r3, 8018466 <_printf_float+0x16e>
 8018460:	6822      	ldr	r2, [r4, #0]
 8018462:	07d0      	lsls	r0, r2, #31
 8018464:	d502      	bpl.n	801846c <_printf_float+0x174>
 8018466:	3301      	adds	r3, #1
 8018468:	440b      	add	r3, r1
 801846a:	6123      	str	r3, [r4, #16]
 801846c:	2300      	movs	r3, #0
 801846e:	65a1      	str	r1, [r4, #88]	; 0x58
 8018470:	9304      	str	r3, [sp, #16]
 8018472:	e7de      	b.n	8018432 <_printf_float+0x13a>
 8018474:	b913      	cbnz	r3, 801847c <_printf_float+0x184>
 8018476:	6822      	ldr	r2, [r4, #0]
 8018478:	07d2      	lsls	r2, r2, #31
 801847a:	d501      	bpl.n	8018480 <_printf_float+0x188>
 801847c:	3302      	adds	r3, #2
 801847e:	e7f4      	b.n	801846a <_printf_float+0x172>
 8018480:	2301      	movs	r3, #1
 8018482:	e7f2      	b.n	801846a <_printf_float+0x172>
 8018484:	f04f 0967 	mov.w	r9, #103	; 0x67
 8018488:	9b08      	ldr	r3, [sp, #32]
 801848a:	4299      	cmp	r1, r3
 801848c:	db05      	blt.n	801849a <_printf_float+0x1a2>
 801848e:	6823      	ldr	r3, [r4, #0]
 8018490:	6121      	str	r1, [r4, #16]
 8018492:	07d8      	lsls	r0, r3, #31
 8018494:	d5ea      	bpl.n	801846c <_printf_float+0x174>
 8018496:	1c4b      	adds	r3, r1, #1
 8018498:	e7e7      	b.n	801846a <_printf_float+0x172>
 801849a:	2900      	cmp	r1, #0
 801849c:	bfd4      	ite	le
 801849e:	f1c1 0202 	rsble	r2, r1, #2
 80184a2:	2201      	movgt	r2, #1
 80184a4:	4413      	add	r3, r2
 80184a6:	e7e0      	b.n	801846a <_printf_float+0x172>
 80184a8:	6823      	ldr	r3, [r4, #0]
 80184aa:	055a      	lsls	r2, r3, #21
 80184ac:	d407      	bmi.n	80184be <_printf_float+0x1c6>
 80184ae:	6923      	ldr	r3, [r4, #16]
 80184b0:	4642      	mov	r2, r8
 80184b2:	4631      	mov	r1, r6
 80184b4:	4628      	mov	r0, r5
 80184b6:	47b8      	blx	r7
 80184b8:	3001      	adds	r0, #1
 80184ba:	d12a      	bne.n	8018512 <_printf_float+0x21a>
 80184bc:	e76a      	b.n	8018394 <_printf_float+0x9c>
 80184be:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80184c2:	f240 80e2 	bls.w	801868a <_printf_float+0x392>
 80184c6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80184ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80184ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184d2:	d133      	bne.n	801853c <_printf_float+0x244>
 80184d4:	4a38      	ldr	r2, [pc, #224]	; (80185b8 <_printf_float+0x2c0>)
 80184d6:	2301      	movs	r3, #1
 80184d8:	4631      	mov	r1, r6
 80184da:	4628      	mov	r0, r5
 80184dc:	47b8      	blx	r7
 80184de:	3001      	adds	r0, #1
 80184e0:	f43f af58 	beq.w	8018394 <_printf_float+0x9c>
 80184e4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80184e8:	429a      	cmp	r2, r3
 80184ea:	db02      	blt.n	80184f2 <_printf_float+0x1fa>
 80184ec:	6823      	ldr	r3, [r4, #0]
 80184ee:	07d8      	lsls	r0, r3, #31
 80184f0:	d50f      	bpl.n	8018512 <_printf_float+0x21a>
 80184f2:	4653      	mov	r3, sl
 80184f4:	465a      	mov	r2, fp
 80184f6:	4631      	mov	r1, r6
 80184f8:	4628      	mov	r0, r5
 80184fa:	47b8      	blx	r7
 80184fc:	3001      	adds	r0, #1
 80184fe:	f43f af49 	beq.w	8018394 <_printf_float+0x9c>
 8018502:	f04f 0800 	mov.w	r8, #0
 8018506:	f104 091a 	add.w	r9, r4, #26
 801850a:	9b08      	ldr	r3, [sp, #32]
 801850c:	3b01      	subs	r3, #1
 801850e:	4543      	cmp	r3, r8
 8018510:	dc09      	bgt.n	8018526 <_printf_float+0x22e>
 8018512:	6823      	ldr	r3, [r4, #0]
 8018514:	079b      	lsls	r3, r3, #30
 8018516:	f100 8108 	bmi.w	801872a <_printf_float+0x432>
 801851a:	68e0      	ldr	r0, [r4, #12]
 801851c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801851e:	4298      	cmp	r0, r3
 8018520:	bfb8      	it	lt
 8018522:	4618      	movlt	r0, r3
 8018524:	e738      	b.n	8018398 <_printf_float+0xa0>
 8018526:	2301      	movs	r3, #1
 8018528:	464a      	mov	r2, r9
 801852a:	4631      	mov	r1, r6
 801852c:	4628      	mov	r0, r5
 801852e:	47b8      	blx	r7
 8018530:	3001      	adds	r0, #1
 8018532:	f43f af2f 	beq.w	8018394 <_printf_float+0x9c>
 8018536:	f108 0801 	add.w	r8, r8, #1
 801853a:	e7e6      	b.n	801850a <_printf_float+0x212>
 801853c:	9b07      	ldr	r3, [sp, #28]
 801853e:	2b00      	cmp	r3, #0
 8018540:	dc3c      	bgt.n	80185bc <_printf_float+0x2c4>
 8018542:	4a1d      	ldr	r2, [pc, #116]	; (80185b8 <_printf_float+0x2c0>)
 8018544:	2301      	movs	r3, #1
 8018546:	4631      	mov	r1, r6
 8018548:	4628      	mov	r0, r5
 801854a:	47b8      	blx	r7
 801854c:	3001      	adds	r0, #1
 801854e:	f43f af21 	beq.w	8018394 <_printf_float+0x9c>
 8018552:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018556:	4313      	orrs	r3, r2
 8018558:	d102      	bne.n	8018560 <_printf_float+0x268>
 801855a:	6823      	ldr	r3, [r4, #0]
 801855c:	07d9      	lsls	r1, r3, #31
 801855e:	d5d8      	bpl.n	8018512 <_printf_float+0x21a>
 8018560:	4653      	mov	r3, sl
 8018562:	465a      	mov	r2, fp
 8018564:	4631      	mov	r1, r6
 8018566:	4628      	mov	r0, r5
 8018568:	47b8      	blx	r7
 801856a:	3001      	adds	r0, #1
 801856c:	f43f af12 	beq.w	8018394 <_printf_float+0x9c>
 8018570:	f04f 0900 	mov.w	r9, #0
 8018574:	f104 0a1a 	add.w	sl, r4, #26
 8018578:	9b07      	ldr	r3, [sp, #28]
 801857a:	425b      	negs	r3, r3
 801857c:	454b      	cmp	r3, r9
 801857e:	dc01      	bgt.n	8018584 <_printf_float+0x28c>
 8018580:	9b08      	ldr	r3, [sp, #32]
 8018582:	e795      	b.n	80184b0 <_printf_float+0x1b8>
 8018584:	2301      	movs	r3, #1
 8018586:	4652      	mov	r2, sl
 8018588:	4631      	mov	r1, r6
 801858a:	4628      	mov	r0, r5
 801858c:	47b8      	blx	r7
 801858e:	3001      	adds	r0, #1
 8018590:	f43f af00 	beq.w	8018394 <_printf_float+0x9c>
 8018594:	f109 0901 	add.w	r9, r9, #1
 8018598:	e7ee      	b.n	8018578 <_printf_float+0x280>
 801859a:	bf00      	nop
 801859c:	f3af 8000 	nop.w
 80185a0:	ffffffff 	.word	0xffffffff
 80185a4:	7fefffff 	.word	0x7fefffff
 80185a8:	0801ce3c 	.word	0x0801ce3c
 80185ac:	0801ce40 	.word	0x0801ce40
 80185b0:	0801ce48 	.word	0x0801ce48
 80185b4:	0801ce44 	.word	0x0801ce44
 80185b8:	0801ce4c 	.word	0x0801ce4c
 80185bc:	9a08      	ldr	r2, [sp, #32]
 80185be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80185c0:	429a      	cmp	r2, r3
 80185c2:	bfa8      	it	ge
 80185c4:	461a      	movge	r2, r3
 80185c6:	2a00      	cmp	r2, #0
 80185c8:	4691      	mov	r9, r2
 80185ca:	dc38      	bgt.n	801863e <_printf_float+0x346>
 80185cc:	2300      	movs	r3, #0
 80185ce:	9305      	str	r3, [sp, #20]
 80185d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80185d4:	f104 021a 	add.w	r2, r4, #26
 80185d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80185da:	9905      	ldr	r1, [sp, #20]
 80185dc:	9304      	str	r3, [sp, #16]
 80185de:	eba3 0309 	sub.w	r3, r3, r9
 80185e2:	428b      	cmp	r3, r1
 80185e4:	dc33      	bgt.n	801864e <_printf_float+0x356>
 80185e6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80185ea:	429a      	cmp	r2, r3
 80185ec:	db3c      	blt.n	8018668 <_printf_float+0x370>
 80185ee:	6823      	ldr	r3, [r4, #0]
 80185f0:	07da      	lsls	r2, r3, #31
 80185f2:	d439      	bmi.n	8018668 <_printf_float+0x370>
 80185f4:	9b08      	ldr	r3, [sp, #32]
 80185f6:	9a04      	ldr	r2, [sp, #16]
 80185f8:	9907      	ldr	r1, [sp, #28]
 80185fa:	1a9a      	subs	r2, r3, r2
 80185fc:	eba3 0901 	sub.w	r9, r3, r1
 8018600:	4591      	cmp	r9, r2
 8018602:	bfa8      	it	ge
 8018604:	4691      	movge	r9, r2
 8018606:	f1b9 0f00 	cmp.w	r9, #0
 801860a:	dc35      	bgt.n	8018678 <_printf_float+0x380>
 801860c:	f04f 0800 	mov.w	r8, #0
 8018610:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018614:	f104 0a1a 	add.w	sl, r4, #26
 8018618:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801861c:	1a9b      	subs	r3, r3, r2
 801861e:	eba3 0309 	sub.w	r3, r3, r9
 8018622:	4543      	cmp	r3, r8
 8018624:	f77f af75 	ble.w	8018512 <_printf_float+0x21a>
 8018628:	2301      	movs	r3, #1
 801862a:	4652      	mov	r2, sl
 801862c:	4631      	mov	r1, r6
 801862e:	4628      	mov	r0, r5
 8018630:	47b8      	blx	r7
 8018632:	3001      	adds	r0, #1
 8018634:	f43f aeae 	beq.w	8018394 <_printf_float+0x9c>
 8018638:	f108 0801 	add.w	r8, r8, #1
 801863c:	e7ec      	b.n	8018618 <_printf_float+0x320>
 801863e:	4613      	mov	r3, r2
 8018640:	4631      	mov	r1, r6
 8018642:	4642      	mov	r2, r8
 8018644:	4628      	mov	r0, r5
 8018646:	47b8      	blx	r7
 8018648:	3001      	adds	r0, #1
 801864a:	d1bf      	bne.n	80185cc <_printf_float+0x2d4>
 801864c:	e6a2      	b.n	8018394 <_printf_float+0x9c>
 801864e:	2301      	movs	r3, #1
 8018650:	4631      	mov	r1, r6
 8018652:	4628      	mov	r0, r5
 8018654:	9204      	str	r2, [sp, #16]
 8018656:	47b8      	blx	r7
 8018658:	3001      	adds	r0, #1
 801865a:	f43f ae9b 	beq.w	8018394 <_printf_float+0x9c>
 801865e:	9b05      	ldr	r3, [sp, #20]
 8018660:	9a04      	ldr	r2, [sp, #16]
 8018662:	3301      	adds	r3, #1
 8018664:	9305      	str	r3, [sp, #20]
 8018666:	e7b7      	b.n	80185d8 <_printf_float+0x2e0>
 8018668:	4653      	mov	r3, sl
 801866a:	465a      	mov	r2, fp
 801866c:	4631      	mov	r1, r6
 801866e:	4628      	mov	r0, r5
 8018670:	47b8      	blx	r7
 8018672:	3001      	adds	r0, #1
 8018674:	d1be      	bne.n	80185f4 <_printf_float+0x2fc>
 8018676:	e68d      	b.n	8018394 <_printf_float+0x9c>
 8018678:	9a04      	ldr	r2, [sp, #16]
 801867a:	464b      	mov	r3, r9
 801867c:	4442      	add	r2, r8
 801867e:	4631      	mov	r1, r6
 8018680:	4628      	mov	r0, r5
 8018682:	47b8      	blx	r7
 8018684:	3001      	adds	r0, #1
 8018686:	d1c1      	bne.n	801860c <_printf_float+0x314>
 8018688:	e684      	b.n	8018394 <_printf_float+0x9c>
 801868a:	9a08      	ldr	r2, [sp, #32]
 801868c:	2a01      	cmp	r2, #1
 801868e:	dc01      	bgt.n	8018694 <_printf_float+0x39c>
 8018690:	07db      	lsls	r3, r3, #31
 8018692:	d537      	bpl.n	8018704 <_printf_float+0x40c>
 8018694:	2301      	movs	r3, #1
 8018696:	4642      	mov	r2, r8
 8018698:	4631      	mov	r1, r6
 801869a:	4628      	mov	r0, r5
 801869c:	47b8      	blx	r7
 801869e:	3001      	adds	r0, #1
 80186a0:	f43f ae78 	beq.w	8018394 <_printf_float+0x9c>
 80186a4:	4653      	mov	r3, sl
 80186a6:	465a      	mov	r2, fp
 80186a8:	4631      	mov	r1, r6
 80186aa:	4628      	mov	r0, r5
 80186ac:	47b8      	blx	r7
 80186ae:	3001      	adds	r0, #1
 80186b0:	f43f ae70 	beq.w	8018394 <_printf_float+0x9c>
 80186b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80186b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80186bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186c0:	d01b      	beq.n	80186fa <_printf_float+0x402>
 80186c2:	9b08      	ldr	r3, [sp, #32]
 80186c4:	f108 0201 	add.w	r2, r8, #1
 80186c8:	3b01      	subs	r3, #1
 80186ca:	4631      	mov	r1, r6
 80186cc:	4628      	mov	r0, r5
 80186ce:	47b8      	blx	r7
 80186d0:	3001      	adds	r0, #1
 80186d2:	d10e      	bne.n	80186f2 <_printf_float+0x3fa>
 80186d4:	e65e      	b.n	8018394 <_printf_float+0x9c>
 80186d6:	2301      	movs	r3, #1
 80186d8:	464a      	mov	r2, r9
 80186da:	4631      	mov	r1, r6
 80186dc:	4628      	mov	r0, r5
 80186de:	47b8      	blx	r7
 80186e0:	3001      	adds	r0, #1
 80186e2:	f43f ae57 	beq.w	8018394 <_printf_float+0x9c>
 80186e6:	f108 0801 	add.w	r8, r8, #1
 80186ea:	9b08      	ldr	r3, [sp, #32]
 80186ec:	3b01      	subs	r3, #1
 80186ee:	4543      	cmp	r3, r8
 80186f0:	dcf1      	bgt.n	80186d6 <_printf_float+0x3de>
 80186f2:	9b04      	ldr	r3, [sp, #16]
 80186f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80186f8:	e6db      	b.n	80184b2 <_printf_float+0x1ba>
 80186fa:	f04f 0800 	mov.w	r8, #0
 80186fe:	f104 091a 	add.w	r9, r4, #26
 8018702:	e7f2      	b.n	80186ea <_printf_float+0x3f2>
 8018704:	2301      	movs	r3, #1
 8018706:	4642      	mov	r2, r8
 8018708:	e7df      	b.n	80186ca <_printf_float+0x3d2>
 801870a:	2301      	movs	r3, #1
 801870c:	464a      	mov	r2, r9
 801870e:	4631      	mov	r1, r6
 8018710:	4628      	mov	r0, r5
 8018712:	47b8      	blx	r7
 8018714:	3001      	adds	r0, #1
 8018716:	f43f ae3d 	beq.w	8018394 <_printf_float+0x9c>
 801871a:	f108 0801 	add.w	r8, r8, #1
 801871e:	68e3      	ldr	r3, [r4, #12]
 8018720:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018722:	1a5b      	subs	r3, r3, r1
 8018724:	4543      	cmp	r3, r8
 8018726:	dcf0      	bgt.n	801870a <_printf_float+0x412>
 8018728:	e6f7      	b.n	801851a <_printf_float+0x222>
 801872a:	f04f 0800 	mov.w	r8, #0
 801872e:	f104 0919 	add.w	r9, r4, #25
 8018732:	e7f4      	b.n	801871e <_printf_float+0x426>

08018734 <_printf_common>:
 8018734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018738:	4616      	mov	r6, r2
 801873a:	4699      	mov	r9, r3
 801873c:	688a      	ldr	r2, [r1, #8]
 801873e:	690b      	ldr	r3, [r1, #16]
 8018740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018744:	4293      	cmp	r3, r2
 8018746:	bfb8      	it	lt
 8018748:	4613      	movlt	r3, r2
 801874a:	6033      	str	r3, [r6, #0]
 801874c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018750:	4607      	mov	r7, r0
 8018752:	460c      	mov	r4, r1
 8018754:	b10a      	cbz	r2, 801875a <_printf_common+0x26>
 8018756:	3301      	adds	r3, #1
 8018758:	6033      	str	r3, [r6, #0]
 801875a:	6823      	ldr	r3, [r4, #0]
 801875c:	0699      	lsls	r1, r3, #26
 801875e:	bf42      	ittt	mi
 8018760:	6833      	ldrmi	r3, [r6, #0]
 8018762:	3302      	addmi	r3, #2
 8018764:	6033      	strmi	r3, [r6, #0]
 8018766:	6825      	ldr	r5, [r4, #0]
 8018768:	f015 0506 	ands.w	r5, r5, #6
 801876c:	d106      	bne.n	801877c <_printf_common+0x48>
 801876e:	f104 0a19 	add.w	sl, r4, #25
 8018772:	68e3      	ldr	r3, [r4, #12]
 8018774:	6832      	ldr	r2, [r6, #0]
 8018776:	1a9b      	subs	r3, r3, r2
 8018778:	42ab      	cmp	r3, r5
 801877a:	dc26      	bgt.n	80187ca <_printf_common+0x96>
 801877c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018780:	1e13      	subs	r3, r2, #0
 8018782:	6822      	ldr	r2, [r4, #0]
 8018784:	bf18      	it	ne
 8018786:	2301      	movne	r3, #1
 8018788:	0692      	lsls	r2, r2, #26
 801878a:	d42b      	bmi.n	80187e4 <_printf_common+0xb0>
 801878c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018790:	4649      	mov	r1, r9
 8018792:	4638      	mov	r0, r7
 8018794:	47c0      	blx	r8
 8018796:	3001      	adds	r0, #1
 8018798:	d01e      	beq.n	80187d8 <_printf_common+0xa4>
 801879a:	6823      	ldr	r3, [r4, #0]
 801879c:	68e5      	ldr	r5, [r4, #12]
 801879e:	6832      	ldr	r2, [r6, #0]
 80187a0:	f003 0306 	and.w	r3, r3, #6
 80187a4:	2b04      	cmp	r3, #4
 80187a6:	bf08      	it	eq
 80187a8:	1aad      	subeq	r5, r5, r2
 80187aa:	68a3      	ldr	r3, [r4, #8]
 80187ac:	6922      	ldr	r2, [r4, #16]
 80187ae:	bf0c      	ite	eq
 80187b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80187b4:	2500      	movne	r5, #0
 80187b6:	4293      	cmp	r3, r2
 80187b8:	bfc4      	itt	gt
 80187ba:	1a9b      	subgt	r3, r3, r2
 80187bc:	18ed      	addgt	r5, r5, r3
 80187be:	2600      	movs	r6, #0
 80187c0:	341a      	adds	r4, #26
 80187c2:	42b5      	cmp	r5, r6
 80187c4:	d11a      	bne.n	80187fc <_printf_common+0xc8>
 80187c6:	2000      	movs	r0, #0
 80187c8:	e008      	b.n	80187dc <_printf_common+0xa8>
 80187ca:	2301      	movs	r3, #1
 80187cc:	4652      	mov	r2, sl
 80187ce:	4649      	mov	r1, r9
 80187d0:	4638      	mov	r0, r7
 80187d2:	47c0      	blx	r8
 80187d4:	3001      	adds	r0, #1
 80187d6:	d103      	bne.n	80187e0 <_printf_common+0xac>
 80187d8:	f04f 30ff 	mov.w	r0, #4294967295
 80187dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187e0:	3501      	adds	r5, #1
 80187e2:	e7c6      	b.n	8018772 <_printf_common+0x3e>
 80187e4:	18e1      	adds	r1, r4, r3
 80187e6:	1c5a      	adds	r2, r3, #1
 80187e8:	2030      	movs	r0, #48	; 0x30
 80187ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80187ee:	4422      	add	r2, r4
 80187f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80187f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80187f8:	3302      	adds	r3, #2
 80187fa:	e7c7      	b.n	801878c <_printf_common+0x58>
 80187fc:	2301      	movs	r3, #1
 80187fe:	4622      	mov	r2, r4
 8018800:	4649      	mov	r1, r9
 8018802:	4638      	mov	r0, r7
 8018804:	47c0      	blx	r8
 8018806:	3001      	adds	r0, #1
 8018808:	d0e6      	beq.n	80187d8 <_printf_common+0xa4>
 801880a:	3601      	adds	r6, #1
 801880c:	e7d9      	b.n	80187c2 <_printf_common+0x8e>
	...

08018810 <_printf_i>:
 8018810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018814:	7e0f      	ldrb	r7, [r1, #24]
 8018816:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018818:	2f78      	cmp	r7, #120	; 0x78
 801881a:	4691      	mov	r9, r2
 801881c:	4680      	mov	r8, r0
 801881e:	460c      	mov	r4, r1
 8018820:	469a      	mov	sl, r3
 8018822:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018826:	d807      	bhi.n	8018838 <_printf_i+0x28>
 8018828:	2f62      	cmp	r7, #98	; 0x62
 801882a:	d80a      	bhi.n	8018842 <_printf_i+0x32>
 801882c:	2f00      	cmp	r7, #0
 801882e:	f000 80d8 	beq.w	80189e2 <_printf_i+0x1d2>
 8018832:	2f58      	cmp	r7, #88	; 0x58
 8018834:	f000 80a3 	beq.w	801897e <_printf_i+0x16e>
 8018838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801883c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018840:	e03a      	b.n	80188b8 <_printf_i+0xa8>
 8018842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018846:	2b15      	cmp	r3, #21
 8018848:	d8f6      	bhi.n	8018838 <_printf_i+0x28>
 801884a:	a101      	add	r1, pc, #4	; (adr r1, 8018850 <_printf_i+0x40>)
 801884c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018850:	080188a9 	.word	0x080188a9
 8018854:	080188bd 	.word	0x080188bd
 8018858:	08018839 	.word	0x08018839
 801885c:	08018839 	.word	0x08018839
 8018860:	08018839 	.word	0x08018839
 8018864:	08018839 	.word	0x08018839
 8018868:	080188bd 	.word	0x080188bd
 801886c:	08018839 	.word	0x08018839
 8018870:	08018839 	.word	0x08018839
 8018874:	08018839 	.word	0x08018839
 8018878:	08018839 	.word	0x08018839
 801887c:	080189c9 	.word	0x080189c9
 8018880:	080188ed 	.word	0x080188ed
 8018884:	080189ab 	.word	0x080189ab
 8018888:	08018839 	.word	0x08018839
 801888c:	08018839 	.word	0x08018839
 8018890:	080189eb 	.word	0x080189eb
 8018894:	08018839 	.word	0x08018839
 8018898:	080188ed 	.word	0x080188ed
 801889c:	08018839 	.word	0x08018839
 80188a0:	08018839 	.word	0x08018839
 80188a4:	080189b3 	.word	0x080189b3
 80188a8:	682b      	ldr	r3, [r5, #0]
 80188aa:	1d1a      	adds	r2, r3, #4
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	602a      	str	r2, [r5, #0]
 80188b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80188b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80188b8:	2301      	movs	r3, #1
 80188ba:	e0a3      	b.n	8018a04 <_printf_i+0x1f4>
 80188bc:	6820      	ldr	r0, [r4, #0]
 80188be:	6829      	ldr	r1, [r5, #0]
 80188c0:	0606      	lsls	r6, r0, #24
 80188c2:	f101 0304 	add.w	r3, r1, #4
 80188c6:	d50a      	bpl.n	80188de <_printf_i+0xce>
 80188c8:	680e      	ldr	r6, [r1, #0]
 80188ca:	602b      	str	r3, [r5, #0]
 80188cc:	2e00      	cmp	r6, #0
 80188ce:	da03      	bge.n	80188d8 <_printf_i+0xc8>
 80188d0:	232d      	movs	r3, #45	; 0x2d
 80188d2:	4276      	negs	r6, r6
 80188d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80188d8:	485e      	ldr	r0, [pc, #376]	; (8018a54 <_printf_i+0x244>)
 80188da:	230a      	movs	r3, #10
 80188dc:	e019      	b.n	8018912 <_printf_i+0x102>
 80188de:	680e      	ldr	r6, [r1, #0]
 80188e0:	602b      	str	r3, [r5, #0]
 80188e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80188e6:	bf18      	it	ne
 80188e8:	b236      	sxthne	r6, r6
 80188ea:	e7ef      	b.n	80188cc <_printf_i+0xbc>
 80188ec:	682b      	ldr	r3, [r5, #0]
 80188ee:	6820      	ldr	r0, [r4, #0]
 80188f0:	1d19      	adds	r1, r3, #4
 80188f2:	6029      	str	r1, [r5, #0]
 80188f4:	0601      	lsls	r1, r0, #24
 80188f6:	d501      	bpl.n	80188fc <_printf_i+0xec>
 80188f8:	681e      	ldr	r6, [r3, #0]
 80188fa:	e002      	b.n	8018902 <_printf_i+0xf2>
 80188fc:	0646      	lsls	r6, r0, #25
 80188fe:	d5fb      	bpl.n	80188f8 <_printf_i+0xe8>
 8018900:	881e      	ldrh	r6, [r3, #0]
 8018902:	4854      	ldr	r0, [pc, #336]	; (8018a54 <_printf_i+0x244>)
 8018904:	2f6f      	cmp	r7, #111	; 0x6f
 8018906:	bf0c      	ite	eq
 8018908:	2308      	moveq	r3, #8
 801890a:	230a      	movne	r3, #10
 801890c:	2100      	movs	r1, #0
 801890e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018912:	6865      	ldr	r5, [r4, #4]
 8018914:	60a5      	str	r5, [r4, #8]
 8018916:	2d00      	cmp	r5, #0
 8018918:	bfa2      	ittt	ge
 801891a:	6821      	ldrge	r1, [r4, #0]
 801891c:	f021 0104 	bicge.w	r1, r1, #4
 8018920:	6021      	strge	r1, [r4, #0]
 8018922:	b90e      	cbnz	r6, 8018928 <_printf_i+0x118>
 8018924:	2d00      	cmp	r5, #0
 8018926:	d04d      	beq.n	80189c4 <_printf_i+0x1b4>
 8018928:	4615      	mov	r5, r2
 801892a:	fbb6 f1f3 	udiv	r1, r6, r3
 801892e:	fb03 6711 	mls	r7, r3, r1, r6
 8018932:	5dc7      	ldrb	r7, [r0, r7]
 8018934:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018938:	4637      	mov	r7, r6
 801893a:	42bb      	cmp	r3, r7
 801893c:	460e      	mov	r6, r1
 801893e:	d9f4      	bls.n	801892a <_printf_i+0x11a>
 8018940:	2b08      	cmp	r3, #8
 8018942:	d10b      	bne.n	801895c <_printf_i+0x14c>
 8018944:	6823      	ldr	r3, [r4, #0]
 8018946:	07de      	lsls	r6, r3, #31
 8018948:	d508      	bpl.n	801895c <_printf_i+0x14c>
 801894a:	6923      	ldr	r3, [r4, #16]
 801894c:	6861      	ldr	r1, [r4, #4]
 801894e:	4299      	cmp	r1, r3
 8018950:	bfde      	ittt	le
 8018952:	2330      	movle	r3, #48	; 0x30
 8018954:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018958:	f105 35ff 	addle.w	r5, r5, #4294967295
 801895c:	1b52      	subs	r2, r2, r5
 801895e:	6122      	str	r2, [r4, #16]
 8018960:	f8cd a000 	str.w	sl, [sp]
 8018964:	464b      	mov	r3, r9
 8018966:	aa03      	add	r2, sp, #12
 8018968:	4621      	mov	r1, r4
 801896a:	4640      	mov	r0, r8
 801896c:	f7ff fee2 	bl	8018734 <_printf_common>
 8018970:	3001      	adds	r0, #1
 8018972:	d14c      	bne.n	8018a0e <_printf_i+0x1fe>
 8018974:	f04f 30ff 	mov.w	r0, #4294967295
 8018978:	b004      	add	sp, #16
 801897a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801897e:	4835      	ldr	r0, [pc, #212]	; (8018a54 <_printf_i+0x244>)
 8018980:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018984:	6829      	ldr	r1, [r5, #0]
 8018986:	6823      	ldr	r3, [r4, #0]
 8018988:	f851 6b04 	ldr.w	r6, [r1], #4
 801898c:	6029      	str	r1, [r5, #0]
 801898e:	061d      	lsls	r5, r3, #24
 8018990:	d514      	bpl.n	80189bc <_printf_i+0x1ac>
 8018992:	07df      	lsls	r7, r3, #31
 8018994:	bf44      	itt	mi
 8018996:	f043 0320 	orrmi.w	r3, r3, #32
 801899a:	6023      	strmi	r3, [r4, #0]
 801899c:	b91e      	cbnz	r6, 80189a6 <_printf_i+0x196>
 801899e:	6823      	ldr	r3, [r4, #0]
 80189a0:	f023 0320 	bic.w	r3, r3, #32
 80189a4:	6023      	str	r3, [r4, #0]
 80189a6:	2310      	movs	r3, #16
 80189a8:	e7b0      	b.n	801890c <_printf_i+0xfc>
 80189aa:	6823      	ldr	r3, [r4, #0]
 80189ac:	f043 0320 	orr.w	r3, r3, #32
 80189b0:	6023      	str	r3, [r4, #0]
 80189b2:	2378      	movs	r3, #120	; 0x78
 80189b4:	4828      	ldr	r0, [pc, #160]	; (8018a58 <_printf_i+0x248>)
 80189b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80189ba:	e7e3      	b.n	8018984 <_printf_i+0x174>
 80189bc:	0659      	lsls	r1, r3, #25
 80189be:	bf48      	it	mi
 80189c0:	b2b6      	uxthmi	r6, r6
 80189c2:	e7e6      	b.n	8018992 <_printf_i+0x182>
 80189c4:	4615      	mov	r5, r2
 80189c6:	e7bb      	b.n	8018940 <_printf_i+0x130>
 80189c8:	682b      	ldr	r3, [r5, #0]
 80189ca:	6826      	ldr	r6, [r4, #0]
 80189cc:	6961      	ldr	r1, [r4, #20]
 80189ce:	1d18      	adds	r0, r3, #4
 80189d0:	6028      	str	r0, [r5, #0]
 80189d2:	0635      	lsls	r5, r6, #24
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	d501      	bpl.n	80189dc <_printf_i+0x1cc>
 80189d8:	6019      	str	r1, [r3, #0]
 80189da:	e002      	b.n	80189e2 <_printf_i+0x1d2>
 80189dc:	0670      	lsls	r0, r6, #25
 80189de:	d5fb      	bpl.n	80189d8 <_printf_i+0x1c8>
 80189e0:	8019      	strh	r1, [r3, #0]
 80189e2:	2300      	movs	r3, #0
 80189e4:	6123      	str	r3, [r4, #16]
 80189e6:	4615      	mov	r5, r2
 80189e8:	e7ba      	b.n	8018960 <_printf_i+0x150>
 80189ea:	682b      	ldr	r3, [r5, #0]
 80189ec:	1d1a      	adds	r2, r3, #4
 80189ee:	602a      	str	r2, [r5, #0]
 80189f0:	681d      	ldr	r5, [r3, #0]
 80189f2:	6862      	ldr	r2, [r4, #4]
 80189f4:	2100      	movs	r1, #0
 80189f6:	4628      	mov	r0, r5
 80189f8:	f7e7 fc92 	bl	8000320 <memchr>
 80189fc:	b108      	cbz	r0, 8018a02 <_printf_i+0x1f2>
 80189fe:	1b40      	subs	r0, r0, r5
 8018a00:	6060      	str	r0, [r4, #4]
 8018a02:	6863      	ldr	r3, [r4, #4]
 8018a04:	6123      	str	r3, [r4, #16]
 8018a06:	2300      	movs	r3, #0
 8018a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018a0c:	e7a8      	b.n	8018960 <_printf_i+0x150>
 8018a0e:	6923      	ldr	r3, [r4, #16]
 8018a10:	462a      	mov	r2, r5
 8018a12:	4649      	mov	r1, r9
 8018a14:	4640      	mov	r0, r8
 8018a16:	47d0      	blx	sl
 8018a18:	3001      	adds	r0, #1
 8018a1a:	d0ab      	beq.n	8018974 <_printf_i+0x164>
 8018a1c:	6823      	ldr	r3, [r4, #0]
 8018a1e:	079b      	lsls	r3, r3, #30
 8018a20:	d413      	bmi.n	8018a4a <_printf_i+0x23a>
 8018a22:	68e0      	ldr	r0, [r4, #12]
 8018a24:	9b03      	ldr	r3, [sp, #12]
 8018a26:	4298      	cmp	r0, r3
 8018a28:	bfb8      	it	lt
 8018a2a:	4618      	movlt	r0, r3
 8018a2c:	e7a4      	b.n	8018978 <_printf_i+0x168>
 8018a2e:	2301      	movs	r3, #1
 8018a30:	4632      	mov	r2, r6
 8018a32:	4649      	mov	r1, r9
 8018a34:	4640      	mov	r0, r8
 8018a36:	47d0      	blx	sl
 8018a38:	3001      	adds	r0, #1
 8018a3a:	d09b      	beq.n	8018974 <_printf_i+0x164>
 8018a3c:	3501      	adds	r5, #1
 8018a3e:	68e3      	ldr	r3, [r4, #12]
 8018a40:	9903      	ldr	r1, [sp, #12]
 8018a42:	1a5b      	subs	r3, r3, r1
 8018a44:	42ab      	cmp	r3, r5
 8018a46:	dcf2      	bgt.n	8018a2e <_printf_i+0x21e>
 8018a48:	e7eb      	b.n	8018a22 <_printf_i+0x212>
 8018a4a:	2500      	movs	r5, #0
 8018a4c:	f104 0619 	add.w	r6, r4, #25
 8018a50:	e7f5      	b.n	8018a3e <_printf_i+0x22e>
 8018a52:	bf00      	nop
 8018a54:	0801ce4e 	.word	0x0801ce4e
 8018a58:	0801ce5f 	.word	0x0801ce5f

08018a5c <_scanf_float>:
 8018a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a60:	b087      	sub	sp, #28
 8018a62:	4617      	mov	r7, r2
 8018a64:	9303      	str	r3, [sp, #12]
 8018a66:	688b      	ldr	r3, [r1, #8]
 8018a68:	1e5a      	subs	r2, r3, #1
 8018a6a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8018a6e:	bf83      	ittte	hi
 8018a70:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018a74:	195b      	addhi	r3, r3, r5
 8018a76:	9302      	strhi	r3, [sp, #8]
 8018a78:	2300      	movls	r3, #0
 8018a7a:	bf86      	itte	hi
 8018a7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018a80:	608b      	strhi	r3, [r1, #8]
 8018a82:	9302      	strls	r3, [sp, #8]
 8018a84:	680b      	ldr	r3, [r1, #0]
 8018a86:	468b      	mov	fp, r1
 8018a88:	2500      	movs	r5, #0
 8018a8a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8018a8e:	f84b 3b1c 	str.w	r3, [fp], #28
 8018a92:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8018a96:	4680      	mov	r8, r0
 8018a98:	460c      	mov	r4, r1
 8018a9a:	465e      	mov	r6, fp
 8018a9c:	46aa      	mov	sl, r5
 8018a9e:	46a9      	mov	r9, r5
 8018aa0:	9501      	str	r5, [sp, #4]
 8018aa2:	68a2      	ldr	r2, [r4, #8]
 8018aa4:	b152      	cbz	r2, 8018abc <_scanf_float+0x60>
 8018aa6:	683b      	ldr	r3, [r7, #0]
 8018aa8:	781b      	ldrb	r3, [r3, #0]
 8018aaa:	2b4e      	cmp	r3, #78	; 0x4e
 8018aac:	d864      	bhi.n	8018b78 <_scanf_float+0x11c>
 8018aae:	2b40      	cmp	r3, #64	; 0x40
 8018ab0:	d83c      	bhi.n	8018b2c <_scanf_float+0xd0>
 8018ab2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8018ab6:	b2c8      	uxtb	r0, r1
 8018ab8:	280e      	cmp	r0, #14
 8018aba:	d93a      	bls.n	8018b32 <_scanf_float+0xd6>
 8018abc:	f1b9 0f00 	cmp.w	r9, #0
 8018ac0:	d003      	beq.n	8018aca <_scanf_float+0x6e>
 8018ac2:	6823      	ldr	r3, [r4, #0]
 8018ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018ac8:	6023      	str	r3, [r4, #0]
 8018aca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018ace:	f1ba 0f01 	cmp.w	sl, #1
 8018ad2:	f200 8113 	bhi.w	8018cfc <_scanf_float+0x2a0>
 8018ad6:	455e      	cmp	r6, fp
 8018ad8:	f200 8105 	bhi.w	8018ce6 <_scanf_float+0x28a>
 8018adc:	2501      	movs	r5, #1
 8018ade:	4628      	mov	r0, r5
 8018ae0:	b007      	add	sp, #28
 8018ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ae6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8018aea:	2a0d      	cmp	r2, #13
 8018aec:	d8e6      	bhi.n	8018abc <_scanf_float+0x60>
 8018aee:	a101      	add	r1, pc, #4	; (adr r1, 8018af4 <_scanf_float+0x98>)
 8018af0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018af4:	08018c33 	.word	0x08018c33
 8018af8:	08018abd 	.word	0x08018abd
 8018afc:	08018abd 	.word	0x08018abd
 8018b00:	08018abd 	.word	0x08018abd
 8018b04:	08018c93 	.word	0x08018c93
 8018b08:	08018c6b 	.word	0x08018c6b
 8018b0c:	08018abd 	.word	0x08018abd
 8018b10:	08018abd 	.word	0x08018abd
 8018b14:	08018c41 	.word	0x08018c41
 8018b18:	08018abd 	.word	0x08018abd
 8018b1c:	08018abd 	.word	0x08018abd
 8018b20:	08018abd 	.word	0x08018abd
 8018b24:	08018abd 	.word	0x08018abd
 8018b28:	08018bf9 	.word	0x08018bf9
 8018b2c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8018b30:	e7db      	b.n	8018aea <_scanf_float+0x8e>
 8018b32:	290e      	cmp	r1, #14
 8018b34:	d8c2      	bhi.n	8018abc <_scanf_float+0x60>
 8018b36:	a001      	add	r0, pc, #4	; (adr r0, 8018b3c <_scanf_float+0xe0>)
 8018b38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8018b3c:	08018beb 	.word	0x08018beb
 8018b40:	08018abd 	.word	0x08018abd
 8018b44:	08018beb 	.word	0x08018beb
 8018b48:	08018c7f 	.word	0x08018c7f
 8018b4c:	08018abd 	.word	0x08018abd
 8018b50:	08018b99 	.word	0x08018b99
 8018b54:	08018bd5 	.word	0x08018bd5
 8018b58:	08018bd5 	.word	0x08018bd5
 8018b5c:	08018bd5 	.word	0x08018bd5
 8018b60:	08018bd5 	.word	0x08018bd5
 8018b64:	08018bd5 	.word	0x08018bd5
 8018b68:	08018bd5 	.word	0x08018bd5
 8018b6c:	08018bd5 	.word	0x08018bd5
 8018b70:	08018bd5 	.word	0x08018bd5
 8018b74:	08018bd5 	.word	0x08018bd5
 8018b78:	2b6e      	cmp	r3, #110	; 0x6e
 8018b7a:	d809      	bhi.n	8018b90 <_scanf_float+0x134>
 8018b7c:	2b60      	cmp	r3, #96	; 0x60
 8018b7e:	d8b2      	bhi.n	8018ae6 <_scanf_float+0x8a>
 8018b80:	2b54      	cmp	r3, #84	; 0x54
 8018b82:	d077      	beq.n	8018c74 <_scanf_float+0x218>
 8018b84:	2b59      	cmp	r3, #89	; 0x59
 8018b86:	d199      	bne.n	8018abc <_scanf_float+0x60>
 8018b88:	2d07      	cmp	r5, #7
 8018b8a:	d197      	bne.n	8018abc <_scanf_float+0x60>
 8018b8c:	2508      	movs	r5, #8
 8018b8e:	e029      	b.n	8018be4 <_scanf_float+0x188>
 8018b90:	2b74      	cmp	r3, #116	; 0x74
 8018b92:	d06f      	beq.n	8018c74 <_scanf_float+0x218>
 8018b94:	2b79      	cmp	r3, #121	; 0x79
 8018b96:	e7f6      	b.n	8018b86 <_scanf_float+0x12a>
 8018b98:	6821      	ldr	r1, [r4, #0]
 8018b9a:	05c8      	lsls	r0, r1, #23
 8018b9c:	d51a      	bpl.n	8018bd4 <_scanf_float+0x178>
 8018b9e:	9b02      	ldr	r3, [sp, #8]
 8018ba0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8018ba4:	6021      	str	r1, [r4, #0]
 8018ba6:	f109 0901 	add.w	r9, r9, #1
 8018baa:	b11b      	cbz	r3, 8018bb4 <_scanf_float+0x158>
 8018bac:	3b01      	subs	r3, #1
 8018bae:	3201      	adds	r2, #1
 8018bb0:	9302      	str	r3, [sp, #8]
 8018bb2:	60a2      	str	r2, [r4, #8]
 8018bb4:	68a3      	ldr	r3, [r4, #8]
 8018bb6:	3b01      	subs	r3, #1
 8018bb8:	60a3      	str	r3, [r4, #8]
 8018bba:	6923      	ldr	r3, [r4, #16]
 8018bbc:	3301      	adds	r3, #1
 8018bbe:	6123      	str	r3, [r4, #16]
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	3b01      	subs	r3, #1
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	607b      	str	r3, [r7, #4]
 8018bc8:	f340 8084 	ble.w	8018cd4 <_scanf_float+0x278>
 8018bcc:	683b      	ldr	r3, [r7, #0]
 8018bce:	3301      	adds	r3, #1
 8018bd0:	603b      	str	r3, [r7, #0]
 8018bd2:	e766      	b.n	8018aa2 <_scanf_float+0x46>
 8018bd4:	eb1a 0f05 	cmn.w	sl, r5
 8018bd8:	f47f af70 	bne.w	8018abc <_scanf_float+0x60>
 8018bdc:	6822      	ldr	r2, [r4, #0]
 8018bde:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8018be2:	6022      	str	r2, [r4, #0]
 8018be4:	f806 3b01 	strb.w	r3, [r6], #1
 8018be8:	e7e4      	b.n	8018bb4 <_scanf_float+0x158>
 8018bea:	6822      	ldr	r2, [r4, #0]
 8018bec:	0610      	lsls	r0, r2, #24
 8018bee:	f57f af65 	bpl.w	8018abc <_scanf_float+0x60>
 8018bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018bf6:	e7f4      	b.n	8018be2 <_scanf_float+0x186>
 8018bf8:	f1ba 0f00 	cmp.w	sl, #0
 8018bfc:	d10e      	bne.n	8018c1c <_scanf_float+0x1c0>
 8018bfe:	f1b9 0f00 	cmp.w	r9, #0
 8018c02:	d10e      	bne.n	8018c22 <_scanf_float+0x1c6>
 8018c04:	6822      	ldr	r2, [r4, #0]
 8018c06:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8018c0a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8018c0e:	d108      	bne.n	8018c22 <_scanf_float+0x1c6>
 8018c10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018c14:	6022      	str	r2, [r4, #0]
 8018c16:	f04f 0a01 	mov.w	sl, #1
 8018c1a:	e7e3      	b.n	8018be4 <_scanf_float+0x188>
 8018c1c:	f1ba 0f02 	cmp.w	sl, #2
 8018c20:	d055      	beq.n	8018cce <_scanf_float+0x272>
 8018c22:	2d01      	cmp	r5, #1
 8018c24:	d002      	beq.n	8018c2c <_scanf_float+0x1d0>
 8018c26:	2d04      	cmp	r5, #4
 8018c28:	f47f af48 	bne.w	8018abc <_scanf_float+0x60>
 8018c2c:	3501      	adds	r5, #1
 8018c2e:	b2ed      	uxtb	r5, r5
 8018c30:	e7d8      	b.n	8018be4 <_scanf_float+0x188>
 8018c32:	f1ba 0f01 	cmp.w	sl, #1
 8018c36:	f47f af41 	bne.w	8018abc <_scanf_float+0x60>
 8018c3a:	f04f 0a02 	mov.w	sl, #2
 8018c3e:	e7d1      	b.n	8018be4 <_scanf_float+0x188>
 8018c40:	b97d      	cbnz	r5, 8018c62 <_scanf_float+0x206>
 8018c42:	f1b9 0f00 	cmp.w	r9, #0
 8018c46:	f47f af3c 	bne.w	8018ac2 <_scanf_float+0x66>
 8018c4a:	6822      	ldr	r2, [r4, #0]
 8018c4c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8018c50:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8018c54:	f47f af39 	bne.w	8018aca <_scanf_float+0x6e>
 8018c58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018c5c:	6022      	str	r2, [r4, #0]
 8018c5e:	2501      	movs	r5, #1
 8018c60:	e7c0      	b.n	8018be4 <_scanf_float+0x188>
 8018c62:	2d03      	cmp	r5, #3
 8018c64:	d0e2      	beq.n	8018c2c <_scanf_float+0x1d0>
 8018c66:	2d05      	cmp	r5, #5
 8018c68:	e7de      	b.n	8018c28 <_scanf_float+0x1cc>
 8018c6a:	2d02      	cmp	r5, #2
 8018c6c:	f47f af26 	bne.w	8018abc <_scanf_float+0x60>
 8018c70:	2503      	movs	r5, #3
 8018c72:	e7b7      	b.n	8018be4 <_scanf_float+0x188>
 8018c74:	2d06      	cmp	r5, #6
 8018c76:	f47f af21 	bne.w	8018abc <_scanf_float+0x60>
 8018c7a:	2507      	movs	r5, #7
 8018c7c:	e7b2      	b.n	8018be4 <_scanf_float+0x188>
 8018c7e:	6822      	ldr	r2, [r4, #0]
 8018c80:	0591      	lsls	r1, r2, #22
 8018c82:	f57f af1b 	bpl.w	8018abc <_scanf_float+0x60>
 8018c86:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8018c8a:	6022      	str	r2, [r4, #0]
 8018c8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018c90:	e7a8      	b.n	8018be4 <_scanf_float+0x188>
 8018c92:	6822      	ldr	r2, [r4, #0]
 8018c94:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8018c98:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8018c9c:	d006      	beq.n	8018cac <_scanf_float+0x250>
 8018c9e:	0550      	lsls	r0, r2, #21
 8018ca0:	f57f af0c 	bpl.w	8018abc <_scanf_float+0x60>
 8018ca4:	f1b9 0f00 	cmp.w	r9, #0
 8018ca8:	f43f af0f 	beq.w	8018aca <_scanf_float+0x6e>
 8018cac:	0591      	lsls	r1, r2, #22
 8018cae:	bf58      	it	pl
 8018cb0:	9901      	ldrpl	r1, [sp, #4]
 8018cb2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018cb6:	bf58      	it	pl
 8018cb8:	eba9 0101 	subpl.w	r1, r9, r1
 8018cbc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8018cc0:	bf58      	it	pl
 8018cc2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8018cc6:	6022      	str	r2, [r4, #0]
 8018cc8:	f04f 0900 	mov.w	r9, #0
 8018ccc:	e78a      	b.n	8018be4 <_scanf_float+0x188>
 8018cce:	f04f 0a03 	mov.w	sl, #3
 8018cd2:	e787      	b.n	8018be4 <_scanf_float+0x188>
 8018cd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018cd8:	4639      	mov	r1, r7
 8018cda:	4640      	mov	r0, r8
 8018cdc:	4798      	blx	r3
 8018cde:	2800      	cmp	r0, #0
 8018ce0:	f43f aedf 	beq.w	8018aa2 <_scanf_float+0x46>
 8018ce4:	e6ea      	b.n	8018abc <_scanf_float+0x60>
 8018ce6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018cea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018cee:	463a      	mov	r2, r7
 8018cf0:	4640      	mov	r0, r8
 8018cf2:	4798      	blx	r3
 8018cf4:	6923      	ldr	r3, [r4, #16]
 8018cf6:	3b01      	subs	r3, #1
 8018cf8:	6123      	str	r3, [r4, #16]
 8018cfa:	e6ec      	b.n	8018ad6 <_scanf_float+0x7a>
 8018cfc:	1e6b      	subs	r3, r5, #1
 8018cfe:	2b06      	cmp	r3, #6
 8018d00:	d825      	bhi.n	8018d4e <_scanf_float+0x2f2>
 8018d02:	2d02      	cmp	r5, #2
 8018d04:	d836      	bhi.n	8018d74 <_scanf_float+0x318>
 8018d06:	455e      	cmp	r6, fp
 8018d08:	f67f aee8 	bls.w	8018adc <_scanf_float+0x80>
 8018d0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018d10:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018d14:	463a      	mov	r2, r7
 8018d16:	4640      	mov	r0, r8
 8018d18:	4798      	blx	r3
 8018d1a:	6923      	ldr	r3, [r4, #16]
 8018d1c:	3b01      	subs	r3, #1
 8018d1e:	6123      	str	r3, [r4, #16]
 8018d20:	e7f1      	b.n	8018d06 <_scanf_float+0x2aa>
 8018d22:	9802      	ldr	r0, [sp, #8]
 8018d24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018d28:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8018d2c:	9002      	str	r0, [sp, #8]
 8018d2e:	463a      	mov	r2, r7
 8018d30:	4640      	mov	r0, r8
 8018d32:	4798      	blx	r3
 8018d34:	6923      	ldr	r3, [r4, #16]
 8018d36:	3b01      	subs	r3, #1
 8018d38:	6123      	str	r3, [r4, #16]
 8018d3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018d3e:	fa5f fa8a 	uxtb.w	sl, sl
 8018d42:	f1ba 0f02 	cmp.w	sl, #2
 8018d46:	d1ec      	bne.n	8018d22 <_scanf_float+0x2c6>
 8018d48:	3d03      	subs	r5, #3
 8018d4a:	b2ed      	uxtb	r5, r5
 8018d4c:	1b76      	subs	r6, r6, r5
 8018d4e:	6823      	ldr	r3, [r4, #0]
 8018d50:	05da      	lsls	r2, r3, #23
 8018d52:	d52f      	bpl.n	8018db4 <_scanf_float+0x358>
 8018d54:	055b      	lsls	r3, r3, #21
 8018d56:	d510      	bpl.n	8018d7a <_scanf_float+0x31e>
 8018d58:	455e      	cmp	r6, fp
 8018d5a:	f67f aebf 	bls.w	8018adc <_scanf_float+0x80>
 8018d5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018d62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018d66:	463a      	mov	r2, r7
 8018d68:	4640      	mov	r0, r8
 8018d6a:	4798      	blx	r3
 8018d6c:	6923      	ldr	r3, [r4, #16]
 8018d6e:	3b01      	subs	r3, #1
 8018d70:	6123      	str	r3, [r4, #16]
 8018d72:	e7f1      	b.n	8018d58 <_scanf_float+0x2fc>
 8018d74:	46aa      	mov	sl, r5
 8018d76:	9602      	str	r6, [sp, #8]
 8018d78:	e7df      	b.n	8018d3a <_scanf_float+0x2de>
 8018d7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8018d7e:	6923      	ldr	r3, [r4, #16]
 8018d80:	2965      	cmp	r1, #101	; 0x65
 8018d82:	f103 33ff 	add.w	r3, r3, #4294967295
 8018d86:	f106 35ff 	add.w	r5, r6, #4294967295
 8018d8a:	6123      	str	r3, [r4, #16]
 8018d8c:	d00c      	beq.n	8018da8 <_scanf_float+0x34c>
 8018d8e:	2945      	cmp	r1, #69	; 0x45
 8018d90:	d00a      	beq.n	8018da8 <_scanf_float+0x34c>
 8018d92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018d96:	463a      	mov	r2, r7
 8018d98:	4640      	mov	r0, r8
 8018d9a:	4798      	blx	r3
 8018d9c:	6923      	ldr	r3, [r4, #16]
 8018d9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8018da2:	3b01      	subs	r3, #1
 8018da4:	1eb5      	subs	r5, r6, #2
 8018da6:	6123      	str	r3, [r4, #16]
 8018da8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018dac:	463a      	mov	r2, r7
 8018dae:	4640      	mov	r0, r8
 8018db0:	4798      	blx	r3
 8018db2:	462e      	mov	r6, r5
 8018db4:	6825      	ldr	r5, [r4, #0]
 8018db6:	f015 0510 	ands.w	r5, r5, #16
 8018dba:	d14e      	bne.n	8018e5a <_scanf_float+0x3fe>
 8018dbc:	7035      	strb	r5, [r6, #0]
 8018dbe:	6823      	ldr	r3, [r4, #0]
 8018dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8018dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018dc8:	d119      	bne.n	8018dfe <_scanf_float+0x3a2>
 8018dca:	9b01      	ldr	r3, [sp, #4]
 8018dcc:	454b      	cmp	r3, r9
 8018dce:	eba3 0209 	sub.w	r2, r3, r9
 8018dd2:	d121      	bne.n	8018e18 <_scanf_float+0x3bc>
 8018dd4:	2200      	movs	r2, #0
 8018dd6:	4659      	mov	r1, fp
 8018dd8:	4640      	mov	r0, r8
 8018dda:	f000 fe7f 	bl	8019adc <_strtod_r>
 8018dde:	6822      	ldr	r2, [r4, #0]
 8018de0:	9b03      	ldr	r3, [sp, #12]
 8018de2:	f012 0f02 	tst.w	r2, #2
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	d021      	beq.n	8018e2e <_scanf_float+0x3d2>
 8018dea:	9903      	ldr	r1, [sp, #12]
 8018dec:	1d1a      	adds	r2, r3, #4
 8018dee:	600a      	str	r2, [r1, #0]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	ed83 0b00 	vstr	d0, [r3]
 8018df6:	68e3      	ldr	r3, [r4, #12]
 8018df8:	3301      	adds	r3, #1
 8018dfa:	60e3      	str	r3, [r4, #12]
 8018dfc:	e66f      	b.n	8018ade <_scanf_float+0x82>
 8018dfe:	9b04      	ldr	r3, [sp, #16]
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d0e7      	beq.n	8018dd4 <_scanf_float+0x378>
 8018e04:	9905      	ldr	r1, [sp, #20]
 8018e06:	230a      	movs	r3, #10
 8018e08:	462a      	mov	r2, r5
 8018e0a:	3101      	adds	r1, #1
 8018e0c:	4640      	mov	r0, r8
 8018e0e:	f000 feed 	bl	8019bec <_strtol_r>
 8018e12:	9b04      	ldr	r3, [sp, #16]
 8018e14:	9e05      	ldr	r6, [sp, #20]
 8018e16:	1ac2      	subs	r2, r0, r3
 8018e18:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8018e1c:	429e      	cmp	r6, r3
 8018e1e:	bf28      	it	cs
 8018e20:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8018e24:	490e      	ldr	r1, [pc, #56]	; (8018e60 <_scanf_float+0x404>)
 8018e26:	4630      	mov	r0, r6
 8018e28:	f000 f824 	bl	8018e74 <siprintf>
 8018e2c:	e7d2      	b.n	8018dd4 <_scanf_float+0x378>
 8018e2e:	9903      	ldr	r1, [sp, #12]
 8018e30:	f012 0f04 	tst.w	r2, #4
 8018e34:	f103 0204 	add.w	r2, r3, #4
 8018e38:	600a      	str	r2, [r1, #0]
 8018e3a:	d1d9      	bne.n	8018df0 <_scanf_float+0x394>
 8018e3c:	eeb4 0b40 	vcmp.f64	d0, d0
 8018e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e44:	681e      	ldr	r6, [r3, #0]
 8018e46:	d705      	bvc.n	8018e54 <_scanf_float+0x3f8>
 8018e48:	4806      	ldr	r0, [pc, #24]	; (8018e64 <_scanf_float+0x408>)
 8018e4a:	f000 f80d 	bl	8018e68 <nanf>
 8018e4e:	ed86 0a00 	vstr	s0, [r6]
 8018e52:	e7d0      	b.n	8018df6 <_scanf_float+0x39a>
 8018e54:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018e58:	e7f9      	b.n	8018e4e <_scanf_float+0x3f2>
 8018e5a:	2500      	movs	r5, #0
 8018e5c:	e63f      	b.n	8018ade <_scanf_float+0x82>
 8018e5e:	bf00      	nop
 8018e60:	0801ce70 	.word	0x0801ce70
 8018e64:	0801d278 	.word	0x0801d278

08018e68 <nanf>:
 8018e68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018e70 <nanf+0x8>
 8018e6c:	4770      	bx	lr
 8018e6e:	bf00      	nop
 8018e70:	7fc00000 	.word	0x7fc00000

08018e74 <siprintf>:
 8018e74:	b40e      	push	{r1, r2, r3}
 8018e76:	b500      	push	{lr}
 8018e78:	b09c      	sub	sp, #112	; 0x70
 8018e7a:	ab1d      	add	r3, sp, #116	; 0x74
 8018e7c:	9002      	str	r0, [sp, #8]
 8018e7e:	9006      	str	r0, [sp, #24]
 8018e80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018e84:	4809      	ldr	r0, [pc, #36]	; (8018eac <siprintf+0x38>)
 8018e86:	9107      	str	r1, [sp, #28]
 8018e88:	9104      	str	r1, [sp, #16]
 8018e8a:	4909      	ldr	r1, [pc, #36]	; (8018eb0 <siprintf+0x3c>)
 8018e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e90:	9105      	str	r1, [sp, #20]
 8018e92:	6800      	ldr	r0, [r0, #0]
 8018e94:	9301      	str	r3, [sp, #4]
 8018e96:	a902      	add	r1, sp, #8
 8018e98:	f002 fe78 	bl	801bb8c <_svfiprintf_r>
 8018e9c:	9b02      	ldr	r3, [sp, #8]
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	701a      	strb	r2, [r3, #0]
 8018ea2:	b01c      	add	sp, #112	; 0x70
 8018ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018ea8:	b003      	add	sp, #12
 8018eaa:	4770      	bx	lr
 8018eac:	24000100 	.word	0x24000100
 8018eb0:	ffff0208 	.word	0xffff0208

08018eb4 <__sread>:
 8018eb4:	b510      	push	{r4, lr}
 8018eb6:	460c      	mov	r4, r1
 8018eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ebc:	f002 ff66 	bl	801bd8c <_read_r>
 8018ec0:	2800      	cmp	r0, #0
 8018ec2:	bfab      	itete	ge
 8018ec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8018ec8:	181b      	addge	r3, r3, r0
 8018eca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018ece:	bfac      	ite	ge
 8018ed0:	6563      	strge	r3, [r4, #84]	; 0x54
 8018ed2:	81a3      	strhlt	r3, [r4, #12]
 8018ed4:	bd10      	pop	{r4, pc}

08018ed6 <__swrite>:
 8018ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018eda:	461f      	mov	r7, r3
 8018edc:	898b      	ldrh	r3, [r1, #12]
 8018ede:	05db      	lsls	r3, r3, #23
 8018ee0:	4605      	mov	r5, r0
 8018ee2:	460c      	mov	r4, r1
 8018ee4:	4616      	mov	r6, r2
 8018ee6:	d505      	bpl.n	8018ef4 <__swrite+0x1e>
 8018ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018eec:	2302      	movs	r3, #2
 8018eee:	2200      	movs	r2, #0
 8018ef0:	f002 f810 	bl	801af14 <_lseek_r>
 8018ef4:	89a3      	ldrh	r3, [r4, #12]
 8018ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018efa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018efe:	81a3      	strh	r3, [r4, #12]
 8018f00:	4632      	mov	r2, r6
 8018f02:	463b      	mov	r3, r7
 8018f04:	4628      	mov	r0, r5
 8018f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f0a:	f000 be71 	b.w	8019bf0 <_write_r>

08018f0e <__sseek>:
 8018f0e:	b510      	push	{r4, lr}
 8018f10:	460c      	mov	r4, r1
 8018f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f16:	f001 fffd 	bl	801af14 <_lseek_r>
 8018f1a:	1c43      	adds	r3, r0, #1
 8018f1c:	89a3      	ldrh	r3, [r4, #12]
 8018f1e:	bf15      	itete	ne
 8018f20:	6560      	strne	r0, [r4, #84]	; 0x54
 8018f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018f2a:	81a3      	strheq	r3, [r4, #12]
 8018f2c:	bf18      	it	ne
 8018f2e:	81a3      	strhne	r3, [r4, #12]
 8018f30:	bd10      	pop	{r4, pc}

08018f32 <__sclose>:
 8018f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f36:	f000 be6d 	b.w	8019c14 <_close_r>

08018f3a <sulp>:
 8018f3a:	b570      	push	{r4, r5, r6, lr}
 8018f3c:	4604      	mov	r4, r0
 8018f3e:	460d      	mov	r5, r1
 8018f40:	4616      	mov	r6, r2
 8018f42:	ec45 4b10 	vmov	d0, r4, r5
 8018f46:	f002 fb83 	bl	801b650 <__ulp>
 8018f4a:	b17e      	cbz	r6, 8018f6c <sulp+0x32>
 8018f4c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018f50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	dd09      	ble.n	8018f6c <sulp+0x32>
 8018f58:	051b      	lsls	r3, r3, #20
 8018f5a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8018f5e:	2000      	movs	r0, #0
 8018f60:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8018f64:	ec41 0b17 	vmov	d7, r0, r1
 8018f68:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018f6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018f70 <_strtod_l>:
 8018f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f74:	ed2d 8b0e 	vpush	{d8-d14}
 8018f78:	b097      	sub	sp, #92	; 0x5c
 8018f7a:	461f      	mov	r7, r3
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	9312      	str	r3, [sp, #72]	; 0x48
 8018f80:	4ba1      	ldr	r3, [pc, #644]	; (8019208 <_strtod_l+0x298>)
 8018f82:	920d      	str	r2, [sp, #52]	; 0x34
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	9307      	str	r3, [sp, #28]
 8018f88:	4604      	mov	r4, r0
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	468b      	mov	fp, r1
 8018f8e:	f7e7 f9bf 	bl	8000310 <strlen>
 8018f92:	f04f 0800 	mov.w	r8, #0
 8018f96:	4605      	mov	r5, r0
 8018f98:	f04f 0900 	mov.w	r9, #0
 8018f9c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8018fa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018fa2:	7813      	ldrb	r3, [r2, #0]
 8018fa4:	2b2b      	cmp	r3, #43	; 0x2b
 8018fa6:	d04d      	beq.n	8019044 <_strtod_l+0xd4>
 8018fa8:	d83a      	bhi.n	8019020 <_strtod_l+0xb0>
 8018faa:	2b0d      	cmp	r3, #13
 8018fac:	d833      	bhi.n	8019016 <_strtod_l+0xa6>
 8018fae:	2b08      	cmp	r3, #8
 8018fb0:	d833      	bhi.n	801901a <_strtod_l+0xaa>
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d03d      	beq.n	8019032 <_strtod_l+0xc2>
 8018fb6:	2300      	movs	r3, #0
 8018fb8:	9308      	str	r3, [sp, #32]
 8018fba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018fbc:	7833      	ldrb	r3, [r6, #0]
 8018fbe:	2b30      	cmp	r3, #48	; 0x30
 8018fc0:	f040 80b0 	bne.w	8019124 <_strtod_l+0x1b4>
 8018fc4:	7873      	ldrb	r3, [r6, #1]
 8018fc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018fca:	2b58      	cmp	r3, #88	; 0x58
 8018fcc:	d167      	bne.n	801909e <_strtod_l+0x12e>
 8018fce:	9b08      	ldr	r3, [sp, #32]
 8018fd0:	9301      	str	r3, [sp, #4]
 8018fd2:	ab12      	add	r3, sp, #72	; 0x48
 8018fd4:	9702      	str	r7, [sp, #8]
 8018fd6:	9300      	str	r3, [sp, #0]
 8018fd8:	4a8c      	ldr	r2, [pc, #560]	; (801920c <_strtod_l+0x29c>)
 8018fda:	ab13      	add	r3, sp, #76	; 0x4c
 8018fdc:	a911      	add	r1, sp, #68	; 0x44
 8018fde:	4620      	mov	r0, r4
 8018fe0:	f001 fc8c 	bl	801a8fc <__gethex>
 8018fe4:	f010 0507 	ands.w	r5, r0, #7
 8018fe8:	4607      	mov	r7, r0
 8018fea:	d005      	beq.n	8018ff8 <_strtod_l+0x88>
 8018fec:	2d06      	cmp	r5, #6
 8018fee:	d12b      	bne.n	8019048 <_strtod_l+0xd8>
 8018ff0:	3601      	adds	r6, #1
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	9611      	str	r6, [sp, #68]	; 0x44
 8018ff6:	9308      	str	r3, [sp, #32]
 8018ff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	f040 854e 	bne.w	8019a9c <_strtod_l+0xb2c>
 8019000:	9b08      	ldr	r3, [sp, #32]
 8019002:	b1e3      	cbz	r3, 801903e <_strtod_l+0xce>
 8019004:	ec49 8b17 	vmov	d7, r8, r9
 8019008:	eeb1 0b47 	vneg.f64	d0, d7
 801900c:	b017      	add	sp, #92	; 0x5c
 801900e:	ecbd 8b0e 	vpop	{d8-d14}
 8019012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019016:	2b20      	cmp	r3, #32
 8019018:	d1cd      	bne.n	8018fb6 <_strtod_l+0x46>
 801901a:	3201      	adds	r2, #1
 801901c:	9211      	str	r2, [sp, #68]	; 0x44
 801901e:	e7bf      	b.n	8018fa0 <_strtod_l+0x30>
 8019020:	2b2d      	cmp	r3, #45	; 0x2d
 8019022:	d1c8      	bne.n	8018fb6 <_strtod_l+0x46>
 8019024:	2301      	movs	r3, #1
 8019026:	9308      	str	r3, [sp, #32]
 8019028:	1c53      	adds	r3, r2, #1
 801902a:	9311      	str	r3, [sp, #68]	; 0x44
 801902c:	7853      	ldrb	r3, [r2, #1]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d1c3      	bne.n	8018fba <_strtod_l+0x4a>
 8019032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019034:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8019038:	2b00      	cmp	r3, #0
 801903a:	f040 852d 	bne.w	8019a98 <_strtod_l+0xb28>
 801903e:	ec49 8b10 	vmov	d0, r8, r9
 8019042:	e7e3      	b.n	801900c <_strtod_l+0x9c>
 8019044:	2300      	movs	r3, #0
 8019046:	e7ee      	b.n	8019026 <_strtod_l+0xb6>
 8019048:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801904a:	b13a      	cbz	r2, 801905c <_strtod_l+0xec>
 801904c:	2135      	movs	r1, #53	; 0x35
 801904e:	a814      	add	r0, sp, #80	; 0x50
 8019050:	f002 fc06 	bl	801b860 <__copybits>
 8019054:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019056:	4620      	mov	r0, r4
 8019058:	f001 ffc8 	bl	801afec <_Bfree>
 801905c:	3d01      	subs	r5, #1
 801905e:	2d04      	cmp	r5, #4
 8019060:	d806      	bhi.n	8019070 <_strtod_l+0x100>
 8019062:	e8df f005 	tbb	[pc, r5]
 8019066:	030a      	.short	0x030a
 8019068:	1714      	.short	0x1714
 801906a:	0a          	.byte	0x0a
 801906b:	00          	.byte	0x00
 801906c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8019070:	073f      	lsls	r7, r7, #28
 8019072:	d5c1      	bpl.n	8018ff8 <_strtod_l+0x88>
 8019074:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8019078:	e7be      	b.n	8018ff8 <_strtod_l+0x88>
 801907a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801907e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019080:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019084:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019088:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801908c:	e7f0      	b.n	8019070 <_strtod_l+0x100>
 801908e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8019210 <_strtod_l+0x2a0>
 8019092:	e7ed      	b.n	8019070 <_strtod_l+0x100>
 8019094:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8019098:	f04f 38ff 	mov.w	r8, #4294967295
 801909c:	e7e8      	b.n	8019070 <_strtod_l+0x100>
 801909e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80190a0:	1c5a      	adds	r2, r3, #1
 80190a2:	9211      	str	r2, [sp, #68]	; 0x44
 80190a4:	785b      	ldrb	r3, [r3, #1]
 80190a6:	2b30      	cmp	r3, #48	; 0x30
 80190a8:	d0f9      	beq.n	801909e <_strtod_l+0x12e>
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d0a4      	beq.n	8018ff8 <_strtod_l+0x88>
 80190ae:	2301      	movs	r3, #1
 80190b0:	f04f 0a00 	mov.w	sl, #0
 80190b4:	9304      	str	r3, [sp, #16]
 80190b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80190b8:	930a      	str	r3, [sp, #40]	; 0x28
 80190ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80190be:	f8cd a018 	str.w	sl, [sp, #24]
 80190c2:	220a      	movs	r2, #10
 80190c4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80190c6:	7807      	ldrb	r7, [r0, #0]
 80190c8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80190cc:	b2d9      	uxtb	r1, r3
 80190ce:	2909      	cmp	r1, #9
 80190d0:	d92a      	bls.n	8019128 <_strtod_l+0x1b8>
 80190d2:	9907      	ldr	r1, [sp, #28]
 80190d4:	462a      	mov	r2, r5
 80190d6:	f002 fe83 	bl	801bde0 <strncmp>
 80190da:	2800      	cmp	r0, #0
 80190dc:	d033      	beq.n	8019146 <_strtod_l+0x1d6>
 80190de:	2000      	movs	r0, #0
 80190e0:	9b06      	ldr	r3, [sp, #24]
 80190e2:	463a      	mov	r2, r7
 80190e4:	4601      	mov	r1, r0
 80190e6:	4607      	mov	r7, r0
 80190e8:	2a65      	cmp	r2, #101	; 0x65
 80190ea:	d001      	beq.n	80190f0 <_strtod_l+0x180>
 80190ec:	2a45      	cmp	r2, #69	; 0x45
 80190ee:	d117      	bne.n	8019120 <_strtod_l+0x1b0>
 80190f0:	b91b      	cbnz	r3, 80190fa <_strtod_l+0x18a>
 80190f2:	9b04      	ldr	r3, [sp, #16]
 80190f4:	4303      	orrs	r3, r0
 80190f6:	d09c      	beq.n	8019032 <_strtod_l+0xc2>
 80190f8:	2300      	movs	r3, #0
 80190fa:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80190fe:	f10b 0201 	add.w	r2, fp, #1
 8019102:	9211      	str	r2, [sp, #68]	; 0x44
 8019104:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8019108:	2a2b      	cmp	r2, #43	; 0x2b
 801910a:	d071      	beq.n	80191f0 <_strtod_l+0x280>
 801910c:	2a2d      	cmp	r2, #45	; 0x2d
 801910e:	d077      	beq.n	8019200 <_strtod_l+0x290>
 8019110:	f04f 0e00 	mov.w	lr, #0
 8019114:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8019118:	2d09      	cmp	r5, #9
 801911a:	d97f      	bls.n	801921c <_strtod_l+0x2ac>
 801911c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8019120:	2500      	movs	r5, #0
 8019122:	e09b      	b.n	801925c <_strtod_l+0x2ec>
 8019124:	2300      	movs	r3, #0
 8019126:	e7c3      	b.n	80190b0 <_strtod_l+0x140>
 8019128:	9906      	ldr	r1, [sp, #24]
 801912a:	2908      	cmp	r1, #8
 801912c:	bfdd      	ittte	le
 801912e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8019130:	fb02 3301 	mlale	r3, r2, r1, r3
 8019134:	9309      	strle	r3, [sp, #36]	; 0x24
 8019136:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801913a:	9b06      	ldr	r3, [sp, #24]
 801913c:	3001      	adds	r0, #1
 801913e:	3301      	adds	r3, #1
 8019140:	9306      	str	r3, [sp, #24]
 8019142:	9011      	str	r0, [sp, #68]	; 0x44
 8019144:	e7be      	b.n	80190c4 <_strtod_l+0x154>
 8019146:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019148:	195a      	adds	r2, r3, r5
 801914a:	9211      	str	r2, [sp, #68]	; 0x44
 801914c:	5d5a      	ldrb	r2, [r3, r5]
 801914e:	9b06      	ldr	r3, [sp, #24]
 8019150:	b3a3      	cbz	r3, 80191bc <_strtod_l+0x24c>
 8019152:	4607      	mov	r7, r0
 8019154:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8019158:	2909      	cmp	r1, #9
 801915a:	d912      	bls.n	8019182 <_strtod_l+0x212>
 801915c:	2101      	movs	r1, #1
 801915e:	e7c3      	b.n	80190e8 <_strtod_l+0x178>
 8019160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019162:	1c5a      	adds	r2, r3, #1
 8019164:	9211      	str	r2, [sp, #68]	; 0x44
 8019166:	785a      	ldrb	r2, [r3, #1]
 8019168:	3001      	adds	r0, #1
 801916a:	2a30      	cmp	r2, #48	; 0x30
 801916c:	d0f8      	beq.n	8019160 <_strtod_l+0x1f0>
 801916e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8019172:	2b08      	cmp	r3, #8
 8019174:	f200 8497 	bhi.w	8019aa6 <_strtod_l+0xb36>
 8019178:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801917a:	930a      	str	r3, [sp, #40]	; 0x28
 801917c:	4607      	mov	r7, r0
 801917e:	2000      	movs	r0, #0
 8019180:	4603      	mov	r3, r0
 8019182:	3a30      	subs	r2, #48	; 0x30
 8019184:	f100 0101 	add.w	r1, r0, #1
 8019188:	d012      	beq.n	80191b0 <_strtod_l+0x240>
 801918a:	440f      	add	r7, r1
 801918c:	eb00 0c03 	add.w	ip, r0, r3
 8019190:	4619      	mov	r1, r3
 8019192:	250a      	movs	r5, #10
 8019194:	4561      	cmp	r1, ip
 8019196:	d113      	bne.n	80191c0 <_strtod_l+0x250>
 8019198:	1819      	adds	r1, r3, r0
 801919a:	2908      	cmp	r1, #8
 801919c:	f103 0301 	add.w	r3, r3, #1
 80191a0:	4403      	add	r3, r0
 80191a2:	dc1c      	bgt.n	80191de <_strtod_l+0x26e>
 80191a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80191a6:	210a      	movs	r1, #10
 80191a8:	fb01 2200 	mla	r2, r1, r0, r2
 80191ac:	9209      	str	r2, [sp, #36]	; 0x24
 80191ae:	2100      	movs	r1, #0
 80191b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80191b2:	1c50      	adds	r0, r2, #1
 80191b4:	9011      	str	r0, [sp, #68]	; 0x44
 80191b6:	7852      	ldrb	r2, [r2, #1]
 80191b8:	4608      	mov	r0, r1
 80191ba:	e7cb      	b.n	8019154 <_strtod_l+0x1e4>
 80191bc:	9806      	ldr	r0, [sp, #24]
 80191be:	e7d4      	b.n	801916a <_strtod_l+0x1fa>
 80191c0:	2908      	cmp	r1, #8
 80191c2:	dc04      	bgt.n	80191ce <_strtod_l+0x25e>
 80191c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80191c6:	436e      	muls	r6, r5
 80191c8:	9609      	str	r6, [sp, #36]	; 0x24
 80191ca:	3101      	adds	r1, #1
 80191cc:	e7e2      	b.n	8019194 <_strtod_l+0x224>
 80191ce:	f101 0e01 	add.w	lr, r1, #1
 80191d2:	f1be 0f10 	cmp.w	lr, #16
 80191d6:	bfd8      	it	le
 80191d8:	fb05 fa0a 	mulle.w	sl, r5, sl
 80191dc:	e7f5      	b.n	80191ca <_strtod_l+0x25a>
 80191de:	2b10      	cmp	r3, #16
 80191e0:	bfdc      	itt	le
 80191e2:	210a      	movle	r1, #10
 80191e4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80191e8:	e7e1      	b.n	80191ae <_strtod_l+0x23e>
 80191ea:	2700      	movs	r7, #0
 80191ec:	2101      	movs	r1, #1
 80191ee:	e780      	b.n	80190f2 <_strtod_l+0x182>
 80191f0:	f04f 0e00 	mov.w	lr, #0
 80191f4:	f10b 0202 	add.w	r2, fp, #2
 80191f8:	9211      	str	r2, [sp, #68]	; 0x44
 80191fa:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80191fe:	e789      	b.n	8019114 <_strtod_l+0x1a4>
 8019200:	f04f 0e01 	mov.w	lr, #1
 8019204:	e7f6      	b.n	80191f4 <_strtod_l+0x284>
 8019206:	bf00      	nop
 8019208:	0801d0c0 	.word	0x0801d0c0
 801920c:	0801ce78 	.word	0x0801ce78
 8019210:	7ff00000 	.word	0x7ff00000
 8019214:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019216:	1c55      	adds	r5, r2, #1
 8019218:	9511      	str	r5, [sp, #68]	; 0x44
 801921a:	7852      	ldrb	r2, [r2, #1]
 801921c:	2a30      	cmp	r2, #48	; 0x30
 801921e:	d0f9      	beq.n	8019214 <_strtod_l+0x2a4>
 8019220:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8019224:	2d08      	cmp	r5, #8
 8019226:	f63f af7b 	bhi.w	8019120 <_strtod_l+0x1b0>
 801922a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801922e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019230:	9207      	str	r2, [sp, #28]
 8019232:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019234:	1c55      	adds	r5, r2, #1
 8019236:	9511      	str	r5, [sp, #68]	; 0x44
 8019238:	7852      	ldrb	r2, [r2, #1]
 801923a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801923e:	2e09      	cmp	r6, #9
 8019240:	d937      	bls.n	80192b2 <_strtod_l+0x342>
 8019242:	9e07      	ldr	r6, [sp, #28]
 8019244:	1bad      	subs	r5, r5, r6
 8019246:	2d08      	cmp	r5, #8
 8019248:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801924c:	dc02      	bgt.n	8019254 <_strtod_l+0x2e4>
 801924e:	4565      	cmp	r5, ip
 8019250:	bfa8      	it	ge
 8019252:	4665      	movge	r5, ip
 8019254:	f1be 0f00 	cmp.w	lr, #0
 8019258:	d000      	beq.n	801925c <_strtod_l+0x2ec>
 801925a:	426d      	negs	r5, r5
 801925c:	2b00      	cmp	r3, #0
 801925e:	d14d      	bne.n	80192fc <_strtod_l+0x38c>
 8019260:	9b04      	ldr	r3, [sp, #16]
 8019262:	4303      	orrs	r3, r0
 8019264:	f47f aec8 	bne.w	8018ff8 <_strtod_l+0x88>
 8019268:	2900      	cmp	r1, #0
 801926a:	f47f aee2 	bne.w	8019032 <_strtod_l+0xc2>
 801926e:	2a69      	cmp	r2, #105	; 0x69
 8019270:	d027      	beq.n	80192c2 <_strtod_l+0x352>
 8019272:	dc24      	bgt.n	80192be <_strtod_l+0x34e>
 8019274:	2a49      	cmp	r2, #73	; 0x49
 8019276:	d024      	beq.n	80192c2 <_strtod_l+0x352>
 8019278:	2a4e      	cmp	r2, #78	; 0x4e
 801927a:	f47f aeda 	bne.w	8019032 <_strtod_l+0xc2>
 801927e:	4996      	ldr	r1, [pc, #600]	; (80194d8 <_strtod_l+0x568>)
 8019280:	a811      	add	r0, sp, #68	; 0x44
 8019282:	f001 fd93 	bl	801adac <__match>
 8019286:	2800      	cmp	r0, #0
 8019288:	f43f aed3 	beq.w	8019032 <_strtod_l+0xc2>
 801928c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801928e:	781b      	ldrb	r3, [r3, #0]
 8019290:	2b28      	cmp	r3, #40	; 0x28
 8019292:	d12d      	bne.n	80192f0 <_strtod_l+0x380>
 8019294:	4991      	ldr	r1, [pc, #580]	; (80194dc <_strtod_l+0x56c>)
 8019296:	aa14      	add	r2, sp, #80	; 0x50
 8019298:	a811      	add	r0, sp, #68	; 0x44
 801929a:	f001 fd9b 	bl	801add4 <__hexnan>
 801929e:	2805      	cmp	r0, #5
 80192a0:	d126      	bne.n	80192f0 <_strtod_l+0x380>
 80192a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80192a4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80192a8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80192ac:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80192b0:	e6a2      	b.n	8018ff8 <_strtod_l+0x88>
 80192b2:	250a      	movs	r5, #10
 80192b4:	fb05 250c 	mla	r5, r5, ip, r2
 80192b8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80192bc:	e7b9      	b.n	8019232 <_strtod_l+0x2c2>
 80192be:	2a6e      	cmp	r2, #110	; 0x6e
 80192c0:	e7db      	b.n	801927a <_strtod_l+0x30a>
 80192c2:	4987      	ldr	r1, [pc, #540]	; (80194e0 <_strtod_l+0x570>)
 80192c4:	a811      	add	r0, sp, #68	; 0x44
 80192c6:	f001 fd71 	bl	801adac <__match>
 80192ca:	2800      	cmp	r0, #0
 80192cc:	f43f aeb1 	beq.w	8019032 <_strtod_l+0xc2>
 80192d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80192d2:	4984      	ldr	r1, [pc, #528]	; (80194e4 <_strtod_l+0x574>)
 80192d4:	3b01      	subs	r3, #1
 80192d6:	a811      	add	r0, sp, #68	; 0x44
 80192d8:	9311      	str	r3, [sp, #68]	; 0x44
 80192da:	f001 fd67 	bl	801adac <__match>
 80192de:	b910      	cbnz	r0, 80192e6 <_strtod_l+0x376>
 80192e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80192e2:	3301      	adds	r3, #1
 80192e4:	9311      	str	r3, [sp, #68]	; 0x44
 80192e6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80194f8 <_strtod_l+0x588>
 80192ea:	f04f 0800 	mov.w	r8, #0
 80192ee:	e683      	b.n	8018ff8 <_strtod_l+0x88>
 80192f0:	487d      	ldr	r0, [pc, #500]	; (80194e8 <_strtod_l+0x578>)
 80192f2:	f002 fd5d 	bl	801bdb0 <nan>
 80192f6:	ec59 8b10 	vmov	r8, r9, d0
 80192fa:	e67d      	b.n	8018ff8 <_strtod_l+0x88>
 80192fc:	1bea      	subs	r2, r5, r7
 80192fe:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8019302:	9207      	str	r2, [sp, #28]
 8019304:	9a06      	ldr	r2, [sp, #24]
 8019306:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801930a:	2a00      	cmp	r2, #0
 801930c:	bf08      	it	eq
 801930e:	461a      	moveq	r2, r3
 8019310:	2b10      	cmp	r3, #16
 8019312:	9206      	str	r2, [sp, #24]
 8019314:	461a      	mov	r2, r3
 8019316:	bfa8      	it	ge
 8019318:	2210      	movge	r2, #16
 801931a:	2b09      	cmp	r3, #9
 801931c:	ec59 8b17 	vmov	r8, r9, d7
 8019320:	dd0c      	ble.n	801933c <_strtod_l+0x3cc>
 8019322:	4972      	ldr	r1, [pc, #456]	; (80194ec <_strtod_l+0x57c>)
 8019324:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8019328:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801932c:	ee06 aa90 	vmov	s13, sl
 8019330:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8019334:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019338:	ec59 8b16 	vmov	r8, r9, d6
 801933c:	2b0f      	cmp	r3, #15
 801933e:	dc36      	bgt.n	80193ae <_strtod_l+0x43e>
 8019340:	9907      	ldr	r1, [sp, #28]
 8019342:	2900      	cmp	r1, #0
 8019344:	f43f ae58 	beq.w	8018ff8 <_strtod_l+0x88>
 8019348:	dd23      	ble.n	8019392 <_strtod_l+0x422>
 801934a:	2916      	cmp	r1, #22
 801934c:	dc0b      	bgt.n	8019366 <_strtod_l+0x3f6>
 801934e:	4b67      	ldr	r3, [pc, #412]	; (80194ec <_strtod_l+0x57c>)
 8019350:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8019354:	ed93 7b00 	vldr	d7, [r3]
 8019358:	ec49 8b16 	vmov	d6, r8, r9
 801935c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019360:	ec59 8b17 	vmov	r8, r9, d7
 8019364:	e648      	b.n	8018ff8 <_strtod_l+0x88>
 8019366:	9807      	ldr	r0, [sp, #28]
 8019368:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801936c:	4281      	cmp	r1, r0
 801936e:	db1e      	blt.n	80193ae <_strtod_l+0x43e>
 8019370:	4a5e      	ldr	r2, [pc, #376]	; (80194ec <_strtod_l+0x57c>)
 8019372:	f1c3 030f 	rsb	r3, r3, #15
 8019376:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801937a:	ed91 7b00 	vldr	d7, [r1]
 801937e:	ec49 8b16 	vmov	d6, r8, r9
 8019382:	1ac3      	subs	r3, r0, r3
 8019384:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019388:	ee27 7b06 	vmul.f64	d7, d7, d6
 801938c:	ed92 6b00 	vldr	d6, [r2]
 8019390:	e7e4      	b.n	801935c <_strtod_l+0x3ec>
 8019392:	9907      	ldr	r1, [sp, #28]
 8019394:	3116      	adds	r1, #22
 8019396:	db0a      	blt.n	80193ae <_strtod_l+0x43e>
 8019398:	4b54      	ldr	r3, [pc, #336]	; (80194ec <_strtod_l+0x57c>)
 801939a:	1b7d      	subs	r5, r7, r5
 801939c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80193a0:	ed95 7b00 	vldr	d7, [r5]
 80193a4:	ec49 8b16 	vmov	d6, r8, r9
 80193a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80193ac:	e7d8      	b.n	8019360 <_strtod_l+0x3f0>
 80193ae:	9907      	ldr	r1, [sp, #28]
 80193b0:	1a9a      	subs	r2, r3, r2
 80193b2:	440a      	add	r2, r1
 80193b4:	2a00      	cmp	r2, #0
 80193b6:	dd6f      	ble.n	8019498 <_strtod_l+0x528>
 80193b8:	f012 000f 	ands.w	r0, r2, #15
 80193bc:	d00a      	beq.n	80193d4 <_strtod_l+0x464>
 80193be:	494b      	ldr	r1, [pc, #300]	; (80194ec <_strtod_l+0x57c>)
 80193c0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80193c4:	ed91 7b00 	vldr	d7, [r1]
 80193c8:	ec49 8b16 	vmov	d6, r8, r9
 80193cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80193d0:	ec59 8b17 	vmov	r8, r9, d7
 80193d4:	f032 020f 	bics.w	r2, r2, #15
 80193d8:	d04f      	beq.n	801947a <_strtod_l+0x50a>
 80193da:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80193de:	dd22      	ble.n	8019426 <_strtod_l+0x4b6>
 80193e0:	2500      	movs	r5, #0
 80193e2:	462e      	mov	r6, r5
 80193e4:	9506      	str	r5, [sp, #24]
 80193e6:	462f      	mov	r7, r5
 80193e8:	2322      	movs	r3, #34	; 0x22
 80193ea:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80194f8 <_strtod_l+0x588>
 80193ee:	6023      	str	r3, [r4, #0]
 80193f0:	f04f 0800 	mov.w	r8, #0
 80193f4:	9b06      	ldr	r3, [sp, #24]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	f43f adfe 	beq.w	8018ff8 <_strtod_l+0x88>
 80193fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80193fe:	4620      	mov	r0, r4
 8019400:	f001 fdf4 	bl	801afec <_Bfree>
 8019404:	4639      	mov	r1, r7
 8019406:	4620      	mov	r0, r4
 8019408:	f001 fdf0 	bl	801afec <_Bfree>
 801940c:	4631      	mov	r1, r6
 801940e:	4620      	mov	r0, r4
 8019410:	f001 fdec 	bl	801afec <_Bfree>
 8019414:	9906      	ldr	r1, [sp, #24]
 8019416:	4620      	mov	r0, r4
 8019418:	f001 fde8 	bl	801afec <_Bfree>
 801941c:	4629      	mov	r1, r5
 801941e:	4620      	mov	r0, r4
 8019420:	f001 fde4 	bl	801afec <_Bfree>
 8019424:	e5e8      	b.n	8018ff8 <_strtod_l+0x88>
 8019426:	2000      	movs	r0, #0
 8019428:	ec49 8b17 	vmov	d7, r8, r9
 801942c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80194f0 <_strtod_l+0x580>
 8019430:	1112      	asrs	r2, r2, #4
 8019432:	4601      	mov	r1, r0
 8019434:	2a01      	cmp	r2, #1
 8019436:	dc23      	bgt.n	8019480 <_strtod_l+0x510>
 8019438:	b108      	cbz	r0, 801943e <_strtod_l+0x4ce>
 801943a:	ec59 8b17 	vmov	r8, r9, d7
 801943e:	4a2c      	ldr	r2, [pc, #176]	; (80194f0 <_strtod_l+0x580>)
 8019440:	482c      	ldr	r0, [pc, #176]	; (80194f4 <_strtod_l+0x584>)
 8019442:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019446:	ed92 7b00 	vldr	d7, [r2]
 801944a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801944e:	ec49 8b16 	vmov	d6, r8, r9
 8019452:	4a29      	ldr	r2, [pc, #164]	; (80194f8 <_strtod_l+0x588>)
 8019454:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019458:	ee17 1a90 	vmov	r1, s15
 801945c:	400a      	ands	r2, r1
 801945e:	4282      	cmp	r2, r0
 8019460:	ec59 8b17 	vmov	r8, r9, d7
 8019464:	d8bc      	bhi.n	80193e0 <_strtod_l+0x470>
 8019466:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801946a:	4282      	cmp	r2, r0
 801946c:	bf86      	itte	hi
 801946e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80194fc <_strtod_l+0x58c>
 8019472:	f04f 38ff 	movhi.w	r8, #4294967295
 8019476:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801947a:	2200      	movs	r2, #0
 801947c:	9204      	str	r2, [sp, #16]
 801947e:	e078      	b.n	8019572 <_strtod_l+0x602>
 8019480:	07d6      	lsls	r6, r2, #31
 8019482:	d504      	bpl.n	801948e <_strtod_l+0x51e>
 8019484:	ed9c 6b00 	vldr	d6, [ip]
 8019488:	2001      	movs	r0, #1
 801948a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801948e:	3101      	adds	r1, #1
 8019490:	1052      	asrs	r2, r2, #1
 8019492:	f10c 0c08 	add.w	ip, ip, #8
 8019496:	e7cd      	b.n	8019434 <_strtod_l+0x4c4>
 8019498:	d0ef      	beq.n	801947a <_strtod_l+0x50a>
 801949a:	4252      	negs	r2, r2
 801949c:	f012 000f 	ands.w	r0, r2, #15
 80194a0:	d00a      	beq.n	80194b8 <_strtod_l+0x548>
 80194a2:	4912      	ldr	r1, [pc, #72]	; (80194ec <_strtod_l+0x57c>)
 80194a4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80194a8:	ed91 7b00 	vldr	d7, [r1]
 80194ac:	ec49 8b16 	vmov	d6, r8, r9
 80194b0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80194b4:	ec59 8b17 	vmov	r8, r9, d7
 80194b8:	1112      	asrs	r2, r2, #4
 80194ba:	d0de      	beq.n	801947a <_strtod_l+0x50a>
 80194bc:	2a1f      	cmp	r2, #31
 80194be:	dd1f      	ble.n	8019500 <_strtod_l+0x590>
 80194c0:	2500      	movs	r5, #0
 80194c2:	462e      	mov	r6, r5
 80194c4:	9506      	str	r5, [sp, #24]
 80194c6:	462f      	mov	r7, r5
 80194c8:	2322      	movs	r3, #34	; 0x22
 80194ca:	f04f 0800 	mov.w	r8, #0
 80194ce:	f04f 0900 	mov.w	r9, #0
 80194d2:	6023      	str	r3, [r4, #0]
 80194d4:	e78e      	b.n	80193f4 <_strtod_l+0x484>
 80194d6:	bf00      	nop
 80194d8:	0801ce49 	.word	0x0801ce49
 80194dc:	0801ce8c 	.word	0x0801ce8c
 80194e0:	0801ce41 	.word	0x0801ce41
 80194e4:	0801cfcc 	.word	0x0801cfcc
 80194e8:	0801d278 	.word	0x0801d278
 80194ec:	0801d158 	.word	0x0801d158
 80194f0:	0801d130 	.word	0x0801d130
 80194f4:	7ca00000 	.word	0x7ca00000
 80194f8:	7ff00000 	.word	0x7ff00000
 80194fc:	7fefffff 	.word	0x7fefffff
 8019500:	f012 0110 	ands.w	r1, r2, #16
 8019504:	bf18      	it	ne
 8019506:	216a      	movne	r1, #106	; 0x6a
 8019508:	9104      	str	r1, [sp, #16]
 801950a:	ec49 8b17 	vmov	d7, r8, r9
 801950e:	49be      	ldr	r1, [pc, #760]	; (8019808 <_strtod_l+0x898>)
 8019510:	2000      	movs	r0, #0
 8019512:	07d6      	lsls	r6, r2, #31
 8019514:	d504      	bpl.n	8019520 <_strtod_l+0x5b0>
 8019516:	ed91 6b00 	vldr	d6, [r1]
 801951a:	2001      	movs	r0, #1
 801951c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019520:	1052      	asrs	r2, r2, #1
 8019522:	f101 0108 	add.w	r1, r1, #8
 8019526:	d1f4      	bne.n	8019512 <_strtod_l+0x5a2>
 8019528:	b108      	cbz	r0, 801952e <_strtod_l+0x5be>
 801952a:	ec59 8b17 	vmov	r8, r9, d7
 801952e:	9a04      	ldr	r2, [sp, #16]
 8019530:	b1c2      	cbz	r2, 8019564 <_strtod_l+0x5f4>
 8019532:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8019536:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801953a:	2a00      	cmp	r2, #0
 801953c:	4648      	mov	r0, r9
 801953e:	dd11      	ble.n	8019564 <_strtod_l+0x5f4>
 8019540:	2a1f      	cmp	r2, #31
 8019542:	f340 812e 	ble.w	80197a2 <_strtod_l+0x832>
 8019546:	2a34      	cmp	r2, #52	; 0x34
 8019548:	bfde      	ittt	le
 801954a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801954e:	f04f 32ff 	movle.w	r2, #4294967295
 8019552:	fa02 f101 	lslle.w	r1, r2, r1
 8019556:	f04f 0800 	mov.w	r8, #0
 801955a:	bfcc      	ite	gt
 801955c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8019560:	ea01 0900 	andle.w	r9, r1, r0
 8019564:	ec49 8b17 	vmov	d7, r8, r9
 8019568:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801956c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019570:	d0a6      	beq.n	80194c0 <_strtod_l+0x550>
 8019572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019574:	9200      	str	r2, [sp, #0]
 8019576:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019578:	9a06      	ldr	r2, [sp, #24]
 801957a:	4620      	mov	r0, r4
 801957c:	f001 fd9e 	bl	801b0bc <__s2b>
 8019580:	9006      	str	r0, [sp, #24]
 8019582:	2800      	cmp	r0, #0
 8019584:	f43f af2c 	beq.w	80193e0 <_strtod_l+0x470>
 8019588:	9b07      	ldr	r3, [sp, #28]
 801958a:	1b7d      	subs	r5, r7, r5
 801958c:	2b00      	cmp	r3, #0
 801958e:	bfb4      	ite	lt
 8019590:	462b      	movlt	r3, r5
 8019592:	2300      	movge	r3, #0
 8019594:	9309      	str	r3, [sp, #36]	; 0x24
 8019596:	9b07      	ldr	r3, [sp, #28]
 8019598:	ed9f 9b93 	vldr	d9, [pc, #588]	; 80197e8 <_strtod_l+0x878>
 801959c:	ed9f ab94 	vldr	d10, [pc, #592]	; 80197f0 <_strtod_l+0x880>
 80195a0:	ed9f bb95 	vldr	d11, [pc, #596]	; 80197f8 <_strtod_l+0x888>
 80195a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80195a8:	2500      	movs	r5, #0
 80195aa:	930c      	str	r3, [sp, #48]	; 0x30
 80195ac:	462e      	mov	r6, r5
 80195ae:	9b06      	ldr	r3, [sp, #24]
 80195b0:	4620      	mov	r0, r4
 80195b2:	6859      	ldr	r1, [r3, #4]
 80195b4:	f001 fcda 	bl	801af6c <_Balloc>
 80195b8:	4607      	mov	r7, r0
 80195ba:	2800      	cmp	r0, #0
 80195bc:	f43f af14 	beq.w	80193e8 <_strtod_l+0x478>
 80195c0:	9b06      	ldr	r3, [sp, #24]
 80195c2:	691a      	ldr	r2, [r3, #16]
 80195c4:	3202      	adds	r2, #2
 80195c6:	f103 010c 	add.w	r1, r3, #12
 80195ca:	0092      	lsls	r2, r2, #2
 80195cc:	300c      	adds	r0, #12
 80195ce:	f7fe fded 	bl	80181ac <memcpy>
 80195d2:	ec49 8b10 	vmov	d0, r8, r9
 80195d6:	aa14      	add	r2, sp, #80	; 0x50
 80195d8:	a913      	add	r1, sp, #76	; 0x4c
 80195da:	4620      	mov	r0, r4
 80195dc:	f002 f8b4 	bl	801b748 <__d2b>
 80195e0:	ec49 8b18 	vmov	d8, r8, r9
 80195e4:	9012      	str	r0, [sp, #72]	; 0x48
 80195e6:	2800      	cmp	r0, #0
 80195e8:	f43f aefe 	beq.w	80193e8 <_strtod_l+0x478>
 80195ec:	2101      	movs	r1, #1
 80195ee:	4620      	mov	r0, r4
 80195f0:	f001 fdfe 	bl	801b1f0 <__i2b>
 80195f4:	4606      	mov	r6, r0
 80195f6:	2800      	cmp	r0, #0
 80195f8:	f43f aef6 	beq.w	80193e8 <_strtod_l+0x478>
 80195fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80195fe:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019600:	2b00      	cmp	r3, #0
 8019602:	bfab      	itete	ge
 8019604:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8019606:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8019608:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801960c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8019610:	bfac      	ite	ge
 8019612:	eb03 0b02 	addge.w	fp, r3, r2
 8019616:	eba2 0a03 	sublt.w	sl, r2, r3
 801961a:	9a04      	ldr	r2, [sp, #16]
 801961c:	1a9b      	subs	r3, r3, r2
 801961e:	440b      	add	r3, r1
 8019620:	4a7a      	ldr	r2, [pc, #488]	; (801980c <_strtod_l+0x89c>)
 8019622:	3b01      	subs	r3, #1
 8019624:	4293      	cmp	r3, r2
 8019626:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801962a:	f280 80cd 	bge.w	80197c8 <_strtod_l+0x858>
 801962e:	1ad2      	subs	r2, r2, r3
 8019630:	2a1f      	cmp	r2, #31
 8019632:	eba1 0102 	sub.w	r1, r1, r2
 8019636:	f04f 0001 	mov.w	r0, #1
 801963a:	f300 80b9 	bgt.w	80197b0 <_strtod_l+0x840>
 801963e:	fa00 f302 	lsl.w	r3, r0, r2
 8019642:	930b      	str	r3, [sp, #44]	; 0x2c
 8019644:	2300      	movs	r3, #0
 8019646:	930a      	str	r3, [sp, #40]	; 0x28
 8019648:	eb0b 0301 	add.w	r3, fp, r1
 801964c:	9a04      	ldr	r2, [sp, #16]
 801964e:	459b      	cmp	fp, r3
 8019650:	448a      	add	sl, r1
 8019652:	4492      	add	sl, r2
 8019654:	465a      	mov	r2, fp
 8019656:	bfa8      	it	ge
 8019658:	461a      	movge	r2, r3
 801965a:	4552      	cmp	r2, sl
 801965c:	bfa8      	it	ge
 801965e:	4652      	movge	r2, sl
 8019660:	2a00      	cmp	r2, #0
 8019662:	bfc2      	ittt	gt
 8019664:	1a9b      	subgt	r3, r3, r2
 8019666:	ebaa 0a02 	subgt.w	sl, sl, r2
 801966a:	ebab 0b02 	subgt.w	fp, fp, r2
 801966e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019670:	2a00      	cmp	r2, #0
 8019672:	dd18      	ble.n	80196a6 <_strtod_l+0x736>
 8019674:	4631      	mov	r1, r6
 8019676:	4620      	mov	r0, r4
 8019678:	930f      	str	r3, [sp, #60]	; 0x3c
 801967a:	f001 fe79 	bl	801b370 <__pow5mult>
 801967e:	4606      	mov	r6, r0
 8019680:	2800      	cmp	r0, #0
 8019682:	f43f aeb1 	beq.w	80193e8 <_strtod_l+0x478>
 8019686:	4601      	mov	r1, r0
 8019688:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801968a:	4620      	mov	r0, r4
 801968c:	f001 fdc6 	bl	801b21c <__multiply>
 8019690:	900e      	str	r0, [sp, #56]	; 0x38
 8019692:	2800      	cmp	r0, #0
 8019694:	f43f aea8 	beq.w	80193e8 <_strtod_l+0x478>
 8019698:	9912      	ldr	r1, [sp, #72]	; 0x48
 801969a:	4620      	mov	r0, r4
 801969c:	f001 fca6 	bl	801afec <_Bfree>
 80196a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80196a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80196a4:	9212      	str	r2, [sp, #72]	; 0x48
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	f300 8093 	bgt.w	80197d2 <_strtod_l+0x862>
 80196ac:	9b07      	ldr	r3, [sp, #28]
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	dd08      	ble.n	80196c4 <_strtod_l+0x754>
 80196b2:	4639      	mov	r1, r7
 80196b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80196b6:	4620      	mov	r0, r4
 80196b8:	f001 fe5a 	bl	801b370 <__pow5mult>
 80196bc:	4607      	mov	r7, r0
 80196be:	2800      	cmp	r0, #0
 80196c0:	f43f ae92 	beq.w	80193e8 <_strtod_l+0x478>
 80196c4:	f1ba 0f00 	cmp.w	sl, #0
 80196c8:	dd08      	ble.n	80196dc <_strtod_l+0x76c>
 80196ca:	4639      	mov	r1, r7
 80196cc:	4652      	mov	r2, sl
 80196ce:	4620      	mov	r0, r4
 80196d0:	f001 fea8 	bl	801b424 <__lshift>
 80196d4:	4607      	mov	r7, r0
 80196d6:	2800      	cmp	r0, #0
 80196d8:	f43f ae86 	beq.w	80193e8 <_strtod_l+0x478>
 80196dc:	f1bb 0f00 	cmp.w	fp, #0
 80196e0:	dd08      	ble.n	80196f4 <_strtod_l+0x784>
 80196e2:	4631      	mov	r1, r6
 80196e4:	465a      	mov	r2, fp
 80196e6:	4620      	mov	r0, r4
 80196e8:	f001 fe9c 	bl	801b424 <__lshift>
 80196ec:	4606      	mov	r6, r0
 80196ee:	2800      	cmp	r0, #0
 80196f0:	f43f ae7a 	beq.w	80193e8 <_strtod_l+0x478>
 80196f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80196f6:	463a      	mov	r2, r7
 80196f8:	4620      	mov	r0, r4
 80196fa:	f001 ff1f 	bl	801b53c <__mdiff>
 80196fe:	4605      	mov	r5, r0
 8019700:	2800      	cmp	r0, #0
 8019702:	f43f ae71 	beq.w	80193e8 <_strtod_l+0x478>
 8019706:	2300      	movs	r3, #0
 8019708:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801970c:	60c3      	str	r3, [r0, #12]
 801970e:	4631      	mov	r1, r6
 8019710:	f001 fef8 	bl	801b504 <__mcmp>
 8019714:	2800      	cmp	r0, #0
 8019716:	da7d      	bge.n	8019814 <_strtod_l+0x8a4>
 8019718:	ea5a 0308 	orrs.w	r3, sl, r8
 801971c:	f040 80a3 	bne.w	8019866 <_strtod_l+0x8f6>
 8019720:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019724:	2b00      	cmp	r3, #0
 8019726:	f040 809e 	bne.w	8019866 <_strtod_l+0x8f6>
 801972a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801972e:	0d1b      	lsrs	r3, r3, #20
 8019730:	051b      	lsls	r3, r3, #20
 8019732:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8019736:	f240 8096 	bls.w	8019866 <_strtod_l+0x8f6>
 801973a:	696b      	ldr	r3, [r5, #20]
 801973c:	b91b      	cbnz	r3, 8019746 <_strtod_l+0x7d6>
 801973e:	692b      	ldr	r3, [r5, #16]
 8019740:	2b01      	cmp	r3, #1
 8019742:	f340 8090 	ble.w	8019866 <_strtod_l+0x8f6>
 8019746:	4629      	mov	r1, r5
 8019748:	2201      	movs	r2, #1
 801974a:	4620      	mov	r0, r4
 801974c:	f001 fe6a 	bl	801b424 <__lshift>
 8019750:	4631      	mov	r1, r6
 8019752:	4605      	mov	r5, r0
 8019754:	f001 fed6 	bl	801b504 <__mcmp>
 8019758:	2800      	cmp	r0, #0
 801975a:	f340 8084 	ble.w	8019866 <_strtod_l+0x8f6>
 801975e:	9904      	ldr	r1, [sp, #16]
 8019760:	4a2b      	ldr	r2, [pc, #172]	; (8019810 <_strtod_l+0x8a0>)
 8019762:	464b      	mov	r3, r9
 8019764:	2900      	cmp	r1, #0
 8019766:	f000 809d 	beq.w	80198a4 <_strtod_l+0x934>
 801976a:	ea02 0109 	and.w	r1, r2, r9
 801976e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019772:	f300 8097 	bgt.w	80198a4 <_strtod_l+0x934>
 8019776:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801977a:	f77f aea5 	ble.w	80194c8 <_strtod_l+0x558>
 801977e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8019800 <_strtod_l+0x890>
 8019782:	ec49 8b16 	vmov	d6, r8, r9
 8019786:	ee26 7b07 	vmul.f64	d7, d6, d7
 801978a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801978e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8019792:	4313      	orrs	r3, r2
 8019794:	bf08      	it	eq
 8019796:	2322      	moveq	r3, #34	; 0x22
 8019798:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801979c:	bf08      	it	eq
 801979e:	6023      	streq	r3, [r4, #0]
 80197a0:	e62c      	b.n	80193fc <_strtod_l+0x48c>
 80197a2:	f04f 31ff 	mov.w	r1, #4294967295
 80197a6:	fa01 f202 	lsl.w	r2, r1, r2
 80197aa:	ea02 0808 	and.w	r8, r2, r8
 80197ae:	e6d9      	b.n	8019564 <_strtod_l+0x5f4>
 80197b0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80197b4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80197b8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80197bc:	33e2      	adds	r3, #226	; 0xe2
 80197be:	fa00 f303 	lsl.w	r3, r0, r3
 80197c2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80197c6:	e73f      	b.n	8019648 <_strtod_l+0x6d8>
 80197c8:	2200      	movs	r2, #0
 80197ca:	2301      	movs	r3, #1
 80197cc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80197d0:	e73a      	b.n	8019648 <_strtod_l+0x6d8>
 80197d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80197d4:	461a      	mov	r2, r3
 80197d6:	4620      	mov	r0, r4
 80197d8:	f001 fe24 	bl	801b424 <__lshift>
 80197dc:	9012      	str	r0, [sp, #72]	; 0x48
 80197de:	2800      	cmp	r0, #0
 80197e0:	f47f af64 	bne.w	80196ac <_strtod_l+0x73c>
 80197e4:	e600      	b.n	80193e8 <_strtod_l+0x478>
 80197e6:	bf00      	nop
 80197e8:	94a03595 	.word	0x94a03595
 80197ec:	3fcfffff 	.word	0x3fcfffff
 80197f0:	94a03595 	.word	0x94a03595
 80197f4:	3fdfffff 	.word	0x3fdfffff
 80197f8:	35afe535 	.word	0x35afe535
 80197fc:	3fe00000 	.word	0x3fe00000
 8019800:	00000000 	.word	0x00000000
 8019804:	39500000 	.word	0x39500000
 8019808:	0801cea0 	.word	0x0801cea0
 801980c:	fffffc02 	.word	0xfffffc02
 8019810:	7ff00000 	.word	0x7ff00000
 8019814:	46cb      	mov	fp, r9
 8019816:	d15f      	bne.n	80198d8 <_strtod_l+0x968>
 8019818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801981c:	f1ba 0f00 	cmp.w	sl, #0
 8019820:	d02a      	beq.n	8019878 <_strtod_l+0x908>
 8019822:	4aa7      	ldr	r2, [pc, #668]	; (8019ac0 <_strtod_l+0xb50>)
 8019824:	4293      	cmp	r3, r2
 8019826:	d12b      	bne.n	8019880 <_strtod_l+0x910>
 8019828:	9b04      	ldr	r3, [sp, #16]
 801982a:	4642      	mov	r2, r8
 801982c:	b1fb      	cbz	r3, 801986e <_strtod_l+0x8fe>
 801982e:	4ba5      	ldr	r3, [pc, #660]	; (8019ac4 <_strtod_l+0xb54>)
 8019830:	ea09 0303 	and.w	r3, r9, r3
 8019834:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019838:	f04f 31ff 	mov.w	r1, #4294967295
 801983c:	d81a      	bhi.n	8019874 <_strtod_l+0x904>
 801983e:	0d1b      	lsrs	r3, r3, #20
 8019840:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019844:	fa01 f303 	lsl.w	r3, r1, r3
 8019848:	429a      	cmp	r2, r3
 801984a:	d119      	bne.n	8019880 <_strtod_l+0x910>
 801984c:	4b9e      	ldr	r3, [pc, #632]	; (8019ac8 <_strtod_l+0xb58>)
 801984e:	459b      	cmp	fp, r3
 8019850:	d102      	bne.n	8019858 <_strtod_l+0x8e8>
 8019852:	3201      	adds	r2, #1
 8019854:	f43f adc8 	beq.w	80193e8 <_strtod_l+0x478>
 8019858:	4b9a      	ldr	r3, [pc, #616]	; (8019ac4 <_strtod_l+0xb54>)
 801985a:	ea0b 0303 	and.w	r3, fp, r3
 801985e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8019862:	f04f 0800 	mov.w	r8, #0
 8019866:	9b04      	ldr	r3, [sp, #16]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d188      	bne.n	801977e <_strtod_l+0x80e>
 801986c:	e5c6      	b.n	80193fc <_strtod_l+0x48c>
 801986e:	f04f 33ff 	mov.w	r3, #4294967295
 8019872:	e7e9      	b.n	8019848 <_strtod_l+0x8d8>
 8019874:	460b      	mov	r3, r1
 8019876:	e7e7      	b.n	8019848 <_strtod_l+0x8d8>
 8019878:	ea53 0308 	orrs.w	r3, r3, r8
 801987c:	f43f af6f 	beq.w	801975e <_strtod_l+0x7ee>
 8019880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019882:	b1cb      	cbz	r3, 80198b8 <_strtod_l+0x948>
 8019884:	ea13 0f0b 	tst.w	r3, fp
 8019888:	d0ed      	beq.n	8019866 <_strtod_l+0x8f6>
 801988a:	9a04      	ldr	r2, [sp, #16]
 801988c:	4640      	mov	r0, r8
 801988e:	4649      	mov	r1, r9
 8019890:	f1ba 0f00 	cmp.w	sl, #0
 8019894:	d014      	beq.n	80198c0 <_strtod_l+0x950>
 8019896:	f7ff fb50 	bl	8018f3a <sulp>
 801989a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801989e:	ec59 8b17 	vmov	r8, r9, d7
 80198a2:	e7e0      	b.n	8019866 <_strtod_l+0x8f6>
 80198a4:	4013      	ands	r3, r2
 80198a6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80198aa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80198ae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80198b2:	f04f 38ff 	mov.w	r8, #4294967295
 80198b6:	e7d6      	b.n	8019866 <_strtod_l+0x8f6>
 80198b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80198ba:	ea13 0f08 	tst.w	r3, r8
 80198be:	e7e3      	b.n	8019888 <_strtod_l+0x918>
 80198c0:	f7ff fb3b 	bl	8018f3a <sulp>
 80198c4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80198c8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80198cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198d0:	ec59 8b10 	vmov	r8, r9, d0
 80198d4:	d1c7      	bne.n	8019866 <_strtod_l+0x8f6>
 80198d6:	e5f7      	b.n	80194c8 <_strtod_l+0x558>
 80198d8:	4631      	mov	r1, r6
 80198da:	4628      	mov	r0, r5
 80198dc:	f001 ff90 	bl	801b800 <__ratio>
 80198e0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80198e4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80198e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198ec:	d865      	bhi.n	80199ba <_strtod_l+0xa4a>
 80198ee:	f1ba 0f00 	cmp.w	sl, #0
 80198f2:	d042      	beq.n	801997a <_strtod_l+0xa0a>
 80198f4:	4b75      	ldr	r3, [pc, #468]	; (8019acc <_strtod_l+0xb5c>)
 80198f6:	2200      	movs	r2, #0
 80198f8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80198fc:	4871      	ldr	r0, [pc, #452]	; (8019ac4 <_strtod_l+0xb54>)
 80198fe:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8019ad8 <_strtod_l+0xb68>
 8019902:	ea0b 0100 	and.w	r1, fp, r0
 8019906:	4561      	cmp	r1, ip
 8019908:	f040 808e 	bne.w	8019a28 <_strtod_l+0xab8>
 801990c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8019910:	ec49 8b10 	vmov	d0, r8, r9
 8019914:	ec43 2b1c 	vmov	d12, r2, r3
 8019918:	910a      	str	r1, [sp, #40]	; 0x28
 801991a:	f001 fe99 	bl	801b650 <__ulp>
 801991e:	ec49 8b1e 	vmov	d14, r8, r9
 8019922:	4868      	ldr	r0, [pc, #416]	; (8019ac4 <_strtod_l+0xb54>)
 8019924:	eeac eb00 	vfma.f64	d14, d12, d0
 8019928:	ee1e 3a90 	vmov	r3, s29
 801992c:	4a68      	ldr	r2, [pc, #416]	; (8019ad0 <_strtod_l+0xb60>)
 801992e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019930:	4018      	ands	r0, r3
 8019932:	4290      	cmp	r0, r2
 8019934:	ec59 8b1e 	vmov	r8, r9, d14
 8019938:	d94e      	bls.n	80199d8 <_strtod_l+0xa68>
 801993a:	ee18 3a90 	vmov	r3, s17
 801993e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8019942:	4293      	cmp	r3, r2
 8019944:	d104      	bne.n	8019950 <_strtod_l+0x9e0>
 8019946:	ee18 3a10 	vmov	r3, s16
 801994a:	3301      	adds	r3, #1
 801994c:	f43f ad4c 	beq.w	80193e8 <_strtod_l+0x478>
 8019950:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8019ac8 <_strtod_l+0xb58>
 8019954:	f04f 38ff 	mov.w	r8, #4294967295
 8019958:	9912      	ldr	r1, [sp, #72]	; 0x48
 801995a:	4620      	mov	r0, r4
 801995c:	f001 fb46 	bl	801afec <_Bfree>
 8019960:	4639      	mov	r1, r7
 8019962:	4620      	mov	r0, r4
 8019964:	f001 fb42 	bl	801afec <_Bfree>
 8019968:	4631      	mov	r1, r6
 801996a:	4620      	mov	r0, r4
 801996c:	f001 fb3e 	bl	801afec <_Bfree>
 8019970:	4629      	mov	r1, r5
 8019972:	4620      	mov	r0, r4
 8019974:	f001 fb3a 	bl	801afec <_Bfree>
 8019978:	e619      	b.n	80195ae <_strtod_l+0x63e>
 801997a:	f1b8 0f00 	cmp.w	r8, #0
 801997e:	d112      	bne.n	80199a6 <_strtod_l+0xa36>
 8019980:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019984:	b9b3      	cbnz	r3, 80199b4 <_strtod_l+0xa44>
 8019986:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801998a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801998e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019992:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8019996:	bf58      	it	pl
 8019998:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801999c:	eeb1 7b4d 	vneg.f64	d7, d13
 80199a0:	ec53 2b17 	vmov	r2, r3, d7
 80199a4:	e7aa      	b.n	80198fc <_strtod_l+0x98c>
 80199a6:	f1b8 0f01 	cmp.w	r8, #1
 80199aa:	d103      	bne.n	80199b4 <_strtod_l+0xa44>
 80199ac:	f1b9 0f00 	cmp.w	r9, #0
 80199b0:	f43f ad8a 	beq.w	80194c8 <_strtod_l+0x558>
 80199b4:	4b47      	ldr	r3, [pc, #284]	; (8019ad4 <_strtod_l+0xb64>)
 80199b6:	2200      	movs	r2, #0
 80199b8:	e79e      	b.n	80198f8 <_strtod_l+0x988>
 80199ba:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80199be:	ee20 db0d 	vmul.f64	d13, d0, d13
 80199c2:	f1ba 0f00 	cmp.w	sl, #0
 80199c6:	d104      	bne.n	80199d2 <_strtod_l+0xa62>
 80199c8:	eeb1 7b4d 	vneg.f64	d7, d13
 80199cc:	ec53 2b17 	vmov	r2, r3, d7
 80199d0:	e794      	b.n	80198fc <_strtod_l+0x98c>
 80199d2:	eeb0 7b4d 	vmov.f64	d7, d13
 80199d6:	e7f9      	b.n	80199cc <_strtod_l+0xa5c>
 80199d8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80199dc:	9b04      	ldr	r3, [sp, #16]
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d1ba      	bne.n	8019958 <_strtod_l+0x9e8>
 80199e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80199e6:	0d1b      	lsrs	r3, r3, #20
 80199e8:	051b      	lsls	r3, r3, #20
 80199ea:	4299      	cmp	r1, r3
 80199ec:	d1b4      	bne.n	8019958 <_strtod_l+0x9e8>
 80199ee:	ec51 0b1d 	vmov	r0, r1, d13
 80199f2:	f7e6 feb9 	bl	8000768 <__aeabi_d2lz>
 80199f6:	f7e6 fe71 	bl	80006dc <__aeabi_l2d>
 80199fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80199fe:	ec41 0b17 	vmov	d7, r0, r1
 8019a02:	ea43 0308 	orr.w	r3, r3, r8
 8019a06:	ea53 030a 	orrs.w	r3, r3, sl
 8019a0a:	ee3d db47 	vsub.f64	d13, d13, d7
 8019a0e:	d03c      	beq.n	8019a8a <_strtod_l+0xb1a>
 8019a10:	eeb4 dbca 	vcmpe.f64	d13, d10
 8019a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a18:	f53f acf0 	bmi.w	80193fc <_strtod_l+0x48c>
 8019a1c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8019a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a24:	dd98      	ble.n	8019958 <_strtod_l+0x9e8>
 8019a26:	e4e9      	b.n	80193fc <_strtod_l+0x48c>
 8019a28:	9804      	ldr	r0, [sp, #16]
 8019a2a:	b1f0      	cbz	r0, 8019a6a <_strtod_l+0xafa>
 8019a2c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8019a30:	d81b      	bhi.n	8019a6a <_strtod_l+0xafa>
 8019a32:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8019ab8 <_strtod_l+0xb48>
 8019a36:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8019a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a3e:	d811      	bhi.n	8019a64 <_strtod_l+0xaf4>
 8019a40:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8019a44:	ee1d 3a10 	vmov	r3, s26
 8019a48:	2b01      	cmp	r3, #1
 8019a4a:	bf38      	it	cc
 8019a4c:	2301      	movcc	r3, #1
 8019a4e:	ee0d 3a10 	vmov	s26, r3
 8019a52:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8019a56:	f1ba 0f00 	cmp.w	sl, #0
 8019a5a:	d113      	bne.n	8019a84 <_strtod_l+0xb14>
 8019a5c:	eeb1 7b4d 	vneg.f64	d7, d13
 8019a60:	ec53 2b17 	vmov	r2, r3, d7
 8019a64:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8019a68:	1a43      	subs	r3, r0, r1
 8019a6a:	eeb0 0b48 	vmov.f64	d0, d8
 8019a6e:	ec43 2b1c 	vmov	d12, r2, r3
 8019a72:	910a      	str	r1, [sp, #40]	; 0x28
 8019a74:	f001 fdec 	bl	801b650 <__ulp>
 8019a78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019a7a:	eeac 8b00 	vfma.f64	d8, d12, d0
 8019a7e:	ec59 8b18 	vmov	r8, r9, d8
 8019a82:	e7ab      	b.n	80199dc <_strtod_l+0xa6c>
 8019a84:	eeb0 7b4d 	vmov.f64	d7, d13
 8019a88:	e7ea      	b.n	8019a60 <_strtod_l+0xaf0>
 8019a8a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8019a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a92:	f57f af61 	bpl.w	8019958 <_strtod_l+0x9e8>
 8019a96:	e4b1      	b.n	80193fc <_strtod_l+0x48c>
 8019a98:	2300      	movs	r3, #0
 8019a9a:	9308      	str	r3, [sp, #32]
 8019a9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019a9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019aa0:	6013      	str	r3, [r2, #0]
 8019aa2:	f7ff baad 	b.w	8019000 <_strtod_l+0x90>
 8019aa6:	2a65      	cmp	r2, #101	; 0x65
 8019aa8:	f43f ab9f 	beq.w	80191ea <_strtod_l+0x27a>
 8019aac:	2a45      	cmp	r2, #69	; 0x45
 8019aae:	f43f ab9c 	beq.w	80191ea <_strtod_l+0x27a>
 8019ab2:	2101      	movs	r1, #1
 8019ab4:	f7ff bbd4 	b.w	8019260 <_strtod_l+0x2f0>
 8019ab8:	ffc00000 	.word	0xffc00000
 8019abc:	41dfffff 	.word	0x41dfffff
 8019ac0:	000fffff 	.word	0x000fffff
 8019ac4:	7ff00000 	.word	0x7ff00000
 8019ac8:	7fefffff 	.word	0x7fefffff
 8019acc:	3ff00000 	.word	0x3ff00000
 8019ad0:	7c9fffff 	.word	0x7c9fffff
 8019ad4:	bff00000 	.word	0xbff00000
 8019ad8:	7fe00000 	.word	0x7fe00000

08019adc <_strtod_r>:
 8019adc:	4b01      	ldr	r3, [pc, #4]	; (8019ae4 <_strtod_r+0x8>)
 8019ade:	f7ff ba47 	b.w	8018f70 <_strtod_l>
 8019ae2:	bf00      	nop
 8019ae4:	24000168 	.word	0x24000168

08019ae8 <_strtol_l.constprop.0>:
 8019ae8:	2b01      	cmp	r3, #1
 8019aea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019aee:	d001      	beq.n	8019af4 <_strtol_l.constprop.0+0xc>
 8019af0:	2b24      	cmp	r3, #36	; 0x24
 8019af2:	d906      	bls.n	8019b02 <_strtol_l.constprop.0+0x1a>
 8019af4:	f7fe fb30 	bl	8018158 <__errno>
 8019af8:	2316      	movs	r3, #22
 8019afa:	6003      	str	r3, [r0, #0]
 8019afc:	2000      	movs	r0, #0
 8019afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8019be8 <_strtol_l.constprop.0+0x100>
 8019b06:	460d      	mov	r5, r1
 8019b08:	462e      	mov	r6, r5
 8019b0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019b0e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8019b12:	f017 0708 	ands.w	r7, r7, #8
 8019b16:	d1f7      	bne.n	8019b08 <_strtol_l.constprop.0+0x20>
 8019b18:	2c2d      	cmp	r4, #45	; 0x2d
 8019b1a:	d132      	bne.n	8019b82 <_strtol_l.constprop.0+0x9a>
 8019b1c:	782c      	ldrb	r4, [r5, #0]
 8019b1e:	2701      	movs	r7, #1
 8019b20:	1cb5      	adds	r5, r6, #2
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d05b      	beq.n	8019bde <_strtol_l.constprop.0+0xf6>
 8019b26:	2b10      	cmp	r3, #16
 8019b28:	d109      	bne.n	8019b3e <_strtol_l.constprop.0+0x56>
 8019b2a:	2c30      	cmp	r4, #48	; 0x30
 8019b2c:	d107      	bne.n	8019b3e <_strtol_l.constprop.0+0x56>
 8019b2e:	782c      	ldrb	r4, [r5, #0]
 8019b30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019b34:	2c58      	cmp	r4, #88	; 0x58
 8019b36:	d14d      	bne.n	8019bd4 <_strtol_l.constprop.0+0xec>
 8019b38:	786c      	ldrb	r4, [r5, #1]
 8019b3a:	2310      	movs	r3, #16
 8019b3c:	3502      	adds	r5, #2
 8019b3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8019b42:	f108 38ff 	add.w	r8, r8, #4294967295
 8019b46:	f04f 0c00 	mov.w	ip, #0
 8019b4a:	fbb8 f9f3 	udiv	r9, r8, r3
 8019b4e:	4666      	mov	r6, ip
 8019b50:	fb03 8a19 	mls	sl, r3, r9, r8
 8019b54:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8019b58:	f1be 0f09 	cmp.w	lr, #9
 8019b5c:	d816      	bhi.n	8019b8c <_strtol_l.constprop.0+0xa4>
 8019b5e:	4674      	mov	r4, lr
 8019b60:	42a3      	cmp	r3, r4
 8019b62:	dd24      	ble.n	8019bae <_strtol_l.constprop.0+0xc6>
 8019b64:	f1bc 0f00 	cmp.w	ip, #0
 8019b68:	db1e      	blt.n	8019ba8 <_strtol_l.constprop.0+0xc0>
 8019b6a:	45b1      	cmp	r9, r6
 8019b6c:	d31c      	bcc.n	8019ba8 <_strtol_l.constprop.0+0xc0>
 8019b6e:	d101      	bne.n	8019b74 <_strtol_l.constprop.0+0x8c>
 8019b70:	45a2      	cmp	sl, r4
 8019b72:	db19      	blt.n	8019ba8 <_strtol_l.constprop.0+0xc0>
 8019b74:	fb06 4603 	mla	r6, r6, r3, r4
 8019b78:	f04f 0c01 	mov.w	ip, #1
 8019b7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019b80:	e7e8      	b.n	8019b54 <_strtol_l.constprop.0+0x6c>
 8019b82:	2c2b      	cmp	r4, #43	; 0x2b
 8019b84:	bf04      	itt	eq
 8019b86:	782c      	ldrbeq	r4, [r5, #0]
 8019b88:	1cb5      	addeq	r5, r6, #2
 8019b8a:	e7ca      	b.n	8019b22 <_strtol_l.constprop.0+0x3a>
 8019b8c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8019b90:	f1be 0f19 	cmp.w	lr, #25
 8019b94:	d801      	bhi.n	8019b9a <_strtol_l.constprop.0+0xb2>
 8019b96:	3c37      	subs	r4, #55	; 0x37
 8019b98:	e7e2      	b.n	8019b60 <_strtol_l.constprop.0+0x78>
 8019b9a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8019b9e:	f1be 0f19 	cmp.w	lr, #25
 8019ba2:	d804      	bhi.n	8019bae <_strtol_l.constprop.0+0xc6>
 8019ba4:	3c57      	subs	r4, #87	; 0x57
 8019ba6:	e7db      	b.n	8019b60 <_strtol_l.constprop.0+0x78>
 8019ba8:	f04f 3cff 	mov.w	ip, #4294967295
 8019bac:	e7e6      	b.n	8019b7c <_strtol_l.constprop.0+0x94>
 8019bae:	f1bc 0f00 	cmp.w	ip, #0
 8019bb2:	da05      	bge.n	8019bc0 <_strtol_l.constprop.0+0xd8>
 8019bb4:	2322      	movs	r3, #34	; 0x22
 8019bb6:	6003      	str	r3, [r0, #0]
 8019bb8:	4646      	mov	r6, r8
 8019bba:	b942      	cbnz	r2, 8019bce <_strtol_l.constprop.0+0xe6>
 8019bbc:	4630      	mov	r0, r6
 8019bbe:	e79e      	b.n	8019afe <_strtol_l.constprop.0+0x16>
 8019bc0:	b107      	cbz	r7, 8019bc4 <_strtol_l.constprop.0+0xdc>
 8019bc2:	4276      	negs	r6, r6
 8019bc4:	2a00      	cmp	r2, #0
 8019bc6:	d0f9      	beq.n	8019bbc <_strtol_l.constprop.0+0xd4>
 8019bc8:	f1bc 0f00 	cmp.w	ip, #0
 8019bcc:	d000      	beq.n	8019bd0 <_strtol_l.constprop.0+0xe8>
 8019bce:	1e69      	subs	r1, r5, #1
 8019bd0:	6011      	str	r1, [r2, #0]
 8019bd2:	e7f3      	b.n	8019bbc <_strtol_l.constprop.0+0xd4>
 8019bd4:	2430      	movs	r4, #48	; 0x30
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d1b1      	bne.n	8019b3e <_strtol_l.constprop.0+0x56>
 8019bda:	2308      	movs	r3, #8
 8019bdc:	e7af      	b.n	8019b3e <_strtol_l.constprop.0+0x56>
 8019bde:	2c30      	cmp	r4, #48	; 0x30
 8019be0:	d0a5      	beq.n	8019b2e <_strtol_l.constprop.0+0x46>
 8019be2:	230a      	movs	r3, #10
 8019be4:	e7ab      	b.n	8019b3e <_strtol_l.constprop.0+0x56>
 8019be6:	bf00      	nop
 8019be8:	0801cec9 	.word	0x0801cec9

08019bec <_strtol_r>:
 8019bec:	f7ff bf7c 	b.w	8019ae8 <_strtol_l.constprop.0>

08019bf0 <_write_r>:
 8019bf0:	b538      	push	{r3, r4, r5, lr}
 8019bf2:	4d07      	ldr	r5, [pc, #28]	; (8019c10 <_write_r+0x20>)
 8019bf4:	4604      	mov	r4, r0
 8019bf6:	4608      	mov	r0, r1
 8019bf8:	4611      	mov	r1, r2
 8019bfa:	2200      	movs	r2, #0
 8019bfc:	602a      	str	r2, [r5, #0]
 8019bfe:	461a      	mov	r2, r3
 8019c00:	f7e8 ff2d 	bl	8002a5e <_write>
 8019c04:	1c43      	adds	r3, r0, #1
 8019c06:	d102      	bne.n	8019c0e <_write_r+0x1e>
 8019c08:	682b      	ldr	r3, [r5, #0]
 8019c0a:	b103      	cbz	r3, 8019c0e <_write_r+0x1e>
 8019c0c:	6023      	str	r3, [r4, #0]
 8019c0e:	bd38      	pop	{r3, r4, r5, pc}
 8019c10:	24002b70 	.word	0x24002b70

08019c14 <_close_r>:
 8019c14:	b538      	push	{r3, r4, r5, lr}
 8019c16:	4d06      	ldr	r5, [pc, #24]	; (8019c30 <_close_r+0x1c>)
 8019c18:	2300      	movs	r3, #0
 8019c1a:	4604      	mov	r4, r0
 8019c1c:	4608      	mov	r0, r1
 8019c1e:	602b      	str	r3, [r5, #0]
 8019c20:	f7e8 ff39 	bl	8002a96 <_close>
 8019c24:	1c43      	adds	r3, r0, #1
 8019c26:	d102      	bne.n	8019c2e <_close_r+0x1a>
 8019c28:	682b      	ldr	r3, [r5, #0]
 8019c2a:	b103      	cbz	r3, 8019c2e <_close_r+0x1a>
 8019c2c:	6023      	str	r3, [r4, #0]
 8019c2e:	bd38      	pop	{r3, r4, r5, pc}
 8019c30:	24002b70 	.word	0x24002b70

08019c34 <quorem>:
 8019c34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c38:	6903      	ldr	r3, [r0, #16]
 8019c3a:	690c      	ldr	r4, [r1, #16]
 8019c3c:	42a3      	cmp	r3, r4
 8019c3e:	4607      	mov	r7, r0
 8019c40:	f2c0 8081 	blt.w	8019d46 <quorem+0x112>
 8019c44:	3c01      	subs	r4, #1
 8019c46:	f101 0814 	add.w	r8, r1, #20
 8019c4a:	f100 0514 	add.w	r5, r0, #20
 8019c4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019c52:	9301      	str	r3, [sp, #4]
 8019c54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019c58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019c5c:	3301      	adds	r3, #1
 8019c5e:	429a      	cmp	r2, r3
 8019c60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019c64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019c68:	fbb2 f6f3 	udiv	r6, r2, r3
 8019c6c:	d331      	bcc.n	8019cd2 <quorem+0x9e>
 8019c6e:	f04f 0e00 	mov.w	lr, #0
 8019c72:	4640      	mov	r0, r8
 8019c74:	46ac      	mov	ip, r5
 8019c76:	46f2      	mov	sl, lr
 8019c78:	f850 2b04 	ldr.w	r2, [r0], #4
 8019c7c:	b293      	uxth	r3, r2
 8019c7e:	fb06 e303 	mla	r3, r6, r3, lr
 8019c82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8019c86:	b29b      	uxth	r3, r3
 8019c88:	ebaa 0303 	sub.w	r3, sl, r3
 8019c8c:	f8dc a000 	ldr.w	sl, [ip]
 8019c90:	0c12      	lsrs	r2, r2, #16
 8019c92:	fa13 f38a 	uxtah	r3, r3, sl
 8019c96:	fb06 e202 	mla	r2, r6, r2, lr
 8019c9a:	9300      	str	r3, [sp, #0]
 8019c9c:	9b00      	ldr	r3, [sp, #0]
 8019c9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019ca2:	b292      	uxth	r2, r2
 8019ca4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8019ca8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019cac:	f8bd 3000 	ldrh.w	r3, [sp]
 8019cb0:	4581      	cmp	r9, r0
 8019cb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019cb6:	f84c 3b04 	str.w	r3, [ip], #4
 8019cba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8019cbe:	d2db      	bcs.n	8019c78 <quorem+0x44>
 8019cc0:	f855 300b 	ldr.w	r3, [r5, fp]
 8019cc4:	b92b      	cbnz	r3, 8019cd2 <quorem+0x9e>
 8019cc6:	9b01      	ldr	r3, [sp, #4]
 8019cc8:	3b04      	subs	r3, #4
 8019cca:	429d      	cmp	r5, r3
 8019ccc:	461a      	mov	r2, r3
 8019cce:	d32e      	bcc.n	8019d2e <quorem+0xfa>
 8019cd0:	613c      	str	r4, [r7, #16]
 8019cd2:	4638      	mov	r0, r7
 8019cd4:	f001 fc16 	bl	801b504 <__mcmp>
 8019cd8:	2800      	cmp	r0, #0
 8019cda:	db24      	blt.n	8019d26 <quorem+0xf2>
 8019cdc:	3601      	adds	r6, #1
 8019cde:	4628      	mov	r0, r5
 8019ce0:	f04f 0c00 	mov.w	ip, #0
 8019ce4:	f858 2b04 	ldr.w	r2, [r8], #4
 8019ce8:	f8d0 e000 	ldr.w	lr, [r0]
 8019cec:	b293      	uxth	r3, r2
 8019cee:	ebac 0303 	sub.w	r3, ip, r3
 8019cf2:	0c12      	lsrs	r2, r2, #16
 8019cf4:	fa13 f38e 	uxtah	r3, r3, lr
 8019cf8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8019cfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019d00:	b29b      	uxth	r3, r3
 8019d02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019d06:	45c1      	cmp	r9, r8
 8019d08:	f840 3b04 	str.w	r3, [r0], #4
 8019d0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019d10:	d2e8      	bcs.n	8019ce4 <quorem+0xb0>
 8019d12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019d16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019d1a:	b922      	cbnz	r2, 8019d26 <quorem+0xf2>
 8019d1c:	3b04      	subs	r3, #4
 8019d1e:	429d      	cmp	r5, r3
 8019d20:	461a      	mov	r2, r3
 8019d22:	d30a      	bcc.n	8019d3a <quorem+0x106>
 8019d24:	613c      	str	r4, [r7, #16]
 8019d26:	4630      	mov	r0, r6
 8019d28:	b003      	add	sp, #12
 8019d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d2e:	6812      	ldr	r2, [r2, #0]
 8019d30:	3b04      	subs	r3, #4
 8019d32:	2a00      	cmp	r2, #0
 8019d34:	d1cc      	bne.n	8019cd0 <quorem+0x9c>
 8019d36:	3c01      	subs	r4, #1
 8019d38:	e7c7      	b.n	8019cca <quorem+0x96>
 8019d3a:	6812      	ldr	r2, [r2, #0]
 8019d3c:	3b04      	subs	r3, #4
 8019d3e:	2a00      	cmp	r2, #0
 8019d40:	d1f0      	bne.n	8019d24 <quorem+0xf0>
 8019d42:	3c01      	subs	r4, #1
 8019d44:	e7eb      	b.n	8019d1e <quorem+0xea>
 8019d46:	2000      	movs	r0, #0
 8019d48:	e7ee      	b.n	8019d28 <quorem+0xf4>
 8019d4a:	0000      	movs	r0, r0
 8019d4c:	0000      	movs	r0, r0
	...

08019d50 <_dtoa_r>:
 8019d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d54:	ed2d 8b02 	vpush	{d8}
 8019d58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019d5a:	b091      	sub	sp, #68	; 0x44
 8019d5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019d60:	ec59 8b10 	vmov	r8, r9, d0
 8019d64:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8019d66:	9106      	str	r1, [sp, #24]
 8019d68:	4606      	mov	r6, r0
 8019d6a:	9208      	str	r2, [sp, #32]
 8019d6c:	930c      	str	r3, [sp, #48]	; 0x30
 8019d6e:	b975      	cbnz	r5, 8019d8e <_dtoa_r+0x3e>
 8019d70:	2010      	movs	r0, #16
 8019d72:	f001 f8e1 	bl	801af38 <malloc>
 8019d76:	4602      	mov	r2, r0
 8019d78:	6270      	str	r0, [r6, #36]	; 0x24
 8019d7a:	b920      	cbnz	r0, 8019d86 <_dtoa_r+0x36>
 8019d7c:	4baa      	ldr	r3, [pc, #680]	; (801a028 <_dtoa_r+0x2d8>)
 8019d7e:	21ea      	movs	r1, #234	; 0xea
 8019d80:	48aa      	ldr	r0, [pc, #680]	; (801a02c <_dtoa_r+0x2dc>)
 8019d82:	f002 f84f 	bl	801be24 <__assert_func>
 8019d86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019d8a:	6005      	str	r5, [r0, #0]
 8019d8c:	60c5      	str	r5, [r0, #12]
 8019d8e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019d90:	6819      	ldr	r1, [r3, #0]
 8019d92:	b151      	cbz	r1, 8019daa <_dtoa_r+0x5a>
 8019d94:	685a      	ldr	r2, [r3, #4]
 8019d96:	604a      	str	r2, [r1, #4]
 8019d98:	2301      	movs	r3, #1
 8019d9a:	4093      	lsls	r3, r2
 8019d9c:	608b      	str	r3, [r1, #8]
 8019d9e:	4630      	mov	r0, r6
 8019da0:	f001 f924 	bl	801afec <_Bfree>
 8019da4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019da6:	2200      	movs	r2, #0
 8019da8:	601a      	str	r2, [r3, #0]
 8019daa:	f1b9 0300 	subs.w	r3, r9, #0
 8019dae:	bfbb      	ittet	lt
 8019db0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8019db4:	9303      	strlt	r3, [sp, #12]
 8019db6:	2300      	movge	r3, #0
 8019db8:	2201      	movlt	r2, #1
 8019dba:	bfac      	ite	ge
 8019dbc:	6023      	strge	r3, [r4, #0]
 8019dbe:	6022      	strlt	r2, [r4, #0]
 8019dc0:	4b9b      	ldr	r3, [pc, #620]	; (801a030 <_dtoa_r+0x2e0>)
 8019dc2:	9c03      	ldr	r4, [sp, #12]
 8019dc4:	43a3      	bics	r3, r4
 8019dc6:	d11c      	bne.n	8019e02 <_dtoa_r+0xb2>
 8019dc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019dca:	f242 730f 	movw	r3, #9999	; 0x270f
 8019dce:	6013      	str	r3, [r2, #0]
 8019dd0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8019dd4:	ea53 0308 	orrs.w	r3, r3, r8
 8019dd8:	f000 84fd 	beq.w	801a7d6 <_dtoa_r+0xa86>
 8019ddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019dde:	b963      	cbnz	r3, 8019dfa <_dtoa_r+0xaa>
 8019de0:	4b94      	ldr	r3, [pc, #592]	; (801a034 <_dtoa_r+0x2e4>)
 8019de2:	e01f      	b.n	8019e24 <_dtoa_r+0xd4>
 8019de4:	4b94      	ldr	r3, [pc, #592]	; (801a038 <_dtoa_r+0x2e8>)
 8019de6:	9301      	str	r3, [sp, #4]
 8019de8:	3308      	adds	r3, #8
 8019dea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019dec:	6013      	str	r3, [r2, #0]
 8019dee:	9801      	ldr	r0, [sp, #4]
 8019df0:	b011      	add	sp, #68	; 0x44
 8019df2:	ecbd 8b02 	vpop	{d8}
 8019df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dfa:	4b8e      	ldr	r3, [pc, #568]	; (801a034 <_dtoa_r+0x2e4>)
 8019dfc:	9301      	str	r3, [sp, #4]
 8019dfe:	3303      	adds	r3, #3
 8019e00:	e7f3      	b.n	8019dea <_dtoa_r+0x9a>
 8019e02:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019e06:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e0e:	d10b      	bne.n	8019e28 <_dtoa_r+0xd8>
 8019e10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019e12:	2301      	movs	r3, #1
 8019e14:	6013      	str	r3, [r2, #0]
 8019e16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	f000 84d9 	beq.w	801a7d0 <_dtoa_r+0xa80>
 8019e1e:	4887      	ldr	r0, [pc, #540]	; (801a03c <_dtoa_r+0x2ec>)
 8019e20:	6018      	str	r0, [r3, #0]
 8019e22:	1e43      	subs	r3, r0, #1
 8019e24:	9301      	str	r3, [sp, #4]
 8019e26:	e7e2      	b.n	8019dee <_dtoa_r+0x9e>
 8019e28:	a90f      	add	r1, sp, #60	; 0x3c
 8019e2a:	aa0e      	add	r2, sp, #56	; 0x38
 8019e2c:	4630      	mov	r0, r6
 8019e2e:	eeb0 0b48 	vmov.f64	d0, d8
 8019e32:	f001 fc89 	bl	801b748 <__d2b>
 8019e36:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8019e3a:	4605      	mov	r5, r0
 8019e3c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8019e3e:	2900      	cmp	r1, #0
 8019e40:	d046      	beq.n	8019ed0 <_dtoa_r+0x180>
 8019e42:	ee18 4a90 	vmov	r4, s17
 8019e46:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019e4a:	ec53 2b18 	vmov	r2, r3, d8
 8019e4e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8019e52:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019e56:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8019e5a:	2400      	movs	r4, #0
 8019e5c:	ec43 2b16 	vmov	d6, r2, r3
 8019e60:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8019e64:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801a010 <_dtoa_r+0x2c0>
 8019e68:	ee36 7b47 	vsub.f64	d7, d6, d7
 8019e6c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 801a018 <_dtoa_r+0x2c8>
 8019e70:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019e74:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801a020 <_dtoa_r+0x2d0>
 8019e78:	ee07 1a90 	vmov	s15, r1
 8019e7c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8019e80:	eeb0 7b46 	vmov.f64	d7, d6
 8019e84:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019e88:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019e8c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8019e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e94:	ee16 ba90 	vmov	fp, s13
 8019e98:	940a      	str	r4, [sp, #40]	; 0x28
 8019e9a:	d508      	bpl.n	8019eae <_dtoa_r+0x15e>
 8019e9c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019ea0:	eeb4 6b47 	vcmp.f64	d6, d7
 8019ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ea8:	bf18      	it	ne
 8019eaa:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8019eae:	f1bb 0f16 	cmp.w	fp, #22
 8019eb2:	d82f      	bhi.n	8019f14 <_dtoa_r+0x1c4>
 8019eb4:	4b62      	ldr	r3, [pc, #392]	; (801a040 <_dtoa_r+0x2f0>)
 8019eb6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019eba:	ed93 7b00 	vldr	d7, [r3]
 8019ebe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ec6:	d501      	bpl.n	8019ecc <_dtoa_r+0x17c>
 8019ec8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019ecc:	2300      	movs	r3, #0
 8019ece:	e022      	b.n	8019f16 <_dtoa_r+0x1c6>
 8019ed0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019ed2:	4401      	add	r1, r0
 8019ed4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8019ed8:	2b20      	cmp	r3, #32
 8019eda:	bfc1      	itttt	gt
 8019edc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8019ee0:	fa04 f303 	lslgt.w	r3, r4, r3
 8019ee4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8019ee8:	fa28 f804 	lsrgt.w	r8, r8, r4
 8019eec:	bfd6      	itet	le
 8019eee:	f1c3 0320 	rsble	r3, r3, #32
 8019ef2:	ea43 0808 	orrgt.w	r8, r3, r8
 8019ef6:	fa08 f803 	lslle.w	r8, r8, r3
 8019efa:	ee07 8a90 	vmov	s15, r8
 8019efe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019f02:	3901      	subs	r1, #1
 8019f04:	ee17 4a90 	vmov	r4, s15
 8019f08:	ec53 2b17 	vmov	r2, r3, d7
 8019f0c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8019f10:	2401      	movs	r4, #1
 8019f12:	e7a3      	b.n	8019e5c <_dtoa_r+0x10c>
 8019f14:	2301      	movs	r3, #1
 8019f16:	930b      	str	r3, [sp, #44]	; 0x2c
 8019f18:	1a43      	subs	r3, r0, r1
 8019f1a:	1e5a      	subs	r2, r3, #1
 8019f1c:	bf45      	ittet	mi
 8019f1e:	f1c3 0301 	rsbmi	r3, r3, #1
 8019f22:	9304      	strmi	r3, [sp, #16]
 8019f24:	2300      	movpl	r3, #0
 8019f26:	2300      	movmi	r3, #0
 8019f28:	9205      	str	r2, [sp, #20]
 8019f2a:	bf54      	ite	pl
 8019f2c:	9304      	strpl	r3, [sp, #16]
 8019f2e:	9305      	strmi	r3, [sp, #20]
 8019f30:	f1bb 0f00 	cmp.w	fp, #0
 8019f34:	db18      	blt.n	8019f68 <_dtoa_r+0x218>
 8019f36:	9b05      	ldr	r3, [sp, #20]
 8019f38:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8019f3c:	445b      	add	r3, fp
 8019f3e:	9305      	str	r3, [sp, #20]
 8019f40:	2300      	movs	r3, #0
 8019f42:	9a06      	ldr	r2, [sp, #24]
 8019f44:	2a09      	cmp	r2, #9
 8019f46:	d849      	bhi.n	8019fdc <_dtoa_r+0x28c>
 8019f48:	2a05      	cmp	r2, #5
 8019f4a:	bfc4      	itt	gt
 8019f4c:	3a04      	subgt	r2, #4
 8019f4e:	9206      	strgt	r2, [sp, #24]
 8019f50:	9a06      	ldr	r2, [sp, #24]
 8019f52:	f1a2 0202 	sub.w	r2, r2, #2
 8019f56:	bfcc      	ite	gt
 8019f58:	2400      	movgt	r4, #0
 8019f5a:	2401      	movle	r4, #1
 8019f5c:	2a03      	cmp	r2, #3
 8019f5e:	d848      	bhi.n	8019ff2 <_dtoa_r+0x2a2>
 8019f60:	e8df f002 	tbb	[pc, r2]
 8019f64:	3a2c2e0b 	.word	0x3a2c2e0b
 8019f68:	9b04      	ldr	r3, [sp, #16]
 8019f6a:	2200      	movs	r2, #0
 8019f6c:	eba3 030b 	sub.w	r3, r3, fp
 8019f70:	9304      	str	r3, [sp, #16]
 8019f72:	9209      	str	r2, [sp, #36]	; 0x24
 8019f74:	f1cb 0300 	rsb	r3, fp, #0
 8019f78:	e7e3      	b.n	8019f42 <_dtoa_r+0x1f2>
 8019f7a:	2200      	movs	r2, #0
 8019f7c:	9207      	str	r2, [sp, #28]
 8019f7e:	9a08      	ldr	r2, [sp, #32]
 8019f80:	2a00      	cmp	r2, #0
 8019f82:	dc39      	bgt.n	8019ff8 <_dtoa_r+0x2a8>
 8019f84:	f04f 0a01 	mov.w	sl, #1
 8019f88:	46d1      	mov	r9, sl
 8019f8a:	4652      	mov	r2, sl
 8019f8c:	f8cd a020 	str.w	sl, [sp, #32]
 8019f90:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8019f92:	2100      	movs	r1, #0
 8019f94:	6079      	str	r1, [r7, #4]
 8019f96:	2004      	movs	r0, #4
 8019f98:	f100 0c14 	add.w	ip, r0, #20
 8019f9c:	4594      	cmp	ip, r2
 8019f9e:	6879      	ldr	r1, [r7, #4]
 8019fa0:	d92f      	bls.n	801a002 <_dtoa_r+0x2b2>
 8019fa2:	4630      	mov	r0, r6
 8019fa4:	930d      	str	r3, [sp, #52]	; 0x34
 8019fa6:	f000 ffe1 	bl	801af6c <_Balloc>
 8019faa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019fac:	9001      	str	r0, [sp, #4]
 8019fae:	4602      	mov	r2, r0
 8019fb0:	2800      	cmp	r0, #0
 8019fb2:	d149      	bne.n	801a048 <_dtoa_r+0x2f8>
 8019fb4:	4b23      	ldr	r3, [pc, #140]	; (801a044 <_dtoa_r+0x2f4>)
 8019fb6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8019fba:	e6e1      	b.n	8019d80 <_dtoa_r+0x30>
 8019fbc:	2201      	movs	r2, #1
 8019fbe:	e7dd      	b.n	8019f7c <_dtoa_r+0x22c>
 8019fc0:	2200      	movs	r2, #0
 8019fc2:	9207      	str	r2, [sp, #28]
 8019fc4:	9a08      	ldr	r2, [sp, #32]
 8019fc6:	eb0b 0a02 	add.w	sl, fp, r2
 8019fca:	f10a 0901 	add.w	r9, sl, #1
 8019fce:	464a      	mov	r2, r9
 8019fd0:	2a01      	cmp	r2, #1
 8019fd2:	bfb8      	it	lt
 8019fd4:	2201      	movlt	r2, #1
 8019fd6:	e7db      	b.n	8019f90 <_dtoa_r+0x240>
 8019fd8:	2201      	movs	r2, #1
 8019fda:	e7f2      	b.n	8019fc2 <_dtoa_r+0x272>
 8019fdc:	2401      	movs	r4, #1
 8019fde:	2200      	movs	r2, #0
 8019fe0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8019fe4:	f04f 3aff 	mov.w	sl, #4294967295
 8019fe8:	2100      	movs	r1, #0
 8019fea:	46d1      	mov	r9, sl
 8019fec:	2212      	movs	r2, #18
 8019fee:	9108      	str	r1, [sp, #32]
 8019ff0:	e7ce      	b.n	8019f90 <_dtoa_r+0x240>
 8019ff2:	2201      	movs	r2, #1
 8019ff4:	9207      	str	r2, [sp, #28]
 8019ff6:	e7f5      	b.n	8019fe4 <_dtoa_r+0x294>
 8019ff8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8019ffc:	46d1      	mov	r9, sl
 8019ffe:	4652      	mov	r2, sl
 801a000:	e7c6      	b.n	8019f90 <_dtoa_r+0x240>
 801a002:	3101      	adds	r1, #1
 801a004:	6079      	str	r1, [r7, #4]
 801a006:	0040      	lsls	r0, r0, #1
 801a008:	e7c6      	b.n	8019f98 <_dtoa_r+0x248>
 801a00a:	bf00      	nop
 801a00c:	f3af 8000 	nop.w
 801a010:	636f4361 	.word	0x636f4361
 801a014:	3fd287a7 	.word	0x3fd287a7
 801a018:	8b60c8b3 	.word	0x8b60c8b3
 801a01c:	3fc68a28 	.word	0x3fc68a28
 801a020:	509f79fb 	.word	0x509f79fb
 801a024:	3fd34413 	.word	0x3fd34413
 801a028:	0801cfd6 	.word	0x0801cfd6
 801a02c:	0801cfed 	.word	0x0801cfed
 801a030:	7ff00000 	.word	0x7ff00000
 801a034:	0801cfd2 	.word	0x0801cfd2
 801a038:	0801cfc9 	.word	0x0801cfc9
 801a03c:	0801ce4d 	.word	0x0801ce4d
 801a040:	0801d158 	.word	0x0801d158
 801a044:	0801d048 	.word	0x0801d048
 801a048:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801a04a:	9901      	ldr	r1, [sp, #4]
 801a04c:	6011      	str	r1, [r2, #0]
 801a04e:	f1b9 0f0e 	cmp.w	r9, #14
 801a052:	d86c      	bhi.n	801a12e <_dtoa_r+0x3de>
 801a054:	2c00      	cmp	r4, #0
 801a056:	d06a      	beq.n	801a12e <_dtoa_r+0x3de>
 801a058:	f1bb 0f00 	cmp.w	fp, #0
 801a05c:	f340 80a0 	ble.w	801a1a0 <_dtoa_r+0x450>
 801a060:	49c1      	ldr	r1, [pc, #772]	; (801a368 <_dtoa_r+0x618>)
 801a062:	f00b 020f 	and.w	r2, fp, #15
 801a066:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801a06a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a06e:	ed92 7b00 	vldr	d7, [r2]
 801a072:	ea4f 112b 	mov.w	r1, fp, asr #4
 801a076:	f000 8087 	beq.w	801a188 <_dtoa_r+0x438>
 801a07a:	4abc      	ldr	r2, [pc, #752]	; (801a36c <_dtoa_r+0x61c>)
 801a07c:	ed92 6b08 	vldr	d6, [r2, #32]
 801a080:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a084:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a088:	f001 010f 	and.w	r1, r1, #15
 801a08c:	2203      	movs	r2, #3
 801a08e:	48b7      	ldr	r0, [pc, #732]	; (801a36c <_dtoa_r+0x61c>)
 801a090:	2900      	cmp	r1, #0
 801a092:	d17b      	bne.n	801a18c <_dtoa_r+0x43c>
 801a094:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a098:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a09c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a0a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a0a2:	2900      	cmp	r1, #0
 801a0a4:	f000 80a2 	beq.w	801a1ec <_dtoa_r+0x49c>
 801a0a8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a0ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a0b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0b8:	f140 8098 	bpl.w	801a1ec <_dtoa_r+0x49c>
 801a0bc:	f1b9 0f00 	cmp.w	r9, #0
 801a0c0:	f000 8094 	beq.w	801a1ec <_dtoa_r+0x49c>
 801a0c4:	f1ba 0f00 	cmp.w	sl, #0
 801a0c8:	dd2f      	ble.n	801a12a <_dtoa_r+0x3da>
 801a0ca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a0ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a0d2:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a0d6:	f10b 37ff 	add.w	r7, fp, #4294967295
 801a0da:	3201      	adds	r2, #1
 801a0dc:	4650      	mov	r0, sl
 801a0de:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a0e2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a0e6:	ee07 2a90 	vmov	s15, r2
 801a0ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a0ee:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a0f2:	ee15 4a90 	vmov	r4, s11
 801a0f6:	ec52 1b15 	vmov	r1, r2, d5
 801a0fa:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801a0fe:	2800      	cmp	r0, #0
 801a100:	d177      	bne.n	801a1f2 <_dtoa_r+0x4a2>
 801a102:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a106:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a10a:	ec42 1b17 	vmov	d7, r1, r2
 801a10e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a116:	f300 8263 	bgt.w	801a5e0 <_dtoa_r+0x890>
 801a11a:	eeb1 7b47 	vneg.f64	d7, d7
 801a11e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a126:	f100 8258 	bmi.w	801a5da <_dtoa_r+0x88a>
 801a12a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a12e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a130:	2a00      	cmp	r2, #0
 801a132:	f2c0 811d 	blt.w	801a370 <_dtoa_r+0x620>
 801a136:	f1bb 0f0e 	cmp.w	fp, #14
 801a13a:	f300 8119 	bgt.w	801a370 <_dtoa_r+0x620>
 801a13e:	4b8a      	ldr	r3, [pc, #552]	; (801a368 <_dtoa_r+0x618>)
 801a140:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a144:	ed93 6b00 	vldr	d6, [r3]
 801a148:	9b08      	ldr	r3, [sp, #32]
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	f280 80b7 	bge.w	801a2be <_dtoa_r+0x56e>
 801a150:	f1b9 0f00 	cmp.w	r9, #0
 801a154:	f300 80b3 	bgt.w	801a2be <_dtoa_r+0x56e>
 801a158:	f040 823f 	bne.w	801a5da <_dtoa_r+0x88a>
 801a15c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a160:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a164:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a168:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a170:	464c      	mov	r4, r9
 801a172:	464f      	mov	r7, r9
 801a174:	f280 8215 	bge.w	801a5a2 <_dtoa_r+0x852>
 801a178:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a17c:	2331      	movs	r3, #49	; 0x31
 801a17e:	f808 3b01 	strb.w	r3, [r8], #1
 801a182:	f10b 0b01 	add.w	fp, fp, #1
 801a186:	e211      	b.n	801a5ac <_dtoa_r+0x85c>
 801a188:	2202      	movs	r2, #2
 801a18a:	e780      	b.n	801a08e <_dtoa_r+0x33e>
 801a18c:	07cc      	lsls	r4, r1, #31
 801a18e:	d504      	bpl.n	801a19a <_dtoa_r+0x44a>
 801a190:	ed90 6b00 	vldr	d6, [r0]
 801a194:	3201      	adds	r2, #1
 801a196:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a19a:	1049      	asrs	r1, r1, #1
 801a19c:	3008      	adds	r0, #8
 801a19e:	e777      	b.n	801a090 <_dtoa_r+0x340>
 801a1a0:	d022      	beq.n	801a1e8 <_dtoa_r+0x498>
 801a1a2:	f1cb 0100 	rsb	r1, fp, #0
 801a1a6:	4a70      	ldr	r2, [pc, #448]	; (801a368 <_dtoa_r+0x618>)
 801a1a8:	f001 000f 	and.w	r0, r1, #15
 801a1ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a1b0:	ed92 7b00 	vldr	d7, [r2]
 801a1b4:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a1b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a1bc:	486b      	ldr	r0, [pc, #428]	; (801a36c <_dtoa_r+0x61c>)
 801a1be:	1109      	asrs	r1, r1, #4
 801a1c0:	2400      	movs	r4, #0
 801a1c2:	2202      	movs	r2, #2
 801a1c4:	b929      	cbnz	r1, 801a1d2 <_dtoa_r+0x482>
 801a1c6:	2c00      	cmp	r4, #0
 801a1c8:	f43f af6a 	beq.w	801a0a0 <_dtoa_r+0x350>
 801a1cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a1d0:	e766      	b.n	801a0a0 <_dtoa_r+0x350>
 801a1d2:	07cf      	lsls	r7, r1, #31
 801a1d4:	d505      	bpl.n	801a1e2 <_dtoa_r+0x492>
 801a1d6:	ed90 6b00 	vldr	d6, [r0]
 801a1da:	3201      	adds	r2, #1
 801a1dc:	2401      	movs	r4, #1
 801a1de:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a1e2:	1049      	asrs	r1, r1, #1
 801a1e4:	3008      	adds	r0, #8
 801a1e6:	e7ed      	b.n	801a1c4 <_dtoa_r+0x474>
 801a1e8:	2202      	movs	r2, #2
 801a1ea:	e759      	b.n	801a0a0 <_dtoa_r+0x350>
 801a1ec:	465f      	mov	r7, fp
 801a1ee:	4648      	mov	r0, r9
 801a1f0:	e775      	b.n	801a0de <_dtoa_r+0x38e>
 801a1f2:	ec42 1b17 	vmov	d7, r1, r2
 801a1f6:	4a5c      	ldr	r2, [pc, #368]	; (801a368 <_dtoa_r+0x618>)
 801a1f8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a1fc:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a200:	9a01      	ldr	r2, [sp, #4]
 801a202:	1814      	adds	r4, r2, r0
 801a204:	9a07      	ldr	r2, [sp, #28]
 801a206:	b352      	cbz	r2, 801a25e <_dtoa_r+0x50e>
 801a208:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801a20c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801a210:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a214:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a218:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a21c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a220:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a224:	ee14 2a90 	vmov	r2, s9
 801a228:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a22c:	3230      	adds	r2, #48	; 0x30
 801a22e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a232:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a23a:	f808 2b01 	strb.w	r2, [r8], #1
 801a23e:	d439      	bmi.n	801a2b4 <_dtoa_r+0x564>
 801a240:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a244:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a24c:	d472      	bmi.n	801a334 <_dtoa_r+0x5e4>
 801a24e:	45a0      	cmp	r8, r4
 801a250:	f43f af6b 	beq.w	801a12a <_dtoa_r+0x3da>
 801a254:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a258:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a25c:	e7e0      	b.n	801a220 <_dtoa_r+0x4d0>
 801a25e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a262:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a266:	4621      	mov	r1, r4
 801a268:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a26c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a270:	ee14 2a90 	vmov	r2, s9
 801a274:	3230      	adds	r2, #48	; 0x30
 801a276:	f808 2b01 	strb.w	r2, [r8], #1
 801a27a:	45a0      	cmp	r8, r4
 801a27c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a280:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a284:	d118      	bne.n	801a2b8 <_dtoa_r+0x568>
 801a286:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801a28a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a28e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a296:	dc4d      	bgt.n	801a334 <_dtoa_r+0x5e4>
 801a298:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a29c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2a4:	f57f af41 	bpl.w	801a12a <_dtoa_r+0x3da>
 801a2a8:	4688      	mov	r8, r1
 801a2aa:	3901      	subs	r1, #1
 801a2ac:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801a2b0:	2b30      	cmp	r3, #48	; 0x30
 801a2b2:	d0f9      	beq.n	801a2a8 <_dtoa_r+0x558>
 801a2b4:	46bb      	mov	fp, r7
 801a2b6:	e02a      	b.n	801a30e <_dtoa_r+0x5be>
 801a2b8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a2bc:	e7d6      	b.n	801a26c <_dtoa_r+0x51c>
 801a2be:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a2c2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801a2c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a2ca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a2ce:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a2d2:	ee15 3a10 	vmov	r3, s10
 801a2d6:	3330      	adds	r3, #48	; 0x30
 801a2d8:	f808 3b01 	strb.w	r3, [r8], #1
 801a2dc:	9b01      	ldr	r3, [sp, #4]
 801a2de:	eba8 0303 	sub.w	r3, r8, r3
 801a2e2:	4599      	cmp	r9, r3
 801a2e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a2e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a2ec:	d133      	bne.n	801a356 <_dtoa_r+0x606>
 801a2ee:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a2f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2fa:	dc1a      	bgt.n	801a332 <_dtoa_r+0x5e2>
 801a2fc:	eeb4 7b46 	vcmp.f64	d7, d6
 801a300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a304:	d103      	bne.n	801a30e <_dtoa_r+0x5be>
 801a306:	ee15 3a10 	vmov	r3, s10
 801a30a:	07d9      	lsls	r1, r3, #31
 801a30c:	d411      	bmi.n	801a332 <_dtoa_r+0x5e2>
 801a30e:	4629      	mov	r1, r5
 801a310:	4630      	mov	r0, r6
 801a312:	f000 fe6b 	bl	801afec <_Bfree>
 801a316:	2300      	movs	r3, #0
 801a318:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a31a:	f888 3000 	strb.w	r3, [r8]
 801a31e:	f10b 0301 	add.w	r3, fp, #1
 801a322:	6013      	str	r3, [r2, #0]
 801a324:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a326:	2b00      	cmp	r3, #0
 801a328:	f43f ad61 	beq.w	8019dee <_dtoa_r+0x9e>
 801a32c:	f8c3 8000 	str.w	r8, [r3]
 801a330:	e55d      	b.n	8019dee <_dtoa_r+0x9e>
 801a332:	465f      	mov	r7, fp
 801a334:	4643      	mov	r3, r8
 801a336:	4698      	mov	r8, r3
 801a338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a33c:	2a39      	cmp	r2, #57	; 0x39
 801a33e:	d106      	bne.n	801a34e <_dtoa_r+0x5fe>
 801a340:	9a01      	ldr	r2, [sp, #4]
 801a342:	429a      	cmp	r2, r3
 801a344:	d1f7      	bne.n	801a336 <_dtoa_r+0x5e6>
 801a346:	9901      	ldr	r1, [sp, #4]
 801a348:	2230      	movs	r2, #48	; 0x30
 801a34a:	3701      	adds	r7, #1
 801a34c:	700a      	strb	r2, [r1, #0]
 801a34e:	781a      	ldrb	r2, [r3, #0]
 801a350:	3201      	adds	r2, #1
 801a352:	701a      	strb	r2, [r3, #0]
 801a354:	e7ae      	b.n	801a2b4 <_dtoa_r+0x564>
 801a356:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a35a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a362:	d1b2      	bne.n	801a2ca <_dtoa_r+0x57a>
 801a364:	e7d3      	b.n	801a30e <_dtoa_r+0x5be>
 801a366:	bf00      	nop
 801a368:	0801d158 	.word	0x0801d158
 801a36c:	0801d130 	.word	0x0801d130
 801a370:	9907      	ldr	r1, [sp, #28]
 801a372:	2900      	cmp	r1, #0
 801a374:	f000 80d0 	beq.w	801a518 <_dtoa_r+0x7c8>
 801a378:	9906      	ldr	r1, [sp, #24]
 801a37a:	2901      	cmp	r1, #1
 801a37c:	f300 80b4 	bgt.w	801a4e8 <_dtoa_r+0x798>
 801a380:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a382:	2900      	cmp	r1, #0
 801a384:	f000 80ac 	beq.w	801a4e0 <_dtoa_r+0x790>
 801a388:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a38c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a390:	461c      	mov	r4, r3
 801a392:	930a      	str	r3, [sp, #40]	; 0x28
 801a394:	9b04      	ldr	r3, [sp, #16]
 801a396:	4413      	add	r3, r2
 801a398:	9304      	str	r3, [sp, #16]
 801a39a:	9b05      	ldr	r3, [sp, #20]
 801a39c:	2101      	movs	r1, #1
 801a39e:	4413      	add	r3, r2
 801a3a0:	4630      	mov	r0, r6
 801a3a2:	9305      	str	r3, [sp, #20]
 801a3a4:	f000 ff24 	bl	801b1f0 <__i2b>
 801a3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a3aa:	4607      	mov	r7, r0
 801a3ac:	f1b8 0f00 	cmp.w	r8, #0
 801a3b0:	dd0d      	ble.n	801a3ce <_dtoa_r+0x67e>
 801a3b2:	9a05      	ldr	r2, [sp, #20]
 801a3b4:	2a00      	cmp	r2, #0
 801a3b6:	dd0a      	ble.n	801a3ce <_dtoa_r+0x67e>
 801a3b8:	4542      	cmp	r2, r8
 801a3ba:	9904      	ldr	r1, [sp, #16]
 801a3bc:	bfa8      	it	ge
 801a3be:	4642      	movge	r2, r8
 801a3c0:	1a89      	subs	r1, r1, r2
 801a3c2:	9104      	str	r1, [sp, #16]
 801a3c4:	9905      	ldr	r1, [sp, #20]
 801a3c6:	eba8 0802 	sub.w	r8, r8, r2
 801a3ca:	1a8a      	subs	r2, r1, r2
 801a3cc:	9205      	str	r2, [sp, #20]
 801a3ce:	b303      	cbz	r3, 801a412 <_dtoa_r+0x6c2>
 801a3d0:	9a07      	ldr	r2, [sp, #28]
 801a3d2:	2a00      	cmp	r2, #0
 801a3d4:	f000 80a5 	beq.w	801a522 <_dtoa_r+0x7d2>
 801a3d8:	2c00      	cmp	r4, #0
 801a3da:	dd13      	ble.n	801a404 <_dtoa_r+0x6b4>
 801a3dc:	4639      	mov	r1, r7
 801a3de:	4622      	mov	r2, r4
 801a3e0:	4630      	mov	r0, r6
 801a3e2:	930d      	str	r3, [sp, #52]	; 0x34
 801a3e4:	f000 ffc4 	bl	801b370 <__pow5mult>
 801a3e8:	462a      	mov	r2, r5
 801a3ea:	4601      	mov	r1, r0
 801a3ec:	4607      	mov	r7, r0
 801a3ee:	4630      	mov	r0, r6
 801a3f0:	f000 ff14 	bl	801b21c <__multiply>
 801a3f4:	4629      	mov	r1, r5
 801a3f6:	900a      	str	r0, [sp, #40]	; 0x28
 801a3f8:	4630      	mov	r0, r6
 801a3fa:	f000 fdf7 	bl	801afec <_Bfree>
 801a3fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a402:	4615      	mov	r5, r2
 801a404:	1b1a      	subs	r2, r3, r4
 801a406:	d004      	beq.n	801a412 <_dtoa_r+0x6c2>
 801a408:	4629      	mov	r1, r5
 801a40a:	4630      	mov	r0, r6
 801a40c:	f000 ffb0 	bl	801b370 <__pow5mult>
 801a410:	4605      	mov	r5, r0
 801a412:	2101      	movs	r1, #1
 801a414:	4630      	mov	r0, r6
 801a416:	f000 feeb 	bl	801b1f0 <__i2b>
 801a41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	4604      	mov	r4, r0
 801a420:	f340 8081 	ble.w	801a526 <_dtoa_r+0x7d6>
 801a424:	461a      	mov	r2, r3
 801a426:	4601      	mov	r1, r0
 801a428:	4630      	mov	r0, r6
 801a42a:	f000 ffa1 	bl	801b370 <__pow5mult>
 801a42e:	9b06      	ldr	r3, [sp, #24]
 801a430:	2b01      	cmp	r3, #1
 801a432:	4604      	mov	r4, r0
 801a434:	dd7a      	ble.n	801a52c <_dtoa_r+0x7dc>
 801a436:	2300      	movs	r3, #0
 801a438:	930a      	str	r3, [sp, #40]	; 0x28
 801a43a:	6922      	ldr	r2, [r4, #16]
 801a43c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a440:	6910      	ldr	r0, [r2, #16]
 801a442:	f000 fe85 	bl	801b150 <__hi0bits>
 801a446:	f1c0 0020 	rsb	r0, r0, #32
 801a44a:	9b05      	ldr	r3, [sp, #20]
 801a44c:	4418      	add	r0, r3
 801a44e:	f010 001f 	ands.w	r0, r0, #31
 801a452:	f000 808c 	beq.w	801a56e <_dtoa_r+0x81e>
 801a456:	f1c0 0220 	rsb	r2, r0, #32
 801a45a:	2a04      	cmp	r2, #4
 801a45c:	f340 8085 	ble.w	801a56a <_dtoa_r+0x81a>
 801a460:	f1c0 001c 	rsb	r0, r0, #28
 801a464:	9b04      	ldr	r3, [sp, #16]
 801a466:	4403      	add	r3, r0
 801a468:	9304      	str	r3, [sp, #16]
 801a46a:	9b05      	ldr	r3, [sp, #20]
 801a46c:	4403      	add	r3, r0
 801a46e:	4480      	add	r8, r0
 801a470:	9305      	str	r3, [sp, #20]
 801a472:	9b04      	ldr	r3, [sp, #16]
 801a474:	2b00      	cmp	r3, #0
 801a476:	dd05      	ble.n	801a484 <_dtoa_r+0x734>
 801a478:	4629      	mov	r1, r5
 801a47a:	461a      	mov	r2, r3
 801a47c:	4630      	mov	r0, r6
 801a47e:	f000 ffd1 	bl	801b424 <__lshift>
 801a482:	4605      	mov	r5, r0
 801a484:	9b05      	ldr	r3, [sp, #20]
 801a486:	2b00      	cmp	r3, #0
 801a488:	dd05      	ble.n	801a496 <_dtoa_r+0x746>
 801a48a:	4621      	mov	r1, r4
 801a48c:	461a      	mov	r2, r3
 801a48e:	4630      	mov	r0, r6
 801a490:	f000 ffc8 	bl	801b424 <__lshift>
 801a494:	4604      	mov	r4, r0
 801a496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a498:	2b00      	cmp	r3, #0
 801a49a:	d06a      	beq.n	801a572 <_dtoa_r+0x822>
 801a49c:	4621      	mov	r1, r4
 801a49e:	4628      	mov	r0, r5
 801a4a0:	f001 f830 	bl	801b504 <__mcmp>
 801a4a4:	2800      	cmp	r0, #0
 801a4a6:	da64      	bge.n	801a572 <_dtoa_r+0x822>
 801a4a8:	2300      	movs	r3, #0
 801a4aa:	4629      	mov	r1, r5
 801a4ac:	220a      	movs	r2, #10
 801a4ae:	4630      	mov	r0, r6
 801a4b0:	f000 fdbe 	bl	801b030 <__multadd>
 801a4b4:	9b07      	ldr	r3, [sp, #28]
 801a4b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a4ba:	4605      	mov	r5, r0
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	f000 8191 	beq.w	801a7e4 <_dtoa_r+0xa94>
 801a4c2:	4639      	mov	r1, r7
 801a4c4:	2300      	movs	r3, #0
 801a4c6:	220a      	movs	r2, #10
 801a4c8:	4630      	mov	r0, r6
 801a4ca:	f000 fdb1 	bl	801b030 <__multadd>
 801a4ce:	f1ba 0f00 	cmp.w	sl, #0
 801a4d2:	4607      	mov	r7, r0
 801a4d4:	f300 808d 	bgt.w	801a5f2 <_dtoa_r+0x8a2>
 801a4d8:	9b06      	ldr	r3, [sp, #24]
 801a4da:	2b02      	cmp	r3, #2
 801a4dc:	dc50      	bgt.n	801a580 <_dtoa_r+0x830>
 801a4de:	e088      	b.n	801a5f2 <_dtoa_r+0x8a2>
 801a4e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a4e2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a4e6:	e751      	b.n	801a38c <_dtoa_r+0x63c>
 801a4e8:	f109 34ff 	add.w	r4, r9, #4294967295
 801a4ec:	42a3      	cmp	r3, r4
 801a4ee:	bfbf      	itttt	lt
 801a4f0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801a4f2:	1ae3      	sublt	r3, r4, r3
 801a4f4:	18d2      	addlt	r2, r2, r3
 801a4f6:	9209      	strlt	r2, [sp, #36]	; 0x24
 801a4f8:	bfb6      	itet	lt
 801a4fa:	4623      	movlt	r3, r4
 801a4fc:	1b1c      	subge	r4, r3, r4
 801a4fe:	2400      	movlt	r4, #0
 801a500:	f1b9 0f00 	cmp.w	r9, #0
 801a504:	bfb5      	itete	lt
 801a506:	9a04      	ldrlt	r2, [sp, #16]
 801a508:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801a50c:	eba2 0809 	sublt.w	r8, r2, r9
 801a510:	464a      	movge	r2, r9
 801a512:	bfb8      	it	lt
 801a514:	2200      	movlt	r2, #0
 801a516:	e73c      	b.n	801a392 <_dtoa_r+0x642>
 801a518:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a51c:	9f07      	ldr	r7, [sp, #28]
 801a51e:	461c      	mov	r4, r3
 801a520:	e744      	b.n	801a3ac <_dtoa_r+0x65c>
 801a522:	461a      	mov	r2, r3
 801a524:	e770      	b.n	801a408 <_dtoa_r+0x6b8>
 801a526:	9b06      	ldr	r3, [sp, #24]
 801a528:	2b01      	cmp	r3, #1
 801a52a:	dc18      	bgt.n	801a55e <_dtoa_r+0x80e>
 801a52c:	9b02      	ldr	r3, [sp, #8]
 801a52e:	b9b3      	cbnz	r3, 801a55e <_dtoa_r+0x80e>
 801a530:	9b03      	ldr	r3, [sp, #12]
 801a532:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a536:	b9a2      	cbnz	r2, 801a562 <_dtoa_r+0x812>
 801a538:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a53c:	0d12      	lsrs	r2, r2, #20
 801a53e:	0512      	lsls	r2, r2, #20
 801a540:	b18a      	cbz	r2, 801a566 <_dtoa_r+0x816>
 801a542:	9b04      	ldr	r3, [sp, #16]
 801a544:	3301      	adds	r3, #1
 801a546:	9304      	str	r3, [sp, #16]
 801a548:	9b05      	ldr	r3, [sp, #20]
 801a54a:	3301      	adds	r3, #1
 801a54c:	9305      	str	r3, [sp, #20]
 801a54e:	2301      	movs	r3, #1
 801a550:	930a      	str	r3, [sp, #40]	; 0x28
 801a552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a554:	2b00      	cmp	r3, #0
 801a556:	f47f af70 	bne.w	801a43a <_dtoa_r+0x6ea>
 801a55a:	2001      	movs	r0, #1
 801a55c:	e775      	b.n	801a44a <_dtoa_r+0x6fa>
 801a55e:	2300      	movs	r3, #0
 801a560:	e7f6      	b.n	801a550 <_dtoa_r+0x800>
 801a562:	9b02      	ldr	r3, [sp, #8]
 801a564:	e7f4      	b.n	801a550 <_dtoa_r+0x800>
 801a566:	920a      	str	r2, [sp, #40]	; 0x28
 801a568:	e7f3      	b.n	801a552 <_dtoa_r+0x802>
 801a56a:	d082      	beq.n	801a472 <_dtoa_r+0x722>
 801a56c:	4610      	mov	r0, r2
 801a56e:	301c      	adds	r0, #28
 801a570:	e778      	b.n	801a464 <_dtoa_r+0x714>
 801a572:	f1b9 0f00 	cmp.w	r9, #0
 801a576:	dc37      	bgt.n	801a5e8 <_dtoa_r+0x898>
 801a578:	9b06      	ldr	r3, [sp, #24]
 801a57a:	2b02      	cmp	r3, #2
 801a57c:	dd34      	ble.n	801a5e8 <_dtoa_r+0x898>
 801a57e:	46ca      	mov	sl, r9
 801a580:	f1ba 0f00 	cmp.w	sl, #0
 801a584:	d10d      	bne.n	801a5a2 <_dtoa_r+0x852>
 801a586:	4621      	mov	r1, r4
 801a588:	4653      	mov	r3, sl
 801a58a:	2205      	movs	r2, #5
 801a58c:	4630      	mov	r0, r6
 801a58e:	f000 fd4f 	bl	801b030 <__multadd>
 801a592:	4601      	mov	r1, r0
 801a594:	4604      	mov	r4, r0
 801a596:	4628      	mov	r0, r5
 801a598:	f000 ffb4 	bl	801b504 <__mcmp>
 801a59c:	2800      	cmp	r0, #0
 801a59e:	f73f adeb 	bgt.w	801a178 <_dtoa_r+0x428>
 801a5a2:	9b08      	ldr	r3, [sp, #32]
 801a5a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a5a8:	ea6f 0b03 	mvn.w	fp, r3
 801a5ac:	f04f 0900 	mov.w	r9, #0
 801a5b0:	4621      	mov	r1, r4
 801a5b2:	4630      	mov	r0, r6
 801a5b4:	f000 fd1a 	bl	801afec <_Bfree>
 801a5b8:	2f00      	cmp	r7, #0
 801a5ba:	f43f aea8 	beq.w	801a30e <_dtoa_r+0x5be>
 801a5be:	f1b9 0f00 	cmp.w	r9, #0
 801a5c2:	d005      	beq.n	801a5d0 <_dtoa_r+0x880>
 801a5c4:	45b9      	cmp	r9, r7
 801a5c6:	d003      	beq.n	801a5d0 <_dtoa_r+0x880>
 801a5c8:	4649      	mov	r1, r9
 801a5ca:	4630      	mov	r0, r6
 801a5cc:	f000 fd0e 	bl	801afec <_Bfree>
 801a5d0:	4639      	mov	r1, r7
 801a5d2:	4630      	mov	r0, r6
 801a5d4:	f000 fd0a 	bl	801afec <_Bfree>
 801a5d8:	e699      	b.n	801a30e <_dtoa_r+0x5be>
 801a5da:	2400      	movs	r4, #0
 801a5dc:	4627      	mov	r7, r4
 801a5de:	e7e0      	b.n	801a5a2 <_dtoa_r+0x852>
 801a5e0:	46bb      	mov	fp, r7
 801a5e2:	4604      	mov	r4, r0
 801a5e4:	4607      	mov	r7, r0
 801a5e6:	e5c7      	b.n	801a178 <_dtoa_r+0x428>
 801a5e8:	9b07      	ldr	r3, [sp, #28]
 801a5ea:	46ca      	mov	sl, r9
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	f000 8100 	beq.w	801a7f2 <_dtoa_r+0xaa2>
 801a5f2:	f1b8 0f00 	cmp.w	r8, #0
 801a5f6:	dd05      	ble.n	801a604 <_dtoa_r+0x8b4>
 801a5f8:	4639      	mov	r1, r7
 801a5fa:	4642      	mov	r2, r8
 801a5fc:	4630      	mov	r0, r6
 801a5fe:	f000 ff11 	bl	801b424 <__lshift>
 801a602:	4607      	mov	r7, r0
 801a604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a606:	2b00      	cmp	r3, #0
 801a608:	d05d      	beq.n	801a6c6 <_dtoa_r+0x976>
 801a60a:	6879      	ldr	r1, [r7, #4]
 801a60c:	4630      	mov	r0, r6
 801a60e:	f000 fcad 	bl	801af6c <_Balloc>
 801a612:	4680      	mov	r8, r0
 801a614:	b928      	cbnz	r0, 801a622 <_dtoa_r+0x8d2>
 801a616:	4b82      	ldr	r3, [pc, #520]	; (801a820 <_dtoa_r+0xad0>)
 801a618:	4602      	mov	r2, r0
 801a61a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801a61e:	f7ff bbaf 	b.w	8019d80 <_dtoa_r+0x30>
 801a622:	693a      	ldr	r2, [r7, #16]
 801a624:	3202      	adds	r2, #2
 801a626:	0092      	lsls	r2, r2, #2
 801a628:	f107 010c 	add.w	r1, r7, #12
 801a62c:	300c      	adds	r0, #12
 801a62e:	f7fd fdbd 	bl	80181ac <memcpy>
 801a632:	2201      	movs	r2, #1
 801a634:	4641      	mov	r1, r8
 801a636:	4630      	mov	r0, r6
 801a638:	f000 fef4 	bl	801b424 <__lshift>
 801a63c:	9b01      	ldr	r3, [sp, #4]
 801a63e:	3301      	adds	r3, #1
 801a640:	9304      	str	r3, [sp, #16]
 801a642:	9b01      	ldr	r3, [sp, #4]
 801a644:	4453      	add	r3, sl
 801a646:	9308      	str	r3, [sp, #32]
 801a648:	9b02      	ldr	r3, [sp, #8]
 801a64a:	f003 0301 	and.w	r3, r3, #1
 801a64e:	46b9      	mov	r9, r7
 801a650:	9307      	str	r3, [sp, #28]
 801a652:	4607      	mov	r7, r0
 801a654:	9b04      	ldr	r3, [sp, #16]
 801a656:	4621      	mov	r1, r4
 801a658:	3b01      	subs	r3, #1
 801a65a:	4628      	mov	r0, r5
 801a65c:	9302      	str	r3, [sp, #8]
 801a65e:	f7ff fae9 	bl	8019c34 <quorem>
 801a662:	4603      	mov	r3, r0
 801a664:	3330      	adds	r3, #48	; 0x30
 801a666:	9005      	str	r0, [sp, #20]
 801a668:	4649      	mov	r1, r9
 801a66a:	4628      	mov	r0, r5
 801a66c:	9309      	str	r3, [sp, #36]	; 0x24
 801a66e:	f000 ff49 	bl	801b504 <__mcmp>
 801a672:	463a      	mov	r2, r7
 801a674:	4682      	mov	sl, r0
 801a676:	4621      	mov	r1, r4
 801a678:	4630      	mov	r0, r6
 801a67a:	f000 ff5f 	bl	801b53c <__mdiff>
 801a67e:	68c2      	ldr	r2, [r0, #12]
 801a680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a682:	4680      	mov	r8, r0
 801a684:	bb0a      	cbnz	r2, 801a6ca <_dtoa_r+0x97a>
 801a686:	4601      	mov	r1, r0
 801a688:	4628      	mov	r0, r5
 801a68a:	f000 ff3b 	bl	801b504 <__mcmp>
 801a68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a690:	4602      	mov	r2, r0
 801a692:	4641      	mov	r1, r8
 801a694:	4630      	mov	r0, r6
 801a696:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801a69a:	f000 fca7 	bl	801afec <_Bfree>
 801a69e:	9b06      	ldr	r3, [sp, #24]
 801a6a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a6a2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a6a6:	ea43 0102 	orr.w	r1, r3, r2
 801a6aa:	9b07      	ldr	r3, [sp, #28]
 801a6ac:	430b      	orrs	r3, r1
 801a6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6b0:	d10d      	bne.n	801a6ce <_dtoa_r+0x97e>
 801a6b2:	2b39      	cmp	r3, #57	; 0x39
 801a6b4:	d029      	beq.n	801a70a <_dtoa_r+0x9ba>
 801a6b6:	f1ba 0f00 	cmp.w	sl, #0
 801a6ba:	dd01      	ble.n	801a6c0 <_dtoa_r+0x970>
 801a6bc:	9b05      	ldr	r3, [sp, #20]
 801a6be:	3331      	adds	r3, #49	; 0x31
 801a6c0:	9a02      	ldr	r2, [sp, #8]
 801a6c2:	7013      	strb	r3, [r2, #0]
 801a6c4:	e774      	b.n	801a5b0 <_dtoa_r+0x860>
 801a6c6:	4638      	mov	r0, r7
 801a6c8:	e7b8      	b.n	801a63c <_dtoa_r+0x8ec>
 801a6ca:	2201      	movs	r2, #1
 801a6cc:	e7e1      	b.n	801a692 <_dtoa_r+0x942>
 801a6ce:	f1ba 0f00 	cmp.w	sl, #0
 801a6d2:	db06      	blt.n	801a6e2 <_dtoa_r+0x992>
 801a6d4:	9906      	ldr	r1, [sp, #24]
 801a6d6:	ea41 0a0a 	orr.w	sl, r1, sl
 801a6da:	9907      	ldr	r1, [sp, #28]
 801a6dc:	ea5a 0101 	orrs.w	r1, sl, r1
 801a6e0:	d120      	bne.n	801a724 <_dtoa_r+0x9d4>
 801a6e2:	2a00      	cmp	r2, #0
 801a6e4:	ddec      	ble.n	801a6c0 <_dtoa_r+0x970>
 801a6e6:	4629      	mov	r1, r5
 801a6e8:	2201      	movs	r2, #1
 801a6ea:	4630      	mov	r0, r6
 801a6ec:	9304      	str	r3, [sp, #16]
 801a6ee:	f000 fe99 	bl	801b424 <__lshift>
 801a6f2:	4621      	mov	r1, r4
 801a6f4:	4605      	mov	r5, r0
 801a6f6:	f000 ff05 	bl	801b504 <__mcmp>
 801a6fa:	2800      	cmp	r0, #0
 801a6fc:	9b04      	ldr	r3, [sp, #16]
 801a6fe:	dc02      	bgt.n	801a706 <_dtoa_r+0x9b6>
 801a700:	d1de      	bne.n	801a6c0 <_dtoa_r+0x970>
 801a702:	07da      	lsls	r2, r3, #31
 801a704:	d5dc      	bpl.n	801a6c0 <_dtoa_r+0x970>
 801a706:	2b39      	cmp	r3, #57	; 0x39
 801a708:	d1d8      	bne.n	801a6bc <_dtoa_r+0x96c>
 801a70a:	9a02      	ldr	r2, [sp, #8]
 801a70c:	2339      	movs	r3, #57	; 0x39
 801a70e:	7013      	strb	r3, [r2, #0]
 801a710:	4643      	mov	r3, r8
 801a712:	4698      	mov	r8, r3
 801a714:	3b01      	subs	r3, #1
 801a716:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801a71a:	2a39      	cmp	r2, #57	; 0x39
 801a71c:	d051      	beq.n	801a7c2 <_dtoa_r+0xa72>
 801a71e:	3201      	adds	r2, #1
 801a720:	701a      	strb	r2, [r3, #0]
 801a722:	e745      	b.n	801a5b0 <_dtoa_r+0x860>
 801a724:	2a00      	cmp	r2, #0
 801a726:	dd03      	ble.n	801a730 <_dtoa_r+0x9e0>
 801a728:	2b39      	cmp	r3, #57	; 0x39
 801a72a:	d0ee      	beq.n	801a70a <_dtoa_r+0x9ba>
 801a72c:	3301      	adds	r3, #1
 801a72e:	e7c7      	b.n	801a6c0 <_dtoa_r+0x970>
 801a730:	9a04      	ldr	r2, [sp, #16]
 801a732:	9908      	ldr	r1, [sp, #32]
 801a734:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a738:	428a      	cmp	r2, r1
 801a73a:	d02b      	beq.n	801a794 <_dtoa_r+0xa44>
 801a73c:	4629      	mov	r1, r5
 801a73e:	2300      	movs	r3, #0
 801a740:	220a      	movs	r2, #10
 801a742:	4630      	mov	r0, r6
 801a744:	f000 fc74 	bl	801b030 <__multadd>
 801a748:	45b9      	cmp	r9, r7
 801a74a:	4605      	mov	r5, r0
 801a74c:	f04f 0300 	mov.w	r3, #0
 801a750:	f04f 020a 	mov.w	r2, #10
 801a754:	4649      	mov	r1, r9
 801a756:	4630      	mov	r0, r6
 801a758:	d107      	bne.n	801a76a <_dtoa_r+0xa1a>
 801a75a:	f000 fc69 	bl	801b030 <__multadd>
 801a75e:	4681      	mov	r9, r0
 801a760:	4607      	mov	r7, r0
 801a762:	9b04      	ldr	r3, [sp, #16]
 801a764:	3301      	adds	r3, #1
 801a766:	9304      	str	r3, [sp, #16]
 801a768:	e774      	b.n	801a654 <_dtoa_r+0x904>
 801a76a:	f000 fc61 	bl	801b030 <__multadd>
 801a76e:	4639      	mov	r1, r7
 801a770:	4681      	mov	r9, r0
 801a772:	2300      	movs	r3, #0
 801a774:	220a      	movs	r2, #10
 801a776:	4630      	mov	r0, r6
 801a778:	f000 fc5a 	bl	801b030 <__multadd>
 801a77c:	4607      	mov	r7, r0
 801a77e:	e7f0      	b.n	801a762 <_dtoa_r+0xa12>
 801a780:	f1ba 0f00 	cmp.w	sl, #0
 801a784:	9a01      	ldr	r2, [sp, #4]
 801a786:	bfcc      	ite	gt
 801a788:	46d0      	movgt	r8, sl
 801a78a:	f04f 0801 	movle.w	r8, #1
 801a78e:	4490      	add	r8, r2
 801a790:	f04f 0900 	mov.w	r9, #0
 801a794:	4629      	mov	r1, r5
 801a796:	2201      	movs	r2, #1
 801a798:	4630      	mov	r0, r6
 801a79a:	9302      	str	r3, [sp, #8]
 801a79c:	f000 fe42 	bl	801b424 <__lshift>
 801a7a0:	4621      	mov	r1, r4
 801a7a2:	4605      	mov	r5, r0
 801a7a4:	f000 feae 	bl	801b504 <__mcmp>
 801a7a8:	2800      	cmp	r0, #0
 801a7aa:	dcb1      	bgt.n	801a710 <_dtoa_r+0x9c0>
 801a7ac:	d102      	bne.n	801a7b4 <_dtoa_r+0xa64>
 801a7ae:	9b02      	ldr	r3, [sp, #8]
 801a7b0:	07db      	lsls	r3, r3, #31
 801a7b2:	d4ad      	bmi.n	801a710 <_dtoa_r+0x9c0>
 801a7b4:	4643      	mov	r3, r8
 801a7b6:	4698      	mov	r8, r3
 801a7b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a7bc:	2a30      	cmp	r2, #48	; 0x30
 801a7be:	d0fa      	beq.n	801a7b6 <_dtoa_r+0xa66>
 801a7c0:	e6f6      	b.n	801a5b0 <_dtoa_r+0x860>
 801a7c2:	9a01      	ldr	r2, [sp, #4]
 801a7c4:	429a      	cmp	r2, r3
 801a7c6:	d1a4      	bne.n	801a712 <_dtoa_r+0x9c2>
 801a7c8:	f10b 0b01 	add.w	fp, fp, #1
 801a7cc:	2331      	movs	r3, #49	; 0x31
 801a7ce:	e778      	b.n	801a6c2 <_dtoa_r+0x972>
 801a7d0:	4b14      	ldr	r3, [pc, #80]	; (801a824 <_dtoa_r+0xad4>)
 801a7d2:	f7ff bb27 	b.w	8019e24 <_dtoa_r+0xd4>
 801a7d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	f47f ab03 	bne.w	8019de4 <_dtoa_r+0x94>
 801a7de:	4b12      	ldr	r3, [pc, #72]	; (801a828 <_dtoa_r+0xad8>)
 801a7e0:	f7ff bb20 	b.w	8019e24 <_dtoa_r+0xd4>
 801a7e4:	f1ba 0f00 	cmp.w	sl, #0
 801a7e8:	dc03      	bgt.n	801a7f2 <_dtoa_r+0xaa2>
 801a7ea:	9b06      	ldr	r3, [sp, #24]
 801a7ec:	2b02      	cmp	r3, #2
 801a7ee:	f73f aec7 	bgt.w	801a580 <_dtoa_r+0x830>
 801a7f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a7f6:	4621      	mov	r1, r4
 801a7f8:	4628      	mov	r0, r5
 801a7fa:	f7ff fa1b 	bl	8019c34 <quorem>
 801a7fe:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801a802:	f808 3b01 	strb.w	r3, [r8], #1
 801a806:	9a01      	ldr	r2, [sp, #4]
 801a808:	eba8 0202 	sub.w	r2, r8, r2
 801a80c:	4592      	cmp	sl, r2
 801a80e:	ddb7      	ble.n	801a780 <_dtoa_r+0xa30>
 801a810:	4629      	mov	r1, r5
 801a812:	2300      	movs	r3, #0
 801a814:	220a      	movs	r2, #10
 801a816:	4630      	mov	r0, r6
 801a818:	f000 fc0a 	bl	801b030 <__multadd>
 801a81c:	4605      	mov	r5, r0
 801a81e:	e7ea      	b.n	801a7f6 <_dtoa_r+0xaa6>
 801a820:	0801d048 	.word	0x0801d048
 801a824:	0801ce4c 	.word	0x0801ce4c
 801a828:	0801cfc9 	.word	0x0801cfc9

0801a82c <rshift>:
 801a82c:	6903      	ldr	r3, [r0, #16]
 801a82e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a832:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a836:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a83a:	f100 0414 	add.w	r4, r0, #20
 801a83e:	dd45      	ble.n	801a8cc <rshift+0xa0>
 801a840:	f011 011f 	ands.w	r1, r1, #31
 801a844:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a848:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a84c:	d10c      	bne.n	801a868 <rshift+0x3c>
 801a84e:	f100 0710 	add.w	r7, r0, #16
 801a852:	4629      	mov	r1, r5
 801a854:	42b1      	cmp	r1, r6
 801a856:	d334      	bcc.n	801a8c2 <rshift+0x96>
 801a858:	1a9b      	subs	r3, r3, r2
 801a85a:	009b      	lsls	r3, r3, #2
 801a85c:	1eea      	subs	r2, r5, #3
 801a85e:	4296      	cmp	r6, r2
 801a860:	bf38      	it	cc
 801a862:	2300      	movcc	r3, #0
 801a864:	4423      	add	r3, r4
 801a866:	e015      	b.n	801a894 <rshift+0x68>
 801a868:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a86c:	f1c1 0820 	rsb	r8, r1, #32
 801a870:	40cf      	lsrs	r7, r1
 801a872:	f105 0e04 	add.w	lr, r5, #4
 801a876:	46a1      	mov	r9, r4
 801a878:	4576      	cmp	r6, lr
 801a87a:	46f4      	mov	ip, lr
 801a87c:	d815      	bhi.n	801a8aa <rshift+0x7e>
 801a87e:	1a9a      	subs	r2, r3, r2
 801a880:	0092      	lsls	r2, r2, #2
 801a882:	3a04      	subs	r2, #4
 801a884:	3501      	adds	r5, #1
 801a886:	42ae      	cmp	r6, r5
 801a888:	bf38      	it	cc
 801a88a:	2200      	movcc	r2, #0
 801a88c:	18a3      	adds	r3, r4, r2
 801a88e:	50a7      	str	r7, [r4, r2]
 801a890:	b107      	cbz	r7, 801a894 <rshift+0x68>
 801a892:	3304      	adds	r3, #4
 801a894:	1b1a      	subs	r2, r3, r4
 801a896:	42a3      	cmp	r3, r4
 801a898:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a89c:	bf08      	it	eq
 801a89e:	2300      	moveq	r3, #0
 801a8a0:	6102      	str	r2, [r0, #16]
 801a8a2:	bf08      	it	eq
 801a8a4:	6143      	streq	r3, [r0, #20]
 801a8a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a8aa:	f8dc c000 	ldr.w	ip, [ip]
 801a8ae:	fa0c fc08 	lsl.w	ip, ip, r8
 801a8b2:	ea4c 0707 	orr.w	r7, ip, r7
 801a8b6:	f849 7b04 	str.w	r7, [r9], #4
 801a8ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a8be:	40cf      	lsrs	r7, r1
 801a8c0:	e7da      	b.n	801a878 <rshift+0x4c>
 801a8c2:	f851 cb04 	ldr.w	ip, [r1], #4
 801a8c6:	f847 cf04 	str.w	ip, [r7, #4]!
 801a8ca:	e7c3      	b.n	801a854 <rshift+0x28>
 801a8cc:	4623      	mov	r3, r4
 801a8ce:	e7e1      	b.n	801a894 <rshift+0x68>

0801a8d0 <__hexdig_fun>:
 801a8d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a8d4:	2b09      	cmp	r3, #9
 801a8d6:	d802      	bhi.n	801a8de <__hexdig_fun+0xe>
 801a8d8:	3820      	subs	r0, #32
 801a8da:	b2c0      	uxtb	r0, r0
 801a8dc:	4770      	bx	lr
 801a8de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801a8e2:	2b05      	cmp	r3, #5
 801a8e4:	d801      	bhi.n	801a8ea <__hexdig_fun+0x1a>
 801a8e6:	3847      	subs	r0, #71	; 0x47
 801a8e8:	e7f7      	b.n	801a8da <__hexdig_fun+0xa>
 801a8ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801a8ee:	2b05      	cmp	r3, #5
 801a8f0:	d801      	bhi.n	801a8f6 <__hexdig_fun+0x26>
 801a8f2:	3827      	subs	r0, #39	; 0x27
 801a8f4:	e7f1      	b.n	801a8da <__hexdig_fun+0xa>
 801a8f6:	2000      	movs	r0, #0
 801a8f8:	4770      	bx	lr
	...

0801a8fc <__gethex>:
 801a8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a900:	ed2d 8b02 	vpush	{d8}
 801a904:	b089      	sub	sp, #36	; 0x24
 801a906:	ee08 0a10 	vmov	s16, r0
 801a90a:	9304      	str	r3, [sp, #16]
 801a90c:	4bb4      	ldr	r3, [pc, #720]	; (801abe0 <__gethex+0x2e4>)
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	9301      	str	r3, [sp, #4]
 801a912:	4618      	mov	r0, r3
 801a914:	468b      	mov	fp, r1
 801a916:	4690      	mov	r8, r2
 801a918:	f7e5 fcfa 	bl	8000310 <strlen>
 801a91c:	9b01      	ldr	r3, [sp, #4]
 801a91e:	f8db 2000 	ldr.w	r2, [fp]
 801a922:	4403      	add	r3, r0
 801a924:	4682      	mov	sl, r0
 801a926:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801a92a:	9305      	str	r3, [sp, #20]
 801a92c:	1c93      	adds	r3, r2, #2
 801a92e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801a932:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801a936:	32fe      	adds	r2, #254	; 0xfe
 801a938:	18d1      	adds	r1, r2, r3
 801a93a:	461f      	mov	r7, r3
 801a93c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a940:	9100      	str	r1, [sp, #0]
 801a942:	2830      	cmp	r0, #48	; 0x30
 801a944:	d0f8      	beq.n	801a938 <__gethex+0x3c>
 801a946:	f7ff ffc3 	bl	801a8d0 <__hexdig_fun>
 801a94a:	4604      	mov	r4, r0
 801a94c:	2800      	cmp	r0, #0
 801a94e:	d13a      	bne.n	801a9c6 <__gethex+0xca>
 801a950:	9901      	ldr	r1, [sp, #4]
 801a952:	4652      	mov	r2, sl
 801a954:	4638      	mov	r0, r7
 801a956:	f001 fa43 	bl	801bde0 <strncmp>
 801a95a:	4605      	mov	r5, r0
 801a95c:	2800      	cmp	r0, #0
 801a95e:	d168      	bne.n	801aa32 <__gethex+0x136>
 801a960:	f817 000a 	ldrb.w	r0, [r7, sl]
 801a964:	eb07 060a 	add.w	r6, r7, sl
 801a968:	f7ff ffb2 	bl	801a8d0 <__hexdig_fun>
 801a96c:	2800      	cmp	r0, #0
 801a96e:	d062      	beq.n	801aa36 <__gethex+0x13a>
 801a970:	4633      	mov	r3, r6
 801a972:	7818      	ldrb	r0, [r3, #0]
 801a974:	2830      	cmp	r0, #48	; 0x30
 801a976:	461f      	mov	r7, r3
 801a978:	f103 0301 	add.w	r3, r3, #1
 801a97c:	d0f9      	beq.n	801a972 <__gethex+0x76>
 801a97e:	f7ff ffa7 	bl	801a8d0 <__hexdig_fun>
 801a982:	2301      	movs	r3, #1
 801a984:	fab0 f480 	clz	r4, r0
 801a988:	0964      	lsrs	r4, r4, #5
 801a98a:	4635      	mov	r5, r6
 801a98c:	9300      	str	r3, [sp, #0]
 801a98e:	463a      	mov	r2, r7
 801a990:	4616      	mov	r6, r2
 801a992:	3201      	adds	r2, #1
 801a994:	7830      	ldrb	r0, [r6, #0]
 801a996:	f7ff ff9b 	bl	801a8d0 <__hexdig_fun>
 801a99a:	2800      	cmp	r0, #0
 801a99c:	d1f8      	bne.n	801a990 <__gethex+0x94>
 801a99e:	9901      	ldr	r1, [sp, #4]
 801a9a0:	4652      	mov	r2, sl
 801a9a2:	4630      	mov	r0, r6
 801a9a4:	f001 fa1c 	bl	801bde0 <strncmp>
 801a9a8:	b980      	cbnz	r0, 801a9cc <__gethex+0xd0>
 801a9aa:	b94d      	cbnz	r5, 801a9c0 <__gethex+0xc4>
 801a9ac:	eb06 050a 	add.w	r5, r6, sl
 801a9b0:	462a      	mov	r2, r5
 801a9b2:	4616      	mov	r6, r2
 801a9b4:	3201      	adds	r2, #1
 801a9b6:	7830      	ldrb	r0, [r6, #0]
 801a9b8:	f7ff ff8a 	bl	801a8d0 <__hexdig_fun>
 801a9bc:	2800      	cmp	r0, #0
 801a9be:	d1f8      	bne.n	801a9b2 <__gethex+0xb6>
 801a9c0:	1bad      	subs	r5, r5, r6
 801a9c2:	00ad      	lsls	r5, r5, #2
 801a9c4:	e004      	b.n	801a9d0 <__gethex+0xd4>
 801a9c6:	2400      	movs	r4, #0
 801a9c8:	4625      	mov	r5, r4
 801a9ca:	e7e0      	b.n	801a98e <__gethex+0x92>
 801a9cc:	2d00      	cmp	r5, #0
 801a9ce:	d1f7      	bne.n	801a9c0 <__gethex+0xc4>
 801a9d0:	7833      	ldrb	r3, [r6, #0]
 801a9d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a9d6:	2b50      	cmp	r3, #80	; 0x50
 801a9d8:	d13b      	bne.n	801aa52 <__gethex+0x156>
 801a9da:	7873      	ldrb	r3, [r6, #1]
 801a9dc:	2b2b      	cmp	r3, #43	; 0x2b
 801a9de:	d02c      	beq.n	801aa3a <__gethex+0x13e>
 801a9e0:	2b2d      	cmp	r3, #45	; 0x2d
 801a9e2:	d02e      	beq.n	801aa42 <__gethex+0x146>
 801a9e4:	1c71      	adds	r1, r6, #1
 801a9e6:	f04f 0900 	mov.w	r9, #0
 801a9ea:	7808      	ldrb	r0, [r1, #0]
 801a9ec:	f7ff ff70 	bl	801a8d0 <__hexdig_fun>
 801a9f0:	1e43      	subs	r3, r0, #1
 801a9f2:	b2db      	uxtb	r3, r3
 801a9f4:	2b18      	cmp	r3, #24
 801a9f6:	d82c      	bhi.n	801aa52 <__gethex+0x156>
 801a9f8:	f1a0 0210 	sub.w	r2, r0, #16
 801a9fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801aa00:	f7ff ff66 	bl	801a8d0 <__hexdig_fun>
 801aa04:	1e43      	subs	r3, r0, #1
 801aa06:	b2db      	uxtb	r3, r3
 801aa08:	2b18      	cmp	r3, #24
 801aa0a:	d91d      	bls.n	801aa48 <__gethex+0x14c>
 801aa0c:	f1b9 0f00 	cmp.w	r9, #0
 801aa10:	d000      	beq.n	801aa14 <__gethex+0x118>
 801aa12:	4252      	negs	r2, r2
 801aa14:	4415      	add	r5, r2
 801aa16:	f8cb 1000 	str.w	r1, [fp]
 801aa1a:	b1e4      	cbz	r4, 801aa56 <__gethex+0x15a>
 801aa1c:	9b00      	ldr	r3, [sp, #0]
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	bf14      	ite	ne
 801aa22:	2700      	movne	r7, #0
 801aa24:	2706      	moveq	r7, #6
 801aa26:	4638      	mov	r0, r7
 801aa28:	b009      	add	sp, #36	; 0x24
 801aa2a:	ecbd 8b02 	vpop	{d8}
 801aa2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa32:	463e      	mov	r6, r7
 801aa34:	4625      	mov	r5, r4
 801aa36:	2401      	movs	r4, #1
 801aa38:	e7ca      	b.n	801a9d0 <__gethex+0xd4>
 801aa3a:	f04f 0900 	mov.w	r9, #0
 801aa3e:	1cb1      	adds	r1, r6, #2
 801aa40:	e7d3      	b.n	801a9ea <__gethex+0xee>
 801aa42:	f04f 0901 	mov.w	r9, #1
 801aa46:	e7fa      	b.n	801aa3e <__gethex+0x142>
 801aa48:	230a      	movs	r3, #10
 801aa4a:	fb03 0202 	mla	r2, r3, r2, r0
 801aa4e:	3a10      	subs	r2, #16
 801aa50:	e7d4      	b.n	801a9fc <__gethex+0x100>
 801aa52:	4631      	mov	r1, r6
 801aa54:	e7df      	b.n	801aa16 <__gethex+0x11a>
 801aa56:	1bf3      	subs	r3, r6, r7
 801aa58:	3b01      	subs	r3, #1
 801aa5a:	4621      	mov	r1, r4
 801aa5c:	2b07      	cmp	r3, #7
 801aa5e:	dc0b      	bgt.n	801aa78 <__gethex+0x17c>
 801aa60:	ee18 0a10 	vmov	r0, s16
 801aa64:	f000 fa82 	bl	801af6c <_Balloc>
 801aa68:	4604      	mov	r4, r0
 801aa6a:	b940      	cbnz	r0, 801aa7e <__gethex+0x182>
 801aa6c:	4b5d      	ldr	r3, [pc, #372]	; (801abe4 <__gethex+0x2e8>)
 801aa6e:	4602      	mov	r2, r0
 801aa70:	21de      	movs	r1, #222	; 0xde
 801aa72:	485d      	ldr	r0, [pc, #372]	; (801abe8 <__gethex+0x2ec>)
 801aa74:	f001 f9d6 	bl	801be24 <__assert_func>
 801aa78:	3101      	adds	r1, #1
 801aa7a:	105b      	asrs	r3, r3, #1
 801aa7c:	e7ee      	b.n	801aa5c <__gethex+0x160>
 801aa7e:	f100 0914 	add.w	r9, r0, #20
 801aa82:	f04f 0b00 	mov.w	fp, #0
 801aa86:	f1ca 0301 	rsb	r3, sl, #1
 801aa8a:	f8cd 9008 	str.w	r9, [sp, #8]
 801aa8e:	f8cd b000 	str.w	fp, [sp]
 801aa92:	9306      	str	r3, [sp, #24]
 801aa94:	42b7      	cmp	r7, r6
 801aa96:	d340      	bcc.n	801ab1a <__gethex+0x21e>
 801aa98:	9802      	ldr	r0, [sp, #8]
 801aa9a:	9b00      	ldr	r3, [sp, #0]
 801aa9c:	f840 3b04 	str.w	r3, [r0], #4
 801aaa0:	eba0 0009 	sub.w	r0, r0, r9
 801aaa4:	1080      	asrs	r0, r0, #2
 801aaa6:	0146      	lsls	r6, r0, #5
 801aaa8:	6120      	str	r0, [r4, #16]
 801aaaa:	4618      	mov	r0, r3
 801aaac:	f000 fb50 	bl	801b150 <__hi0bits>
 801aab0:	1a30      	subs	r0, r6, r0
 801aab2:	f8d8 6000 	ldr.w	r6, [r8]
 801aab6:	42b0      	cmp	r0, r6
 801aab8:	dd63      	ble.n	801ab82 <__gethex+0x286>
 801aaba:	1b87      	subs	r7, r0, r6
 801aabc:	4639      	mov	r1, r7
 801aabe:	4620      	mov	r0, r4
 801aac0:	f000 fef1 	bl	801b8a6 <__any_on>
 801aac4:	4682      	mov	sl, r0
 801aac6:	b1a8      	cbz	r0, 801aaf4 <__gethex+0x1f8>
 801aac8:	1e7b      	subs	r3, r7, #1
 801aaca:	1159      	asrs	r1, r3, #5
 801aacc:	f003 021f 	and.w	r2, r3, #31
 801aad0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801aad4:	f04f 0a01 	mov.w	sl, #1
 801aad8:	fa0a f202 	lsl.w	r2, sl, r2
 801aadc:	420a      	tst	r2, r1
 801aade:	d009      	beq.n	801aaf4 <__gethex+0x1f8>
 801aae0:	4553      	cmp	r3, sl
 801aae2:	dd05      	ble.n	801aaf0 <__gethex+0x1f4>
 801aae4:	1eb9      	subs	r1, r7, #2
 801aae6:	4620      	mov	r0, r4
 801aae8:	f000 fedd 	bl	801b8a6 <__any_on>
 801aaec:	2800      	cmp	r0, #0
 801aaee:	d145      	bne.n	801ab7c <__gethex+0x280>
 801aaf0:	f04f 0a02 	mov.w	sl, #2
 801aaf4:	4639      	mov	r1, r7
 801aaf6:	4620      	mov	r0, r4
 801aaf8:	f7ff fe98 	bl	801a82c <rshift>
 801aafc:	443d      	add	r5, r7
 801aafe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ab02:	42ab      	cmp	r3, r5
 801ab04:	da4c      	bge.n	801aba0 <__gethex+0x2a4>
 801ab06:	ee18 0a10 	vmov	r0, s16
 801ab0a:	4621      	mov	r1, r4
 801ab0c:	f000 fa6e 	bl	801afec <_Bfree>
 801ab10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ab12:	2300      	movs	r3, #0
 801ab14:	6013      	str	r3, [r2, #0]
 801ab16:	27a3      	movs	r7, #163	; 0xa3
 801ab18:	e785      	b.n	801aa26 <__gethex+0x12a>
 801ab1a:	1e73      	subs	r3, r6, #1
 801ab1c:	9a05      	ldr	r2, [sp, #20]
 801ab1e:	9303      	str	r3, [sp, #12]
 801ab20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ab24:	4293      	cmp	r3, r2
 801ab26:	d019      	beq.n	801ab5c <__gethex+0x260>
 801ab28:	f1bb 0f20 	cmp.w	fp, #32
 801ab2c:	d107      	bne.n	801ab3e <__gethex+0x242>
 801ab2e:	9b02      	ldr	r3, [sp, #8]
 801ab30:	9a00      	ldr	r2, [sp, #0]
 801ab32:	f843 2b04 	str.w	r2, [r3], #4
 801ab36:	9302      	str	r3, [sp, #8]
 801ab38:	2300      	movs	r3, #0
 801ab3a:	9300      	str	r3, [sp, #0]
 801ab3c:	469b      	mov	fp, r3
 801ab3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801ab42:	f7ff fec5 	bl	801a8d0 <__hexdig_fun>
 801ab46:	9b00      	ldr	r3, [sp, #0]
 801ab48:	f000 000f 	and.w	r0, r0, #15
 801ab4c:	fa00 f00b 	lsl.w	r0, r0, fp
 801ab50:	4303      	orrs	r3, r0
 801ab52:	9300      	str	r3, [sp, #0]
 801ab54:	f10b 0b04 	add.w	fp, fp, #4
 801ab58:	9b03      	ldr	r3, [sp, #12]
 801ab5a:	e00d      	b.n	801ab78 <__gethex+0x27c>
 801ab5c:	9b03      	ldr	r3, [sp, #12]
 801ab5e:	9a06      	ldr	r2, [sp, #24]
 801ab60:	4413      	add	r3, r2
 801ab62:	42bb      	cmp	r3, r7
 801ab64:	d3e0      	bcc.n	801ab28 <__gethex+0x22c>
 801ab66:	4618      	mov	r0, r3
 801ab68:	9901      	ldr	r1, [sp, #4]
 801ab6a:	9307      	str	r3, [sp, #28]
 801ab6c:	4652      	mov	r2, sl
 801ab6e:	f001 f937 	bl	801bde0 <strncmp>
 801ab72:	9b07      	ldr	r3, [sp, #28]
 801ab74:	2800      	cmp	r0, #0
 801ab76:	d1d7      	bne.n	801ab28 <__gethex+0x22c>
 801ab78:	461e      	mov	r6, r3
 801ab7a:	e78b      	b.n	801aa94 <__gethex+0x198>
 801ab7c:	f04f 0a03 	mov.w	sl, #3
 801ab80:	e7b8      	b.n	801aaf4 <__gethex+0x1f8>
 801ab82:	da0a      	bge.n	801ab9a <__gethex+0x29e>
 801ab84:	1a37      	subs	r7, r6, r0
 801ab86:	4621      	mov	r1, r4
 801ab88:	ee18 0a10 	vmov	r0, s16
 801ab8c:	463a      	mov	r2, r7
 801ab8e:	f000 fc49 	bl	801b424 <__lshift>
 801ab92:	1bed      	subs	r5, r5, r7
 801ab94:	4604      	mov	r4, r0
 801ab96:	f100 0914 	add.w	r9, r0, #20
 801ab9a:	f04f 0a00 	mov.w	sl, #0
 801ab9e:	e7ae      	b.n	801aafe <__gethex+0x202>
 801aba0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801aba4:	42a8      	cmp	r0, r5
 801aba6:	dd72      	ble.n	801ac8e <__gethex+0x392>
 801aba8:	1b45      	subs	r5, r0, r5
 801abaa:	42ae      	cmp	r6, r5
 801abac:	dc36      	bgt.n	801ac1c <__gethex+0x320>
 801abae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801abb2:	2b02      	cmp	r3, #2
 801abb4:	d02a      	beq.n	801ac0c <__gethex+0x310>
 801abb6:	2b03      	cmp	r3, #3
 801abb8:	d02c      	beq.n	801ac14 <__gethex+0x318>
 801abba:	2b01      	cmp	r3, #1
 801abbc:	d11c      	bne.n	801abf8 <__gethex+0x2fc>
 801abbe:	42ae      	cmp	r6, r5
 801abc0:	d11a      	bne.n	801abf8 <__gethex+0x2fc>
 801abc2:	2e01      	cmp	r6, #1
 801abc4:	d112      	bne.n	801abec <__gethex+0x2f0>
 801abc6:	9a04      	ldr	r2, [sp, #16]
 801abc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801abcc:	6013      	str	r3, [r2, #0]
 801abce:	2301      	movs	r3, #1
 801abd0:	6123      	str	r3, [r4, #16]
 801abd2:	f8c9 3000 	str.w	r3, [r9]
 801abd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801abd8:	2762      	movs	r7, #98	; 0x62
 801abda:	601c      	str	r4, [r3, #0]
 801abdc:	e723      	b.n	801aa26 <__gethex+0x12a>
 801abde:	bf00      	nop
 801abe0:	0801d0c0 	.word	0x0801d0c0
 801abe4:	0801d048 	.word	0x0801d048
 801abe8:	0801d059 	.word	0x0801d059
 801abec:	1e71      	subs	r1, r6, #1
 801abee:	4620      	mov	r0, r4
 801abf0:	f000 fe59 	bl	801b8a6 <__any_on>
 801abf4:	2800      	cmp	r0, #0
 801abf6:	d1e6      	bne.n	801abc6 <__gethex+0x2ca>
 801abf8:	ee18 0a10 	vmov	r0, s16
 801abfc:	4621      	mov	r1, r4
 801abfe:	f000 f9f5 	bl	801afec <_Bfree>
 801ac02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ac04:	2300      	movs	r3, #0
 801ac06:	6013      	str	r3, [r2, #0]
 801ac08:	2750      	movs	r7, #80	; 0x50
 801ac0a:	e70c      	b.n	801aa26 <__gethex+0x12a>
 801ac0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d1f2      	bne.n	801abf8 <__gethex+0x2fc>
 801ac12:	e7d8      	b.n	801abc6 <__gethex+0x2ca>
 801ac14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d1d5      	bne.n	801abc6 <__gethex+0x2ca>
 801ac1a:	e7ed      	b.n	801abf8 <__gethex+0x2fc>
 801ac1c:	1e6f      	subs	r7, r5, #1
 801ac1e:	f1ba 0f00 	cmp.w	sl, #0
 801ac22:	d131      	bne.n	801ac88 <__gethex+0x38c>
 801ac24:	b127      	cbz	r7, 801ac30 <__gethex+0x334>
 801ac26:	4639      	mov	r1, r7
 801ac28:	4620      	mov	r0, r4
 801ac2a:	f000 fe3c 	bl	801b8a6 <__any_on>
 801ac2e:	4682      	mov	sl, r0
 801ac30:	117b      	asrs	r3, r7, #5
 801ac32:	2101      	movs	r1, #1
 801ac34:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801ac38:	f007 071f 	and.w	r7, r7, #31
 801ac3c:	fa01 f707 	lsl.w	r7, r1, r7
 801ac40:	421f      	tst	r7, r3
 801ac42:	4629      	mov	r1, r5
 801ac44:	4620      	mov	r0, r4
 801ac46:	bf18      	it	ne
 801ac48:	f04a 0a02 	orrne.w	sl, sl, #2
 801ac4c:	1b76      	subs	r6, r6, r5
 801ac4e:	f7ff fded 	bl	801a82c <rshift>
 801ac52:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ac56:	2702      	movs	r7, #2
 801ac58:	f1ba 0f00 	cmp.w	sl, #0
 801ac5c:	d048      	beq.n	801acf0 <__gethex+0x3f4>
 801ac5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ac62:	2b02      	cmp	r3, #2
 801ac64:	d015      	beq.n	801ac92 <__gethex+0x396>
 801ac66:	2b03      	cmp	r3, #3
 801ac68:	d017      	beq.n	801ac9a <__gethex+0x39e>
 801ac6a:	2b01      	cmp	r3, #1
 801ac6c:	d109      	bne.n	801ac82 <__gethex+0x386>
 801ac6e:	f01a 0f02 	tst.w	sl, #2
 801ac72:	d006      	beq.n	801ac82 <__gethex+0x386>
 801ac74:	f8d9 0000 	ldr.w	r0, [r9]
 801ac78:	ea4a 0a00 	orr.w	sl, sl, r0
 801ac7c:	f01a 0f01 	tst.w	sl, #1
 801ac80:	d10e      	bne.n	801aca0 <__gethex+0x3a4>
 801ac82:	f047 0710 	orr.w	r7, r7, #16
 801ac86:	e033      	b.n	801acf0 <__gethex+0x3f4>
 801ac88:	f04f 0a01 	mov.w	sl, #1
 801ac8c:	e7d0      	b.n	801ac30 <__gethex+0x334>
 801ac8e:	2701      	movs	r7, #1
 801ac90:	e7e2      	b.n	801ac58 <__gethex+0x35c>
 801ac92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ac94:	f1c3 0301 	rsb	r3, r3, #1
 801ac98:	9315      	str	r3, [sp, #84]	; 0x54
 801ac9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d0f0      	beq.n	801ac82 <__gethex+0x386>
 801aca0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801aca4:	f104 0314 	add.w	r3, r4, #20
 801aca8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801acac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801acb0:	f04f 0c00 	mov.w	ip, #0
 801acb4:	4618      	mov	r0, r3
 801acb6:	f853 2b04 	ldr.w	r2, [r3], #4
 801acba:	f1b2 3fff 	cmp.w	r2, #4294967295
 801acbe:	d01c      	beq.n	801acfa <__gethex+0x3fe>
 801acc0:	3201      	adds	r2, #1
 801acc2:	6002      	str	r2, [r0, #0]
 801acc4:	2f02      	cmp	r7, #2
 801acc6:	f104 0314 	add.w	r3, r4, #20
 801acca:	d13f      	bne.n	801ad4c <__gethex+0x450>
 801accc:	f8d8 2000 	ldr.w	r2, [r8]
 801acd0:	3a01      	subs	r2, #1
 801acd2:	42b2      	cmp	r2, r6
 801acd4:	d10a      	bne.n	801acec <__gethex+0x3f0>
 801acd6:	1171      	asrs	r1, r6, #5
 801acd8:	2201      	movs	r2, #1
 801acda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801acde:	f006 061f 	and.w	r6, r6, #31
 801ace2:	fa02 f606 	lsl.w	r6, r2, r6
 801ace6:	421e      	tst	r6, r3
 801ace8:	bf18      	it	ne
 801acea:	4617      	movne	r7, r2
 801acec:	f047 0720 	orr.w	r7, r7, #32
 801acf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801acf2:	601c      	str	r4, [r3, #0]
 801acf4:	9b04      	ldr	r3, [sp, #16]
 801acf6:	601d      	str	r5, [r3, #0]
 801acf8:	e695      	b.n	801aa26 <__gethex+0x12a>
 801acfa:	4299      	cmp	r1, r3
 801acfc:	f843 cc04 	str.w	ip, [r3, #-4]
 801ad00:	d8d8      	bhi.n	801acb4 <__gethex+0x3b8>
 801ad02:	68a3      	ldr	r3, [r4, #8]
 801ad04:	459b      	cmp	fp, r3
 801ad06:	db19      	blt.n	801ad3c <__gethex+0x440>
 801ad08:	6861      	ldr	r1, [r4, #4]
 801ad0a:	ee18 0a10 	vmov	r0, s16
 801ad0e:	3101      	adds	r1, #1
 801ad10:	f000 f92c 	bl	801af6c <_Balloc>
 801ad14:	4681      	mov	r9, r0
 801ad16:	b918      	cbnz	r0, 801ad20 <__gethex+0x424>
 801ad18:	4b1a      	ldr	r3, [pc, #104]	; (801ad84 <__gethex+0x488>)
 801ad1a:	4602      	mov	r2, r0
 801ad1c:	2184      	movs	r1, #132	; 0x84
 801ad1e:	e6a8      	b.n	801aa72 <__gethex+0x176>
 801ad20:	6922      	ldr	r2, [r4, #16]
 801ad22:	3202      	adds	r2, #2
 801ad24:	f104 010c 	add.w	r1, r4, #12
 801ad28:	0092      	lsls	r2, r2, #2
 801ad2a:	300c      	adds	r0, #12
 801ad2c:	f7fd fa3e 	bl	80181ac <memcpy>
 801ad30:	4621      	mov	r1, r4
 801ad32:	ee18 0a10 	vmov	r0, s16
 801ad36:	f000 f959 	bl	801afec <_Bfree>
 801ad3a:	464c      	mov	r4, r9
 801ad3c:	6923      	ldr	r3, [r4, #16]
 801ad3e:	1c5a      	adds	r2, r3, #1
 801ad40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ad44:	6122      	str	r2, [r4, #16]
 801ad46:	2201      	movs	r2, #1
 801ad48:	615a      	str	r2, [r3, #20]
 801ad4a:	e7bb      	b.n	801acc4 <__gethex+0x3c8>
 801ad4c:	6922      	ldr	r2, [r4, #16]
 801ad4e:	455a      	cmp	r2, fp
 801ad50:	dd0b      	ble.n	801ad6a <__gethex+0x46e>
 801ad52:	2101      	movs	r1, #1
 801ad54:	4620      	mov	r0, r4
 801ad56:	f7ff fd69 	bl	801a82c <rshift>
 801ad5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ad5e:	3501      	adds	r5, #1
 801ad60:	42ab      	cmp	r3, r5
 801ad62:	f6ff aed0 	blt.w	801ab06 <__gethex+0x20a>
 801ad66:	2701      	movs	r7, #1
 801ad68:	e7c0      	b.n	801acec <__gethex+0x3f0>
 801ad6a:	f016 061f 	ands.w	r6, r6, #31
 801ad6e:	d0fa      	beq.n	801ad66 <__gethex+0x46a>
 801ad70:	4453      	add	r3, sl
 801ad72:	f1c6 0620 	rsb	r6, r6, #32
 801ad76:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801ad7a:	f000 f9e9 	bl	801b150 <__hi0bits>
 801ad7e:	42b0      	cmp	r0, r6
 801ad80:	dbe7      	blt.n	801ad52 <__gethex+0x456>
 801ad82:	e7f0      	b.n	801ad66 <__gethex+0x46a>
 801ad84:	0801d048 	.word	0x0801d048

0801ad88 <L_shift>:
 801ad88:	f1c2 0208 	rsb	r2, r2, #8
 801ad8c:	0092      	lsls	r2, r2, #2
 801ad8e:	b570      	push	{r4, r5, r6, lr}
 801ad90:	f1c2 0620 	rsb	r6, r2, #32
 801ad94:	6843      	ldr	r3, [r0, #4]
 801ad96:	6804      	ldr	r4, [r0, #0]
 801ad98:	fa03 f506 	lsl.w	r5, r3, r6
 801ad9c:	432c      	orrs	r4, r5
 801ad9e:	40d3      	lsrs	r3, r2
 801ada0:	6004      	str	r4, [r0, #0]
 801ada2:	f840 3f04 	str.w	r3, [r0, #4]!
 801ada6:	4288      	cmp	r0, r1
 801ada8:	d3f4      	bcc.n	801ad94 <L_shift+0xc>
 801adaa:	bd70      	pop	{r4, r5, r6, pc}

0801adac <__match>:
 801adac:	b530      	push	{r4, r5, lr}
 801adae:	6803      	ldr	r3, [r0, #0]
 801adb0:	3301      	adds	r3, #1
 801adb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801adb6:	b914      	cbnz	r4, 801adbe <__match+0x12>
 801adb8:	6003      	str	r3, [r0, #0]
 801adba:	2001      	movs	r0, #1
 801adbc:	bd30      	pop	{r4, r5, pc}
 801adbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801adc2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801adc6:	2d19      	cmp	r5, #25
 801adc8:	bf98      	it	ls
 801adca:	3220      	addls	r2, #32
 801adcc:	42a2      	cmp	r2, r4
 801adce:	d0f0      	beq.n	801adb2 <__match+0x6>
 801add0:	2000      	movs	r0, #0
 801add2:	e7f3      	b.n	801adbc <__match+0x10>

0801add4 <__hexnan>:
 801add4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801add8:	680b      	ldr	r3, [r1, #0]
 801adda:	115e      	asrs	r6, r3, #5
 801addc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ade0:	f013 031f 	ands.w	r3, r3, #31
 801ade4:	b087      	sub	sp, #28
 801ade6:	bf18      	it	ne
 801ade8:	3604      	addne	r6, #4
 801adea:	2500      	movs	r5, #0
 801adec:	1f37      	subs	r7, r6, #4
 801adee:	4690      	mov	r8, r2
 801adf0:	6802      	ldr	r2, [r0, #0]
 801adf2:	9301      	str	r3, [sp, #4]
 801adf4:	4682      	mov	sl, r0
 801adf6:	f846 5c04 	str.w	r5, [r6, #-4]
 801adfa:	46b9      	mov	r9, r7
 801adfc:	463c      	mov	r4, r7
 801adfe:	9502      	str	r5, [sp, #8]
 801ae00:	46ab      	mov	fp, r5
 801ae02:	7851      	ldrb	r1, [r2, #1]
 801ae04:	1c53      	adds	r3, r2, #1
 801ae06:	9303      	str	r3, [sp, #12]
 801ae08:	b341      	cbz	r1, 801ae5c <__hexnan+0x88>
 801ae0a:	4608      	mov	r0, r1
 801ae0c:	9205      	str	r2, [sp, #20]
 801ae0e:	9104      	str	r1, [sp, #16]
 801ae10:	f7ff fd5e 	bl	801a8d0 <__hexdig_fun>
 801ae14:	2800      	cmp	r0, #0
 801ae16:	d14f      	bne.n	801aeb8 <__hexnan+0xe4>
 801ae18:	9904      	ldr	r1, [sp, #16]
 801ae1a:	9a05      	ldr	r2, [sp, #20]
 801ae1c:	2920      	cmp	r1, #32
 801ae1e:	d818      	bhi.n	801ae52 <__hexnan+0x7e>
 801ae20:	9b02      	ldr	r3, [sp, #8]
 801ae22:	459b      	cmp	fp, r3
 801ae24:	dd13      	ble.n	801ae4e <__hexnan+0x7a>
 801ae26:	454c      	cmp	r4, r9
 801ae28:	d206      	bcs.n	801ae38 <__hexnan+0x64>
 801ae2a:	2d07      	cmp	r5, #7
 801ae2c:	dc04      	bgt.n	801ae38 <__hexnan+0x64>
 801ae2e:	462a      	mov	r2, r5
 801ae30:	4649      	mov	r1, r9
 801ae32:	4620      	mov	r0, r4
 801ae34:	f7ff ffa8 	bl	801ad88 <L_shift>
 801ae38:	4544      	cmp	r4, r8
 801ae3a:	d950      	bls.n	801aede <__hexnan+0x10a>
 801ae3c:	2300      	movs	r3, #0
 801ae3e:	f1a4 0904 	sub.w	r9, r4, #4
 801ae42:	f844 3c04 	str.w	r3, [r4, #-4]
 801ae46:	f8cd b008 	str.w	fp, [sp, #8]
 801ae4a:	464c      	mov	r4, r9
 801ae4c:	461d      	mov	r5, r3
 801ae4e:	9a03      	ldr	r2, [sp, #12]
 801ae50:	e7d7      	b.n	801ae02 <__hexnan+0x2e>
 801ae52:	2929      	cmp	r1, #41	; 0x29
 801ae54:	d156      	bne.n	801af04 <__hexnan+0x130>
 801ae56:	3202      	adds	r2, #2
 801ae58:	f8ca 2000 	str.w	r2, [sl]
 801ae5c:	f1bb 0f00 	cmp.w	fp, #0
 801ae60:	d050      	beq.n	801af04 <__hexnan+0x130>
 801ae62:	454c      	cmp	r4, r9
 801ae64:	d206      	bcs.n	801ae74 <__hexnan+0xa0>
 801ae66:	2d07      	cmp	r5, #7
 801ae68:	dc04      	bgt.n	801ae74 <__hexnan+0xa0>
 801ae6a:	462a      	mov	r2, r5
 801ae6c:	4649      	mov	r1, r9
 801ae6e:	4620      	mov	r0, r4
 801ae70:	f7ff ff8a 	bl	801ad88 <L_shift>
 801ae74:	4544      	cmp	r4, r8
 801ae76:	d934      	bls.n	801aee2 <__hexnan+0x10e>
 801ae78:	f1a8 0204 	sub.w	r2, r8, #4
 801ae7c:	4623      	mov	r3, r4
 801ae7e:	f853 1b04 	ldr.w	r1, [r3], #4
 801ae82:	f842 1f04 	str.w	r1, [r2, #4]!
 801ae86:	429f      	cmp	r7, r3
 801ae88:	d2f9      	bcs.n	801ae7e <__hexnan+0xaa>
 801ae8a:	1b3b      	subs	r3, r7, r4
 801ae8c:	f023 0303 	bic.w	r3, r3, #3
 801ae90:	3304      	adds	r3, #4
 801ae92:	3401      	adds	r4, #1
 801ae94:	3e03      	subs	r6, #3
 801ae96:	42b4      	cmp	r4, r6
 801ae98:	bf88      	it	hi
 801ae9a:	2304      	movhi	r3, #4
 801ae9c:	4443      	add	r3, r8
 801ae9e:	2200      	movs	r2, #0
 801aea0:	f843 2b04 	str.w	r2, [r3], #4
 801aea4:	429f      	cmp	r7, r3
 801aea6:	d2fb      	bcs.n	801aea0 <__hexnan+0xcc>
 801aea8:	683b      	ldr	r3, [r7, #0]
 801aeaa:	b91b      	cbnz	r3, 801aeb4 <__hexnan+0xe0>
 801aeac:	4547      	cmp	r7, r8
 801aeae:	d127      	bne.n	801af00 <__hexnan+0x12c>
 801aeb0:	2301      	movs	r3, #1
 801aeb2:	603b      	str	r3, [r7, #0]
 801aeb4:	2005      	movs	r0, #5
 801aeb6:	e026      	b.n	801af06 <__hexnan+0x132>
 801aeb8:	3501      	adds	r5, #1
 801aeba:	2d08      	cmp	r5, #8
 801aebc:	f10b 0b01 	add.w	fp, fp, #1
 801aec0:	dd06      	ble.n	801aed0 <__hexnan+0xfc>
 801aec2:	4544      	cmp	r4, r8
 801aec4:	d9c3      	bls.n	801ae4e <__hexnan+0x7a>
 801aec6:	2300      	movs	r3, #0
 801aec8:	f844 3c04 	str.w	r3, [r4, #-4]
 801aecc:	2501      	movs	r5, #1
 801aece:	3c04      	subs	r4, #4
 801aed0:	6822      	ldr	r2, [r4, #0]
 801aed2:	f000 000f 	and.w	r0, r0, #15
 801aed6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801aeda:	6022      	str	r2, [r4, #0]
 801aedc:	e7b7      	b.n	801ae4e <__hexnan+0x7a>
 801aede:	2508      	movs	r5, #8
 801aee0:	e7b5      	b.n	801ae4e <__hexnan+0x7a>
 801aee2:	9b01      	ldr	r3, [sp, #4]
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d0df      	beq.n	801aea8 <__hexnan+0xd4>
 801aee8:	f04f 32ff 	mov.w	r2, #4294967295
 801aeec:	f1c3 0320 	rsb	r3, r3, #32
 801aef0:	fa22 f303 	lsr.w	r3, r2, r3
 801aef4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801aef8:	401a      	ands	r2, r3
 801aefa:	f846 2c04 	str.w	r2, [r6, #-4]
 801aefe:	e7d3      	b.n	801aea8 <__hexnan+0xd4>
 801af00:	3f04      	subs	r7, #4
 801af02:	e7d1      	b.n	801aea8 <__hexnan+0xd4>
 801af04:	2004      	movs	r0, #4
 801af06:	b007      	add	sp, #28
 801af08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af0c <_localeconv_r>:
 801af0c:	4800      	ldr	r0, [pc, #0]	; (801af10 <_localeconv_r+0x4>)
 801af0e:	4770      	bx	lr
 801af10:	24000258 	.word	0x24000258

0801af14 <_lseek_r>:
 801af14:	b538      	push	{r3, r4, r5, lr}
 801af16:	4d07      	ldr	r5, [pc, #28]	; (801af34 <_lseek_r+0x20>)
 801af18:	4604      	mov	r4, r0
 801af1a:	4608      	mov	r0, r1
 801af1c:	4611      	mov	r1, r2
 801af1e:	2200      	movs	r2, #0
 801af20:	602a      	str	r2, [r5, #0]
 801af22:	461a      	mov	r2, r3
 801af24:	f7e7 fdde 	bl	8002ae4 <_lseek>
 801af28:	1c43      	adds	r3, r0, #1
 801af2a:	d102      	bne.n	801af32 <_lseek_r+0x1e>
 801af2c:	682b      	ldr	r3, [r5, #0]
 801af2e:	b103      	cbz	r3, 801af32 <_lseek_r+0x1e>
 801af30:	6023      	str	r3, [r4, #0]
 801af32:	bd38      	pop	{r3, r4, r5, pc}
 801af34:	24002b70 	.word	0x24002b70

0801af38 <malloc>:
 801af38:	4b02      	ldr	r3, [pc, #8]	; (801af44 <malloc+0xc>)
 801af3a:	4601      	mov	r1, r0
 801af3c:	6818      	ldr	r0, [r3, #0]
 801af3e:	f000 bd55 	b.w	801b9ec <_malloc_r>
 801af42:	bf00      	nop
 801af44:	24000100 	.word	0x24000100

0801af48 <__ascii_mbtowc>:
 801af48:	b082      	sub	sp, #8
 801af4a:	b901      	cbnz	r1, 801af4e <__ascii_mbtowc+0x6>
 801af4c:	a901      	add	r1, sp, #4
 801af4e:	b142      	cbz	r2, 801af62 <__ascii_mbtowc+0x1a>
 801af50:	b14b      	cbz	r3, 801af66 <__ascii_mbtowc+0x1e>
 801af52:	7813      	ldrb	r3, [r2, #0]
 801af54:	600b      	str	r3, [r1, #0]
 801af56:	7812      	ldrb	r2, [r2, #0]
 801af58:	1e10      	subs	r0, r2, #0
 801af5a:	bf18      	it	ne
 801af5c:	2001      	movne	r0, #1
 801af5e:	b002      	add	sp, #8
 801af60:	4770      	bx	lr
 801af62:	4610      	mov	r0, r2
 801af64:	e7fb      	b.n	801af5e <__ascii_mbtowc+0x16>
 801af66:	f06f 0001 	mvn.w	r0, #1
 801af6a:	e7f8      	b.n	801af5e <__ascii_mbtowc+0x16>

0801af6c <_Balloc>:
 801af6c:	b570      	push	{r4, r5, r6, lr}
 801af6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801af70:	4604      	mov	r4, r0
 801af72:	460d      	mov	r5, r1
 801af74:	b976      	cbnz	r6, 801af94 <_Balloc+0x28>
 801af76:	2010      	movs	r0, #16
 801af78:	f7ff ffde 	bl	801af38 <malloc>
 801af7c:	4602      	mov	r2, r0
 801af7e:	6260      	str	r0, [r4, #36]	; 0x24
 801af80:	b920      	cbnz	r0, 801af8c <_Balloc+0x20>
 801af82:	4b18      	ldr	r3, [pc, #96]	; (801afe4 <_Balloc+0x78>)
 801af84:	4818      	ldr	r0, [pc, #96]	; (801afe8 <_Balloc+0x7c>)
 801af86:	2166      	movs	r1, #102	; 0x66
 801af88:	f000 ff4c 	bl	801be24 <__assert_func>
 801af8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801af90:	6006      	str	r6, [r0, #0]
 801af92:	60c6      	str	r6, [r0, #12]
 801af94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801af96:	68f3      	ldr	r3, [r6, #12]
 801af98:	b183      	cbz	r3, 801afbc <_Balloc+0x50>
 801af9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801af9c:	68db      	ldr	r3, [r3, #12]
 801af9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801afa2:	b9b8      	cbnz	r0, 801afd4 <_Balloc+0x68>
 801afa4:	2101      	movs	r1, #1
 801afa6:	fa01 f605 	lsl.w	r6, r1, r5
 801afaa:	1d72      	adds	r2, r6, #5
 801afac:	0092      	lsls	r2, r2, #2
 801afae:	4620      	mov	r0, r4
 801afb0:	f000 fc9a 	bl	801b8e8 <_calloc_r>
 801afb4:	b160      	cbz	r0, 801afd0 <_Balloc+0x64>
 801afb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801afba:	e00e      	b.n	801afda <_Balloc+0x6e>
 801afbc:	2221      	movs	r2, #33	; 0x21
 801afbe:	2104      	movs	r1, #4
 801afc0:	4620      	mov	r0, r4
 801afc2:	f000 fc91 	bl	801b8e8 <_calloc_r>
 801afc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801afc8:	60f0      	str	r0, [r6, #12]
 801afca:	68db      	ldr	r3, [r3, #12]
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d1e4      	bne.n	801af9a <_Balloc+0x2e>
 801afd0:	2000      	movs	r0, #0
 801afd2:	bd70      	pop	{r4, r5, r6, pc}
 801afd4:	6802      	ldr	r2, [r0, #0]
 801afd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801afda:	2300      	movs	r3, #0
 801afdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801afe0:	e7f7      	b.n	801afd2 <_Balloc+0x66>
 801afe2:	bf00      	nop
 801afe4:	0801cfd6 	.word	0x0801cfd6
 801afe8:	0801d0d4 	.word	0x0801d0d4

0801afec <_Bfree>:
 801afec:	b570      	push	{r4, r5, r6, lr}
 801afee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801aff0:	4605      	mov	r5, r0
 801aff2:	460c      	mov	r4, r1
 801aff4:	b976      	cbnz	r6, 801b014 <_Bfree+0x28>
 801aff6:	2010      	movs	r0, #16
 801aff8:	f7ff ff9e 	bl	801af38 <malloc>
 801affc:	4602      	mov	r2, r0
 801affe:	6268      	str	r0, [r5, #36]	; 0x24
 801b000:	b920      	cbnz	r0, 801b00c <_Bfree+0x20>
 801b002:	4b09      	ldr	r3, [pc, #36]	; (801b028 <_Bfree+0x3c>)
 801b004:	4809      	ldr	r0, [pc, #36]	; (801b02c <_Bfree+0x40>)
 801b006:	218a      	movs	r1, #138	; 0x8a
 801b008:	f000 ff0c 	bl	801be24 <__assert_func>
 801b00c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b010:	6006      	str	r6, [r0, #0]
 801b012:	60c6      	str	r6, [r0, #12]
 801b014:	b13c      	cbz	r4, 801b026 <_Bfree+0x3a>
 801b016:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b018:	6862      	ldr	r2, [r4, #4]
 801b01a:	68db      	ldr	r3, [r3, #12]
 801b01c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b020:	6021      	str	r1, [r4, #0]
 801b022:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b026:	bd70      	pop	{r4, r5, r6, pc}
 801b028:	0801cfd6 	.word	0x0801cfd6
 801b02c:	0801d0d4 	.word	0x0801d0d4

0801b030 <__multadd>:
 801b030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b034:	690d      	ldr	r5, [r1, #16]
 801b036:	4607      	mov	r7, r0
 801b038:	460c      	mov	r4, r1
 801b03a:	461e      	mov	r6, r3
 801b03c:	f101 0c14 	add.w	ip, r1, #20
 801b040:	2000      	movs	r0, #0
 801b042:	f8dc 3000 	ldr.w	r3, [ip]
 801b046:	b299      	uxth	r1, r3
 801b048:	fb02 6101 	mla	r1, r2, r1, r6
 801b04c:	0c1e      	lsrs	r6, r3, #16
 801b04e:	0c0b      	lsrs	r3, r1, #16
 801b050:	fb02 3306 	mla	r3, r2, r6, r3
 801b054:	b289      	uxth	r1, r1
 801b056:	3001      	adds	r0, #1
 801b058:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b05c:	4285      	cmp	r5, r0
 801b05e:	f84c 1b04 	str.w	r1, [ip], #4
 801b062:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b066:	dcec      	bgt.n	801b042 <__multadd+0x12>
 801b068:	b30e      	cbz	r6, 801b0ae <__multadd+0x7e>
 801b06a:	68a3      	ldr	r3, [r4, #8]
 801b06c:	42ab      	cmp	r3, r5
 801b06e:	dc19      	bgt.n	801b0a4 <__multadd+0x74>
 801b070:	6861      	ldr	r1, [r4, #4]
 801b072:	4638      	mov	r0, r7
 801b074:	3101      	adds	r1, #1
 801b076:	f7ff ff79 	bl	801af6c <_Balloc>
 801b07a:	4680      	mov	r8, r0
 801b07c:	b928      	cbnz	r0, 801b08a <__multadd+0x5a>
 801b07e:	4602      	mov	r2, r0
 801b080:	4b0c      	ldr	r3, [pc, #48]	; (801b0b4 <__multadd+0x84>)
 801b082:	480d      	ldr	r0, [pc, #52]	; (801b0b8 <__multadd+0x88>)
 801b084:	21b5      	movs	r1, #181	; 0xb5
 801b086:	f000 fecd 	bl	801be24 <__assert_func>
 801b08a:	6922      	ldr	r2, [r4, #16]
 801b08c:	3202      	adds	r2, #2
 801b08e:	f104 010c 	add.w	r1, r4, #12
 801b092:	0092      	lsls	r2, r2, #2
 801b094:	300c      	adds	r0, #12
 801b096:	f7fd f889 	bl	80181ac <memcpy>
 801b09a:	4621      	mov	r1, r4
 801b09c:	4638      	mov	r0, r7
 801b09e:	f7ff ffa5 	bl	801afec <_Bfree>
 801b0a2:	4644      	mov	r4, r8
 801b0a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b0a8:	3501      	adds	r5, #1
 801b0aa:	615e      	str	r6, [r3, #20]
 801b0ac:	6125      	str	r5, [r4, #16]
 801b0ae:	4620      	mov	r0, r4
 801b0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0b4:	0801d048 	.word	0x0801d048
 801b0b8:	0801d0d4 	.word	0x0801d0d4

0801b0bc <__s2b>:
 801b0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b0c0:	460c      	mov	r4, r1
 801b0c2:	4615      	mov	r5, r2
 801b0c4:	461f      	mov	r7, r3
 801b0c6:	2209      	movs	r2, #9
 801b0c8:	3308      	adds	r3, #8
 801b0ca:	4606      	mov	r6, r0
 801b0cc:	fb93 f3f2 	sdiv	r3, r3, r2
 801b0d0:	2100      	movs	r1, #0
 801b0d2:	2201      	movs	r2, #1
 801b0d4:	429a      	cmp	r2, r3
 801b0d6:	db09      	blt.n	801b0ec <__s2b+0x30>
 801b0d8:	4630      	mov	r0, r6
 801b0da:	f7ff ff47 	bl	801af6c <_Balloc>
 801b0de:	b940      	cbnz	r0, 801b0f2 <__s2b+0x36>
 801b0e0:	4602      	mov	r2, r0
 801b0e2:	4b19      	ldr	r3, [pc, #100]	; (801b148 <__s2b+0x8c>)
 801b0e4:	4819      	ldr	r0, [pc, #100]	; (801b14c <__s2b+0x90>)
 801b0e6:	21ce      	movs	r1, #206	; 0xce
 801b0e8:	f000 fe9c 	bl	801be24 <__assert_func>
 801b0ec:	0052      	lsls	r2, r2, #1
 801b0ee:	3101      	adds	r1, #1
 801b0f0:	e7f0      	b.n	801b0d4 <__s2b+0x18>
 801b0f2:	9b08      	ldr	r3, [sp, #32]
 801b0f4:	6143      	str	r3, [r0, #20]
 801b0f6:	2d09      	cmp	r5, #9
 801b0f8:	f04f 0301 	mov.w	r3, #1
 801b0fc:	6103      	str	r3, [r0, #16]
 801b0fe:	dd16      	ble.n	801b12e <__s2b+0x72>
 801b100:	f104 0909 	add.w	r9, r4, #9
 801b104:	46c8      	mov	r8, r9
 801b106:	442c      	add	r4, r5
 801b108:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b10c:	4601      	mov	r1, r0
 801b10e:	3b30      	subs	r3, #48	; 0x30
 801b110:	220a      	movs	r2, #10
 801b112:	4630      	mov	r0, r6
 801b114:	f7ff ff8c 	bl	801b030 <__multadd>
 801b118:	45a0      	cmp	r8, r4
 801b11a:	d1f5      	bne.n	801b108 <__s2b+0x4c>
 801b11c:	f1a5 0408 	sub.w	r4, r5, #8
 801b120:	444c      	add	r4, r9
 801b122:	1b2d      	subs	r5, r5, r4
 801b124:	1963      	adds	r3, r4, r5
 801b126:	42bb      	cmp	r3, r7
 801b128:	db04      	blt.n	801b134 <__s2b+0x78>
 801b12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b12e:	340a      	adds	r4, #10
 801b130:	2509      	movs	r5, #9
 801b132:	e7f6      	b.n	801b122 <__s2b+0x66>
 801b134:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b138:	4601      	mov	r1, r0
 801b13a:	3b30      	subs	r3, #48	; 0x30
 801b13c:	220a      	movs	r2, #10
 801b13e:	4630      	mov	r0, r6
 801b140:	f7ff ff76 	bl	801b030 <__multadd>
 801b144:	e7ee      	b.n	801b124 <__s2b+0x68>
 801b146:	bf00      	nop
 801b148:	0801d048 	.word	0x0801d048
 801b14c:	0801d0d4 	.word	0x0801d0d4

0801b150 <__hi0bits>:
 801b150:	0c03      	lsrs	r3, r0, #16
 801b152:	041b      	lsls	r3, r3, #16
 801b154:	b9d3      	cbnz	r3, 801b18c <__hi0bits+0x3c>
 801b156:	0400      	lsls	r0, r0, #16
 801b158:	2310      	movs	r3, #16
 801b15a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b15e:	bf04      	itt	eq
 801b160:	0200      	lsleq	r0, r0, #8
 801b162:	3308      	addeq	r3, #8
 801b164:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b168:	bf04      	itt	eq
 801b16a:	0100      	lsleq	r0, r0, #4
 801b16c:	3304      	addeq	r3, #4
 801b16e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b172:	bf04      	itt	eq
 801b174:	0080      	lsleq	r0, r0, #2
 801b176:	3302      	addeq	r3, #2
 801b178:	2800      	cmp	r0, #0
 801b17a:	db05      	blt.n	801b188 <__hi0bits+0x38>
 801b17c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b180:	f103 0301 	add.w	r3, r3, #1
 801b184:	bf08      	it	eq
 801b186:	2320      	moveq	r3, #32
 801b188:	4618      	mov	r0, r3
 801b18a:	4770      	bx	lr
 801b18c:	2300      	movs	r3, #0
 801b18e:	e7e4      	b.n	801b15a <__hi0bits+0xa>

0801b190 <__lo0bits>:
 801b190:	6803      	ldr	r3, [r0, #0]
 801b192:	f013 0207 	ands.w	r2, r3, #7
 801b196:	4601      	mov	r1, r0
 801b198:	d00b      	beq.n	801b1b2 <__lo0bits+0x22>
 801b19a:	07da      	lsls	r2, r3, #31
 801b19c:	d423      	bmi.n	801b1e6 <__lo0bits+0x56>
 801b19e:	0798      	lsls	r0, r3, #30
 801b1a0:	bf49      	itett	mi
 801b1a2:	085b      	lsrmi	r3, r3, #1
 801b1a4:	089b      	lsrpl	r3, r3, #2
 801b1a6:	2001      	movmi	r0, #1
 801b1a8:	600b      	strmi	r3, [r1, #0]
 801b1aa:	bf5c      	itt	pl
 801b1ac:	600b      	strpl	r3, [r1, #0]
 801b1ae:	2002      	movpl	r0, #2
 801b1b0:	4770      	bx	lr
 801b1b2:	b298      	uxth	r0, r3
 801b1b4:	b9a8      	cbnz	r0, 801b1e2 <__lo0bits+0x52>
 801b1b6:	0c1b      	lsrs	r3, r3, #16
 801b1b8:	2010      	movs	r0, #16
 801b1ba:	b2da      	uxtb	r2, r3
 801b1bc:	b90a      	cbnz	r2, 801b1c2 <__lo0bits+0x32>
 801b1be:	3008      	adds	r0, #8
 801b1c0:	0a1b      	lsrs	r3, r3, #8
 801b1c2:	071a      	lsls	r2, r3, #28
 801b1c4:	bf04      	itt	eq
 801b1c6:	091b      	lsreq	r3, r3, #4
 801b1c8:	3004      	addeq	r0, #4
 801b1ca:	079a      	lsls	r2, r3, #30
 801b1cc:	bf04      	itt	eq
 801b1ce:	089b      	lsreq	r3, r3, #2
 801b1d0:	3002      	addeq	r0, #2
 801b1d2:	07da      	lsls	r2, r3, #31
 801b1d4:	d403      	bmi.n	801b1de <__lo0bits+0x4e>
 801b1d6:	085b      	lsrs	r3, r3, #1
 801b1d8:	f100 0001 	add.w	r0, r0, #1
 801b1dc:	d005      	beq.n	801b1ea <__lo0bits+0x5a>
 801b1de:	600b      	str	r3, [r1, #0]
 801b1e0:	4770      	bx	lr
 801b1e2:	4610      	mov	r0, r2
 801b1e4:	e7e9      	b.n	801b1ba <__lo0bits+0x2a>
 801b1e6:	2000      	movs	r0, #0
 801b1e8:	4770      	bx	lr
 801b1ea:	2020      	movs	r0, #32
 801b1ec:	4770      	bx	lr
	...

0801b1f0 <__i2b>:
 801b1f0:	b510      	push	{r4, lr}
 801b1f2:	460c      	mov	r4, r1
 801b1f4:	2101      	movs	r1, #1
 801b1f6:	f7ff feb9 	bl	801af6c <_Balloc>
 801b1fa:	4602      	mov	r2, r0
 801b1fc:	b928      	cbnz	r0, 801b20a <__i2b+0x1a>
 801b1fe:	4b05      	ldr	r3, [pc, #20]	; (801b214 <__i2b+0x24>)
 801b200:	4805      	ldr	r0, [pc, #20]	; (801b218 <__i2b+0x28>)
 801b202:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b206:	f000 fe0d 	bl	801be24 <__assert_func>
 801b20a:	2301      	movs	r3, #1
 801b20c:	6144      	str	r4, [r0, #20]
 801b20e:	6103      	str	r3, [r0, #16]
 801b210:	bd10      	pop	{r4, pc}
 801b212:	bf00      	nop
 801b214:	0801d048 	.word	0x0801d048
 801b218:	0801d0d4 	.word	0x0801d0d4

0801b21c <__multiply>:
 801b21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b220:	4691      	mov	r9, r2
 801b222:	690a      	ldr	r2, [r1, #16]
 801b224:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b228:	429a      	cmp	r2, r3
 801b22a:	bfb8      	it	lt
 801b22c:	460b      	movlt	r3, r1
 801b22e:	460c      	mov	r4, r1
 801b230:	bfbc      	itt	lt
 801b232:	464c      	movlt	r4, r9
 801b234:	4699      	movlt	r9, r3
 801b236:	6927      	ldr	r7, [r4, #16]
 801b238:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b23c:	68a3      	ldr	r3, [r4, #8]
 801b23e:	6861      	ldr	r1, [r4, #4]
 801b240:	eb07 060a 	add.w	r6, r7, sl
 801b244:	42b3      	cmp	r3, r6
 801b246:	b085      	sub	sp, #20
 801b248:	bfb8      	it	lt
 801b24a:	3101      	addlt	r1, #1
 801b24c:	f7ff fe8e 	bl	801af6c <_Balloc>
 801b250:	b930      	cbnz	r0, 801b260 <__multiply+0x44>
 801b252:	4602      	mov	r2, r0
 801b254:	4b44      	ldr	r3, [pc, #272]	; (801b368 <__multiply+0x14c>)
 801b256:	4845      	ldr	r0, [pc, #276]	; (801b36c <__multiply+0x150>)
 801b258:	f240 115d 	movw	r1, #349	; 0x15d
 801b25c:	f000 fde2 	bl	801be24 <__assert_func>
 801b260:	f100 0514 	add.w	r5, r0, #20
 801b264:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b268:	462b      	mov	r3, r5
 801b26a:	2200      	movs	r2, #0
 801b26c:	4543      	cmp	r3, r8
 801b26e:	d321      	bcc.n	801b2b4 <__multiply+0x98>
 801b270:	f104 0314 	add.w	r3, r4, #20
 801b274:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b278:	f109 0314 	add.w	r3, r9, #20
 801b27c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b280:	9202      	str	r2, [sp, #8]
 801b282:	1b3a      	subs	r2, r7, r4
 801b284:	3a15      	subs	r2, #21
 801b286:	f022 0203 	bic.w	r2, r2, #3
 801b28a:	3204      	adds	r2, #4
 801b28c:	f104 0115 	add.w	r1, r4, #21
 801b290:	428f      	cmp	r7, r1
 801b292:	bf38      	it	cc
 801b294:	2204      	movcc	r2, #4
 801b296:	9201      	str	r2, [sp, #4]
 801b298:	9a02      	ldr	r2, [sp, #8]
 801b29a:	9303      	str	r3, [sp, #12]
 801b29c:	429a      	cmp	r2, r3
 801b29e:	d80c      	bhi.n	801b2ba <__multiply+0x9e>
 801b2a0:	2e00      	cmp	r6, #0
 801b2a2:	dd03      	ble.n	801b2ac <__multiply+0x90>
 801b2a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d05a      	beq.n	801b362 <__multiply+0x146>
 801b2ac:	6106      	str	r6, [r0, #16]
 801b2ae:	b005      	add	sp, #20
 801b2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2b4:	f843 2b04 	str.w	r2, [r3], #4
 801b2b8:	e7d8      	b.n	801b26c <__multiply+0x50>
 801b2ba:	f8b3 a000 	ldrh.w	sl, [r3]
 801b2be:	f1ba 0f00 	cmp.w	sl, #0
 801b2c2:	d024      	beq.n	801b30e <__multiply+0xf2>
 801b2c4:	f104 0e14 	add.w	lr, r4, #20
 801b2c8:	46a9      	mov	r9, r5
 801b2ca:	f04f 0c00 	mov.w	ip, #0
 801b2ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b2d2:	f8d9 1000 	ldr.w	r1, [r9]
 801b2d6:	fa1f fb82 	uxth.w	fp, r2
 801b2da:	b289      	uxth	r1, r1
 801b2dc:	fb0a 110b 	mla	r1, sl, fp, r1
 801b2e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b2e4:	f8d9 2000 	ldr.w	r2, [r9]
 801b2e8:	4461      	add	r1, ip
 801b2ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b2ee:	fb0a c20b 	mla	r2, sl, fp, ip
 801b2f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b2f6:	b289      	uxth	r1, r1
 801b2f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b2fc:	4577      	cmp	r7, lr
 801b2fe:	f849 1b04 	str.w	r1, [r9], #4
 801b302:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b306:	d8e2      	bhi.n	801b2ce <__multiply+0xb2>
 801b308:	9a01      	ldr	r2, [sp, #4]
 801b30a:	f845 c002 	str.w	ip, [r5, r2]
 801b30e:	9a03      	ldr	r2, [sp, #12]
 801b310:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b314:	3304      	adds	r3, #4
 801b316:	f1b9 0f00 	cmp.w	r9, #0
 801b31a:	d020      	beq.n	801b35e <__multiply+0x142>
 801b31c:	6829      	ldr	r1, [r5, #0]
 801b31e:	f104 0c14 	add.w	ip, r4, #20
 801b322:	46ae      	mov	lr, r5
 801b324:	f04f 0a00 	mov.w	sl, #0
 801b328:	f8bc b000 	ldrh.w	fp, [ip]
 801b32c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b330:	fb09 220b 	mla	r2, r9, fp, r2
 801b334:	4492      	add	sl, r2
 801b336:	b289      	uxth	r1, r1
 801b338:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801b33c:	f84e 1b04 	str.w	r1, [lr], #4
 801b340:	f85c 2b04 	ldr.w	r2, [ip], #4
 801b344:	f8be 1000 	ldrh.w	r1, [lr]
 801b348:	0c12      	lsrs	r2, r2, #16
 801b34a:	fb09 1102 	mla	r1, r9, r2, r1
 801b34e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801b352:	4567      	cmp	r7, ip
 801b354:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b358:	d8e6      	bhi.n	801b328 <__multiply+0x10c>
 801b35a:	9a01      	ldr	r2, [sp, #4]
 801b35c:	50a9      	str	r1, [r5, r2]
 801b35e:	3504      	adds	r5, #4
 801b360:	e79a      	b.n	801b298 <__multiply+0x7c>
 801b362:	3e01      	subs	r6, #1
 801b364:	e79c      	b.n	801b2a0 <__multiply+0x84>
 801b366:	bf00      	nop
 801b368:	0801d048 	.word	0x0801d048
 801b36c:	0801d0d4 	.word	0x0801d0d4

0801b370 <__pow5mult>:
 801b370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b374:	4615      	mov	r5, r2
 801b376:	f012 0203 	ands.w	r2, r2, #3
 801b37a:	4606      	mov	r6, r0
 801b37c:	460f      	mov	r7, r1
 801b37e:	d007      	beq.n	801b390 <__pow5mult+0x20>
 801b380:	4c25      	ldr	r4, [pc, #148]	; (801b418 <__pow5mult+0xa8>)
 801b382:	3a01      	subs	r2, #1
 801b384:	2300      	movs	r3, #0
 801b386:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b38a:	f7ff fe51 	bl	801b030 <__multadd>
 801b38e:	4607      	mov	r7, r0
 801b390:	10ad      	asrs	r5, r5, #2
 801b392:	d03d      	beq.n	801b410 <__pow5mult+0xa0>
 801b394:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b396:	b97c      	cbnz	r4, 801b3b8 <__pow5mult+0x48>
 801b398:	2010      	movs	r0, #16
 801b39a:	f7ff fdcd 	bl	801af38 <malloc>
 801b39e:	4602      	mov	r2, r0
 801b3a0:	6270      	str	r0, [r6, #36]	; 0x24
 801b3a2:	b928      	cbnz	r0, 801b3b0 <__pow5mult+0x40>
 801b3a4:	4b1d      	ldr	r3, [pc, #116]	; (801b41c <__pow5mult+0xac>)
 801b3a6:	481e      	ldr	r0, [pc, #120]	; (801b420 <__pow5mult+0xb0>)
 801b3a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801b3ac:	f000 fd3a 	bl	801be24 <__assert_func>
 801b3b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b3b4:	6004      	str	r4, [r0, #0]
 801b3b6:	60c4      	str	r4, [r0, #12]
 801b3b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b3bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b3c0:	b94c      	cbnz	r4, 801b3d6 <__pow5mult+0x66>
 801b3c2:	f240 2171 	movw	r1, #625	; 0x271
 801b3c6:	4630      	mov	r0, r6
 801b3c8:	f7ff ff12 	bl	801b1f0 <__i2b>
 801b3cc:	2300      	movs	r3, #0
 801b3ce:	f8c8 0008 	str.w	r0, [r8, #8]
 801b3d2:	4604      	mov	r4, r0
 801b3d4:	6003      	str	r3, [r0, #0]
 801b3d6:	f04f 0900 	mov.w	r9, #0
 801b3da:	07eb      	lsls	r3, r5, #31
 801b3dc:	d50a      	bpl.n	801b3f4 <__pow5mult+0x84>
 801b3de:	4639      	mov	r1, r7
 801b3e0:	4622      	mov	r2, r4
 801b3e2:	4630      	mov	r0, r6
 801b3e4:	f7ff ff1a 	bl	801b21c <__multiply>
 801b3e8:	4639      	mov	r1, r7
 801b3ea:	4680      	mov	r8, r0
 801b3ec:	4630      	mov	r0, r6
 801b3ee:	f7ff fdfd 	bl	801afec <_Bfree>
 801b3f2:	4647      	mov	r7, r8
 801b3f4:	106d      	asrs	r5, r5, #1
 801b3f6:	d00b      	beq.n	801b410 <__pow5mult+0xa0>
 801b3f8:	6820      	ldr	r0, [r4, #0]
 801b3fa:	b938      	cbnz	r0, 801b40c <__pow5mult+0x9c>
 801b3fc:	4622      	mov	r2, r4
 801b3fe:	4621      	mov	r1, r4
 801b400:	4630      	mov	r0, r6
 801b402:	f7ff ff0b 	bl	801b21c <__multiply>
 801b406:	6020      	str	r0, [r4, #0]
 801b408:	f8c0 9000 	str.w	r9, [r0]
 801b40c:	4604      	mov	r4, r0
 801b40e:	e7e4      	b.n	801b3da <__pow5mult+0x6a>
 801b410:	4638      	mov	r0, r7
 801b412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b416:	bf00      	nop
 801b418:	0801d220 	.word	0x0801d220
 801b41c:	0801cfd6 	.word	0x0801cfd6
 801b420:	0801d0d4 	.word	0x0801d0d4

0801b424 <__lshift>:
 801b424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b428:	460c      	mov	r4, r1
 801b42a:	6849      	ldr	r1, [r1, #4]
 801b42c:	6923      	ldr	r3, [r4, #16]
 801b42e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b432:	68a3      	ldr	r3, [r4, #8]
 801b434:	4607      	mov	r7, r0
 801b436:	4691      	mov	r9, r2
 801b438:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b43c:	f108 0601 	add.w	r6, r8, #1
 801b440:	42b3      	cmp	r3, r6
 801b442:	db0b      	blt.n	801b45c <__lshift+0x38>
 801b444:	4638      	mov	r0, r7
 801b446:	f7ff fd91 	bl	801af6c <_Balloc>
 801b44a:	4605      	mov	r5, r0
 801b44c:	b948      	cbnz	r0, 801b462 <__lshift+0x3e>
 801b44e:	4602      	mov	r2, r0
 801b450:	4b2a      	ldr	r3, [pc, #168]	; (801b4fc <__lshift+0xd8>)
 801b452:	482b      	ldr	r0, [pc, #172]	; (801b500 <__lshift+0xdc>)
 801b454:	f240 11d9 	movw	r1, #473	; 0x1d9
 801b458:	f000 fce4 	bl	801be24 <__assert_func>
 801b45c:	3101      	adds	r1, #1
 801b45e:	005b      	lsls	r3, r3, #1
 801b460:	e7ee      	b.n	801b440 <__lshift+0x1c>
 801b462:	2300      	movs	r3, #0
 801b464:	f100 0114 	add.w	r1, r0, #20
 801b468:	f100 0210 	add.w	r2, r0, #16
 801b46c:	4618      	mov	r0, r3
 801b46e:	4553      	cmp	r3, sl
 801b470:	db37      	blt.n	801b4e2 <__lshift+0xbe>
 801b472:	6920      	ldr	r0, [r4, #16]
 801b474:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b478:	f104 0314 	add.w	r3, r4, #20
 801b47c:	f019 091f 	ands.w	r9, r9, #31
 801b480:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b484:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b488:	d02f      	beq.n	801b4ea <__lshift+0xc6>
 801b48a:	f1c9 0e20 	rsb	lr, r9, #32
 801b48e:	468a      	mov	sl, r1
 801b490:	f04f 0c00 	mov.w	ip, #0
 801b494:	681a      	ldr	r2, [r3, #0]
 801b496:	fa02 f209 	lsl.w	r2, r2, r9
 801b49a:	ea42 020c 	orr.w	r2, r2, ip
 801b49e:	f84a 2b04 	str.w	r2, [sl], #4
 801b4a2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b4a6:	4298      	cmp	r0, r3
 801b4a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 801b4ac:	d8f2      	bhi.n	801b494 <__lshift+0x70>
 801b4ae:	1b03      	subs	r3, r0, r4
 801b4b0:	3b15      	subs	r3, #21
 801b4b2:	f023 0303 	bic.w	r3, r3, #3
 801b4b6:	3304      	adds	r3, #4
 801b4b8:	f104 0215 	add.w	r2, r4, #21
 801b4bc:	4290      	cmp	r0, r2
 801b4be:	bf38      	it	cc
 801b4c0:	2304      	movcc	r3, #4
 801b4c2:	f841 c003 	str.w	ip, [r1, r3]
 801b4c6:	f1bc 0f00 	cmp.w	ip, #0
 801b4ca:	d001      	beq.n	801b4d0 <__lshift+0xac>
 801b4cc:	f108 0602 	add.w	r6, r8, #2
 801b4d0:	3e01      	subs	r6, #1
 801b4d2:	4638      	mov	r0, r7
 801b4d4:	612e      	str	r6, [r5, #16]
 801b4d6:	4621      	mov	r1, r4
 801b4d8:	f7ff fd88 	bl	801afec <_Bfree>
 801b4dc:	4628      	mov	r0, r5
 801b4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4e2:	f842 0f04 	str.w	r0, [r2, #4]!
 801b4e6:	3301      	adds	r3, #1
 801b4e8:	e7c1      	b.n	801b46e <__lshift+0x4a>
 801b4ea:	3904      	subs	r1, #4
 801b4ec:	f853 2b04 	ldr.w	r2, [r3], #4
 801b4f0:	f841 2f04 	str.w	r2, [r1, #4]!
 801b4f4:	4298      	cmp	r0, r3
 801b4f6:	d8f9      	bhi.n	801b4ec <__lshift+0xc8>
 801b4f8:	e7ea      	b.n	801b4d0 <__lshift+0xac>
 801b4fa:	bf00      	nop
 801b4fc:	0801d048 	.word	0x0801d048
 801b500:	0801d0d4 	.word	0x0801d0d4

0801b504 <__mcmp>:
 801b504:	b530      	push	{r4, r5, lr}
 801b506:	6902      	ldr	r2, [r0, #16]
 801b508:	690c      	ldr	r4, [r1, #16]
 801b50a:	1b12      	subs	r2, r2, r4
 801b50c:	d10e      	bne.n	801b52c <__mcmp+0x28>
 801b50e:	f100 0314 	add.w	r3, r0, #20
 801b512:	3114      	adds	r1, #20
 801b514:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b518:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b51c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b520:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b524:	42a5      	cmp	r5, r4
 801b526:	d003      	beq.n	801b530 <__mcmp+0x2c>
 801b528:	d305      	bcc.n	801b536 <__mcmp+0x32>
 801b52a:	2201      	movs	r2, #1
 801b52c:	4610      	mov	r0, r2
 801b52e:	bd30      	pop	{r4, r5, pc}
 801b530:	4283      	cmp	r3, r0
 801b532:	d3f3      	bcc.n	801b51c <__mcmp+0x18>
 801b534:	e7fa      	b.n	801b52c <__mcmp+0x28>
 801b536:	f04f 32ff 	mov.w	r2, #4294967295
 801b53a:	e7f7      	b.n	801b52c <__mcmp+0x28>

0801b53c <__mdiff>:
 801b53c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b540:	460c      	mov	r4, r1
 801b542:	4606      	mov	r6, r0
 801b544:	4611      	mov	r1, r2
 801b546:	4620      	mov	r0, r4
 801b548:	4690      	mov	r8, r2
 801b54a:	f7ff ffdb 	bl	801b504 <__mcmp>
 801b54e:	1e05      	subs	r5, r0, #0
 801b550:	d110      	bne.n	801b574 <__mdiff+0x38>
 801b552:	4629      	mov	r1, r5
 801b554:	4630      	mov	r0, r6
 801b556:	f7ff fd09 	bl	801af6c <_Balloc>
 801b55a:	b930      	cbnz	r0, 801b56a <__mdiff+0x2e>
 801b55c:	4b3a      	ldr	r3, [pc, #232]	; (801b648 <__mdiff+0x10c>)
 801b55e:	4602      	mov	r2, r0
 801b560:	f240 2132 	movw	r1, #562	; 0x232
 801b564:	4839      	ldr	r0, [pc, #228]	; (801b64c <__mdiff+0x110>)
 801b566:	f000 fc5d 	bl	801be24 <__assert_func>
 801b56a:	2301      	movs	r3, #1
 801b56c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b574:	bfa4      	itt	ge
 801b576:	4643      	movge	r3, r8
 801b578:	46a0      	movge	r8, r4
 801b57a:	4630      	mov	r0, r6
 801b57c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b580:	bfa6      	itte	ge
 801b582:	461c      	movge	r4, r3
 801b584:	2500      	movge	r5, #0
 801b586:	2501      	movlt	r5, #1
 801b588:	f7ff fcf0 	bl	801af6c <_Balloc>
 801b58c:	b920      	cbnz	r0, 801b598 <__mdiff+0x5c>
 801b58e:	4b2e      	ldr	r3, [pc, #184]	; (801b648 <__mdiff+0x10c>)
 801b590:	4602      	mov	r2, r0
 801b592:	f44f 7110 	mov.w	r1, #576	; 0x240
 801b596:	e7e5      	b.n	801b564 <__mdiff+0x28>
 801b598:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b59c:	6926      	ldr	r6, [r4, #16]
 801b59e:	60c5      	str	r5, [r0, #12]
 801b5a0:	f104 0914 	add.w	r9, r4, #20
 801b5a4:	f108 0514 	add.w	r5, r8, #20
 801b5a8:	f100 0e14 	add.w	lr, r0, #20
 801b5ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b5b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b5b4:	f108 0210 	add.w	r2, r8, #16
 801b5b8:	46f2      	mov	sl, lr
 801b5ba:	2100      	movs	r1, #0
 801b5bc:	f859 3b04 	ldr.w	r3, [r9], #4
 801b5c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b5c4:	fa1f f883 	uxth.w	r8, r3
 801b5c8:	fa11 f18b 	uxtah	r1, r1, fp
 801b5cc:	0c1b      	lsrs	r3, r3, #16
 801b5ce:	eba1 0808 	sub.w	r8, r1, r8
 801b5d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b5d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b5da:	fa1f f888 	uxth.w	r8, r8
 801b5de:	1419      	asrs	r1, r3, #16
 801b5e0:	454e      	cmp	r6, r9
 801b5e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b5e6:	f84a 3b04 	str.w	r3, [sl], #4
 801b5ea:	d8e7      	bhi.n	801b5bc <__mdiff+0x80>
 801b5ec:	1b33      	subs	r3, r6, r4
 801b5ee:	3b15      	subs	r3, #21
 801b5f0:	f023 0303 	bic.w	r3, r3, #3
 801b5f4:	3304      	adds	r3, #4
 801b5f6:	3415      	adds	r4, #21
 801b5f8:	42a6      	cmp	r6, r4
 801b5fa:	bf38      	it	cc
 801b5fc:	2304      	movcc	r3, #4
 801b5fe:	441d      	add	r5, r3
 801b600:	4473      	add	r3, lr
 801b602:	469e      	mov	lr, r3
 801b604:	462e      	mov	r6, r5
 801b606:	4566      	cmp	r6, ip
 801b608:	d30e      	bcc.n	801b628 <__mdiff+0xec>
 801b60a:	f10c 0203 	add.w	r2, ip, #3
 801b60e:	1b52      	subs	r2, r2, r5
 801b610:	f022 0203 	bic.w	r2, r2, #3
 801b614:	3d03      	subs	r5, #3
 801b616:	45ac      	cmp	ip, r5
 801b618:	bf38      	it	cc
 801b61a:	2200      	movcc	r2, #0
 801b61c:	441a      	add	r2, r3
 801b61e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801b622:	b17b      	cbz	r3, 801b644 <__mdiff+0x108>
 801b624:	6107      	str	r7, [r0, #16]
 801b626:	e7a3      	b.n	801b570 <__mdiff+0x34>
 801b628:	f856 8b04 	ldr.w	r8, [r6], #4
 801b62c:	fa11 f288 	uxtah	r2, r1, r8
 801b630:	1414      	asrs	r4, r2, #16
 801b632:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b636:	b292      	uxth	r2, r2
 801b638:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b63c:	f84e 2b04 	str.w	r2, [lr], #4
 801b640:	1421      	asrs	r1, r4, #16
 801b642:	e7e0      	b.n	801b606 <__mdiff+0xca>
 801b644:	3f01      	subs	r7, #1
 801b646:	e7ea      	b.n	801b61e <__mdiff+0xe2>
 801b648:	0801d048 	.word	0x0801d048
 801b64c:	0801d0d4 	.word	0x0801d0d4

0801b650 <__ulp>:
 801b650:	b082      	sub	sp, #8
 801b652:	ed8d 0b00 	vstr	d0, [sp]
 801b656:	9b01      	ldr	r3, [sp, #4]
 801b658:	4912      	ldr	r1, [pc, #72]	; (801b6a4 <__ulp+0x54>)
 801b65a:	4019      	ands	r1, r3
 801b65c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801b660:	2900      	cmp	r1, #0
 801b662:	dd05      	ble.n	801b670 <__ulp+0x20>
 801b664:	2200      	movs	r2, #0
 801b666:	460b      	mov	r3, r1
 801b668:	ec43 2b10 	vmov	d0, r2, r3
 801b66c:	b002      	add	sp, #8
 801b66e:	4770      	bx	lr
 801b670:	4249      	negs	r1, r1
 801b672:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801b676:	ea4f 5021 	mov.w	r0, r1, asr #20
 801b67a:	f04f 0200 	mov.w	r2, #0
 801b67e:	f04f 0300 	mov.w	r3, #0
 801b682:	da04      	bge.n	801b68e <__ulp+0x3e>
 801b684:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801b688:	fa41 f300 	asr.w	r3, r1, r0
 801b68c:	e7ec      	b.n	801b668 <__ulp+0x18>
 801b68e:	f1a0 0114 	sub.w	r1, r0, #20
 801b692:	291e      	cmp	r1, #30
 801b694:	bfda      	itte	le
 801b696:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801b69a:	fa20 f101 	lsrle.w	r1, r0, r1
 801b69e:	2101      	movgt	r1, #1
 801b6a0:	460a      	mov	r2, r1
 801b6a2:	e7e1      	b.n	801b668 <__ulp+0x18>
 801b6a4:	7ff00000 	.word	0x7ff00000

0801b6a8 <__b2d>:
 801b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6aa:	6905      	ldr	r5, [r0, #16]
 801b6ac:	f100 0714 	add.w	r7, r0, #20
 801b6b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801b6b4:	1f2e      	subs	r6, r5, #4
 801b6b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801b6ba:	4620      	mov	r0, r4
 801b6bc:	f7ff fd48 	bl	801b150 <__hi0bits>
 801b6c0:	f1c0 0320 	rsb	r3, r0, #32
 801b6c4:	280a      	cmp	r0, #10
 801b6c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801b744 <__b2d+0x9c>
 801b6ca:	600b      	str	r3, [r1, #0]
 801b6cc:	dc14      	bgt.n	801b6f8 <__b2d+0x50>
 801b6ce:	f1c0 0e0b 	rsb	lr, r0, #11
 801b6d2:	fa24 f10e 	lsr.w	r1, r4, lr
 801b6d6:	42b7      	cmp	r7, r6
 801b6d8:	ea41 030c 	orr.w	r3, r1, ip
 801b6dc:	bf34      	ite	cc
 801b6de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801b6e2:	2100      	movcs	r1, #0
 801b6e4:	3015      	adds	r0, #21
 801b6e6:	fa04 f000 	lsl.w	r0, r4, r0
 801b6ea:	fa21 f10e 	lsr.w	r1, r1, lr
 801b6ee:	ea40 0201 	orr.w	r2, r0, r1
 801b6f2:	ec43 2b10 	vmov	d0, r2, r3
 801b6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b6f8:	42b7      	cmp	r7, r6
 801b6fa:	bf3a      	itte	cc
 801b6fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801b700:	f1a5 0608 	subcc.w	r6, r5, #8
 801b704:	2100      	movcs	r1, #0
 801b706:	380b      	subs	r0, #11
 801b708:	d017      	beq.n	801b73a <__b2d+0x92>
 801b70a:	f1c0 0c20 	rsb	ip, r0, #32
 801b70e:	fa04 f500 	lsl.w	r5, r4, r0
 801b712:	42be      	cmp	r6, r7
 801b714:	fa21 f40c 	lsr.w	r4, r1, ip
 801b718:	ea45 0504 	orr.w	r5, r5, r4
 801b71c:	bf8c      	ite	hi
 801b71e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801b722:	2400      	movls	r4, #0
 801b724:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801b728:	fa01 f000 	lsl.w	r0, r1, r0
 801b72c:	fa24 f40c 	lsr.w	r4, r4, ip
 801b730:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801b734:	ea40 0204 	orr.w	r2, r0, r4
 801b738:	e7db      	b.n	801b6f2 <__b2d+0x4a>
 801b73a:	ea44 030c 	orr.w	r3, r4, ip
 801b73e:	460a      	mov	r2, r1
 801b740:	e7d7      	b.n	801b6f2 <__b2d+0x4a>
 801b742:	bf00      	nop
 801b744:	3ff00000 	.word	0x3ff00000

0801b748 <__d2b>:
 801b748:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b74c:	4689      	mov	r9, r1
 801b74e:	2101      	movs	r1, #1
 801b750:	ec57 6b10 	vmov	r6, r7, d0
 801b754:	4690      	mov	r8, r2
 801b756:	f7ff fc09 	bl	801af6c <_Balloc>
 801b75a:	4604      	mov	r4, r0
 801b75c:	b930      	cbnz	r0, 801b76c <__d2b+0x24>
 801b75e:	4602      	mov	r2, r0
 801b760:	4b25      	ldr	r3, [pc, #148]	; (801b7f8 <__d2b+0xb0>)
 801b762:	4826      	ldr	r0, [pc, #152]	; (801b7fc <__d2b+0xb4>)
 801b764:	f240 310a 	movw	r1, #778	; 0x30a
 801b768:	f000 fb5c 	bl	801be24 <__assert_func>
 801b76c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801b770:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b774:	bb35      	cbnz	r5, 801b7c4 <__d2b+0x7c>
 801b776:	2e00      	cmp	r6, #0
 801b778:	9301      	str	r3, [sp, #4]
 801b77a:	d028      	beq.n	801b7ce <__d2b+0x86>
 801b77c:	4668      	mov	r0, sp
 801b77e:	9600      	str	r6, [sp, #0]
 801b780:	f7ff fd06 	bl	801b190 <__lo0bits>
 801b784:	9900      	ldr	r1, [sp, #0]
 801b786:	b300      	cbz	r0, 801b7ca <__d2b+0x82>
 801b788:	9a01      	ldr	r2, [sp, #4]
 801b78a:	f1c0 0320 	rsb	r3, r0, #32
 801b78e:	fa02 f303 	lsl.w	r3, r2, r3
 801b792:	430b      	orrs	r3, r1
 801b794:	40c2      	lsrs	r2, r0
 801b796:	6163      	str	r3, [r4, #20]
 801b798:	9201      	str	r2, [sp, #4]
 801b79a:	9b01      	ldr	r3, [sp, #4]
 801b79c:	61a3      	str	r3, [r4, #24]
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	bf14      	ite	ne
 801b7a2:	2202      	movne	r2, #2
 801b7a4:	2201      	moveq	r2, #1
 801b7a6:	6122      	str	r2, [r4, #16]
 801b7a8:	b1d5      	cbz	r5, 801b7e0 <__d2b+0x98>
 801b7aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b7ae:	4405      	add	r5, r0
 801b7b0:	f8c9 5000 	str.w	r5, [r9]
 801b7b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b7b8:	f8c8 0000 	str.w	r0, [r8]
 801b7bc:	4620      	mov	r0, r4
 801b7be:	b003      	add	sp, #12
 801b7c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b7c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b7c8:	e7d5      	b.n	801b776 <__d2b+0x2e>
 801b7ca:	6161      	str	r1, [r4, #20]
 801b7cc:	e7e5      	b.n	801b79a <__d2b+0x52>
 801b7ce:	a801      	add	r0, sp, #4
 801b7d0:	f7ff fcde 	bl	801b190 <__lo0bits>
 801b7d4:	9b01      	ldr	r3, [sp, #4]
 801b7d6:	6163      	str	r3, [r4, #20]
 801b7d8:	2201      	movs	r2, #1
 801b7da:	6122      	str	r2, [r4, #16]
 801b7dc:	3020      	adds	r0, #32
 801b7de:	e7e3      	b.n	801b7a8 <__d2b+0x60>
 801b7e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b7e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b7e8:	f8c9 0000 	str.w	r0, [r9]
 801b7ec:	6918      	ldr	r0, [r3, #16]
 801b7ee:	f7ff fcaf 	bl	801b150 <__hi0bits>
 801b7f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b7f6:	e7df      	b.n	801b7b8 <__d2b+0x70>
 801b7f8:	0801d048 	.word	0x0801d048
 801b7fc:	0801d0d4 	.word	0x0801d0d4

0801b800 <__ratio>:
 801b800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b804:	4688      	mov	r8, r1
 801b806:	4669      	mov	r1, sp
 801b808:	4681      	mov	r9, r0
 801b80a:	f7ff ff4d 	bl	801b6a8 <__b2d>
 801b80e:	a901      	add	r1, sp, #4
 801b810:	4640      	mov	r0, r8
 801b812:	ec55 4b10 	vmov	r4, r5, d0
 801b816:	ee10 aa10 	vmov	sl, s0
 801b81a:	f7ff ff45 	bl	801b6a8 <__b2d>
 801b81e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b822:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b826:	1a59      	subs	r1, r3, r1
 801b828:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b82c:	1ad3      	subs	r3, r2, r3
 801b82e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801b832:	ec57 6b10 	vmov	r6, r7, d0
 801b836:	2b00      	cmp	r3, #0
 801b838:	bfd6      	itet	le
 801b83a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b83e:	462a      	movgt	r2, r5
 801b840:	463a      	movle	r2, r7
 801b842:	46ab      	mov	fp, r5
 801b844:	bfd6      	itet	le
 801b846:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801b84a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801b84e:	ee00 3a90 	vmovle	s1, r3
 801b852:	ec4b ab17 	vmov	d7, sl, fp
 801b856:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801b85a:	b003      	add	sp, #12
 801b85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b860 <__copybits>:
 801b860:	3901      	subs	r1, #1
 801b862:	b570      	push	{r4, r5, r6, lr}
 801b864:	1149      	asrs	r1, r1, #5
 801b866:	6914      	ldr	r4, [r2, #16]
 801b868:	3101      	adds	r1, #1
 801b86a:	f102 0314 	add.w	r3, r2, #20
 801b86e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b872:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b876:	1f05      	subs	r5, r0, #4
 801b878:	42a3      	cmp	r3, r4
 801b87a:	d30c      	bcc.n	801b896 <__copybits+0x36>
 801b87c:	1aa3      	subs	r3, r4, r2
 801b87e:	3b11      	subs	r3, #17
 801b880:	f023 0303 	bic.w	r3, r3, #3
 801b884:	3211      	adds	r2, #17
 801b886:	42a2      	cmp	r2, r4
 801b888:	bf88      	it	hi
 801b88a:	2300      	movhi	r3, #0
 801b88c:	4418      	add	r0, r3
 801b88e:	2300      	movs	r3, #0
 801b890:	4288      	cmp	r0, r1
 801b892:	d305      	bcc.n	801b8a0 <__copybits+0x40>
 801b894:	bd70      	pop	{r4, r5, r6, pc}
 801b896:	f853 6b04 	ldr.w	r6, [r3], #4
 801b89a:	f845 6f04 	str.w	r6, [r5, #4]!
 801b89e:	e7eb      	b.n	801b878 <__copybits+0x18>
 801b8a0:	f840 3b04 	str.w	r3, [r0], #4
 801b8a4:	e7f4      	b.n	801b890 <__copybits+0x30>

0801b8a6 <__any_on>:
 801b8a6:	f100 0214 	add.w	r2, r0, #20
 801b8aa:	6900      	ldr	r0, [r0, #16]
 801b8ac:	114b      	asrs	r3, r1, #5
 801b8ae:	4298      	cmp	r0, r3
 801b8b0:	b510      	push	{r4, lr}
 801b8b2:	db11      	blt.n	801b8d8 <__any_on+0x32>
 801b8b4:	dd0a      	ble.n	801b8cc <__any_on+0x26>
 801b8b6:	f011 011f 	ands.w	r1, r1, #31
 801b8ba:	d007      	beq.n	801b8cc <__any_on+0x26>
 801b8bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801b8c0:	fa24 f001 	lsr.w	r0, r4, r1
 801b8c4:	fa00 f101 	lsl.w	r1, r0, r1
 801b8c8:	428c      	cmp	r4, r1
 801b8ca:	d10b      	bne.n	801b8e4 <__any_on+0x3e>
 801b8cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b8d0:	4293      	cmp	r3, r2
 801b8d2:	d803      	bhi.n	801b8dc <__any_on+0x36>
 801b8d4:	2000      	movs	r0, #0
 801b8d6:	bd10      	pop	{r4, pc}
 801b8d8:	4603      	mov	r3, r0
 801b8da:	e7f7      	b.n	801b8cc <__any_on+0x26>
 801b8dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b8e0:	2900      	cmp	r1, #0
 801b8e2:	d0f5      	beq.n	801b8d0 <__any_on+0x2a>
 801b8e4:	2001      	movs	r0, #1
 801b8e6:	e7f6      	b.n	801b8d6 <__any_on+0x30>

0801b8e8 <_calloc_r>:
 801b8e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b8ea:	fba1 2402 	umull	r2, r4, r1, r2
 801b8ee:	b94c      	cbnz	r4, 801b904 <_calloc_r+0x1c>
 801b8f0:	4611      	mov	r1, r2
 801b8f2:	9201      	str	r2, [sp, #4]
 801b8f4:	f000 f87a 	bl	801b9ec <_malloc_r>
 801b8f8:	9a01      	ldr	r2, [sp, #4]
 801b8fa:	4605      	mov	r5, r0
 801b8fc:	b930      	cbnz	r0, 801b90c <_calloc_r+0x24>
 801b8fe:	4628      	mov	r0, r5
 801b900:	b003      	add	sp, #12
 801b902:	bd30      	pop	{r4, r5, pc}
 801b904:	220c      	movs	r2, #12
 801b906:	6002      	str	r2, [r0, #0]
 801b908:	2500      	movs	r5, #0
 801b90a:	e7f8      	b.n	801b8fe <_calloc_r+0x16>
 801b90c:	4621      	mov	r1, r4
 801b90e:	f7fc fc5b 	bl	80181c8 <memset>
 801b912:	e7f4      	b.n	801b8fe <_calloc_r+0x16>

0801b914 <_free_r>:
 801b914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b916:	2900      	cmp	r1, #0
 801b918:	d044      	beq.n	801b9a4 <_free_r+0x90>
 801b91a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b91e:	9001      	str	r0, [sp, #4]
 801b920:	2b00      	cmp	r3, #0
 801b922:	f1a1 0404 	sub.w	r4, r1, #4
 801b926:	bfb8      	it	lt
 801b928:	18e4      	addlt	r4, r4, r3
 801b92a:	f000 fc7f 	bl	801c22c <__malloc_lock>
 801b92e:	4a1e      	ldr	r2, [pc, #120]	; (801b9a8 <_free_r+0x94>)
 801b930:	9801      	ldr	r0, [sp, #4]
 801b932:	6813      	ldr	r3, [r2, #0]
 801b934:	b933      	cbnz	r3, 801b944 <_free_r+0x30>
 801b936:	6063      	str	r3, [r4, #4]
 801b938:	6014      	str	r4, [r2, #0]
 801b93a:	b003      	add	sp, #12
 801b93c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b940:	f000 bc7a 	b.w	801c238 <__malloc_unlock>
 801b944:	42a3      	cmp	r3, r4
 801b946:	d908      	bls.n	801b95a <_free_r+0x46>
 801b948:	6825      	ldr	r5, [r4, #0]
 801b94a:	1961      	adds	r1, r4, r5
 801b94c:	428b      	cmp	r3, r1
 801b94e:	bf01      	itttt	eq
 801b950:	6819      	ldreq	r1, [r3, #0]
 801b952:	685b      	ldreq	r3, [r3, #4]
 801b954:	1949      	addeq	r1, r1, r5
 801b956:	6021      	streq	r1, [r4, #0]
 801b958:	e7ed      	b.n	801b936 <_free_r+0x22>
 801b95a:	461a      	mov	r2, r3
 801b95c:	685b      	ldr	r3, [r3, #4]
 801b95e:	b10b      	cbz	r3, 801b964 <_free_r+0x50>
 801b960:	42a3      	cmp	r3, r4
 801b962:	d9fa      	bls.n	801b95a <_free_r+0x46>
 801b964:	6811      	ldr	r1, [r2, #0]
 801b966:	1855      	adds	r5, r2, r1
 801b968:	42a5      	cmp	r5, r4
 801b96a:	d10b      	bne.n	801b984 <_free_r+0x70>
 801b96c:	6824      	ldr	r4, [r4, #0]
 801b96e:	4421      	add	r1, r4
 801b970:	1854      	adds	r4, r2, r1
 801b972:	42a3      	cmp	r3, r4
 801b974:	6011      	str	r1, [r2, #0]
 801b976:	d1e0      	bne.n	801b93a <_free_r+0x26>
 801b978:	681c      	ldr	r4, [r3, #0]
 801b97a:	685b      	ldr	r3, [r3, #4]
 801b97c:	6053      	str	r3, [r2, #4]
 801b97e:	4421      	add	r1, r4
 801b980:	6011      	str	r1, [r2, #0]
 801b982:	e7da      	b.n	801b93a <_free_r+0x26>
 801b984:	d902      	bls.n	801b98c <_free_r+0x78>
 801b986:	230c      	movs	r3, #12
 801b988:	6003      	str	r3, [r0, #0]
 801b98a:	e7d6      	b.n	801b93a <_free_r+0x26>
 801b98c:	6825      	ldr	r5, [r4, #0]
 801b98e:	1961      	adds	r1, r4, r5
 801b990:	428b      	cmp	r3, r1
 801b992:	bf04      	itt	eq
 801b994:	6819      	ldreq	r1, [r3, #0]
 801b996:	685b      	ldreq	r3, [r3, #4]
 801b998:	6063      	str	r3, [r4, #4]
 801b99a:	bf04      	itt	eq
 801b99c:	1949      	addeq	r1, r1, r5
 801b99e:	6021      	streq	r1, [r4, #0]
 801b9a0:	6054      	str	r4, [r2, #4]
 801b9a2:	e7ca      	b.n	801b93a <_free_r+0x26>
 801b9a4:	b003      	add	sp, #12
 801b9a6:	bd30      	pop	{r4, r5, pc}
 801b9a8:	24002b68 	.word	0x24002b68

0801b9ac <sbrk_aligned>:
 801b9ac:	b570      	push	{r4, r5, r6, lr}
 801b9ae:	4e0e      	ldr	r6, [pc, #56]	; (801b9e8 <sbrk_aligned+0x3c>)
 801b9b0:	460c      	mov	r4, r1
 801b9b2:	6831      	ldr	r1, [r6, #0]
 801b9b4:	4605      	mov	r5, r0
 801b9b6:	b911      	cbnz	r1, 801b9be <sbrk_aligned+0x12>
 801b9b8:	f000 fa02 	bl	801bdc0 <_sbrk_r>
 801b9bc:	6030      	str	r0, [r6, #0]
 801b9be:	4621      	mov	r1, r4
 801b9c0:	4628      	mov	r0, r5
 801b9c2:	f000 f9fd 	bl	801bdc0 <_sbrk_r>
 801b9c6:	1c43      	adds	r3, r0, #1
 801b9c8:	d00a      	beq.n	801b9e0 <sbrk_aligned+0x34>
 801b9ca:	1cc4      	adds	r4, r0, #3
 801b9cc:	f024 0403 	bic.w	r4, r4, #3
 801b9d0:	42a0      	cmp	r0, r4
 801b9d2:	d007      	beq.n	801b9e4 <sbrk_aligned+0x38>
 801b9d4:	1a21      	subs	r1, r4, r0
 801b9d6:	4628      	mov	r0, r5
 801b9d8:	f000 f9f2 	bl	801bdc0 <_sbrk_r>
 801b9dc:	3001      	adds	r0, #1
 801b9de:	d101      	bne.n	801b9e4 <sbrk_aligned+0x38>
 801b9e0:	f04f 34ff 	mov.w	r4, #4294967295
 801b9e4:	4620      	mov	r0, r4
 801b9e6:	bd70      	pop	{r4, r5, r6, pc}
 801b9e8:	24002b6c 	.word	0x24002b6c

0801b9ec <_malloc_r>:
 801b9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9f0:	1ccd      	adds	r5, r1, #3
 801b9f2:	f025 0503 	bic.w	r5, r5, #3
 801b9f6:	3508      	adds	r5, #8
 801b9f8:	2d0c      	cmp	r5, #12
 801b9fa:	bf38      	it	cc
 801b9fc:	250c      	movcc	r5, #12
 801b9fe:	2d00      	cmp	r5, #0
 801ba00:	4607      	mov	r7, r0
 801ba02:	db01      	blt.n	801ba08 <_malloc_r+0x1c>
 801ba04:	42a9      	cmp	r1, r5
 801ba06:	d905      	bls.n	801ba14 <_malloc_r+0x28>
 801ba08:	230c      	movs	r3, #12
 801ba0a:	603b      	str	r3, [r7, #0]
 801ba0c:	2600      	movs	r6, #0
 801ba0e:	4630      	mov	r0, r6
 801ba10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba14:	4e2e      	ldr	r6, [pc, #184]	; (801bad0 <_malloc_r+0xe4>)
 801ba16:	f000 fc09 	bl	801c22c <__malloc_lock>
 801ba1a:	6833      	ldr	r3, [r6, #0]
 801ba1c:	461c      	mov	r4, r3
 801ba1e:	bb34      	cbnz	r4, 801ba6e <_malloc_r+0x82>
 801ba20:	4629      	mov	r1, r5
 801ba22:	4638      	mov	r0, r7
 801ba24:	f7ff ffc2 	bl	801b9ac <sbrk_aligned>
 801ba28:	1c43      	adds	r3, r0, #1
 801ba2a:	4604      	mov	r4, r0
 801ba2c:	d14d      	bne.n	801baca <_malloc_r+0xde>
 801ba2e:	6834      	ldr	r4, [r6, #0]
 801ba30:	4626      	mov	r6, r4
 801ba32:	2e00      	cmp	r6, #0
 801ba34:	d140      	bne.n	801bab8 <_malloc_r+0xcc>
 801ba36:	6823      	ldr	r3, [r4, #0]
 801ba38:	4631      	mov	r1, r6
 801ba3a:	4638      	mov	r0, r7
 801ba3c:	eb04 0803 	add.w	r8, r4, r3
 801ba40:	f000 f9be 	bl	801bdc0 <_sbrk_r>
 801ba44:	4580      	cmp	r8, r0
 801ba46:	d13a      	bne.n	801babe <_malloc_r+0xd2>
 801ba48:	6821      	ldr	r1, [r4, #0]
 801ba4a:	3503      	adds	r5, #3
 801ba4c:	1a6d      	subs	r5, r5, r1
 801ba4e:	f025 0503 	bic.w	r5, r5, #3
 801ba52:	3508      	adds	r5, #8
 801ba54:	2d0c      	cmp	r5, #12
 801ba56:	bf38      	it	cc
 801ba58:	250c      	movcc	r5, #12
 801ba5a:	4629      	mov	r1, r5
 801ba5c:	4638      	mov	r0, r7
 801ba5e:	f7ff ffa5 	bl	801b9ac <sbrk_aligned>
 801ba62:	3001      	adds	r0, #1
 801ba64:	d02b      	beq.n	801babe <_malloc_r+0xd2>
 801ba66:	6823      	ldr	r3, [r4, #0]
 801ba68:	442b      	add	r3, r5
 801ba6a:	6023      	str	r3, [r4, #0]
 801ba6c:	e00e      	b.n	801ba8c <_malloc_r+0xa0>
 801ba6e:	6822      	ldr	r2, [r4, #0]
 801ba70:	1b52      	subs	r2, r2, r5
 801ba72:	d41e      	bmi.n	801bab2 <_malloc_r+0xc6>
 801ba74:	2a0b      	cmp	r2, #11
 801ba76:	d916      	bls.n	801baa6 <_malloc_r+0xba>
 801ba78:	1961      	adds	r1, r4, r5
 801ba7a:	42a3      	cmp	r3, r4
 801ba7c:	6025      	str	r5, [r4, #0]
 801ba7e:	bf18      	it	ne
 801ba80:	6059      	strne	r1, [r3, #4]
 801ba82:	6863      	ldr	r3, [r4, #4]
 801ba84:	bf08      	it	eq
 801ba86:	6031      	streq	r1, [r6, #0]
 801ba88:	5162      	str	r2, [r4, r5]
 801ba8a:	604b      	str	r3, [r1, #4]
 801ba8c:	4638      	mov	r0, r7
 801ba8e:	f104 060b 	add.w	r6, r4, #11
 801ba92:	f000 fbd1 	bl	801c238 <__malloc_unlock>
 801ba96:	f026 0607 	bic.w	r6, r6, #7
 801ba9a:	1d23      	adds	r3, r4, #4
 801ba9c:	1af2      	subs	r2, r6, r3
 801ba9e:	d0b6      	beq.n	801ba0e <_malloc_r+0x22>
 801baa0:	1b9b      	subs	r3, r3, r6
 801baa2:	50a3      	str	r3, [r4, r2]
 801baa4:	e7b3      	b.n	801ba0e <_malloc_r+0x22>
 801baa6:	6862      	ldr	r2, [r4, #4]
 801baa8:	42a3      	cmp	r3, r4
 801baaa:	bf0c      	ite	eq
 801baac:	6032      	streq	r2, [r6, #0]
 801baae:	605a      	strne	r2, [r3, #4]
 801bab0:	e7ec      	b.n	801ba8c <_malloc_r+0xa0>
 801bab2:	4623      	mov	r3, r4
 801bab4:	6864      	ldr	r4, [r4, #4]
 801bab6:	e7b2      	b.n	801ba1e <_malloc_r+0x32>
 801bab8:	4634      	mov	r4, r6
 801baba:	6876      	ldr	r6, [r6, #4]
 801babc:	e7b9      	b.n	801ba32 <_malloc_r+0x46>
 801babe:	230c      	movs	r3, #12
 801bac0:	603b      	str	r3, [r7, #0]
 801bac2:	4638      	mov	r0, r7
 801bac4:	f000 fbb8 	bl	801c238 <__malloc_unlock>
 801bac8:	e7a1      	b.n	801ba0e <_malloc_r+0x22>
 801baca:	6025      	str	r5, [r4, #0]
 801bacc:	e7de      	b.n	801ba8c <_malloc_r+0xa0>
 801bace:	bf00      	nop
 801bad0:	24002b68 	.word	0x24002b68

0801bad4 <__ssputs_r>:
 801bad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bad8:	688e      	ldr	r6, [r1, #8]
 801bada:	429e      	cmp	r6, r3
 801badc:	4682      	mov	sl, r0
 801bade:	460c      	mov	r4, r1
 801bae0:	4690      	mov	r8, r2
 801bae2:	461f      	mov	r7, r3
 801bae4:	d838      	bhi.n	801bb58 <__ssputs_r+0x84>
 801bae6:	898a      	ldrh	r2, [r1, #12]
 801bae8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801baec:	d032      	beq.n	801bb54 <__ssputs_r+0x80>
 801baee:	6825      	ldr	r5, [r4, #0]
 801baf0:	6909      	ldr	r1, [r1, #16]
 801baf2:	eba5 0901 	sub.w	r9, r5, r1
 801baf6:	6965      	ldr	r5, [r4, #20]
 801baf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bafc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bb00:	3301      	adds	r3, #1
 801bb02:	444b      	add	r3, r9
 801bb04:	106d      	asrs	r5, r5, #1
 801bb06:	429d      	cmp	r5, r3
 801bb08:	bf38      	it	cc
 801bb0a:	461d      	movcc	r5, r3
 801bb0c:	0553      	lsls	r3, r2, #21
 801bb0e:	d531      	bpl.n	801bb74 <__ssputs_r+0xa0>
 801bb10:	4629      	mov	r1, r5
 801bb12:	f7ff ff6b 	bl	801b9ec <_malloc_r>
 801bb16:	4606      	mov	r6, r0
 801bb18:	b950      	cbnz	r0, 801bb30 <__ssputs_r+0x5c>
 801bb1a:	230c      	movs	r3, #12
 801bb1c:	f8ca 3000 	str.w	r3, [sl]
 801bb20:	89a3      	ldrh	r3, [r4, #12]
 801bb22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb26:	81a3      	strh	r3, [r4, #12]
 801bb28:	f04f 30ff 	mov.w	r0, #4294967295
 801bb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb30:	6921      	ldr	r1, [r4, #16]
 801bb32:	464a      	mov	r2, r9
 801bb34:	f7fc fb3a 	bl	80181ac <memcpy>
 801bb38:	89a3      	ldrh	r3, [r4, #12]
 801bb3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bb3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bb42:	81a3      	strh	r3, [r4, #12]
 801bb44:	6126      	str	r6, [r4, #16]
 801bb46:	6165      	str	r5, [r4, #20]
 801bb48:	444e      	add	r6, r9
 801bb4a:	eba5 0509 	sub.w	r5, r5, r9
 801bb4e:	6026      	str	r6, [r4, #0]
 801bb50:	60a5      	str	r5, [r4, #8]
 801bb52:	463e      	mov	r6, r7
 801bb54:	42be      	cmp	r6, r7
 801bb56:	d900      	bls.n	801bb5a <__ssputs_r+0x86>
 801bb58:	463e      	mov	r6, r7
 801bb5a:	6820      	ldr	r0, [r4, #0]
 801bb5c:	4632      	mov	r2, r6
 801bb5e:	4641      	mov	r1, r8
 801bb60:	f000 fb4a 	bl	801c1f8 <memmove>
 801bb64:	68a3      	ldr	r3, [r4, #8]
 801bb66:	1b9b      	subs	r3, r3, r6
 801bb68:	60a3      	str	r3, [r4, #8]
 801bb6a:	6823      	ldr	r3, [r4, #0]
 801bb6c:	4433      	add	r3, r6
 801bb6e:	6023      	str	r3, [r4, #0]
 801bb70:	2000      	movs	r0, #0
 801bb72:	e7db      	b.n	801bb2c <__ssputs_r+0x58>
 801bb74:	462a      	mov	r2, r5
 801bb76:	f000 fb65 	bl	801c244 <_realloc_r>
 801bb7a:	4606      	mov	r6, r0
 801bb7c:	2800      	cmp	r0, #0
 801bb7e:	d1e1      	bne.n	801bb44 <__ssputs_r+0x70>
 801bb80:	6921      	ldr	r1, [r4, #16]
 801bb82:	4650      	mov	r0, sl
 801bb84:	f7ff fec6 	bl	801b914 <_free_r>
 801bb88:	e7c7      	b.n	801bb1a <__ssputs_r+0x46>
	...

0801bb8c <_svfiprintf_r>:
 801bb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb90:	4698      	mov	r8, r3
 801bb92:	898b      	ldrh	r3, [r1, #12]
 801bb94:	061b      	lsls	r3, r3, #24
 801bb96:	b09d      	sub	sp, #116	; 0x74
 801bb98:	4607      	mov	r7, r0
 801bb9a:	460d      	mov	r5, r1
 801bb9c:	4614      	mov	r4, r2
 801bb9e:	d50e      	bpl.n	801bbbe <_svfiprintf_r+0x32>
 801bba0:	690b      	ldr	r3, [r1, #16]
 801bba2:	b963      	cbnz	r3, 801bbbe <_svfiprintf_r+0x32>
 801bba4:	2140      	movs	r1, #64	; 0x40
 801bba6:	f7ff ff21 	bl	801b9ec <_malloc_r>
 801bbaa:	6028      	str	r0, [r5, #0]
 801bbac:	6128      	str	r0, [r5, #16]
 801bbae:	b920      	cbnz	r0, 801bbba <_svfiprintf_r+0x2e>
 801bbb0:	230c      	movs	r3, #12
 801bbb2:	603b      	str	r3, [r7, #0]
 801bbb4:	f04f 30ff 	mov.w	r0, #4294967295
 801bbb8:	e0d1      	b.n	801bd5e <_svfiprintf_r+0x1d2>
 801bbba:	2340      	movs	r3, #64	; 0x40
 801bbbc:	616b      	str	r3, [r5, #20]
 801bbbe:	2300      	movs	r3, #0
 801bbc0:	9309      	str	r3, [sp, #36]	; 0x24
 801bbc2:	2320      	movs	r3, #32
 801bbc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bbc8:	f8cd 800c 	str.w	r8, [sp, #12]
 801bbcc:	2330      	movs	r3, #48	; 0x30
 801bbce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801bd78 <_svfiprintf_r+0x1ec>
 801bbd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bbd6:	f04f 0901 	mov.w	r9, #1
 801bbda:	4623      	mov	r3, r4
 801bbdc:	469a      	mov	sl, r3
 801bbde:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bbe2:	b10a      	cbz	r2, 801bbe8 <_svfiprintf_r+0x5c>
 801bbe4:	2a25      	cmp	r2, #37	; 0x25
 801bbe6:	d1f9      	bne.n	801bbdc <_svfiprintf_r+0x50>
 801bbe8:	ebba 0b04 	subs.w	fp, sl, r4
 801bbec:	d00b      	beq.n	801bc06 <_svfiprintf_r+0x7a>
 801bbee:	465b      	mov	r3, fp
 801bbf0:	4622      	mov	r2, r4
 801bbf2:	4629      	mov	r1, r5
 801bbf4:	4638      	mov	r0, r7
 801bbf6:	f7ff ff6d 	bl	801bad4 <__ssputs_r>
 801bbfa:	3001      	adds	r0, #1
 801bbfc:	f000 80aa 	beq.w	801bd54 <_svfiprintf_r+0x1c8>
 801bc00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bc02:	445a      	add	r2, fp
 801bc04:	9209      	str	r2, [sp, #36]	; 0x24
 801bc06:	f89a 3000 	ldrb.w	r3, [sl]
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	f000 80a2 	beq.w	801bd54 <_svfiprintf_r+0x1c8>
 801bc10:	2300      	movs	r3, #0
 801bc12:	f04f 32ff 	mov.w	r2, #4294967295
 801bc16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bc1a:	f10a 0a01 	add.w	sl, sl, #1
 801bc1e:	9304      	str	r3, [sp, #16]
 801bc20:	9307      	str	r3, [sp, #28]
 801bc22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bc26:	931a      	str	r3, [sp, #104]	; 0x68
 801bc28:	4654      	mov	r4, sl
 801bc2a:	2205      	movs	r2, #5
 801bc2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc30:	4851      	ldr	r0, [pc, #324]	; (801bd78 <_svfiprintf_r+0x1ec>)
 801bc32:	f7e4 fb75 	bl	8000320 <memchr>
 801bc36:	9a04      	ldr	r2, [sp, #16]
 801bc38:	b9d8      	cbnz	r0, 801bc72 <_svfiprintf_r+0xe6>
 801bc3a:	06d0      	lsls	r0, r2, #27
 801bc3c:	bf44      	itt	mi
 801bc3e:	2320      	movmi	r3, #32
 801bc40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bc44:	0711      	lsls	r1, r2, #28
 801bc46:	bf44      	itt	mi
 801bc48:	232b      	movmi	r3, #43	; 0x2b
 801bc4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bc4e:	f89a 3000 	ldrb.w	r3, [sl]
 801bc52:	2b2a      	cmp	r3, #42	; 0x2a
 801bc54:	d015      	beq.n	801bc82 <_svfiprintf_r+0xf6>
 801bc56:	9a07      	ldr	r2, [sp, #28]
 801bc58:	4654      	mov	r4, sl
 801bc5a:	2000      	movs	r0, #0
 801bc5c:	f04f 0c0a 	mov.w	ip, #10
 801bc60:	4621      	mov	r1, r4
 801bc62:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bc66:	3b30      	subs	r3, #48	; 0x30
 801bc68:	2b09      	cmp	r3, #9
 801bc6a:	d94e      	bls.n	801bd0a <_svfiprintf_r+0x17e>
 801bc6c:	b1b0      	cbz	r0, 801bc9c <_svfiprintf_r+0x110>
 801bc6e:	9207      	str	r2, [sp, #28]
 801bc70:	e014      	b.n	801bc9c <_svfiprintf_r+0x110>
 801bc72:	eba0 0308 	sub.w	r3, r0, r8
 801bc76:	fa09 f303 	lsl.w	r3, r9, r3
 801bc7a:	4313      	orrs	r3, r2
 801bc7c:	9304      	str	r3, [sp, #16]
 801bc7e:	46a2      	mov	sl, r4
 801bc80:	e7d2      	b.n	801bc28 <_svfiprintf_r+0x9c>
 801bc82:	9b03      	ldr	r3, [sp, #12]
 801bc84:	1d19      	adds	r1, r3, #4
 801bc86:	681b      	ldr	r3, [r3, #0]
 801bc88:	9103      	str	r1, [sp, #12]
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	bfbb      	ittet	lt
 801bc8e:	425b      	neglt	r3, r3
 801bc90:	f042 0202 	orrlt.w	r2, r2, #2
 801bc94:	9307      	strge	r3, [sp, #28]
 801bc96:	9307      	strlt	r3, [sp, #28]
 801bc98:	bfb8      	it	lt
 801bc9a:	9204      	strlt	r2, [sp, #16]
 801bc9c:	7823      	ldrb	r3, [r4, #0]
 801bc9e:	2b2e      	cmp	r3, #46	; 0x2e
 801bca0:	d10c      	bne.n	801bcbc <_svfiprintf_r+0x130>
 801bca2:	7863      	ldrb	r3, [r4, #1]
 801bca4:	2b2a      	cmp	r3, #42	; 0x2a
 801bca6:	d135      	bne.n	801bd14 <_svfiprintf_r+0x188>
 801bca8:	9b03      	ldr	r3, [sp, #12]
 801bcaa:	1d1a      	adds	r2, r3, #4
 801bcac:	681b      	ldr	r3, [r3, #0]
 801bcae:	9203      	str	r2, [sp, #12]
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	bfb8      	it	lt
 801bcb4:	f04f 33ff 	movlt.w	r3, #4294967295
 801bcb8:	3402      	adds	r4, #2
 801bcba:	9305      	str	r3, [sp, #20]
 801bcbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801bd88 <_svfiprintf_r+0x1fc>
 801bcc0:	7821      	ldrb	r1, [r4, #0]
 801bcc2:	2203      	movs	r2, #3
 801bcc4:	4650      	mov	r0, sl
 801bcc6:	f7e4 fb2b 	bl	8000320 <memchr>
 801bcca:	b140      	cbz	r0, 801bcde <_svfiprintf_r+0x152>
 801bccc:	2340      	movs	r3, #64	; 0x40
 801bcce:	eba0 000a 	sub.w	r0, r0, sl
 801bcd2:	fa03 f000 	lsl.w	r0, r3, r0
 801bcd6:	9b04      	ldr	r3, [sp, #16]
 801bcd8:	4303      	orrs	r3, r0
 801bcda:	3401      	adds	r4, #1
 801bcdc:	9304      	str	r3, [sp, #16]
 801bcde:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bce2:	4826      	ldr	r0, [pc, #152]	; (801bd7c <_svfiprintf_r+0x1f0>)
 801bce4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bce8:	2206      	movs	r2, #6
 801bcea:	f7e4 fb19 	bl	8000320 <memchr>
 801bcee:	2800      	cmp	r0, #0
 801bcf0:	d038      	beq.n	801bd64 <_svfiprintf_r+0x1d8>
 801bcf2:	4b23      	ldr	r3, [pc, #140]	; (801bd80 <_svfiprintf_r+0x1f4>)
 801bcf4:	bb1b      	cbnz	r3, 801bd3e <_svfiprintf_r+0x1b2>
 801bcf6:	9b03      	ldr	r3, [sp, #12]
 801bcf8:	3307      	adds	r3, #7
 801bcfa:	f023 0307 	bic.w	r3, r3, #7
 801bcfe:	3308      	adds	r3, #8
 801bd00:	9303      	str	r3, [sp, #12]
 801bd02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd04:	4433      	add	r3, r6
 801bd06:	9309      	str	r3, [sp, #36]	; 0x24
 801bd08:	e767      	b.n	801bbda <_svfiprintf_r+0x4e>
 801bd0a:	fb0c 3202 	mla	r2, ip, r2, r3
 801bd0e:	460c      	mov	r4, r1
 801bd10:	2001      	movs	r0, #1
 801bd12:	e7a5      	b.n	801bc60 <_svfiprintf_r+0xd4>
 801bd14:	2300      	movs	r3, #0
 801bd16:	3401      	adds	r4, #1
 801bd18:	9305      	str	r3, [sp, #20]
 801bd1a:	4619      	mov	r1, r3
 801bd1c:	f04f 0c0a 	mov.w	ip, #10
 801bd20:	4620      	mov	r0, r4
 801bd22:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bd26:	3a30      	subs	r2, #48	; 0x30
 801bd28:	2a09      	cmp	r2, #9
 801bd2a:	d903      	bls.n	801bd34 <_svfiprintf_r+0x1a8>
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	d0c5      	beq.n	801bcbc <_svfiprintf_r+0x130>
 801bd30:	9105      	str	r1, [sp, #20]
 801bd32:	e7c3      	b.n	801bcbc <_svfiprintf_r+0x130>
 801bd34:	fb0c 2101 	mla	r1, ip, r1, r2
 801bd38:	4604      	mov	r4, r0
 801bd3a:	2301      	movs	r3, #1
 801bd3c:	e7f0      	b.n	801bd20 <_svfiprintf_r+0x194>
 801bd3e:	ab03      	add	r3, sp, #12
 801bd40:	9300      	str	r3, [sp, #0]
 801bd42:	462a      	mov	r2, r5
 801bd44:	4b0f      	ldr	r3, [pc, #60]	; (801bd84 <_svfiprintf_r+0x1f8>)
 801bd46:	a904      	add	r1, sp, #16
 801bd48:	4638      	mov	r0, r7
 801bd4a:	f7fc fad5 	bl	80182f8 <_printf_float>
 801bd4e:	1c42      	adds	r2, r0, #1
 801bd50:	4606      	mov	r6, r0
 801bd52:	d1d6      	bne.n	801bd02 <_svfiprintf_r+0x176>
 801bd54:	89ab      	ldrh	r3, [r5, #12]
 801bd56:	065b      	lsls	r3, r3, #25
 801bd58:	f53f af2c 	bmi.w	801bbb4 <_svfiprintf_r+0x28>
 801bd5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd5e:	b01d      	add	sp, #116	; 0x74
 801bd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd64:	ab03      	add	r3, sp, #12
 801bd66:	9300      	str	r3, [sp, #0]
 801bd68:	462a      	mov	r2, r5
 801bd6a:	4b06      	ldr	r3, [pc, #24]	; (801bd84 <_svfiprintf_r+0x1f8>)
 801bd6c:	a904      	add	r1, sp, #16
 801bd6e:	4638      	mov	r0, r7
 801bd70:	f7fc fd4e 	bl	8018810 <_printf_i>
 801bd74:	e7eb      	b.n	801bd4e <_svfiprintf_r+0x1c2>
 801bd76:	bf00      	nop
 801bd78:	0801d22c 	.word	0x0801d22c
 801bd7c:	0801d236 	.word	0x0801d236
 801bd80:	080182f9 	.word	0x080182f9
 801bd84:	0801bad5 	.word	0x0801bad5
 801bd88:	0801d232 	.word	0x0801d232

0801bd8c <_read_r>:
 801bd8c:	b538      	push	{r3, r4, r5, lr}
 801bd8e:	4d07      	ldr	r5, [pc, #28]	; (801bdac <_read_r+0x20>)
 801bd90:	4604      	mov	r4, r0
 801bd92:	4608      	mov	r0, r1
 801bd94:	4611      	mov	r1, r2
 801bd96:	2200      	movs	r2, #0
 801bd98:	602a      	str	r2, [r5, #0]
 801bd9a:	461a      	mov	r2, r3
 801bd9c:	f7e6 fe42 	bl	8002a24 <_read>
 801bda0:	1c43      	adds	r3, r0, #1
 801bda2:	d102      	bne.n	801bdaa <_read_r+0x1e>
 801bda4:	682b      	ldr	r3, [r5, #0]
 801bda6:	b103      	cbz	r3, 801bdaa <_read_r+0x1e>
 801bda8:	6023      	str	r3, [r4, #0]
 801bdaa:	bd38      	pop	{r3, r4, r5, pc}
 801bdac:	24002b70 	.word	0x24002b70

0801bdb0 <nan>:
 801bdb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801bdb8 <nan+0x8>
 801bdb4:	4770      	bx	lr
 801bdb6:	bf00      	nop
 801bdb8:	00000000 	.word	0x00000000
 801bdbc:	7ff80000 	.word	0x7ff80000

0801bdc0 <_sbrk_r>:
 801bdc0:	b538      	push	{r3, r4, r5, lr}
 801bdc2:	4d06      	ldr	r5, [pc, #24]	; (801bddc <_sbrk_r+0x1c>)
 801bdc4:	2300      	movs	r3, #0
 801bdc6:	4604      	mov	r4, r0
 801bdc8:	4608      	mov	r0, r1
 801bdca:	602b      	str	r3, [r5, #0]
 801bdcc:	f7e6 fe98 	bl	8002b00 <_sbrk>
 801bdd0:	1c43      	adds	r3, r0, #1
 801bdd2:	d102      	bne.n	801bdda <_sbrk_r+0x1a>
 801bdd4:	682b      	ldr	r3, [r5, #0]
 801bdd6:	b103      	cbz	r3, 801bdda <_sbrk_r+0x1a>
 801bdd8:	6023      	str	r3, [r4, #0]
 801bdda:	bd38      	pop	{r3, r4, r5, pc}
 801bddc:	24002b70 	.word	0x24002b70

0801bde0 <strncmp>:
 801bde0:	b510      	push	{r4, lr}
 801bde2:	b17a      	cbz	r2, 801be04 <strncmp+0x24>
 801bde4:	4603      	mov	r3, r0
 801bde6:	3901      	subs	r1, #1
 801bde8:	1884      	adds	r4, r0, r2
 801bdea:	f813 0b01 	ldrb.w	r0, [r3], #1
 801bdee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801bdf2:	4290      	cmp	r0, r2
 801bdf4:	d101      	bne.n	801bdfa <strncmp+0x1a>
 801bdf6:	42a3      	cmp	r3, r4
 801bdf8:	d101      	bne.n	801bdfe <strncmp+0x1e>
 801bdfa:	1a80      	subs	r0, r0, r2
 801bdfc:	bd10      	pop	{r4, pc}
 801bdfe:	2800      	cmp	r0, #0
 801be00:	d1f3      	bne.n	801bdea <strncmp+0xa>
 801be02:	e7fa      	b.n	801bdfa <strncmp+0x1a>
 801be04:	4610      	mov	r0, r2
 801be06:	e7f9      	b.n	801bdfc <strncmp+0x1c>

0801be08 <__ascii_wctomb>:
 801be08:	b149      	cbz	r1, 801be1e <__ascii_wctomb+0x16>
 801be0a:	2aff      	cmp	r2, #255	; 0xff
 801be0c:	bf85      	ittet	hi
 801be0e:	238a      	movhi	r3, #138	; 0x8a
 801be10:	6003      	strhi	r3, [r0, #0]
 801be12:	700a      	strbls	r2, [r1, #0]
 801be14:	f04f 30ff 	movhi.w	r0, #4294967295
 801be18:	bf98      	it	ls
 801be1a:	2001      	movls	r0, #1
 801be1c:	4770      	bx	lr
 801be1e:	4608      	mov	r0, r1
 801be20:	4770      	bx	lr
	...

0801be24 <__assert_func>:
 801be24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801be26:	4614      	mov	r4, r2
 801be28:	461a      	mov	r2, r3
 801be2a:	4b09      	ldr	r3, [pc, #36]	; (801be50 <__assert_func+0x2c>)
 801be2c:	681b      	ldr	r3, [r3, #0]
 801be2e:	4605      	mov	r5, r0
 801be30:	68d8      	ldr	r0, [r3, #12]
 801be32:	b14c      	cbz	r4, 801be48 <__assert_func+0x24>
 801be34:	4b07      	ldr	r3, [pc, #28]	; (801be54 <__assert_func+0x30>)
 801be36:	9100      	str	r1, [sp, #0]
 801be38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801be3c:	4906      	ldr	r1, [pc, #24]	; (801be58 <__assert_func+0x34>)
 801be3e:	462b      	mov	r3, r5
 801be40:	f000 f9a6 	bl	801c190 <fiprintf>
 801be44:	f000 fc46 	bl	801c6d4 <abort>
 801be48:	4b04      	ldr	r3, [pc, #16]	; (801be5c <__assert_func+0x38>)
 801be4a:	461c      	mov	r4, r3
 801be4c:	e7f3      	b.n	801be36 <__assert_func+0x12>
 801be4e:	bf00      	nop
 801be50:	24000100 	.word	0x24000100
 801be54:	0801d23d 	.word	0x0801d23d
 801be58:	0801d24a 	.word	0x0801d24a
 801be5c:	0801d278 	.word	0x0801d278

0801be60 <__sflush_r>:
 801be60:	898a      	ldrh	r2, [r1, #12]
 801be62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be66:	4605      	mov	r5, r0
 801be68:	0710      	lsls	r0, r2, #28
 801be6a:	460c      	mov	r4, r1
 801be6c:	d458      	bmi.n	801bf20 <__sflush_r+0xc0>
 801be6e:	684b      	ldr	r3, [r1, #4]
 801be70:	2b00      	cmp	r3, #0
 801be72:	dc05      	bgt.n	801be80 <__sflush_r+0x20>
 801be74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801be76:	2b00      	cmp	r3, #0
 801be78:	dc02      	bgt.n	801be80 <__sflush_r+0x20>
 801be7a:	2000      	movs	r0, #0
 801be7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801be82:	2e00      	cmp	r6, #0
 801be84:	d0f9      	beq.n	801be7a <__sflush_r+0x1a>
 801be86:	2300      	movs	r3, #0
 801be88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801be8c:	682f      	ldr	r7, [r5, #0]
 801be8e:	602b      	str	r3, [r5, #0]
 801be90:	d032      	beq.n	801bef8 <__sflush_r+0x98>
 801be92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801be94:	89a3      	ldrh	r3, [r4, #12]
 801be96:	075a      	lsls	r2, r3, #29
 801be98:	d505      	bpl.n	801bea6 <__sflush_r+0x46>
 801be9a:	6863      	ldr	r3, [r4, #4]
 801be9c:	1ac0      	subs	r0, r0, r3
 801be9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bea0:	b10b      	cbz	r3, 801bea6 <__sflush_r+0x46>
 801bea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bea4:	1ac0      	subs	r0, r0, r3
 801bea6:	2300      	movs	r3, #0
 801bea8:	4602      	mov	r2, r0
 801beaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801beac:	6a21      	ldr	r1, [r4, #32]
 801beae:	4628      	mov	r0, r5
 801beb0:	47b0      	blx	r6
 801beb2:	1c43      	adds	r3, r0, #1
 801beb4:	89a3      	ldrh	r3, [r4, #12]
 801beb6:	d106      	bne.n	801bec6 <__sflush_r+0x66>
 801beb8:	6829      	ldr	r1, [r5, #0]
 801beba:	291d      	cmp	r1, #29
 801bebc:	d82c      	bhi.n	801bf18 <__sflush_r+0xb8>
 801bebe:	4a2a      	ldr	r2, [pc, #168]	; (801bf68 <__sflush_r+0x108>)
 801bec0:	40ca      	lsrs	r2, r1
 801bec2:	07d6      	lsls	r6, r2, #31
 801bec4:	d528      	bpl.n	801bf18 <__sflush_r+0xb8>
 801bec6:	2200      	movs	r2, #0
 801bec8:	6062      	str	r2, [r4, #4]
 801beca:	04d9      	lsls	r1, r3, #19
 801becc:	6922      	ldr	r2, [r4, #16]
 801bece:	6022      	str	r2, [r4, #0]
 801bed0:	d504      	bpl.n	801bedc <__sflush_r+0x7c>
 801bed2:	1c42      	adds	r2, r0, #1
 801bed4:	d101      	bne.n	801beda <__sflush_r+0x7a>
 801bed6:	682b      	ldr	r3, [r5, #0]
 801bed8:	b903      	cbnz	r3, 801bedc <__sflush_r+0x7c>
 801beda:	6560      	str	r0, [r4, #84]	; 0x54
 801bedc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bede:	602f      	str	r7, [r5, #0]
 801bee0:	2900      	cmp	r1, #0
 801bee2:	d0ca      	beq.n	801be7a <__sflush_r+0x1a>
 801bee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bee8:	4299      	cmp	r1, r3
 801beea:	d002      	beq.n	801bef2 <__sflush_r+0x92>
 801beec:	4628      	mov	r0, r5
 801beee:	f7ff fd11 	bl	801b914 <_free_r>
 801bef2:	2000      	movs	r0, #0
 801bef4:	6360      	str	r0, [r4, #52]	; 0x34
 801bef6:	e7c1      	b.n	801be7c <__sflush_r+0x1c>
 801bef8:	6a21      	ldr	r1, [r4, #32]
 801befa:	2301      	movs	r3, #1
 801befc:	4628      	mov	r0, r5
 801befe:	47b0      	blx	r6
 801bf00:	1c41      	adds	r1, r0, #1
 801bf02:	d1c7      	bne.n	801be94 <__sflush_r+0x34>
 801bf04:	682b      	ldr	r3, [r5, #0]
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d0c4      	beq.n	801be94 <__sflush_r+0x34>
 801bf0a:	2b1d      	cmp	r3, #29
 801bf0c:	d001      	beq.n	801bf12 <__sflush_r+0xb2>
 801bf0e:	2b16      	cmp	r3, #22
 801bf10:	d101      	bne.n	801bf16 <__sflush_r+0xb6>
 801bf12:	602f      	str	r7, [r5, #0]
 801bf14:	e7b1      	b.n	801be7a <__sflush_r+0x1a>
 801bf16:	89a3      	ldrh	r3, [r4, #12]
 801bf18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf1c:	81a3      	strh	r3, [r4, #12]
 801bf1e:	e7ad      	b.n	801be7c <__sflush_r+0x1c>
 801bf20:	690f      	ldr	r7, [r1, #16]
 801bf22:	2f00      	cmp	r7, #0
 801bf24:	d0a9      	beq.n	801be7a <__sflush_r+0x1a>
 801bf26:	0793      	lsls	r3, r2, #30
 801bf28:	680e      	ldr	r6, [r1, #0]
 801bf2a:	bf08      	it	eq
 801bf2c:	694b      	ldreq	r3, [r1, #20]
 801bf2e:	600f      	str	r7, [r1, #0]
 801bf30:	bf18      	it	ne
 801bf32:	2300      	movne	r3, #0
 801bf34:	eba6 0807 	sub.w	r8, r6, r7
 801bf38:	608b      	str	r3, [r1, #8]
 801bf3a:	f1b8 0f00 	cmp.w	r8, #0
 801bf3e:	dd9c      	ble.n	801be7a <__sflush_r+0x1a>
 801bf40:	6a21      	ldr	r1, [r4, #32]
 801bf42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bf44:	4643      	mov	r3, r8
 801bf46:	463a      	mov	r2, r7
 801bf48:	4628      	mov	r0, r5
 801bf4a:	47b0      	blx	r6
 801bf4c:	2800      	cmp	r0, #0
 801bf4e:	dc06      	bgt.n	801bf5e <__sflush_r+0xfe>
 801bf50:	89a3      	ldrh	r3, [r4, #12]
 801bf52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf56:	81a3      	strh	r3, [r4, #12]
 801bf58:	f04f 30ff 	mov.w	r0, #4294967295
 801bf5c:	e78e      	b.n	801be7c <__sflush_r+0x1c>
 801bf5e:	4407      	add	r7, r0
 801bf60:	eba8 0800 	sub.w	r8, r8, r0
 801bf64:	e7e9      	b.n	801bf3a <__sflush_r+0xda>
 801bf66:	bf00      	nop
 801bf68:	20400001 	.word	0x20400001

0801bf6c <_fflush_r>:
 801bf6c:	b538      	push	{r3, r4, r5, lr}
 801bf6e:	690b      	ldr	r3, [r1, #16]
 801bf70:	4605      	mov	r5, r0
 801bf72:	460c      	mov	r4, r1
 801bf74:	b913      	cbnz	r3, 801bf7c <_fflush_r+0x10>
 801bf76:	2500      	movs	r5, #0
 801bf78:	4628      	mov	r0, r5
 801bf7a:	bd38      	pop	{r3, r4, r5, pc}
 801bf7c:	b118      	cbz	r0, 801bf86 <_fflush_r+0x1a>
 801bf7e:	6983      	ldr	r3, [r0, #24]
 801bf80:	b90b      	cbnz	r3, 801bf86 <_fflush_r+0x1a>
 801bf82:	f000 f887 	bl	801c094 <__sinit>
 801bf86:	4b14      	ldr	r3, [pc, #80]	; (801bfd8 <_fflush_r+0x6c>)
 801bf88:	429c      	cmp	r4, r3
 801bf8a:	d11b      	bne.n	801bfc4 <_fflush_r+0x58>
 801bf8c:	686c      	ldr	r4, [r5, #4]
 801bf8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d0ef      	beq.n	801bf76 <_fflush_r+0xa>
 801bf96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bf98:	07d0      	lsls	r0, r2, #31
 801bf9a:	d404      	bmi.n	801bfa6 <_fflush_r+0x3a>
 801bf9c:	0599      	lsls	r1, r3, #22
 801bf9e:	d402      	bmi.n	801bfa6 <_fflush_r+0x3a>
 801bfa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bfa2:	f000 f927 	bl	801c1f4 <__retarget_lock_acquire_recursive>
 801bfa6:	4628      	mov	r0, r5
 801bfa8:	4621      	mov	r1, r4
 801bfaa:	f7ff ff59 	bl	801be60 <__sflush_r>
 801bfae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bfb0:	07da      	lsls	r2, r3, #31
 801bfb2:	4605      	mov	r5, r0
 801bfb4:	d4e0      	bmi.n	801bf78 <_fflush_r+0xc>
 801bfb6:	89a3      	ldrh	r3, [r4, #12]
 801bfb8:	059b      	lsls	r3, r3, #22
 801bfba:	d4dd      	bmi.n	801bf78 <_fflush_r+0xc>
 801bfbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bfbe:	f000 f91a 	bl	801c1f6 <__retarget_lock_release_recursive>
 801bfc2:	e7d9      	b.n	801bf78 <_fflush_r+0xc>
 801bfc4:	4b05      	ldr	r3, [pc, #20]	; (801bfdc <_fflush_r+0x70>)
 801bfc6:	429c      	cmp	r4, r3
 801bfc8:	d101      	bne.n	801bfce <_fflush_r+0x62>
 801bfca:	68ac      	ldr	r4, [r5, #8]
 801bfcc:	e7df      	b.n	801bf8e <_fflush_r+0x22>
 801bfce:	4b04      	ldr	r3, [pc, #16]	; (801bfe0 <_fflush_r+0x74>)
 801bfd0:	429c      	cmp	r4, r3
 801bfd2:	bf08      	it	eq
 801bfd4:	68ec      	ldreq	r4, [r5, #12]
 801bfd6:	e7da      	b.n	801bf8e <_fflush_r+0x22>
 801bfd8:	0801d29c 	.word	0x0801d29c
 801bfdc:	0801d2bc 	.word	0x0801d2bc
 801bfe0:	0801d27c 	.word	0x0801d27c

0801bfe4 <std>:
 801bfe4:	2300      	movs	r3, #0
 801bfe6:	b510      	push	{r4, lr}
 801bfe8:	4604      	mov	r4, r0
 801bfea:	e9c0 3300 	strd	r3, r3, [r0]
 801bfee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bff2:	6083      	str	r3, [r0, #8]
 801bff4:	8181      	strh	r1, [r0, #12]
 801bff6:	6643      	str	r3, [r0, #100]	; 0x64
 801bff8:	81c2      	strh	r2, [r0, #14]
 801bffa:	6183      	str	r3, [r0, #24]
 801bffc:	4619      	mov	r1, r3
 801bffe:	2208      	movs	r2, #8
 801c000:	305c      	adds	r0, #92	; 0x5c
 801c002:	f7fc f8e1 	bl	80181c8 <memset>
 801c006:	4b05      	ldr	r3, [pc, #20]	; (801c01c <std+0x38>)
 801c008:	6263      	str	r3, [r4, #36]	; 0x24
 801c00a:	4b05      	ldr	r3, [pc, #20]	; (801c020 <std+0x3c>)
 801c00c:	62a3      	str	r3, [r4, #40]	; 0x28
 801c00e:	4b05      	ldr	r3, [pc, #20]	; (801c024 <std+0x40>)
 801c010:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c012:	4b05      	ldr	r3, [pc, #20]	; (801c028 <std+0x44>)
 801c014:	6224      	str	r4, [r4, #32]
 801c016:	6323      	str	r3, [r4, #48]	; 0x30
 801c018:	bd10      	pop	{r4, pc}
 801c01a:	bf00      	nop
 801c01c:	08018eb5 	.word	0x08018eb5
 801c020:	08018ed7 	.word	0x08018ed7
 801c024:	08018f0f 	.word	0x08018f0f
 801c028:	08018f33 	.word	0x08018f33

0801c02c <_cleanup_r>:
 801c02c:	4901      	ldr	r1, [pc, #4]	; (801c034 <_cleanup_r+0x8>)
 801c02e:	f000 b8c1 	b.w	801c1b4 <_fwalk_reent>
 801c032:	bf00      	nop
 801c034:	0801bf6d 	.word	0x0801bf6d

0801c038 <__sfmoreglue>:
 801c038:	b570      	push	{r4, r5, r6, lr}
 801c03a:	2268      	movs	r2, #104	; 0x68
 801c03c:	1e4d      	subs	r5, r1, #1
 801c03e:	4355      	muls	r5, r2
 801c040:	460e      	mov	r6, r1
 801c042:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c046:	f7ff fcd1 	bl	801b9ec <_malloc_r>
 801c04a:	4604      	mov	r4, r0
 801c04c:	b140      	cbz	r0, 801c060 <__sfmoreglue+0x28>
 801c04e:	2100      	movs	r1, #0
 801c050:	e9c0 1600 	strd	r1, r6, [r0]
 801c054:	300c      	adds	r0, #12
 801c056:	60a0      	str	r0, [r4, #8]
 801c058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c05c:	f7fc f8b4 	bl	80181c8 <memset>
 801c060:	4620      	mov	r0, r4
 801c062:	bd70      	pop	{r4, r5, r6, pc}

0801c064 <__sfp_lock_acquire>:
 801c064:	4801      	ldr	r0, [pc, #4]	; (801c06c <__sfp_lock_acquire+0x8>)
 801c066:	f000 b8c5 	b.w	801c1f4 <__retarget_lock_acquire_recursive>
 801c06a:	bf00      	nop
 801c06c:	24002b75 	.word	0x24002b75

0801c070 <__sfp_lock_release>:
 801c070:	4801      	ldr	r0, [pc, #4]	; (801c078 <__sfp_lock_release+0x8>)
 801c072:	f000 b8c0 	b.w	801c1f6 <__retarget_lock_release_recursive>
 801c076:	bf00      	nop
 801c078:	24002b75 	.word	0x24002b75

0801c07c <__sinit_lock_acquire>:
 801c07c:	4801      	ldr	r0, [pc, #4]	; (801c084 <__sinit_lock_acquire+0x8>)
 801c07e:	f000 b8b9 	b.w	801c1f4 <__retarget_lock_acquire_recursive>
 801c082:	bf00      	nop
 801c084:	24002b76 	.word	0x24002b76

0801c088 <__sinit_lock_release>:
 801c088:	4801      	ldr	r0, [pc, #4]	; (801c090 <__sinit_lock_release+0x8>)
 801c08a:	f000 b8b4 	b.w	801c1f6 <__retarget_lock_release_recursive>
 801c08e:	bf00      	nop
 801c090:	24002b76 	.word	0x24002b76

0801c094 <__sinit>:
 801c094:	b510      	push	{r4, lr}
 801c096:	4604      	mov	r4, r0
 801c098:	f7ff fff0 	bl	801c07c <__sinit_lock_acquire>
 801c09c:	69a3      	ldr	r3, [r4, #24]
 801c09e:	b11b      	cbz	r3, 801c0a8 <__sinit+0x14>
 801c0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0a4:	f7ff bff0 	b.w	801c088 <__sinit_lock_release>
 801c0a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c0ac:	6523      	str	r3, [r4, #80]	; 0x50
 801c0ae:	4b13      	ldr	r3, [pc, #76]	; (801c0fc <__sinit+0x68>)
 801c0b0:	4a13      	ldr	r2, [pc, #76]	; (801c100 <__sinit+0x6c>)
 801c0b2:	681b      	ldr	r3, [r3, #0]
 801c0b4:	62a2      	str	r2, [r4, #40]	; 0x28
 801c0b6:	42a3      	cmp	r3, r4
 801c0b8:	bf04      	itt	eq
 801c0ba:	2301      	moveq	r3, #1
 801c0bc:	61a3      	streq	r3, [r4, #24]
 801c0be:	4620      	mov	r0, r4
 801c0c0:	f000 f820 	bl	801c104 <__sfp>
 801c0c4:	6060      	str	r0, [r4, #4]
 801c0c6:	4620      	mov	r0, r4
 801c0c8:	f000 f81c 	bl	801c104 <__sfp>
 801c0cc:	60a0      	str	r0, [r4, #8]
 801c0ce:	4620      	mov	r0, r4
 801c0d0:	f000 f818 	bl	801c104 <__sfp>
 801c0d4:	2200      	movs	r2, #0
 801c0d6:	60e0      	str	r0, [r4, #12]
 801c0d8:	2104      	movs	r1, #4
 801c0da:	6860      	ldr	r0, [r4, #4]
 801c0dc:	f7ff ff82 	bl	801bfe4 <std>
 801c0e0:	68a0      	ldr	r0, [r4, #8]
 801c0e2:	2201      	movs	r2, #1
 801c0e4:	2109      	movs	r1, #9
 801c0e6:	f7ff ff7d 	bl	801bfe4 <std>
 801c0ea:	68e0      	ldr	r0, [r4, #12]
 801c0ec:	2202      	movs	r2, #2
 801c0ee:	2112      	movs	r1, #18
 801c0f0:	f7ff ff78 	bl	801bfe4 <std>
 801c0f4:	2301      	movs	r3, #1
 801c0f6:	61a3      	str	r3, [r4, #24]
 801c0f8:	e7d2      	b.n	801c0a0 <__sinit+0xc>
 801c0fa:	bf00      	nop
 801c0fc:	0801ce38 	.word	0x0801ce38
 801c100:	0801c02d 	.word	0x0801c02d

0801c104 <__sfp>:
 801c104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c106:	4607      	mov	r7, r0
 801c108:	f7ff ffac 	bl	801c064 <__sfp_lock_acquire>
 801c10c:	4b1e      	ldr	r3, [pc, #120]	; (801c188 <__sfp+0x84>)
 801c10e:	681e      	ldr	r6, [r3, #0]
 801c110:	69b3      	ldr	r3, [r6, #24]
 801c112:	b913      	cbnz	r3, 801c11a <__sfp+0x16>
 801c114:	4630      	mov	r0, r6
 801c116:	f7ff ffbd 	bl	801c094 <__sinit>
 801c11a:	3648      	adds	r6, #72	; 0x48
 801c11c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c120:	3b01      	subs	r3, #1
 801c122:	d503      	bpl.n	801c12c <__sfp+0x28>
 801c124:	6833      	ldr	r3, [r6, #0]
 801c126:	b30b      	cbz	r3, 801c16c <__sfp+0x68>
 801c128:	6836      	ldr	r6, [r6, #0]
 801c12a:	e7f7      	b.n	801c11c <__sfp+0x18>
 801c12c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c130:	b9d5      	cbnz	r5, 801c168 <__sfp+0x64>
 801c132:	4b16      	ldr	r3, [pc, #88]	; (801c18c <__sfp+0x88>)
 801c134:	60e3      	str	r3, [r4, #12]
 801c136:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c13a:	6665      	str	r5, [r4, #100]	; 0x64
 801c13c:	f000 f859 	bl	801c1f2 <__retarget_lock_init_recursive>
 801c140:	f7ff ff96 	bl	801c070 <__sfp_lock_release>
 801c144:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c148:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c14c:	6025      	str	r5, [r4, #0]
 801c14e:	61a5      	str	r5, [r4, #24]
 801c150:	2208      	movs	r2, #8
 801c152:	4629      	mov	r1, r5
 801c154:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c158:	f7fc f836 	bl	80181c8 <memset>
 801c15c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c160:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c164:	4620      	mov	r0, r4
 801c166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c168:	3468      	adds	r4, #104	; 0x68
 801c16a:	e7d9      	b.n	801c120 <__sfp+0x1c>
 801c16c:	2104      	movs	r1, #4
 801c16e:	4638      	mov	r0, r7
 801c170:	f7ff ff62 	bl	801c038 <__sfmoreglue>
 801c174:	4604      	mov	r4, r0
 801c176:	6030      	str	r0, [r6, #0]
 801c178:	2800      	cmp	r0, #0
 801c17a:	d1d5      	bne.n	801c128 <__sfp+0x24>
 801c17c:	f7ff ff78 	bl	801c070 <__sfp_lock_release>
 801c180:	230c      	movs	r3, #12
 801c182:	603b      	str	r3, [r7, #0]
 801c184:	e7ee      	b.n	801c164 <__sfp+0x60>
 801c186:	bf00      	nop
 801c188:	0801ce38 	.word	0x0801ce38
 801c18c:	ffff0001 	.word	0xffff0001

0801c190 <fiprintf>:
 801c190:	b40e      	push	{r1, r2, r3}
 801c192:	b503      	push	{r0, r1, lr}
 801c194:	4601      	mov	r1, r0
 801c196:	ab03      	add	r3, sp, #12
 801c198:	4805      	ldr	r0, [pc, #20]	; (801c1b0 <fiprintf+0x20>)
 801c19a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c19e:	6800      	ldr	r0, [r0, #0]
 801c1a0:	9301      	str	r3, [sp, #4]
 801c1a2:	f000 f8a7 	bl	801c2f4 <_vfiprintf_r>
 801c1a6:	b002      	add	sp, #8
 801c1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801c1ac:	b003      	add	sp, #12
 801c1ae:	4770      	bx	lr
 801c1b0:	24000100 	.word	0x24000100

0801c1b4 <_fwalk_reent>:
 801c1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1b8:	4606      	mov	r6, r0
 801c1ba:	4688      	mov	r8, r1
 801c1bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c1c0:	2700      	movs	r7, #0
 801c1c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c1c6:	f1b9 0901 	subs.w	r9, r9, #1
 801c1ca:	d505      	bpl.n	801c1d8 <_fwalk_reent+0x24>
 801c1cc:	6824      	ldr	r4, [r4, #0]
 801c1ce:	2c00      	cmp	r4, #0
 801c1d0:	d1f7      	bne.n	801c1c2 <_fwalk_reent+0xe>
 801c1d2:	4638      	mov	r0, r7
 801c1d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c1d8:	89ab      	ldrh	r3, [r5, #12]
 801c1da:	2b01      	cmp	r3, #1
 801c1dc:	d907      	bls.n	801c1ee <_fwalk_reent+0x3a>
 801c1de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c1e2:	3301      	adds	r3, #1
 801c1e4:	d003      	beq.n	801c1ee <_fwalk_reent+0x3a>
 801c1e6:	4629      	mov	r1, r5
 801c1e8:	4630      	mov	r0, r6
 801c1ea:	47c0      	blx	r8
 801c1ec:	4307      	orrs	r7, r0
 801c1ee:	3568      	adds	r5, #104	; 0x68
 801c1f0:	e7e9      	b.n	801c1c6 <_fwalk_reent+0x12>

0801c1f2 <__retarget_lock_init_recursive>:
 801c1f2:	4770      	bx	lr

0801c1f4 <__retarget_lock_acquire_recursive>:
 801c1f4:	4770      	bx	lr

0801c1f6 <__retarget_lock_release_recursive>:
 801c1f6:	4770      	bx	lr

0801c1f8 <memmove>:
 801c1f8:	4288      	cmp	r0, r1
 801c1fa:	b510      	push	{r4, lr}
 801c1fc:	eb01 0402 	add.w	r4, r1, r2
 801c200:	d902      	bls.n	801c208 <memmove+0x10>
 801c202:	4284      	cmp	r4, r0
 801c204:	4623      	mov	r3, r4
 801c206:	d807      	bhi.n	801c218 <memmove+0x20>
 801c208:	1e43      	subs	r3, r0, #1
 801c20a:	42a1      	cmp	r1, r4
 801c20c:	d008      	beq.n	801c220 <memmove+0x28>
 801c20e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c212:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c216:	e7f8      	b.n	801c20a <memmove+0x12>
 801c218:	4402      	add	r2, r0
 801c21a:	4601      	mov	r1, r0
 801c21c:	428a      	cmp	r2, r1
 801c21e:	d100      	bne.n	801c222 <memmove+0x2a>
 801c220:	bd10      	pop	{r4, pc}
 801c222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c22a:	e7f7      	b.n	801c21c <memmove+0x24>

0801c22c <__malloc_lock>:
 801c22c:	4801      	ldr	r0, [pc, #4]	; (801c234 <__malloc_lock+0x8>)
 801c22e:	f7ff bfe1 	b.w	801c1f4 <__retarget_lock_acquire_recursive>
 801c232:	bf00      	nop
 801c234:	24002b74 	.word	0x24002b74

0801c238 <__malloc_unlock>:
 801c238:	4801      	ldr	r0, [pc, #4]	; (801c240 <__malloc_unlock+0x8>)
 801c23a:	f7ff bfdc 	b.w	801c1f6 <__retarget_lock_release_recursive>
 801c23e:	bf00      	nop
 801c240:	24002b74 	.word	0x24002b74

0801c244 <_realloc_r>:
 801c244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c248:	4680      	mov	r8, r0
 801c24a:	4614      	mov	r4, r2
 801c24c:	460e      	mov	r6, r1
 801c24e:	b921      	cbnz	r1, 801c25a <_realloc_r+0x16>
 801c250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c254:	4611      	mov	r1, r2
 801c256:	f7ff bbc9 	b.w	801b9ec <_malloc_r>
 801c25a:	b92a      	cbnz	r2, 801c268 <_realloc_r+0x24>
 801c25c:	f7ff fb5a 	bl	801b914 <_free_r>
 801c260:	4625      	mov	r5, r4
 801c262:	4628      	mov	r0, r5
 801c264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c268:	f000 faa0 	bl	801c7ac <_malloc_usable_size_r>
 801c26c:	4284      	cmp	r4, r0
 801c26e:	4607      	mov	r7, r0
 801c270:	d802      	bhi.n	801c278 <_realloc_r+0x34>
 801c272:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c276:	d812      	bhi.n	801c29e <_realloc_r+0x5a>
 801c278:	4621      	mov	r1, r4
 801c27a:	4640      	mov	r0, r8
 801c27c:	f7ff fbb6 	bl	801b9ec <_malloc_r>
 801c280:	4605      	mov	r5, r0
 801c282:	2800      	cmp	r0, #0
 801c284:	d0ed      	beq.n	801c262 <_realloc_r+0x1e>
 801c286:	42bc      	cmp	r4, r7
 801c288:	4622      	mov	r2, r4
 801c28a:	4631      	mov	r1, r6
 801c28c:	bf28      	it	cs
 801c28e:	463a      	movcs	r2, r7
 801c290:	f7fb ff8c 	bl	80181ac <memcpy>
 801c294:	4631      	mov	r1, r6
 801c296:	4640      	mov	r0, r8
 801c298:	f7ff fb3c 	bl	801b914 <_free_r>
 801c29c:	e7e1      	b.n	801c262 <_realloc_r+0x1e>
 801c29e:	4635      	mov	r5, r6
 801c2a0:	e7df      	b.n	801c262 <_realloc_r+0x1e>

0801c2a2 <__sfputc_r>:
 801c2a2:	6893      	ldr	r3, [r2, #8]
 801c2a4:	3b01      	subs	r3, #1
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	b410      	push	{r4}
 801c2aa:	6093      	str	r3, [r2, #8]
 801c2ac:	da08      	bge.n	801c2c0 <__sfputc_r+0x1e>
 801c2ae:	6994      	ldr	r4, [r2, #24]
 801c2b0:	42a3      	cmp	r3, r4
 801c2b2:	db01      	blt.n	801c2b8 <__sfputc_r+0x16>
 801c2b4:	290a      	cmp	r1, #10
 801c2b6:	d103      	bne.n	801c2c0 <__sfputc_r+0x1e>
 801c2b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c2bc:	f000 b94a 	b.w	801c554 <__swbuf_r>
 801c2c0:	6813      	ldr	r3, [r2, #0]
 801c2c2:	1c58      	adds	r0, r3, #1
 801c2c4:	6010      	str	r0, [r2, #0]
 801c2c6:	7019      	strb	r1, [r3, #0]
 801c2c8:	4608      	mov	r0, r1
 801c2ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c2ce:	4770      	bx	lr

0801c2d0 <__sfputs_r>:
 801c2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2d2:	4606      	mov	r6, r0
 801c2d4:	460f      	mov	r7, r1
 801c2d6:	4614      	mov	r4, r2
 801c2d8:	18d5      	adds	r5, r2, r3
 801c2da:	42ac      	cmp	r4, r5
 801c2dc:	d101      	bne.n	801c2e2 <__sfputs_r+0x12>
 801c2de:	2000      	movs	r0, #0
 801c2e0:	e007      	b.n	801c2f2 <__sfputs_r+0x22>
 801c2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c2e6:	463a      	mov	r2, r7
 801c2e8:	4630      	mov	r0, r6
 801c2ea:	f7ff ffda 	bl	801c2a2 <__sfputc_r>
 801c2ee:	1c43      	adds	r3, r0, #1
 801c2f0:	d1f3      	bne.n	801c2da <__sfputs_r+0xa>
 801c2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c2f4 <_vfiprintf_r>:
 801c2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2f8:	460d      	mov	r5, r1
 801c2fa:	b09d      	sub	sp, #116	; 0x74
 801c2fc:	4614      	mov	r4, r2
 801c2fe:	4698      	mov	r8, r3
 801c300:	4606      	mov	r6, r0
 801c302:	b118      	cbz	r0, 801c30c <_vfiprintf_r+0x18>
 801c304:	6983      	ldr	r3, [r0, #24]
 801c306:	b90b      	cbnz	r3, 801c30c <_vfiprintf_r+0x18>
 801c308:	f7ff fec4 	bl	801c094 <__sinit>
 801c30c:	4b89      	ldr	r3, [pc, #548]	; (801c534 <_vfiprintf_r+0x240>)
 801c30e:	429d      	cmp	r5, r3
 801c310:	d11b      	bne.n	801c34a <_vfiprintf_r+0x56>
 801c312:	6875      	ldr	r5, [r6, #4]
 801c314:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c316:	07d9      	lsls	r1, r3, #31
 801c318:	d405      	bmi.n	801c326 <_vfiprintf_r+0x32>
 801c31a:	89ab      	ldrh	r3, [r5, #12]
 801c31c:	059a      	lsls	r2, r3, #22
 801c31e:	d402      	bmi.n	801c326 <_vfiprintf_r+0x32>
 801c320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c322:	f7ff ff67 	bl	801c1f4 <__retarget_lock_acquire_recursive>
 801c326:	89ab      	ldrh	r3, [r5, #12]
 801c328:	071b      	lsls	r3, r3, #28
 801c32a:	d501      	bpl.n	801c330 <_vfiprintf_r+0x3c>
 801c32c:	692b      	ldr	r3, [r5, #16]
 801c32e:	b9eb      	cbnz	r3, 801c36c <_vfiprintf_r+0x78>
 801c330:	4629      	mov	r1, r5
 801c332:	4630      	mov	r0, r6
 801c334:	f000 f960 	bl	801c5f8 <__swsetup_r>
 801c338:	b1c0      	cbz	r0, 801c36c <_vfiprintf_r+0x78>
 801c33a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c33c:	07dc      	lsls	r4, r3, #31
 801c33e:	d50e      	bpl.n	801c35e <_vfiprintf_r+0x6a>
 801c340:	f04f 30ff 	mov.w	r0, #4294967295
 801c344:	b01d      	add	sp, #116	; 0x74
 801c346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c34a:	4b7b      	ldr	r3, [pc, #492]	; (801c538 <_vfiprintf_r+0x244>)
 801c34c:	429d      	cmp	r5, r3
 801c34e:	d101      	bne.n	801c354 <_vfiprintf_r+0x60>
 801c350:	68b5      	ldr	r5, [r6, #8]
 801c352:	e7df      	b.n	801c314 <_vfiprintf_r+0x20>
 801c354:	4b79      	ldr	r3, [pc, #484]	; (801c53c <_vfiprintf_r+0x248>)
 801c356:	429d      	cmp	r5, r3
 801c358:	bf08      	it	eq
 801c35a:	68f5      	ldreq	r5, [r6, #12]
 801c35c:	e7da      	b.n	801c314 <_vfiprintf_r+0x20>
 801c35e:	89ab      	ldrh	r3, [r5, #12]
 801c360:	0598      	lsls	r0, r3, #22
 801c362:	d4ed      	bmi.n	801c340 <_vfiprintf_r+0x4c>
 801c364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c366:	f7ff ff46 	bl	801c1f6 <__retarget_lock_release_recursive>
 801c36a:	e7e9      	b.n	801c340 <_vfiprintf_r+0x4c>
 801c36c:	2300      	movs	r3, #0
 801c36e:	9309      	str	r3, [sp, #36]	; 0x24
 801c370:	2320      	movs	r3, #32
 801c372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c376:	f8cd 800c 	str.w	r8, [sp, #12]
 801c37a:	2330      	movs	r3, #48	; 0x30
 801c37c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c540 <_vfiprintf_r+0x24c>
 801c380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c384:	f04f 0901 	mov.w	r9, #1
 801c388:	4623      	mov	r3, r4
 801c38a:	469a      	mov	sl, r3
 801c38c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c390:	b10a      	cbz	r2, 801c396 <_vfiprintf_r+0xa2>
 801c392:	2a25      	cmp	r2, #37	; 0x25
 801c394:	d1f9      	bne.n	801c38a <_vfiprintf_r+0x96>
 801c396:	ebba 0b04 	subs.w	fp, sl, r4
 801c39a:	d00b      	beq.n	801c3b4 <_vfiprintf_r+0xc0>
 801c39c:	465b      	mov	r3, fp
 801c39e:	4622      	mov	r2, r4
 801c3a0:	4629      	mov	r1, r5
 801c3a2:	4630      	mov	r0, r6
 801c3a4:	f7ff ff94 	bl	801c2d0 <__sfputs_r>
 801c3a8:	3001      	adds	r0, #1
 801c3aa:	f000 80aa 	beq.w	801c502 <_vfiprintf_r+0x20e>
 801c3ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c3b0:	445a      	add	r2, fp
 801c3b2:	9209      	str	r2, [sp, #36]	; 0x24
 801c3b4:	f89a 3000 	ldrb.w	r3, [sl]
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	f000 80a2 	beq.w	801c502 <_vfiprintf_r+0x20e>
 801c3be:	2300      	movs	r3, #0
 801c3c0:	f04f 32ff 	mov.w	r2, #4294967295
 801c3c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c3c8:	f10a 0a01 	add.w	sl, sl, #1
 801c3cc:	9304      	str	r3, [sp, #16]
 801c3ce:	9307      	str	r3, [sp, #28]
 801c3d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c3d4:	931a      	str	r3, [sp, #104]	; 0x68
 801c3d6:	4654      	mov	r4, sl
 801c3d8:	2205      	movs	r2, #5
 801c3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c3de:	4858      	ldr	r0, [pc, #352]	; (801c540 <_vfiprintf_r+0x24c>)
 801c3e0:	f7e3 ff9e 	bl	8000320 <memchr>
 801c3e4:	9a04      	ldr	r2, [sp, #16]
 801c3e6:	b9d8      	cbnz	r0, 801c420 <_vfiprintf_r+0x12c>
 801c3e8:	06d1      	lsls	r1, r2, #27
 801c3ea:	bf44      	itt	mi
 801c3ec:	2320      	movmi	r3, #32
 801c3ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c3f2:	0713      	lsls	r3, r2, #28
 801c3f4:	bf44      	itt	mi
 801c3f6:	232b      	movmi	r3, #43	; 0x2b
 801c3f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c3fc:	f89a 3000 	ldrb.w	r3, [sl]
 801c400:	2b2a      	cmp	r3, #42	; 0x2a
 801c402:	d015      	beq.n	801c430 <_vfiprintf_r+0x13c>
 801c404:	9a07      	ldr	r2, [sp, #28]
 801c406:	4654      	mov	r4, sl
 801c408:	2000      	movs	r0, #0
 801c40a:	f04f 0c0a 	mov.w	ip, #10
 801c40e:	4621      	mov	r1, r4
 801c410:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c414:	3b30      	subs	r3, #48	; 0x30
 801c416:	2b09      	cmp	r3, #9
 801c418:	d94e      	bls.n	801c4b8 <_vfiprintf_r+0x1c4>
 801c41a:	b1b0      	cbz	r0, 801c44a <_vfiprintf_r+0x156>
 801c41c:	9207      	str	r2, [sp, #28]
 801c41e:	e014      	b.n	801c44a <_vfiprintf_r+0x156>
 801c420:	eba0 0308 	sub.w	r3, r0, r8
 801c424:	fa09 f303 	lsl.w	r3, r9, r3
 801c428:	4313      	orrs	r3, r2
 801c42a:	9304      	str	r3, [sp, #16]
 801c42c:	46a2      	mov	sl, r4
 801c42e:	e7d2      	b.n	801c3d6 <_vfiprintf_r+0xe2>
 801c430:	9b03      	ldr	r3, [sp, #12]
 801c432:	1d19      	adds	r1, r3, #4
 801c434:	681b      	ldr	r3, [r3, #0]
 801c436:	9103      	str	r1, [sp, #12]
 801c438:	2b00      	cmp	r3, #0
 801c43a:	bfbb      	ittet	lt
 801c43c:	425b      	neglt	r3, r3
 801c43e:	f042 0202 	orrlt.w	r2, r2, #2
 801c442:	9307      	strge	r3, [sp, #28]
 801c444:	9307      	strlt	r3, [sp, #28]
 801c446:	bfb8      	it	lt
 801c448:	9204      	strlt	r2, [sp, #16]
 801c44a:	7823      	ldrb	r3, [r4, #0]
 801c44c:	2b2e      	cmp	r3, #46	; 0x2e
 801c44e:	d10c      	bne.n	801c46a <_vfiprintf_r+0x176>
 801c450:	7863      	ldrb	r3, [r4, #1]
 801c452:	2b2a      	cmp	r3, #42	; 0x2a
 801c454:	d135      	bne.n	801c4c2 <_vfiprintf_r+0x1ce>
 801c456:	9b03      	ldr	r3, [sp, #12]
 801c458:	1d1a      	adds	r2, r3, #4
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	9203      	str	r2, [sp, #12]
 801c45e:	2b00      	cmp	r3, #0
 801c460:	bfb8      	it	lt
 801c462:	f04f 33ff 	movlt.w	r3, #4294967295
 801c466:	3402      	adds	r4, #2
 801c468:	9305      	str	r3, [sp, #20]
 801c46a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c550 <_vfiprintf_r+0x25c>
 801c46e:	7821      	ldrb	r1, [r4, #0]
 801c470:	2203      	movs	r2, #3
 801c472:	4650      	mov	r0, sl
 801c474:	f7e3 ff54 	bl	8000320 <memchr>
 801c478:	b140      	cbz	r0, 801c48c <_vfiprintf_r+0x198>
 801c47a:	2340      	movs	r3, #64	; 0x40
 801c47c:	eba0 000a 	sub.w	r0, r0, sl
 801c480:	fa03 f000 	lsl.w	r0, r3, r0
 801c484:	9b04      	ldr	r3, [sp, #16]
 801c486:	4303      	orrs	r3, r0
 801c488:	3401      	adds	r4, #1
 801c48a:	9304      	str	r3, [sp, #16]
 801c48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c490:	482c      	ldr	r0, [pc, #176]	; (801c544 <_vfiprintf_r+0x250>)
 801c492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c496:	2206      	movs	r2, #6
 801c498:	f7e3 ff42 	bl	8000320 <memchr>
 801c49c:	2800      	cmp	r0, #0
 801c49e:	d03f      	beq.n	801c520 <_vfiprintf_r+0x22c>
 801c4a0:	4b29      	ldr	r3, [pc, #164]	; (801c548 <_vfiprintf_r+0x254>)
 801c4a2:	bb1b      	cbnz	r3, 801c4ec <_vfiprintf_r+0x1f8>
 801c4a4:	9b03      	ldr	r3, [sp, #12]
 801c4a6:	3307      	adds	r3, #7
 801c4a8:	f023 0307 	bic.w	r3, r3, #7
 801c4ac:	3308      	adds	r3, #8
 801c4ae:	9303      	str	r3, [sp, #12]
 801c4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4b2:	443b      	add	r3, r7
 801c4b4:	9309      	str	r3, [sp, #36]	; 0x24
 801c4b6:	e767      	b.n	801c388 <_vfiprintf_r+0x94>
 801c4b8:	fb0c 3202 	mla	r2, ip, r2, r3
 801c4bc:	460c      	mov	r4, r1
 801c4be:	2001      	movs	r0, #1
 801c4c0:	e7a5      	b.n	801c40e <_vfiprintf_r+0x11a>
 801c4c2:	2300      	movs	r3, #0
 801c4c4:	3401      	adds	r4, #1
 801c4c6:	9305      	str	r3, [sp, #20]
 801c4c8:	4619      	mov	r1, r3
 801c4ca:	f04f 0c0a 	mov.w	ip, #10
 801c4ce:	4620      	mov	r0, r4
 801c4d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c4d4:	3a30      	subs	r2, #48	; 0x30
 801c4d6:	2a09      	cmp	r2, #9
 801c4d8:	d903      	bls.n	801c4e2 <_vfiprintf_r+0x1ee>
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d0c5      	beq.n	801c46a <_vfiprintf_r+0x176>
 801c4de:	9105      	str	r1, [sp, #20]
 801c4e0:	e7c3      	b.n	801c46a <_vfiprintf_r+0x176>
 801c4e2:	fb0c 2101 	mla	r1, ip, r1, r2
 801c4e6:	4604      	mov	r4, r0
 801c4e8:	2301      	movs	r3, #1
 801c4ea:	e7f0      	b.n	801c4ce <_vfiprintf_r+0x1da>
 801c4ec:	ab03      	add	r3, sp, #12
 801c4ee:	9300      	str	r3, [sp, #0]
 801c4f0:	462a      	mov	r2, r5
 801c4f2:	4b16      	ldr	r3, [pc, #88]	; (801c54c <_vfiprintf_r+0x258>)
 801c4f4:	a904      	add	r1, sp, #16
 801c4f6:	4630      	mov	r0, r6
 801c4f8:	f7fb fefe 	bl	80182f8 <_printf_float>
 801c4fc:	4607      	mov	r7, r0
 801c4fe:	1c78      	adds	r0, r7, #1
 801c500:	d1d6      	bne.n	801c4b0 <_vfiprintf_r+0x1bc>
 801c502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c504:	07d9      	lsls	r1, r3, #31
 801c506:	d405      	bmi.n	801c514 <_vfiprintf_r+0x220>
 801c508:	89ab      	ldrh	r3, [r5, #12]
 801c50a:	059a      	lsls	r2, r3, #22
 801c50c:	d402      	bmi.n	801c514 <_vfiprintf_r+0x220>
 801c50e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c510:	f7ff fe71 	bl	801c1f6 <__retarget_lock_release_recursive>
 801c514:	89ab      	ldrh	r3, [r5, #12]
 801c516:	065b      	lsls	r3, r3, #25
 801c518:	f53f af12 	bmi.w	801c340 <_vfiprintf_r+0x4c>
 801c51c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c51e:	e711      	b.n	801c344 <_vfiprintf_r+0x50>
 801c520:	ab03      	add	r3, sp, #12
 801c522:	9300      	str	r3, [sp, #0]
 801c524:	462a      	mov	r2, r5
 801c526:	4b09      	ldr	r3, [pc, #36]	; (801c54c <_vfiprintf_r+0x258>)
 801c528:	a904      	add	r1, sp, #16
 801c52a:	4630      	mov	r0, r6
 801c52c:	f7fc f970 	bl	8018810 <_printf_i>
 801c530:	e7e4      	b.n	801c4fc <_vfiprintf_r+0x208>
 801c532:	bf00      	nop
 801c534:	0801d29c 	.word	0x0801d29c
 801c538:	0801d2bc 	.word	0x0801d2bc
 801c53c:	0801d27c 	.word	0x0801d27c
 801c540:	0801d22c 	.word	0x0801d22c
 801c544:	0801d236 	.word	0x0801d236
 801c548:	080182f9 	.word	0x080182f9
 801c54c:	0801c2d1 	.word	0x0801c2d1
 801c550:	0801d232 	.word	0x0801d232

0801c554 <__swbuf_r>:
 801c554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c556:	460e      	mov	r6, r1
 801c558:	4614      	mov	r4, r2
 801c55a:	4605      	mov	r5, r0
 801c55c:	b118      	cbz	r0, 801c566 <__swbuf_r+0x12>
 801c55e:	6983      	ldr	r3, [r0, #24]
 801c560:	b90b      	cbnz	r3, 801c566 <__swbuf_r+0x12>
 801c562:	f7ff fd97 	bl	801c094 <__sinit>
 801c566:	4b21      	ldr	r3, [pc, #132]	; (801c5ec <__swbuf_r+0x98>)
 801c568:	429c      	cmp	r4, r3
 801c56a:	d12b      	bne.n	801c5c4 <__swbuf_r+0x70>
 801c56c:	686c      	ldr	r4, [r5, #4]
 801c56e:	69a3      	ldr	r3, [r4, #24]
 801c570:	60a3      	str	r3, [r4, #8]
 801c572:	89a3      	ldrh	r3, [r4, #12]
 801c574:	071a      	lsls	r2, r3, #28
 801c576:	d52f      	bpl.n	801c5d8 <__swbuf_r+0x84>
 801c578:	6923      	ldr	r3, [r4, #16]
 801c57a:	b36b      	cbz	r3, 801c5d8 <__swbuf_r+0x84>
 801c57c:	6923      	ldr	r3, [r4, #16]
 801c57e:	6820      	ldr	r0, [r4, #0]
 801c580:	1ac0      	subs	r0, r0, r3
 801c582:	6963      	ldr	r3, [r4, #20]
 801c584:	b2f6      	uxtb	r6, r6
 801c586:	4283      	cmp	r3, r0
 801c588:	4637      	mov	r7, r6
 801c58a:	dc04      	bgt.n	801c596 <__swbuf_r+0x42>
 801c58c:	4621      	mov	r1, r4
 801c58e:	4628      	mov	r0, r5
 801c590:	f7ff fcec 	bl	801bf6c <_fflush_r>
 801c594:	bb30      	cbnz	r0, 801c5e4 <__swbuf_r+0x90>
 801c596:	68a3      	ldr	r3, [r4, #8]
 801c598:	3b01      	subs	r3, #1
 801c59a:	60a3      	str	r3, [r4, #8]
 801c59c:	6823      	ldr	r3, [r4, #0]
 801c59e:	1c5a      	adds	r2, r3, #1
 801c5a0:	6022      	str	r2, [r4, #0]
 801c5a2:	701e      	strb	r6, [r3, #0]
 801c5a4:	6963      	ldr	r3, [r4, #20]
 801c5a6:	3001      	adds	r0, #1
 801c5a8:	4283      	cmp	r3, r0
 801c5aa:	d004      	beq.n	801c5b6 <__swbuf_r+0x62>
 801c5ac:	89a3      	ldrh	r3, [r4, #12]
 801c5ae:	07db      	lsls	r3, r3, #31
 801c5b0:	d506      	bpl.n	801c5c0 <__swbuf_r+0x6c>
 801c5b2:	2e0a      	cmp	r6, #10
 801c5b4:	d104      	bne.n	801c5c0 <__swbuf_r+0x6c>
 801c5b6:	4621      	mov	r1, r4
 801c5b8:	4628      	mov	r0, r5
 801c5ba:	f7ff fcd7 	bl	801bf6c <_fflush_r>
 801c5be:	b988      	cbnz	r0, 801c5e4 <__swbuf_r+0x90>
 801c5c0:	4638      	mov	r0, r7
 801c5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c5c4:	4b0a      	ldr	r3, [pc, #40]	; (801c5f0 <__swbuf_r+0x9c>)
 801c5c6:	429c      	cmp	r4, r3
 801c5c8:	d101      	bne.n	801c5ce <__swbuf_r+0x7a>
 801c5ca:	68ac      	ldr	r4, [r5, #8]
 801c5cc:	e7cf      	b.n	801c56e <__swbuf_r+0x1a>
 801c5ce:	4b09      	ldr	r3, [pc, #36]	; (801c5f4 <__swbuf_r+0xa0>)
 801c5d0:	429c      	cmp	r4, r3
 801c5d2:	bf08      	it	eq
 801c5d4:	68ec      	ldreq	r4, [r5, #12]
 801c5d6:	e7ca      	b.n	801c56e <__swbuf_r+0x1a>
 801c5d8:	4621      	mov	r1, r4
 801c5da:	4628      	mov	r0, r5
 801c5dc:	f000 f80c 	bl	801c5f8 <__swsetup_r>
 801c5e0:	2800      	cmp	r0, #0
 801c5e2:	d0cb      	beq.n	801c57c <__swbuf_r+0x28>
 801c5e4:	f04f 37ff 	mov.w	r7, #4294967295
 801c5e8:	e7ea      	b.n	801c5c0 <__swbuf_r+0x6c>
 801c5ea:	bf00      	nop
 801c5ec:	0801d29c 	.word	0x0801d29c
 801c5f0:	0801d2bc 	.word	0x0801d2bc
 801c5f4:	0801d27c 	.word	0x0801d27c

0801c5f8 <__swsetup_r>:
 801c5f8:	4b32      	ldr	r3, [pc, #200]	; (801c6c4 <__swsetup_r+0xcc>)
 801c5fa:	b570      	push	{r4, r5, r6, lr}
 801c5fc:	681d      	ldr	r5, [r3, #0]
 801c5fe:	4606      	mov	r6, r0
 801c600:	460c      	mov	r4, r1
 801c602:	b125      	cbz	r5, 801c60e <__swsetup_r+0x16>
 801c604:	69ab      	ldr	r3, [r5, #24]
 801c606:	b913      	cbnz	r3, 801c60e <__swsetup_r+0x16>
 801c608:	4628      	mov	r0, r5
 801c60a:	f7ff fd43 	bl	801c094 <__sinit>
 801c60e:	4b2e      	ldr	r3, [pc, #184]	; (801c6c8 <__swsetup_r+0xd0>)
 801c610:	429c      	cmp	r4, r3
 801c612:	d10f      	bne.n	801c634 <__swsetup_r+0x3c>
 801c614:	686c      	ldr	r4, [r5, #4]
 801c616:	89a3      	ldrh	r3, [r4, #12]
 801c618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c61c:	0719      	lsls	r1, r3, #28
 801c61e:	d42c      	bmi.n	801c67a <__swsetup_r+0x82>
 801c620:	06dd      	lsls	r5, r3, #27
 801c622:	d411      	bmi.n	801c648 <__swsetup_r+0x50>
 801c624:	2309      	movs	r3, #9
 801c626:	6033      	str	r3, [r6, #0]
 801c628:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c62c:	81a3      	strh	r3, [r4, #12]
 801c62e:	f04f 30ff 	mov.w	r0, #4294967295
 801c632:	e03e      	b.n	801c6b2 <__swsetup_r+0xba>
 801c634:	4b25      	ldr	r3, [pc, #148]	; (801c6cc <__swsetup_r+0xd4>)
 801c636:	429c      	cmp	r4, r3
 801c638:	d101      	bne.n	801c63e <__swsetup_r+0x46>
 801c63a:	68ac      	ldr	r4, [r5, #8]
 801c63c:	e7eb      	b.n	801c616 <__swsetup_r+0x1e>
 801c63e:	4b24      	ldr	r3, [pc, #144]	; (801c6d0 <__swsetup_r+0xd8>)
 801c640:	429c      	cmp	r4, r3
 801c642:	bf08      	it	eq
 801c644:	68ec      	ldreq	r4, [r5, #12]
 801c646:	e7e6      	b.n	801c616 <__swsetup_r+0x1e>
 801c648:	0758      	lsls	r0, r3, #29
 801c64a:	d512      	bpl.n	801c672 <__swsetup_r+0x7a>
 801c64c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c64e:	b141      	cbz	r1, 801c662 <__swsetup_r+0x6a>
 801c650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c654:	4299      	cmp	r1, r3
 801c656:	d002      	beq.n	801c65e <__swsetup_r+0x66>
 801c658:	4630      	mov	r0, r6
 801c65a:	f7ff f95b 	bl	801b914 <_free_r>
 801c65e:	2300      	movs	r3, #0
 801c660:	6363      	str	r3, [r4, #52]	; 0x34
 801c662:	89a3      	ldrh	r3, [r4, #12]
 801c664:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c668:	81a3      	strh	r3, [r4, #12]
 801c66a:	2300      	movs	r3, #0
 801c66c:	6063      	str	r3, [r4, #4]
 801c66e:	6923      	ldr	r3, [r4, #16]
 801c670:	6023      	str	r3, [r4, #0]
 801c672:	89a3      	ldrh	r3, [r4, #12]
 801c674:	f043 0308 	orr.w	r3, r3, #8
 801c678:	81a3      	strh	r3, [r4, #12]
 801c67a:	6923      	ldr	r3, [r4, #16]
 801c67c:	b94b      	cbnz	r3, 801c692 <__swsetup_r+0x9a>
 801c67e:	89a3      	ldrh	r3, [r4, #12]
 801c680:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c688:	d003      	beq.n	801c692 <__swsetup_r+0x9a>
 801c68a:	4621      	mov	r1, r4
 801c68c:	4630      	mov	r0, r6
 801c68e:	f000 f84d 	bl	801c72c <__smakebuf_r>
 801c692:	89a0      	ldrh	r0, [r4, #12]
 801c694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c698:	f010 0301 	ands.w	r3, r0, #1
 801c69c:	d00a      	beq.n	801c6b4 <__swsetup_r+0xbc>
 801c69e:	2300      	movs	r3, #0
 801c6a0:	60a3      	str	r3, [r4, #8]
 801c6a2:	6963      	ldr	r3, [r4, #20]
 801c6a4:	425b      	negs	r3, r3
 801c6a6:	61a3      	str	r3, [r4, #24]
 801c6a8:	6923      	ldr	r3, [r4, #16]
 801c6aa:	b943      	cbnz	r3, 801c6be <__swsetup_r+0xc6>
 801c6ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c6b0:	d1ba      	bne.n	801c628 <__swsetup_r+0x30>
 801c6b2:	bd70      	pop	{r4, r5, r6, pc}
 801c6b4:	0781      	lsls	r1, r0, #30
 801c6b6:	bf58      	it	pl
 801c6b8:	6963      	ldrpl	r3, [r4, #20]
 801c6ba:	60a3      	str	r3, [r4, #8]
 801c6bc:	e7f4      	b.n	801c6a8 <__swsetup_r+0xb0>
 801c6be:	2000      	movs	r0, #0
 801c6c0:	e7f7      	b.n	801c6b2 <__swsetup_r+0xba>
 801c6c2:	bf00      	nop
 801c6c4:	24000100 	.word	0x24000100
 801c6c8:	0801d29c 	.word	0x0801d29c
 801c6cc:	0801d2bc 	.word	0x0801d2bc
 801c6d0:	0801d27c 	.word	0x0801d27c

0801c6d4 <abort>:
 801c6d4:	b508      	push	{r3, lr}
 801c6d6:	2006      	movs	r0, #6
 801c6d8:	f000 f898 	bl	801c80c <raise>
 801c6dc:	2001      	movs	r0, #1
 801c6de:	f7e6 f997 	bl	8002a10 <_exit>

0801c6e2 <__swhatbuf_r>:
 801c6e2:	b570      	push	{r4, r5, r6, lr}
 801c6e4:	460e      	mov	r6, r1
 801c6e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c6ea:	2900      	cmp	r1, #0
 801c6ec:	b096      	sub	sp, #88	; 0x58
 801c6ee:	4614      	mov	r4, r2
 801c6f0:	461d      	mov	r5, r3
 801c6f2:	da08      	bge.n	801c706 <__swhatbuf_r+0x24>
 801c6f4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c6f8:	2200      	movs	r2, #0
 801c6fa:	602a      	str	r2, [r5, #0]
 801c6fc:	061a      	lsls	r2, r3, #24
 801c6fe:	d410      	bmi.n	801c722 <__swhatbuf_r+0x40>
 801c700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c704:	e00e      	b.n	801c724 <__swhatbuf_r+0x42>
 801c706:	466a      	mov	r2, sp
 801c708:	f000 f89c 	bl	801c844 <_fstat_r>
 801c70c:	2800      	cmp	r0, #0
 801c70e:	dbf1      	blt.n	801c6f4 <__swhatbuf_r+0x12>
 801c710:	9a01      	ldr	r2, [sp, #4]
 801c712:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c716:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c71a:	425a      	negs	r2, r3
 801c71c:	415a      	adcs	r2, r3
 801c71e:	602a      	str	r2, [r5, #0]
 801c720:	e7ee      	b.n	801c700 <__swhatbuf_r+0x1e>
 801c722:	2340      	movs	r3, #64	; 0x40
 801c724:	2000      	movs	r0, #0
 801c726:	6023      	str	r3, [r4, #0]
 801c728:	b016      	add	sp, #88	; 0x58
 801c72a:	bd70      	pop	{r4, r5, r6, pc}

0801c72c <__smakebuf_r>:
 801c72c:	898b      	ldrh	r3, [r1, #12]
 801c72e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c730:	079d      	lsls	r5, r3, #30
 801c732:	4606      	mov	r6, r0
 801c734:	460c      	mov	r4, r1
 801c736:	d507      	bpl.n	801c748 <__smakebuf_r+0x1c>
 801c738:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c73c:	6023      	str	r3, [r4, #0]
 801c73e:	6123      	str	r3, [r4, #16]
 801c740:	2301      	movs	r3, #1
 801c742:	6163      	str	r3, [r4, #20]
 801c744:	b002      	add	sp, #8
 801c746:	bd70      	pop	{r4, r5, r6, pc}
 801c748:	ab01      	add	r3, sp, #4
 801c74a:	466a      	mov	r2, sp
 801c74c:	f7ff ffc9 	bl	801c6e2 <__swhatbuf_r>
 801c750:	9900      	ldr	r1, [sp, #0]
 801c752:	4605      	mov	r5, r0
 801c754:	4630      	mov	r0, r6
 801c756:	f7ff f949 	bl	801b9ec <_malloc_r>
 801c75a:	b948      	cbnz	r0, 801c770 <__smakebuf_r+0x44>
 801c75c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c760:	059a      	lsls	r2, r3, #22
 801c762:	d4ef      	bmi.n	801c744 <__smakebuf_r+0x18>
 801c764:	f023 0303 	bic.w	r3, r3, #3
 801c768:	f043 0302 	orr.w	r3, r3, #2
 801c76c:	81a3      	strh	r3, [r4, #12]
 801c76e:	e7e3      	b.n	801c738 <__smakebuf_r+0xc>
 801c770:	4b0d      	ldr	r3, [pc, #52]	; (801c7a8 <__smakebuf_r+0x7c>)
 801c772:	62b3      	str	r3, [r6, #40]	; 0x28
 801c774:	89a3      	ldrh	r3, [r4, #12]
 801c776:	6020      	str	r0, [r4, #0]
 801c778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c77c:	81a3      	strh	r3, [r4, #12]
 801c77e:	9b00      	ldr	r3, [sp, #0]
 801c780:	6163      	str	r3, [r4, #20]
 801c782:	9b01      	ldr	r3, [sp, #4]
 801c784:	6120      	str	r0, [r4, #16]
 801c786:	b15b      	cbz	r3, 801c7a0 <__smakebuf_r+0x74>
 801c788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c78c:	4630      	mov	r0, r6
 801c78e:	f000 f86b 	bl	801c868 <_isatty_r>
 801c792:	b128      	cbz	r0, 801c7a0 <__smakebuf_r+0x74>
 801c794:	89a3      	ldrh	r3, [r4, #12]
 801c796:	f023 0303 	bic.w	r3, r3, #3
 801c79a:	f043 0301 	orr.w	r3, r3, #1
 801c79e:	81a3      	strh	r3, [r4, #12]
 801c7a0:	89a0      	ldrh	r0, [r4, #12]
 801c7a2:	4305      	orrs	r5, r0
 801c7a4:	81a5      	strh	r5, [r4, #12]
 801c7a6:	e7cd      	b.n	801c744 <__smakebuf_r+0x18>
 801c7a8:	0801c02d 	.word	0x0801c02d

0801c7ac <_malloc_usable_size_r>:
 801c7ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c7b0:	1f18      	subs	r0, r3, #4
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	bfbc      	itt	lt
 801c7b6:	580b      	ldrlt	r3, [r1, r0]
 801c7b8:	18c0      	addlt	r0, r0, r3
 801c7ba:	4770      	bx	lr

0801c7bc <_raise_r>:
 801c7bc:	291f      	cmp	r1, #31
 801c7be:	b538      	push	{r3, r4, r5, lr}
 801c7c0:	4604      	mov	r4, r0
 801c7c2:	460d      	mov	r5, r1
 801c7c4:	d904      	bls.n	801c7d0 <_raise_r+0x14>
 801c7c6:	2316      	movs	r3, #22
 801c7c8:	6003      	str	r3, [r0, #0]
 801c7ca:	f04f 30ff 	mov.w	r0, #4294967295
 801c7ce:	bd38      	pop	{r3, r4, r5, pc}
 801c7d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c7d2:	b112      	cbz	r2, 801c7da <_raise_r+0x1e>
 801c7d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c7d8:	b94b      	cbnz	r3, 801c7ee <_raise_r+0x32>
 801c7da:	4620      	mov	r0, r4
 801c7dc:	f000 f830 	bl	801c840 <_getpid_r>
 801c7e0:	462a      	mov	r2, r5
 801c7e2:	4601      	mov	r1, r0
 801c7e4:	4620      	mov	r0, r4
 801c7e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c7ea:	f000 b817 	b.w	801c81c <_kill_r>
 801c7ee:	2b01      	cmp	r3, #1
 801c7f0:	d00a      	beq.n	801c808 <_raise_r+0x4c>
 801c7f2:	1c59      	adds	r1, r3, #1
 801c7f4:	d103      	bne.n	801c7fe <_raise_r+0x42>
 801c7f6:	2316      	movs	r3, #22
 801c7f8:	6003      	str	r3, [r0, #0]
 801c7fa:	2001      	movs	r0, #1
 801c7fc:	e7e7      	b.n	801c7ce <_raise_r+0x12>
 801c7fe:	2400      	movs	r4, #0
 801c800:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c804:	4628      	mov	r0, r5
 801c806:	4798      	blx	r3
 801c808:	2000      	movs	r0, #0
 801c80a:	e7e0      	b.n	801c7ce <_raise_r+0x12>

0801c80c <raise>:
 801c80c:	4b02      	ldr	r3, [pc, #8]	; (801c818 <raise+0xc>)
 801c80e:	4601      	mov	r1, r0
 801c810:	6818      	ldr	r0, [r3, #0]
 801c812:	f7ff bfd3 	b.w	801c7bc <_raise_r>
 801c816:	bf00      	nop
 801c818:	24000100 	.word	0x24000100

0801c81c <_kill_r>:
 801c81c:	b538      	push	{r3, r4, r5, lr}
 801c81e:	4d07      	ldr	r5, [pc, #28]	; (801c83c <_kill_r+0x20>)
 801c820:	2300      	movs	r3, #0
 801c822:	4604      	mov	r4, r0
 801c824:	4608      	mov	r0, r1
 801c826:	4611      	mov	r1, r2
 801c828:	602b      	str	r3, [r5, #0]
 801c82a:	f7e6 f8e1 	bl	80029f0 <_kill>
 801c82e:	1c43      	adds	r3, r0, #1
 801c830:	d102      	bne.n	801c838 <_kill_r+0x1c>
 801c832:	682b      	ldr	r3, [r5, #0]
 801c834:	b103      	cbz	r3, 801c838 <_kill_r+0x1c>
 801c836:	6023      	str	r3, [r4, #0]
 801c838:	bd38      	pop	{r3, r4, r5, pc}
 801c83a:	bf00      	nop
 801c83c:	24002b70 	.word	0x24002b70

0801c840 <_getpid_r>:
 801c840:	f7e6 b8ce 	b.w	80029e0 <_getpid>

0801c844 <_fstat_r>:
 801c844:	b538      	push	{r3, r4, r5, lr}
 801c846:	4d07      	ldr	r5, [pc, #28]	; (801c864 <_fstat_r+0x20>)
 801c848:	2300      	movs	r3, #0
 801c84a:	4604      	mov	r4, r0
 801c84c:	4608      	mov	r0, r1
 801c84e:	4611      	mov	r1, r2
 801c850:	602b      	str	r3, [r5, #0]
 801c852:	f7e6 f92c 	bl	8002aae <_fstat>
 801c856:	1c43      	adds	r3, r0, #1
 801c858:	d102      	bne.n	801c860 <_fstat_r+0x1c>
 801c85a:	682b      	ldr	r3, [r5, #0]
 801c85c:	b103      	cbz	r3, 801c860 <_fstat_r+0x1c>
 801c85e:	6023      	str	r3, [r4, #0]
 801c860:	bd38      	pop	{r3, r4, r5, pc}
 801c862:	bf00      	nop
 801c864:	24002b70 	.word	0x24002b70

0801c868 <_isatty_r>:
 801c868:	b538      	push	{r3, r4, r5, lr}
 801c86a:	4d06      	ldr	r5, [pc, #24]	; (801c884 <_isatty_r+0x1c>)
 801c86c:	2300      	movs	r3, #0
 801c86e:	4604      	mov	r4, r0
 801c870:	4608      	mov	r0, r1
 801c872:	602b      	str	r3, [r5, #0]
 801c874:	f7e6 f92b 	bl	8002ace <_isatty>
 801c878:	1c43      	adds	r3, r0, #1
 801c87a:	d102      	bne.n	801c882 <_isatty_r+0x1a>
 801c87c:	682b      	ldr	r3, [r5, #0]
 801c87e:	b103      	cbz	r3, 801c882 <_isatty_r+0x1a>
 801c880:	6023      	str	r3, [r4, #0]
 801c882:	bd38      	pop	{r3, r4, r5, pc}
 801c884:	24002b70 	.word	0x24002b70

0801c888 <_init>:
 801c888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c88a:	bf00      	nop
 801c88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c88e:	bc08      	pop	{r3}
 801c890:	469e      	mov	lr, r3
 801c892:	4770      	bx	lr

0801c894 <_fini>:
 801c894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c896:	bf00      	nop
 801c898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c89a:	bc08      	pop	{r3}
 801c89c:	469e      	mov	lr, r3
 801c89e:	4770      	bx	lr
