
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fe18  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be4  080200e8  080200e8  000300e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020ccc  08020ccc  00030ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020cd4  08020cd4  00030cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020cd8  08020cd8  00030cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000003c8  24000000  08020cdc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005a34  240003c8  080210a4  000403c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24005dfc  080210a4  00045dfc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000403c8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000403f6  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003a92c  00000000  00000000  00040439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000070fe  00000000  00000000  0007ad65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ee0  00000000  00000000  00081e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002453  00000000  00000000  00084d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000c981  00000000  00000000  0008719b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00042f45  00000000  00000000  00093b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00180fe3  00000000  00000000  000d6a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000e048  00000000  00000000  00257a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00265a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240003c8 	.word	0x240003c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080200d0 	.word	0x080200d0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240003cc 	.word	0x240003cc
 800030c:	080200d0 	.word	0x080200d0

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a8 	b.w	8000ac0 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9e08      	ldr	r6, [sp, #32]
 80007fe:	460d      	mov	r5, r1
 8000800:	4604      	mov	r4, r0
 8000802:	460f      	mov	r7, r1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d14a      	bne.n	800089e <__udivmoddi4+0xa6>
 8000808:	428a      	cmp	r2, r1
 800080a:	4694      	mov	ip, r2
 800080c:	d965      	bls.n	80008da <__udivmoddi4+0xe2>
 800080e:	fab2 f382 	clz	r3, r2
 8000812:	b143      	cbz	r3, 8000826 <__udivmoddi4+0x2e>
 8000814:	fa02 fc03 	lsl.w	ip, r2, r3
 8000818:	f1c3 0220 	rsb	r2, r3, #32
 800081c:	409f      	lsls	r7, r3
 800081e:	fa20 f202 	lsr.w	r2, r0, r2
 8000822:	4317      	orrs	r7, r2
 8000824:	409c      	lsls	r4, r3
 8000826:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800082a:	fa1f f58c 	uxth.w	r5, ip
 800082e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000832:	0c22      	lsrs	r2, r4, #16
 8000834:	fb0e 7711 	mls	r7, lr, r1, r7
 8000838:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800083c:	fb01 f005 	mul.w	r0, r1, r5
 8000840:	4290      	cmp	r0, r2
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x62>
 8000844:	eb1c 0202 	adds.w	r2, ip, r2
 8000848:	f101 37ff 	add.w	r7, r1, #4294967295
 800084c:	f080 811c 	bcs.w	8000a88 <__udivmoddi4+0x290>
 8000850:	4290      	cmp	r0, r2
 8000852:	f240 8119 	bls.w	8000a88 <__udivmoddi4+0x290>
 8000856:	3902      	subs	r1, #2
 8000858:	4462      	add	r2, ip
 800085a:	1a12      	subs	r2, r2, r0
 800085c:	b2a4      	uxth	r4, r4
 800085e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000862:	fb0e 2210 	mls	r2, lr, r0, r2
 8000866:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800086a:	fb00 f505 	mul.w	r5, r0, r5
 800086e:	42a5      	cmp	r5, r4
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x90>
 8000872:	eb1c 0404 	adds.w	r4, ip, r4
 8000876:	f100 32ff 	add.w	r2, r0, #4294967295
 800087a:	f080 8107 	bcs.w	8000a8c <__udivmoddi4+0x294>
 800087e:	42a5      	cmp	r5, r4
 8000880:	f240 8104 	bls.w	8000a8c <__udivmoddi4+0x294>
 8000884:	4464      	add	r4, ip
 8000886:	3802      	subs	r0, #2
 8000888:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800088c:	1b64      	subs	r4, r4, r5
 800088e:	2100      	movs	r1, #0
 8000890:	b11e      	cbz	r6, 800089a <__udivmoddi4+0xa2>
 8000892:	40dc      	lsrs	r4, r3
 8000894:	2300      	movs	r3, #0
 8000896:	e9c6 4300 	strd	r4, r3, [r6]
 800089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089e:	428b      	cmp	r3, r1
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0xbc>
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	f000 80ed 	beq.w	8000a82 <__udivmoddi4+0x28a>
 80008a8:	2100      	movs	r1, #0
 80008aa:	e9c6 0500 	strd	r0, r5, [r6]
 80008ae:	4608      	mov	r0, r1
 80008b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b4:	fab3 f183 	clz	r1, r3
 80008b8:	2900      	cmp	r1, #0
 80008ba:	d149      	bne.n	8000950 <__udivmoddi4+0x158>
 80008bc:	42ab      	cmp	r3, r5
 80008be:	d302      	bcc.n	80008c6 <__udivmoddi4+0xce>
 80008c0:	4282      	cmp	r2, r0
 80008c2:	f200 80f8 	bhi.w	8000ab6 <__udivmoddi4+0x2be>
 80008c6:	1a84      	subs	r4, r0, r2
 80008c8:	eb65 0203 	sbc.w	r2, r5, r3
 80008cc:	2001      	movs	r0, #1
 80008ce:	4617      	mov	r7, r2
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d0e2      	beq.n	800089a <__udivmoddi4+0xa2>
 80008d4:	e9c6 4700 	strd	r4, r7, [r6]
 80008d8:	e7df      	b.n	800089a <__udivmoddi4+0xa2>
 80008da:	b902      	cbnz	r2, 80008de <__udivmoddi4+0xe6>
 80008dc:	deff      	udf	#255	; 0xff
 80008de:	fab2 f382 	clz	r3, r2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 8090 	bne.w	8000a08 <__udivmoddi4+0x210>
 80008e8:	1a8a      	subs	r2, r1, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f fe8c 	uxth.w	lr, ip
 80008f2:	2101      	movs	r1, #1
 80008f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008f8:	fb07 2015 	mls	r0, r7, r5, r2
 80008fc:	0c22      	lsrs	r2, r4, #16
 80008fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000902:	fb0e f005 	mul.w	r0, lr, r5
 8000906:	4290      	cmp	r0, r2
 8000908:	d908      	bls.n	800091c <__udivmoddi4+0x124>
 800090a:	eb1c 0202 	adds.w	r2, ip, r2
 800090e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000912:	d202      	bcs.n	800091a <__udivmoddi4+0x122>
 8000914:	4290      	cmp	r0, r2
 8000916:	f200 80cb 	bhi.w	8000ab0 <__udivmoddi4+0x2b8>
 800091a:	4645      	mov	r5, r8
 800091c:	1a12      	subs	r2, r2, r0
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb2 f0f7 	udiv	r0, r2, r7
 8000924:	fb07 2210 	mls	r2, r7, r0, r2
 8000928:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092c:	fb0e fe00 	mul.w	lr, lr, r0
 8000930:	45a6      	cmp	lr, r4
 8000932:	d908      	bls.n	8000946 <__udivmoddi4+0x14e>
 8000934:	eb1c 0404 	adds.w	r4, ip, r4
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	d202      	bcs.n	8000944 <__udivmoddi4+0x14c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f200 80bb 	bhi.w	8000aba <__udivmoddi4+0x2c2>
 8000944:	4610      	mov	r0, r2
 8000946:	eba4 040e 	sub.w	r4, r4, lr
 800094a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800094e:	e79f      	b.n	8000890 <__udivmoddi4+0x98>
 8000950:	f1c1 0720 	rsb	r7, r1, #32
 8000954:	408b      	lsls	r3, r1
 8000956:	fa22 fc07 	lsr.w	ip, r2, r7
 800095a:	ea4c 0c03 	orr.w	ip, ip, r3
 800095e:	fa05 f401 	lsl.w	r4, r5, r1
 8000962:	fa20 f307 	lsr.w	r3, r0, r7
 8000966:	40fd      	lsrs	r5, r7
 8000968:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800096c:	4323      	orrs	r3, r4
 800096e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	fb09 5518 	mls	r5, r9, r8, r5
 800097a:	0c1c      	lsrs	r4, r3, #16
 800097c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000980:	fb08 f50e 	mul.w	r5, r8, lr
 8000984:	42a5      	cmp	r5, r4
 8000986:	fa02 f201 	lsl.w	r2, r2, r1
 800098a:	fa00 f001 	lsl.w	r0, r0, r1
 800098e:	d90b      	bls.n	80009a8 <__udivmoddi4+0x1b0>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f108 3aff 	add.w	sl, r8, #4294967295
 8000998:	f080 8088 	bcs.w	8000aac <__udivmoddi4+0x2b4>
 800099c:	42a5      	cmp	r5, r4
 800099e:	f240 8085 	bls.w	8000aac <__udivmoddi4+0x2b4>
 80009a2:	f1a8 0802 	sub.w	r8, r8, #2
 80009a6:	4464      	add	r4, ip
 80009a8:	1b64      	subs	r4, r4, r5
 80009aa:	b29d      	uxth	r5, r3
 80009ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80009b0:	fb09 4413 	mls	r4, r9, r3, r4
 80009b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80009bc:	45a6      	cmp	lr, r4
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x1da>
 80009c0:	eb1c 0404 	adds.w	r4, ip, r4
 80009c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009c8:	d26c      	bcs.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ca:	45a6      	cmp	lr, r4
 80009cc:	d96a      	bls.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ce:	3b02      	subs	r3, #2
 80009d0:	4464      	add	r4, ip
 80009d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009d6:	fba3 9502 	umull	r9, r5, r3, r2
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	42ac      	cmp	r4, r5
 80009e0:	46c8      	mov	r8, r9
 80009e2:	46ae      	mov	lr, r5
 80009e4:	d356      	bcc.n	8000a94 <__udivmoddi4+0x29c>
 80009e6:	d053      	beq.n	8000a90 <__udivmoddi4+0x298>
 80009e8:	b156      	cbz	r6, 8000a00 <__udivmoddi4+0x208>
 80009ea:	ebb0 0208 	subs.w	r2, r0, r8
 80009ee:	eb64 040e 	sbc.w	r4, r4, lr
 80009f2:	fa04 f707 	lsl.w	r7, r4, r7
 80009f6:	40ca      	lsrs	r2, r1
 80009f8:	40cc      	lsrs	r4, r1
 80009fa:	4317      	orrs	r7, r2
 80009fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000a00:	4618      	mov	r0, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	f1c3 0120 	rsb	r1, r3, #32
 8000a0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a10:	fa20 f201 	lsr.w	r2, r0, r1
 8000a14:	fa25 f101 	lsr.w	r1, r5, r1
 8000a18:	409d      	lsls	r5, r3
 8000a1a:	432a      	orrs	r2, r5
 8000a1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a20:	fa1f fe8c 	uxth.w	lr, ip
 8000a24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a28:	fb07 1510 	mls	r5, r7, r0, r1
 8000a2c:	0c11      	lsrs	r1, r2, #16
 8000a2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a32:	fb00 f50e 	mul.w	r5, r0, lr
 8000a36:	428d      	cmp	r5, r1
 8000a38:	fa04 f403 	lsl.w	r4, r4, r3
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x258>
 8000a3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a46:	d22f      	bcs.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a48:	428d      	cmp	r5, r1
 8000a4a:	d92d      	bls.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	4461      	add	r1, ip
 8000a50:	1b49      	subs	r1, r1, r5
 8000a52:	b292      	uxth	r2, r2
 8000a54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a58:	fb07 1115 	mls	r1, r7, r5, r1
 8000a5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a60:	fb05 f10e 	mul.w	r1, r5, lr
 8000a64:	4291      	cmp	r1, r2
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x282>
 8000a68:	eb1c 0202 	adds.w	r2, ip, r2
 8000a6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a70:	d216      	bcs.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a72:	4291      	cmp	r1, r2
 8000a74:	d914      	bls.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a76:	3d02      	subs	r5, #2
 8000a78:	4462      	add	r2, ip
 8000a7a:	1a52      	subs	r2, r2, r1
 8000a7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a80:	e738      	b.n	80008f4 <__udivmoddi4+0xfc>
 8000a82:	4631      	mov	r1, r6
 8000a84:	4630      	mov	r0, r6
 8000a86:	e708      	b.n	800089a <__udivmoddi4+0xa2>
 8000a88:	4639      	mov	r1, r7
 8000a8a:	e6e6      	b.n	800085a <__udivmoddi4+0x62>
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	e6fb      	b.n	8000888 <__udivmoddi4+0x90>
 8000a90:	4548      	cmp	r0, r9
 8000a92:	d2a9      	bcs.n	80009e8 <__udivmoddi4+0x1f0>
 8000a94:	ebb9 0802 	subs.w	r8, r9, r2
 8000a98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	e7a3      	b.n	80009e8 <__udivmoddi4+0x1f0>
 8000aa0:	4645      	mov	r5, r8
 8000aa2:	e7ea      	b.n	8000a7a <__udivmoddi4+0x282>
 8000aa4:	462b      	mov	r3, r5
 8000aa6:	e794      	b.n	80009d2 <__udivmoddi4+0x1da>
 8000aa8:	4640      	mov	r0, r8
 8000aaa:	e7d1      	b.n	8000a50 <__udivmoddi4+0x258>
 8000aac:	46d0      	mov	r8, sl
 8000aae:	e77b      	b.n	80009a8 <__udivmoddi4+0x1b0>
 8000ab0:	3d02      	subs	r5, #2
 8000ab2:	4462      	add	r2, ip
 8000ab4:	e732      	b.n	800091c <__udivmoddi4+0x124>
 8000ab6:	4608      	mov	r0, r1
 8000ab8:	e70a      	b.n	80008d0 <__udivmoddi4+0xd8>
 8000aba:	4464      	add	r4, ip
 8000abc:	3802      	subs	r0, #2
 8000abe:	e742      	b.n	8000946 <__udivmoddi4+0x14e>

08000ac0 <__aeabi_idiv0>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <LoRA_Read_Register>:
#define RSSI_OFFSET_HF_PORT      157
#define RSSI_OFFSET_LF_PORT      164

#define MAX_PKT_LENGTH           255

uint8_t LoRA_Read_Register(uint8_t addr){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <LoRA_Read_Register+0x48>)
 8000ad6:	f008 fa93 	bl	8009000 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000ada:	1df9      	adds	r1, r7, #7
 8000adc:	2364      	movs	r3, #100	; 0x64
 8000ade:	2201      	movs	r2, #1
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <LoRA_Read_Register+0x4c>)
 8000ae2:	f00f f9d7 	bl	800fe94 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000ae6:	f107 010f 	add.w	r1, r7, #15
 8000aea:	2364      	movs	r3, #100	; 0x64
 8000aec:	2201      	movs	r2, #1
 8000aee:	4808      	ldr	r0, [pc, #32]	; (8000b10 <LoRA_Read_Register+0x4c>)
 8000af0:	f00f fbcc 	bl	801028c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000afa:	4804      	ldr	r0, [pc, #16]	; (8000b0c <LoRA_Read_Register+0x48>)
 8000afc:	f008 fa80 	bl	8009000 <HAL_GPIO_WritePin>

	return reg_value;
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	58020000 	.word	0x58020000
 8000b10:	240011bc 	.word	0x240011bc

08000b14 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	460a      	mov	r2, r1
 8000b1e:	71fb      	strb	r3, [r7, #7]
 8000b20:	4613      	mov	r3, r2
 8000b22:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <LoRA_Write_Register+0x54>)
 8000b36:	f008 fa63 	bl	8009000 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000b3a:	1df9      	adds	r1, r7, #7
 8000b3c:	2364      	movs	r3, #100	; 0x64
 8000b3e:	2201      	movs	r2, #1
 8000b40:	480a      	ldr	r0, [pc, #40]	; (8000b6c <LoRA_Write_Register+0x58>)
 8000b42:	f00f f9a7 	bl	800fe94 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000b46:	1db9      	adds	r1, r7, #6
 8000b48:	2364      	movs	r3, #100	; 0x64
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4807      	ldr	r0, [pc, #28]	; (8000b6c <LoRA_Write_Register+0x58>)
 8000b4e:	f00f f9a1 	bl	800fe94 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000b52:	2201      	movs	r2, #1
 8000b54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <LoRA_Write_Register+0x54>)
 8000b5a:	f008 fa51 	bl	8009000 <HAL_GPIO_WritePin>

}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	58020000 	.word	0x58020000
 8000b6c:	240011bc 	.word	0x240011bc

08000b70 <LoRA_sleep>:


void LoRA_sleep(void){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	2001      	movs	r0, #1
 8000b78:	f7ff ffcc 	bl	8000b14 <LoRA_Write_Register>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000b80:	b5b0      	push	{r4, r5, r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	17c8      	asrs	r0, r1, #31
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	4603      	mov	r3, r0
 8000b90:	1355      	asrs	r5, r2, #13
 8000b92:	04d4      	lsls	r4, r2, #19
 8000b94:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <LoRA_set_frequency+0x78>)
 8000b96:	f04f 0300 	mov.w	r3, #0
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	4629      	mov	r1, r5
 8000b9e:	f7ff fddb 	bl	8000758 <__aeabi_uldivmod>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000baa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bae:	f04f 0200 	mov.w	r2, #0
 8000bb2:	f04f 0300 	mov.w	r3, #0
 8000bb6:	0c02      	lsrs	r2, r0, #16
 8000bb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bbc:	0c0b      	lsrs	r3, r1, #16
 8000bbe:	b2d3      	uxtb	r3, r2
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	2006      	movs	r0, #6
 8000bc4:	f7ff ffa6 	bl	8000b14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000bc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bcc:	f04f 0200 	mov.w	r2, #0
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	0a02      	lsrs	r2, r0, #8
 8000bd6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000bda:	0a0b      	lsrs	r3, r1, #8
 8000bdc:	b2d3      	uxtb	r3, r2
 8000bde:	4619      	mov	r1, r3
 8000be0:	2007      	movs	r0, #7
 8000be2:	f7ff ff97 	bl	8000b14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000be6:	7a3b      	ldrb	r3, [r7, #8]
 8000be8:	4619      	mov	r1, r3
 8000bea:	2008      	movs	r0, #8
 8000bec:	f7ff ff92 	bl	8000b14 <LoRA_Write_Register>
}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bf8:	01e84800 	.word	0x01e84800

08000bfc <LoRA_idle>:

void LoRA_idle(){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000c00:	2181      	movs	r1, #129	; 0x81
 8000c02:	2001      	movs	r0, #1
 8000c04:	f7ff ff86 	bl	8000b14 <LoRA_Write_Register>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000c16:	231b      	movs	r3, #27
 8000c18:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b78      	cmp	r3, #120	; 0x78
 8000c1e:	d809      	bhi.n	8000c34 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	3b2d      	subs	r3, #45	; 0x2d
 8000c24:	4a11      	ldr	r2, [pc, #68]	; (8000c6c <LoRA_setOCP+0x60>)
 8000c26:	fb82 1203 	smull	r1, r2, r2, r3
 8000c2a:	1052      	asrs	r2, r2, #1
 8000c2c:	17db      	asrs	r3, r3, #31
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	73fb      	strb	r3, [r7, #15]
 8000c32:	e00b      	b.n	8000c4c <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2bf0      	cmp	r3, #240	; 0xf0
 8000c38:	d808      	bhi.n	8000c4c <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	331e      	adds	r3, #30
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <LoRA_setOCP+0x60>)
 8000c40:	fb82 1203 	smull	r1, r2, r2, r3
 8000c44:	1092      	asrs	r2, r2, #2
 8000c46:	17db      	asrs	r3, r3, #31
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	f003 031f 	and.w	r3, r3, #31
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f043 0320 	orr.w	r3, r3, #32
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	200b      	movs	r0, #11
 8000c5e:	f7ff ff59 	bl	8000b14 <LoRA_Write_Register>
}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	66666667 	.word	0x66666667

08000c70 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b11      	cmp	r3, #17
 8000c7c:	dd0f      	ble.n	8000c9e <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b14      	cmp	r3, #20
 8000c82:	dd01      	ble.n	8000c88 <LoRA_setTxPower+0x18>
        level = 20;
 8000c84:	2314      	movs	r3, #20
 8000c86:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b03      	subs	r3, #3
 8000c8c:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000c8e:	2187      	movs	r1, #135	; 0x87
 8000c90:	204d      	movs	r0, #77	; 0x4d
 8000c92:	f7ff ff3f 	bl	8000b14 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000c96:	208c      	movs	r0, #140	; 0x8c
 8000c98:	f7ff ffb8 	bl	8000c0c <LoRA_setOCP>
 8000c9c:	e00b      	b.n	8000cb6 <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	dc01      	bgt.n	8000ca8 <LoRA_setTxPower+0x38>
        level = 2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000ca8:	2184      	movs	r1, #132	; 0x84
 8000caa:	204d      	movs	r0, #77	; 0x4d
 8000cac:	f7ff ff32 	bl	8000b14 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000cb0:	2064      	movs	r0, #100	; 0x64
 8000cb2:	f7ff ffab 	bl	8000c0c <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2009      	movs	r0, #9
 8000ccc:	f7ff ff22 	bl	8000b14 <LoRA_Write_Register>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000cdc:	201d      	movs	r0, #29
 8000cde:	f7ff fef1 	bl	8000ac4 <LoRA_Read_Register>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	f023 0301 	bic.w	r3, r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4619      	mov	r1, r3
 8000cec:	201d      	movs	r0, #29
 8000cee:	f7ff ff11 	bl	8000b14 <LoRA_Write_Register>
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <LoRA_begin>:

void LoRA_begin(long frequency){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b09c      	sub	sp, #112	; 0x70
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2101      	movs	r1, #1
 8000d04:	4822      	ldr	r0, [pc, #136]	; (8000d90 <LoRA_begin+0x98>)
 8000d06:	f008 f97b 	bl	8009000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d10:	4820      	ldr	r0, [pc, #128]	; (8000d94 <LoRA_begin+0x9c>)
 8000d12:	f008 f975 	bl	8009000 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000d16:	2042      	movs	r0, #66	; 0x42
 8000d18:	f7ff fed4 	bl	8000ac4 <LoRA_Read_Register>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000d22:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	491b      	ldr	r1, [pc, #108]	; (8000d98 <LoRA_begin+0xa0>)
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f01b f9bb 	bl	801c0a8 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fb4a 	bl	80003d0 <strlen>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f019 fe5b 	bl	801aa00 <CDC_Transmit_HS>

	LoRA_sleep();
 8000d4a:	f7ff ff11 	bl	8000b70 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000d4e:	4813      	ldr	r0, [pc, #76]	; (8000d9c <LoRA_begin+0xa4>)
 8000d50:	f7ff ff16 	bl	8000b80 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000d54:	2100      	movs	r1, #0
 8000d56:	200f      	movs	r0, #15
 8000d58:	f7ff fedc 	bl	8000b14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	200e      	movs	r0, #14
 8000d60:	f7ff fed8 	bl	8000b14 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000d64:	200c      	movs	r0, #12
 8000d66:	f7ff fead 	bl	8000ac4 <LoRA_Read_Register>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	f043 0303 	orr.w	r3, r3, #3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	200c      	movs	r0, #12
 8000d76:	f7ff fecd 	bl	8000b14 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	2026      	movs	r0, #38	; 0x26
 8000d7e:	f7ff fec9 	bl	8000b14 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000d82:	2011      	movs	r0, #17
 8000d84:	f7ff ff74 	bl	8000c70 <LoRA_setTxPower>

}
 8000d88:	bf00      	nop
 8000d8a:	3770      	adds	r7, #112	; 0x70
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	58020c00 	.word	0x58020c00
 8000d94:	58020000 	.word	0x58020000
 8000d98:	080200e8 	.word	0x080200e8
 8000d9c:	33bca100 	.word	0x33bca100

08000da0 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000da4:	f7ff ff98 	bl	8000cd8 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000da8:	2100      	movs	r1, #0
 8000daa:	200d      	movs	r0, #13
 8000dac:	f7ff feb2 	bl	8000b14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000db0:	2100      	movs	r1, #0
 8000db2:	2022      	movs	r0, #34	; 0x22
 8000db4:	f7ff feae 	bl	8000b14 <LoRA_Write_Register>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <LoRA_endPacket>:

void LoRA_endPacket(){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8000dc0:	2183      	movs	r1, #131	; 0x83
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f7ff fea6 	bl	8000b14 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8000dc8:	bf00      	nop
 8000dca:	2012      	movs	r0, #18
 8000dcc:	f7ff fe7a 	bl	8000ac4 <LoRA_Read_Register>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0f7      	beq.n	8000dca <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000dda:	2185      	movs	r1, #133	; 0x85
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff fe99 	bl	8000b14 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8000de2:	2108      	movs	r1, #8
 8000de4:	2012      	movs	r0, #18
 8000de6:	f7ff fe95 	bl	8000b14 <LoRA_Write_Register>

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}

08000dee <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000df8:	2012      	movs	r0, #18
 8000dfa:	f7ff fe63 	bl	8000ac4 <LoRA_Read_Register>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8000e02:	f7ff ff69 	bl	8000cd8 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	2012      	movs	r0, #18
 8000e0e:	f7ff fe81 	bl	8000b14 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d016      	beq.n	8000e4a <LoRA_parsePacket+0x5c>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	f003 0320 	and.w	r3, r3, #32
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d111      	bne.n	8000e4a <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 8000e26:	2013      	movs	r0, #19
 8000e28:	f7ff fe4c 	bl	8000ac4 <LoRA_Read_Register>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8000e30:	2010      	movs	r0, #16
 8000e32:	f7ff fe47 	bl	8000ac4 <LoRA_Read_Register>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4619      	mov	r1, r3
 8000e3a:	200d      	movs	r0, #13
 8000e3c:	f7ff fe6a 	bl	8000b14 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000e40:	2185      	movs	r1, #133	; 0x85
 8000e42:	2001      	movs	r0, #1
 8000e44:	f7ff fe66 	bl	8000b14 <LoRA_Write_Register>
 8000e48:	e00d      	b.n	8000e66 <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f7ff fe3a 	bl	8000ac4 <LoRA_Read_Register>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b85      	cmp	r3, #133	; 0x85
 8000e54:	d007      	beq.n	8000e66 <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000e56:	2100      	movs	r1, #0
 8000e58:	200d      	movs	r0, #13
 8000e5a:	f7ff fe5b 	bl	8000b14 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000e5e:	2185      	movs	r1, #133	; 0x85
 8000e60:	2001      	movs	r0, #1
 8000e62:	f7ff fe57 	bl	8000b14 <LoRA_Write_Register>
	}
	return packetLenght;
 8000e66:	687b      	ldr	r3, [r7, #4]

}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 8000e70:	b5b0      	push	{r4, r5, r7, lr}
 8000e72:	b0c4      	sub	sp, #272	; 0x110
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e7e:	6018      	str	r0, [r3, #0]
	LoRA_idle();
 8000e80:	f7ff febc 	bl	8000bfc <LoRA_idle>

	char debug[MAX_PKT_LENGTH];
	if(recv_packet(debug, MAX_PKT_LENGTH)) {
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	21ff      	movs	r1, #255	; 0xff
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f878 	bl	8000f80 <recv_packet>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d022      	beq.n	8000edc <LoRA_sendPacket+0x6c>
		HAL_Delay(100);
 8000e96:	2064      	movs	r0, #100	; 0x64
 8000e98:	f003 f9b4 	bl	8004204 <HAL_Delay>
		strcat(debug, " was thrown away");
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fa95 	bl	80003d0 <strlen>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a32      	ldr	r2, [pc, #200]	; (8000f7c <LoRA_sendPacket+0x10c>)
 8000eb2:	461d      	mov	r5, r3
 8000eb4:	4614      	mov	r4, r2
 8000eb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eb8:	6028      	str	r0, [r5, #0]
 8000eba:	6069      	str	r1, [r5, #4]
 8000ebc:	60aa      	str	r2, [r5, #8]
 8000ebe:	60eb      	str	r3, [r5, #12]
 8000ec0:	7823      	ldrb	r3, [r4, #0]
 8000ec2:	742b      	strb	r3, [r5, #16]
		CDC_Transmit_HS(debug, strlen(debug));
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fa81 	bl	80003d0 <strlen>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f019 fd92 	bl	801aa00 <CDC_Transmit_HS>
	}



	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000edc:	2012      	movs	r0, #18
 8000ede:	f7ff fdf1 	bl	8000ac4 <LoRA_Read_Register>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 8000ee8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d005      	beq.n	8000f00 <LoRA_sendPacket+0x90>
 8000ef4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000ef8:	f003 0320 	and.w	r3, r3, #32
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d033      	beq.n	8000f68 <LoRA_sendPacket+0xf8>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 8000f00:	f7ff ff4e 	bl	8000da0 <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000f0a:	e011      	b.n	8000f30 <LoRA_sendPacket+0xc0>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 8000f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f10:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f14:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000f18:	6812      	ldr	r2, [r2, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff fdf7 	bl	8000b14 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 8000f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000f30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	f7ff fa49 	bl	80003d0 <strlen>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8e1      	bhi.n	8000f0c <LoRA_sendPacket+0x9c>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8000f48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	f7ff fa3d 	bl	80003d0 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	2022      	movs	r0, #34	; 0x22
 8000f5e:	f7ff fdd9 	bl	8000b14 <LoRA_Write_Register>
    	LoRA_endPacket();
 8000f62:	f7ff ff2b 	bl	8000dbc <LoRA_endPacket>
 8000f66:	e004      	b.n	8000f72 <LoRA_sendPacket+0x102>
    	HAL_Delay(100);
    	CDC_Transmit_HS(sent, strlen(sent));*/
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000f68:	2185      	movs	r1, #133	; 0x85
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f7ff fdd2 	bl	8000b14 <LoRA_Write_Register>
	}
	/*char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
	HAL_Delay(100);
	CDC_Transmit_HS(sent, strlen(sent));*/
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f7c:	080200ec 	.word	0x080200ec

08000f80 <recv_packet>:

int recv_packet(char* LoRA_data, int max_length)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 8000f8a:	f7ff ff30 	bl	8000dee <LoRA_parsePacket>
 8000f8e:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dc01      	bgt.n	8000f9c <recv_packet+0x1c>
  {
    return 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e01c      	b.n	8000fd6 <recv_packet+0x56>
  }
  if(packet_length){
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d018      	beq.n	8000fd4 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	e00a      	b.n	8000fbe <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	18d4      	adds	r4, r2, r3
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f7ff fd88 	bl	8000ac4 <LoRA_Read_Register>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	dbf0      	blt.n	8000fa8 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]

    /*char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
    CDC_Transmit_HS(rec, strlen(rec));*/
    return packet_length;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	e000      	b.n	8000fd6 <recv_packet+0x56>
  }
  else{
    return 0;
 8000fd4:	2300      	movs	r3, #0
  }
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd90      	pop	{r4, r7, pc}

08000fde <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 8000fde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	466b      	mov	r3, sp
 8000fea:	461e      	mov	r6, r3
	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff f9ef 	bl	80003d0 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	82fb      	strh	r3, [r7, #22]
	char acknowledge[length];
 8000ffa:	8af9      	ldrh	r1, [r7, #22]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	3b01      	subs	r3, #1
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	b28b      	uxth	r3, r1
 8001004:	2200      	movs	r2, #0
 8001006:	4698      	mov	r8, r3
 8001008:	4691      	mov	r9, r2
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800101a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800101e:	b28b      	uxth	r3, r1
 8001020:	2200      	movs	r2, #0
 8001022:	461c      	mov	r4, r3
 8001024:	4615      	mov	r5, r2
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	00eb      	lsls	r3, r5, #3
 8001030:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001034:	00e2      	lsls	r2, r4, #3
 8001036:	460b      	mov	r3, r1
 8001038:	3307      	adds	r3, #7
 800103a:	08db      	lsrs	r3, r3, #3
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	ebad 0d03 	sub.w	sp, sp, r3
 8001042:	466b      	mov	r3, sp
 8001044:	3300      	adds	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
	uint32_t lastTime = HAL_GetTick();
 8001048:	f003 f8d0 	bl	80041ec <HAL_GetTick>
 800104c:	61f8      	str	r0, [r7, #28]
	uint32_t wait_time = rand_range(3, 13)*100;
 800104e:	210d      	movs	r1, #13
 8001050:	2003      	movs	r0, #3
 8001052:	f001 fc73 	bl	800293c <rand_range>
 8001056:	4603      	mov	r3, r0
 8001058:	2264      	movs	r2, #100	; 0x64
 800105a:	fb02 f303 	mul.w	r3, r2, r3
 800105e:	61bb      	str	r3, [r7, #24]
	LoRA_sendPacket(LoRA_data);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff05 	bl	8000e70 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 8001066:	8afb      	ldrh	r3, [r7, #22]
 8001068:	4619      	mov	r1, r3
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f7ff ff88 	bl	8000f80 <recv_packet>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d009      	beq.n	800108a <reliable_send_packet+0xac>

			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f7ff f949 	bl	8000310 <strcmp>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d01a      	beq.n	80010ba <reliable_send_packet+0xdc>
				LoRA_sendPacket(LoRA_data);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff fef3 	bl	8000e70 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > wait_time) {
 800108a:	f003 f8af 	bl	80041ec <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	429a      	cmp	r2, r3
 8001098:	d2e5      	bcs.n	8001066 <reliable_send_packet+0x88>
	    	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
			wait_time = rand_range(3, 13)*100;
 800109a:	210d      	movs	r1, #13
 800109c:	2003      	movs	r0, #3
 800109e:	f001 fc4d 	bl	800293c <rand_range>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2264      	movs	r2, #100	; 0x64
 80010a6:	fb02 f303 	mul.w	r3, r2, r3
 80010aa:	61bb      	str	r3, [r7, #24]
			LoRA_sendPacket(LoRA_data);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff fedf 	bl	8000e70 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 80010b2:	f003 f89b 	bl	80041ec <HAL_GetTick>
 80010b6:	61f8      	str	r0, [r7, #28]
		if (recv_packet(acknowledge, length)) {
 80010b8:	e7d5      	b.n	8001066 <reliable_send_packet+0x88>
				break;
 80010ba:	bf00      	nop
 80010bc:	46b5      	mov	sp, r6
		}
	}
}
 80010be:	bf00      	nop
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080010c8 <communicationHandler>:
#include "communication_protocol.h"
#include "LoRA.h"

void communicationHandler(void reliableReceiveHandle(char*), void streamReceiveHandle(char*), char* streamSendHandle(int), struct ReliableSendConfig reliableSendHandle(), int initial_communication_state) {
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	f507 744e 	add.w	r4, r7, #824	; 0x338
 80010d4:	f5a4 744b 	sub.w	r4, r4, #812	; 0x32c
 80010d8:	6020      	str	r0, [r4, #0]
 80010da:	f507 704e 	add.w	r0, r7, #824	; 0x338
 80010de:	f5a0 704c 	sub.w	r0, r0, #816	; 0x330
 80010e2:	6001      	str	r1, [r0, #0]
 80010e4:	f507 714e 	add.w	r1, r7, #824	; 0x338
 80010e8:	f5a1 714d 	sub.w	r1, r1, #820	; 0x334
 80010ec:	600a      	str	r2, [r1, #0]
 80010ee:	f507 724e 	add.w	r2, r7, #824	; 0x338
 80010f2:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 80010f6:	6013      	str	r3, [r2, #0]
  //from here it's okay
  int communication_state = initial_communication_state;
 80010f8:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80010fc:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
  int max_packet_count = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
  char previous_packet[MAX_PKT_LENGTH] = "";
 8001106:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800110a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	3304      	adds	r3, #4
 8001114:	22fb      	movs	r2, #251	; 0xfb
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f01b f856 	bl	801c1ca <memset>
  char received_packet[MAX_PKT_LENGTH] = "";
 800111e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001122:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	3304      	adds	r3, #4
 800112c:	22fb      	movs	r2, #251	; 0xfb
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f01b f84a 	bl	801c1ca <memset>
  char general_buffer[MAX_PKT_LENGTH] = "";
 8001136:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800113a:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	3304      	adds	r3, #4
 8001144:	22fb      	movs	r2, #251	; 0xfb
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f01b f83e 	bl	801c1ca <memset>
  uint32_t previousTime = HAL_GetTick();
 800114e:	f003 f84d 	bl	80041ec <HAL_GetTick>
 8001152:	4603      	mov	r3, r0
 8001154:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
  uint32_t wait_time = rand_range(3, 13)*100;
 8001158:	210d      	movs	r1, #13
 800115a:	2003      	movs	r0, #3
 800115c:	f001 fbee 	bl	800293c <rand_range>
 8001160:	4603      	mov	r3, r0
 8001162:	2264      	movs	r2, #100	; 0x64
 8001164:	fb02 f303 	mul.w	r3, r2, r3
 8001168:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c

  while (1) {
      if(communication_state == RECEIVING_RELIABLE)
 800116c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001170:	2b00      	cmp	r3, #0
 8001172:	d151      	bne.n	8001218 <communicationHandler+0x150>
      {
        if(recv_packet(received_packet, MAX_PKT_LENGTH))
 8001174:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001178:	21ff      	movs	r1, #255	; 0xff
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff00 	bl	8000f80 <recv_packet>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f2      	beq.n	800116c <communicationHandler+0xa4>
        {
          previousTime = HAL_GetTick();
 8001186:	f003 f831 	bl	80041ec <HAL_GetTick>
 800118a:	4603      	mov	r3, r0
 800118c:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330

          if(strcmp(received_packet, "$") == 0)
 8001190:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001194:	49cd      	ldr	r1, [pc, #820]	; (80014cc <communicationHandler+0x404>)
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f8ba 	bl	8000310 <strcmp>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d103      	bne.n	80011aa <communicationHandler+0xe2>
          {
            communication_state = SENDING_RELIABLE;
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 80011a8:	e7e0      	b.n	800116c <communicationHandler+0xa4>
          }
          else if(sscanf(received_packet, "! %d", &max_packet_count) == 1)
 80011aa:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80011ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80011b2:	49c7      	ldr	r1, [pc, #796]	; (80014d0 <communicationHandler+0x408>)
 80011b4:	4618      	mov	r0, r3
 80011b6:	f01a ff97 	bl	801c0e8 <siscanf>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d103      	bne.n	80011c8 <communicationHandler+0x100>
          {
            communication_state = SENDING_STREAM;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 80011c6:	e7d1      	b.n	800116c <communicationHandler+0xa4>
          }
          else if(strcmp(received_packet, previous_packet)==0)
 80011c8:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80011cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f89c 	bl	8000310 <strcmp>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d105      	bne.n	80011ea <communicationHandler+0x122>
          {
            //send acknowledge again
            LoRA_sendPacket(received_packet);
 80011de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fe44 	bl	8000e70 <LoRA_sendPacket>
 80011e8:	e7c0      	b.n	800116c <communicationHandler+0xa4>
          }
          else
          {
        	//send acknowledge
            strcpy(previous_packet, received_packet);
 80011ea:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80011ee:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f01b f868 	bl	801c2ca <strcpy>
            LoRA_sendPacket(received_packet);
 80011fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fe36 	bl	8000e70 <LoRA_sendPacket>

            reliableReceiveHandle(received_packet);
 8001204:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001208:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800120c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4610      	mov	r0, r2
 8001214:	4798      	blx	r3
 8001216:	e7a9      	b.n	800116c <communicationHandler+0xa4>

          }
        }
      }
      else if(communication_state == RECEIVING_STREAM)
 8001218:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800121c:	2b01      	cmp	r3, #1
 800121e:	d14d      	bne.n	80012bc <communicationHandler+0x1f4>
      {
        if(recv_packet(received_packet, MAX_PKT_LENGTH))
 8001220:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001224:	21ff      	movs	r1, #255	; 0xff
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff feaa 	bl	8000f80 <recv_packet>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d01b      	beq.n	800126a <communicationHandler+0x1a2>
        {
          previousTime = HAL_GetTick();
 8001232:	f002 ffdb 	bl	80041ec <HAL_GetTick>
 8001236:	4603      	mov	r3, r0
 8001238:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
          if(strcmp(received_packet, "$") == 0)
 800123c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001240:	49a2      	ldr	r1, [pc, #648]	; (80014cc <communicationHandler+0x404>)
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f864 	bl	8000310 <strcmp>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d103      	bne.n	8001256 <communicationHandler+0x18e>
          {
            communication_state = SENDING_RELIABLE;
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8001254:	e78a      	b.n	800116c <communicationHandler+0xa4>
          }
          else
          {
        	streamReceiveHandle(received_packet);
 8001256:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800125a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800125e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4610      	mov	r0, r2
 8001266:	4798      	blx	r3
 8001268:	e780      	b.n	800116c <communicationHandler+0xa4>
          }
        }
        else if(HAL_GetTick()-previousTime > wait_time)
 800126a:	f002 ffbf 	bl	80041ec <HAL_GetTick>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 800127c:	429a      	cmp	r2, r3
 800127e:	f4bf af75 	bcs.w	800116c <communicationHandler+0xa4>
        {
          wait_time = rand_range(3, 13)*100;
 8001282:	210d      	movs	r1, #13
 8001284:	2003      	movs	r0, #3
 8001286:	f001 fb59 	bl	800293c <rand_range>
 800128a:	4603      	mov	r3, r0
 800128c:	2264      	movs	r2, #100	; 0x64
 800128e:	fb02 f303 	mul.w	r3, r2, r3
 8001292:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
          previousTime = HAL_GetTick();
 8001296:	f002 ffa9 	bl	80041ec <HAL_GetTick>
 800129a:	4603      	mov	r3, r0
 800129c:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
          //give up SENDING
          sprintf(general_buffer, "! %d", max_packet_count);
 80012a0:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	4989      	ldr	r1, [pc, #548]	; (80014d0 <communicationHandler+0x408>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	f01a fefc 	bl	801c0a8 <siprintf>
          LoRA_sendPacket(general_buffer);
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fddb 	bl	8000e70 <LoRA_sendPacket>
 80012ba:	e757      	b.n	800116c <communicationHandler+0xa4>
        }
      }
      else if(communication_state == SENDING_STREAM)
 80012bc:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d11f      	bne.n	8001304 <communicationHandler+0x23c>
      {
        if(max_packet_count == 0)
 80012c4:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d106      	bne.n	80012da <communicationHandler+0x212>
        {
          communication_state = TRANSITIONING;
 80012cc:	2304      	movs	r3, #4
 80012ce:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
          LoRA_sendPacket("$");
 80012d2:	487e      	ldr	r0, [pc, #504]	; (80014cc <communicationHandler+0x404>)
 80012d4:	f7ff fdcc 	bl	8000e70 <LoRA_sendPacket>
 80012d8:	e748      	b.n	800116c <communicationHandler+0xa4>
        }
        else
        {
          //send whatever
          char* msg = streamSendHandle(max_packet_count);
 80012da:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 80012de:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80012e2:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4610      	mov	r0, r2
 80012ea:	4798      	blx	r3
 80012ec:	f8c7 0324 	str.w	r0, [r7, #804]	; 0x324
          LoRA_sendPacket(msg);
 80012f0:	f8d7 0324 	ldr.w	r0, [r7, #804]	; 0x324
 80012f4:	f7ff fdbc 	bl	8000e70 <LoRA_sendPacket>
          max_packet_count--;
 80012f8:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80012fc:	3b01      	subs	r3, #1
 80012fe:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8001302:	e733      	b.n	800116c <communicationHandler+0xa4>
        }

      }
      else if(communication_state == SENDING_RELIABLE)
 8001304:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001308:	2b02      	cmp	r3, #2
 800130a:	f040 8091 	bne.w	8001430 <communicationHandler+0x368>
      {
        reliable_send_packet("*");
 800130e:	4871      	ldr	r0, [pc, #452]	; (80014d4 <communicationHandler+0x40c>)
 8001310:	f7ff fe65 	bl	8000fde <reliable_send_packet>
        struct ReliableSendConfig config = reliableSendHandle();
 8001314:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001318:	f5a3 724a 	sub.w	r2, r3, #808	; 0x328
 800131c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001320:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4610      	mov	r0, r2
 8001328:	4798      	blx	r3
        for(int i = 0; i < config.messages_count; i++)
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8001330:	e040      	b.n	80013b4 <communicationHandler+0x2ec>
        {
        	if(config.messages[i][0] == '$' || config.messages[i][0] == '*' || config.messages[i][0] == '!')
 8001332:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001336:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b24      	cmp	r3, #36	; 0x24
 800134a:	d019      	beq.n	8001380 <communicationHandler+0x2b8>
 800134c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001350:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b2a      	cmp	r3, #42	; 0x2a
 8001364:	d00c      	beq.n	8001380 <communicationHandler+0x2b8>
 8001366:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800136a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b21      	cmp	r3, #33	; 0x21
 800137e:	d107      	bne.n	8001390 <communicationHandler+0x2c8>
        	{
        		HAL_Delay(100);
 8001380:	2064      	movs	r0, #100	; 0x64
 8001382:	f002 ff3f 	bl	8004204 <HAL_Delay>
        		CDC_Transmit_HS("Can't send control commands! ('$', '*', '!')\n", strlen("Can't send control commands! ('$', '*', '!')\n"));
 8001386:	212d      	movs	r1, #45	; 0x2d
 8001388:	4853      	ldr	r0, [pc, #332]	; (80014d8 <communicationHandler+0x410>)
 800138a:	f019 fb39 	bl	801aa00 <CDC_Transmit_HS>
        	{
 800138e:	e00c      	b.n	80013aa <communicationHandler+0x2e2>
        	}
        	else
        	{
        		reliable_send_packet(config.messages[i]);
 8001390:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001394:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fe1a 	bl	8000fde <reliable_send_packet>
        for(int i = 0; i < config.messages_count; i++)
 80013aa:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80013ae:	3301      	adds	r3, #1
 80013b0:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 80013b4:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80013b8:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 80013c2:	429a      	cmp	r2, r3
 80013c4:	dbb5      	blt.n	8001332 <communicationHandler+0x26a>
        	}
        }
        if(config.mode==RECEIVING_STREAM)
 80013c6:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80013ca:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d117      	bne.n	8001404 <communicationHandler+0x33c>
        {
          communication_state = RECEIVING_STREAM;
 80013d4:	2301      	movs	r3, #1
 80013d6:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
          max_packet_count = config.streamable_packets;
 80013da:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80013de:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
          sprintf(general_buffer, "! %d", max_packet_count);
 80013e8:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 80013ec:	f107 0320 	add.w	r3, r7, #32
 80013f0:	4937      	ldr	r1, [pc, #220]	; (80014d0 <communicationHandler+0x408>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f01a fe58 	bl	801c0a8 <siprintf>
          LoRA_sendPacket(general_buffer);
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fd37 	bl	8000e70 <LoRA_sendPacket>
 8001402:	e6b3      	b.n	800116c <communicationHandler+0xa4>
        }
        else if(config.mode==RECEIVING_RELIABLE)
 8001404:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001408:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <communicationHandler+0x358>
        {
          communication_state = TRANSITIONING;
 8001412:	2304      	movs	r3, #4
 8001414:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
          LoRA_sendPacket("$");
 8001418:	482c      	ldr	r0, [pc, #176]	; (80014cc <communicationHandler+0x404>)
 800141a:	f7ff fd29 	bl	8000e70 <LoRA_sendPacket>
 800141e:	e6a5      	b.n	800116c <communicationHandler+0xa4>
        }
        else
        {
            HAL_Delay(100);
 8001420:	2064      	movs	r0, #100	; 0x64
 8001422:	f002 feef 	bl	8004204 <HAL_Delay>
        	CDC_Transmit_HS("Shouldn't try to transition to this mode.\n", strlen("Shouldn't try to transition to this mode.\n"));
 8001426:	212a      	movs	r1, #42	; 0x2a
 8001428:	482c      	ldr	r0, [pc, #176]	; (80014dc <communicationHandler+0x414>)
 800142a:	f019 fae9 	bl	801aa00 <CDC_Transmit_HS>
 800142e:	e69d      	b.n	800116c <communicationHandler+0xa4>
        }
      }
      else if(communication_state == TRANSITIONING)
 8001430:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001434:	2b04      	cmp	r3, #4
 8001436:	f47f ae99 	bne.w	800116c <communicationHandler+0xa4>
      {

          if(recv_packet(received_packet, MAX_PKT_LENGTH))
 800143a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800143e:	21ff      	movs	r1, #255	; 0xff
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fd9d 	bl	8000f80 <recv_packet>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d01f      	beq.n	800148c <communicationHandler+0x3c4>
          {
            previousTime = HAL_GetTick();
 800144c:	f002 fece 	bl	80041ec <HAL_GetTick>
 8001450:	4603      	mov	r3, r0
 8001452:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
            if(strcmp(received_packet, "*")==0)
 8001456:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800145a:	491e      	ldr	r1, [pc, #120]	; (80014d4 <communicationHandler+0x40c>)
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe ff57 	bl	8000310 <strcmp>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	f47f ae81 	bne.w	800116c <communicationHandler+0xa4>
            {
              strcpy(previous_packet, received_packet);
 800146a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800146e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f01a ff28 	bl	801c2ca <strcpy>
              communication_state = RECEIVING_RELIABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
              LoRA_sendPacket(received_packet);
 8001480:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fcf3 	bl	8000e70 <LoRA_sendPacket>
 800148a:	e66f      	b.n	800116c <communicationHandler+0xa4>
            }
          }
          else if (HAL_GetTick()-previousTime > wait_time)
 800148c:	f002 feae 	bl	80041ec <HAL_GetTick>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 800149e:	429a      	cmp	r2, r3
 80014a0:	f4bf ae64 	bcs.w	800116c <communicationHandler+0xa4>
          {
            wait_time = rand_range(3, 13)*100;
 80014a4:	210d      	movs	r1, #13
 80014a6:	2003      	movs	r0, #3
 80014a8:	f001 fa48 	bl	800293c <rand_range>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2264      	movs	r2, #100	; 0x64
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
            previousTime = HAL_GetTick();
 80014b8:	f002 fe98 	bl	80041ec <HAL_GetTick>
 80014bc:	4603      	mov	r3, r0
 80014be:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
            LoRA_sendPacket("$");
 80014c2:	4802      	ldr	r0, [pc, #8]	; (80014cc <communicationHandler+0x404>)
 80014c4:	f7ff fcd4 	bl	8000e70 <LoRA_sendPacket>
      if(communication_state == RECEIVING_RELIABLE)
 80014c8:	e650      	b.n	800116c <communicationHandler+0xa4>
 80014ca:	bf00      	nop
 80014cc:	08020100 	.word	0x08020100
 80014d0:	08020104 	.word	0x08020104
 80014d4:	0802010c 	.word	0x0802010c
 80014d8:	08020110 	.word	0x08020110
 80014dc:	08020140 	.word	0x08020140

080014e0 <setServo>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;

void setServo(int servoNum, float angle) {
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal = (int) (3000 + (4000 * (angle / 100)));
 80014ec:	ed97 7a00 	vldr	s14, [r7]
 80014f0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001560 <setServo+0x80>
 80014f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001564 <setServo+0x84>
 80014fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001500:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001568 <setServo+0x88>
 8001504:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800150c:	ee17 3a90 	vmov	r3, s15
 8001510:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3b01      	subs	r3, #1
 8001516:	2b03      	cmp	r3, #3
 8001518:	d81a      	bhi.n	8001550 <setServo+0x70>
 800151a:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <setServo+0x40>)
 800151c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001520:	08001531 	.word	0x08001531
 8001524:	08001539 	.word	0x08001539
 8001528:	08001541 	.word	0x08001541
 800152c:	08001549 	.word	0x08001549
	case 1:
		TIM4->CCR4 = timerVal;
 8001530:	4a0e      	ldr	r2, [pc, #56]	; (800156c <setServo+0x8c>)
 8001532:	89fb      	ldrh	r3, [r7, #14]
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001536:	e00c      	b.n	8001552 <setServo+0x72>
	case 2:
		TIM4->CCR3 = timerVal;
 8001538:	4a0c      	ldr	r2, [pc, #48]	; (800156c <setServo+0x8c>)
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800153e:	e008      	b.n	8001552 <setServo+0x72>
	case 3:
		TIM4->CCR2 = timerVal;
 8001540:	4a0a      	ldr	r2, [pc, #40]	; (800156c <setServo+0x8c>)
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001546:	e004      	b.n	8001552 <setServo+0x72>
	case 4:
		TIM4->CCR1 = timerVal;
 8001548:	4a08      	ldr	r2, [pc, #32]	; (800156c <setServo+0x8c>)
 800154a:	89fb      	ldrh	r3, [r7, #14]
 800154c:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 800154e:	e000      	b.n	8001552 <setServo+0x72>

	default:
		break;
 8001550:	bf00      	nop
	}
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	42c80000 	.word	0x42c80000
 8001564:	457a0000 	.word	0x457a0000
 8001568:	453b8000 	.word	0x453b8000
 800156c:	40000800 	.word	0x40000800

08001570 <setLEDs>:

void setLEDs(void) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b08e      	sub	sp, #56	; 0x38
 8001574:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8001576:	2300      	movs	r3, #0
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
 800157a:	e181      	b.n	8001880 <setLEDs+0x310>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 800157c:	4aa1      	ldr	r2, [pc, #644]	; (8001804 <setLEDs+0x294>)
 800157e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001580:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001584:	2b03      	cmp	r3, #3
 8001586:	f200 8177 	bhi.w	8001878 <setLEDs+0x308>
 800158a:	a201      	add	r2, pc, #4	; (adr r2, 8001590 <setLEDs+0x20>)
 800158c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001590:	080015a1 	.word	0x080015a1
 8001594:	08001651 	.word	0x08001651
 8001598:	08001701 	.word	0x08001701
 800159c:	080017b1 	.word	0x080017b1
		case 0:
			for (int j = 0; j < 3; j++) {
 80015a0:	2300      	movs	r3, #0
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
 80015a4:	e042      	b.n	800162c <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015aa:	e039      	b.n	8001620 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80015ac:	4996      	ldr	r1, [pc, #600]	; (8001808 <setLEDs+0x298>)
 80015ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015b0:	4613      	mov	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015b8:	4413      	add	r3, r2
 80015ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015be:	2180      	movs	r1, #128	; 0x80
 80015c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015c2:	fa41 f202 	asr.w	r2, r1, r2
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d013      	beq.n	80015f4 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80015cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ce:	00da      	lsls	r2, r3, #3
 80015d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d2:	18d1      	adds	r1, r2, r3
 80015d4:	4a8b      	ldr	r2, [pc, #556]	; (8001804 <setLEDs+0x294>)
 80015d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4413      	add	r3, r2
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
								+ 8] = 60;
 80015e8:	3308      	adds	r3, #8
 80015ea:	4a88      	ldr	r2, [pc, #544]	; (800180c <setLEDs+0x29c>)
 80015ec:	213c      	movs	r1, #60	; 0x3c
 80015ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80015f2:	e012      	b.n	800161a <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80015f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f6:	00da      	lsls	r2, r3, #3
 80015f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fa:	18d1      	adds	r1, r2, r3
 80015fc:	4a81      	ldr	r2, [pc, #516]	; (8001804 <setLEDs+0x294>)
 80015fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4413      	add	r3, r2
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	440b      	add	r3, r1
								+ 8] = 30;
 8001610:	3308      	adds	r3, #8
 8001612:	4a7e      	ldr	r2, [pc, #504]	; (800180c <setLEDs+0x29c>)
 8001614:	211e      	movs	r1, #30
 8001616:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	3301      	adds	r3, #1
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	2b07      	cmp	r3, #7
 8001624:	ddc2      	ble.n	80015ac <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8001626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001628:	3301      	adds	r3, #1
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
 800162c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162e:	2b02      	cmp	r3, #2
 8001630:	ddb9      	ble.n	80015a6 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
 8001636:	e007      	b.n	8001648 <setLEDs+0xd8>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8001638:	4a74      	ldr	r2, [pc, #464]	; (800180c <setLEDs+0x29c>)
 800163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163c:	2100      	movs	r1, #0
 800163e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8001642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001644:	3301      	adds	r3, #1
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8001648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164a:	2bb1      	cmp	r3, #177	; 0xb1
 800164c:	ddf4      	ble.n	8001638 <setLEDs+0xc8>
			}
			break;
 800164e:	e114      	b.n	800187a <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
 8001654:	e042      	b.n	80016dc <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
 800165a:	e039      	b.n	80016d0 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 800165c:	496a      	ldr	r1, [pc, #424]	; (8001808 <setLEDs+0x298>)
 800165e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001668:	4413      	add	r3, r2
 800166a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	6a3a      	ldr	r2, [r7, #32]
 8001672:	fa41 f202 	asr.w	r2, r1, r2
 8001676:	4013      	ands	r3, r2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	00da      	lsls	r2, r3, #3
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	18d1      	adds	r1, r2, r3
 8001684:	4a5f      	ldr	r2, [pc, #380]	; (8001804 <setLEDs+0x294>)
 8001686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4413      	add	r3, r2
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	440b      	add	r3, r1
								+ 8] = 60;
 8001698:	3308      	adds	r3, #8
 800169a:	4a5d      	ldr	r2, [pc, #372]	; (8001810 <setLEDs+0x2a0>)
 800169c:	213c      	movs	r1, #60	; 0x3c
 800169e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80016a2:	e012      	b.n	80016ca <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	00da      	lsls	r2, r3, #3
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	18d1      	adds	r1, r2, r3
 80016ac:	4a55      	ldr	r2, [pc, #340]	; (8001804 <setLEDs+0x294>)
 80016ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4413      	add	r3, r2
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
								+ 8] = 30;
 80016c0:	3308      	adds	r3, #8
 80016c2:	4a53      	ldr	r2, [pc, #332]	; (8001810 <setLEDs+0x2a0>)
 80016c4:	211e      	movs	r1, #30
 80016c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	3301      	adds	r3, #1
 80016ce:	623b      	str	r3, [r7, #32]
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	2b07      	cmp	r3, #7
 80016d4:	ddc2      	ble.n	800165c <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	3301      	adds	r3, #1
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	2b02      	cmp	r3, #2
 80016e0:	ddb9      	ble.n	8001656 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	e007      	b.n	80016f8 <setLEDs+0x188>
					i++) {
				LED_PWM_Data_1[i] = 0;
 80016e8:	4a49      	ldr	r2, [pc, #292]	; (8001810 <setLEDs+0x2a0>)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	2100      	movs	r1, #0
 80016ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3301      	adds	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2bb1      	cmp	r3, #177	; 0xb1
 80016fc:	ddf4      	ble.n	80016e8 <setLEDs+0x178>
			}
			break;
 80016fe:	e0bc      	b.n	800187a <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
 8001704:	e042      	b.n	800178c <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e039      	b.n	8001780 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 800170c:	493e      	ldr	r1, [pc, #248]	; (8001808 <setLEDs+0x298>)
 800170e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4413      	add	r3, r2
 800171a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800171e:	2180      	movs	r1, #128	; 0x80
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	fa41 f202 	asr.w	r2, r1, r2
 8001726:	4013      	ands	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d013      	beq.n	8001754 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	18d1      	adds	r1, r2, r3
 8001734:	4a33      	ldr	r2, [pc, #204]	; (8001804 <setLEDs+0x294>)
 8001736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
								+ 8] = 60;
 8001748:	3308      	adds	r3, #8
 800174a:	4a32      	ldr	r2, [pc, #200]	; (8001814 <setLEDs+0x2a4>)
 800174c:	213c      	movs	r1, #60	; 0x3c
 800174e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001752:	e012      	b.n	800177a <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	00da      	lsls	r2, r3, #3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	18d1      	adds	r1, r2, r3
 800175c:	4a29      	ldr	r2, [pc, #164]	; (8001804 <setLEDs+0x294>)
 800175e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4413      	add	r3, r2
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	440b      	add	r3, r1
								+ 8] = 30;
 8001770:	3308      	adds	r3, #8
 8001772:	4a28      	ldr	r2, [pc, #160]	; (8001814 <setLEDs+0x2a4>)
 8001774:	211e      	movs	r1, #30
 8001776:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2b07      	cmp	r3, #7
 8001784:	ddc2      	ble.n	800170c <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	3301      	adds	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2b02      	cmp	r3, #2
 8001790:	ddb9      	ble.n	8001706 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8001792:	2338      	movs	r3, #56	; 0x38
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	e007      	b.n	80017a8 <setLEDs+0x238>
					i++) {
				LED_PWM_Data_2[i] = 0;
 8001798:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <setLEDs+0x2a4>)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	2100      	movs	r1, #0
 800179e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	3301      	adds	r3, #1
 80017a6:	613b      	str	r3, [r7, #16]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	2b69      	cmp	r3, #105	; 0x69
 80017ac:	ddf4      	ble.n	8001798 <setLEDs+0x228>
			}
			break;
 80017ae:	e064      	b.n	800187a <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e04e      	b.n	8001854 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	e045      	b.n	8001848 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80017bc:	4912      	ldr	r1, [pc, #72]	; (8001808 <setLEDs+0x298>)
 80017be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	4413      	add	r3, r2
 80017ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017ce:	2180      	movs	r1, #128	; 0x80
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	fa41 f202 	asr.w	r2, r1, r2
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d01f      	beq.n	800181c <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	00da      	lsls	r2, r3, #3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	18d1      	adds	r1, r2, r3
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <setLEDs+0x294>)
 80017e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
								+ 8] = 60;
 80017f8:	3308      	adds	r3, #8
 80017fa:	4a07      	ldr	r2, [pc, #28]	; (8001818 <setLEDs+0x2a8>)
 80017fc:	213c      	movs	r1, #60	; 0x3c
 80017fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001802:	e01e      	b.n	8001842 <setLEDs+0x2d2>
 8001804:	08020380 	.word	0x08020380
 8001808:	24000cc4 	.word	0x24000cc4
 800180c:	240003e4 	.word	0x240003e4
 8001810:	240006ac 	.word	0x240006ac
 8001814:	24000974 	.word	0x24000974
 8001818:	24000b1c 	.word	0x24000b1c
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	00da      	lsls	r2, r3, #3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	18d1      	adds	r1, r2, r3
 8001824:	4a26      	ldr	r2, [pc, #152]	; (80018c0 <setLEDs+0x350>)
 8001826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
								+ 8] = 30;
 8001838:	3308      	adds	r3, #8
 800183a:	4a22      	ldr	r2, [pc, #136]	; (80018c4 <setLEDs+0x354>)
 800183c:	211e      	movs	r1, #30
 800183e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	3301      	adds	r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b07      	cmp	r3, #7
 800184c:	ddb6      	ble.n	80017bc <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3301      	adds	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b02      	cmp	r3, #2
 8001858:	ddad      	ble.n	80017b6 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 800185a:	2338      	movs	r3, #56	; 0x38
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	e007      	b.n	8001870 <setLEDs+0x300>
					i++) {
				LED_PWM_Data_3[i] = 0;
 8001860:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <setLEDs+0x354>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2100      	movs	r1, #0
 8001866:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3301      	adds	r3, #1
 800186e:	607b      	str	r3, [r7, #4]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b69      	cmp	r3, #105	; 0x69
 8001874:	ddf4      	ble.n	8001860 <setLEDs+0x2f0>
			}
			break;
 8001876:	e000      	b.n	800187a <setLEDs+0x30a>
		default:
			break;
 8001878:	bf00      	nop
			i++) {
 800187a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187c:	3301      	adds	r3, #1
 800187e:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8001880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001882:	2b0d      	cmp	r3, #13
 8001884:	f77f ae7a 	ble.w	800157c <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 8001888:	23b2      	movs	r3, #178	; 0xb2
 800188a:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <setLEDs+0x358>)
 800188c:	210c      	movs	r1, #12
 800188e:	480f      	ldr	r0, [pc, #60]	; (80018cc <setLEDs+0x35c>)
 8001890:	f00f f940 	bl	8010b14 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 8001894:	23b2      	movs	r3, #178	; 0xb2
 8001896:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <setLEDs+0x360>)
 8001898:	2108      	movs	r1, #8
 800189a:	480e      	ldr	r0, [pc, #56]	; (80018d4 <setLEDs+0x364>)
 800189c:	f00f f93a 	bl	8010b14 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 80018a0:	236a      	movs	r3, #106	; 0x6a
 80018a2:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <setLEDs+0x368>)
 80018a4:	2104      	movs	r1, #4
 80018a6:	480d      	ldr	r0, [pc, #52]	; (80018dc <setLEDs+0x36c>)
 80018a8:	f00f f934 	bl	8010b14 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 80018ac:	236a      	movs	r3, #106	; 0x6a
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <setLEDs+0x354>)
 80018b0:	2100      	movs	r1, #0
 80018b2:	480a      	ldr	r0, [pc, #40]	; (80018dc <setLEDs+0x36c>)
 80018b4:	f00f f92e 	bl	8010b14 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 80018b8:	bf00      	nop
 80018ba:	3738      	adds	r7, #56	; 0x38
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	08020380 	.word	0x08020380
 80018c4:	24000b1c 	.word	0x24000b1c
 80018c8:	240003e4 	.word	0x240003e4
 80018cc:	24001328 	.word	0x24001328
 80018d0:	240006ac 	.word	0x240006ac
 80018d4:	24001244 	.word	0x24001244
 80018d8:	24000974 	.word	0x24000974
 80018dc:	24001290 	.word	0x24001290

080018e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b090      	sub	sp, #64	; 0x40
 80018e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e6:	f002 fbfb 	bl	80040e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ea:	f000 f87b 	bl	80019e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80018ee:	f000 f8f1 	bl	8001ad4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f2:	f000 fe9d 	bl	8002630 <MX_GPIO_Init>
  MX_DMA_Init();
 80018f6:	f000 fe3b 	bl	8002570 <MX_DMA_Init>
  MX_SPI3_Init();
 80018fa:	f000 fb71 	bl	8001fe0 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 80018fe:	f000 fa01 	bl	8001d04 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001902:	f000 fde9 	bl	80024d8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001906:	f000 f917 	bl	8001b38 <MX_ADC1_Init>
  MX_TIM4_Init();
 800190a:	f000 fc7b 	bl	8002204 <MX_TIM4_Init>
  MX_ADC3_Init();
 800190e:	f000 f98b 	bl	8001c28 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001912:	f000 fb0f 	bl	8001f34 <MX_SPI2_Init>
  MX_I2C2_Init();
 8001916:	f000 fa59 	bl	8001dcc <MX_I2C2_Init>
  MX_TIM2_Init();
 800191a:	f000 fbb7 	bl	800208c <MX_TIM2_Init>
  MX_TIM5_Init();
 800191e:	f000 fced 	bl	80022fc <MX_TIM5_Init>
  MX_TIM3_Init();
 8001922:	f000 fc0b 	bl	800213c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001926:	f018 ffab 	bl	801a880 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 800192a:	f000 faad 	bl	8001e88 <MX_SPI1_Init>
  MX_UART4_Init();
 800192e:	f000 fd87 	bl	8002440 <MX_UART4_Init>
  MX_FATFS_Init();
 8001932:	f013 fdc5 	bl	80154c0 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8001936:	f000 fa89 	bl	8001e4c <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 800193a:	f000 fd39 	bl	80023b0 <MX_TIM13_Init>
  MX_TIM14_Init();
 800193e:	f000 fd5b 	bl	80023f8 <MX_TIM14_Init>
  MX_RNG_Init();
 8001942:	f000 ffdf 	bl	8002904 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
	char dummy[50];
	disarm(dummy);
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	4618      	mov	r0, r3
 800194a:	f001 f83d 	bl	80029c8 <disarm>


	FR_Status = f_mount(&FatFs, SDPath, 1);
 800194e:	2201      	movs	r2, #1
 8001950:	4918      	ldr	r1, [pc, #96]	; (80019b4 <main+0xd4>)
 8001952:	4819      	ldr	r0, [pc, #100]	; (80019b8 <main+0xd8>)
 8001954:	f018 f988 	bl	8019c68 <f_mount>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <main+0xdc>)
 800195e:	701a      	strb	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001960:	210c      	movs	r1, #12
 8001962:	4817      	ldr	r0, [pc, #92]	; (80019c0 <main+0xe0>)
 8001964:	f00e ffba 	bl	80108dc <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001968:	2201      	movs	r2, #1
 800196a:	2104      	movs	r1, #4
 800196c:	4815      	ldr	r0, [pc, #84]	; (80019c4 <main+0xe4>)
 800196e:	f007 fb47 	bl	8009000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001972:	2201      	movs	r2, #1
 8001974:	2108      	movs	r1, #8
 8001976:	4813      	ldr	r0, [pc, #76]	; (80019c4 <main+0xe4>)
 8001978:	f007 fb42 	bl	8009000 <HAL_GPIO_WritePin>

	FR_Status = f_open(&Fil, "MyTextFile.txt", FA_CREATE_NEW);
 800197c:	2204      	movs	r2, #4
 800197e:	4912      	ldr	r1, [pc, #72]	; (80019c8 <main+0xe8>)
 8001980:	4812      	ldr	r0, [pc, #72]	; (80019cc <main+0xec>)
 8001982:	f018 f9b7 	bl	8019cf4 <f_open>
 8001986:	4603      	mov	r3, r0
 8001988:	461a      	mov	r2, r3
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <main+0xdc>)
 800198c:	701a      	strb	r2, [r3, #0]
	f_close(&Fil);
 800198e:	480f      	ldr	r0, [pc, #60]	; (80019cc <main+0xec>)
 8001990:	f018 fd8e 	bl	801a4b0 <f_close>

	LoRA_begin(868000000);
 8001994:	480e      	ldr	r0, [pc, #56]	; (80019d0 <main+0xf0>)
 8001996:	f7ff f9af 	bl	8000cf8 <LoRA_begin>
	communicationHandler(
 800199a:	2300      	movs	r3, #0
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <main+0xf4>)
 80019a0:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <main+0xf8>)
 80019a2:	490e      	ldr	r1, [pc, #56]	; (80019dc <main+0xfc>)
 80019a4:	480e      	ldr	r0, [pc, #56]	; (80019e0 <main+0x100>)
 80019a6:	f7ff fb8f 	bl	80010c8 <communicationHandler>
 80019aa:	2300      	movs	r3, #0
//HAL_Delay(1000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3738      	adds	r7, #56	; 0x38
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	24003e64 	.word	0x24003e64
 80019b8:	2400178c 	.word	0x2400178c
 80019bc:	240037f4 	.word	0x240037f4
 80019c0:	240012dc 	.word	0x240012dc
 80019c4:	58021800 	.word	0x58021800
 80019c8:	0802016c 	.word	0x0802016c
 80019cc:	240027c4 	.word	0x240027c4
 80019d0:	33bca100 	.word	0x33bca100
 80019d4:	08002ca1 	.word	0x08002ca1
 80019d8:	08002bf5 	.word	0x08002bf5
 80019dc:	08002bd5 	.word	0x08002bd5
 80019e0:	08002bb9 	.word	0x08002bb9

080019e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b09c      	sub	sp, #112	; 0x70
 80019e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ee:	224c      	movs	r2, #76	; 0x4c
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f01a fbe9 	bl	801c1ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	2220      	movs	r2, #32
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f01a fbe3 	bl	801c1ca <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a04:	2002      	movs	r0, #2
 8001a06:	f008 ff0f 	bl	800a828 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <SystemClock_Config+0xec>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a16:	4a2e      	ldr	r2, [pc, #184]	; (8001ad0 <SystemClock_Config+0xec>)
 8001a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a1c:	6193      	str	r3, [r2, #24]
 8001a1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <SystemClock_Config+0xec>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a2a:	bf00      	nop
 8001a2c:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <SystemClock_Config+0xec>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a38:	d1f8      	bne.n	8001a2c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001a3a:	2322      	movs	r3, #34	; 0x22
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001a42:	2340      	movs	r3, #64	; 0x40
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a46:	2301      	movs	r3, #1
 8001a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a52:	2304      	movs	r3, #4
 8001a54:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001a56:	230c      	movs	r3, #12
 8001a58:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a62:	2302      	movs	r3, #2
 8001a64:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a66:	230c      	movs	r3, #12
 8001a68:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a76:	4618      	mov	r0, r3
 8001a78:	f008 ff20 	bl	800a8bc <HAL_RCC_OscConfig>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001a82:	f000 ff39 	bl	80028f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a86:	233f      	movs	r3, #63	; 0x3f
 8001a88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a92:	2308      	movs	r3, #8
 8001a94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a96:	2340      	movs	r3, #64	; 0x40
 8001a98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a9a:	2340      	movs	r3, #64	; 0x40
 8001a9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aa2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001aa4:	2340      	movs	r3, #64	; 0x40
 8001aa6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4618      	mov	r0, r3
 8001aae:	f009 fadf 	bl	800b070 <HAL_RCC_ClockConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001ab8:	f000 ff1e 	bl	80028f8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001abc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f009 fc8a 	bl	800b3dc <HAL_RCC_MCOConfig>
}
 8001ac8:	bf00      	nop
 8001aca:	3770      	adds	r7, #112	; 0x70
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	58024800 	.word	0x58024800

08001ad4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b0ae      	sub	sp, #184	; 0xb8
 8001ad8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ada:	463b      	mov	r3, r7
 8001adc:	22b8      	movs	r2, #184	; 0xb8
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f01a fb72 	bl	801c1ca <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001ae6:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001af2:	2304      	movs	r3, #4
 8001af4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001af6:	230c      	movs	r3, #12
 8001af8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001afa:	2304      	movs	r3, #4
 8001afc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001afe:	2302      	movs	r3, #2
 8001b00:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b06:	23c0      	movs	r3, #192	; 0xc0
 8001b08:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b16:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b1e:	463b      	mov	r3, r7
 8001b20:	4618      	mov	r0, r3
 8001b22:	f009 fe9b 	bl	800b85c <HAL_RCCEx_PeriphCLKConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001b2c:	f000 fee4 	bl	80028f8 <Error_Handler>
  }
}
 8001b30:	bf00      	nop
 8001b32:	37b8      	adds	r7, #184	; 0xb8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08c      	sub	sp, #48	; 0x30
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	2224      	movs	r2, #36	; 0x24
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f01a fb3a 	bl	801c1ca <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b56:	4b31      	ldr	r3, [pc, #196]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001b58:	4a31      	ldr	r2, [pc, #196]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001b5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001b5e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001b62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001b64:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b6a:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b70:	4b2a      	ldr	r3, [pc, #168]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001b72:	2204      	movs	r2, #4
 8001b74:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b7c:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001bae:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bb6:	4819      	ldr	r0, [pc, #100]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001bb8:	f002 fe4a 	bl	8004850 <HAL_ADC_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001bc2:	f000 fe99 	bl	80028f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4812      	ldr	r0, [pc, #72]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001bd2:	f004 fa2b 	bl	800602c <HAL_ADCEx_MultiModeConfigChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001bdc:	f000 fe8c 	bl	80028f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <MX_ADC1_Init+0xec>)
 8001be2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001be4:	2306      	movs	r3, #6
 8001be6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001be8:	2303      	movs	r3, #3
 8001bea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001bf0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c00:	463b      	mov	r3, r7
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	; (8001c1c <MX_ADC1_Init+0xe4>)
 8001c06:	f003 fa2b 	bl	8005060 <HAL_ADC_ConfigChannel>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001c10:	f000 fe72 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	3730      	adds	r7, #48	; 0x30
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	24000d6c 	.word	0x24000d6c
 8001c20:	40022000 	.word	0x40022000
 8001c24:	3ac04000 	.word	0x3ac04000

08001c28 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	2224      	movs	r2, #36	; 0x24
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f01a fac8 	bl	801c1ca <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001c3a:	4b2f      	ldr	r3, [pc, #188]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001c3c:	4a2f      	ldr	r2, [pc, #188]	; (8001cfc <MX_ADC3_Init+0xd4>)
 8001c3e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001c40:	4b2d      	ldr	r3, [pc, #180]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001c42:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001c46:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001c48:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c54:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c5a:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001c60:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001c66:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001c6c:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001c72:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c7a:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001c86:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001c94:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001ca0:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001cae:	4812      	ldr	r0, [pc, #72]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001cb0:	f002 fdce 	bl	8004850 <HAL_ADC_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001cba:	f000 fe1d 	bl	80028f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <MX_ADC3_Init+0xd8>)
 8001cc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cc2:	2306      	movs	r3, #6
 8001cc4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001cce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_ADC3_Init+0xd0>)
 8001ce2:	f003 f9bd 	bl	8005060 <HAL_ADC_ConfigChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001cec:	f000 fe04 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	3728      	adds	r7, #40	; 0x28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	24000ddc 	.word	0x24000ddc
 8001cfc:	58026000 	.word	0x58026000
 8001d00:	04300002 	.word	0x04300002

08001d04 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001d08:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d0a:	4a2f      	ldr	r2, [pc, #188]	; (8001dc8 <MX_FDCAN3_Init+0xc4>)
 8001d0c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001d26:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d2e:	2210      	movs	r2, #16
 8001d30:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001d32:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001d38:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d40:	2202      	movs	r2, #2
 8001d42:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001d44:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001d50:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d76:	2204      	movs	r2, #4
 8001d78:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d82:	2204      	movs	r2, #4
 8001d84:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d8e:	2204      	movs	r2, #4
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001dac:	2204      	movs	r2, #4
 8001dae:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001db0:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <MX_FDCAN3_Init+0xc0>)
 8001db2:	f006 fc01 	bl	80085b8 <HAL_FDCAN_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001dbc:	f000 fd9c 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	24000f3c 	.word	0x24000f3c
 8001dc8:	4000d400 	.word	0x4000d400

08001dcc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <MX_I2C2_Init+0x74>)
 8001dd2:	4a1c      	ldr	r2, [pc, #112]	; (8001e44 <MX_I2C2_Init+0x78>)
 8001dd4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <MX_I2C2_Init+0x74>)
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <MX_I2C2_Init+0x7c>)
 8001dda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <MX_I2C2_Init+0x74>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <MX_I2C2_Init+0x74>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <MX_I2C2_Init+0x74>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <MX_I2C2_Init+0x74>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <MX_I2C2_Init+0x74>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_I2C2_Init+0x74>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <MX_I2C2_Init+0x74>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e06:	480e      	ldr	r0, [pc, #56]	; (8001e40 <MX_I2C2_Init+0x74>)
 8001e08:	f007 f914 	bl	8009034 <HAL_I2C_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e12:	f000 fd71 	bl	80028f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e16:	2100      	movs	r1, #0
 8001e18:	4809      	ldr	r0, [pc, #36]	; (8001e40 <MX_I2C2_Init+0x74>)
 8001e1a:	f007 f9b5 	bl	8009188 <HAL_I2CEx_ConfigAnalogFilter>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e24:	f000 fd68 	bl	80028f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_I2C2_Init+0x74>)
 8001e2c:	f007 f9f7 	bl	800921e <HAL_I2CEx_ConfigDigitalFilter>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e36:	f000 fd5f 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	24000fdc 	.word	0x24000fdc
 8001e44:	40005800 	.word	0x40005800
 8001e48:	20303e5d 	.word	0x20303e5d

08001e4c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <MX_SDMMC2_SD_Init+0x34>)
 8001e52:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <MX_SDMMC2_SD_Init+0x38>)
 8001e54:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <MX_SDMMC2_SD_Init+0x34>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <MX_SDMMC2_SD_Init+0x34>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <MX_SDMMC2_SD_Init+0x34>)
 8001e64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e68:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001e6a:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <MX_SDMMC2_SD_Init+0x34>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 8;
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <MX_SDMMC2_SD_Init+0x34>)
 8001e72:	2208      	movs	r2, #8
 8001e74:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	24001030 	.word	0x24001030
 8001e84:	48022400 	.word	0x48022400

08001e88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001e8e:	4a28      	ldr	r2, [pc, #160]	; (8001f30 <MX_SPI1_Init+0xa8>)
 8001e90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001e94:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ea0:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001ea2:	2207      	movs	r2, #7
 8001ea4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eac:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001eb4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001eb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001ebc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001ec0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec8:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ece:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001ed4:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001edc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001eee:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ef4:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f18:	4804      	ldr	r0, [pc, #16]	; (8001f2c <MX_SPI1_Init+0xa4>)
 8001f1a:	f00d fe97 	bl	800fc4c <HAL_SPI_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001f24:	f000 fce8 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	240010ac 	.word	0x240010ac
 8001f30:	40013000 	.word	0x40013000

08001f34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f38:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001f3a:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <MX_SPI2_Init+0xa8>)
 8001f3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001f40:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001f4e:	2207      	movs	r2, #7
 8001f50:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f52:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f58:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001f60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f64:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001f68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f6c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001f80:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001f88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f8c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fc4:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <MX_SPI2_Init+0xa4>)
 8001fc6:	f00d fe41 	bl	800fc4c <HAL_SPI_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001fd0:	f000 fc92 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	24001134 	.word	0x24001134
 8001fdc:	40003800 	.word	0x40003800

08001fe0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001fe4:	4b27      	ldr	r3, [pc, #156]	; (8002084 <MX_SPI3_Init+0xa4>)
 8001fe6:	4a28      	ldr	r2, [pc, #160]	; (8002088 <MX_SPI3_Init+0xa8>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001fea:	4b26      	ldr	r3, [pc, #152]	; (8002084 <MX_SPI3_Init+0xa4>)
 8001fec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ff0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <MX_SPI3_Init+0xa4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ff8:	4b22      	ldr	r3, [pc, #136]	; (8002084 <MX_SPI3_Init+0xa4>)
 8001ffa:	2207      	movs	r2, #7
 8001ffc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <MX_SPI3_Init+0xa4>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002004:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <MX_SPI3_Init+0xa4>)
 8002006:	2200      	movs	r2, #0
 8002008:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800200a:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <MX_SPI3_Init+0xa4>)
 800200c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002010:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <MX_SPI3_Init+0xa4>)
 8002014:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002018:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <MX_SPI3_Init+0xa4>)
 800201c:	2200      	movs	r2, #0
 800201e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <MX_SPI3_Init+0xa4>)
 8002022:	2200      	movs	r2, #0
 8002024:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <MX_SPI3_Init+0xa4>)
 8002028:	2200      	movs	r2, #0
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800202c:	4b15      	ldr	r3, [pc, #84]	; (8002084 <MX_SPI3_Init+0xa4>)
 800202e:	2200      	movs	r2, #0
 8002030:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <MX_SPI3_Init+0xa4>)
 8002034:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002038:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <MX_SPI3_Init+0xa4>)
 800203c:	2200      	movs	r2, #0
 800203e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002040:	4b10      	ldr	r3, [pc, #64]	; (8002084 <MX_SPI3_Init+0xa4>)
 8002042:	2200      	movs	r2, #0
 8002044:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <MX_SPI3_Init+0xa4>)
 8002048:	2200      	movs	r2, #0
 800204a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800204c:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <MX_SPI3_Init+0xa4>)
 800204e:	2200      	movs	r2, #0
 8002050:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <MX_SPI3_Init+0xa4>)
 8002054:	2200      	movs	r2, #0
 8002056:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <MX_SPI3_Init+0xa4>)
 800205a:	2200      	movs	r2, #0
 800205c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <MX_SPI3_Init+0xa4>)
 8002060:	2200      	movs	r2, #0
 8002062:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <MX_SPI3_Init+0xa4>)
 8002066:	2200      	movs	r2, #0
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <MX_SPI3_Init+0xa4>)
 800206c:	2200      	movs	r2, #0
 800206e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002070:	4804      	ldr	r0, [pc, #16]	; (8002084 <MX_SPI3_Init+0xa4>)
 8002072:	f00d fdeb 	bl	800fc4c <HAL_SPI_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 800207c:	f000 fc3c 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}
 8002084:	240011bc 	.word	0x240011bc
 8002088:	40003c00 	.word	0x40003c00

0800208c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002092:	f107 031c 	add.w	r3, r7, #28
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800209e:	463b      	mov	r3, r7
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
 80020ac:	615a      	str	r2, [r3, #20]
 80020ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020b0:	4b21      	ldr	r3, [pc, #132]	; (8002138 <MX_TIM2_Init+0xac>)
 80020b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020b8:	4b1f      	ldr	r3, [pc, #124]	; (8002138 <MX_TIM2_Init+0xac>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020be:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <MX_TIM2_Init+0xac>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 80020c4:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <MX_TIM2_Init+0xac>)
 80020c6:	225a      	movs	r2, #90	; 0x5a
 80020c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <MX_TIM2_Init+0xac>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <MX_TIM2_Init+0xac>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020d6:	4818      	ldr	r0, [pc, #96]	; (8002138 <MX_TIM2_Init+0xac>)
 80020d8:	f00e fba8 	bl	801082c <HAL_TIM_PWM_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80020e2:	f000 fc09 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ee:	f107 031c 	add.w	r3, r7, #28
 80020f2:	4619      	mov	r1, r3
 80020f4:	4810      	ldr	r0, [pc, #64]	; (8002138 <MX_TIM2_Init+0xac>)
 80020f6:	f00f fe2f 	bl	8011d58 <HAL_TIMEx_MasterConfigSynchronization>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002100:	f000 fbfa 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002104:	2360      	movs	r3, #96	; 0x60
 8002106:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002114:	463b      	mov	r3, r7
 8002116:	2208      	movs	r2, #8
 8002118:	4619      	mov	r1, r3
 800211a:	4807      	ldr	r0, [pc, #28]	; (8002138 <MX_TIM2_Init+0xac>)
 800211c:	f00f f84e 	bl	80111bc <HAL_TIM_PWM_ConfigChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002126:	f000 fbe7 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800212a:	4803      	ldr	r0, [pc, #12]	; (8002138 <MX_TIM2_Init+0xac>)
 800212c:	f001 fc5a 	bl	80039e4 <HAL_TIM_MspPostInit>

}
 8002130:	bf00      	nop
 8002132:	3728      	adds	r7, #40	; 0x28
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	24001244 	.word	0x24001244

0800213c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002142:	f107 031c 	add.w	r3, r7, #28
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800214e:	463b      	mov	r3, r7
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
 800215c:	615a      	str	r2, [r3, #20]
 800215e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002160:	4b26      	ldr	r3, [pc, #152]	; (80021fc <MX_TIM3_Init+0xc0>)
 8002162:	4a27      	ldr	r2, [pc, #156]	; (8002200 <MX_TIM3_Init+0xc4>)
 8002164:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002166:	4b25      	ldr	r3, [pc, #148]	; (80021fc <MX_TIM3_Init+0xc0>)
 8002168:	2200      	movs	r2, #0
 800216a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216c:	4b23      	ldr	r3, [pc, #140]	; (80021fc <MX_TIM3_Init+0xc0>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8002172:	4b22      	ldr	r3, [pc, #136]	; (80021fc <MX_TIM3_Init+0xc0>)
 8002174:	225a      	movs	r2, #90	; 0x5a
 8002176:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002178:	4b20      	ldr	r3, [pc, #128]	; (80021fc <MX_TIM3_Init+0xc0>)
 800217a:	2200      	movs	r2, #0
 800217c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217e:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <MX_TIM3_Init+0xc0>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002184:	481d      	ldr	r0, [pc, #116]	; (80021fc <MX_TIM3_Init+0xc0>)
 8002186:	f00e fb51 	bl	801082c <HAL_TIM_PWM_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002190:	f000 fbb2 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	4619      	mov	r1, r3
 80021a2:	4816      	ldr	r0, [pc, #88]	; (80021fc <MX_TIM3_Init+0xc0>)
 80021a4:	f00f fdd8 	bl	8011d58 <HAL_TIMEx_MasterConfigSynchronization>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80021ae:	f000 fba3 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021b2:	2360      	movs	r3, #96	; 0x60
 80021b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021c2:	463b      	mov	r3, r7
 80021c4:	2200      	movs	r2, #0
 80021c6:	4619      	mov	r1, r3
 80021c8:	480c      	ldr	r0, [pc, #48]	; (80021fc <MX_TIM3_Init+0xc0>)
 80021ca:	f00e fff7 	bl	80111bc <HAL_TIM_PWM_ConfigChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80021d4:	f000 fb90 	bl	80028f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021d8:	463b      	mov	r3, r7
 80021da:	2204      	movs	r2, #4
 80021dc:	4619      	mov	r1, r3
 80021de:	4807      	ldr	r0, [pc, #28]	; (80021fc <MX_TIM3_Init+0xc0>)
 80021e0:	f00e ffec 	bl	80111bc <HAL_TIM_PWM_ConfigChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80021ea:	f000 fb85 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021ee:	4803      	ldr	r0, [pc, #12]	; (80021fc <MX_TIM3_Init+0xc0>)
 80021f0:	f001 fbf8 	bl	80039e4 <HAL_TIM_MspPostInit>

}
 80021f4:	bf00      	nop
 80021f6:	3728      	adds	r7, #40	; 0x28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	24001290 	.word	0x24001290
 8002200:	40000400 	.word	0x40000400

08002204 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800220a:	f107 031c 	add.w	r3, r7, #28
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002216:	463b      	mov	r3, r7
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
 8002224:	615a      	str	r2, [r3, #20]
 8002226:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002228:	4b32      	ldr	r3, [pc, #200]	; (80022f4 <MX_TIM4_Init+0xf0>)
 800222a:	4a33      	ldr	r2, [pc, #204]	; (80022f8 <MX_TIM4_Init+0xf4>)
 800222c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 29;
 800222e:	4b31      	ldr	r3, [pc, #196]	; (80022f4 <MX_TIM4_Init+0xf0>)
 8002230:	221d      	movs	r2, #29
 8002232:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002234:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <MX_TIM4_Init+0xf0>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800223a:	4b2e      	ldr	r3, [pc, #184]	; (80022f4 <MX_TIM4_Init+0xf0>)
 800223c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002240:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002242:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <MX_TIM4_Init+0xf0>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002248:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <MX_TIM4_Init+0xf0>)
 800224a:	2200      	movs	r2, #0
 800224c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800224e:	4829      	ldr	r0, [pc, #164]	; (80022f4 <MX_TIM4_Init+0xf0>)
 8002250:	f00e faec 	bl	801082c <HAL_TIM_PWM_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800225a:	f000 fb4d 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	4619      	mov	r1, r3
 800226c:	4821      	ldr	r0, [pc, #132]	; (80022f4 <MX_TIM4_Init+0xf0>)
 800226e:	f00f fd73 	bl	8011d58 <HAL_TIMEx_MasterConfigSynchronization>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002278:	f000 fb3e 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800227c:	2360      	movs	r3, #96	; 0x60
 800227e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800228c:	463b      	mov	r3, r7
 800228e:	2200      	movs	r2, #0
 8002290:	4619      	mov	r1, r3
 8002292:	4818      	ldr	r0, [pc, #96]	; (80022f4 <MX_TIM4_Init+0xf0>)
 8002294:	f00e ff92 	bl	80111bc <HAL_TIM_PWM_ConfigChannel>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800229e:	f000 fb2b 	bl	80028f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022a2:	463b      	mov	r3, r7
 80022a4:	2204      	movs	r2, #4
 80022a6:	4619      	mov	r1, r3
 80022a8:	4812      	ldr	r0, [pc, #72]	; (80022f4 <MX_TIM4_Init+0xf0>)
 80022aa:	f00e ff87 	bl	80111bc <HAL_TIM_PWM_ConfigChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80022b4:	f000 fb20 	bl	80028f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022b8:	463b      	mov	r3, r7
 80022ba:	2208      	movs	r2, #8
 80022bc:	4619      	mov	r1, r3
 80022be:	480d      	ldr	r0, [pc, #52]	; (80022f4 <MX_TIM4_Init+0xf0>)
 80022c0:	f00e ff7c 	bl	80111bc <HAL_TIM_PWM_ConfigChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80022ca:	f000 fb15 	bl	80028f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022ce:	463b      	mov	r3, r7
 80022d0:	220c      	movs	r2, #12
 80022d2:	4619      	mov	r1, r3
 80022d4:	4807      	ldr	r0, [pc, #28]	; (80022f4 <MX_TIM4_Init+0xf0>)
 80022d6:	f00e ff71 	bl	80111bc <HAL_TIM_PWM_ConfigChannel>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80022e0:	f000 fb0a 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022e4:	4803      	ldr	r0, [pc, #12]	; (80022f4 <MX_TIM4_Init+0xf0>)
 80022e6:	f001 fb7d 	bl	80039e4 <HAL_TIM_MspPostInit>

}
 80022ea:	bf00      	nop
 80022ec:	3728      	adds	r7, #40	; 0x28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	240012dc 	.word	0x240012dc
 80022f8:	40000800 	.word	0x40000800

080022fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800230e:	463b      	mov	r3, r7
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
 800231c:	615a      	str	r2, [r3, #20]
 800231e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <MX_TIM5_Init+0xac>)
 8002322:	4a22      	ldr	r2, [pc, #136]	; (80023ac <MX_TIM5_Init+0xb0>)
 8002324:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <MX_TIM5_Init+0xac>)
 8002328:	2200      	movs	r2, #0
 800232a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232c:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <MX_TIM5_Init+0xac>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8002332:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <MX_TIM5_Init+0xac>)
 8002334:	225a      	movs	r2, #90	; 0x5a
 8002336:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <MX_TIM5_Init+0xac>)
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233e:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <MX_TIM5_Init+0xac>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002344:	4818      	ldr	r0, [pc, #96]	; (80023a8 <MX_TIM5_Init+0xac>)
 8002346:	f00e fa71 	bl	801082c <HAL_TIM_PWM_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002350:	f000 fad2 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	4619      	mov	r1, r3
 8002362:	4811      	ldr	r0, [pc, #68]	; (80023a8 <MX_TIM5_Init+0xac>)
 8002364:	f00f fcf8 	bl	8011d58 <HAL_TIMEx_MasterConfigSynchronization>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800236e:	f000 fac3 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002372:	2360      	movs	r3, #96	; 0x60
 8002374:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002382:	463b      	mov	r3, r7
 8002384:	220c      	movs	r2, #12
 8002386:	4619      	mov	r1, r3
 8002388:	4807      	ldr	r0, [pc, #28]	; (80023a8 <MX_TIM5_Init+0xac>)
 800238a:	f00e ff17 	bl	80111bc <HAL_TIM_PWM_ConfigChannel>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002394:	f000 fab0 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <MX_TIM5_Init+0xac>)
 800239a:	f001 fb23 	bl	80039e4 <HAL_TIM_MspPostInit>

}
 800239e:	bf00      	nop
 80023a0:	3728      	adds	r7, #40	; 0x28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	24001328 	.word	0x24001328
 80023ac:	40000c00 	.word	0x40000c00

080023b0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80023b4:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <MX_TIM13_Init+0x40>)
 80023b6:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <MX_TIM13_Init+0x44>)
 80023b8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 99;
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <MX_TIM13_Init+0x40>)
 80023bc:	2263      	movs	r2, #99	; 0x63
 80023be:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <MX_TIM13_Init+0x40>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <MX_TIM13_Init+0x40>)
 80023c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023cc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <MX_TIM13_Init+0x40>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <MX_TIM13_Init+0x40>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80023da:	4805      	ldr	r0, [pc, #20]	; (80023f0 <MX_TIM13_Init+0x40>)
 80023dc:	f00e f9cf 	bl	801077e <HAL_TIM_Base_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80023e6:	f000 fa87 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	24001374 	.word	0x24001374
 80023f4:	40001c00 	.word	0x40001c00

080023f8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <MX_TIM14_Init+0x40>)
 80023fe:	4a0f      	ldr	r2, [pc, #60]	; (800243c <MX_TIM14_Init+0x44>)
 8002400:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <MX_TIM14_Init+0x40>)
 8002404:	2263      	movs	r2, #99	; 0x63
 8002406:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <MX_TIM14_Init+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <MX_TIM14_Init+0x40>)
 8002410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002414:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <MX_TIM14_Init+0x40>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <MX_TIM14_Init+0x40>)
 800241e:	2200      	movs	r2, #0
 8002420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_TIM14_Init+0x40>)
 8002424:	f00e f9ab 	bl	801077e <HAL_TIM_Base_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800242e:	f000 fa63 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	240013c0 	.word	0x240013c0
 800243c:	40002000 	.word	0x40002000

08002440 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002444:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <MX_UART4_Init+0x90>)
 8002446:	4a23      	ldr	r2, [pc, #140]	; (80024d4 <MX_UART4_Init+0x94>)
 8002448:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800244a:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <MX_UART4_Init+0x90>)
 800244c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002450:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002452:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <MX_UART4_Init+0x90>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002458:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <MX_UART4_Init+0x90>)
 800245a:	2200      	movs	r2, #0
 800245c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <MX_UART4_Init+0x90>)
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <MX_UART4_Init+0x90>)
 8002466:	220c      	movs	r2, #12
 8002468:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <MX_UART4_Init+0x90>)
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002470:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <MX_UART4_Init+0x90>)
 8002472:	2200      	movs	r2, #0
 8002474:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <MX_UART4_Init+0x90>)
 8002478:	2200      	movs	r2, #0
 800247a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <MX_UART4_Init+0x90>)
 800247e:	2200      	movs	r2, #0
 8002480:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <MX_UART4_Init+0x90>)
 8002484:	2200      	movs	r2, #0
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002488:	4811      	ldr	r0, [pc, #68]	; (80024d0 <MX_UART4_Init+0x90>)
 800248a:	f00f fd1f 	bl	8011ecc <HAL_UART_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002494:	f000 fa30 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002498:	2100      	movs	r1, #0
 800249a:	480d      	ldr	r0, [pc, #52]	; (80024d0 <MX_UART4_Init+0x90>)
 800249c:	f010 fe25 	bl	80130ea <HAL_UARTEx_SetTxFifoThreshold>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80024a6:	f000 fa27 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024aa:	2100      	movs	r1, #0
 80024ac:	4808      	ldr	r0, [pc, #32]	; (80024d0 <MX_UART4_Init+0x90>)
 80024ae:	f010 fe5a 	bl	8013166 <HAL_UARTEx_SetRxFifoThreshold>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80024b8:	f000 fa1e 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80024bc:	4804      	ldr	r0, [pc, #16]	; (80024d0 <MX_UART4_Init+0x90>)
 80024be:	f010 fddb 	bl	8013078 <HAL_UARTEx_DisableFifoMode>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80024c8:	f000 fa16 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	24001664 	.word	0x24001664
 80024d4:	40004c00 	.word	0x40004c00

080024d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80024dc:	4b22      	ldr	r3, [pc, #136]	; (8002568 <MX_USART6_UART_Init+0x90>)
 80024de:	4a23      	ldr	r2, [pc, #140]	; (800256c <MX_USART6_UART_Init+0x94>)
 80024e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80024e2:	4b21      	ldr	r3, [pc, #132]	; (8002568 <MX_USART6_UART_Init+0x90>)
 80024e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024ea:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <MX_USART6_UART_Init+0x90>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024f0:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <MX_USART6_UART_Init+0x90>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <MX_USART6_UART_Init+0x90>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024fc:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <MX_USART6_UART_Init+0x90>)
 80024fe:	220c      	movs	r2, #12
 8002500:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002502:	4b19      	ldr	r3, [pc, #100]	; (8002568 <MX_USART6_UART_Init+0x90>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002508:	4b17      	ldr	r3, [pc, #92]	; (8002568 <MX_USART6_UART_Init+0x90>)
 800250a:	2200      	movs	r2, #0
 800250c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <MX_USART6_UART_Init+0x90>)
 8002510:	2200      	movs	r2, #0
 8002512:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <MX_USART6_UART_Init+0x90>)
 8002516:	2200      	movs	r2, #0
 8002518:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <MX_USART6_UART_Init+0x90>)
 800251c:	2200      	movs	r2, #0
 800251e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002520:	4811      	ldr	r0, [pc, #68]	; (8002568 <MX_USART6_UART_Init+0x90>)
 8002522:	f00f fcd3 	bl	8011ecc <HAL_UART_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800252c:	f000 f9e4 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002530:	2100      	movs	r1, #0
 8002532:	480d      	ldr	r0, [pc, #52]	; (8002568 <MX_USART6_UART_Init+0x90>)
 8002534:	f010 fdd9 	bl	80130ea <HAL_UARTEx_SetTxFifoThreshold>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800253e:	f000 f9db 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002542:	2100      	movs	r1, #0
 8002544:	4808      	ldr	r0, [pc, #32]	; (8002568 <MX_USART6_UART_Init+0x90>)
 8002546:	f010 fe0e 	bl	8013166 <HAL_UARTEx_SetRxFifoThreshold>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002550:	f000 f9d2 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002554:	4804      	ldr	r0, [pc, #16]	; (8002568 <MX_USART6_UART_Init+0x90>)
 8002556:	f010 fd8f 	bl	8013078 <HAL_UARTEx_DisableFifoMode>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002560:	f000 f9ca 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	240016f8 	.word	0x240016f8
 800256c:	40011400 	.word	0x40011400

08002570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002576:	4b2d      	ldr	r3, [pc, #180]	; (800262c <MX_DMA_Init+0xbc>)
 8002578:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800257c:	4a2b      	ldr	r2, [pc, #172]	; (800262c <MX_DMA_Init+0xbc>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002586:	4b29      	ldr	r3, [pc, #164]	; (800262c <MX_DMA_Init+0xbc>)
 8002588:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	607b      	str	r3, [r7, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <MX_DMA_Init+0xbc>)
 8002596:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800259a:	4a24      	ldr	r2, [pc, #144]	; (800262c <MX_DMA_Init+0xbc>)
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025a4:	4b21      	ldr	r3, [pc, #132]	; (800262c <MX_DMA_Init+0xbc>)
 80025a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	200b      	movs	r0, #11
 80025b8:	f003 fef5 	bl	80063a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80025bc:	200b      	movs	r0, #11
 80025be:	f003 ff0c 	bl	80063da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2100      	movs	r1, #0
 80025c6:	200c      	movs	r0, #12
 80025c8:	f003 feed 	bl	80063a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80025cc:	200c      	movs	r0, #12
 80025ce:	f003 ff04 	bl	80063da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	200d      	movs	r0, #13
 80025d8:	f003 fee5 	bl	80063a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80025dc:	200d      	movs	r0, #13
 80025de:	f003 fefc 	bl	80063da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2100      	movs	r1, #0
 80025e6:	200e      	movs	r0, #14
 80025e8:	f003 fedd 	bl	80063a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80025ec:	200e      	movs	r0, #14
 80025ee:	f003 fef4 	bl	80063da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	200f      	movs	r0, #15
 80025f8:	f003 fed5 	bl	80063a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80025fc:	200f      	movs	r0, #15
 80025fe:	f003 feec 	bl	80063da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	2010      	movs	r0, #16
 8002608:	f003 fecd 	bl	80063a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800260c:	2010      	movs	r0, #16
 800260e:	f003 fee4 	bl	80063da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	2100      	movs	r1, #0
 8002616:	2046      	movs	r0, #70	; 0x46
 8002618:	f003 fec5 	bl	80063a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800261c:	2046      	movs	r0, #70	; 0x46
 800261e:	f003 fedc 	bl	80063da <HAL_NVIC_EnableIRQ>

}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	58024400 	.word	0x58024400

08002630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08c      	sub	sp, #48	; 0x30
 8002634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002636:	f107 031c 	add.w	r3, r7, #28
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	60da      	str	r2, [r3, #12]
 8002644:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002646:	4ba4      	ldr	r3, [pc, #656]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 8002648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264c:	4aa2      	ldr	r2, [pc, #648]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 800264e:	f043 0310 	orr.w	r3, r3, #16
 8002652:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002656:	4ba0      	ldr	r3, [pc, #640]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 8002658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002664:	4b9c      	ldr	r3, [pc, #624]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 8002666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266a:	4a9b      	ldr	r2, [pc, #620]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 800266c:	f043 0320 	orr.w	r3, r3, #32
 8002670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002674:	4b98      	ldr	r3, [pc, #608]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 8002676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002682:	4b95      	ldr	r3, [pc, #596]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 8002684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002688:	4a93      	ldr	r2, [pc, #588]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002692:	4b91      	ldr	r3, [pc, #580]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 8002694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	4b8d      	ldr	r3, [pc, #564]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 80026a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a6:	4a8c      	ldr	r2, [pc, #560]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b0:	4b89      	ldr	r3, [pc, #548]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 80026b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026be:	4b86      	ldr	r3, [pc, #536]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 80026c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c4:	4a84      	ldr	r2, [pc, #528]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 80026c6:	f043 0302 	orr.w	r3, r3, #2
 80026ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026ce:	4b82      	ldr	r3, [pc, #520]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 80026d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026dc:	4b7e      	ldr	r3, [pc, #504]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 80026de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e2:	4a7d      	ldr	r2, [pc, #500]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 80026e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026ec:	4b7a      	ldr	r3, [pc, #488]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 80026ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026fa:	4b77      	ldr	r3, [pc, #476]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 80026fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002700:	4a75      	ldr	r2, [pc, #468]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 8002702:	f043 0308 	orr.w	r3, r3, #8
 8002706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800270a:	4b73      	ldr	r3, [pc, #460]	; (80028d8 <MX_GPIO_Init+0x2a8>)
 800270c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002718:	2200      	movs	r2, #0
 800271a:	f241 5104 	movw	r1, #5380	; 0x1504
 800271e:	486f      	ldr	r0, [pc, #444]	; (80028dc <MX_GPIO_Init+0x2ac>)
 8002720:	f006 fc6e 	bl	8009000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002724:	2200      	movs	r2, #0
 8002726:	f248 0102 	movw	r1, #32770	; 0x8002
 800272a:	486d      	ldr	r0, [pc, #436]	; (80028e0 <MX_GPIO_Init+0x2b0>)
 800272c:	f006 fc68 	bl	8009000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002730:	2200      	movs	r2, #0
 8002732:	2130      	movs	r1, #48	; 0x30
 8002734:	486b      	ldr	r0, [pc, #428]	; (80028e4 <MX_GPIO_Init+0x2b4>)
 8002736:	f006 fc63 	bl	8009000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 800273a:	2200      	movs	r2, #0
 800273c:	2102      	movs	r1, #2
 800273e:	486a      	ldr	r0, [pc, #424]	; (80028e8 <MX_GPIO_Init+0x2b8>)
 8002740:	f006 fc5e 	bl	8009000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8002744:	2200      	movs	r2, #0
 8002746:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 800274a:	4868      	ldr	r0, [pc, #416]	; (80028ec <MX_GPIO_Init+0x2bc>)
 800274c:	f006 fc58 	bl	8009000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002750:	2200      	movs	r2, #0
 8002752:	210e      	movs	r1, #14
 8002754:	4866      	ldr	r0, [pc, #408]	; (80028f0 <MX_GPIO_Init+0x2c0>)
 8002756:	f006 fc53 	bl	8009000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 800275a:	2200      	movs	r2, #0
 800275c:	f240 3101 	movw	r1, #769	; 0x301
 8002760:	4864      	ldr	r0, [pc, #400]	; (80028f4 <MX_GPIO_Init+0x2c4>)
 8002762:	f006 fc4d 	bl	8009000 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002766:	f241 5304 	movw	r3, #5380	; 0x1504
 800276a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276c:	2301      	movs	r3, #1
 800276e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	4619      	mov	r1, r3
 800277e:	4857      	ldr	r0, [pc, #348]	; (80028dc <MX_GPIO_Init+0x2ac>)
 8002780:	f006 fa7e 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|GPIO_PIN_15;
 8002784:	f248 0302 	movw	r3, #32770	; 0x8002
 8002788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278a:	2301      	movs	r3, #1
 800278c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	2300      	movs	r3, #0
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f107 031c 	add.w	r3, r7, #28
 800279a:	4619      	mov	r1, r3
 800279c:	4850      	ldr	r0, [pc, #320]	; (80028e0 <MX_GPIO_Init+0x2b0>)
 800279e:	f006 fa6f 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80027a2:	2330      	movs	r3, #48	; 0x30
 80027a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a6:	2301      	movs	r3, #1
 80027a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ae:	2300      	movs	r3, #0
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b2:	f107 031c 	add.w	r3, r7, #28
 80027b6:	4619      	mov	r1, r3
 80027b8:	484a      	ldr	r0, [pc, #296]	; (80028e4 <MX_GPIO_Init+0x2b4>)
 80027ba:	f006 fa61 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 80027be:	2302      	movs	r3, #2
 80027c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c2:	2301      	movs	r3, #1
 80027c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 80027ce:	f107 031c 	add.w	r3, r7, #28
 80027d2:	4619      	mov	r1, r3
 80027d4:	4844      	ldr	r0, [pc, #272]	; (80028e8 <MX_GPIO_Init+0x2b8>)
 80027d6:	f006 fa53 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 80027da:	2304      	movs	r3, #4
 80027dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e2:	2301      	movs	r3, #1
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80027e6:	f107 031c 	add.w	r3, r7, #28
 80027ea:	4619      	mov	r1, r3
 80027ec:	483e      	ldr	r0, [pc, #248]	; (80028e8 <MX_GPIO_Init+0x2b8>)
 80027ee:	f006 fa47 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 80027f2:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80027f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f8:	2301      	movs	r3, #1
 80027fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2300      	movs	r3, #0
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	4619      	mov	r1, r3
 800280a:	4838      	ldr	r0, [pc, #224]	; (80028ec <MX_GPIO_Init+0x2bc>)
 800280c:	f006 fa38 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002810:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002816:	2300      	movs	r3, #0
 8002818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800281a:	2301      	movs	r3, #1
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	4619      	mov	r1, r3
 8002824:	4831      	ldr	r0, [pc, #196]	; (80028ec <MX_GPIO_Init+0x2bc>)
 8002826:	f006 fa2b 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 800282a:	2301      	movs	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002832:	2301      	movs	r3, #1
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002836:	f107 031c 	add.w	r3, r7, #28
 800283a:	4619      	mov	r1, r3
 800283c:	482c      	ldr	r0, [pc, #176]	; (80028f0 <MX_GPIO_Init+0x2c0>)
 800283e:	f006 fa1f 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002842:	230e      	movs	r3, #14
 8002844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002846:	2301      	movs	r3, #1
 8002848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284e:	2300      	movs	r3, #0
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002852:	f107 031c 	add.w	r3, r7, #28
 8002856:	4619      	mov	r1, r3
 8002858:	4825      	ldr	r0, [pc, #148]	; (80028f0 <MX_GPIO_Init+0x2c0>)
 800285a:	f006 fa11 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 800285e:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002864:	2300      	movs	r3, #0
 8002866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002868:	2301      	movs	r3, #1
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800286c:	f107 031c 	add.w	r3, r7, #28
 8002870:	4619      	mov	r1, r3
 8002872:	481a      	ldr	r0, [pc, #104]	; (80028dc <MX_GPIO_Init+0x2ac>)
 8002874:	f006 fa04 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 8002878:	f240 3301 	movw	r3, #769	; 0x301
 800287c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287e:	2301      	movs	r3, #1
 8002880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	2300      	movs	r3, #0
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800288a:	f107 031c 	add.w	r3, r7, #28
 800288e:	4619      	mov	r1, r3
 8002890:	4818      	ldr	r0, [pc, #96]	; (80028f4 <MX_GPIO_Init+0x2c4>)
 8002892:	f006 f9f5 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002896:	2310      	movs	r3, #16
 8002898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80028a2:	f107 031c 	add.w	r3, r7, #28
 80028a6:	4619      	mov	r1, r3
 80028a8:	4811      	ldr	r0, [pc, #68]	; (80028f0 <MX_GPIO_Init+0x2c0>)
 80028aa:	f006 f9e9 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80028c0:	2300      	movs	r3, #0
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c4:	f107 031c 	add.w	r3, r7, #28
 80028c8:	4619      	mov	r1, r3
 80028ca:	4805      	ldr	r0, [pc, #20]	; (80028e0 <MX_GPIO_Init+0x2b0>)
 80028cc:	f006 f9d8 	bl	8008c80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028d0:	bf00      	nop
 80028d2:	3730      	adds	r7, #48	; 0x30
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	58024400 	.word	0x58024400
 80028dc:	58021000 	.word	0x58021000
 80028e0:	58020000 	.word	0x58020000
 80028e4:	58020800 	.word	0x58020800
 80028e8:	58020400 	.word	0x58020400
 80028ec:	58021400 	.word	0x58021400
 80028f0:	58021800 	.word	0x58021800
 80028f4:	58020c00 	.word	0x58020c00

080028f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028fc:	b672      	cpsid	i
}
 80028fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002900:	e7fe      	b.n	8002900 <Error_Handler+0x8>
	...

08002904 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
void MX_RNG_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <MX_RNG_Init+0x2c>)
 800290a:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <MX_RNG_Init+0x30>)
 800290c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <MX_RNG_Init+0x2c>)
 8002910:	2200      	movs	r2, #0
 8002912:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002914:	4806      	ldr	r0, [pc, #24]	; (8002930 <MX_RNG_Init+0x2c>)
 8002916:	f00b fb87 	bl	800e028 <HAL_RNG_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002920:	f7ff ffea 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
  initialized = 1;
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <MX_RNG_Init+0x34>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]
  /* USER CODE END RNG_Init 2 */

}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	240037fc 	.word	0x240037fc
 8002934:	48021800 	.word	0x48021800
 8002938:	240037f8 	.word	0x240037f8

0800293c <rand_range>:


uint32_t rand_range(uint32_t a, uint32_t b) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
	if(!initialized)
 8002946:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <rand_range+0x7c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <rand_range+0x26>
	{
		HAL_Delay(100);
 800294e:	2064      	movs	r0, #100	; 0x64
 8002950:	f001 fc58 	bl	8004204 <HAL_Delay>
		CDC_Transmit_HS("Random not initialized!\n", strlen("Random not initialized!\n"));
 8002954:	2118      	movs	r1, #24
 8002956:	4819      	ldr	r0, [pc, #100]	; (80029bc <rand_range+0x80>)
 8002958:	f018 f852 	bl	801aa00 <CDC_Transmit_HS>
		return -1;
 800295c:	f04f 33ff 	mov.w	r3, #4294967295
 8002960:	e026      	b.n	80029b0 <rand_range+0x74>
	}

	uint32_t rand = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]
	uint32_t MAX = 4294967295;
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
 800296a:	60fb      	str	r3, [r7, #12]
	if(b>a && HAL_RNG_GenerateRandomNumber(&hrng, &rand) == HAL_OK)
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	d914      	bls.n	800299e <rand_range+0x62>
 8002974:	f107 0308 	add.w	r3, r7, #8
 8002978:	4619      	mov	r1, r3
 800297a:	4811      	ldr	r0, [pc, #68]	; (80029c0 <rand_range+0x84>)
 800297c:	f00b fbf8 	bl	800e170 <HAL_RNG_GenerateRandomNumber>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10b      	bne.n	800299e <rand_range+0x62>
	{
		return a+rand/(MAX/(b-a));
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	6839      	ldr	r1, [r7, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	1acb      	subs	r3, r1, r3
 800298e:	68f9      	ldr	r1, [r7, #12]
 8002990:	fbb1 f3f3 	udiv	r3, r1, r3
 8002994:	fbb2 f2f3 	udiv	r2, r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4413      	add	r3, r2
 800299c:	e008      	b.n	80029b0 <rand_range+0x74>
	}
	else
	{
		HAL_Delay(100);
 800299e:	2064      	movs	r0, #100	; 0x64
 80029a0:	f001 fc30 	bl	8004204 <HAL_Delay>
		CDC_Transmit_HS("rng error\n", strlen("rng error\n"));
 80029a4:	210a      	movs	r1, #10
 80029a6:	4807      	ldr	r0, [pc, #28]	; (80029c4 <rand_range+0x88>)
 80029a8:	f018 f82a 	bl	801aa00 <CDC_Transmit_HS>
	}
	return -1;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	240037f8 	.word	0x240037f8
 80029bc:	08020180 	.word	0x08020180
 80029c0:	240037fc 	.word	0x240037fc
 80029c4:	0802019c 	.word	0x0802019c

080029c8 <disarm>:
extern uint32_t LED_Color_Data[NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3][3];
extern FATFS FatFs;
extern FIL Fil;
extern FRESULT FR_Status;

int disarm(char *state) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2102      	movs	r1, #2
 80029d4:	482d      	ldr	r0, [pc, #180]	; (8002a8c <disarm+0xc4>)
 80029d6:	f006 fb13 	bl	8009000 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);

	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2102      	movs	r1, #2
 80029de:	482c      	ldr	r0, [pc, #176]	; (8002a90 <disarm+0xc8>)
 80029e0:	f006 fb0e 	bl	8009000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 80029e4:	2200      	movs	r2, #0
 80029e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029ea:	482a      	ldr	r0, [pc, #168]	; (8002a94 <disarm+0xcc>)
 80029ec:	f006 fb08 	bl	8009000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 80029f0:	2200      	movs	r2, #0
 80029f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029f6:	4827      	ldr	r0, [pc, #156]	; (8002a94 <disarm+0xcc>)
 80029f8:	f006 fb02 	bl	8009000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80029fc:	2200      	movs	r2, #0
 80029fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a02:	4824      	ldr	r0, [pc, #144]	; (8002a94 <disarm+0xcc>)
 8002a04:	f006 fafc 	bl	8009000 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	4822      	ldr	r0, [pc, #136]	; (8002a98 <disarm+0xd0>)
 8002a0e:	f006 faf7 	bl	8009000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a18:	4820      	ldr	r0, [pc, #128]	; (8002a9c <disarm+0xd4>)
 8002a1a:	f006 faf1 	bl	8009000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a24:	481d      	ldr	r0, [pc, #116]	; (8002a9c <disarm+0xd4>)
 8002a26:	f006 faeb 	bl	8009000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a30:	481a      	ldr	r0, [pc, #104]	; (8002a9c <disarm+0xd4>)
 8002a32:	f006 fae5 	bl	8009000 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002a36:	210c      	movs	r1, #12
 8002a38:	4819      	ldr	r0, [pc, #100]	; (8002aa0 <disarm+0xd8>)
 8002a3a:	f00d ff4f 	bl	80108dc <HAL_TIM_PWM_Start>
	setServo(1, 0);
 8002a3e:	2100      	movs	r1, #0
 8002a40:	2001      	movs	r0, #1
 8002a42:	f7fe fd4d 	bl	80014e0 <setServo>

	LED_Color_Data[7][0] = 255;
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <disarm+0xdc>)
 8002a48:	22ff      	movs	r2, #255	; 0xff
 8002a4a:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 0;
 8002a4c:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <disarm+0xdc>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <disarm+0xdc>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	65da      	str	r2, [r3, #92]	; 0x5c

	LED_Color_Data[2][0] = 255;
 8002a58:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <disarm+0xdc>)
 8002a5a:	22ff      	movs	r2, #255	; 0xff
 8002a5c:	619a      	str	r2, [r3, #24]
	LED_Color_Data[2][1] = 0;
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <disarm+0xdc>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	61da      	str	r2, [r3, #28]
	LED_Color_Data[2][2] = 0;
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <disarm+0xdc>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	621a      	str	r2, [r3, #32]
	setLEDs();
 8002a6a:	f7fe fd81 	bl	8001570 <setLEDs>

	strcpy(state, "DISARMED");
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	490d      	ldr	r1, [pc, #52]	; (8002aa8 <disarm+0xe0>)
 8002a72:	461a      	mov	r2, r3
 8002a74:	460b      	mov	r3, r1
 8002a76:	cb03      	ldmia	r3!, {r0, r1}
 8002a78:	6010      	str	r0, [r2, #0]
 8002a7a:	6051      	str	r1, [r2, #4]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	7213      	strb	r3, [r2, #8]
	return 0;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	58020000 	.word	0x58020000
 8002a90:	58020400 	.word	0x58020400
 8002a94:	58021400 	.word	0x58021400
 8002a98:	58021800 	.word	0x58021800
 8002a9c:	58021000 	.word	0x58021000
 8002aa0:	240012dc 	.word	0x240012dc
 8002aa4:	24000cc4 	.word	0x24000cc4
 8002aa8:	080201a8 	.word	0x080201a8

08002aac <arm>:

int arm(char *state) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	4810      	ldr	r0, [pc, #64]	; (8002afc <arm+0x50>)
 8002aba:	f006 faa1 	bl	8009000 <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002abe:	210c      	movs	r1, #12
 8002ac0:	480f      	ldr	r0, [pc, #60]	; (8002b00 <arm+0x54>)
 8002ac2:	f00d ff0b 	bl	80108dc <HAL_TIM_PWM_Start>
	setServo(1, 100);
 8002ac6:	2164      	movs	r1, #100	; 0x64
 8002ac8:	2001      	movs	r0, #1
 8002aca:	f7fe fd09 	bl	80014e0 <setServo>

	strcpy(state, "ARMED");
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a0c      	ldr	r2, [pc, #48]	; (8002b04 <arm+0x58>)
 8002ad2:	6810      	ldr	r0, [r2, #0]
 8002ad4:	6018      	str	r0, [r3, #0]
 8002ad6:	8892      	ldrh	r2, [r2, #4]
 8002ad8:	809a      	strh	r2, [r3, #4]
	LED_Color_Data[7][0] = 0;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <arm+0x5c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 255;
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <arm+0x5c>)
 8002ae2:	22ff      	movs	r2, #255	; 0xff
 8002ae4:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 8002ae6:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <arm+0x5c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	65da      	str	r2, [r3, #92]	; 0x5c
	setLEDs();
 8002aec:	f7fe fd40 	bl	8001570 <setLEDs>
	return 0;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	58020000 	.word	0x58020000
 8002b00:	240012dc 	.word	0x240012dc
 8002b04:	080201b4 	.word	0x080201b4
 8002b08:	24000cc4 	.word	0x24000cc4

08002b0c <pyro_check_continuity>:

void pyro_check_continuity(uint8_t CONTS[]) {
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
	CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 8002b14:	2104      	movs	r1, #4
 8002b16:	4824      	ldr	r0, [pc, #144]	; (8002ba8 <pyro_check_continuity+0x9c>)
 8002b18:	f006 fa5a 	bl	8008fd0 <HAL_GPIO_ReadPin>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461a      	mov	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	701a      	strb	r2, [r3, #0]
	CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	1c5c      	adds	r4, r3, #1
 8002b28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b2c:	481f      	ldr	r0, [pc, #124]	; (8002bac <pyro_check_continuity+0xa0>)
 8002b2e:	f006 fa4f 	bl	8008fd0 <HAL_GPIO_ReadPin>
 8002b32:	4603      	mov	r3, r0
 8002b34:	7023      	strb	r3, [r4, #0]
	CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	1c9c      	adds	r4, r3, #2
 8002b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b3e:	481b      	ldr	r0, [pc, #108]	; (8002bac <pyro_check_continuity+0xa0>)
 8002b40:	f006 fa46 	bl	8008fd0 <HAL_GPIO_ReadPin>
 8002b44:	4603      	mov	r3, r0
 8002b46:	7023      	strb	r3, [r4, #0]
	CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	1cdc      	adds	r4, r3, #3
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4818      	ldr	r0, [pc, #96]	; (8002bb0 <pyro_check_continuity+0xa4>)
 8002b50:	f006 fa3e 	bl	8008fd0 <HAL_GPIO_ReadPin>
 8002b54:	4603      	mov	r3, r0
 8002b56:	7023      	strb	r3, [r4, #0]
	CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	1d1c      	adds	r4, r3, #4
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	4815      	ldr	r0, [pc, #84]	; (8002bb4 <pyro_check_continuity+0xa8>)
 8002b60:	f006 fa36 	bl	8008fd0 <HAL_GPIO_ReadPin>
 8002b64:	4603      	mov	r3, r0
 8002b66:	7023      	strb	r3, [r4, #0]
	CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	1d5c      	adds	r4, r3, #5
 8002b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b70:	4810      	ldr	r0, [pc, #64]	; (8002bb4 <pyro_check_continuity+0xa8>)
 8002b72:	f006 fa2d 	bl	8008fd0 <HAL_GPIO_ReadPin>
 8002b76:	4603      	mov	r3, r0
 8002b78:	7023      	strb	r3, [r4, #0]
	CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	1d9c      	adds	r4, r3, #6
 8002b7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b82:	480c      	ldr	r0, [pc, #48]	; (8002bb4 <pyro_check_continuity+0xa8>)
 8002b84:	f006 fa24 	bl	8008fd0 <HAL_GPIO_ReadPin>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	7023      	strb	r3, [r4, #0]
	CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	1ddc      	adds	r4, r3, #7
 8002b90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b94:	4807      	ldr	r0, [pc, #28]	; (8002bb4 <pyro_check_continuity+0xa8>)
 8002b96:	f006 fa1b 	bl	8008fd0 <HAL_GPIO_ReadPin>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	7023      	strb	r3, [r4, #0]
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd90      	pop	{r4, r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	58020400 	.word	0x58020400
 8002bac:	58021400 	.word	0x58021400
 8002bb0:	58021800 	.word	0x58021800
 8002bb4:	58021000 	.word	0x58021000

08002bb8 <rocketReliableReceiveHandle>:
char command[MAX_PKT_LENGTH];
char streamed_data[100];
//length is an arbitrary number, but it's unlikely to have more than 200
char* rocket_messages[200];

void rocketReliableReceiveHandle(char* received_packet) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	strcpy(command, received_packet);
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <rocketReliableReceiveHandle+0x18>)
 8002bc4:	f019 fb81 	bl	801c2ca <strcpy>
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	240039d4 	.word	0x240039d4

08002bd4 <rocketStreamReceiveHandle>:

void rocketStreamReceiveHandle(char* received_packet) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	CDC_Transmit_HS(received_packet, strlen(received_packet));
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fd fbf7 	bl	80003d0 <strlen>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4619      	mov	r1, r3
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f017 ff0a 	bl	801aa00 <CDC_Transmit_HS>
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <rocketStreamSendHandle>:

char* rocketStreamSendHandle(int remainingPacketCount) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	if (strcmp(state, "ARMED") == 0) {
 8002bfc:	491d      	ldr	r1, [pc, #116]	; (8002c74 <rocketStreamSendHandle+0x80>)
 8002bfe:	481e      	ldr	r0, [pc, #120]	; (8002c78 <rocketStreamSendHandle+0x84>)
 8002c00:	f7fd fb86 	bl	8000310 <strcmp>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d12f      	bne.n	8002c6a <rocketStreamSendHandle+0x76>
		if (strcmp(command, "FIRE") == 0) {
 8002c0a:	491c      	ldr	r1, [pc, #112]	; (8002c7c <rocketStreamSendHandle+0x88>)
 8002c0c:	481c      	ldr	r0, [pc, #112]	; (8002c80 <rocketStreamSendHandle+0x8c>)
 8002c0e:	f7fd fb7f 	bl	8000310 <strcmp>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d128      	bne.n	8002c6a <rocketStreamSendHandle+0x76>
			HAL_ADC_Start(&hadc1); // start the adc
 8002c18:	481a      	ldr	r0, [pc, #104]	; (8002c84 <rocketStreamSendHandle+0x90>)
 8002c1a:	f002 f821 	bl	8004c60 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8002c1e:	2164      	movs	r1, #100	; 0x64
 8002c20:	4818      	ldr	r0, [pc, #96]	; (8002c84 <rocketStreamSendHandle+0x90>)
 8002c22:	f002 f91b 	bl	8004e5c <HAL_ADC_PollForConversion>

			uint16_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 8002c26:	4817      	ldr	r0, [pc, #92]	; (8002c84 <rocketStreamSendHandle+0x90>)
 8002c28:	f002 fa0c 	bl	8005044 <HAL_ADC_GetValue>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	81fb      	strh	r3, [r7, #14]
			sprintf(streamed_data, "%d, %d\n", HAL_GetTick(), adc_val);
 8002c30:	f001 fadc 	bl	80041ec <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	89fb      	ldrh	r3, [r7, #14]
 8002c38:	4913      	ldr	r1, [pc, #76]	; (8002c88 <rocketStreamSendHandle+0x94>)
 8002c3a:	4814      	ldr	r0, [pc, #80]	; (8002c8c <rocketStreamSendHandle+0x98>)
 8002c3c:	f019 fa34 	bl	801c0a8 <siprintf>
			FR_Status = f_open(&Fil, "MyTextFile.txt",
 8002c40:	2232      	movs	r2, #50	; 0x32
 8002c42:	4913      	ldr	r1, [pc, #76]	; (8002c90 <rocketStreamSendHandle+0x9c>)
 8002c44:	4813      	ldr	r0, [pc, #76]	; (8002c94 <rocketStreamSendHandle+0xa0>)
 8002c46:	f017 f855 	bl	8019cf4 <f_open>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <rocketStreamSendHandle+0xa4>)
 8002c50:	701a      	strb	r2, [r3, #0]
					FA_OPEN_APPEND | FA_WRITE);
			f_puts(streamed_data, &Fil);
 8002c52:	4910      	ldr	r1, [pc, #64]	; (8002c94 <rocketStreamSendHandle+0xa0>)
 8002c54:	480d      	ldr	r0, [pc, #52]	; (8002c8c <rocketStreamSendHandle+0x98>)
 8002c56:	f017 fccc 	bl	801a5f2 <f_puts>
			f_close(&Fil);
 8002c5a:	480e      	ldr	r0, [pc, #56]	; (8002c94 <rocketStreamSendHandle+0xa0>)
 8002c5c:	f017 fc28 	bl	801a4b0 <f_close>
			HAL_ADC_Stop(&hadc1); // stop adc
 8002c60:	4808      	ldr	r0, [pc, #32]	; (8002c84 <rocketStreamSendHandle+0x90>)
 8002c62:	f002 f8c7 	bl	8004df4 <HAL_ADC_Stop>
			return streamed_data;
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <rocketStreamSendHandle+0x98>)
 8002c68:	e000      	b.n	8002c6c <rocketStreamSendHandle+0x78>
		}
	}
	return "";
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <rocketStreamSendHandle+0xa8>)
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	080201b4 	.word	0x080201b4
 8002c78:	24000000 	.word	0x24000000
 8002c7c:	080201bc 	.word	0x080201bc
 8002c80:	240039d4 	.word	0x240039d4
 8002c84:	24000d6c 	.word	0x24000d6c
 8002c88:	080201c4 	.word	0x080201c4
 8002c8c:	24003ad4 	.word	0x24003ad4
 8002c90:	080201cc 	.word	0x080201cc
 8002c94:	240027c4 	.word	0x240027c4
 8002c98:	240037f4 	.word	0x240037f4
 8002c9c:	080201dc 	.word	0x080201dc

08002ca0 <rocketReliableSendHandle>:

struct ReliableSendConfig rocketReliableSendHandle() {
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	struct ReliableSendConfig config;
	int message_count=0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
	if (strcmp(state, "DISARMED") == 0) {
 8002cac:	4984      	ldr	r1, [pc, #528]	; (8002ec0 <rocketReliableSendHandle+0x220>)
 8002cae:	4885      	ldr	r0, [pc, #532]	; (8002ec4 <rocketReliableSendHandle+0x224>)
 8002cb0:	f7fd fb2e 	bl	8000310 <strcmp>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f040 8088 	bne.w	8002dcc <rocketReliableSendHandle+0x12c>
		if (strcmp(command, "ARM") == 0) {
 8002cbc:	4982      	ldr	r1, [pc, #520]	; (8002ec8 <rocketReliableSendHandle+0x228>)
 8002cbe:	4883      	ldr	r0, [pc, #524]	; (8002ecc <rocketReliableSendHandle+0x22c>)
 8002cc0:	f7fd fb26 	bl	8000310 <strcmp>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d124      	bne.n	8002d14 <rocketReliableSendHandle+0x74>

			if (!arm(state)) {
 8002cca:	487e      	ldr	r0, [pc, #504]	; (8002ec4 <rocketReliableSendHandle+0x224>)
 8002ccc:	f7ff feee 	bl	8002aac <arm>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10d      	bne.n	8002cf2 <rocketReliableSendHandle+0x52>
				strcpy(status, "ARM SUCCESS");
 8002cd6:	4b7e      	ldr	r3, [pc, #504]	; (8002ed0 <rocketReliableSendHandle+0x230>)
 8002cd8:	4a7e      	ldr	r2, [pc, #504]	; (8002ed4 <rocketReliableSendHandle+0x234>)
 8002cda:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 				rocket_messages[message_count] = status;
 8002ce0:	4a7d      	ldr	r2, [pc, #500]	; (8002ed8 <rocketReliableSendHandle+0x238>)
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	497a      	ldr	r1, [pc, #488]	; (8002ed0 <rocketReliableSendHandle+0x230>)
 8002ce6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				message_count++;
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	3301      	adds	r3, #1
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf0:	e0d4      	b.n	8002e9c <rocketReliableSendHandle+0x1fc>
			} else {
				strcpy(status, "ARM UNSUCCESSFUL");
 8002cf2:	4a77      	ldr	r2, [pc, #476]	; (8002ed0 <rocketReliableSendHandle+0x230>)
 8002cf4:	4b79      	ldr	r3, [pc, #484]	; (8002edc <rocketReliableSendHandle+0x23c>)
 8002cf6:	4614      	mov	r4, r2
 8002cf8:	461d      	mov	r5, r3
 8002cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cfe:	682b      	ldr	r3, [r5, #0]
 8002d00:	7023      	strb	r3, [r4, #0]
 				rocket_messages[message_count] = status;
 8002d02:	4a75      	ldr	r2, [pc, #468]	; (8002ed8 <rocketReliableSendHandle+0x238>)
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	4972      	ldr	r1, [pc, #456]	; (8002ed0 <rocketReliableSendHandle+0x230>)
 8002d08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				message_count++;
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	3301      	adds	r3, #1
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
 8002d12:	e0c3      	b.n	8002e9c <rocketReliableSendHandle+0x1fc>
			}
		} else if (strcmp(command, "DISARM") == 0) {
 8002d14:	4972      	ldr	r1, [pc, #456]	; (8002ee0 <rocketReliableSendHandle+0x240>)
 8002d16:	486d      	ldr	r0, [pc, #436]	; (8002ecc <rocketReliableSendHandle+0x22c>)
 8002d18:	f7fd fafa 	bl	8000310 <strcmp>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d110      	bne.n	8002d44 <rocketReliableSendHandle+0xa4>
			strcpy(status, "ALREADY DISARMED");
 8002d22:	4a6b      	ldr	r2, [pc, #428]	; (8002ed0 <rocketReliableSendHandle+0x230>)
 8002d24:	4b6f      	ldr	r3, [pc, #444]	; (8002ee4 <rocketReliableSendHandle+0x244>)
 8002d26:	4614      	mov	r4, r2
 8002d28:	461d      	mov	r5, r3
 8002d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d2e:	682b      	ldr	r3, [r5, #0]
 8002d30:	7023      	strb	r3, [r4, #0]
			rocket_messages[message_count] = status;
 8002d32:	4a69      	ldr	r2, [pc, #420]	; (8002ed8 <rocketReliableSendHandle+0x238>)
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	4966      	ldr	r1, [pc, #408]	; (8002ed0 <rocketReliableSendHandle+0x230>)
 8002d38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			message_count++;
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	3301      	adds	r3, #1
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
 8002d42:	e0ab      	b.n	8002e9c <rocketReliableSendHandle+0x1fc>
		} else if (strcmp(command, "CONT") == 0) {
 8002d44:	4968      	ldr	r1, [pc, #416]	; (8002ee8 <rocketReliableSendHandle+0x248>)
 8002d46:	4861      	ldr	r0, [pc, #388]	; (8002ecc <rocketReliableSendHandle+0x22c>)
 8002d48:	f7fd fae2 	bl	8000310 <strcmp>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f040 80a4 	bne.w	8002e9c <rocketReliableSendHandle+0x1fc>
			uint8_t CONTS[8];
			pyro_check_continuity(CONTS);
 8002d54:	f107 0308 	add.w	r3, r7, #8
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fed7 	bl	8002b0c <pyro_check_continuity>


			for (int i = 0; i < 8; i++) {
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	e02f      	b.n	8002dc4 <rocketReliableSendHandle+0x124>
				if (CONTS[i]) {
 8002d64:	f107 0208 	add.w	r2, r7, #8
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00c      	beq.n	8002d8c <rocketReliableSendHandle+0xec>
					sprintf(continuities[i], "PYRO %d DOESN'T HAVE CONTINUITY",
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	2232      	movs	r2, #50	; 0x32
 8002d76:	fb02 f303 	mul.w	r3, r2, r3
 8002d7a:	4a5c      	ldr	r2, [pc, #368]	; (8002eec <rocketReliableSendHandle+0x24c>)
 8002d7c:	1898      	adds	r0, r3, r2
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	3301      	adds	r3, #1
 8002d82:	461a      	mov	r2, r3
 8002d84:	495a      	ldr	r1, [pc, #360]	; (8002ef0 <rocketReliableSendHandle+0x250>)
 8002d86:	f019 f98f 	bl	801c0a8 <siprintf>
 8002d8a:	e00b      	b.n	8002da4 <rocketReliableSendHandle+0x104>
							i + 1);
				} else {
					sprintf(continuities[i], "PYRO %d HAS CONTINUITY", i + 1);
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	2232      	movs	r2, #50	; 0x32
 8002d90:	fb02 f303 	mul.w	r3, r2, r3
 8002d94:	4a55      	ldr	r2, [pc, #340]	; (8002eec <rocketReliableSendHandle+0x24c>)
 8002d96:	1898      	adds	r0, r3, r2
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4955      	ldr	r1, [pc, #340]	; (8002ef4 <rocketReliableSendHandle+0x254>)
 8002da0:	f019 f982 	bl	801c0a8 <siprintf>
				}
				rocket_messages[message_count] = continuities[i];
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	2232      	movs	r2, #50	; 0x32
 8002da8:	fb02 f303 	mul.w	r3, r2, r3
 8002dac:	4a4f      	ldr	r2, [pc, #316]	; (8002eec <rocketReliableSendHandle+0x24c>)
 8002dae:	441a      	add	r2, r3
 8002db0:	4949      	ldr	r1, [pc, #292]	; (8002ed8 <rocketReliableSendHandle+0x238>)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				message_count++;
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	3301      	adds	r3, #1
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
			for (int i = 0; i < 8; i++) {
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	623b      	str	r3, [r7, #32]
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	2b07      	cmp	r3, #7
 8002dc8:	ddcc      	ble.n	8002d64 <rocketReliableSendHandle+0xc4>
 8002dca:	e067      	b.n	8002e9c <rocketReliableSendHandle+0x1fc>
			}
		}
	} else if (strcmp(state, "ARMED") == 0) {
 8002dcc:	494a      	ldr	r1, [pc, #296]	; (8002ef8 <rocketReliableSendHandle+0x258>)
 8002dce:	483d      	ldr	r0, [pc, #244]	; (8002ec4 <rocketReliableSendHandle+0x224>)
 8002dd0:	f7fd fa9e 	bl	8000310 <strcmp>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d14a      	bne.n	8002e70 <rocketReliableSendHandle+0x1d0>
		if (strcmp(command, "DISARM") == 0) {
 8002dda:	4941      	ldr	r1, [pc, #260]	; (8002ee0 <rocketReliableSendHandle+0x240>)
 8002ddc:	483b      	ldr	r0, [pc, #236]	; (8002ecc <rocketReliableSendHandle+0x22c>)
 8002dde:	f7fd fa97 	bl	8000310 <strcmp>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d128      	bne.n	8002e3a <rocketReliableSendHandle+0x19a>
			if (!disarm(state)) {
 8002de8:	4836      	ldr	r0, [pc, #216]	; (8002ec4 <rocketReliableSendHandle+0x224>)
 8002dea:	f7ff fded 	bl	80029c8 <disarm>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d111      	bne.n	8002e18 <rocketReliableSendHandle+0x178>
				strcpy(status, "DISARM SUCCESS");
 8002df4:	4a36      	ldr	r2, [pc, #216]	; (8002ed0 <rocketReliableSendHandle+0x230>)
 8002df6:	4b41      	ldr	r3, [pc, #260]	; (8002efc <rocketReliableSendHandle+0x25c>)
 8002df8:	4614      	mov	r4, r2
 8002dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dfc:	c407      	stmia	r4!, {r0, r1, r2}
 8002dfe:	8023      	strh	r3, [r4, #0]
 8002e00:	3402      	adds	r4, #2
 8002e02:	0c1b      	lsrs	r3, r3, #16
 8002e04:	7023      	strb	r3, [r4, #0]
				rocket_messages[message_count] = status;
 8002e06:	4a34      	ldr	r2, [pc, #208]	; (8002ed8 <rocketReliableSendHandle+0x238>)
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	4931      	ldr	r1, [pc, #196]	; (8002ed0 <rocketReliableSendHandle+0x230>)
 8002e0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				message_count++;
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	3301      	adds	r3, #1
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	e041      	b.n	8002e9c <rocketReliableSendHandle+0x1fc>
			} else {
				strcpy(status, "DISARM UNSUCCESS");
 8002e18:	4a2d      	ldr	r2, [pc, #180]	; (8002ed0 <rocketReliableSendHandle+0x230>)
 8002e1a:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <rocketReliableSendHandle+0x260>)
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	461d      	mov	r5, r3
 8002e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e24:	682b      	ldr	r3, [r5, #0]
 8002e26:	7023      	strb	r3, [r4, #0]
				rocket_messages[message_count] = status;
 8002e28:	4a2b      	ldr	r2, [pc, #172]	; (8002ed8 <rocketReliableSendHandle+0x238>)
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	4928      	ldr	r1, [pc, #160]	; (8002ed0 <rocketReliableSendHandle+0x230>)
 8002e2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				message_count++;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	3301      	adds	r3, #1
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
 8002e38:	e030      	b.n	8002e9c <rocketReliableSendHandle+0x1fc>
			}
		} else if (strcmp(command, "ARM") == 0) {
 8002e3a:	4923      	ldr	r1, [pc, #140]	; (8002ec8 <rocketReliableSendHandle+0x228>)
 8002e3c:	4823      	ldr	r0, [pc, #140]	; (8002ecc <rocketReliableSendHandle+0x22c>)
 8002e3e:	f7fd fa67 	bl	8000310 <strcmp>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10e      	bne.n	8002e66 <rocketReliableSendHandle+0x1c6>
			strcpy(status, "ALREADY ARMED");
 8002e48:	4a21      	ldr	r2, [pc, #132]	; (8002ed0 <rocketReliableSendHandle+0x230>)
 8002e4a:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <rocketReliableSendHandle+0x264>)
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e50:	c407      	stmia	r4!, {r0, r1, r2}
 8002e52:	8023      	strh	r3, [r4, #0]
			rocket_messages[message_count] = status;
 8002e54:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <rocketReliableSendHandle+0x238>)
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	491d      	ldr	r1, [pc, #116]	; (8002ed0 <rocketReliableSendHandle+0x230>)
 8002e5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			message_count++;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	3301      	adds	r3, #1
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
 8002e64:	e01a      	b.n	8002e9c <rocketReliableSendHandle+0x1fc>
		} else if (strcmp(command, "FIRE") == 0) {
 8002e66:	4928      	ldr	r1, [pc, #160]	; (8002f08 <rocketReliableSendHandle+0x268>)
 8002e68:	4818      	ldr	r0, [pc, #96]	; (8002ecc <rocketReliableSendHandle+0x22c>)
 8002e6a:	f7fd fa51 	bl	8000310 <strcmp>
 8002e6e:	e015      	b.n	8002e9c <rocketReliableSendHandle+0x1fc>

		}

	} else {
		strcpy(status, "state wrong!");
 8002e70:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <rocketReliableSendHandle+0x230>)
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <rocketReliableSendHandle+0x26c>)
 8002e74:	4614      	mov	r4, r2
 8002e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e78:	c407      	stmia	r4!, {r0, r1, r2}
 8002e7a:	7023      	strb	r3, [r4, #0]
		rocket_messages[message_count] = status;
 8002e7c:	4a16      	ldr	r2, [pc, #88]	; (8002ed8 <rocketReliableSendHandle+0x238>)
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	4913      	ldr	r1, [pc, #76]	; (8002ed0 <rocketReliableSendHandle+0x230>)
 8002e82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		message_count++;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	3301      	adds	r3, #1
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
		rocket_messages[message_count] = state;
 8002e8c:	4a12      	ldr	r2, [pc, #72]	; (8002ed8 <rocketReliableSendHandle+0x238>)
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	490c      	ldr	r1, [pc, #48]	; (8002ec4 <rocketReliableSendHandle+0x224>)
 8002e92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		message_count++;
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	3301      	adds	r3, #1
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	config.messages_count = message_count;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	61fb      	str	r3, [r7, #28]
	config.messages = rocket_messages;
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <rocketReliableSendHandle+0x238>)
 8002ea2:	61bb      	str	r3, [r7, #24]
	config.mode = RECEIVING_RELIABLE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
    return config;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	461c      	mov	r4, r3
 8002eac:	f107 0310 	add.w	r3, r7, #16
 8002eb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	3728      	adds	r7, #40	; 0x28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	080201a8 	.word	0x080201a8
 8002ec4:	24000000 	.word	0x24000000
 8002ec8:	080201e0 	.word	0x080201e0
 8002ecc:	240039d4 	.word	0x240039d4
 8002ed0:	240039a0 	.word	0x240039a0
 8002ed4:	080201e4 	.word	0x080201e4
 8002ed8:	24003b38 	.word	0x24003b38
 8002edc:	080201f0 	.word	0x080201f0
 8002ee0:	08020204 	.word	0x08020204
 8002ee4:	0802020c 	.word	0x0802020c
 8002ee8:	08020220 	.word	0x08020220
 8002eec:	24003810 	.word	0x24003810
 8002ef0:	08020228 	.word	0x08020228
 8002ef4:	08020248 	.word	0x08020248
 8002ef8:	080201b4 	.word	0x080201b4
 8002efc:	08020260 	.word	0x08020260
 8002f00:	08020270 	.word	0x08020270
 8002f04:	08020284 	.word	0x08020284
 8002f08:	080201bc 	.word	0x080201bc
 8002f0c:	08020294 	.word	0x08020294

08002f10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <HAL_MspInit+0x30>)
 8002f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f1c:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <HAL_MspInit+0x30>)
 8002f1e:	f043 0302 	orr.w	r3, r3, #2
 8002f22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_MspInit+0x30>)
 8002f28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	58024400 	.word	0x58024400

08002f44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08c      	sub	sp, #48	; 0x30
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4c:	f107 031c 	add.w	r3, r7, #28
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a5d      	ldr	r2, [pc, #372]	; (80030d8 <HAL_ADC_MspInit+0x194>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d159      	bne.n	800301a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f66:	4b5d      	ldr	r3, [pc, #372]	; (80030dc <HAL_ADC_MspInit+0x198>)
 8002f68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f6c:	4a5b      	ldr	r2, [pc, #364]	; (80030dc <HAL_ADC_MspInit+0x198>)
 8002f6e:	f043 0320 	orr.w	r3, r3, #32
 8002f72:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f76:	4b59      	ldr	r3, [pc, #356]	; (80030dc <HAL_ADC_MspInit+0x198>)
 8002f78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f84:	4b55      	ldr	r3, [pc, #340]	; (80030dc <HAL_ADC_MspInit+0x198>)
 8002f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f8a:	4a54      	ldr	r2, [pc, #336]	; (80030dc <HAL_ADC_MspInit+0x198>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f94:	4b51      	ldr	r3, [pc, #324]	; (80030dc <HAL_ADC_MspInit+0x198>)
 8002f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fae:	f107 031c 	add.w	r3, r7, #28
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	484a      	ldr	r0, [pc, #296]	; (80030e0 <HAL_ADC_MspInit+0x19c>)
 8002fb6:	f005 fe63 	bl	8008c80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002fba:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <HAL_ADC_MspInit+0x1a0>)
 8002fbc:	4a4a      	ldr	r2, [pc, #296]	; (80030e8 <HAL_ADC_MspInit+0x1a4>)
 8002fbe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002fc0:	4b48      	ldr	r3, [pc, #288]	; (80030e4 <HAL_ADC_MspInit+0x1a0>)
 8002fc2:	2209      	movs	r2, #9
 8002fc4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fc6:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <HAL_ADC_MspInit+0x1a0>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fcc:	4b45      	ldr	r3, [pc, #276]	; (80030e4 <HAL_ADC_MspInit+0x1a0>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fd2:	4b44      	ldr	r3, [pc, #272]	; (80030e4 <HAL_ADC_MspInit+0x1a0>)
 8002fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fd8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fda:	4b42      	ldr	r3, [pc, #264]	; (80030e4 <HAL_ADC_MspInit+0x1a0>)
 8002fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fe0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fe2:	4b40      	ldr	r3, [pc, #256]	; (80030e4 <HAL_ADC_MspInit+0x1a0>)
 8002fe4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fe8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002fea:	4b3e      	ldr	r3, [pc, #248]	; (80030e4 <HAL_ADC_MspInit+0x1a0>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ff0:	4b3c      	ldr	r3, [pc, #240]	; (80030e4 <HAL_ADC_MspInit+0x1a0>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ff6:	4b3b      	ldr	r3, [pc, #236]	; (80030e4 <HAL_ADC_MspInit+0x1a0>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ffc:	4839      	ldr	r0, [pc, #228]	; (80030e4 <HAL_ADC_MspInit+0x1a0>)
 8002ffe:	f003 fa07 	bl	8006410 <HAL_DMA_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8003008:	f7ff fc76 	bl	80028f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a35      	ldr	r2, [pc, #212]	; (80030e4 <HAL_ADC_MspInit+0x1a0>)
 8003010:	659a      	str	r2, [r3, #88]	; 0x58
 8003012:	4a34      	ldr	r2, [pc, #208]	; (80030e4 <HAL_ADC_MspInit+0x1a0>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003018:	e059      	b.n	80030ce <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a33      	ldr	r2, [pc, #204]	; (80030ec <HAL_ADC_MspInit+0x1a8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d154      	bne.n	80030ce <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_ADC_MspInit+0x198>)
 8003026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800302a:	4a2c      	ldr	r2, [pc, #176]	; (80030dc <HAL_ADC_MspInit+0x198>)
 800302c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003030:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003034:	4b29      	ldr	r3, [pc, #164]	; (80030dc <HAL_ADC_MspInit+0x198>)
 8003036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800303a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003042:	4b26      	ldr	r3, [pc, #152]	; (80030dc <HAL_ADC_MspInit+0x198>)
 8003044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003048:	4a24      	ldr	r2, [pc, #144]	; (80030dc <HAL_ADC_MspInit+0x198>)
 800304a:	f043 0304 	orr.w	r3, r3, #4
 800304e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003052:	4b22      	ldr	r3, [pc, #136]	; (80030dc <HAL_ADC_MspInit+0x198>)
 8003054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003060:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003064:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003068:	f001 f8f0 	bl	800424c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 800306c:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <HAL_ADC_MspInit+0x1ac>)
 800306e:	4a21      	ldr	r2, [pc, #132]	; (80030f4 <HAL_ADC_MspInit+0x1b0>)
 8003070:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003072:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <HAL_ADC_MspInit+0x1ac>)
 8003074:	2273      	movs	r2, #115	; 0x73
 8003076:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <HAL_ADC_MspInit+0x1ac>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800307e:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <HAL_ADC_MspInit+0x1ac>)
 8003080:	2200      	movs	r2, #0
 8003082:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003084:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <HAL_ADC_MspInit+0x1ac>)
 8003086:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800308a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800308c:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <HAL_ADC_MspInit+0x1ac>)
 800308e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003092:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003094:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <HAL_ADC_MspInit+0x1ac>)
 8003096:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800309a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800309c:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <HAL_ADC_MspInit+0x1ac>)
 800309e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030a2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <HAL_ADC_MspInit+0x1ac>)
 80030a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030aa:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030ac:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <HAL_ADC_MspInit+0x1ac>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80030b2:	480f      	ldr	r0, [pc, #60]	; (80030f0 <HAL_ADC_MspInit+0x1ac>)
 80030b4:	f003 f9ac 	bl	8006410 <HAL_DMA_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 80030be:	f7ff fc1b 	bl	80028f8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <HAL_ADC_MspInit+0x1ac>)
 80030c6:	659a      	str	r2, [r3, #88]	; 0x58
 80030c8:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <HAL_ADC_MspInit+0x1ac>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80030ce:	bf00      	nop
 80030d0:	3730      	adds	r7, #48	; 0x30
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40022000 	.word	0x40022000
 80030dc:	58024400 	.word	0x58024400
 80030e0:	58020000 	.word	0x58020000
 80030e4:	24000e4c 	.word	0x24000e4c
 80030e8:	40020088 	.word	0x40020088
 80030ec:	58026000 	.word	0x58026000
 80030f0:	24000ec4 	.word	0x24000ec4
 80030f4:	400204b8 	.word	0x400204b8

080030f8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b0b8      	sub	sp, #224	; 0xe0
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003100:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003110:	f107 0310 	add.w	r3, r7, #16
 8003114:	22b8      	movs	r2, #184	; 0xb8
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f019 f856 	bl	801c1ca <memset>
  if(hfdcan->Instance==FDCAN3)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a26      	ldr	r2, [pc, #152]	; (80031bc <HAL_FDCAN_MspInit+0xc4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d145      	bne.n	80031b4 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003128:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003134:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003138:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800313a:	f107 0310 	add.w	r3, r7, #16
 800313e:	4618      	mov	r0, r3
 8003140:	f008 fb8c 	bl	800b85c <HAL_RCCEx_PeriphCLKConfig>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800314a:	f7ff fbd5 	bl	80028f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800314e:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <HAL_FDCAN_MspInit+0xc8>)
 8003150:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003154:	4a1a      	ldr	r2, [pc, #104]	; (80031c0 <HAL_FDCAN_MspInit+0xc8>)
 8003156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <HAL_FDCAN_MspInit+0xc8>)
 8003160:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800316c:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <HAL_FDCAN_MspInit+0xc8>)
 800316e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003172:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <HAL_FDCAN_MspInit+0xc8>)
 8003174:	f043 0320 	orr.w	r3, r3, #32
 8003178:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800317c:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <HAL_FDCAN_MspInit+0xc8>)
 800317e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003182:	f003 0320 	and.w	r3, r3, #32
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800318a:	23c0      	movs	r3, #192	; 0xc0
 800318c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003190:	2302      	movs	r3, #2
 8003192:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319c:	2300      	movs	r3, #0
 800319e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80031a2:	2302      	movs	r3, #2
 80031a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80031ac:	4619      	mov	r1, r3
 80031ae:	4805      	ldr	r0, [pc, #20]	; (80031c4 <HAL_FDCAN_MspInit+0xcc>)
 80031b0:	f005 fd66 	bl	8008c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80031b4:	bf00      	nop
 80031b6:	37e0      	adds	r7, #224	; 0xe0
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	4000d400 	.word	0x4000d400
 80031c0:	58024400 	.word	0x58024400
 80031c4:	58021400 	.word	0x58021400

080031c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b0b8      	sub	sp, #224	; 0xe0
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031e0:	f107 0310 	add.w	r3, r7, #16
 80031e4:	22b8      	movs	r2, #184	; 0xb8
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f018 ffee 	bl	801c1ca <memset>
  if(hi2c->Instance==I2C2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a2a      	ldr	r2, [pc, #168]	; (800329c <HAL_I2C_MspInit+0xd4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d14d      	bne.n	8003294 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80031f8:	f04f 0208 	mov.w	r2, #8
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8003204:	2300      	movs	r3, #0
 8003206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800320a:	f107 0310 	add.w	r3, r7, #16
 800320e:	4618      	mov	r0, r3
 8003210:	f008 fb24 	bl	800b85c <HAL_RCCEx_PeriphCLKConfig>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800321a:	f7ff fb6d 	bl	80028f8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800321e:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_I2C_MspInit+0xd8>)
 8003220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003224:	4a1e      	ldr	r2, [pc, #120]	; (80032a0 <HAL_I2C_MspInit+0xd8>)
 8003226:	f043 0320 	orr.w	r3, r3, #32
 800322a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800322e:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <HAL_I2C_MspInit+0xd8>)
 8003230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800323c:	2303      	movs	r3, #3
 800323e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003242:	2312      	movs	r3, #18
 8003244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	2300      	movs	r3, #0
 800324a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324e:	2300      	movs	r3, #0
 8003250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003254:	2304      	movs	r3, #4
 8003256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800325a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800325e:	4619      	mov	r1, r3
 8003260:	4810      	ldr	r0, [pc, #64]	; (80032a4 <HAL_I2C_MspInit+0xdc>)
 8003262:	f005 fd0d 	bl	8008c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <HAL_I2C_MspInit+0xd8>)
 8003268:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800326c:	4a0c      	ldr	r2, [pc, #48]	; (80032a0 <HAL_I2C_MspInit+0xd8>)
 800326e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003272:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <HAL_I2C_MspInit+0xd8>)
 8003278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800327c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8003284:	2200      	movs	r2, #0
 8003286:	2101      	movs	r1, #1
 8003288:	2021      	movs	r0, #33	; 0x21
 800328a:	f003 f88c 	bl	80063a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800328e:	2021      	movs	r0, #33	; 0x21
 8003290:	f003 f8a3 	bl	80063da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003294:	bf00      	nop
 8003296:	37e0      	adds	r7, #224	; 0xe0
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40005800 	.word	0x40005800
 80032a0:	58024400 	.word	0x58024400
 80032a4:	58021400 	.word	0x58021400

080032a8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b0b2      	sub	sp, #200	; 0xc8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032b0:	f107 0310 	add.w	r3, r7, #16
 80032b4:	22b8      	movs	r2, #184	; 0xb8
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f018 ff86 	bl	801c1ca <memset>
  if(hrng->Instance==RNG)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a14      	ldr	r2, [pc, #80]	; (8003314 <HAL_RNG_MspInit+0x6c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d121      	bne.n	800330c <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80032c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032da:	f107 0310 	add.w	r3, r7, #16
 80032de:	4618      	mov	r0, r3
 80032e0:	f008 fabc 	bl	800b85c <HAL_RCCEx_PeriphCLKConfig>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 80032ea:	f7ff fb05 	bl	80028f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80032ee:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <HAL_RNG_MspInit+0x70>)
 80032f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80032f4:	4a08      	ldr	r2, [pc, #32]	; (8003318 <HAL_RNG_MspInit+0x70>)
 80032f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032fa:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_RNG_MspInit+0x70>)
 8003300:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800330c:	bf00      	nop
 800330e:	37c8      	adds	r7, #200	; 0xc8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	48021800 	.word	0x48021800
 8003318:	58024400 	.word	0x58024400

0800331c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b0ba      	sub	sp, #232	; 0xe8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003324:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003334:	f107 0318 	add.w	r3, r7, #24
 8003338:	22b8      	movs	r2, #184	; 0xb8
 800333a:	2100      	movs	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f018 ff44 	bl	801c1ca <memset>
  if(hsd->Instance==SDMMC2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a5d      	ldr	r2, [pc, #372]	; (80034bc <HAL_SD_MspInit+0x1a0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	f040 80b3 	bne.w	80034b4 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800334e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800335a:	2300      	movs	r3, #0
 800335c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800335e:	f107 0318 	add.w	r3, r7, #24
 8003362:	4618      	mov	r0, r3
 8003364:	f008 fa7a 	bl	800b85c <HAL_RCCEx_PeriphCLKConfig>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800336e:	f7ff fac3 	bl	80028f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8003372:	4b53      	ldr	r3, [pc, #332]	; (80034c0 <HAL_SD_MspInit+0x1a4>)
 8003374:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003378:	4a51      	ldr	r2, [pc, #324]	; (80034c0 <HAL_SD_MspInit+0x1a4>)
 800337a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800337e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003382:	4b4f      	ldr	r3, [pc, #316]	; (80034c0 <HAL_SD_MspInit+0x1a4>)
 8003384:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003390:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <HAL_SD_MspInit+0x1a4>)
 8003392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003396:	4a4a      	ldr	r2, [pc, #296]	; (80034c0 <HAL_SD_MspInit+0x1a4>)
 8003398:	f043 0308 	orr.w	r3, r3, #8
 800339c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033a0:	4b47      	ldr	r3, [pc, #284]	; (80034c0 <HAL_SD_MspInit+0x1a4>)
 80033a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033ae:	4b44      	ldr	r3, [pc, #272]	; (80034c0 <HAL_SD_MspInit+0x1a4>)
 80033b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b4:	4a42      	ldr	r2, [pc, #264]	; (80034c0 <HAL_SD_MspInit+0x1a4>)
 80033b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033be:	4b40      	ldr	r3, [pc, #256]	; (80034c0 <HAL_SD_MspInit+0x1a4>)
 80033c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80033cc:	2340      	movs	r3, #64	; 0x40
 80033ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d2:	2302      	movs	r3, #2
 80033d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033de:	2303      	movs	r3, #3
 80033e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80033e4:	230b      	movs	r3, #11
 80033e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033ee:	4619      	mov	r1, r3
 80033f0:	4834      	ldr	r0, [pc, #208]	; (80034c4 <HAL_SD_MspInit+0x1a8>)
 80033f2:	f005 fc45 	bl	8008c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	2302      	movs	r3, #2
 80033fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003402:	2301      	movs	r3, #1
 8003404:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003408:	2303      	movs	r3, #3
 800340a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800340e:	230b      	movs	r3, #11
 8003410:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003414:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003418:	4619      	mov	r1, r3
 800341a:	482a      	ldr	r0, [pc, #168]	; (80034c4 <HAL_SD_MspInit+0x1a8>)
 800341c:	f005 fc30 	bl	8008c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003424:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003428:	2302      	movs	r3, #2
 800342a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800342e:	2301      	movs	r3, #1
 8003430:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003434:	2303      	movs	r3, #3
 8003436:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800343a:	230b      	movs	r3, #11
 800343c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003440:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003444:	4619      	mov	r1, r3
 8003446:	4820      	ldr	r0, [pc, #128]	; (80034c8 <HAL_SD_MspInit+0x1ac>)
 8003448:	f005 fc1a 	bl	8008c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800344c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003450:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345a:	2300      	movs	r3, #0
 800345c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003460:	2303      	movs	r3, #3
 8003462:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003466:	230b      	movs	r3, #11
 8003468:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800346c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003470:	4619      	mov	r1, r3
 8003472:	4815      	ldr	r0, [pc, #84]	; (80034c8 <HAL_SD_MspInit+0x1ac>)
 8003474:	f005 fc04 	bl	8008c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003478:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800347c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003480:	2302      	movs	r3, #2
 8003482:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348c:	2303      	movs	r3, #3
 800348e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8003492:	230a      	movs	r3, #10
 8003494:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003498:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800349c:	4619      	mov	r1, r3
 800349e:	480a      	ldr	r0, [pc, #40]	; (80034c8 <HAL_SD_MspInit+0x1ac>)
 80034a0:	f005 fbee 	bl	8008c80 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 80034a4:	2200      	movs	r2, #0
 80034a6:	2100      	movs	r1, #0
 80034a8:	207c      	movs	r0, #124	; 0x7c
 80034aa:	f002 ff7c 	bl	80063a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 80034ae:	207c      	movs	r0, #124	; 0x7c
 80034b0:	f002 ff93 	bl	80063da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80034b4:	bf00      	nop
 80034b6:	37e8      	adds	r7, #232	; 0xe8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	48022400 	.word	0x48022400
 80034c0:	58024400 	.word	0x58024400
 80034c4:	58020c00 	.word	0x58020c00
 80034c8:	58021800 	.word	0x58021800

080034cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08e      	sub	sp, #56	; 0x38
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	605a      	str	r2, [r3, #4]
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	60da      	str	r2, [r3, #12]
 80034e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a4f      	ldr	r2, [pc, #316]	; (8003628 <HAL_SPI_MspInit+0x15c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d12e      	bne.n	800354c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034ee:	4b4f      	ldr	r3, [pc, #316]	; (800362c <HAL_SPI_MspInit+0x160>)
 80034f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034f4:	4a4d      	ldr	r2, [pc, #308]	; (800362c <HAL_SPI_MspInit+0x160>)
 80034f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034fe:	4b4b      	ldr	r3, [pc, #300]	; (800362c <HAL_SPI_MspInit+0x160>)
 8003500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003508:	623b      	str	r3, [r7, #32]
 800350a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350c:	4b47      	ldr	r3, [pc, #284]	; (800362c <HAL_SPI_MspInit+0x160>)
 800350e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003512:	4a46      	ldr	r2, [pc, #280]	; (800362c <HAL_SPI_MspInit+0x160>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800351c:	4b43      	ldr	r3, [pc, #268]	; (800362c <HAL_SPI_MspInit+0x160>)
 800351e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	61fb      	str	r3, [r7, #28]
 8003528:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800352a:	23e0      	movs	r3, #224	; 0xe0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	2302      	movs	r3, #2
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003536:	2300      	movs	r3, #0
 8003538:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800353a:	2305      	movs	r3, #5
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003542:	4619      	mov	r1, r3
 8003544:	483a      	ldr	r0, [pc, #232]	; (8003630 <HAL_SPI_MspInit+0x164>)
 8003546:	f005 fb9b 	bl	8008c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800354a:	e068      	b.n	800361e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a38      	ldr	r2, [pc, #224]	; (8003634 <HAL_SPI_MspInit+0x168>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d12f      	bne.n	80035b6 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003556:	4b35      	ldr	r3, [pc, #212]	; (800362c <HAL_SPI_MspInit+0x160>)
 8003558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800355c:	4a33      	ldr	r2, [pc, #204]	; (800362c <HAL_SPI_MspInit+0x160>)
 800355e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003562:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003566:	4b31      	ldr	r3, [pc, #196]	; (800362c <HAL_SPI_MspInit+0x160>)
 8003568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800356c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003574:	4b2d      	ldr	r3, [pc, #180]	; (800362c <HAL_SPI_MspInit+0x160>)
 8003576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800357a:	4a2c      	ldr	r2, [pc, #176]	; (800362c <HAL_SPI_MspInit+0x160>)
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003584:	4b29      	ldr	r3, [pc, #164]	; (800362c <HAL_SPI_MspInit+0x160>)
 8003586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003592:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a0:	2300      	movs	r3, #0
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035a4:	2305      	movs	r3, #5
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ac:	4619      	mov	r1, r3
 80035ae:	4822      	ldr	r0, [pc, #136]	; (8003638 <HAL_SPI_MspInit+0x16c>)
 80035b0:	f005 fb66 	bl	8008c80 <HAL_GPIO_Init>
}
 80035b4:	e033      	b.n	800361e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a20      	ldr	r2, [pc, #128]	; (800363c <HAL_SPI_MspInit+0x170>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d12e      	bne.n	800361e <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80035c0:	4b1a      	ldr	r3, [pc, #104]	; (800362c <HAL_SPI_MspInit+0x160>)
 80035c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035c6:	4a19      	ldr	r2, [pc, #100]	; (800362c <HAL_SPI_MspInit+0x160>)
 80035c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035d0:	4b16      	ldr	r3, [pc, #88]	; (800362c <HAL_SPI_MspInit+0x160>)
 80035d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035de:	4b13      	ldr	r3, [pc, #76]	; (800362c <HAL_SPI_MspInit+0x160>)
 80035e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035e4:	4a11      	ldr	r2, [pc, #68]	; (800362c <HAL_SPI_MspInit+0x160>)
 80035e6:	f043 0304 	orr.w	r3, r3, #4
 80035ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035ee:	4b0f      	ldr	r3, [pc, #60]	; (800362c <HAL_SPI_MspInit+0x160>)
 80035f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80035fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003602:	2302      	movs	r3, #2
 8003604:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360a:	2300      	movs	r3, #0
 800360c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800360e:	2306      	movs	r3, #6
 8003610:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003616:	4619      	mov	r1, r3
 8003618:	4809      	ldr	r0, [pc, #36]	; (8003640 <HAL_SPI_MspInit+0x174>)
 800361a:	f005 fb31 	bl	8008c80 <HAL_GPIO_Init>
}
 800361e:	bf00      	nop
 8003620:	3738      	adds	r7, #56	; 0x38
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40013000 	.word	0x40013000
 800362c:	58024400 	.word	0x58024400
 8003630:	58020000 	.word	0x58020000
 8003634:	40003800 	.word	0x40003800
 8003638:	58020400 	.word	0x58020400
 800363c:	40003c00 	.word	0x40003c00
 8003640:	58020800 	.word	0x58020800

08003644 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08c      	sub	sp, #48	; 0x30
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364c:	f107 031c 	add.w	r3, r7, #28
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003664:	d15d      	bne.n	8003722 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003666:	4b8e      	ldr	r3, [pc, #568]	; (80038a0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800366c:	4a8c      	ldr	r2, [pc, #560]	; (80038a0 <HAL_TIM_PWM_MspInit+0x25c>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003676:	4b8a      	ldr	r3, [pc, #552]	; (80038a0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003684:	4b86      	ldr	r3, [pc, #536]	; (80038a0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800368a:	4a85      	ldr	r2, [pc, #532]	; (80038a0 <HAL_TIM_PWM_MspInit+0x25c>)
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003694:	4b82      	ldr	r3, [pc, #520]	; (80038a0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036a2:	2301      	movs	r3, #1
 80036a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ae:	2300      	movs	r3, #0
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036b2:	2301      	movs	r3, #1
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b6:	f107 031c 	add.w	r3, r7, #28
 80036ba:	4619      	mov	r1, r3
 80036bc:	4879      	ldr	r0, [pc, #484]	; (80038a4 <HAL_TIM_PWM_MspInit+0x260>)
 80036be:	f005 fadf 	bl	8008c80 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80036c2:	4b79      	ldr	r3, [pc, #484]	; (80038a8 <HAL_TIM_PWM_MspInit+0x264>)
 80036c4:	4a79      	ldr	r2, [pc, #484]	; (80038ac <HAL_TIM_PWM_MspInit+0x268>)
 80036c6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80036c8:	4b77      	ldr	r3, [pc, #476]	; (80038a8 <HAL_TIM_PWM_MspInit+0x264>)
 80036ca:	2214      	movs	r2, #20
 80036cc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036ce:	4b76      	ldr	r3, [pc, #472]	; (80038a8 <HAL_TIM_PWM_MspInit+0x264>)
 80036d0:	2240      	movs	r2, #64	; 0x40
 80036d2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80036d4:	4b74      	ldr	r3, [pc, #464]	; (80038a8 <HAL_TIM_PWM_MspInit+0x264>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80036da:	4b73      	ldr	r3, [pc, #460]	; (80038a8 <HAL_TIM_PWM_MspInit+0x264>)
 80036dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036e0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036e2:	4b71      	ldr	r3, [pc, #452]	; (80038a8 <HAL_TIM_PWM_MspInit+0x264>)
 80036e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036e8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036ea:	4b6f      	ldr	r3, [pc, #444]	; (80038a8 <HAL_TIM_PWM_MspInit+0x264>)
 80036ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036f0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80036f2:	4b6d      	ldr	r3, [pc, #436]	; (80038a8 <HAL_TIM_PWM_MspInit+0x264>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80036f8:	4b6b      	ldr	r3, [pc, #428]	; (80038a8 <HAL_TIM_PWM_MspInit+0x264>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036fe:	4b6a      	ldr	r3, [pc, #424]	; (80038a8 <HAL_TIM_PWM_MspInit+0x264>)
 8003700:	2200      	movs	r2, #0
 8003702:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003704:	4868      	ldr	r0, [pc, #416]	; (80038a8 <HAL_TIM_PWM_MspInit+0x264>)
 8003706:	f002 fe83 	bl	8006410 <HAL_DMA_Init>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003710:	f7ff f8f2 	bl	80028f8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a64      	ldr	r2, [pc, #400]	; (80038a8 <HAL_TIM_PWM_MspInit+0x264>)
 8003718:	62da      	str	r2, [r3, #44]	; 0x2c
 800371a:	4a63      	ldr	r2, [pc, #396]	; (80038a8 <HAL_TIM_PWM_MspInit+0x264>)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003720:	e119      	b.n	8003956 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a62      	ldr	r2, [pc, #392]	; (80038b0 <HAL_TIM_PWM_MspInit+0x26c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d16d      	bne.n	8003808 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800372c:	4b5c      	ldr	r3, [pc, #368]	; (80038a0 <HAL_TIM_PWM_MspInit+0x25c>)
 800372e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003732:	4a5b      	ldr	r2, [pc, #364]	; (80038a0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003734:	f043 0302 	orr.w	r3, r3, #2
 8003738:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800373c:	4b58      	ldr	r3, [pc, #352]	; (80038a0 <HAL_TIM_PWM_MspInit+0x25c>)
 800373e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 800374a:	4b5a      	ldr	r3, [pc, #360]	; (80038b4 <HAL_TIM_PWM_MspInit+0x270>)
 800374c:	4a5a      	ldr	r2, [pc, #360]	; (80038b8 <HAL_TIM_PWM_MspInit+0x274>)
 800374e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003750:	4b58      	ldr	r3, [pc, #352]	; (80038b4 <HAL_TIM_PWM_MspInit+0x270>)
 8003752:	2218      	movs	r2, #24
 8003754:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003756:	4b57      	ldr	r3, [pc, #348]	; (80038b4 <HAL_TIM_PWM_MspInit+0x270>)
 8003758:	2240      	movs	r2, #64	; 0x40
 800375a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800375c:	4b55      	ldr	r3, [pc, #340]	; (80038b4 <HAL_TIM_PWM_MspInit+0x270>)
 800375e:	2200      	movs	r2, #0
 8003760:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003762:	4b54      	ldr	r3, [pc, #336]	; (80038b4 <HAL_TIM_PWM_MspInit+0x270>)
 8003764:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003768:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800376a:	4b52      	ldr	r3, [pc, #328]	; (80038b4 <HAL_TIM_PWM_MspInit+0x270>)
 800376c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003770:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003772:	4b50      	ldr	r3, [pc, #320]	; (80038b4 <HAL_TIM_PWM_MspInit+0x270>)
 8003774:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003778:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800377a:	4b4e      	ldr	r3, [pc, #312]	; (80038b4 <HAL_TIM_PWM_MspInit+0x270>)
 800377c:	2200      	movs	r2, #0
 800377e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003780:	4b4c      	ldr	r3, [pc, #304]	; (80038b4 <HAL_TIM_PWM_MspInit+0x270>)
 8003782:	2200      	movs	r2, #0
 8003784:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003786:	4b4b      	ldr	r3, [pc, #300]	; (80038b4 <HAL_TIM_PWM_MspInit+0x270>)
 8003788:	2200      	movs	r2, #0
 800378a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800378c:	4849      	ldr	r0, [pc, #292]	; (80038b4 <HAL_TIM_PWM_MspInit+0x270>)
 800378e:	f002 fe3f 	bl	8006410 <HAL_DMA_Init>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8003798:	f7ff f8ae 	bl	80028f8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a45      	ldr	r2, [pc, #276]	; (80038b4 <HAL_TIM_PWM_MspInit+0x270>)
 80037a0:	629a      	str	r2, [r3, #40]	; 0x28
 80037a2:	4a44      	ldr	r2, [pc, #272]	; (80038b4 <HAL_TIM_PWM_MspInit+0x270>)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80037a8:	4b44      	ldr	r3, [pc, #272]	; (80038bc <HAL_TIM_PWM_MspInit+0x278>)
 80037aa:	4a45      	ldr	r2, [pc, #276]	; (80038c0 <HAL_TIM_PWM_MspInit+0x27c>)
 80037ac:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80037ae:	4b43      	ldr	r3, [pc, #268]	; (80038bc <HAL_TIM_PWM_MspInit+0x278>)
 80037b0:	2217      	movs	r2, #23
 80037b2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037b4:	4b41      	ldr	r3, [pc, #260]	; (80038bc <HAL_TIM_PWM_MspInit+0x278>)
 80037b6:	2240      	movs	r2, #64	; 0x40
 80037b8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037ba:	4b40      	ldr	r3, [pc, #256]	; (80038bc <HAL_TIM_PWM_MspInit+0x278>)
 80037bc:	2200      	movs	r2, #0
 80037be:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80037c0:	4b3e      	ldr	r3, [pc, #248]	; (80038bc <HAL_TIM_PWM_MspInit+0x278>)
 80037c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037c6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037c8:	4b3c      	ldr	r3, [pc, #240]	; (80038bc <HAL_TIM_PWM_MspInit+0x278>)
 80037ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037ce:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037d0:	4b3a      	ldr	r3, [pc, #232]	; (80038bc <HAL_TIM_PWM_MspInit+0x278>)
 80037d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037d6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80037d8:	4b38      	ldr	r3, [pc, #224]	; (80038bc <HAL_TIM_PWM_MspInit+0x278>)
 80037da:	2200      	movs	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80037de:	4b37      	ldr	r3, [pc, #220]	; (80038bc <HAL_TIM_PWM_MspInit+0x278>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037e4:	4b35      	ldr	r3, [pc, #212]	; (80038bc <HAL_TIM_PWM_MspInit+0x278>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80037ea:	4834      	ldr	r0, [pc, #208]	; (80038bc <HAL_TIM_PWM_MspInit+0x278>)
 80037ec:	f002 fe10 	bl	8006410 <HAL_DMA_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80037f6:	f7ff f87f 	bl	80028f8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a2f      	ldr	r2, [pc, #188]	; (80038bc <HAL_TIM_PWM_MspInit+0x278>)
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24
 8003800:	4a2e      	ldr	r2, [pc, #184]	; (80038bc <HAL_TIM_PWM_MspInit+0x278>)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003806:	e0a6      	b.n	8003956 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a2d      	ldr	r2, [pc, #180]	; (80038c4 <HAL_TIM_PWM_MspInit+0x280>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d15e      	bne.n	80038d0 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003812:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003818:	4a21      	ldr	r2, [pc, #132]	; (80038a0 <HAL_TIM_PWM_MspInit+0x25c>)
 800381a:	f043 0304 	orr.w	r3, r3, #4
 800381e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003822:	4b1f      	ldr	r3, [pc, #124]	; (80038a0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003830:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <HAL_TIM_PWM_MspInit+0x284>)
 8003832:	4a26      	ldr	r2, [pc, #152]	; (80038cc <HAL_TIM_PWM_MspInit+0x288>)
 8003834:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003836:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <HAL_TIM_PWM_MspInit+0x284>)
 8003838:	221f      	movs	r2, #31
 800383a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800383c:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <HAL_TIM_PWM_MspInit+0x284>)
 800383e:	2240      	movs	r2, #64	; 0x40
 8003840:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003842:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <HAL_TIM_PWM_MspInit+0x284>)
 8003844:	2200      	movs	r2, #0
 8003846:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003848:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <HAL_TIM_PWM_MspInit+0x284>)
 800384a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800384e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003850:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <HAL_TIM_PWM_MspInit+0x284>)
 8003852:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003856:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003858:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <HAL_TIM_PWM_MspInit+0x284>)
 800385a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800385e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003860:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <HAL_TIM_PWM_MspInit+0x284>)
 8003862:	2200      	movs	r2, #0
 8003864:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003866:	4b18      	ldr	r3, [pc, #96]	; (80038c8 <HAL_TIM_PWM_MspInit+0x284>)
 8003868:	2200      	movs	r2, #0
 800386a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800386c:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <HAL_TIM_PWM_MspInit+0x284>)
 800386e:	2200      	movs	r2, #0
 8003870:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003872:	4815      	ldr	r0, [pc, #84]	; (80038c8 <HAL_TIM_PWM_MspInit+0x284>)
 8003874:	f002 fdcc 	bl	8006410 <HAL_DMA_Init>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 800387e:	f7ff f83b 	bl	80028f8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a10      	ldr	r2, [pc, #64]	; (80038c8 <HAL_TIM_PWM_MspInit+0x284>)
 8003886:	62da      	str	r2, [r3, #44]	; 0x2c
 8003888:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <HAL_TIM_PWM_MspInit+0x284>)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800388e:	2200      	movs	r2, #0
 8003890:	2100      	movs	r1, #0
 8003892:	201e      	movs	r0, #30
 8003894:	f002 fd87 	bl	80063a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003898:	201e      	movs	r0, #30
 800389a:	f002 fd9e 	bl	80063da <HAL_NVIC_EnableIRQ>
}
 800389e:	e05a      	b.n	8003956 <HAL_TIM_PWM_MspInit+0x312>
 80038a0:	58024400 	.word	0x58024400
 80038a4:	58020000 	.word	0x58020000
 80038a8:	2400140c 	.word	0x2400140c
 80038ac:	40020028 	.word	0x40020028
 80038b0:	40000400 	.word	0x40000400
 80038b4:	24001484 	.word	0x24001484
 80038b8:	40020058 	.word	0x40020058
 80038bc:	240014fc 	.word	0x240014fc
 80038c0:	40020070 	.word	0x40020070
 80038c4:	40000800 	.word	0x40000800
 80038c8:	24001574 	.word	0x24001574
 80038cc:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a22      	ldr	r2, [pc, #136]	; (8003960 <HAL_TIM_PWM_MspInit+0x31c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d13d      	bne.n	8003956 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80038da:	4b22      	ldr	r3, [pc, #136]	; (8003964 <HAL_TIM_PWM_MspInit+0x320>)
 80038dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038e0:	4a20      	ldr	r2, [pc, #128]	; (8003964 <HAL_TIM_PWM_MspInit+0x320>)
 80038e2:	f043 0308 	orr.w	r3, r3, #8
 80038e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038ea:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <HAL_TIM_PWM_MspInit+0x320>)
 80038ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_TIM_PWM_MspInit+0x324>)
 80038fa:	4a1c      	ldr	r2, [pc, #112]	; (800396c <HAL_TIM_PWM_MspInit+0x328>)
 80038fc:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80038fe:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <HAL_TIM_PWM_MspInit+0x324>)
 8003900:	223a      	movs	r2, #58	; 0x3a
 8003902:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003904:	4b18      	ldr	r3, [pc, #96]	; (8003968 <HAL_TIM_PWM_MspInit+0x324>)
 8003906:	2240      	movs	r2, #64	; 0x40
 8003908:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800390a:	4b17      	ldr	r3, [pc, #92]	; (8003968 <HAL_TIM_PWM_MspInit+0x324>)
 800390c:	2200      	movs	r2, #0
 800390e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003910:	4b15      	ldr	r3, [pc, #84]	; (8003968 <HAL_TIM_PWM_MspInit+0x324>)
 8003912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003916:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003918:	4b13      	ldr	r3, [pc, #76]	; (8003968 <HAL_TIM_PWM_MspInit+0x324>)
 800391a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800391e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <HAL_TIM_PWM_MspInit+0x324>)
 8003922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003926:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003928:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <HAL_TIM_PWM_MspInit+0x324>)
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800392e:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <HAL_TIM_PWM_MspInit+0x324>)
 8003930:	2200      	movs	r2, #0
 8003932:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <HAL_TIM_PWM_MspInit+0x324>)
 8003936:	2200      	movs	r2, #0
 8003938:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800393a:	480b      	ldr	r0, [pc, #44]	; (8003968 <HAL_TIM_PWM_MspInit+0x324>)
 800393c:	f002 fd68 	bl	8006410 <HAL_DMA_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003946:	f7fe ffd7 	bl	80028f8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a06      	ldr	r2, [pc, #24]	; (8003968 <HAL_TIM_PWM_MspInit+0x324>)
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
 8003950:	4a05      	ldr	r2, [pc, #20]	; (8003968 <HAL_TIM_PWM_MspInit+0x324>)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003956:	bf00      	nop
 8003958:	3730      	adds	r7, #48	; 0x30
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40000c00 	.word	0x40000c00
 8003964:	58024400 	.word	0x58024400
 8003968:	240015ec 	.word	0x240015ec
 800396c:	40020040 	.word	0x40020040

08003970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a16      	ldr	r2, [pc, #88]	; (80039d8 <HAL_TIM_Base_MspInit+0x68>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d10f      	bne.n	80039a2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003982:	4b16      	ldr	r3, [pc, #88]	; (80039dc <HAL_TIM_Base_MspInit+0x6c>)
 8003984:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003988:	4a14      	ldr	r2, [pc, #80]	; (80039dc <HAL_TIM_Base_MspInit+0x6c>)
 800398a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800398e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <HAL_TIM_Base_MspInit+0x6c>)
 8003994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80039a0:	e013      	b.n	80039ca <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a0e      	ldr	r2, [pc, #56]	; (80039e0 <HAL_TIM_Base_MspInit+0x70>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d10e      	bne.n	80039ca <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_TIM_Base_MspInit+0x6c>)
 80039ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039b2:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <HAL_TIM_Base_MspInit+0x6c>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039bc:	4b07      	ldr	r3, [pc, #28]	; (80039dc <HAL_TIM_Base_MspInit+0x6c>)
 80039be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
}
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40001c00 	.word	0x40001c00
 80039dc:	58024400 	.word	0x58024400
 80039e0:	40002000 	.word	0x40002000

080039e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08c      	sub	sp, #48	; 0x30
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ec:	f107 031c 	add.w	r3, r7, #28
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a04:	d120      	bne.n	8003a48 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a06:	4b52      	ldr	r3, [pc, #328]	; (8003b50 <HAL_TIM_MspPostInit+0x16c>)
 8003a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a0c:	4a50      	ldr	r2, [pc, #320]	; (8003b50 <HAL_TIM_MspPostInit+0x16c>)
 8003a0e:	f043 0302 	orr.w	r3, r3, #2
 8003a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a16:	4b4e      	ldr	r3, [pc, #312]	; (8003b50 <HAL_TIM_MspPostInit+0x16c>)
 8003a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a32:	2300      	movs	r3, #0
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a36:	2301      	movs	r3, #1
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a3a:	f107 031c 	add.w	r3, r7, #28
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4844      	ldr	r0, [pc, #272]	; (8003b54 <HAL_TIM_MspPostInit+0x170>)
 8003a42:	f005 f91d 	bl	8008c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003a46:	e07f      	b.n	8003b48 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a42      	ldr	r2, [pc, #264]	; (8003b58 <HAL_TIM_MspPostInit+0x174>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d11f      	bne.n	8003a92 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a52:	4b3f      	ldr	r3, [pc, #252]	; (8003b50 <HAL_TIM_MspPostInit+0x16c>)
 8003a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a58:	4a3d      	ldr	r2, [pc, #244]	; (8003b50 <HAL_TIM_MspPostInit+0x16c>)
 8003a5a:	f043 0302 	orr.w	r3, r3, #2
 8003a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a62:	4b3b      	ldr	r3, [pc, #236]	; (8003b50 <HAL_TIM_MspPostInit+0x16c>)
 8003a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003a70:	2330      	movs	r3, #48	; 0x30
 8003a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	2302      	movs	r3, #2
 8003a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a80:	2302      	movs	r3, #2
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a84:	f107 031c 	add.w	r3, r7, #28
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4832      	ldr	r0, [pc, #200]	; (8003b54 <HAL_TIM_MspPostInit+0x170>)
 8003a8c:	f005 f8f8 	bl	8008c80 <HAL_GPIO_Init>
}
 8003a90:	e05a      	b.n	8003b48 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a31      	ldr	r2, [pc, #196]	; (8003b5c <HAL_TIM_MspPostInit+0x178>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d131      	bne.n	8003b00 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a9c:	4b2c      	ldr	r3, [pc, #176]	; (8003b50 <HAL_TIM_MspPostInit+0x16c>)
 8003a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aa2:	4a2b      	ldr	r2, [pc, #172]	; (8003b50 <HAL_TIM_MspPostInit+0x16c>)
 8003aa4:	f043 0308 	orr.w	r3, r3, #8
 8003aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003aac:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <HAL_TIM_MspPostInit+0x16c>)
 8003aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003aba:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003acc:	2302      	movs	r3, #2
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ad0:	f107 031c 	add.w	r3, r7, #28
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4822      	ldr	r0, [pc, #136]	; (8003b60 <HAL_TIM_MspPostInit+0x17c>)
 8003ad8:	f005 f8d2 	bl	8008c80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003adc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aea:	2300      	movs	r3, #0
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003aee:	2302      	movs	r3, #2
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003af2:	f107 031c 	add.w	r3, r7, #28
 8003af6:	4619      	mov	r1, r3
 8003af8:	4819      	ldr	r0, [pc, #100]	; (8003b60 <HAL_TIM_MspPostInit+0x17c>)
 8003afa:	f005 f8c1 	bl	8008c80 <HAL_GPIO_Init>
}
 8003afe:	e023      	b.n	8003b48 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <HAL_TIM_MspPostInit+0x180>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d11e      	bne.n	8003b48 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0a:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <HAL_TIM_MspPostInit+0x16c>)
 8003b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b10:	4a0f      	ldr	r2, [pc, #60]	; (8003b50 <HAL_TIM_MspPostInit+0x16c>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <HAL_TIM_MspPostInit+0x16c>)
 8003b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b28:	2308      	movs	r3, #8
 8003b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b30:	2302      	movs	r3, #2
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b34:	2300      	movs	r3, #0
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b3c:	f107 031c 	add.w	r3, r7, #28
 8003b40:	4619      	mov	r1, r3
 8003b42:	4809      	ldr	r0, [pc, #36]	; (8003b68 <HAL_TIM_MspPostInit+0x184>)
 8003b44:	f005 f89c 	bl	8008c80 <HAL_GPIO_Init>
}
 8003b48:	bf00      	nop
 8003b4a:	3730      	adds	r7, #48	; 0x30
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	58024400 	.word	0x58024400
 8003b54:	58020400 	.word	0x58020400
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40000800 	.word	0x40000800
 8003b60:	58020c00 	.word	0x58020c00
 8003b64:	40000c00 	.word	0x40000c00
 8003b68:	58020000 	.word	0x58020000

08003b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b0ba      	sub	sp, #232	; 0xe8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b84:	f107 0318 	add.w	r3, r7, #24
 8003b88:	22b8      	movs	r2, #184	; 0xb8
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f018 fb1c 	bl	801c1ca <memset>
  if(huart->Instance==UART4)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a4d      	ldr	r2, [pc, #308]	; (8003ccc <HAL_UART_MspInit+0x160>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d147      	bne.n	8003c2c <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003b9c:	f04f 0202 	mov.w	r2, #2
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bae:	f107 0318 	add.w	r3, r7, #24
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f007 fe52 	bl	800b85c <HAL_RCCEx_PeriphCLKConfig>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003bbe:	f7fe fe9b 	bl	80028f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003bc2:	4b43      	ldr	r3, [pc, #268]	; (8003cd0 <HAL_UART_MspInit+0x164>)
 8003bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bc8:	4a41      	ldr	r2, [pc, #260]	; (8003cd0 <HAL_UART_MspInit+0x164>)
 8003bca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bd2:	4b3f      	ldr	r3, [pc, #252]	; (8003cd0 <HAL_UART_MspInit+0x164>)
 8003bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003be0:	4b3b      	ldr	r3, [pc, #236]	; (8003cd0 <HAL_UART_MspInit+0x164>)
 8003be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003be6:	4a3a      	ldr	r2, [pc, #232]	; (8003cd0 <HAL_UART_MspInit+0x164>)
 8003be8:	f043 0302 	orr.w	r3, r3, #2
 8003bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bf0:	4b37      	ldr	r3, [pc, #220]	; (8003cd0 <HAL_UART_MspInit+0x164>)
 8003bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003bfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c06:	2302      	movs	r3, #2
 8003c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c12:	2300      	movs	r3, #0
 8003c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003c18:	2308      	movs	r3, #8
 8003c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c22:	4619      	mov	r1, r3
 8003c24:	482b      	ldr	r0, [pc, #172]	; (8003cd4 <HAL_UART_MspInit+0x168>)
 8003c26:	f005 f82b 	bl	8008c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003c2a:	e04a      	b.n	8003cc2 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a29      	ldr	r2, [pc, #164]	; (8003cd8 <HAL_UART_MspInit+0x16c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d145      	bne.n	8003cc2 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003c36:	f04f 0201 	mov.w	r2, #1
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003c42:	2300      	movs	r3, #0
 8003c44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c48:	f107 0318 	add.w	r3, r7, #24
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f007 fe05 	bl	800b85c <HAL_RCCEx_PeriphCLKConfig>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003c58:	f7fe fe4e 	bl	80028f8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003c5c:	4b1c      	ldr	r3, [pc, #112]	; (8003cd0 <HAL_UART_MspInit+0x164>)
 8003c5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c62:	4a1b      	ldr	r2, [pc, #108]	; (8003cd0 <HAL_UART_MspInit+0x164>)
 8003c64:	f043 0320 	orr.w	r3, r3, #32
 8003c68:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c6c:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <HAL_UART_MspInit+0x164>)
 8003c6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <HAL_UART_MspInit+0x164>)
 8003c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c80:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <HAL_UART_MspInit+0x164>)
 8003c82:	f043 0304 	orr.w	r3, r3, #4
 8003c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c8a:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <HAL_UART_MspInit+0x164>)
 8003c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c98:	23c0      	movs	r3, #192	; 0xc0
 8003c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003caa:	2300      	movs	r3, #0
 8003cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003cb0:	2307      	movs	r3, #7
 8003cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cb6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4807      	ldr	r0, [pc, #28]	; (8003cdc <HAL_UART_MspInit+0x170>)
 8003cbe:	f004 ffdf 	bl	8008c80 <HAL_GPIO_Init>
}
 8003cc2:	bf00      	nop
 8003cc4:	37e8      	adds	r7, #232	; 0xe8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40004c00 	.word	0x40004c00
 8003cd0:	58024400 	.word	0x58024400
 8003cd4:	58020400 	.word	0x58020400
 8003cd8:	40011400 	.word	0x40011400
 8003cdc:	58020800 	.word	0x58020800

08003ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ce4:	e7fe      	b.n	8003ce4 <NMI_Handler+0x4>

08003ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cea:	e7fe      	b.n	8003cea <HardFault_Handler+0x4>

08003cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cf0:	e7fe      	b.n	8003cf0 <MemManage_Handler+0x4>

08003cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cf6:	e7fe      	b.n	8003cf6 <BusFault_Handler+0x4>

08003cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cfc:	e7fe      	b.n	8003cfc <UsageFault_Handler+0x4>

08003cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d02:	bf00      	nop
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d2c:	f000 fa4a 	bl	80041c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d30:	bf00      	nop
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003d38:	4802      	ldr	r0, [pc, #8]	; (8003d44 <DMA1_Stream0_IRQHandler+0x10>)
 8003d3a:	f003 f92b 	bl	8006f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	24001574 	.word	0x24001574

08003d48 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003d4c:	4802      	ldr	r0, [pc, #8]	; (8003d58 <DMA1_Stream1_IRQHandler+0x10>)
 8003d4e:	f003 f921 	bl	8006f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	2400140c 	.word	0x2400140c

08003d5c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003d60:	4802      	ldr	r0, [pc, #8]	; (8003d6c <DMA1_Stream2_IRQHandler+0x10>)
 8003d62:	f003 f917 	bl	8006f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	240015ec 	.word	0x240015ec

08003d70 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003d74:	4802      	ldr	r0, [pc, #8]	; (8003d80 <DMA1_Stream3_IRQHandler+0x10>)
 8003d76:	f003 f90d 	bl	8006f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	24001484 	.word	0x24001484

08003d84 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003d88:	4802      	ldr	r0, [pc, #8]	; (8003d94 <DMA1_Stream4_IRQHandler+0x10>)
 8003d8a:	f003 f903 	bl	8006f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	240014fc 	.word	0x240014fc

08003d98 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d9c:	4802      	ldr	r0, [pc, #8]	; (8003da8 <DMA1_Stream5_IRQHandler+0x10>)
 8003d9e:	f003 f8f9 	bl	8006f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	24000e4c 	.word	0x24000e4c

08003dac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003db0:	4802      	ldr	r0, [pc, #8]	; (8003dbc <TIM4_IRQHandler+0x10>)
 8003db2:	f00d f8e3 	bl	8010f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	240012dc 	.word	0x240012dc

08003dc0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003dc4:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <I2C2_EV_IRQHandler+0x10>)
 8003dc6:	f005 f9c5 	bl	8009154 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	24000fdc 	.word	0x24000fdc

08003dd4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003dd8:	4802      	ldr	r0, [pc, #8]	; (8003de4 <DMA2_Stream7_IRQHandler+0x10>)
 8003dda:	f003 f8db 	bl	8006f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	24000ec4 	.word	0x24000ec4

08003de8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003dec:	4802      	ldr	r0, [pc, #8]	; (8003df8 <OTG_HS_IRQHandler+0x10>)
 8003dee:	f005 fbbb 	bl	8009568 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003df2:	bf00      	nop
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	24005584 	.word	0x24005584

08003dfc <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003e00:	4802      	ldr	r0, [pc, #8]	; (8003e0c <SDMMC2_IRQHandler+0x10>)
 8003e02:	f00a fd2f 	bl	800e864 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	24001030 	.word	0x24001030

08003e10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return 1;
 8003e14:	2301      	movs	r3, #1
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <_kill>:

int _kill(int pid, int sig)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e2a:	f018 fa21 	bl	801c270 <__errno>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2216      	movs	r2, #22
 8003e32:	601a      	str	r2, [r3, #0]
  return -1;
 8003e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <_exit>:

void _exit (int status)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e48:	f04f 31ff 	mov.w	r1, #4294967295
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ffe7 	bl	8003e20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e52:	e7fe      	b.n	8003e52 <_exit+0x12>

08003e54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	e00a      	b.n	8003e7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e66:	f3af 8000 	nop.w
 8003e6a:	4601      	mov	r1, r0
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	60ba      	str	r2, [r7, #8]
 8003e72:	b2ca      	uxtb	r2, r1
 8003e74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	dbf0      	blt.n	8003e66 <_read+0x12>
  }

  return len;
 8003e84:	687b      	ldr	r3, [r7, #4]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	e009      	b.n	8003eb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	60ba      	str	r2, [r7, #8]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	dbf1      	blt.n	8003ea0 <_write+0x12>
  }
  return len;
 8003ebc:	687b      	ldr	r3, [r7, #4]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <_close>:

int _close(int file)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eee:	605a      	str	r2, [r3, #4]
  return 0;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <_isatty>:

int _isatty(int file)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f06:	2301      	movs	r3, #1
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f38:	4a14      	ldr	r2, [pc, #80]	; (8003f8c <_sbrk+0x5c>)
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <_sbrk+0x60>)
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f44:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <_sbrk+0x64>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d102      	bne.n	8003f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f4c:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <_sbrk+0x64>)
 8003f4e:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <_sbrk+0x68>)
 8003f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f52:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <_sbrk+0x64>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4413      	add	r3, r2
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d207      	bcs.n	8003f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f60:	f018 f986 	bl	801c270 <__errno>
 8003f64:	4603      	mov	r3, r0
 8003f66:	220c      	movs	r2, #12
 8003f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6e:	e009      	b.n	8003f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f70:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <_sbrk+0x64>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f76:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <_sbrk+0x64>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	4a05      	ldr	r2, [pc, #20]	; (8003f94 <_sbrk+0x64>)
 8003f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f82:	68fb      	ldr	r3, [r7, #12]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	24050000 	.word	0x24050000
 8003f90:	00000800 	.word	0x00000800
 8003f94:	24003e58 	.word	0x24003e58
 8003f98:	24005e00 	.word	0x24005e00

08003f9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003fa0:	4b32      	ldr	r3, [pc, #200]	; (800406c <SystemInit+0xd0>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	4a31      	ldr	r2, [pc, #196]	; (800406c <SystemInit+0xd0>)
 8003fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fb0:	4b2f      	ldr	r3, [pc, #188]	; (8004070 <SystemInit+0xd4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	2b06      	cmp	r3, #6
 8003fba:	d807      	bhi.n	8003fcc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fbc:	4b2c      	ldr	r3, [pc, #176]	; (8004070 <SystemInit+0xd4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f023 030f 	bic.w	r3, r3, #15
 8003fc4:	4a2a      	ldr	r2, [pc, #168]	; (8004070 <SystemInit+0xd4>)
 8003fc6:	f043 0307 	orr.w	r3, r3, #7
 8003fca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003fcc:	4b29      	ldr	r3, [pc, #164]	; (8004074 <SystemInit+0xd8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a28      	ldr	r2, [pc, #160]	; (8004074 <SystemInit+0xd8>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003fd8:	4b26      	ldr	r3, [pc, #152]	; (8004074 <SystemInit+0xd8>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003fde:	4b25      	ldr	r3, [pc, #148]	; (8004074 <SystemInit+0xd8>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4924      	ldr	r1, [pc, #144]	; (8004074 <SystemInit+0xd8>)
 8003fe4:	4b24      	ldr	r3, [pc, #144]	; (8004078 <SystemInit+0xdc>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fea:	4b21      	ldr	r3, [pc, #132]	; (8004070 <SystemInit+0xd4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ff6:	4b1e      	ldr	r3, [pc, #120]	; (8004070 <SystemInit+0xd4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 030f 	bic.w	r3, r3, #15
 8003ffe:	4a1c      	ldr	r2, [pc, #112]	; (8004070 <SystemInit+0xd4>)
 8004000:	f043 0307 	orr.w	r3, r3, #7
 8004004:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004006:	4b1b      	ldr	r3, [pc, #108]	; (8004074 <SystemInit+0xd8>)
 8004008:	2200      	movs	r2, #0
 800400a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800400c:	4b19      	ldr	r3, [pc, #100]	; (8004074 <SystemInit+0xd8>)
 800400e:	2200      	movs	r2, #0
 8004010:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004012:	4b18      	ldr	r3, [pc, #96]	; (8004074 <SystemInit+0xd8>)
 8004014:	2200      	movs	r2, #0
 8004016:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004018:	4b16      	ldr	r3, [pc, #88]	; (8004074 <SystemInit+0xd8>)
 800401a:	4a18      	ldr	r2, [pc, #96]	; (800407c <SystemInit+0xe0>)
 800401c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800401e:	4b15      	ldr	r3, [pc, #84]	; (8004074 <SystemInit+0xd8>)
 8004020:	4a17      	ldr	r2, [pc, #92]	; (8004080 <SystemInit+0xe4>)
 8004022:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004024:	4b13      	ldr	r3, [pc, #76]	; (8004074 <SystemInit+0xd8>)
 8004026:	4a17      	ldr	r2, [pc, #92]	; (8004084 <SystemInit+0xe8>)
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800402a:	4b12      	ldr	r3, [pc, #72]	; (8004074 <SystemInit+0xd8>)
 800402c:	2200      	movs	r2, #0
 800402e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004030:	4b10      	ldr	r3, [pc, #64]	; (8004074 <SystemInit+0xd8>)
 8004032:	4a14      	ldr	r2, [pc, #80]	; (8004084 <SystemInit+0xe8>)
 8004034:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004036:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <SystemInit+0xd8>)
 8004038:	2200      	movs	r2, #0
 800403a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800403c:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <SystemInit+0xd8>)
 800403e:	4a11      	ldr	r2, [pc, #68]	; (8004084 <SystemInit+0xe8>)
 8004040:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004042:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <SystemInit+0xd8>)
 8004044:	2200      	movs	r2, #0
 8004046:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <SystemInit+0xd8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a09      	ldr	r2, [pc, #36]	; (8004074 <SystemInit+0xd8>)
 800404e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004052:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004054:	4b07      	ldr	r3, [pc, #28]	; (8004074 <SystemInit+0xd8>)
 8004056:	2200      	movs	r2, #0
 8004058:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <SystemInit+0xec>)
 800405c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004060:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004062:	bf00      	nop
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	e000ed00 	.word	0xe000ed00
 8004070:	52002000 	.word	0x52002000
 8004074:	58024400 	.word	0x58024400
 8004078:	eaf6ed7f 	.word	0xeaf6ed7f
 800407c:	02020200 	.word	0x02020200
 8004080:	01ff0000 	.word	0x01ff0000
 8004084:	01010280 	.word	0x01010280
 8004088:	52004000 	.word	0x52004000

0800408c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800408c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004090:	f7ff ff84 	bl	8003f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004094:	480c      	ldr	r0, [pc, #48]	; (80040c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004096:	490d      	ldr	r1, [pc, #52]	; (80040cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004098:	4a0d      	ldr	r2, [pc, #52]	; (80040d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800409a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800409c:	e002      	b.n	80040a4 <LoopCopyDataInit>

0800409e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800409e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040a2:	3304      	adds	r3, #4

080040a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040a8:	d3f9      	bcc.n	800409e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040aa:	4a0a      	ldr	r2, [pc, #40]	; (80040d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040ac:	4c0a      	ldr	r4, [pc, #40]	; (80040d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80040ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040b0:	e001      	b.n	80040b6 <LoopFillZerobss>

080040b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040b4:	3204      	adds	r2, #4

080040b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040b8:	d3fb      	bcc.n	80040b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040ba:	f018 f8df 	bl	801c27c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040be:	f7fd fc0f 	bl	80018e0 <main>
  bx  lr
 80040c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040c4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80040c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80040cc:	240003c8 	.word	0x240003c8
  ldr r2, =_sidata
 80040d0:	08020cdc 	.word	0x08020cdc
  ldr r2, =_sbss
 80040d4:	240003c8 	.word	0x240003c8
  ldr r4, =_ebss
 80040d8:	24005dfc 	.word	0x24005dfc

080040dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040dc:	e7fe      	b.n	80040dc <ADC3_IRQHandler>
	...

080040e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040e6:	2003      	movs	r0, #3
 80040e8:	f002 f952 	bl	8006390 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040ec:	f007 f9e0 	bl	800b4b0 <HAL_RCC_GetSysClockFreq>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4b15      	ldr	r3, [pc, #84]	; (8004148 <HAL_Init+0x68>)
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	4913      	ldr	r1, [pc, #76]	; (800414c <HAL_Init+0x6c>)
 80040fe:	5ccb      	ldrb	r3, [r1, r3]
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
 8004108:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800410a:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <HAL_Init+0x68>)
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	4a0e      	ldr	r2, [pc, #56]	; (800414c <HAL_Init+0x6c>)
 8004114:	5cd3      	ldrb	r3, [r2, r3]
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
 8004120:	4a0b      	ldr	r2, [pc, #44]	; (8004150 <HAL_Init+0x70>)
 8004122:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004124:	4a0b      	ldr	r2, [pc, #44]	; (8004154 <HAL_Init+0x74>)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800412a:	200f      	movs	r0, #15
 800412c:	f000 f814 	bl	8004158 <HAL_InitTick>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e002      	b.n	8004140 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800413a:	f7fe fee9 	bl	8002f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	58024400 	.word	0x58024400
 800414c:	080203f0 	.word	0x080203f0
 8004150:	24000104 	.word	0x24000104
 8004154:	24000100 	.word	0x24000100

08004158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004160:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <HAL_InitTick+0x60>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e021      	b.n	80041b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800416c:	4b13      	ldr	r3, [pc, #76]	; (80041bc <HAL_InitTick+0x64>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <HAL_InitTick+0x60>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	4619      	mov	r1, r3
 8004176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800417a:	fbb3 f3f1 	udiv	r3, r3, r1
 800417e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004182:	4618      	mov	r0, r3
 8004184:	f002 f937 	bl	80063f6 <HAL_SYSTICK_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e00e      	b.n	80041b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b0f      	cmp	r3, #15
 8004196:	d80a      	bhi.n	80041ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004198:	2200      	movs	r2, #0
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	f002 f901 	bl	80063a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041a4:	4a06      	ldr	r2, [pc, #24]	; (80041c0 <HAL_InitTick+0x68>)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e000      	b.n	80041b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	2400010c 	.word	0x2400010c
 80041bc:	24000100 	.word	0x24000100
 80041c0:	24000108 	.word	0x24000108

080041c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_IncTick+0x20>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <HAL_IncTick+0x24>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4413      	add	r3, r2
 80041d4:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <HAL_IncTick+0x24>)
 80041d6:	6013      	str	r3, [r2, #0]
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	2400010c 	.word	0x2400010c
 80041e8:	24003e5c 	.word	0x24003e5c

080041ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return uwTick;
 80041f0:	4b03      	ldr	r3, [pc, #12]	; (8004200 <HAL_GetTick+0x14>)
 80041f2:	681b      	ldr	r3, [r3, #0]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	24003e5c 	.word	0x24003e5c

08004204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800420c:	f7ff ffee 	bl	80041ec <HAL_GetTick>
 8004210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421c:	d005      	beq.n	800422a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800421e:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <HAL_Delay+0x44>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800422a:	bf00      	nop
 800422c:	f7ff ffde 	bl	80041ec <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	429a      	cmp	r2, r3
 800423a:	d8f7      	bhi.n	800422c <HAL_Delay+0x28>
  {
  }
}
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	2400010c 	.word	0x2400010c

0800424c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	43db      	mvns	r3, r3
 800425e:	401a      	ands	r2, r3
 8004260:	4904      	ldr	r1, [pc, #16]	; (8004274 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	4313      	orrs	r3, r2
 8004266:	604b      	str	r3, [r1, #4]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	58000400 	.word	0x58000400

08004278 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	609a      	str	r2, [r3, #8]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3360      	adds	r3, #96	; 0x60
 80042f2:	461a      	mov	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4a10      	ldr	r2, [pc, #64]	; (8004340 <LL_ADC_SetOffset+0x60>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d10b      	bne.n	800431c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	4313      	orrs	r3, r2
 8004312:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800431a:	e00b      	b.n	8004334 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	430b      	orrs	r3, r1
 800432e:	431a      	orrs	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	601a      	str	r2, [r3, #0]
}
 8004334:	bf00      	nop
 8004336:	371c      	adds	r7, #28
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	58026000 	.word	0x58026000

08004344 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3360      	adds	r3, #96	; 0x60
 8004352:	461a      	mov	r2, r3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	fa01 f303 	lsl.w	r3, r1, r3
 8004390:	431a      	orrs	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	611a      	str	r2, [r3, #16]
}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4a0c      	ldr	r2, [pc, #48]	; (80043e4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00e      	beq.n	80043d6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3360      	adds	r3, #96	; 0x60
 80043bc:	461a      	mov	r2, r3
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	601a      	str	r2, [r3, #0]
  }
}
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	58026000 	.word	0x58026000

080043e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a0c      	ldr	r2, [pc, #48]	; (8004428 <LL_ADC_SetOffsetSaturation+0x40>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d10e      	bne.n	800441a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3360      	adds	r3, #96	; 0x60
 8004400:	461a      	mov	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	431a      	orrs	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	58026000 	.word	0x58026000

0800442c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a0c      	ldr	r2, [pc, #48]	; (800446c <LL_ADC_SetOffsetSign+0x40>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d10e      	bne.n	800445e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3360      	adds	r3, #96	; 0x60
 8004444:	461a      	mov	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	431a      	orrs	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	58026000 	.word	0x58026000

08004470 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3360      	adds	r3, #96	; 0x60
 8004480:	461a      	mov	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <LL_ADC_SetOffsetState+0x50>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d108      	bne.n	80044a4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	431a      	orrs	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80044a2:	e007      	b.n	80044b4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	601a      	str	r2, [r3, #0]
}
 80044b4:	bf00      	nop
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	58026000 	.word	0x58026000

080044c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b087      	sub	sp, #28
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3330      	adds	r3, #48	; 0x30
 80044fa:	461a      	mov	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	f003 030c 	and.w	r3, r3, #12
 8004506:	4413      	add	r3, r2
 8004508:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	211f      	movs	r1, #31
 8004516:	fa01 f303 	lsl.w	r3, r1, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	401a      	ands	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	0e9b      	lsrs	r3, r3, #26
 8004522:	f003 011f 	and.w	r1, r3, #31
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f003 031f 	and.w	r3, r3, #31
 800452c:	fa01 f303 	lsl.w	r3, r1, r3
 8004530:	431a      	orrs	r2, r3
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004536:	bf00      	nop
 8004538:	371c      	adds	r7, #28
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004542:	b480      	push	{r7}
 8004544:	b087      	sub	sp, #28
 8004546:	af00      	add	r7, sp, #0
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3314      	adds	r3, #20
 8004552:	461a      	mov	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	0e5b      	lsrs	r3, r3, #25
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	4413      	add	r3, r2
 8004560:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	0d1b      	lsrs	r3, r3, #20
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	2107      	movs	r1, #7
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	401a      	ands	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	0d1b      	lsrs	r3, r3, #20
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	fa01 f303 	lsl.w	r3, r1, r3
 8004586:	431a      	orrs	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800458c:	bf00      	nop
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a1a      	ldr	r2, [pc, #104]	; (8004610 <LL_ADC_SetChannelSingleDiff+0x78>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d115      	bne.n	80045d8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045b8:	43db      	mvns	r3, r3
 80045ba:	401a      	ands	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f003 0318 	and.w	r3, r3, #24
 80045c2:	4914      	ldr	r1, [pc, #80]	; (8004614 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80045c4:	40d9      	lsrs	r1, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	400b      	ands	r3, r1
 80045ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045ce:	431a      	orrs	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80045d6:	e014      	b.n	8004602 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045e4:	43db      	mvns	r3, r3
 80045e6:	401a      	ands	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f003 0318 	and.w	r3, r3, #24
 80045ee:	4909      	ldr	r1, [pc, #36]	; (8004614 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80045f0:	40d9      	lsrs	r1, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	400b      	ands	r3, r1
 80045f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045fa:	431a      	orrs	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	58026000 	.word	0x58026000
 8004614:	000fffff 	.word	0x000fffff

08004618 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 031f 	and.w	r3, r3, #31
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004644:	4618      	mov	r0, r3
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <LL_ADC_DisableDeepPowerDown+0x20>)
 800465e:	4013      	ands	r3, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6093      	str	r3, [r2, #8]
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	5fffffc0 	.word	0x5fffffc0

08004674 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004688:	d101      	bne.n	800468e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	6fffffc0 	.word	0x6fffffc0

080046c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046d8:	d101      	bne.n	80046de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <LL_ADC_Enable+0x24>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	f043 0201 	orr.w	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	7fffffc0 	.word	0x7fffffc0

08004714 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	4b05      	ldr	r3, [pc, #20]	; (8004738 <LL_ADC_Disable+0x24>)
 8004722:	4013      	ands	r3, r2
 8004724:	f043 0202 	orr.w	r2, r3, #2
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	7fffffc0 	.word	0x7fffffc0

0800473c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <LL_ADC_IsEnabled+0x18>
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <LL_ADC_IsEnabled+0x1a>
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b02      	cmp	r3, #2
 8004774:	d101      	bne.n	800477a <LL_ADC_IsDisableOngoing+0x18>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <LL_ADC_IsDisableOngoing+0x1a>
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <LL_ADC_REG_StartConversion+0x24>)
 8004796:	4013      	ands	r3, r2
 8004798:	f043 0204 	orr.w	r2, r3, #4
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	7fffffc0 	.word	0x7fffffc0

080047b0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <LL_ADC_REG_StopConversion+0x24>)
 80047be:	4013      	ands	r3, r2
 80047c0:	f043 0210 	orr.w	r2, r3, #16
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	7fffffc0 	.word	0x7fffffc0

080047d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d101      	bne.n	80047f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <LL_ADC_INJ_StopConversion+0x24>)
 800480e:	4013      	ands	r3, r2
 8004810:	f043 0220 	orr.w	r2, r3, #32
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	7fffffc0 	.word	0x7fffffc0

08004828 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b08      	cmp	r3, #8
 800483a:	d101      	bne.n	8004840 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004850:	b590      	push	{r4, r7, lr}
 8004852:	b089      	sub	sp, #36	; 0x24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800485c:	2300      	movs	r3, #0
 800485e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e1ee      	b.n	8004c48 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7fe fb63 	bl	8002f44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff feef 	bl	8004674 <LL_ADC_IsDeepPowerDownEnabled>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fed5 	bl	8004650 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff ff0a 	bl	80046c4 <LL_ADC_IsInternalRegulatorEnabled>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d114      	bne.n	80048e0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff feee 	bl	800469c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048c0:	4b8e      	ldr	r3, [pc, #568]	; (8004afc <HAL_ADC_Init+0x2ac>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	099b      	lsrs	r3, r3, #6
 80048c6:	4a8e      	ldr	r2, [pc, #568]	; (8004b00 <HAL_ADC_Init+0x2b0>)
 80048c8:	fba2 2303 	umull	r2, r3, r2, r3
 80048cc:	099b      	lsrs	r3, r3, #6
 80048ce:	3301      	adds	r3, #1
 80048d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80048d2:	e002      	b.n	80048da <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1f9      	bne.n	80048d4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff feed 	bl	80046c4 <LL_ADC_IsInternalRegulatorEnabled>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10d      	bne.n	800490c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f4:	f043 0210 	orr.w	r2, r3, #16
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004900:	f043 0201 	orr.w	r2, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff ff61 	bl	80047d8 <LL_ADC_REG_IsConversionOngoing>
 8004916:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b00      	cmp	r3, #0
 8004922:	f040 8188 	bne.w	8004c36 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b00      	cmp	r3, #0
 800492a:	f040 8184 	bne.w	8004c36 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004932:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004936:	f043 0202 	orr.w	r2, r3, #2
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fefa 	bl	800473c <LL_ADC_IsEnabled>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d136      	bne.n	80049bc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a6c      	ldr	r2, [pc, #432]	; (8004b04 <HAL_ADC_Init+0x2b4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d004      	beq.n	8004962 <HAL_ADC_Init+0x112>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a6a      	ldr	r2, [pc, #424]	; (8004b08 <HAL_ADC_Init+0x2b8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d10e      	bne.n	8004980 <HAL_ADC_Init+0x130>
 8004962:	4868      	ldr	r0, [pc, #416]	; (8004b04 <HAL_ADC_Init+0x2b4>)
 8004964:	f7ff feea 	bl	800473c <LL_ADC_IsEnabled>
 8004968:	4604      	mov	r4, r0
 800496a:	4867      	ldr	r0, [pc, #412]	; (8004b08 <HAL_ADC_Init+0x2b8>)
 800496c:	f7ff fee6 	bl	800473c <LL_ADC_IsEnabled>
 8004970:	4603      	mov	r3, r0
 8004972:	4323      	orrs	r3, r4
 8004974:	2b00      	cmp	r3, #0
 8004976:	bf0c      	ite	eq
 8004978:	2301      	moveq	r3, #1
 800497a:	2300      	movne	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	e008      	b.n	8004992 <HAL_ADC_Init+0x142>
 8004980:	4862      	ldr	r0, [pc, #392]	; (8004b0c <HAL_ADC_Init+0x2bc>)
 8004982:	f7ff fedb 	bl	800473c <LL_ADC_IsEnabled>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d012      	beq.n	80049bc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a5a      	ldr	r2, [pc, #360]	; (8004b04 <HAL_ADC_Init+0x2b4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d004      	beq.n	80049aa <HAL_ADC_Init+0x15a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a58      	ldr	r2, [pc, #352]	; (8004b08 <HAL_ADC_Init+0x2b8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d101      	bne.n	80049ae <HAL_ADC_Init+0x15e>
 80049aa:	4a59      	ldr	r2, [pc, #356]	; (8004b10 <HAL_ADC_Init+0x2c0>)
 80049ac:	e000      	b.n	80049b0 <HAL_ADC_Init+0x160>
 80049ae:	4a59      	ldr	r2, [pc, #356]	; (8004b14 <HAL_ADC_Init+0x2c4>)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	4619      	mov	r1, r3
 80049b6:	4610      	mov	r0, r2
 80049b8:	f7ff fc5e 	bl	8004278 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a52      	ldr	r2, [pc, #328]	; (8004b0c <HAL_ADC_Init+0x2bc>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d129      	bne.n	8004a1a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	7e5b      	ldrb	r3, [r3, #25]
 80049ca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80049d0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80049d6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d013      	beq.n	8004a08 <HAL_ADC_Init+0x1b8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b0c      	cmp	r3, #12
 80049e6:	d00d      	beq.n	8004a04 <HAL_ADC_Init+0x1b4>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b1c      	cmp	r3, #28
 80049ee:	d007      	beq.n	8004a00 <HAL_ADC_Init+0x1b0>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b18      	cmp	r3, #24
 80049f6:	d101      	bne.n	80049fc <HAL_ADC_Init+0x1ac>
 80049f8:	2318      	movs	r3, #24
 80049fa:	e006      	b.n	8004a0a <HAL_ADC_Init+0x1ba>
 80049fc:	2300      	movs	r3, #0
 80049fe:	e004      	b.n	8004a0a <HAL_ADC_Init+0x1ba>
 8004a00:	2310      	movs	r3, #16
 8004a02:	e002      	b.n	8004a0a <HAL_ADC_Init+0x1ba>
 8004a04:	2308      	movs	r3, #8
 8004a06:	e000      	b.n	8004a0a <HAL_ADC_Init+0x1ba>
 8004a08:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004a0a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a12:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004a14:	4313      	orrs	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e00e      	b.n	8004a38 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	7e5b      	ldrb	r3, [r3, #25]
 8004a1e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a24:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004a2a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a32:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a34:	4313      	orrs	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d106      	bne.n	8004a50 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	3b01      	subs	r3, #1
 8004a48:	045b      	lsls	r3, r3, #17
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d009      	beq.n	8004a6c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a26      	ldr	r2, [pc, #152]	; (8004b0c <HAL_ADC_Init+0x2bc>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d115      	bne.n	8004aa2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	4b26      	ldr	r3, [pc, #152]	; (8004b18 <HAL_ADC_Init+0x2c8>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	69b9      	ldr	r1, [r7, #24]
 8004a86:	430b      	orrs	r3, r1
 8004a88:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	611a      	str	r2, [r3, #16]
 8004aa0:	e009      	b.n	8004ab6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	4b1c      	ldr	r3, [pc, #112]	; (8004b1c <HAL_ADC_Init+0x2cc>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	69b9      	ldr	r1, [r7, #24]
 8004ab2:	430b      	orrs	r3, r1
 8004ab4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fe8c 	bl	80047d8 <LL_ADC_REG_IsConversionOngoing>
 8004ac0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff feae 	bl	8004828 <LL_ADC_INJ_IsConversionOngoing>
 8004acc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f040 808e 	bne.w	8004bf2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f040 808a 	bne.w	8004bf2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a0a      	ldr	r2, [pc, #40]	; (8004b0c <HAL_ADC_Init+0x2bc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d11b      	bne.n	8004b20 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	7e1b      	ldrb	r3, [r3, #24]
 8004aec:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004af4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	e018      	b.n	8004b2e <HAL_ADC_Init+0x2de>
 8004afc:	24000100 	.word	0x24000100
 8004b00:	053e2d63 	.word	0x053e2d63
 8004b04:	40022000 	.word	0x40022000
 8004b08:	40022100 	.word	0x40022100
 8004b0c:	58026000 	.word	0x58026000
 8004b10:	40022300 	.word	0x40022300
 8004b14:	58026300 	.word	0x58026300
 8004b18:	fff04007 	.word	0xfff04007
 8004b1c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	7e1b      	ldrb	r3, [r3, #24]
 8004b24:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	4b46      	ldr	r3, [pc, #280]	; (8004c50 <HAL_ADC_Init+0x400>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	69b9      	ldr	r1, [r7, #24]
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d137      	bne.n	8004bbc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a3f      	ldr	r2, [pc, #252]	; (8004c54 <HAL_ADC_Init+0x404>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d116      	bne.n	8004b8a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	4b3d      	ldr	r3, [pc, #244]	; (8004c58 <HAL_ADC_Init+0x408>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004b6e:	4311      	orrs	r1, r2
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b74:	4311      	orrs	r1, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	611a      	str	r2, [r3, #16]
 8004b88:	e020      	b.n	8004bcc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	4b32      	ldr	r3, [pc, #200]	; (8004c5c <HAL_ADC_Init+0x40c>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b98:	3a01      	subs	r2, #1
 8004b9a:	0411      	lsls	r1, r2, #16
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004ba0:	4311      	orrs	r1, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ba6:	4311      	orrs	r1, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004bac:	430a      	orrs	r2, r1
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	611a      	str	r2, [r3, #16]
 8004bba:	e007      	b.n	8004bcc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1b      	ldr	r2, [pc, #108]	; (8004c54 <HAL_ADC_Init+0x404>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d002      	beq.n	8004bf2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f001 f909 	bl	8005e04 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d10c      	bne.n	8004c14 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	f023 010f 	bic.w	r1, r3, #15
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	1e5a      	subs	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
 8004c12:	e007      	b.n	8004c24 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 020f 	bic.w	r2, r2, #15
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c28:	f023 0303 	bic.w	r3, r3, #3
 8004c2c:	f043 0201 	orr.w	r2, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	661a      	str	r2, [r3, #96]	; 0x60
 8004c34:	e007      	b.n	8004c46 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c3a:	f043 0210 	orr.w	r2, r3, #16
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c46:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3724      	adds	r7, #36	; 0x24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd90      	pop	{r4, r7, pc}
 8004c50:	ffffbffc 	.word	0xffffbffc
 8004c54:	58026000 	.word	0x58026000
 8004c58:	fc00f81f 	.word	0xfc00f81f
 8004c5c:	fc00f81e 	.word	0xfc00f81e

08004c60 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a5c      	ldr	r2, [pc, #368]	; (8004de0 <HAL_ADC_Start+0x180>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <HAL_ADC_Start+0x1c>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a5b      	ldr	r2, [pc, #364]	; (8004de4 <HAL_ADC_Start+0x184>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d101      	bne.n	8004c80 <HAL_ADC_Start+0x20>
 8004c7c:	4b5a      	ldr	r3, [pc, #360]	; (8004de8 <HAL_ADC_Start+0x188>)
 8004c7e:	e000      	b.n	8004c82 <HAL_ADC_Start+0x22>
 8004c80:	4b5a      	ldr	r3, [pc, #360]	; (8004dec <HAL_ADC_Start+0x18c>)
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff fcc8 	bl	8004618 <LL_ADC_GetMultimode>
 8004c88:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff fda2 	bl	80047d8 <LL_ADC_REG_IsConversionOngoing>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f040 809a 	bne.w	8004dd0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_ADC_Start+0x4a>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e095      	b.n	8004dd6 <HAL_ADC_Start+0x176>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 ffbc 	bl	8005c30 <ADC_Enable>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f040 8081 	bne.w	8004dc6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004cc8:	4b49      	ldr	r3, [pc, #292]	; (8004df0 <HAL_ADC_Start+0x190>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a42      	ldr	r2, [pc, #264]	; (8004de4 <HAL_ADC_Start+0x184>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d002      	beq.n	8004ce4 <HAL_ADC_Start+0x84>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	e000      	b.n	8004ce6 <HAL_ADC_Start+0x86>
 8004ce4:	4b3e      	ldr	r3, [pc, #248]	; (8004de0 <HAL_ADC_Start+0x180>)
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6812      	ldr	r2, [r2, #0]
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d002      	beq.n	8004cf4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d105      	bne.n	8004d00 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0c:	d106      	bne.n	8004d1c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d12:	f023 0206 	bic.w	r2, r3, #6
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	665a      	str	r2, [r3, #100]	; 0x64
 8004d1a:	e002      	b.n	8004d22 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	221c      	movs	r2, #28
 8004d28:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2b      	ldr	r2, [pc, #172]	; (8004de4 <HAL_ADC_Start+0x184>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d002      	beq.n	8004d42 <HAL_ADC_Start+0xe2>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	e000      	b.n	8004d44 <HAL_ADC_Start+0xe4>
 8004d42:	4b27      	ldr	r3, [pc, #156]	; (8004de0 <HAL_ADC_Start+0x180>)
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6812      	ldr	r2, [r2, #0]
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d008      	beq.n	8004d5e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b05      	cmp	r3, #5
 8004d56:	d002      	beq.n	8004d5e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	2b09      	cmp	r3, #9
 8004d5c:	d114      	bne.n	8004d88 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff fd01 	bl	8004788 <LL_ADC_REG_StartConversion>
 8004d86:	e025      	b.n	8004dd4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a12      	ldr	r2, [pc, #72]	; (8004de4 <HAL_ADC_Start+0x184>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d002      	beq.n	8004da4 <HAL_ADC_Start+0x144>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	e000      	b.n	8004da6 <HAL_ADC_Start+0x146>
 8004da4:	4b0e      	ldr	r3, [pc, #56]	; (8004de0 <HAL_ADC_Start+0x180>)
 8004da6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00f      	beq.n	8004dd4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004dbc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	661a      	str	r2, [r3, #96]	; 0x60
 8004dc4:	e006      	b.n	8004dd4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004dce:	e001      	b.n	8004dd4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40022000 	.word	0x40022000
 8004de4:	40022100 	.word	0x40022100
 8004de8:	40022300 	.word	0x40022300
 8004dec:	58026300 	.word	0x58026300
 8004df0:	fffff0fe 	.word	0xfffff0fe

08004df4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_ADC_Stop+0x16>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e021      	b.n	8004e4e <HAL_ADC_Stop+0x5a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004e12:	2103      	movs	r1, #3
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fe4f 	bl	8005ab8 <ADC_ConversionStop>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10f      	bne.n	8004e44 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 ff8d 	bl	8005d44 <ADC_Disable>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d107      	bne.n	8004e44 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e38:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <HAL_ADC_Stop+0x64>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	f043 0201 	orr.w	r2, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	ffffeefe 	.word	0xffffeefe

08004e5c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a72      	ldr	r2, [pc, #456]	; (8005034 <HAL_ADC_PollForConversion+0x1d8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d004      	beq.n	8004e7a <HAL_ADC_PollForConversion+0x1e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a70      	ldr	r2, [pc, #448]	; (8005038 <HAL_ADC_PollForConversion+0x1dc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d101      	bne.n	8004e7e <HAL_ADC_PollForConversion+0x22>
 8004e7a:	4b70      	ldr	r3, [pc, #448]	; (800503c <HAL_ADC_PollForConversion+0x1e0>)
 8004e7c:	e000      	b.n	8004e80 <HAL_ADC_PollForConversion+0x24>
 8004e7e:	4b70      	ldr	r3, [pc, #448]	; (8005040 <HAL_ADC_PollForConversion+0x1e4>)
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff fbc9 	bl	8004618 <LL_ADC_GetMultimode>
 8004e86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d102      	bne.n	8004e96 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004e90:	2308      	movs	r3, #8
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	e037      	b.n	8004f06 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2b05      	cmp	r3, #5
 8004ea0:	d002      	beq.n	8004ea8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b09      	cmp	r3, #9
 8004ea6:	d111      	bne.n	8004ecc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eba:	f043 0220 	orr.w	r2, r3, #32
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e0b1      	b.n	800502a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004ec6:	2304      	movs	r3, #4
 8004ec8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004eca:	e01c      	b.n	8004f06 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a58      	ldr	r2, [pc, #352]	; (8005034 <HAL_ADC_PollForConversion+0x1d8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d004      	beq.n	8004ee0 <HAL_ADC_PollForConversion+0x84>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a57      	ldr	r2, [pc, #348]	; (8005038 <HAL_ADC_PollForConversion+0x1dc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d101      	bne.n	8004ee4 <HAL_ADC_PollForConversion+0x88>
 8004ee0:	4b56      	ldr	r3, [pc, #344]	; (800503c <HAL_ADC_PollForConversion+0x1e0>)
 8004ee2:	e000      	b.n	8004ee6 <HAL_ADC_PollForConversion+0x8a>
 8004ee4:	4b56      	ldr	r3, [pc, #344]	; (8005040 <HAL_ADC_PollForConversion+0x1e4>)
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff fba4 	bl	8004634 <LL_ADC_GetMultiDMATransfer>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d007      	beq.n	8004f02 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef6:	f043 0220 	orr.w	r2, r3, #32
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e093      	b.n	800502a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004f02:	2304      	movs	r3, #4
 8004f04:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004f06:	f7ff f971 	bl	80041ec <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004f0c:	e021      	b.n	8004f52 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f14:	d01d      	beq.n	8004f52 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004f16:	f7ff f969 	bl	80041ec <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d302      	bcc.n	8004f2c <HAL_ADC_PollForConversion+0xd0>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d112      	bne.n	8004f52 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10b      	bne.n	8004f52 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3e:	f043 0204 	orr.w	r2, r3, #4
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e06b      	b.n	800502a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0d6      	beq.n	8004f0e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff faa7 	bl	80044c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01c      	beq.n	8004fb6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	7e5b      	ldrb	r3, [r3, #25]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d118      	bne.n	8004fb6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d111      	bne.n	8004fb6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d105      	bne.n	8004fb6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fae:	f043 0201 	orr.w	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1f      	ldr	r2, [pc, #124]	; (8005038 <HAL_ADC_PollForConversion+0x1dc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d002      	beq.n	8004fc6 <HAL_ADC_PollForConversion+0x16a>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	e000      	b.n	8004fc8 <HAL_ADC_PollForConversion+0x16c>
 8004fc6:	4b1b      	ldr	r3, [pc, #108]	; (8005034 <HAL_ADC_PollForConversion+0x1d8>)
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d008      	beq.n	8004fe2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2b05      	cmp	r3, #5
 8004fda:	d002      	beq.n	8004fe2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2b09      	cmp	r3, #9
 8004fe0:	d104      	bne.n	8004fec <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	61bb      	str	r3, [r7, #24]
 8004fea:	e00c      	b.n	8005006 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a11      	ldr	r2, [pc, #68]	; (8005038 <HAL_ADC_PollForConversion+0x1dc>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d002      	beq.n	8004ffc <HAL_ADC_PollForConversion+0x1a0>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	e000      	b.n	8004ffe <HAL_ADC_PollForConversion+0x1a2>
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <HAL_ADC_PollForConversion+0x1d8>)
 8004ffe:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	2b08      	cmp	r3, #8
 800500a:	d104      	bne.n	8005016 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2208      	movs	r2, #8
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e008      	b.n	8005028 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d103      	bne.n	8005028 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	220c      	movs	r2, #12
 8005026:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3720      	adds	r7, #32
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40022000 	.word	0x40022000
 8005038:	40022100 	.word	0x40022100
 800503c:	40022300 	.word	0x40022300
 8005040:	58026300 	.word	0x58026300

08005044 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
	...

08005060 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005060:	b590      	push	{r4, r7, lr}
 8005062:	b0b9      	sub	sp, #228	; 0xe4
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800507a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4aa9      	ldr	r2, [pc, #676]	; (8005328 <HAL_ADC_ConfigChannel+0x2c8>)
 8005082:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800508a:	2b01      	cmp	r3, #1
 800508c:	d102      	bne.n	8005094 <HAL_ADC_ConfigChannel+0x34>
 800508e:	2302      	movs	r3, #2
 8005090:	f000 bcfa 	b.w	8005a88 <HAL_ADC_ConfigChannel+0xa28>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff fb99 	bl	80047d8 <LL_ADC_REG_IsConversionOngoing>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f040 84de 	bne.w	8005a6a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a9e      	ldr	r2, [pc, #632]	; (800532c <HAL_ADC_ConfigChannel+0x2cc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d033      	beq.n	8005120 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d108      	bne.n	80050d6 <HAL_ADC_ConfigChannel+0x76>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	0e9b      	lsrs	r3, r3, #26
 80050ca:	f003 031f 	and.w	r3, r3, #31
 80050ce:	2201      	movs	r2, #1
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	e01d      	b.n	8005112 <HAL_ADC_ConfigChannel+0xb2>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050e2:	fa93 f3a3 	rbit	r3, r3
 80050e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80050ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80050f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80050fa:	2320      	movs	r3, #32
 80050fc:	e004      	b.n	8005108 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80050fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005102:	fab3 f383 	clz	r3, r3
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f003 031f 	and.w	r3, r3, #31
 800510c:	2201      	movs	r2, #1
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	69d1      	ldr	r1, [r2, #28]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	430b      	orrs	r3, r1
 800511e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	6859      	ldr	r1, [r3, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	f7ff f9dc 	bl	80044ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff fb4e 	bl	80047d8 <LL_ADC_REG_IsConversionOngoing>
 800513c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fb6f 	bl	8004828 <LL_ADC_INJ_IsConversionOngoing>
 800514a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800514e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005152:	2b00      	cmp	r3, #0
 8005154:	f040 8270 	bne.w	8005638 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005158:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800515c:	2b00      	cmp	r3, #0
 800515e:	f040 826b 	bne.w	8005638 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6819      	ldr	r1, [r3, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	461a      	mov	r2, r3
 8005170:	f7ff f9e7 	bl	8004542 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a6c      	ldr	r2, [pc, #432]	; (800532c <HAL_ADC_ConfigChannel+0x2cc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d10d      	bne.n	800519a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	695a      	ldr	r2, [r3, #20]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	08db      	lsrs	r3, r3, #3
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005198:	e032      	b.n	8005200 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800519a:	4b65      	ldr	r3, [pc, #404]	; (8005330 <HAL_ADC_ConfigChannel+0x2d0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80051a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051a6:	d10b      	bne.n	80051c0 <HAL_ADC_ConfigChannel+0x160>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	695a      	ldr	r2, [r3, #20]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	089b      	lsrs	r3, r3, #2
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	e01d      	b.n	80051fc <HAL_ADC_ConfigChannel+0x19c>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10b      	bne.n	80051e6 <HAL_ADC_ConfigChannel+0x186>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695a      	ldr	r2, [r3, #20]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	089b      	lsrs	r3, r3, #2
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	e00a      	b.n	80051fc <HAL_ADC_ConfigChannel+0x19c>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	695a      	ldr	r2, [r3, #20]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	089b      	lsrs	r3, r3, #2
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	2b04      	cmp	r3, #4
 8005206:	d048      	beq.n	800529a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6818      	ldr	r0, [r3, #0]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	6919      	ldr	r1, [r3, #16]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005218:	f7ff f862 	bl	80042e0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a42      	ldr	r2, [pc, #264]	; (800532c <HAL_ADC_ConfigChannel+0x2cc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d119      	bne.n	800525a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	6919      	ldr	r1, [r3, #16]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	461a      	mov	r2, r3
 8005234:	f7ff f8fa 	bl	800442c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	6919      	ldr	r1, [r3, #16]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d102      	bne.n	8005250 <HAL_ADC_ConfigChannel+0x1f0>
 800524a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800524e:	e000      	b.n	8005252 <HAL_ADC_ConfigChannel+0x1f2>
 8005250:	2300      	movs	r3, #0
 8005252:	461a      	mov	r2, r3
 8005254:	f7ff f8c8 	bl	80043e8 <LL_ADC_SetOffsetSaturation>
 8005258:	e1ee      	b.n	8005638 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6919      	ldr	r1, [r3, #16]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005268:	2b01      	cmp	r3, #1
 800526a:	d102      	bne.n	8005272 <HAL_ADC_ConfigChannel+0x212>
 800526c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005270:	e000      	b.n	8005274 <HAL_ADC_ConfigChannel+0x214>
 8005272:	2300      	movs	r3, #0
 8005274:	461a      	mov	r2, r3
 8005276:	f7ff f895 	bl	80043a4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6919      	ldr	r1, [r3, #16]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	7e1b      	ldrb	r3, [r3, #24]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d102      	bne.n	8005290 <HAL_ADC_ConfigChannel+0x230>
 800528a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800528e:	e000      	b.n	8005292 <HAL_ADC_ConfigChannel+0x232>
 8005290:	2300      	movs	r3, #0
 8005292:	461a      	mov	r2, r3
 8005294:	f7ff f86c 	bl	8004370 <LL_ADC_SetDataRightShift>
 8005298:	e1ce      	b.n	8005638 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a23      	ldr	r2, [pc, #140]	; (800532c <HAL_ADC_ConfigChannel+0x2cc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	f040 8181 	bne.w	80055a8 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2100      	movs	r1, #0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff f849 	bl	8004344 <LL_ADC_GetOffsetChannel>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <HAL_ADC_ConfigChannel+0x272>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff f83e 	bl	8004344 <LL_ADC_GetOffsetChannel>
 80052c8:	4603      	mov	r3, r0
 80052ca:	0e9b      	lsrs	r3, r3, #26
 80052cc:	f003 021f 	and.w	r2, r3, #31
 80052d0:	e01e      	b.n	8005310 <HAL_ADC_ConfigChannel+0x2b0>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2100      	movs	r1, #0
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff f833 	bl	8004344 <LL_ADC_GetOffsetChannel>
 80052de:	4603      	mov	r3, r0
 80052e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052e8:	fa93 f3a3 	rbit	r3, r3
 80052ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80052f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80052f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80052f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8005300:	2320      	movs	r3, #32
 8005302:	e004      	b.n	800530e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8005304:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005308:	fab3 f383 	clz	r3, r3
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10b      	bne.n	8005334 <HAL_ADC_ConfigChannel+0x2d4>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	0e9b      	lsrs	r3, r3, #26
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	e01e      	b.n	8005366 <HAL_ADC_ConfigChannel+0x306>
 8005328:	47ff0000 	.word	0x47ff0000
 800532c:	58026000 	.word	0x58026000
 8005330:	5c001000 	.word	0x5c001000
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005340:	fa93 f3a3 	rbit	r3, r3
 8005344:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800534c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005350:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8005358:	2320      	movs	r3, #32
 800535a:	e004      	b.n	8005366 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800535c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005360:	fab3 f383 	clz	r3, r3
 8005364:	b2db      	uxtb	r3, r3
 8005366:	429a      	cmp	r2, r3
 8005368:	d106      	bne.n	8005378 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2200      	movs	r2, #0
 8005370:	2100      	movs	r1, #0
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff f87c 	bl	8004470 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe ffe0 	bl	8004344 <LL_ADC_GetOffsetChannel>
 8005384:	4603      	mov	r3, r0
 8005386:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10a      	bne.n	80053a4 <HAL_ADC_ConfigChannel+0x344>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2101      	movs	r1, #1
 8005394:	4618      	mov	r0, r3
 8005396:	f7fe ffd5 	bl	8004344 <LL_ADC_GetOffsetChannel>
 800539a:	4603      	mov	r3, r0
 800539c:	0e9b      	lsrs	r3, r3, #26
 800539e:	f003 021f 	and.w	r2, r3, #31
 80053a2:	e01e      	b.n	80053e2 <HAL_ADC_ConfigChannel+0x382>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2101      	movs	r1, #1
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fe ffca 	bl	8004344 <LL_ADC_GetOffsetChannel>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053ba:	fa93 f3a3 	rbit	r3, r3
 80053be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80053c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80053ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80053d2:	2320      	movs	r3, #32
 80053d4:	e004      	b.n	80053e0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80053d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053da:	fab3 f383 	clz	r3, r3
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d105      	bne.n	80053fa <HAL_ADC_ConfigChannel+0x39a>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	0e9b      	lsrs	r3, r3, #26
 80053f4:	f003 031f 	and.w	r3, r3, #31
 80053f8:	e018      	b.n	800542c <HAL_ADC_ConfigChannel+0x3cc>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005402:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005406:	fa93 f3a3 	rbit	r3, r3
 800540a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800540e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005412:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8005416:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800541e:	2320      	movs	r3, #32
 8005420:	e004      	b.n	800542c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8005422:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005426:	fab3 f383 	clz	r3, r3
 800542a:	b2db      	uxtb	r3, r3
 800542c:	429a      	cmp	r2, r3
 800542e:	d106      	bne.n	800543e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2200      	movs	r2, #0
 8005436:	2101      	movs	r1, #1
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff f819 	bl	8004470 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2102      	movs	r1, #2
 8005444:	4618      	mov	r0, r3
 8005446:	f7fe ff7d 	bl	8004344 <LL_ADC_GetOffsetChannel>
 800544a:	4603      	mov	r3, r0
 800544c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <HAL_ADC_ConfigChannel+0x40a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2102      	movs	r1, #2
 800545a:	4618      	mov	r0, r3
 800545c:	f7fe ff72 	bl	8004344 <LL_ADC_GetOffsetChannel>
 8005460:	4603      	mov	r3, r0
 8005462:	0e9b      	lsrs	r3, r3, #26
 8005464:	f003 021f 	and.w	r2, r3, #31
 8005468:	e01e      	b.n	80054a8 <HAL_ADC_ConfigChannel+0x448>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2102      	movs	r1, #2
 8005470:	4618      	mov	r0, r3
 8005472:	f7fe ff67 	bl	8004344 <LL_ADC_GetOffsetChannel>
 8005476:	4603      	mov	r3, r0
 8005478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005480:	fa93 f3a3 	rbit	r3, r3
 8005484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800548c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005490:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8005498:	2320      	movs	r3, #32
 800549a:	e004      	b.n	80054a6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800549c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054a0:	fab3 f383 	clz	r3, r3
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	461a      	mov	r2, r3
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d105      	bne.n	80054c0 <HAL_ADC_ConfigChannel+0x460>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	0e9b      	lsrs	r3, r3, #26
 80054ba:	f003 031f 	and.w	r3, r3, #31
 80054be:	e014      	b.n	80054ea <HAL_ADC_ConfigChannel+0x48a>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054c8:	fa93 f3a3 	rbit	r3, r3
 80054cc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80054ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80054d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80054dc:	2320      	movs	r3, #32
 80054de:	e004      	b.n	80054ea <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80054e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054e4:	fab3 f383 	clz	r3, r3
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d106      	bne.n	80054fc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2200      	movs	r2, #0
 80054f4:	2102      	movs	r1, #2
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fe ffba 	bl	8004470 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2103      	movs	r1, #3
 8005502:	4618      	mov	r0, r3
 8005504:	f7fe ff1e 	bl	8004344 <LL_ADC_GetOffsetChannel>
 8005508:	4603      	mov	r3, r0
 800550a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <HAL_ADC_ConfigChannel+0x4c8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2103      	movs	r1, #3
 8005518:	4618      	mov	r0, r3
 800551a:	f7fe ff13 	bl	8004344 <LL_ADC_GetOffsetChannel>
 800551e:	4603      	mov	r3, r0
 8005520:	0e9b      	lsrs	r3, r3, #26
 8005522:	f003 021f 	and.w	r2, r3, #31
 8005526:	e017      	b.n	8005558 <HAL_ADC_ConfigChannel+0x4f8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2103      	movs	r1, #3
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe ff08 	bl	8004344 <LL_ADC_GetOffsetChannel>
 8005534:	4603      	mov	r3, r0
 8005536:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800553a:	fa93 f3a3 	rbit	r3, r3
 800553e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005542:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8005544:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800554a:	2320      	movs	r3, #32
 800554c:	e003      	b.n	8005556 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800554e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005550:	fab3 f383 	clz	r3, r3
 8005554:	b2db      	uxtb	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005560:	2b00      	cmp	r3, #0
 8005562:	d105      	bne.n	8005570 <HAL_ADC_ConfigChannel+0x510>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	0e9b      	lsrs	r3, r3, #26
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	e011      	b.n	8005594 <HAL_ADC_ConfigChannel+0x534>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005578:	fa93 f3a3 	rbit	r3, r3
 800557c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800557e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005580:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8005582:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8005588:	2320      	movs	r3, #32
 800558a:	e003      	b.n	8005594 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800558c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800558e:	fab3 f383 	clz	r3, r3
 8005592:	b2db      	uxtb	r3, r3
 8005594:	429a      	cmp	r2, r3
 8005596:	d14f      	bne.n	8005638 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2200      	movs	r2, #0
 800559e:	2103      	movs	r1, #3
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fe ff65 	bl	8004470 <LL_ADC_SetOffsetState>
 80055a6:	e047      	b.n	8005638 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	069b      	lsls	r3, r3, #26
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d107      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055ca:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	069b      	lsls	r3, r3, #26
 80055dc:	429a      	cmp	r2, r3
 80055de:	d107      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055ee:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	069b      	lsls	r3, r3, #26
 8005600:	429a      	cmp	r2, r3
 8005602:	d107      	bne.n	8005614 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005612:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800561a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	069b      	lsls	r3, r3, #26
 8005624:	429a      	cmp	r2, r3
 8005626:	d107      	bne.n	8005638 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005636:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff f87d 	bl	800473c <LL_ADC_IsEnabled>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	f040 8219 	bne.w	8005a7c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6818      	ldr	r0, [r3, #0]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6819      	ldr	r1, [r3, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	461a      	mov	r2, r3
 8005658:	f7fe ff9e 	bl	8004598 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	4aa1      	ldr	r2, [pc, #644]	; (80058e8 <HAL_ADC_ConfigChannel+0x888>)
 8005662:	4293      	cmp	r3, r2
 8005664:	f040 812e 	bne.w	80058c4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10b      	bne.n	8005690 <HAL_ADC_ConfigChannel+0x630>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	0e9b      	lsrs	r3, r3, #26
 800567e:	3301      	adds	r3, #1
 8005680:	f003 031f 	and.w	r3, r3, #31
 8005684:	2b09      	cmp	r3, #9
 8005686:	bf94      	ite	ls
 8005688:	2301      	movls	r3, #1
 800568a:	2300      	movhi	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	e019      	b.n	80056c4 <HAL_ADC_ConfigChannel+0x664>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005698:	fa93 f3a3 	rbit	r3, r3
 800569c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800569e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80056a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80056a8:	2320      	movs	r3, #32
 80056aa:	e003      	b.n	80056b4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80056ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ae:	fab3 f383 	clz	r3, r3
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	3301      	adds	r3, #1
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	2b09      	cmp	r3, #9
 80056bc:	bf94      	ite	ls
 80056be:	2301      	movls	r3, #1
 80056c0:	2300      	movhi	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d079      	beq.n	80057bc <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d107      	bne.n	80056e4 <HAL_ADC_ConfigChannel+0x684>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	0e9b      	lsrs	r3, r3, #26
 80056da:	3301      	adds	r3, #1
 80056dc:	069b      	lsls	r3, r3, #26
 80056de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056e2:	e015      	b.n	8005710 <HAL_ADC_ConfigChannel+0x6b0>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ec:	fa93 f3a3 	rbit	r3, r3
 80056f0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80056f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80056f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80056fc:	2320      	movs	r3, #32
 80056fe:	e003      	b.n	8005708 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8005700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005702:	fab3 f383 	clz	r3, r3
 8005706:	b2db      	uxtb	r3, r3
 8005708:	3301      	adds	r3, #1
 800570a:	069b      	lsls	r3, r3, #26
 800570c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005718:	2b00      	cmp	r3, #0
 800571a:	d109      	bne.n	8005730 <HAL_ADC_ConfigChannel+0x6d0>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	0e9b      	lsrs	r3, r3, #26
 8005722:	3301      	adds	r3, #1
 8005724:	f003 031f 	and.w	r3, r3, #31
 8005728:	2101      	movs	r1, #1
 800572a:	fa01 f303 	lsl.w	r3, r1, r3
 800572e:	e017      	b.n	8005760 <HAL_ADC_ConfigChannel+0x700>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005738:	fa93 f3a3 	rbit	r3, r3
 800573c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800573e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005740:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005748:	2320      	movs	r3, #32
 800574a:	e003      	b.n	8005754 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800574c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800574e:	fab3 f383 	clz	r3, r3
 8005752:	b2db      	uxtb	r3, r3
 8005754:	3301      	adds	r3, #1
 8005756:	f003 031f 	and.w	r3, r3, #31
 800575a:	2101      	movs	r1, #1
 800575c:	fa01 f303 	lsl.w	r3, r1, r3
 8005760:	ea42 0103 	orr.w	r1, r2, r3
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10a      	bne.n	8005786 <HAL_ADC_ConfigChannel+0x726>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	0e9b      	lsrs	r3, r3, #26
 8005776:	3301      	adds	r3, #1
 8005778:	f003 021f 	and.w	r2, r3, #31
 800577c:	4613      	mov	r3, r2
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	4413      	add	r3, r2
 8005782:	051b      	lsls	r3, r3, #20
 8005784:	e018      	b.n	80057b8 <HAL_ADC_ConfigChannel+0x758>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578e:	fa93 f3a3 	rbit	r3, r3
 8005792:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800579e:	2320      	movs	r3, #32
 80057a0:	e003      	b.n	80057aa <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	fab3 f383 	clz	r3, r3
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	3301      	adds	r3, #1
 80057ac:	f003 021f 	and.w	r2, r3, #31
 80057b0:	4613      	mov	r3, r2
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	4413      	add	r3, r2
 80057b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057b8:	430b      	orrs	r3, r1
 80057ba:	e07e      	b.n	80058ba <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d107      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x778>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	0e9b      	lsrs	r3, r3, #26
 80057ce:	3301      	adds	r3, #1
 80057d0:	069b      	lsls	r3, r3, #26
 80057d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057d6:	e015      	b.n	8005804 <HAL_ADC_ConfigChannel+0x7a4>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	fa93 f3a3 	rbit	r3, r3
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80057ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80057f0:	2320      	movs	r3, #32
 80057f2:	e003      	b.n	80057fc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	fab3 f383 	clz	r3, r3
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	3301      	adds	r3, #1
 80057fe:	069b      	lsls	r3, r3, #26
 8005800:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800580c:	2b00      	cmp	r3, #0
 800580e:	d109      	bne.n	8005824 <HAL_ADC_ConfigChannel+0x7c4>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	0e9b      	lsrs	r3, r3, #26
 8005816:	3301      	adds	r3, #1
 8005818:	f003 031f 	and.w	r3, r3, #31
 800581c:	2101      	movs	r1, #1
 800581e:	fa01 f303 	lsl.w	r3, r1, r3
 8005822:	e017      	b.n	8005854 <HAL_ADC_ConfigChannel+0x7f4>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	fa93 f3a3 	rbit	r3, r3
 8005830:	61bb      	str	r3, [r7, #24]
  return result;
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 800583c:	2320      	movs	r3, #32
 800583e:	e003      	b.n	8005848 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	fab3 f383 	clz	r3, r3
 8005846:	b2db      	uxtb	r3, r3
 8005848:	3301      	adds	r3, #1
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	2101      	movs	r1, #1
 8005850:	fa01 f303 	lsl.w	r3, r1, r3
 8005854:	ea42 0103 	orr.w	r1, r2, r3
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10d      	bne.n	8005880 <HAL_ADC_ConfigChannel+0x820>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	0e9b      	lsrs	r3, r3, #26
 800586a:	3301      	adds	r3, #1
 800586c:	f003 021f 	and.w	r2, r3, #31
 8005870:	4613      	mov	r3, r2
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	4413      	add	r3, r2
 8005876:	3b1e      	subs	r3, #30
 8005878:	051b      	lsls	r3, r3, #20
 800587a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800587e:	e01b      	b.n	80058b8 <HAL_ADC_ConfigChannel+0x858>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	fa93 f3a3 	rbit	r3, r3
 800588c:	60fb      	str	r3, [r7, #12]
  return result;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005898:	2320      	movs	r3, #32
 800589a:	e003      	b.n	80058a4 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	fab3 f383 	clz	r3, r3
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	3301      	adds	r3, #1
 80058a6:	f003 021f 	and.w	r2, r3, #31
 80058aa:	4613      	mov	r3, r2
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	4413      	add	r3, r2
 80058b0:	3b1e      	subs	r3, #30
 80058b2:	051b      	lsls	r3, r3, #20
 80058b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058b8:	430b      	orrs	r3, r1
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	6892      	ldr	r2, [r2, #8]
 80058be:	4619      	mov	r1, r3
 80058c0:	f7fe fe3f 	bl	8004542 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f280 80d7 	bge.w	8005a7c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a06      	ldr	r2, [pc, #24]	; (80058ec <HAL_ADC_ConfigChannel+0x88c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d004      	beq.n	80058e2 <HAL_ADC_ConfigChannel+0x882>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a04      	ldr	r2, [pc, #16]	; (80058f0 <HAL_ADC_ConfigChannel+0x890>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d10a      	bne.n	80058f8 <HAL_ADC_ConfigChannel+0x898>
 80058e2:	4b04      	ldr	r3, [pc, #16]	; (80058f4 <HAL_ADC_ConfigChannel+0x894>)
 80058e4:	e009      	b.n	80058fa <HAL_ADC_ConfigChannel+0x89a>
 80058e6:	bf00      	nop
 80058e8:	47ff0000 	.word	0x47ff0000
 80058ec:	40022000 	.word	0x40022000
 80058f0:	40022100 	.word	0x40022100
 80058f4:	40022300 	.word	0x40022300
 80058f8:	4b65      	ldr	r3, [pc, #404]	; (8005a90 <HAL_ADC_ConfigChannel+0xa30>)
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe fce2 	bl	80042c4 <LL_ADC_GetCommonPathInternalCh>
 8005900:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a62      	ldr	r2, [pc, #392]	; (8005a94 <HAL_ADC_ConfigChannel+0xa34>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d004      	beq.n	8005918 <HAL_ADC_ConfigChannel+0x8b8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a61      	ldr	r2, [pc, #388]	; (8005a98 <HAL_ADC_ConfigChannel+0xa38>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d10e      	bne.n	8005936 <HAL_ADC_ConfigChannel+0x8d6>
 8005918:	485e      	ldr	r0, [pc, #376]	; (8005a94 <HAL_ADC_ConfigChannel+0xa34>)
 800591a:	f7fe ff0f 	bl	800473c <LL_ADC_IsEnabled>
 800591e:	4604      	mov	r4, r0
 8005920:	485d      	ldr	r0, [pc, #372]	; (8005a98 <HAL_ADC_ConfigChannel+0xa38>)
 8005922:	f7fe ff0b 	bl	800473c <LL_ADC_IsEnabled>
 8005926:	4603      	mov	r3, r0
 8005928:	4323      	orrs	r3, r4
 800592a:	2b00      	cmp	r3, #0
 800592c:	bf0c      	ite	eq
 800592e:	2301      	moveq	r3, #1
 8005930:	2300      	movne	r3, #0
 8005932:	b2db      	uxtb	r3, r3
 8005934:	e008      	b.n	8005948 <HAL_ADC_ConfigChannel+0x8e8>
 8005936:	4859      	ldr	r0, [pc, #356]	; (8005a9c <HAL_ADC_ConfigChannel+0xa3c>)
 8005938:	f7fe ff00 	bl	800473c <LL_ADC_IsEnabled>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	bf0c      	ite	eq
 8005942:	2301      	moveq	r3, #1
 8005944:	2300      	movne	r3, #0
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8084 	beq.w	8005a56 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a53      	ldr	r2, [pc, #332]	; (8005aa0 <HAL_ADC_ConfigChannel+0xa40>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d132      	bne.n	80059be <HAL_ADC_ConfigChannel+0x95e>
 8005958:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800595c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d12c      	bne.n	80059be <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a4c      	ldr	r2, [pc, #304]	; (8005a9c <HAL_ADC_ConfigChannel+0xa3c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	f040 8086 	bne.w	8005a7c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a47      	ldr	r2, [pc, #284]	; (8005a94 <HAL_ADC_ConfigChannel+0xa34>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d004      	beq.n	8005984 <HAL_ADC_ConfigChannel+0x924>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a46      	ldr	r2, [pc, #280]	; (8005a98 <HAL_ADC_ConfigChannel+0xa38>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d101      	bne.n	8005988 <HAL_ADC_ConfigChannel+0x928>
 8005984:	4a47      	ldr	r2, [pc, #284]	; (8005aa4 <HAL_ADC_ConfigChannel+0xa44>)
 8005986:	e000      	b.n	800598a <HAL_ADC_ConfigChannel+0x92a>
 8005988:	4a41      	ldr	r2, [pc, #260]	; (8005a90 <HAL_ADC_ConfigChannel+0xa30>)
 800598a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800598e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005992:	4619      	mov	r1, r3
 8005994:	4610      	mov	r0, r2
 8005996:	f7fe fc82 	bl	800429e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800599a:	4b43      	ldr	r3, [pc, #268]	; (8005aa8 <HAL_ADC_ConfigChannel+0xa48>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	099b      	lsrs	r3, r3, #6
 80059a0:	4a42      	ldr	r2, [pc, #264]	; (8005aac <HAL_ADC_ConfigChannel+0xa4c>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	099b      	lsrs	r3, r3, #6
 80059a8:	3301      	adds	r3, #1
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80059ae:	e002      	b.n	80059b6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f9      	bne.n	80059b0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80059bc:	e05e      	b.n	8005a7c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a3b      	ldr	r2, [pc, #236]	; (8005ab0 <HAL_ADC_ConfigChannel+0xa50>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d120      	bne.n	8005a0a <HAL_ADC_ConfigChannel+0x9aa>
 80059c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d11a      	bne.n	8005a0a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a30      	ldr	r2, [pc, #192]	; (8005a9c <HAL_ADC_ConfigChannel+0xa3c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d14e      	bne.n	8005a7c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a2c      	ldr	r2, [pc, #176]	; (8005a94 <HAL_ADC_ConfigChannel+0xa34>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_ADC_ConfigChannel+0x992>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a2a      	ldr	r2, [pc, #168]	; (8005a98 <HAL_ADC_ConfigChannel+0xa38>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d101      	bne.n	80059f6 <HAL_ADC_ConfigChannel+0x996>
 80059f2:	4a2c      	ldr	r2, [pc, #176]	; (8005aa4 <HAL_ADC_ConfigChannel+0xa44>)
 80059f4:	e000      	b.n	80059f8 <HAL_ADC_ConfigChannel+0x998>
 80059f6:	4a26      	ldr	r2, [pc, #152]	; (8005a90 <HAL_ADC_ConfigChannel+0xa30>)
 80059f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a00:	4619      	mov	r1, r3
 8005a02:	4610      	mov	r0, r2
 8005a04:	f7fe fc4b 	bl	800429e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a08:	e038      	b.n	8005a7c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a29      	ldr	r2, [pc, #164]	; (8005ab4 <HAL_ADC_ConfigChannel+0xa54>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d133      	bne.n	8005a7c <HAL_ADC_ConfigChannel+0xa1c>
 8005a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d12d      	bne.n	8005a7c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1d      	ldr	r2, [pc, #116]	; (8005a9c <HAL_ADC_ConfigChannel+0xa3c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d128      	bne.n	8005a7c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a19      	ldr	r2, [pc, #100]	; (8005a94 <HAL_ADC_ConfigChannel+0xa34>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d004      	beq.n	8005a3e <HAL_ADC_ConfigChannel+0x9de>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <HAL_ADC_ConfigChannel+0xa38>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d101      	bne.n	8005a42 <HAL_ADC_ConfigChannel+0x9e2>
 8005a3e:	4a19      	ldr	r2, [pc, #100]	; (8005aa4 <HAL_ADC_ConfigChannel+0xa44>)
 8005a40:	e000      	b.n	8005a44 <HAL_ADC_ConfigChannel+0x9e4>
 8005a42:	4a13      	ldr	r2, [pc, #76]	; (8005a90 <HAL_ADC_ConfigChannel+0xa30>)
 8005a44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4610      	mov	r0, r2
 8005a50:	f7fe fc25 	bl	800429e <LL_ADC_SetCommonPathInternalCh>
 8005a54:	e012      	b.n	8005a7c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5a:	f043 0220 	orr.w	r2, r3, #32
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005a68:	e008      	b.n	8005a7c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6e:	f043 0220 	orr.w	r2, r3, #32
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005a84:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	37e4      	adds	r7, #228	; 0xe4
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd90      	pop	{r4, r7, pc}
 8005a90:	58026300 	.word	0x58026300
 8005a94:	40022000 	.word	0x40022000
 8005a98:	40022100 	.word	0x40022100
 8005a9c:	58026000 	.word	0x58026000
 8005aa0:	c7520000 	.word	0xc7520000
 8005aa4:	40022300 	.word	0x40022300
 8005aa8:	24000100 	.word	0x24000100
 8005aac:	053e2d63 	.word	0x053e2d63
 8005ab0:	c3210000 	.word	0xc3210000
 8005ab4:	cb840000 	.word	0xcb840000

08005ab8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fe fe82 	bl	80047d8 <LL_ADC_REG_IsConversionOngoing>
 8005ad4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fe fea4 	bl	8004828 <LL_ADC_INJ_IsConversionOngoing>
 8005ae0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d103      	bne.n	8005af0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 8098 	beq.w	8005c20 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d02a      	beq.n	8005b54 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	7e5b      	ldrb	r3, [r3, #25]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d126      	bne.n	8005b54 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	7e1b      	ldrb	r3, [r3, #24]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d122      	bne.n	8005b54 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005b12:	e014      	b.n	8005b3e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	4a45      	ldr	r2, [pc, #276]	; (8005c2c <ADC_ConversionStop+0x174>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d90d      	bls.n	8005b38 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b20:	f043 0210 	orr.w	r2, r3, #16
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b2c:	f043 0201 	orr.w	r2, r3, #1
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e074      	b.n	8005c22 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b48:	2b40      	cmp	r3, #64	; 0x40
 8005b4a:	d1e3      	bne.n	8005b14 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2240      	movs	r2, #64	; 0x40
 8005b52:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d014      	beq.n	8005b84 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe fe3a 	bl	80047d8 <LL_ADC_REG_IsConversionOngoing>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00c      	beq.n	8005b84 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe fdf7 	bl	8004762 <LL_ADC_IsDisableOngoing>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d104      	bne.n	8005b84 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fe fe16 	bl	80047b0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d014      	beq.n	8005bb4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe fe4a 	bl	8004828 <LL_ADC_INJ_IsConversionOngoing>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00c      	beq.n	8005bb4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe fddf 	bl	8004762 <LL_ADC_IsDisableOngoing>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d104      	bne.n	8005bb4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe fe26 	bl	8004800 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d005      	beq.n	8005bc6 <ADC_ConversionStop+0x10e>
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d105      	bne.n	8005bcc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005bc0:	230c      	movs	r3, #12
 8005bc2:	617b      	str	r3, [r7, #20]
        break;
 8005bc4:	e005      	b.n	8005bd2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005bc6:	2308      	movs	r3, #8
 8005bc8:	617b      	str	r3, [r7, #20]
        break;
 8005bca:	e002      	b.n	8005bd2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005bcc:	2304      	movs	r3, #4
 8005bce:	617b      	str	r3, [r7, #20]
        break;
 8005bd0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005bd2:	f7fe fb0b 	bl	80041ec <HAL_GetTick>
 8005bd6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005bd8:	e01b      	b.n	8005c12 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005bda:	f7fe fb07 	bl	80041ec <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b05      	cmp	r3, #5
 8005be6:	d914      	bls.n	8005c12 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00d      	beq.n	8005c12 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bfa:	f043 0210 	orr.w	r2, r3, #16
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c06:	f043 0201 	orr.w	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e007      	b.n	8005c22 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1dc      	bne.n	8005bda <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	000cdbff 	.word	0x000cdbff

08005c30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fe fd7d 	bl	800473c <LL_ADC_IsEnabled>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d16e      	bne.n	8005d26 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	4b38      	ldr	r3, [pc, #224]	; (8005d30 <ADC_Enable+0x100>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00d      	beq.n	8005c72 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5a:	f043 0210 	orr.w	r2, r3, #16
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c66:	f043 0201 	orr.w	r2, r3, #1
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e05a      	b.n	8005d28 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fe fd38 	bl	80046ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005c7c:	f7fe fab6 	bl	80041ec <HAL_GetTick>
 8005c80:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a2b      	ldr	r2, [pc, #172]	; (8005d34 <ADC_Enable+0x104>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <ADC_Enable+0x66>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a29      	ldr	r2, [pc, #164]	; (8005d38 <ADC_Enable+0x108>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <ADC_Enable+0x6a>
 8005c96:	4b29      	ldr	r3, [pc, #164]	; (8005d3c <ADC_Enable+0x10c>)
 8005c98:	e000      	b.n	8005c9c <ADC_Enable+0x6c>
 8005c9a:	4b29      	ldr	r3, [pc, #164]	; (8005d40 <ADC_Enable+0x110>)
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fe fcbb 	bl	8004618 <LL_ADC_GetMultimode>
 8005ca2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a23      	ldr	r2, [pc, #140]	; (8005d38 <ADC_Enable+0x108>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d002      	beq.n	8005cb4 <ADC_Enable+0x84>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	e000      	b.n	8005cb6 <ADC_Enable+0x86>
 8005cb4:	4b1f      	ldr	r3, [pc, #124]	; (8005d34 <ADC_Enable+0x104>)
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6812      	ldr	r2, [r2, #0]
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d02c      	beq.n	8005d18 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d130      	bne.n	8005d26 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005cc4:	e028      	b.n	8005d18 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fe fd36 	bl	800473c <LL_ADC_IsEnabled>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d104      	bne.n	8005ce0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe fd06 	bl	80046ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ce0:	f7fe fa84 	bl	80041ec <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d914      	bls.n	8005d18 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d00d      	beq.n	8005d18 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d00:	f043 0210 	orr.w	r2, r3, #16
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d0c:	f043 0201 	orr.w	r2, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e007      	b.n	8005d28 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d1cf      	bne.n	8005cc6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	8000003f 	.word	0x8000003f
 8005d34:	40022000 	.word	0x40022000
 8005d38:	40022100 	.word	0x40022100
 8005d3c:	40022300 	.word	0x40022300
 8005d40:	58026300 	.word	0x58026300

08005d44 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fe fd06 	bl	8004762 <LL_ADC_IsDisableOngoing>
 8005d56:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fe fced 	bl	800473c <LL_ADC_IsEnabled>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d047      	beq.n	8005df8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d144      	bne.n	8005df8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f003 030d 	and.w	r3, r3, #13
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d10c      	bne.n	8005d96 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fe fcc7 	bl	8004714 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2203      	movs	r2, #3
 8005d8c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005d8e:	f7fe fa2d 	bl	80041ec <HAL_GetTick>
 8005d92:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005d94:	e029      	b.n	8005dea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d9a:	f043 0210 	orr.w	r2, r3, #16
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005da6:	f043 0201 	orr.w	r2, r3, #1
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e023      	b.n	8005dfa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005db2:	f7fe fa1b 	bl	80041ec <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d914      	bls.n	8005dea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00d      	beq.n	8005dea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dd2:	f043 0210 	orr.w	r2, r3, #16
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dde:	f043 0201 	orr.w	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e007      	b.n	8005dfa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1dc      	bne.n	8005db2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a6c      	ldr	r2, [pc, #432]	; (8005fc4 <ADC_ConfigureBoostMode+0x1c0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d004      	beq.n	8005e20 <ADC_ConfigureBoostMode+0x1c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a6b      	ldr	r2, [pc, #428]	; (8005fc8 <ADC_ConfigureBoostMode+0x1c4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d109      	bne.n	8005e34 <ADC_ConfigureBoostMode+0x30>
 8005e20:	4b6a      	ldr	r3, [pc, #424]	; (8005fcc <ADC_ConfigureBoostMode+0x1c8>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	bf14      	ite	ne
 8005e2c:	2301      	movne	r3, #1
 8005e2e:	2300      	moveq	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	e008      	b.n	8005e46 <ADC_ConfigureBoostMode+0x42>
 8005e34:	4b66      	ldr	r3, [pc, #408]	; (8005fd0 <ADC_ConfigureBoostMode+0x1cc>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	bf14      	ite	ne
 8005e40:	2301      	movne	r3, #1
 8005e42:	2300      	moveq	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01c      	beq.n	8005e84 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005e4a:	f005 fcab 	bl	800b7a4 <HAL_RCC_GetHCLKFreq>
 8005e4e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e58:	d010      	beq.n	8005e7c <ADC_ConfigureBoostMode+0x78>
 8005e5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e5e:	d873      	bhi.n	8005f48 <ADC_ConfigureBoostMode+0x144>
 8005e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e64:	d002      	beq.n	8005e6c <ADC_ConfigureBoostMode+0x68>
 8005e66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e6a:	d16d      	bne.n	8005f48 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	0c1b      	lsrs	r3, r3, #16
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e78:	60fb      	str	r3, [r7, #12]
        break;
 8005e7a:	e068      	b.n	8005f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	089b      	lsrs	r3, r3, #2
 8005e80:	60fb      	str	r3, [r7, #12]
        break;
 8005e82:	e064      	b.n	8005f4e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005e84:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005e88:	f04f 0100 	mov.w	r1, #0
 8005e8c:	f006 fe86 	bl	800cb9c <HAL_RCCEx_GetPeriphCLKFreq>
 8005e90:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005e9a:	d051      	beq.n	8005f40 <ADC_ConfigureBoostMode+0x13c>
 8005e9c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005ea0:	d854      	bhi.n	8005f4c <ADC_ConfigureBoostMode+0x148>
 8005ea2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005ea6:	d047      	beq.n	8005f38 <ADC_ConfigureBoostMode+0x134>
 8005ea8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005eac:	d84e      	bhi.n	8005f4c <ADC_ConfigureBoostMode+0x148>
 8005eae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005eb2:	d03d      	beq.n	8005f30 <ADC_ConfigureBoostMode+0x12c>
 8005eb4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005eb8:	d848      	bhi.n	8005f4c <ADC_ConfigureBoostMode+0x148>
 8005eba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ebe:	d033      	beq.n	8005f28 <ADC_ConfigureBoostMode+0x124>
 8005ec0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ec4:	d842      	bhi.n	8005f4c <ADC_ConfigureBoostMode+0x148>
 8005ec6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005eca:	d029      	beq.n	8005f20 <ADC_ConfigureBoostMode+0x11c>
 8005ecc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005ed0:	d83c      	bhi.n	8005f4c <ADC_ConfigureBoostMode+0x148>
 8005ed2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005ed6:	d01a      	beq.n	8005f0e <ADC_ConfigureBoostMode+0x10a>
 8005ed8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005edc:	d836      	bhi.n	8005f4c <ADC_ConfigureBoostMode+0x148>
 8005ede:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005ee2:	d014      	beq.n	8005f0e <ADC_ConfigureBoostMode+0x10a>
 8005ee4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005ee8:	d830      	bhi.n	8005f4c <ADC_ConfigureBoostMode+0x148>
 8005eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eee:	d00e      	beq.n	8005f0e <ADC_ConfigureBoostMode+0x10a>
 8005ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef4:	d82a      	bhi.n	8005f4c <ADC_ConfigureBoostMode+0x148>
 8005ef6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005efa:	d008      	beq.n	8005f0e <ADC_ConfigureBoostMode+0x10a>
 8005efc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005f00:	d824      	bhi.n	8005f4c <ADC_ConfigureBoostMode+0x148>
 8005f02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f06:	d002      	beq.n	8005f0e <ADC_ConfigureBoostMode+0x10a>
 8005f08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f0c:	d11e      	bne.n	8005f4c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	0c9b      	lsrs	r3, r3, #18
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1c:	60fb      	str	r3, [r7, #12]
        break;
 8005f1e:	e016      	b.n	8005f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	091b      	lsrs	r3, r3, #4
 8005f24:	60fb      	str	r3, [r7, #12]
        break;
 8005f26:	e012      	b.n	8005f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	095b      	lsrs	r3, r3, #5
 8005f2c:	60fb      	str	r3, [r7, #12]
        break;
 8005f2e:	e00e      	b.n	8005f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	099b      	lsrs	r3, r3, #6
 8005f34:	60fb      	str	r3, [r7, #12]
        break;
 8005f36:	e00a      	b.n	8005f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	09db      	lsrs	r3, r3, #7
 8005f3c:	60fb      	str	r3, [r7, #12]
        break;
 8005f3e:	e006      	b.n	8005f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	0a1b      	lsrs	r3, r3, #8
 8005f44:	60fb      	str	r3, [r7, #12]
        break;
 8005f46:	e002      	b.n	8005f4e <ADC_ConfigureBoostMode+0x14a>
        break;
 8005f48:	bf00      	nop
 8005f4a:	e000      	b.n	8005f4e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005f4c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4a1f      	ldr	r2, [pc, #124]	; (8005fd4 <ADC_ConfigureBoostMode+0x1d0>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d808      	bhi.n	8005f6e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f6a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005f6c:	e025      	b.n	8005fba <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4a19      	ldr	r2, [pc, #100]	; (8005fd8 <ADC_ConfigureBoostMode+0x1d4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d80a      	bhi.n	8005f8c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f88:	609a      	str	r2, [r3, #8]
}
 8005f8a:	e016      	b.n	8005fba <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4a13      	ldr	r2, [pc, #76]	; (8005fdc <ADC_ConfigureBoostMode+0x1d8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d80a      	bhi.n	8005faa <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fa6:	609a      	str	r2, [r3, #8]
}
 8005fa8:	e007      	b.n	8005fba <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005fb8:	609a      	str	r2, [r3, #8]
}
 8005fba:	bf00      	nop
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40022000 	.word	0x40022000
 8005fc8:	40022100 	.word	0x40022100
 8005fcc:	40022300 	.word	0x40022300
 8005fd0:	58026300 	.word	0x58026300
 8005fd4:	005f5e10 	.word	0x005f5e10
 8005fd8:	00bebc20 	.word	0x00bebc20
 8005fdc:	017d7840 	.word	0x017d7840

08005fe0 <LL_ADC_IsEnabled>:
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <LL_ADC_IsEnabled+0x18>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e000      	b.n	8005ffa <LL_ADC_IsEnabled+0x1a>
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <LL_ADC_REG_IsConversionOngoing>:
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 0304 	and.w	r3, r3, #4
 8006016:	2b04      	cmp	r3, #4
 8006018:	d101      	bne.n	800601e <LL_ADC_REG_IsConversionOngoing+0x18>
 800601a:	2301      	movs	r3, #1
 800601c:	e000      	b.n	8006020 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800602c:	b590      	push	{r4, r7, lr}
 800602e:	b0a3      	sub	sp, #140	; 0x8c
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006046:	2302      	movs	r3, #2
 8006048:	e0c1      	b.n	80061ce <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006052:	2300      	movs	r3, #0
 8006054:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006056:	2300      	movs	r3, #0
 8006058:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a5e      	ldr	r2, [pc, #376]	; (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d102      	bne.n	800606a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006064:	4b5d      	ldr	r3, [pc, #372]	; (80061dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	e001      	b.n	800606e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10b      	bne.n	800608c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006078:	f043 0220 	orr.w	r2, r3, #32
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e0a0      	b.n	80061ce <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff ffb9 	bl	8006006 <LL_ADC_REG_IsConversionOngoing>
 8006094:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff ffb2 	bl	8006006 <LL_ADC_REG_IsConversionOngoing>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f040 8081 	bne.w	80061ac <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80060aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d17c      	bne.n	80061ac <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a48      	ldr	r2, [pc, #288]	; (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d004      	beq.n	80060c6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a46      	ldr	r2, [pc, #280]	; (80061dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d101      	bne.n	80060ca <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80060c6:	4b46      	ldr	r3, [pc, #280]	; (80061e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80060c8:	e000      	b.n	80060cc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80060ca:	4b46      	ldr	r3, [pc, #280]	; (80061e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80060cc:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d039      	beq.n	800614a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80060d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	431a      	orrs	r2, r3
 80060e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a3a      	ldr	r2, [pc, #232]	; (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d004      	beq.n	80060fc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a39      	ldr	r2, [pc, #228]	; (80061dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d10e      	bne.n	800611a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80060fc:	4836      	ldr	r0, [pc, #216]	; (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80060fe:	f7ff ff6f 	bl	8005fe0 <LL_ADC_IsEnabled>
 8006102:	4604      	mov	r4, r0
 8006104:	4835      	ldr	r0, [pc, #212]	; (80061dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006106:	f7ff ff6b 	bl	8005fe0 <LL_ADC_IsEnabled>
 800610a:	4603      	mov	r3, r0
 800610c:	4323      	orrs	r3, r4
 800610e:	2b00      	cmp	r3, #0
 8006110:	bf0c      	ite	eq
 8006112:	2301      	moveq	r3, #1
 8006114:	2300      	movne	r3, #0
 8006116:	b2db      	uxtb	r3, r3
 8006118:	e008      	b.n	800612c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800611a:	4833      	ldr	r0, [pc, #204]	; (80061e8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800611c:	f7ff ff60 	bl	8005fe0 <LL_ADC_IsEnabled>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	bf0c      	ite	eq
 8006126:	2301      	moveq	r3, #1
 8006128:	2300      	movne	r3, #0
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d047      	beq.n	80061c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006130:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	4b2d      	ldr	r3, [pc, #180]	; (80061ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006136:	4013      	ands	r3, r2
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	6811      	ldr	r1, [r2, #0]
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	6892      	ldr	r2, [r2, #8]
 8006140:	430a      	orrs	r2, r1
 8006142:	431a      	orrs	r2, r3
 8006144:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006146:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006148:	e03a      	b.n	80061c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800614a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006154:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a1f      	ldr	r2, [pc, #124]	; (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d004      	beq.n	800616a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a1d      	ldr	r2, [pc, #116]	; (80061dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d10e      	bne.n	8006188 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800616a:	481b      	ldr	r0, [pc, #108]	; (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800616c:	f7ff ff38 	bl	8005fe0 <LL_ADC_IsEnabled>
 8006170:	4604      	mov	r4, r0
 8006172:	481a      	ldr	r0, [pc, #104]	; (80061dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006174:	f7ff ff34 	bl	8005fe0 <LL_ADC_IsEnabled>
 8006178:	4603      	mov	r3, r0
 800617a:	4323      	orrs	r3, r4
 800617c:	2b00      	cmp	r3, #0
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	e008      	b.n	800619a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8006188:	4817      	ldr	r0, [pc, #92]	; (80061e8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800618a:	f7ff ff29 	bl	8005fe0 <LL_ADC_IsEnabled>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	bf0c      	ite	eq
 8006194:	2301      	moveq	r3, #1
 8006196:	2300      	movne	r3, #0
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d010      	beq.n	80061c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800619e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	4b12      	ldr	r3, [pc, #72]	; (80061ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80061a8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80061aa:	e009      	b.n	80061c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b0:	f043 0220 	orr.w	r2, r3, #32
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80061be:	e000      	b.n	80061c2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80061c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80061ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	378c      	adds	r7, #140	; 0x8c
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd90      	pop	{r4, r7, pc}
 80061d6:	bf00      	nop
 80061d8:	40022000 	.word	0x40022000
 80061dc:	40022100 	.word	0x40022100
 80061e0:	40022300 	.word	0x40022300
 80061e4:	58026300 	.word	0x58026300
 80061e8:	58026000 	.word	0x58026000
 80061ec:	fffff0e0 	.word	0xfffff0e0

080061f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006200:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <__NVIC_SetPriorityGrouping+0x40>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800620c:	4013      	ands	r3, r2
 800620e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006218:	4b06      	ldr	r3, [pc, #24]	; (8006234 <__NVIC_SetPriorityGrouping+0x44>)
 800621a:	4313      	orrs	r3, r2
 800621c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800621e:	4a04      	ldr	r2, [pc, #16]	; (8006230 <__NVIC_SetPriorityGrouping+0x40>)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	60d3      	str	r3, [r2, #12]
}
 8006224:	bf00      	nop
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	e000ed00 	.word	0xe000ed00
 8006234:	05fa0000 	.word	0x05fa0000

08006238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006238:	b480      	push	{r7}
 800623a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800623c:	4b04      	ldr	r3, [pc, #16]	; (8006250 <__NVIC_GetPriorityGrouping+0x18>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	0a1b      	lsrs	r3, r3, #8
 8006242:	f003 0307 	and.w	r3, r3, #7
}
 8006246:	4618      	mov	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	e000ed00 	.word	0xe000ed00

08006254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	4603      	mov	r3, r0
 800625c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800625e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006262:	2b00      	cmp	r3, #0
 8006264:	db0b      	blt.n	800627e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	f003 021f 	and.w	r2, r3, #31
 800626c:	4907      	ldr	r1, [pc, #28]	; (800628c <__NVIC_EnableIRQ+0x38>)
 800626e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006272:	095b      	lsrs	r3, r3, #5
 8006274:	2001      	movs	r0, #1
 8006276:	fa00 f202 	lsl.w	r2, r0, r2
 800627a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	e000e100 	.word	0xe000e100

08006290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	6039      	str	r1, [r7, #0]
 800629a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800629c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	db0a      	blt.n	80062ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	490c      	ldr	r1, [pc, #48]	; (80062dc <__NVIC_SetPriority+0x4c>)
 80062aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062ae:	0112      	lsls	r2, r2, #4
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	440b      	add	r3, r1
 80062b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062b8:	e00a      	b.n	80062d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	4908      	ldr	r1, [pc, #32]	; (80062e0 <__NVIC_SetPriority+0x50>)
 80062c0:	88fb      	ldrh	r3, [r7, #6]
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	3b04      	subs	r3, #4
 80062c8:	0112      	lsls	r2, r2, #4
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	440b      	add	r3, r1
 80062ce:	761a      	strb	r2, [r3, #24]
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	e000e100 	.word	0xe000e100
 80062e0:	e000ed00 	.word	0xe000ed00

080062e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b089      	sub	sp, #36	; 0x24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f1c3 0307 	rsb	r3, r3, #7
 80062fe:	2b04      	cmp	r3, #4
 8006300:	bf28      	it	cs
 8006302:	2304      	movcs	r3, #4
 8006304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	3304      	adds	r3, #4
 800630a:	2b06      	cmp	r3, #6
 800630c:	d902      	bls.n	8006314 <NVIC_EncodePriority+0x30>
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	3b03      	subs	r3, #3
 8006312:	e000      	b.n	8006316 <NVIC_EncodePriority+0x32>
 8006314:	2300      	movs	r3, #0
 8006316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006318:	f04f 32ff 	mov.w	r2, #4294967295
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	fa02 f303 	lsl.w	r3, r2, r3
 8006322:	43da      	mvns	r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	401a      	ands	r2, r3
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800632c:	f04f 31ff 	mov.w	r1, #4294967295
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	fa01 f303 	lsl.w	r3, r1, r3
 8006336:	43d9      	mvns	r1, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800633c:	4313      	orrs	r3, r2
         );
}
 800633e:	4618      	mov	r0, r3
 8006340:	3724      	adds	r7, #36	; 0x24
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
	...

0800634c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3b01      	subs	r3, #1
 8006358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800635c:	d301      	bcc.n	8006362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800635e:	2301      	movs	r3, #1
 8006360:	e00f      	b.n	8006382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006362:	4a0a      	ldr	r2, [pc, #40]	; (800638c <SysTick_Config+0x40>)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	3b01      	subs	r3, #1
 8006368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800636a:	210f      	movs	r1, #15
 800636c:	f04f 30ff 	mov.w	r0, #4294967295
 8006370:	f7ff ff8e 	bl	8006290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006374:	4b05      	ldr	r3, [pc, #20]	; (800638c <SysTick_Config+0x40>)
 8006376:	2200      	movs	r2, #0
 8006378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800637a:	4b04      	ldr	r3, [pc, #16]	; (800638c <SysTick_Config+0x40>)
 800637c:	2207      	movs	r2, #7
 800637e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	e000e010 	.word	0xe000e010

08006390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7ff ff29 	bl	80061f0 <__NVIC_SetPriorityGrouping>
}
 800639e:	bf00      	nop
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b086      	sub	sp, #24
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	4603      	mov	r3, r0
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	607a      	str	r2, [r7, #4]
 80063b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80063b4:	f7ff ff40 	bl	8006238 <__NVIC_GetPriorityGrouping>
 80063b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	6978      	ldr	r0, [r7, #20]
 80063c0:	f7ff ff90 	bl	80062e4 <NVIC_EncodePriority>
 80063c4:	4602      	mov	r2, r0
 80063c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80063ca:	4611      	mov	r1, r2
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff ff5f 	bl	8006290 <__NVIC_SetPriority>
}
 80063d2:	bf00      	nop
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	4603      	mov	r3, r0
 80063e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff ff33 	bl	8006254 <__NVIC_EnableIRQ>
}
 80063ee:	bf00      	nop
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7ff ffa4 	bl	800634c <SysTick_Config>
 8006404:	4603      	mov	r3, r0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006418:	f7fd fee8 	bl	80041ec <HAL_GetTick>
 800641c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e312      	b.n	8006a4e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a66      	ldr	r2, [pc, #408]	; (80065c8 <HAL_DMA_Init+0x1b8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d04a      	beq.n	80064c8 <HAL_DMA_Init+0xb8>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a65      	ldr	r2, [pc, #404]	; (80065cc <HAL_DMA_Init+0x1bc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d045      	beq.n	80064c8 <HAL_DMA_Init+0xb8>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a63      	ldr	r2, [pc, #396]	; (80065d0 <HAL_DMA_Init+0x1c0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d040      	beq.n	80064c8 <HAL_DMA_Init+0xb8>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a62      	ldr	r2, [pc, #392]	; (80065d4 <HAL_DMA_Init+0x1c4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d03b      	beq.n	80064c8 <HAL_DMA_Init+0xb8>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a60      	ldr	r2, [pc, #384]	; (80065d8 <HAL_DMA_Init+0x1c8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d036      	beq.n	80064c8 <HAL_DMA_Init+0xb8>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a5f      	ldr	r2, [pc, #380]	; (80065dc <HAL_DMA_Init+0x1cc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d031      	beq.n	80064c8 <HAL_DMA_Init+0xb8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a5d      	ldr	r2, [pc, #372]	; (80065e0 <HAL_DMA_Init+0x1d0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d02c      	beq.n	80064c8 <HAL_DMA_Init+0xb8>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a5c      	ldr	r2, [pc, #368]	; (80065e4 <HAL_DMA_Init+0x1d4>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d027      	beq.n	80064c8 <HAL_DMA_Init+0xb8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a5a      	ldr	r2, [pc, #360]	; (80065e8 <HAL_DMA_Init+0x1d8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d022      	beq.n	80064c8 <HAL_DMA_Init+0xb8>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a59      	ldr	r2, [pc, #356]	; (80065ec <HAL_DMA_Init+0x1dc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d01d      	beq.n	80064c8 <HAL_DMA_Init+0xb8>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a57      	ldr	r2, [pc, #348]	; (80065f0 <HAL_DMA_Init+0x1e0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d018      	beq.n	80064c8 <HAL_DMA_Init+0xb8>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a56      	ldr	r2, [pc, #344]	; (80065f4 <HAL_DMA_Init+0x1e4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d013      	beq.n	80064c8 <HAL_DMA_Init+0xb8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a54      	ldr	r2, [pc, #336]	; (80065f8 <HAL_DMA_Init+0x1e8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00e      	beq.n	80064c8 <HAL_DMA_Init+0xb8>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a53      	ldr	r2, [pc, #332]	; (80065fc <HAL_DMA_Init+0x1ec>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d009      	beq.n	80064c8 <HAL_DMA_Init+0xb8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a51      	ldr	r2, [pc, #324]	; (8006600 <HAL_DMA_Init+0x1f0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d004      	beq.n	80064c8 <HAL_DMA_Init+0xb8>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a50      	ldr	r2, [pc, #320]	; (8006604 <HAL_DMA_Init+0x1f4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d101      	bne.n	80064cc <HAL_DMA_Init+0xbc>
 80064c8:	2301      	movs	r3, #1
 80064ca:	e000      	b.n	80064ce <HAL_DMA_Init+0xbe>
 80064cc:	2300      	movs	r3, #0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 813c 	beq.w	800674c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a37      	ldr	r2, [pc, #220]	; (80065c8 <HAL_DMA_Init+0x1b8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d04a      	beq.n	8006584 <HAL_DMA_Init+0x174>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a36      	ldr	r2, [pc, #216]	; (80065cc <HAL_DMA_Init+0x1bc>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d045      	beq.n	8006584 <HAL_DMA_Init+0x174>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a34      	ldr	r2, [pc, #208]	; (80065d0 <HAL_DMA_Init+0x1c0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d040      	beq.n	8006584 <HAL_DMA_Init+0x174>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a33      	ldr	r2, [pc, #204]	; (80065d4 <HAL_DMA_Init+0x1c4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d03b      	beq.n	8006584 <HAL_DMA_Init+0x174>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a31      	ldr	r2, [pc, #196]	; (80065d8 <HAL_DMA_Init+0x1c8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d036      	beq.n	8006584 <HAL_DMA_Init+0x174>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a30      	ldr	r2, [pc, #192]	; (80065dc <HAL_DMA_Init+0x1cc>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d031      	beq.n	8006584 <HAL_DMA_Init+0x174>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a2e      	ldr	r2, [pc, #184]	; (80065e0 <HAL_DMA_Init+0x1d0>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d02c      	beq.n	8006584 <HAL_DMA_Init+0x174>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a2d      	ldr	r2, [pc, #180]	; (80065e4 <HAL_DMA_Init+0x1d4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d027      	beq.n	8006584 <HAL_DMA_Init+0x174>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a2b      	ldr	r2, [pc, #172]	; (80065e8 <HAL_DMA_Init+0x1d8>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d022      	beq.n	8006584 <HAL_DMA_Init+0x174>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a2a      	ldr	r2, [pc, #168]	; (80065ec <HAL_DMA_Init+0x1dc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d01d      	beq.n	8006584 <HAL_DMA_Init+0x174>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a28      	ldr	r2, [pc, #160]	; (80065f0 <HAL_DMA_Init+0x1e0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d018      	beq.n	8006584 <HAL_DMA_Init+0x174>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a27      	ldr	r2, [pc, #156]	; (80065f4 <HAL_DMA_Init+0x1e4>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d013      	beq.n	8006584 <HAL_DMA_Init+0x174>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a25      	ldr	r2, [pc, #148]	; (80065f8 <HAL_DMA_Init+0x1e8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00e      	beq.n	8006584 <HAL_DMA_Init+0x174>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a24      	ldr	r2, [pc, #144]	; (80065fc <HAL_DMA_Init+0x1ec>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d009      	beq.n	8006584 <HAL_DMA_Init+0x174>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a22      	ldr	r2, [pc, #136]	; (8006600 <HAL_DMA_Init+0x1f0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d004      	beq.n	8006584 <HAL_DMA_Init+0x174>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a21      	ldr	r2, [pc, #132]	; (8006604 <HAL_DMA_Init+0x1f4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d108      	bne.n	8006596 <HAL_DMA_Init+0x186>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0201 	bic.w	r2, r2, #1
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	e007      	b.n	80065a6 <HAL_DMA_Init+0x196>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0201 	bic.w	r2, r2, #1
 80065a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80065a6:	e02f      	b.n	8006608 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065a8:	f7fd fe20 	bl	80041ec <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b05      	cmp	r3, #5
 80065b4:	d928      	bls.n	8006608 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2220      	movs	r2, #32
 80065ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2203      	movs	r2, #3
 80065c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e242      	b.n	8006a4e <HAL_DMA_Init+0x63e>
 80065c8:	40020010 	.word	0x40020010
 80065cc:	40020028 	.word	0x40020028
 80065d0:	40020040 	.word	0x40020040
 80065d4:	40020058 	.word	0x40020058
 80065d8:	40020070 	.word	0x40020070
 80065dc:	40020088 	.word	0x40020088
 80065e0:	400200a0 	.word	0x400200a0
 80065e4:	400200b8 	.word	0x400200b8
 80065e8:	40020410 	.word	0x40020410
 80065ec:	40020428 	.word	0x40020428
 80065f0:	40020440 	.word	0x40020440
 80065f4:	40020458 	.word	0x40020458
 80065f8:	40020470 	.word	0x40020470
 80065fc:	40020488 	.word	0x40020488
 8006600:	400204a0 	.word	0x400204a0
 8006604:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1c8      	bne.n	80065a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4b83      	ldr	r3, [pc, #524]	; (8006830 <HAL_DMA_Init+0x420>)
 8006622:	4013      	ands	r3, r2
 8006624:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800662e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800663a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006646:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	2b04      	cmp	r3, #4
 800665a:	d107      	bne.n	800666c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006664:	4313      	orrs	r3, r2
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4313      	orrs	r3, r2
 800666a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	2b28      	cmp	r3, #40	; 0x28
 8006672:	d903      	bls.n	800667c <HAL_DMA_Init+0x26c>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b2e      	cmp	r3, #46	; 0x2e
 800667a:	d91f      	bls.n	80066bc <HAL_DMA_Init+0x2ac>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2b3e      	cmp	r3, #62	; 0x3e
 8006682:	d903      	bls.n	800668c <HAL_DMA_Init+0x27c>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2b42      	cmp	r3, #66	; 0x42
 800668a:	d917      	bls.n	80066bc <HAL_DMA_Init+0x2ac>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b46      	cmp	r3, #70	; 0x46
 8006692:	d903      	bls.n	800669c <HAL_DMA_Init+0x28c>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2b48      	cmp	r3, #72	; 0x48
 800669a:	d90f      	bls.n	80066bc <HAL_DMA_Init+0x2ac>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2b4e      	cmp	r3, #78	; 0x4e
 80066a2:	d903      	bls.n	80066ac <HAL_DMA_Init+0x29c>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2b52      	cmp	r3, #82	; 0x52
 80066aa:	d907      	bls.n	80066bc <HAL_DMA_Init+0x2ac>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b73      	cmp	r3, #115	; 0x73
 80066b2:	d905      	bls.n	80066c0 <HAL_DMA_Init+0x2b0>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2b77      	cmp	r3, #119	; 0x77
 80066ba:	d801      	bhi.n	80066c0 <HAL_DMA_Init+0x2b0>
 80066bc:	2301      	movs	r3, #1
 80066be:	e000      	b.n	80066c2 <HAL_DMA_Init+0x2b2>
 80066c0:	2300      	movs	r3, #0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066cc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f023 0307 	bic.w	r3, r3, #7
 80066e4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d117      	bne.n	8006728 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00e      	beq.n	8006728 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f001 fdca 	bl	80082a4 <DMA_CheckFifoParam>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d008      	beq.n	8006728 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2240      	movs	r2, #64	; 0x40
 800671a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e192      	b.n	8006a4e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 fd05 	bl	8008140 <DMA_CalcBaseAndBitshift>
 8006736:	4603      	mov	r3, r0
 8006738:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	223f      	movs	r2, #63	; 0x3f
 8006744:	409a      	lsls	r2, r3
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	609a      	str	r2, [r3, #8]
 800674a:	e0c8      	b.n	80068de <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a38      	ldr	r2, [pc, #224]	; (8006834 <HAL_DMA_Init+0x424>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d022      	beq.n	800679c <HAL_DMA_Init+0x38c>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a37      	ldr	r2, [pc, #220]	; (8006838 <HAL_DMA_Init+0x428>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d01d      	beq.n	800679c <HAL_DMA_Init+0x38c>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a35      	ldr	r2, [pc, #212]	; (800683c <HAL_DMA_Init+0x42c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d018      	beq.n	800679c <HAL_DMA_Init+0x38c>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a34      	ldr	r2, [pc, #208]	; (8006840 <HAL_DMA_Init+0x430>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d013      	beq.n	800679c <HAL_DMA_Init+0x38c>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a32      	ldr	r2, [pc, #200]	; (8006844 <HAL_DMA_Init+0x434>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d00e      	beq.n	800679c <HAL_DMA_Init+0x38c>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a31      	ldr	r2, [pc, #196]	; (8006848 <HAL_DMA_Init+0x438>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d009      	beq.n	800679c <HAL_DMA_Init+0x38c>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a2f      	ldr	r2, [pc, #188]	; (800684c <HAL_DMA_Init+0x43c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d004      	beq.n	800679c <HAL_DMA_Init+0x38c>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a2e      	ldr	r2, [pc, #184]	; (8006850 <HAL_DMA_Init+0x440>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d101      	bne.n	80067a0 <HAL_DMA_Init+0x390>
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <HAL_DMA_Init+0x392>
 80067a0:	2300      	movs	r3, #0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 8092 	beq.w	80068cc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a21      	ldr	r2, [pc, #132]	; (8006834 <HAL_DMA_Init+0x424>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d021      	beq.n	80067f6 <HAL_DMA_Init+0x3e6>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a20      	ldr	r2, [pc, #128]	; (8006838 <HAL_DMA_Init+0x428>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d01c      	beq.n	80067f6 <HAL_DMA_Init+0x3e6>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a1e      	ldr	r2, [pc, #120]	; (800683c <HAL_DMA_Init+0x42c>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d017      	beq.n	80067f6 <HAL_DMA_Init+0x3e6>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a1d      	ldr	r2, [pc, #116]	; (8006840 <HAL_DMA_Init+0x430>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d012      	beq.n	80067f6 <HAL_DMA_Init+0x3e6>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a1b      	ldr	r2, [pc, #108]	; (8006844 <HAL_DMA_Init+0x434>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00d      	beq.n	80067f6 <HAL_DMA_Init+0x3e6>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a1a      	ldr	r2, [pc, #104]	; (8006848 <HAL_DMA_Init+0x438>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d008      	beq.n	80067f6 <HAL_DMA_Init+0x3e6>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a18      	ldr	r2, [pc, #96]	; (800684c <HAL_DMA_Init+0x43c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d003      	beq.n	80067f6 <HAL_DMA_Init+0x3e6>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a17      	ldr	r2, [pc, #92]	; (8006850 <HAL_DMA_Init+0x440>)
 80067f4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2202      	movs	r2, #2
 80067fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4b10      	ldr	r3, [pc, #64]	; (8006854 <HAL_DMA_Init+0x444>)
 8006812:	4013      	ands	r3, r2
 8006814:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	2b40      	cmp	r3, #64	; 0x40
 800681c:	d01c      	beq.n	8006858 <HAL_DMA_Init+0x448>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	2b80      	cmp	r3, #128	; 0x80
 8006824:	d102      	bne.n	800682c <HAL_DMA_Init+0x41c>
 8006826:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800682a:	e016      	b.n	800685a <HAL_DMA_Init+0x44a>
 800682c:	2300      	movs	r3, #0
 800682e:	e014      	b.n	800685a <HAL_DMA_Init+0x44a>
 8006830:	fe10803f 	.word	0xfe10803f
 8006834:	58025408 	.word	0x58025408
 8006838:	5802541c 	.word	0x5802541c
 800683c:	58025430 	.word	0x58025430
 8006840:	58025444 	.word	0x58025444
 8006844:	58025458 	.word	0x58025458
 8006848:	5802546c 	.word	0x5802546c
 800684c:	58025480 	.word	0x58025480
 8006850:	58025494 	.word	0x58025494
 8006854:	fffe000f 	.word	0xfffe000f
 8006858:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	68d2      	ldr	r2, [r2, #12]
 800685e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006860:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006868:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006870:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006878:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006880:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006888:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	4b6e      	ldr	r3, [pc, #440]	; (8006a58 <HAL_DMA_Init+0x648>)
 80068a0:	4413      	add	r3, r2
 80068a2:	4a6e      	ldr	r2, [pc, #440]	; (8006a5c <HAL_DMA_Init+0x64c>)
 80068a4:	fba2 2303 	umull	r2, r3, r2, r3
 80068a8:	091b      	lsrs	r3, r3, #4
 80068aa:	009a      	lsls	r2, r3, #2
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f001 fc45 	bl	8008140 <DMA_CalcBaseAndBitshift>
 80068b6:	4603      	mov	r3, r0
 80068b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	2201      	movs	r2, #1
 80068c4:	409a      	lsls	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	605a      	str	r2, [r3, #4]
 80068ca:	e008      	b.n	80068de <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2240      	movs	r2, #64	; 0x40
 80068d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2203      	movs	r2, #3
 80068d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e0b7      	b.n	8006a4e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a5f      	ldr	r2, [pc, #380]	; (8006a60 <HAL_DMA_Init+0x650>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d072      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a5d      	ldr	r2, [pc, #372]	; (8006a64 <HAL_DMA_Init+0x654>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d06d      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a5c      	ldr	r2, [pc, #368]	; (8006a68 <HAL_DMA_Init+0x658>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d068      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a5a      	ldr	r2, [pc, #360]	; (8006a6c <HAL_DMA_Init+0x65c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d063      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a59      	ldr	r2, [pc, #356]	; (8006a70 <HAL_DMA_Init+0x660>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d05e      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a57      	ldr	r2, [pc, #348]	; (8006a74 <HAL_DMA_Init+0x664>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d059      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a56      	ldr	r2, [pc, #344]	; (8006a78 <HAL_DMA_Init+0x668>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d054      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a54      	ldr	r2, [pc, #336]	; (8006a7c <HAL_DMA_Init+0x66c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d04f      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a53      	ldr	r2, [pc, #332]	; (8006a80 <HAL_DMA_Init+0x670>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d04a      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a51      	ldr	r2, [pc, #324]	; (8006a84 <HAL_DMA_Init+0x674>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d045      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a50      	ldr	r2, [pc, #320]	; (8006a88 <HAL_DMA_Init+0x678>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d040      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a4e      	ldr	r2, [pc, #312]	; (8006a8c <HAL_DMA_Init+0x67c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d03b      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a4d      	ldr	r2, [pc, #308]	; (8006a90 <HAL_DMA_Init+0x680>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d036      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a4b      	ldr	r2, [pc, #300]	; (8006a94 <HAL_DMA_Init+0x684>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d031      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a4a      	ldr	r2, [pc, #296]	; (8006a98 <HAL_DMA_Init+0x688>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d02c      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a48      	ldr	r2, [pc, #288]	; (8006a9c <HAL_DMA_Init+0x68c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d027      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a47      	ldr	r2, [pc, #284]	; (8006aa0 <HAL_DMA_Init+0x690>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d022      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a45      	ldr	r2, [pc, #276]	; (8006aa4 <HAL_DMA_Init+0x694>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d01d      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a44      	ldr	r2, [pc, #272]	; (8006aa8 <HAL_DMA_Init+0x698>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d018      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a42      	ldr	r2, [pc, #264]	; (8006aac <HAL_DMA_Init+0x69c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d013      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a41      	ldr	r2, [pc, #260]	; (8006ab0 <HAL_DMA_Init+0x6a0>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00e      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a3f      	ldr	r2, [pc, #252]	; (8006ab4 <HAL_DMA_Init+0x6a4>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d009      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a3e      	ldr	r2, [pc, #248]	; (8006ab8 <HAL_DMA_Init+0x6a8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d004      	beq.n	80069ce <HAL_DMA_Init+0x5be>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a3c      	ldr	r2, [pc, #240]	; (8006abc <HAL_DMA_Init+0x6ac>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d101      	bne.n	80069d2 <HAL_DMA_Init+0x5c2>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <HAL_DMA_Init+0x5c4>
 80069d2:	2300      	movs	r3, #0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d032      	beq.n	8006a3e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 fcdf 	bl	800839c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b80      	cmp	r3, #128	; 0x80
 80069e4:	d102      	bne.n	80069ec <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f4:	b2d2      	uxtb	r2, r2
 80069f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a00:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d010      	beq.n	8006a2c <HAL_DMA_Init+0x61c>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b08      	cmp	r3, #8
 8006a10:	d80c      	bhi.n	8006a2c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 fd5c 	bl	80084d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a28:	605a      	str	r2, [r3, #4]
 8006a2a:	e008      	b.n	8006a3e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	a7fdabf8 	.word	0xa7fdabf8
 8006a5c:	cccccccd 	.word	0xcccccccd
 8006a60:	40020010 	.word	0x40020010
 8006a64:	40020028 	.word	0x40020028
 8006a68:	40020040 	.word	0x40020040
 8006a6c:	40020058 	.word	0x40020058
 8006a70:	40020070 	.word	0x40020070
 8006a74:	40020088 	.word	0x40020088
 8006a78:	400200a0 	.word	0x400200a0
 8006a7c:	400200b8 	.word	0x400200b8
 8006a80:	40020410 	.word	0x40020410
 8006a84:	40020428 	.word	0x40020428
 8006a88:	40020440 	.word	0x40020440
 8006a8c:	40020458 	.word	0x40020458
 8006a90:	40020470 	.word	0x40020470
 8006a94:	40020488 	.word	0x40020488
 8006a98:	400204a0 	.word	0x400204a0
 8006a9c:	400204b8 	.word	0x400204b8
 8006aa0:	58025408 	.word	0x58025408
 8006aa4:	5802541c 	.word	0x5802541c
 8006aa8:	58025430 	.word	0x58025430
 8006aac:	58025444 	.word	0x58025444
 8006ab0:	58025458 	.word	0x58025458
 8006ab4:	5802546c 	.word	0x5802546c
 8006ab8:	58025480 	.word	0x58025480
 8006abc:	58025494 	.word	0x58025494

08006ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e226      	b.n	8006f2a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d101      	bne.n	8006aea <HAL_DMA_Start_IT+0x2a>
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	e21f      	b.n	8006f2a <HAL_DMA_Start_IT+0x46a>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	f040 820a 	bne.w	8006f14 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a68      	ldr	r2, [pc, #416]	; (8006cb4 <HAL_DMA_Start_IT+0x1f4>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d04a      	beq.n	8006bae <HAL_DMA_Start_IT+0xee>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a66      	ldr	r2, [pc, #408]	; (8006cb8 <HAL_DMA_Start_IT+0x1f8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d045      	beq.n	8006bae <HAL_DMA_Start_IT+0xee>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a65      	ldr	r2, [pc, #404]	; (8006cbc <HAL_DMA_Start_IT+0x1fc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d040      	beq.n	8006bae <HAL_DMA_Start_IT+0xee>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a63      	ldr	r2, [pc, #396]	; (8006cc0 <HAL_DMA_Start_IT+0x200>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d03b      	beq.n	8006bae <HAL_DMA_Start_IT+0xee>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a62      	ldr	r2, [pc, #392]	; (8006cc4 <HAL_DMA_Start_IT+0x204>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d036      	beq.n	8006bae <HAL_DMA_Start_IT+0xee>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a60      	ldr	r2, [pc, #384]	; (8006cc8 <HAL_DMA_Start_IT+0x208>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d031      	beq.n	8006bae <HAL_DMA_Start_IT+0xee>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a5f      	ldr	r2, [pc, #380]	; (8006ccc <HAL_DMA_Start_IT+0x20c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d02c      	beq.n	8006bae <HAL_DMA_Start_IT+0xee>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a5d      	ldr	r2, [pc, #372]	; (8006cd0 <HAL_DMA_Start_IT+0x210>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d027      	beq.n	8006bae <HAL_DMA_Start_IT+0xee>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a5c      	ldr	r2, [pc, #368]	; (8006cd4 <HAL_DMA_Start_IT+0x214>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d022      	beq.n	8006bae <HAL_DMA_Start_IT+0xee>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a5a      	ldr	r2, [pc, #360]	; (8006cd8 <HAL_DMA_Start_IT+0x218>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d01d      	beq.n	8006bae <HAL_DMA_Start_IT+0xee>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a59      	ldr	r2, [pc, #356]	; (8006cdc <HAL_DMA_Start_IT+0x21c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d018      	beq.n	8006bae <HAL_DMA_Start_IT+0xee>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a57      	ldr	r2, [pc, #348]	; (8006ce0 <HAL_DMA_Start_IT+0x220>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d013      	beq.n	8006bae <HAL_DMA_Start_IT+0xee>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a56      	ldr	r2, [pc, #344]	; (8006ce4 <HAL_DMA_Start_IT+0x224>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d00e      	beq.n	8006bae <HAL_DMA_Start_IT+0xee>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a54      	ldr	r2, [pc, #336]	; (8006ce8 <HAL_DMA_Start_IT+0x228>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d009      	beq.n	8006bae <HAL_DMA_Start_IT+0xee>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a53      	ldr	r2, [pc, #332]	; (8006cec <HAL_DMA_Start_IT+0x22c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d004      	beq.n	8006bae <HAL_DMA_Start_IT+0xee>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a51      	ldr	r2, [pc, #324]	; (8006cf0 <HAL_DMA_Start_IT+0x230>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d108      	bne.n	8006bc0 <HAL_DMA_Start_IT+0x100>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0201 	bic.w	r2, r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	e007      	b.n	8006bd0 <HAL_DMA_Start_IT+0x110>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0201 	bic.w	r2, r2, #1
 8006bce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	68b9      	ldr	r1, [r7, #8]
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f001 f906 	bl	8007de8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a34      	ldr	r2, [pc, #208]	; (8006cb4 <HAL_DMA_Start_IT+0x1f4>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d04a      	beq.n	8006c7c <HAL_DMA_Start_IT+0x1bc>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a33      	ldr	r2, [pc, #204]	; (8006cb8 <HAL_DMA_Start_IT+0x1f8>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d045      	beq.n	8006c7c <HAL_DMA_Start_IT+0x1bc>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a31      	ldr	r2, [pc, #196]	; (8006cbc <HAL_DMA_Start_IT+0x1fc>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d040      	beq.n	8006c7c <HAL_DMA_Start_IT+0x1bc>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a30      	ldr	r2, [pc, #192]	; (8006cc0 <HAL_DMA_Start_IT+0x200>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d03b      	beq.n	8006c7c <HAL_DMA_Start_IT+0x1bc>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a2e      	ldr	r2, [pc, #184]	; (8006cc4 <HAL_DMA_Start_IT+0x204>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d036      	beq.n	8006c7c <HAL_DMA_Start_IT+0x1bc>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a2d      	ldr	r2, [pc, #180]	; (8006cc8 <HAL_DMA_Start_IT+0x208>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d031      	beq.n	8006c7c <HAL_DMA_Start_IT+0x1bc>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a2b      	ldr	r2, [pc, #172]	; (8006ccc <HAL_DMA_Start_IT+0x20c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d02c      	beq.n	8006c7c <HAL_DMA_Start_IT+0x1bc>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a2a      	ldr	r2, [pc, #168]	; (8006cd0 <HAL_DMA_Start_IT+0x210>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d027      	beq.n	8006c7c <HAL_DMA_Start_IT+0x1bc>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a28      	ldr	r2, [pc, #160]	; (8006cd4 <HAL_DMA_Start_IT+0x214>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d022      	beq.n	8006c7c <HAL_DMA_Start_IT+0x1bc>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a27      	ldr	r2, [pc, #156]	; (8006cd8 <HAL_DMA_Start_IT+0x218>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d01d      	beq.n	8006c7c <HAL_DMA_Start_IT+0x1bc>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a25      	ldr	r2, [pc, #148]	; (8006cdc <HAL_DMA_Start_IT+0x21c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d018      	beq.n	8006c7c <HAL_DMA_Start_IT+0x1bc>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a24      	ldr	r2, [pc, #144]	; (8006ce0 <HAL_DMA_Start_IT+0x220>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d013      	beq.n	8006c7c <HAL_DMA_Start_IT+0x1bc>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a22      	ldr	r2, [pc, #136]	; (8006ce4 <HAL_DMA_Start_IT+0x224>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00e      	beq.n	8006c7c <HAL_DMA_Start_IT+0x1bc>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a21      	ldr	r2, [pc, #132]	; (8006ce8 <HAL_DMA_Start_IT+0x228>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d009      	beq.n	8006c7c <HAL_DMA_Start_IT+0x1bc>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a1f      	ldr	r2, [pc, #124]	; (8006cec <HAL_DMA_Start_IT+0x22c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d004      	beq.n	8006c7c <HAL_DMA_Start_IT+0x1bc>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a1e      	ldr	r2, [pc, #120]	; (8006cf0 <HAL_DMA_Start_IT+0x230>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d101      	bne.n	8006c80 <HAL_DMA_Start_IT+0x1c0>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e000      	b.n	8006c82 <HAL_DMA_Start_IT+0x1c2>
 8006c80:	2300      	movs	r3, #0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d036      	beq.n	8006cf4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f023 021e 	bic.w	r2, r3, #30
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f042 0216 	orr.w	r2, r2, #22
 8006c98:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d03e      	beq.n	8006d20 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f042 0208 	orr.w	r2, r2, #8
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	e035      	b.n	8006d20 <HAL_DMA_Start_IT+0x260>
 8006cb4:	40020010 	.word	0x40020010
 8006cb8:	40020028 	.word	0x40020028
 8006cbc:	40020040 	.word	0x40020040
 8006cc0:	40020058 	.word	0x40020058
 8006cc4:	40020070 	.word	0x40020070
 8006cc8:	40020088 	.word	0x40020088
 8006ccc:	400200a0 	.word	0x400200a0
 8006cd0:	400200b8 	.word	0x400200b8
 8006cd4:	40020410 	.word	0x40020410
 8006cd8:	40020428 	.word	0x40020428
 8006cdc:	40020440 	.word	0x40020440
 8006ce0:	40020458 	.word	0x40020458
 8006ce4:	40020470 	.word	0x40020470
 8006ce8:	40020488 	.word	0x40020488
 8006cec:	400204a0 	.word	0x400204a0
 8006cf0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f023 020e 	bic.w	r2, r3, #14
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 020a 	orr.w	r2, r2, #10
 8006d06:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d007      	beq.n	8006d20 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0204 	orr.w	r2, r2, #4
 8006d1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a83      	ldr	r2, [pc, #524]	; (8006f34 <HAL_DMA_Start_IT+0x474>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d072      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a82      	ldr	r2, [pc, #520]	; (8006f38 <HAL_DMA_Start_IT+0x478>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d06d      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a80      	ldr	r2, [pc, #512]	; (8006f3c <HAL_DMA_Start_IT+0x47c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d068      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a7f      	ldr	r2, [pc, #508]	; (8006f40 <HAL_DMA_Start_IT+0x480>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d063      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a7d      	ldr	r2, [pc, #500]	; (8006f44 <HAL_DMA_Start_IT+0x484>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d05e      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a7c      	ldr	r2, [pc, #496]	; (8006f48 <HAL_DMA_Start_IT+0x488>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d059      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a7a      	ldr	r2, [pc, #488]	; (8006f4c <HAL_DMA_Start_IT+0x48c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d054      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a79      	ldr	r2, [pc, #484]	; (8006f50 <HAL_DMA_Start_IT+0x490>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d04f      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a77      	ldr	r2, [pc, #476]	; (8006f54 <HAL_DMA_Start_IT+0x494>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d04a      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a76      	ldr	r2, [pc, #472]	; (8006f58 <HAL_DMA_Start_IT+0x498>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d045      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a74      	ldr	r2, [pc, #464]	; (8006f5c <HAL_DMA_Start_IT+0x49c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d040      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a73      	ldr	r2, [pc, #460]	; (8006f60 <HAL_DMA_Start_IT+0x4a0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d03b      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a71      	ldr	r2, [pc, #452]	; (8006f64 <HAL_DMA_Start_IT+0x4a4>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d036      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a70      	ldr	r2, [pc, #448]	; (8006f68 <HAL_DMA_Start_IT+0x4a8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d031      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a6e      	ldr	r2, [pc, #440]	; (8006f6c <HAL_DMA_Start_IT+0x4ac>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d02c      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a6d      	ldr	r2, [pc, #436]	; (8006f70 <HAL_DMA_Start_IT+0x4b0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d027      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a6b      	ldr	r2, [pc, #428]	; (8006f74 <HAL_DMA_Start_IT+0x4b4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d022      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a6a      	ldr	r2, [pc, #424]	; (8006f78 <HAL_DMA_Start_IT+0x4b8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d01d      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a68      	ldr	r2, [pc, #416]	; (8006f7c <HAL_DMA_Start_IT+0x4bc>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d018      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a67      	ldr	r2, [pc, #412]	; (8006f80 <HAL_DMA_Start_IT+0x4c0>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d013      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a65      	ldr	r2, [pc, #404]	; (8006f84 <HAL_DMA_Start_IT+0x4c4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00e      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a64      	ldr	r2, [pc, #400]	; (8006f88 <HAL_DMA_Start_IT+0x4c8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d009      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a62      	ldr	r2, [pc, #392]	; (8006f8c <HAL_DMA_Start_IT+0x4cc>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d004      	beq.n	8006e10 <HAL_DMA_Start_IT+0x350>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a61      	ldr	r2, [pc, #388]	; (8006f90 <HAL_DMA_Start_IT+0x4d0>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d101      	bne.n	8006e14 <HAL_DMA_Start_IT+0x354>
 8006e10:	2301      	movs	r3, #1
 8006e12:	e000      	b.n	8006e16 <HAL_DMA_Start_IT+0x356>
 8006e14:	2300      	movs	r3, #0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d01a      	beq.n	8006e50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d007      	beq.n	8006e50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a37      	ldr	r2, [pc, #220]	; (8006f34 <HAL_DMA_Start_IT+0x474>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d04a      	beq.n	8006ef0 <HAL_DMA_Start_IT+0x430>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a36      	ldr	r2, [pc, #216]	; (8006f38 <HAL_DMA_Start_IT+0x478>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d045      	beq.n	8006ef0 <HAL_DMA_Start_IT+0x430>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a34      	ldr	r2, [pc, #208]	; (8006f3c <HAL_DMA_Start_IT+0x47c>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d040      	beq.n	8006ef0 <HAL_DMA_Start_IT+0x430>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a33      	ldr	r2, [pc, #204]	; (8006f40 <HAL_DMA_Start_IT+0x480>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d03b      	beq.n	8006ef0 <HAL_DMA_Start_IT+0x430>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a31      	ldr	r2, [pc, #196]	; (8006f44 <HAL_DMA_Start_IT+0x484>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d036      	beq.n	8006ef0 <HAL_DMA_Start_IT+0x430>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a30      	ldr	r2, [pc, #192]	; (8006f48 <HAL_DMA_Start_IT+0x488>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d031      	beq.n	8006ef0 <HAL_DMA_Start_IT+0x430>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a2e      	ldr	r2, [pc, #184]	; (8006f4c <HAL_DMA_Start_IT+0x48c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d02c      	beq.n	8006ef0 <HAL_DMA_Start_IT+0x430>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a2d      	ldr	r2, [pc, #180]	; (8006f50 <HAL_DMA_Start_IT+0x490>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d027      	beq.n	8006ef0 <HAL_DMA_Start_IT+0x430>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a2b      	ldr	r2, [pc, #172]	; (8006f54 <HAL_DMA_Start_IT+0x494>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d022      	beq.n	8006ef0 <HAL_DMA_Start_IT+0x430>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a2a      	ldr	r2, [pc, #168]	; (8006f58 <HAL_DMA_Start_IT+0x498>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d01d      	beq.n	8006ef0 <HAL_DMA_Start_IT+0x430>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a28      	ldr	r2, [pc, #160]	; (8006f5c <HAL_DMA_Start_IT+0x49c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d018      	beq.n	8006ef0 <HAL_DMA_Start_IT+0x430>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a27      	ldr	r2, [pc, #156]	; (8006f60 <HAL_DMA_Start_IT+0x4a0>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d013      	beq.n	8006ef0 <HAL_DMA_Start_IT+0x430>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a25      	ldr	r2, [pc, #148]	; (8006f64 <HAL_DMA_Start_IT+0x4a4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00e      	beq.n	8006ef0 <HAL_DMA_Start_IT+0x430>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a24      	ldr	r2, [pc, #144]	; (8006f68 <HAL_DMA_Start_IT+0x4a8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d009      	beq.n	8006ef0 <HAL_DMA_Start_IT+0x430>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a22      	ldr	r2, [pc, #136]	; (8006f6c <HAL_DMA_Start_IT+0x4ac>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d004      	beq.n	8006ef0 <HAL_DMA_Start_IT+0x430>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a21      	ldr	r2, [pc, #132]	; (8006f70 <HAL_DMA_Start_IT+0x4b0>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d108      	bne.n	8006f02 <HAL_DMA_Start_IT+0x442>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0201 	orr.w	r2, r2, #1
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	e012      	b.n	8006f28 <HAL_DMA_Start_IT+0x468>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0201 	orr.w	r2, r2, #1
 8006f10:	601a      	str	r2, [r3, #0]
 8006f12:	e009      	b.n	8006f28 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	40020010 	.word	0x40020010
 8006f38:	40020028 	.word	0x40020028
 8006f3c:	40020040 	.word	0x40020040
 8006f40:	40020058 	.word	0x40020058
 8006f44:	40020070 	.word	0x40020070
 8006f48:	40020088 	.word	0x40020088
 8006f4c:	400200a0 	.word	0x400200a0
 8006f50:	400200b8 	.word	0x400200b8
 8006f54:	40020410 	.word	0x40020410
 8006f58:	40020428 	.word	0x40020428
 8006f5c:	40020440 	.word	0x40020440
 8006f60:	40020458 	.word	0x40020458
 8006f64:	40020470 	.word	0x40020470
 8006f68:	40020488 	.word	0x40020488
 8006f6c:	400204a0 	.word	0x400204a0
 8006f70:	400204b8 	.word	0x400204b8
 8006f74:	58025408 	.word	0x58025408
 8006f78:	5802541c 	.word	0x5802541c
 8006f7c:	58025430 	.word	0x58025430
 8006f80:	58025444 	.word	0x58025444
 8006f84:	58025458 	.word	0x58025458
 8006f88:	5802546c 	.word	0x5802546c
 8006f8c:	58025480 	.word	0x58025480
 8006f90:	58025494 	.word	0x58025494

08006f94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08a      	sub	sp, #40	; 0x28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006fa0:	4b67      	ldr	r3, [pc, #412]	; (8007140 <HAL_DMA_IRQHandler+0x1ac>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a67      	ldr	r2, [pc, #412]	; (8007144 <HAL_DMA_IRQHandler+0x1b0>)
 8006fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006faa:	0a9b      	lsrs	r3, r3, #10
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a5f      	ldr	r2, [pc, #380]	; (8007148 <HAL_DMA_IRQHandler+0x1b4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d04a      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a5d      	ldr	r2, [pc, #372]	; (800714c <HAL_DMA_IRQHandler+0x1b8>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d045      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a5c      	ldr	r2, [pc, #368]	; (8007150 <HAL_DMA_IRQHandler+0x1bc>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d040      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a5a      	ldr	r2, [pc, #360]	; (8007154 <HAL_DMA_IRQHandler+0x1c0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d03b      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a59      	ldr	r2, [pc, #356]	; (8007158 <HAL_DMA_IRQHandler+0x1c4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d036      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a57      	ldr	r2, [pc, #348]	; (800715c <HAL_DMA_IRQHandler+0x1c8>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d031      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a56      	ldr	r2, [pc, #344]	; (8007160 <HAL_DMA_IRQHandler+0x1cc>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d02c      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a54      	ldr	r2, [pc, #336]	; (8007164 <HAL_DMA_IRQHandler+0x1d0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d027      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a53      	ldr	r2, [pc, #332]	; (8007168 <HAL_DMA_IRQHandler+0x1d4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d022      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a51      	ldr	r2, [pc, #324]	; (800716c <HAL_DMA_IRQHandler+0x1d8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d01d      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a50      	ldr	r2, [pc, #320]	; (8007170 <HAL_DMA_IRQHandler+0x1dc>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d018      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a4e      	ldr	r2, [pc, #312]	; (8007174 <HAL_DMA_IRQHandler+0x1e0>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d013      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a4d      	ldr	r2, [pc, #308]	; (8007178 <HAL_DMA_IRQHandler+0x1e4>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d00e      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a4b      	ldr	r2, [pc, #300]	; (800717c <HAL_DMA_IRQHandler+0x1e8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d009      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a4a      	ldr	r2, [pc, #296]	; (8007180 <HAL_DMA_IRQHandler+0x1ec>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d004      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a48      	ldr	r2, [pc, #288]	; (8007184 <HAL_DMA_IRQHandler+0x1f0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d101      	bne.n	800706a <HAL_DMA_IRQHandler+0xd6>
 8007066:	2301      	movs	r3, #1
 8007068:	e000      	b.n	800706c <HAL_DMA_IRQHandler+0xd8>
 800706a:	2300      	movs	r3, #0
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 842b 	beq.w	80078c8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007076:	f003 031f 	and.w	r3, r3, #31
 800707a:	2208      	movs	r2, #8
 800707c:	409a      	lsls	r2, r3
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	4013      	ands	r3, r2
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 80a2 	beq.w	80071cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a2e      	ldr	r2, [pc, #184]	; (8007148 <HAL_DMA_IRQHandler+0x1b4>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d04a      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a2d      	ldr	r2, [pc, #180]	; (800714c <HAL_DMA_IRQHandler+0x1b8>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d045      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a2b      	ldr	r2, [pc, #172]	; (8007150 <HAL_DMA_IRQHandler+0x1bc>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d040      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a2a      	ldr	r2, [pc, #168]	; (8007154 <HAL_DMA_IRQHandler+0x1c0>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d03b      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a28      	ldr	r2, [pc, #160]	; (8007158 <HAL_DMA_IRQHandler+0x1c4>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d036      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a27      	ldr	r2, [pc, #156]	; (800715c <HAL_DMA_IRQHandler+0x1c8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d031      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a25      	ldr	r2, [pc, #148]	; (8007160 <HAL_DMA_IRQHandler+0x1cc>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d02c      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a24      	ldr	r2, [pc, #144]	; (8007164 <HAL_DMA_IRQHandler+0x1d0>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d027      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a22      	ldr	r2, [pc, #136]	; (8007168 <HAL_DMA_IRQHandler+0x1d4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d022      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a21      	ldr	r2, [pc, #132]	; (800716c <HAL_DMA_IRQHandler+0x1d8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d01d      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1f      	ldr	r2, [pc, #124]	; (8007170 <HAL_DMA_IRQHandler+0x1dc>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d018      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a1e      	ldr	r2, [pc, #120]	; (8007174 <HAL_DMA_IRQHandler+0x1e0>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d013      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1c      	ldr	r2, [pc, #112]	; (8007178 <HAL_DMA_IRQHandler+0x1e4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00e      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a1b      	ldr	r2, [pc, #108]	; (800717c <HAL_DMA_IRQHandler+0x1e8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d009      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a19      	ldr	r2, [pc, #100]	; (8007180 <HAL_DMA_IRQHandler+0x1ec>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d004      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a18      	ldr	r2, [pc, #96]	; (8007184 <HAL_DMA_IRQHandler+0x1f0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d12f      	bne.n	8007188 <HAL_DMA_IRQHandler+0x1f4>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0304 	and.w	r3, r3, #4
 8007132:	2b00      	cmp	r3, #0
 8007134:	bf14      	ite	ne
 8007136:	2301      	movne	r3, #1
 8007138:	2300      	moveq	r3, #0
 800713a:	b2db      	uxtb	r3, r3
 800713c:	e02e      	b.n	800719c <HAL_DMA_IRQHandler+0x208>
 800713e:	bf00      	nop
 8007140:	24000100 	.word	0x24000100
 8007144:	1b4e81b5 	.word	0x1b4e81b5
 8007148:	40020010 	.word	0x40020010
 800714c:	40020028 	.word	0x40020028
 8007150:	40020040 	.word	0x40020040
 8007154:	40020058 	.word	0x40020058
 8007158:	40020070 	.word	0x40020070
 800715c:	40020088 	.word	0x40020088
 8007160:	400200a0 	.word	0x400200a0
 8007164:	400200b8 	.word	0x400200b8
 8007168:	40020410 	.word	0x40020410
 800716c:	40020428 	.word	0x40020428
 8007170:	40020440 	.word	0x40020440
 8007174:	40020458 	.word	0x40020458
 8007178:	40020470 	.word	0x40020470
 800717c:	40020488 	.word	0x40020488
 8007180:	400204a0 	.word	0x400204a0
 8007184:	400204b8 	.word	0x400204b8
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0308 	and.w	r3, r3, #8
 8007192:	2b00      	cmp	r3, #0
 8007194:	bf14      	ite	ne
 8007196:	2301      	movne	r3, #1
 8007198:	2300      	moveq	r3, #0
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	d015      	beq.n	80071cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0204 	bic.w	r2, r2, #4
 80071ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b4:	f003 031f 	and.w	r3, r3, #31
 80071b8:	2208      	movs	r2, #8
 80071ba:	409a      	lsls	r2, r3
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c4:	f043 0201 	orr.w	r2, r3, #1
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d0:	f003 031f 	and.w	r3, r3, #31
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	fa22 f303 	lsr.w	r3, r2, r3
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d06e      	beq.n	80072c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a69      	ldr	r2, [pc, #420]	; (800738c <HAL_DMA_IRQHandler+0x3f8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d04a      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a67      	ldr	r2, [pc, #412]	; (8007390 <HAL_DMA_IRQHandler+0x3fc>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d045      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a66      	ldr	r2, [pc, #408]	; (8007394 <HAL_DMA_IRQHandler+0x400>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d040      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a64      	ldr	r2, [pc, #400]	; (8007398 <HAL_DMA_IRQHandler+0x404>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d03b      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a63      	ldr	r2, [pc, #396]	; (800739c <HAL_DMA_IRQHandler+0x408>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d036      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a61      	ldr	r2, [pc, #388]	; (80073a0 <HAL_DMA_IRQHandler+0x40c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d031      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a60      	ldr	r2, [pc, #384]	; (80073a4 <HAL_DMA_IRQHandler+0x410>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d02c      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a5e      	ldr	r2, [pc, #376]	; (80073a8 <HAL_DMA_IRQHandler+0x414>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d027      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a5d      	ldr	r2, [pc, #372]	; (80073ac <HAL_DMA_IRQHandler+0x418>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d022      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a5b      	ldr	r2, [pc, #364]	; (80073b0 <HAL_DMA_IRQHandler+0x41c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d01d      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a5a      	ldr	r2, [pc, #360]	; (80073b4 <HAL_DMA_IRQHandler+0x420>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d018      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a58      	ldr	r2, [pc, #352]	; (80073b8 <HAL_DMA_IRQHandler+0x424>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d013      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a57      	ldr	r2, [pc, #348]	; (80073bc <HAL_DMA_IRQHandler+0x428>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00e      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a55      	ldr	r2, [pc, #340]	; (80073c0 <HAL_DMA_IRQHandler+0x42c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d009      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a54      	ldr	r2, [pc, #336]	; (80073c4 <HAL_DMA_IRQHandler+0x430>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d004      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a52      	ldr	r2, [pc, #328]	; (80073c8 <HAL_DMA_IRQHandler+0x434>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d10a      	bne.n	8007298 <HAL_DMA_IRQHandler+0x304>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800728c:	2b00      	cmp	r3, #0
 800728e:	bf14      	ite	ne
 8007290:	2301      	movne	r3, #1
 8007292:	2300      	moveq	r3, #0
 8007294:	b2db      	uxtb	r3, r3
 8007296:	e003      	b.n	80072a0 <HAL_DMA_IRQHandler+0x30c>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2300      	movs	r3, #0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00d      	beq.n	80072c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	2201      	movs	r2, #1
 80072ae:	409a      	lsls	r2, r3
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b8:	f043 0202 	orr.w	r2, r3, #2
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c4:	f003 031f 	and.w	r3, r3, #31
 80072c8:	2204      	movs	r2, #4
 80072ca:	409a      	lsls	r2, r3
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	4013      	ands	r3, r2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 808f 	beq.w	80073f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a2c      	ldr	r2, [pc, #176]	; (800738c <HAL_DMA_IRQHandler+0x3f8>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d04a      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a2a      	ldr	r2, [pc, #168]	; (8007390 <HAL_DMA_IRQHandler+0x3fc>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d045      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a29      	ldr	r2, [pc, #164]	; (8007394 <HAL_DMA_IRQHandler+0x400>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d040      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a27      	ldr	r2, [pc, #156]	; (8007398 <HAL_DMA_IRQHandler+0x404>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d03b      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a26      	ldr	r2, [pc, #152]	; (800739c <HAL_DMA_IRQHandler+0x408>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d036      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a24      	ldr	r2, [pc, #144]	; (80073a0 <HAL_DMA_IRQHandler+0x40c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d031      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a23      	ldr	r2, [pc, #140]	; (80073a4 <HAL_DMA_IRQHandler+0x410>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d02c      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a21      	ldr	r2, [pc, #132]	; (80073a8 <HAL_DMA_IRQHandler+0x414>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d027      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a20      	ldr	r2, [pc, #128]	; (80073ac <HAL_DMA_IRQHandler+0x418>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d022      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a1e      	ldr	r2, [pc, #120]	; (80073b0 <HAL_DMA_IRQHandler+0x41c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d01d      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a1d      	ldr	r2, [pc, #116]	; (80073b4 <HAL_DMA_IRQHandler+0x420>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d018      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a1b      	ldr	r2, [pc, #108]	; (80073b8 <HAL_DMA_IRQHandler+0x424>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d013      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a1a      	ldr	r2, [pc, #104]	; (80073bc <HAL_DMA_IRQHandler+0x428>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d00e      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a18      	ldr	r2, [pc, #96]	; (80073c0 <HAL_DMA_IRQHandler+0x42c>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d009      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a17      	ldr	r2, [pc, #92]	; (80073c4 <HAL_DMA_IRQHandler+0x430>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d004      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a15      	ldr	r2, [pc, #84]	; (80073c8 <HAL_DMA_IRQHandler+0x434>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d12a      	bne.n	80073cc <HAL_DMA_IRQHandler+0x438>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	bf14      	ite	ne
 8007384:	2301      	movne	r3, #1
 8007386:	2300      	moveq	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	e023      	b.n	80073d4 <HAL_DMA_IRQHandler+0x440>
 800738c:	40020010 	.word	0x40020010
 8007390:	40020028 	.word	0x40020028
 8007394:	40020040 	.word	0x40020040
 8007398:	40020058 	.word	0x40020058
 800739c:	40020070 	.word	0x40020070
 80073a0:	40020088 	.word	0x40020088
 80073a4:	400200a0 	.word	0x400200a0
 80073a8:	400200b8 	.word	0x400200b8
 80073ac:	40020410 	.word	0x40020410
 80073b0:	40020428 	.word	0x40020428
 80073b4:	40020440 	.word	0x40020440
 80073b8:	40020458 	.word	0x40020458
 80073bc:	40020470 	.word	0x40020470
 80073c0:	40020488 	.word	0x40020488
 80073c4:	400204a0 	.word	0x400204a0
 80073c8:	400204b8 	.word	0x400204b8
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2300      	movs	r3, #0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00d      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073dc:	f003 031f 	and.w	r3, r3, #31
 80073e0:	2204      	movs	r2, #4
 80073e2:	409a      	lsls	r2, r3
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ec:	f043 0204 	orr.w	r2, r3, #4
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	2210      	movs	r2, #16
 80073fe:	409a      	lsls	r2, r3
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	4013      	ands	r3, r2
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 80a6 	beq.w	8007556 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a85      	ldr	r2, [pc, #532]	; (8007624 <HAL_DMA_IRQHandler+0x690>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d04a      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a83      	ldr	r2, [pc, #524]	; (8007628 <HAL_DMA_IRQHandler+0x694>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d045      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a82      	ldr	r2, [pc, #520]	; (800762c <HAL_DMA_IRQHandler+0x698>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d040      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a80      	ldr	r2, [pc, #512]	; (8007630 <HAL_DMA_IRQHandler+0x69c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d03b      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a7f      	ldr	r2, [pc, #508]	; (8007634 <HAL_DMA_IRQHandler+0x6a0>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d036      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a7d      	ldr	r2, [pc, #500]	; (8007638 <HAL_DMA_IRQHandler+0x6a4>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d031      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a7c      	ldr	r2, [pc, #496]	; (800763c <HAL_DMA_IRQHandler+0x6a8>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d02c      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a7a      	ldr	r2, [pc, #488]	; (8007640 <HAL_DMA_IRQHandler+0x6ac>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d027      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a79      	ldr	r2, [pc, #484]	; (8007644 <HAL_DMA_IRQHandler+0x6b0>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d022      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a77      	ldr	r2, [pc, #476]	; (8007648 <HAL_DMA_IRQHandler+0x6b4>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d01d      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a76      	ldr	r2, [pc, #472]	; (800764c <HAL_DMA_IRQHandler+0x6b8>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d018      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a74      	ldr	r2, [pc, #464]	; (8007650 <HAL_DMA_IRQHandler+0x6bc>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d013      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a73      	ldr	r2, [pc, #460]	; (8007654 <HAL_DMA_IRQHandler+0x6c0>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d00e      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a71      	ldr	r2, [pc, #452]	; (8007658 <HAL_DMA_IRQHandler+0x6c4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d009      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a70      	ldr	r2, [pc, #448]	; (800765c <HAL_DMA_IRQHandler+0x6c8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d004      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a6e      	ldr	r2, [pc, #440]	; (8007660 <HAL_DMA_IRQHandler+0x6cc>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d10a      	bne.n	80074c0 <HAL_DMA_IRQHandler+0x52c>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	bf14      	ite	ne
 80074b8:	2301      	movne	r3, #1
 80074ba:	2300      	moveq	r3, #0
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	e009      	b.n	80074d4 <HAL_DMA_IRQHandler+0x540>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	bf14      	ite	ne
 80074ce:	2301      	movne	r3, #1
 80074d0:	2300      	moveq	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d03e      	beq.n	8007556 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074dc:	f003 031f 	and.w	r3, r3, #31
 80074e0:	2210      	movs	r2, #16
 80074e2:	409a      	lsls	r2, r3
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d018      	beq.n	8007528 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d108      	bne.n	8007516 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007508:	2b00      	cmp	r3, #0
 800750a:	d024      	beq.n	8007556 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	4798      	blx	r3
 8007514:	e01f      	b.n	8007556 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751a:	2b00      	cmp	r3, #0
 800751c:	d01b      	beq.n	8007556 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	4798      	blx	r3
 8007526:	e016      	b.n	8007556 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007532:	2b00      	cmp	r3, #0
 8007534:	d107      	bne.n	8007546 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f022 0208 	bic.w	r2, r2, #8
 8007544:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800755a:	f003 031f 	and.w	r3, r3, #31
 800755e:	2220      	movs	r2, #32
 8007560:	409a      	lsls	r2, r3
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	4013      	ands	r3, r2
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 8110 	beq.w	800778c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a2c      	ldr	r2, [pc, #176]	; (8007624 <HAL_DMA_IRQHandler+0x690>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d04a      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a2b      	ldr	r2, [pc, #172]	; (8007628 <HAL_DMA_IRQHandler+0x694>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d045      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a29      	ldr	r2, [pc, #164]	; (800762c <HAL_DMA_IRQHandler+0x698>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d040      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a28      	ldr	r2, [pc, #160]	; (8007630 <HAL_DMA_IRQHandler+0x69c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d03b      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a26      	ldr	r2, [pc, #152]	; (8007634 <HAL_DMA_IRQHandler+0x6a0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d036      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a25      	ldr	r2, [pc, #148]	; (8007638 <HAL_DMA_IRQHandler+0x6a4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d031      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a23      	ldr	r2, [pc, #140]	; (800763c <HAL_DMA_IRQHandler+0x6a8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d02c      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a22      	ldr	r2, [pc, #136]	; (8007640 <HAL_DMA_IRQHandler+0x6ac>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d027      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a20      	ldr	r2, [pc, #128]	; (8007644 <HAL_DMA_IRQHandler+0x6b0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d022      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1f      	ldr	r2, [pc, #124]	; (8007648 <HAL_DMA_IRQHandler+0x6b4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d01d      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a1d      	ldr	r2, [pc, #116]	; (800764c <HAL_DMA_IRQHandler+0x6b8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d018      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a1c      	ldr	r2, [pc, #112]	; (8007650 <HAL_DMA_IRQHandler+0x6bc>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d013      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a1a      	ldr	r2, [pc, #104]	; (8007654 <HAL_DMA_IRQHandler+0x6c0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d00e      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a19      	ldr	r2, [pc, #100]	; (8007658 <HAL_DMA_IRQHandler+0x6c4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d009      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a17      	ldr	r2, [pc, #92]	; (800765c <HAL_DMA_IRQHandler+0x6c8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d004      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a16      	ldr	r2, [pc, #88]	; (8007660 <HAL_DMA_IRQHandler+0x6cc>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d12b      	bne.n	8007664 <HAL_DMA_IRQHandler+0x6d0>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0310 	and.w	r3, r3, #16
 8007616:	2b00      	cmp	r3, #0
 8007618:	bf14      	ite	ne
 800761a:	2301      	movne	r3, #1
 800761c:	2300      	moveq	r3, #0
 800761e:	b2db      	uxtb	r3, r3
 8007620:	e02a      	b.n	8007678 <HAL_DMA_IRQHandler+0x6e4>
 8007622:	bf00      	nop
 8007624:	40020010 	.word	0x40020010
 8007628:	40020028 	.word	0x40020028
 800762c:	40020040 	.word	0x40020040
 8007630:	40020058 	.word	0x40020058
 8007634:	40020070 	.word	0x40020070
 8007638:	40020088 	.word	0x40020088
 800763c:	400200a0 	.word	0x400200a0
 8007640:	400200b8 	.word	0x400200b8
 8007644:	40020410 	.word	0x40020410
 8007648:	40020428 	.word	0x40020428
 800764c:	40020440 	.word	0x40020440
 8007650:	40020458 	.word	0x40020458
 8007654:	40020470 	.word	0x40020470
 8007658:	40020488 	.word	0x40020488
 800765c:	400204a0 	.word	0x400204a0
 8007660:	400204b8 	.word	0x400204b8
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	bf14      	ite	ne
 8007672:	2301      	movne	r3, #1
 8007674:	2300      	moveq	r3, #0
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 8087 	beq.w	800778c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007682:	f003 031f 	and.w	r3, r3, #31
 8007686:	2220      	movs	r2, #32
 8007688:	409a      	lsls	r2, r3
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b04      	cmp	r3, #4
 8007698:	d139      	bne.n	800770e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 0216 	bic.w	r2, r2, #22
 80076a8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	695a      	ldr	r2, [r3, #20]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076b8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d103      	bne.n	80076ca <HAL_DMA_IRQHandler+0x736>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d007      	beq.n	80076da <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f022 0208 	bic.w	r2, r2, #8
 80076d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076de:	f003 031f 	and.w	r3, r3, #31
 80076e2:	223f      	movs	r2, #63	; 0x3f
 80076e4:	409a      	lsls	r2, r3
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 834a 	beq.w	8007d98 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	4798      	blx	r3
          }
          return;
 800770c:	e344      	b.n	8007d98 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d018      	beq.n	800774e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d108      	bne.n	800773c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800772e:	2b00      	cmp	r3, #0
 8007730:	d02c      	beq.n	800778c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	4798      	blx	r3
 800773a:	e027      	b.n	800778c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007740:	2b00      	cmp	r3, #0
 8007742:	d023      	beq.n	800778c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	4798      	blx	r3
 800774c:	e01e      	b.n	800778c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10f      	bne.n	800777c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0210 	bic.w	r2, r2, #16
 800776a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 8306 	beq.w	8007da2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 8088 	beq.w	80078b4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2204      	movs	r2, #4
 80077a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a7a      	ldr	r2, [pc, #488]	; (800799c <HAL_DMA_IRQHandler+0xa08>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d04a      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a79      	ldr	r2, [pc, #484]	; (80079a0 <HAL_DMA_IRQHandler+0xa0c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d045      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a77      	ldr	r2, [pc, #476]	; (80079a4 <HAL_DMA_IRQHandler+0xa10>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d040      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a76      	ldr	r2, [pc, #472]	; (80079a8 <HAL_DMA_IRQHandler+0xa14>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d03b      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a74      	ldr	r2, [pc, #464]	; (80079ac <HAL_DMA_IRQHandler+0xa18>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d036      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a73      	ldr	r2, [pc, #460]	; (80079b0 <HAL_DMA_IRQHandler+0xa1c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d031      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a71      	ldr	r2, [pc, #452]	; (80079b4 <HAL_DMA_IRQHandler+0xa20>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d02c      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a70      	ldr	r2, [pc, #448]	; (80079b8 <HAL_DMA_IRQHandler+0xa24>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d027      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a6e      	ldr	r2, [pc, #440]	; (80079bc <HAL_DMA_IRQHandler+0xa28>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d022      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a6d      	ldr	r2, [pc, #436]	; (80079c0 <HAL_DMA_IRQHandler+0xa2c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d01d      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a6b      	ldr	r2, [pc, #428]	; (80079c4 <HAL_DMA_IRQHandler+0xa30>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d018      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a6a      	ldr	r2, [pc, #424]	; (80079c8 <HAL_DMA_IRQHandler+0xa34>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d013      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a68      	ldr	r2, [pc, #416]	; (80079cc <HAL_DMA_IRQHandler+0xa38>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d00e      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a67      	ldr	r2, [pc, #412]	; (80079d0 <HAL_DMA_IRQHandler+0xa3c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d009      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a65      	ldr	r2, [pc, #404]	; (80079d4 <HAL_DMA_IRQHandler+0xa40>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d004      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a64      	ldr	r2, [pc, #400]	; (80079d8 <HAL_DMA_IRQHandler+0xa44>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d108      	bne.n	800785e <HAL_DMA_IRQHandler+0x8ca>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0201 	bic.w	r2, r2, #1
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	e007      	b.n	800786e <HAL_DMA_IRQHandler+0x8da>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0201 	bic.w	r2, r2, #1
 800786c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3301      	adds	r3, #1
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007876:	429a      	cmp	r2, r3
 8007878:	d307      	bcc.n	800788a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1f2      	bne.n	800786e <HAL_DMA_IRQHandler+0x8da>
 8007888:	e000      	b.n	800788c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800788a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d004      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2203      	movs	r2, #3
 800789e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80078a2:	e003      	b.n	80078ac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 8272 	beq.w	8007da2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	4798      	blx	r3
 80078c6:	e26c      	b.n	8007da2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a43      	ldr	r2, [pc, #268]	; (80079dc <HAL_DMA_IRQHandler+0xa48>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d022      	beq.n	8007918 <HAL_DMA_IRQHandler+0x984>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a42      	ldr	r2, [pc, #264]	; (80079e0 <HAL_DMA_IRQHandler+0xa4c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d01d      	beq.n	8007918 <HAL_DMA_IRQHandler+0x984>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a40      	ldr	r2, [pc, #256]	; (80079e4 <HAL_DMA_IRQHandler+0xa50>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d018      	beq.n	8007918 <HAL_DMA_IRQHandler+0x984>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a3f      	ldr	r2, [pc, #252]	; (80079e8 <HAL_DMA_IRQHandler+0xa54>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <HAL_DMA_IRQHandler+0x984>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a3d      	ldr	r2, [pc, #244]	; (80079ec <HAL_DMA_IRQHandler+0xa58>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00e      	beq.n	8007918 <HAL_DMA_IRQHandler+0x984>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a3c      	ldr	r2, [pc, #240]	; (80079f0 <HAL_DMA_IRQHandler+0xa5c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d009      	beq.n	8007918 <HAL_DMA_IRQHandler+0x984>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a3a      	ldr	r2, [pc, #232]	; (80079f4 <HAL_DMA_IRQHandler+0xa60>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d004      	beq.n	8007918 <HAL_DMA_IRQHandler+0x984>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a39      	ldr	r2, [pc, #228]	; (80079f8 <HAL_DMA_IRQHandler+0xa64>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d101      	bne.n	800791c <HAL_DMA_IRQHandler+0x988>
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <HAL_DMA_IRQHandler+0x98a>
 800791c:	2300      	movs	r3, #0
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 823f 	beq.w	8007da2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	2204      	movs	r2, #4
 8007936:	409a      	lsls	r2, r3
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	4013      	ands	r3, r2
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 80cd 	beq.w	8007adc <HAL_DMA_IRQHandler+0xb48>
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 80c7 	beq.w	8007adc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007952:	f003 031f 	and.w	r3, r3, #31
 8007956:	2204      	movs	r2, #4
 8007958:	409a      	lsls	r2, r3
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d049      	beq.n	80079fc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d109      	bne.n	8007986 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 8210 	beq.w	8007d9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007984:	e20a      	b.n	8007d9c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 8206 	beq.w	8007d9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007998:	e200      	b.n	8007d9c <HAL_DMA_IRQHandler+0xe08>
 800799a:	bf00      	nop
 800799c:	40020010 	.word	0x40020010
 80079a0:	40020028 	.word	0x40020028
 80079a4:	40020040 	.word	0x40020040
 80079a8:	40020058 	.word	0x40020058
 80079ac:	40020070 	.word	0x40020070
 80079b0:	40020088 	.word	0x40020088
 80079b4:	400200a0 	.word	0x400200a0
 80079b8:	400200b8 	.word	0x400200b8
 80079bc:	40020410 	.word	0x40020410
 80079c0:	40020428 	.word	0x40020428
 80079c4:	40020440 	.word	0x40020440
 80079c8:	40020458 	.word	0x40020458
 80079cc:	40020470 	.word	0x40020470
 80079d0:	40020488 	.word	0x40020488
 80079d4:	400204a0 	.word	0x400204a0
 80079d8:	400204b8 	.word	0x400204b8
 80079dc:	58025408 	.word	0x58025408
 80079e0:	5802541c 	.word	0x5802541c
 80079e4:	58025430 	.word	0x58025430
 80079e8:	58025444 	.word	0x58025444
 80079ec:	58025458 	.word	0x58025458
 80079f0:	5802546c 	.word	0x5802546c
 80079f4:	58025480 	.word	0x58025480
 80079f8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d160      	bne.n	8007ac8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a7f      	ldr	r2, [pc, #508]	; (8007c08 <HAL_DMA_IRQHandler+0xc74>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d04a      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a7d      	ldr	r2, [pc, #500]	; (8007c0c <HAL_DMA_IRQHandler+0xc78>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d045      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a7c      	ldr	r2, [pc, #496]	; (8007c10 <HAL_DMA_IRQHandler+0xc7c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d040      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a7a      	ldr	r2, [pc, #488]	; (8007c14 <HAL_DMA_IRQHandler+0xc80>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d03b      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a79      	ldr	r2, [pc, #484]	; (8007c18 <HAL_DMA_IRQHandler+0xc84>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d036      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a77      	ldr	r2, [pc, #476]	; (8007c1c <HAL_DMA_IRQHandler+0xc88>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d031      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a76      	ldr	r2, [pc, #472]	; (8007c20 <HAL_DMA_IRQHandler+0xc8c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d02c      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a74      	ldr	r2, [pc, #464]	; (8007c24 <HAL_DMA_IRQHandler+0xc90>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d027      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a73      	ldr	r2, [pc, #460]	; (8007c28 <HAL_DMA_IRQHandler+0xc94>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d022      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a71      	ldr	r2, [pc, #452]	; (8007c2c <HAL_DMA_IRQHandler+0xc98>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d01d      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a70      	ldr	r2, [pc, #448]	; (8007c30 <HAL_DMA_IRQHandler+0xc9c>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d018      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a6e      	ldr	r2, [pc, #440]	; (8007c34 <HAL_DMA_IRQHandler+0xca0>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d013      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a6d      	ldr	r2, [pc, #436]	; (8007c38 <HAL_DMA_IRQHandler+0xca4>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d00e      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a6b      	ldr	r2, [pc, #428]	; (8007c3c <HAL_DMA_IRQHandler+0xca8>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d009      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a6a      	ldr	r2, [pc, #424]	; (8007c40 <HAL_DMA_IRQHandler+0xcac>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d004      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a68      	ldr	r2, [pc, #416]	; (8007c44 <HAL_DMA_IRQHandler+0xcb0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d108      	bne.n	8007ab8 <HAL_DMA_IRQHandler+0xb24>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0208 	bic.w	r2, r2, #8
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	e007      	b.n	8007ac8 <HAL_DMA_IRQHandler+0xb34>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 0204 	bic.w	r2, r2, #4
 8007ac6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 8165 	beq.w	8007d9c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ada:	e15f      	b.n	8007d9c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae0:	f003 031f 	and.w	r3, r3, #31
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	409a      	lsls	r2, r3
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	4013      	ands	r3, r2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 80c5 	beq.w	8007c7c <HAL_DMA_IRQHandler+0xce8>
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f003 0302 	and.w	r3, r3, #2
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 80bf 	beq.w	8007c7c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b02:	f003 031f 	and.w	r3, r3, #31
 8007b06:	2202      	movs	r2, #2
 8007b08:	409a      	lsls	r2, r3
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d018      	beq.n	8007b4a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 813a 	beq.w	8007da0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b34:	e134      	b.n	8007da0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 8130 	beq.w	8007da0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b48:	e12a      	b.n	8007da0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f003 0320 	and.w	r3, r3, #32
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f040 8089 	bne.w	8007c68 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a2b      	ldr	r2, [pc, #172]	; (8007c08 <HAL_DMA_IRQHandler+0xc74>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d04a      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a29      	ldr	r2, [pc, #164]	; (8007c0c <HAL_DMA_IRQHandler+0xc78>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d045      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a28      	ldr	r2, [pc, #160]	; (8007c10 <HAL_DMA_IRQHandler+0xc7c>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d040      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a26      	ldr	r2, [pc, #152]	; (8007c14 <HAL_DMA_IRQHandler+0xc80>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d03b      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a25      	ldr	r2, [pc, #148]	; (8007c18 <HAL_DMA_IRQHandler+0xc84>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d036      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a23      	ldr	r2, [pc, #140]	; (8007c1c <HAL_DMA_IRQHandler+0xc88>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d031      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a22      	ldr	r2, [pc, #136]	; (8007c20 <HAL_DMA_IRQHandler+0xc8c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d02c      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a20      	ldr	r2, [pc, #128]	; (8007c24 <HAL_DMA_IRQHandler+0xc90>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d027      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a1f      	ldr	r2, [pc, #124]	; (8007c28 <HAL_DMA_IRQHandler+0xc94>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d022      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a1d      	ldr	r2, [pc, #116]	; (8007c2c <HAL_DMA_IRQHandler+0xc98>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d01d      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a1c      	ldr	r2, [pc, #112]	; (8007c30 <HAL_DMA_IRQHandler+0xc9c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d018      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a1a      	ldr	r2, [pc, #104]	; (8007c34 <HAL_DMA_IRQHandler+0xca0>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d013      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a19      	ldr	r2, [pc, #100]	; (8007c38 <HAL_DMA_IRQHandler+0xca4>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d00e      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a17      	ldr	r2, [pc, #92]	; (8007c3c <HAL_DMA_IRQHandler+0xca8>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d009      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a16      	ldr	r2, [pc, #88]	; (8007c40 <HAL_DMA_IRQHandler+0xcac>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d004      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a14      	ldr	r2, [pc, #80]	; (8007c44 <HAL_DMA_IRQHandler+0xcb0>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d128      	bne.n	8007c48 <HAL_DMA_IRQHandler+0xcb4>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 0214 	bic.w	r2, r2, #20
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	e027      	b.n	8007c58 <HAL_DMA_IRQHandler+0xcc4>
 8007c08:	40020010 	.word	0x40020010
 8007c0c:	40020028 	.word	0x40020028
 8007c10:	40020040 	.word	0x40020040
 8007c14:	40020058 	.word	0x40020058
 8007c18:	40020070 	.word	0x40020070
 8007c1c:	40020088 	.word	0x40020088
 8007c20:	400200a0 	.word	0x400200a0
 8007c24:	400200b8 	.word	0x400200b8
 8007c28:	40020410 	.word	0x40020410
 8007c2c:	40020428 	.word	0x40020428
 8007c30:	40020440 	.word	0x40020440
 8007c34:	40020458 	.word	0x40020458
 8007c38:	40020470 	.word	0x40020470
 8007c3c:	40020488 	.word	0x40020488
 8007c40:	400204a0 	.word	0x400204a0
 8007c44:	400204b8 	.word	0x400204b8
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 020a 	bic.w	r2, r2, #10
 8007c56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 8097 	beq.w	8007da0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c7a:	e091      	b.n	8007da0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	2208      	movs	r2, #8
 8007c86:	409a      	lsls	r2, r3
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 8088 	beq.w	8007da2 <HAL_DMA_IRQHandler+0xe0e>
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f003 0308 	and.w	r3, r3, #8
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 8082 	beq.w	8007da2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a41      	ldr	r2, [pc, #260]	; (8007da8 <HAL_DMA_IRQHandler+0xe14>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d04a      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a3f      	ldr	r2, [pc, #252]	; (8007dac <HAL_DMA_IRQHandler+0xe18>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d045      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a3e      	ldr	r2, [pc, #248]	; (8007db0 <HAL_DMA_IRQHandler+0xe1c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d040      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a3c      	ldr	r2, [pc, #240]	; (8007db4 <HAL_DMA_IRQHandler+0xe20>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d03b      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a3b      	ldr	r2, [pc, #236]	; (8007db8 <HAL_DMA_IRQHandler+0xe24>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d036      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a39      	ldr	r2, [pc, #228]	; (8007dbc <HAL_DMA_IRQHandler+0xe28>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d031      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a38      	ldr	r2, [pc, #224]	; (8007dc0 <HAL_DMA_IRQHandler+0xe2c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d02c      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a36      	ldr	r2, [pc, #216]	; (8007dc4 <HAL_DMA_IRQHandler+0xe30>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d027      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a35      	ldr	r2, [pc, #212]	; (8007dc8 <HAL_DMA_IRQHandler+0xe34>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d022      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a33      	ldr	r2, [pc, #204]	; (8007dcc <HAL_DMA_IRQHandler+0xe38>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d01d      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a32      	ldr	r2, [pc, #200]	; (8007dd0 <HAL_DMA_IRQHandler+0xe3c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d018      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a30      	ldr	r2, [pc, #192]	; (8007dd4 <HAL_DMA_IRQHandler+0xe40>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d013      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a2f      	ldr	r2, [pc, #188]	; (8007dd8 <HAL_DMA_IRQHandler+0xe44>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d00e      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a2d      	ldr	r2, [pc, #180]	; (8007ddc <HAL_DMA_IRQHandler+0xe48>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d009      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a2c      	ldr	r2, [pc, #176]	; (8007de0 <HAL_DMA_IRQHandler+0xe4c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d004      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a2a      	ldr	r2, [pc, #168]	; (8007de4 <HAL_DMA_IRQHandler+0xe50>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d108      	bne.n	8007d50 <HAL_DMA_IRQHandler+0xdbc>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 021c 	bic.w	r2, r2, #28
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	e007      	b.n	8007d60 <HAL_DMA_IRQHandler+0xdcc>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 020e 	bic.w	r2, r2, #14
 8007d5e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d64:	f003 031f 	and.w	r3, r3, #31
 8007d68:	2201      	movs	r2, #1
 8007d6a:	409a      	lsls	r2, r3
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d009      	beq.n	8007da2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	4798      	blx	r3
 8007d96:	e004      	b.n	8007da2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007d98:	bf00      	nop
 8007d9a:	e002      	b.n	8007da2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d9c:	bf00      	nop
 8007d9e:	e000      	b.n	8007da2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007da0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007da2:	3728      	adds	r7, #40	; 0x28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	40020010 	.word	0x40020010
 8007dac:	40020028 	.word	0x40020028
 8007db0:	40020040 	.word	0x40020040
 8007db4:	40020058 	.word	0x40020058
 8007db8:	40020070 	.word	0x40020070
 8007dbc:	40020088 	.word	0x40020088
 8007dc0:	400200a0 	.word	0x400200a0
 8007dc4:	400200b8 	.word	0x400200b8
 8007dc8:	40020410 	.word	0x40020410
 8007dcc:	40020428 	.word	0x40020428
 8007dd0:	40020440 	.word	0x40020440
 8007dd4:	40020458 	.word	0x40020458
 8007dd8:	40020470 	.word	0x40020470
 8007ddc:	40020488 	.word	0x40020488
 8007de0:	400204a0 	.word	0x400204a0
 8007de4:	400204b8 	.word	0x400204b8

08007de8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dfa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e00:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a7f      	ldr	r2, [pc, #508]	; (8008004 <DMA_SetConfig+0x21c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d072      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a7d      	ldr	r2, [pc, #500]	; (8008008 <DMA_SetConfig+0x220>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d06d      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a7c      	ldr	r2, [pc, #496]	; (800800c <DMA_SetConfig+0x224>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d068      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a7a      	ldr	r2, [pc, #488]	; (8008010 <DMA_SetConfig+0x228>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d063      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a79      	ldr	r2, [pc, #484]	; (8008014 <DMA_SetConfig+0x22c>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d05e      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a77      	ldr	r2, [pc, #476]	; (8008018 <DMA_SetConfig+0x230>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d059      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a76      	ldr	r2, [pc, #472]	; (800801c <DMA_SetConfig+0x234>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d054      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a74      	ldr	r2, [pc, #464]	; (8008020 <DMA_SetConfig+0x238>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d04f      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a73      	ldr	r2, [pc, #460]	; (8008024 <DMA_SetConfig+0x23c>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d04a      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a71      	ldr	r2, [pc, #452]	; (8008028 <DMA_SetConfig+0x240>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d045      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a70      	ldr	r2, [pc, #448]	; (800802c <DMA_SetConfig+0x244>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d040      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a6e      	ldr	r2, [pc, #440]	; (8008030 <DMA_SetConfig+0x248>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d03b      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a6d      	ldr	r2, [pc, #436]	; (8008034 <DMA_SetConfig+0x24c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d036      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a6b      	ldr	r2, [pc, #428]	; (8008038 <DMA_SetConfig+0x250>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d031      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a6a      	ldr	r2, [pc, #424]	; (800803c <DMA_SetConfig+0x254>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d02c      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a68      	ldr	r2, [pc, #416]	; (8008040 <DMA_SetConfig+0x258>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d027      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a67      	ldr	r2, [pc, #412]	; (8008044 <DMA_SetConfig+0x25c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d022      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a65      	ldr	r2, [pc, #404]	; (8008048 <DMA_SetConfig+0x260>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d01d      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a64      	ldr	r2, [pc, #400]	; (800804c <DMA_SetConfig+0x264>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d018      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a62      	ldr	r2, [pc, #392]	; (8008050 <DMA_SetConfig+0x268>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d013      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a61      	ldr	r2, [pc, #388]	; (8008054 <DMA_SetConfig+0x26c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d00e      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a5f      	ldr	r2, [pc, #380]	; (8008058 <DMA_SetConfig+0x270>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d009      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a5e      	ldr	r2, [pc, #376]	; (800805c <DMA_SetConfig+0x274>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d004      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a5c      	ldr	r2, [pc, #368]	; (8008060 <DMA_SetConfig+0x278>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d101      	bne.n	8007ef6 <DMA_SetConfig+0x10e>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e000      	b.n	8007ef8 <DMA_SetConfig+0x110>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00d      	beq.n	8007f18 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f04:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d004      	beq.n	8007f18 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007f16:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a39      	ldr	r2, [pc, #228]	; (8008004 <DMA_SetConfig+0x21c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d04a      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a38      	ldr	r2, [pc, #224]	; (8008008 <DMA_SetConfig+0x220>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d045      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a36      	ldr	r2, [pc, #216]	; (800800c <DMA_SetConfig+0x224>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d040      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a35      	ldr	r2, [pc, #212]	; (8008010 <DMA_SetConfig+0x228>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d03b      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a33      	ldr	r2, [pc, #204]	; (8008014 <DMA_SetConfig+0x22c>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d036      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a32      	ldr	r2, [pc, #200]	; (8008018 <DMA_SetConfig+0x230>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d031      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a30      	ldr	r2, [pc, #192]	; (800801c <DMA_SetConfig+0x234>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d02c      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a2f      	ldr	r2, [pc, #188]	; (8008020 <DMA_SetConfig+0x238>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d027      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a2d      	ldr	r2, [pc, #180]	; (8008024 <DMA_SetConfig+0x23c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d022      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a2c      	ldr	r2, [pc, #176]	; (8008028 <DMA_SetConfig+0x240>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d01d      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a2a      	ldr	r2, [pc, #168]	; (800802c <DMA_SetConfig+0x244>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d018      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a29      	ldr	r2, [pc, #164]	; (8008030 <DMA_SetConfig+0x248>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d013      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a27      	ldr	r2, [pc, #156]	; (8008034 <DMA_SetConfig+0x24c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d00e      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a26      	ldr	r2, [pc, #152]	; (8008038 <DMA_SetConfig+0x250>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d009      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a24      	ldr	r2, [pc, #144]	; (800803c <DMA_SetConfig+0x254>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d004      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a23      	ldr	r2, [pc, #140]	; (8008040 <DMA_SetConfig+0x258>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d101      	bne.n	8007fbc <DMA_SetConfig+0x1d4>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e000      	b.n	8007fbe <DMA_SetConfig+0x1d6>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d059      	beq.n	8008076 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc6:	f003 031f 	and.w	r3, r3, #31
 8007fca:	223f      	movs	r2, #63	; 0x3f
 8007fcc:	409a      	lsls	r2, r3
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007fe0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	2b40      	cmp	r3, #64	; 0x40
 8007ff0:	d138      	bne.n	8008064 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008002:	e086      	b.n	8008112 <DMA_SetConfig+0x32a>
 8008004:	40020010 	.word	0x40020010
 8008008:	40020028 	.word	0x40020028
 800800c:	40020040 	.word	0x40020040
 8008010:	40020058 	.word	0x40020058
 8008014:	40020070 	.word	0x40020070
 8008018:	40020088 	.word	0x40020088
 800801c:	400200a0 	.word	0x400200a0
 8008020:	400200b8 	.word	0x400200b8
 8008024:	40020410 	.word	0x40020410
 8008028:	40020428 	.word	0x40020428
 800802c:	40020440 	.word	0x40020440
 8008030:	40020458 	.word	0x40020458
 8008034:	40020470 	.word	0x40020470
 8008038:	40020488 	.word	0x40020488
 800803c:	400204a0 	.word	0x400204a0
 8008040:	400204b8 	.word	0x400204b8
 8008044:	58025408 	.word	0x58025408
 8008048:	5802541c 	.word	0x5802541c
 800804c:	58025430 	.word	0x58025430
 8008050:	58025444 	.word	0x58025444
 8008054:	58025458 	.word	0x58025458
 8008058:	5802546c 	.word	0x5802546c
 800805c:	58025480 	.word	0x58025480
 8008060:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	60da      	str	r2, [r3, #12]
}
 8008074:	e04d      	b.n	8008112 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a29      	ldr	r2, [pc, #164]	; (8008120 <DMA_SetConfig+0x338>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d022      	beq.n	80080c6 <DMA_SetConfig+0x2de>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a27      	ldr	r2, [pc, #156]	; (8008124 <DMA_SetConfig+0x33c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d01d      	beq.n	80080c6 <DMA_SetConfig+0x2de>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a26      	ldr	r2, [pc, #152]	; (8008128 <DMA_SetConfig+0x340>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d018      	beq.n	80080c6 <DMA_SetConfig+0x2de>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a24      	ldr	r2, [pc, #144]	; (800812c <DMA_SetConfig+0x344>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d013      	beq.n	80080c6 <DMA_SetConfig+0x2de>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a23      	ldr	r2, [pc, #140]	; (8008130 <DMA_SetConfig+0x348>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d00e      	beq.n	80080c6 <DMA_SetConfig+0x2de>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a21      	ldr	r2, [pc, #132]	; (8008134 <DMA_SetConfig+0x34c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d009      	beq.n	80080c6 <DMA_SetConfig+0x2de>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a20      	ldr	r2, [pc, #128]	; (8008138 <DMA_SetConfig+0x350>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d004      	beq.n	80080c6 <DMA_SetConfig+0x2de>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a1e      	ldr	r2, [pc, #120]	; (800813c <DMA_SetConfig+0x354>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d101      	bne.n	80080ca <DMA_SetConfig+0x2e2>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <DMA_SetConfig+0x2e4>
 80080ca:	2300      	movs	r3, #0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d020      	beq.n	8008112 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d4:	f003 031f 	and.w	r3, r3, #31
 80080d8:	2201      	movs	r2, #1
 80080da:	409a      	lsls	r2, r3
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	2b40      	cmp	r3, #64	; 0x40
 80080ee:	d108      	bne.n	8008102 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	60da      	str	r2, [r3, #12]
}
 8008100:	e007      	b.n	8008112 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	60da      	str	r2, [r3, #12]
}
 8008112:	bf00      	nop
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	58025408 	.word	0x58025408
 8008124:	5802541c 	.word	0x5802541c
 8008128:	58025430 	.word	0x58025430
 800812c:	58025444 	.word	0x58025444
 8008130:	58025458 	.word	0x58025458
 8008134:	5802546c 	.word	0x5802546c
 8008138:	58025480 	.word	0x58025480
 800813c:	58025494 	.word	0x58025494

08008140 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a42      	ldr	r2, [pc, #264]	; (8008258 <DMA_CalcBaseAndBitshift+0x118>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d04a      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a41      	ldr	r2, [pc, #260]	; (800825c <DMA_CalcBaseAndBitshift+0x11c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d045      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a3f      	ldr	r2, [pc, #252]	; (8008260 <DMA_CalcBaseAndBitshift+0x120>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d040      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a3e      	ldr	r2, [pc, #248]	; (8008264 <DMA_CalcBaseAndBitshift+0x124>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d03b      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a3c      	ldr	r2, [pc, #240]	; (8008268 <DMA_CalcBaseAndBitshift+0x128>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d036      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a3b      	ldr	r2, [pc, #236]	; (800826c <DMA_CalcBaseAndBitshift+0x12c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d031      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a39      	ldr	r2, [pc, #228]	; (8008270 <DMA_CalcBaseAndBitshift+0x130>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d02c      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a38      	ldr	r2, [pc, #224]	; (8008274 <DMA_CalcBaseAndBitshift+0x134>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d027      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a36      	ldr	r2, [pc, #216]	; (8008278 <DMA_CalcBaseAndBitshift+0x138>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d022      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a35      	ldr	r2, [pc, #212]	; (800827c <DMA_CalcBaseAndBitshift+0x13c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d01d      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a33      	ldr	r2, [pc, #204]	; (8008280 <DMA_CalcBaseAndBitshift+0x140>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d018      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a32      	ldr	r2, [pc, #200]	; (8008284 <DMA_CalcBaseAndBitshift+0x144>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d013      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a30      	ldr	r2, [pc, #192]	; (8008288 <DMA_CalcBaseAndBitshift+0x148>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d00e      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a2f      	ldr	r2, [pc, #188]	; (800828c <DMA_CalcBaseAndBitshift+0x14c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d009      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a2d      	ldr	r2, [pc, #180]	; (8008290 <DMA_CalcBaseAndBitshift+0x150>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d004      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a2c      	ldr	r2, [pc, #176]	; (8008294 <DMA_CalcBaseAndBitshift+0x154>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d101      	bne.n	80081ec <DMA_CalcBaseAndBitshift+0xac>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e000      	b.n	80081ee <DMA_CalcBaseAndBitshift+0xae>
 80081ec:	2300      	movs	r3, #0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d024      	beq.n	800823c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	3b10      	subs	r3, #16
 80081fa:	4a27      	ldr	r2, [pc, #156]	; (8008298 <DMA_CalcBaseAndBitshift+0x158>)
 80081fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008200:	091b      	lsrs	r3, r3, #4
 8008202:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f003 0307 	and.w	r3, r3, #7
 800820a:	4a24      	ldr	r2, [pc, #144]	; (800829c <DMA_CalcBaseAndBitshift+0x15c>)
 800820c:	5cd3      	ldrb	r3, [r2, r3]
 800820e:	461a      	mov	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2b03      	cmp	r3, #3
 8008218:	d908      	bls.n	800822c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	4b1f      	ldr	r3, [pc, #124]	; (80082a0 <DMA_CalcBaseAndBitshift+0x160>)
 8008222:	4013      	ands	r3, r2
 8008224:	1d1a      	adds	r2, r3, #4
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	659a      	str	r2, [r3, #88]	; 0x58
 800822a:	e00d      	b.n	8008248 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	461a      	mov	r2, r3
 8008232:	4b1b      	ldr	r3, [pc, #108]	; (80082a0 <DMA_CalcBaseAndBitshift+0x160>)
 8008234:	4013      	ands	r3, r2
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	6593      	str	r3, [r2, #88]	; 0x58
 800823a:	e005      	b.n	8008248 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	40020010 	.word	0x40020010
 800825c:	40020028 	.word	0x40020028
 8008260:	40020040 	.word	0x40020040
 8008264:	40020058 	.word	0x40020058
 8008268:	40020070 	.word	0x40020070
 800826c:	40020088 	.word	0x40020088
 8008270:	400200a0 	.word	0x400200a0
 8008274:	400200b8 	.word	0x400200b8
 8008278:	40020410 	.word	0x40020410
 800827c:	40020428 	.word	0x40020428
 8008280:	40020440 	.word	0x40020440
 8008284:	40020458 	.word	0x40020458
 8008288:	40020470 	.word	0x40020470
 800828c:	40020488 	.word	0x40020488
 8008290:	400204a0 	.word	0x400204a0
 8008294:	400204b8 	.word	0x400204b8
 8008298:	aaaaaaab 	.word	0xaaaaaaab
 800829c:	08020400 	.word	0x08020400
 80082a0:	fffffc00 	.word	0xfffffc00

080082a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d120      	bne.n	80082fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d858      	bhi.n	8008372 <DMA_CheckFifoParam+0xce>
 80082c0:	a201      	add	r2, pc, #4	; (adr r2, 80082c8 <DMA_CheckFifoParam+0x24>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080082d9 	.word	0x080082d9
 80082cc:	080082eb 	.word	0x080082eb
 80082d0:	080082d9 	.word	0x080082d9
 80082d4:	08008373 	.word	0x08008373
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d048      	beq.n	8008376 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082e8:	e045      	b.n	8008376 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082f2:	d142      	bne.n	800837a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082f8:	e03f      	b.n	800837a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008302:	d123      	bne.n	800834c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	2b03      	cmp	r3, #3
 800830a:	d838      	bhi.n	800837e <DMA_CheckFifoParam+0xda>
 800830c:	a201      	add	r2, pc, #4	; (adr r2, 8008314 <DMA_CheckFifoParam+0x70>)
 800830e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008312:	bf00      	nop
 8008314:	08008325 	.word	0x08008325
 8008318:	0800832b 	.word	0x0800832b
 800831c:	08008325 	.word	0x08008325
 8008320:	0800833d 	.word	0x0800833d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	73fb      	strb	r3, [r7, #15]
        break;
 8008328:	e030      	b.n	800838c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d025      	beq.n	8008382 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800833a:	e022      	b.n	8008382 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008344:	d11f      	bne.n	8008386 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800834a:	e01c      	b.n	8008386 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008350:	2b02      	cmp	r3, #2
 8008352:	d902      	bls.n	800835a <DMA_CheckFifoParam+0xb6>
 8008354:	2b03      	cmp	r3, #3
 8008356:	d003      	beq.n	8008360 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008358:	e018      	b.n	800838c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	73fb      	strb	r3, [r7, #15]
        break;
 800835e:	e015      	b.n	800838c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00e      	beq.n	800838a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	73fb      	strb	r3, [r7, #15]
    break;
 8008370:	e00b      	b.n	800838a <DMA_CheckFifoParam+0xe6>
        break;
 8008372:	bf00      	nop
 8008374:	e00a      	b.n	800838c <DMA_CheckFifoParam+0xe8>
        break;
 8008376:	bf00      	nop
 8008378:	e008      	b.n	800838c <DMA_CheckFifoParam+0xe8>
        break;
 800837a:	bf00      	nop
 800837c:	e006      	b.n	800838c <DMA_CheckFifoParam+0xe8>
        break;
 800837e:	bf00      	nop
 8008380:	e004      	b.n	800838c <DMA_CheckFifoParam+0xe8>
        break;
 8008382:	bf00      	nop
 8008384:	e002      	b.n	800838c <DMA_CheckFifoParam+0xe8>
        break;
 8008386:	bf00      	nop
 8008388:	e000      	b.n	800838c <DMA_CheckFifoParam+0xe8>
    break;
 800838a:	bf00      	nop
    }
  }

  return status;
 800838c:	7bfb      	ldrb	r3, [r7, #15]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop

0800839c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a38      	ldr	r2, [pc, #224]	; (8008490 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d022      	beq.n	80083fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a36      	ldr	r2, [pc, #216]	; (8008494 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d01d      	beq.n	80083fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a35      	ldr	r2, [pc, #212]	; (8008498 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d018      	beq.n	80083fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a33      	ldr	r2, [pc, #204]	; (800849c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d013      	beq.n	80083fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a32      	ldr	r2, [pc, #200]	; (80084a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d00e      	beq.n	80083fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a30      	ldr	r2, [pc, #192]	; (80084a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d009      	beq.n	80083fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a2f      	ldr	r2, [pc, #188]	; (80084a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d004      	beq.n	80083fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a2d      	ldr	r2, [pc, #180]	; (80084ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d101      	bne.n	80083fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e000      	b.n	8008400 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80083fe:	2300      	movs	r3, #0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d01a      	beq.n	800843a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	b2db      	uxtb	r3, r3
 800840a:	3b08      	subs	r3, #8
 800840c:	4a28      	ldr	r2, [pc, #160]	; (80084b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800840e:	fba2 2303 	umull	r2, r3, r2, r3
 8008412:	091b      	lsrs	r3, r3, #4
 8008414:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4b26      	ldr	r3, [pc, #152]	; (80084b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	461a      	mov	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a24      	ldr	r2, [pc, #144]	; (80084b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008428:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f003 031f 	and.w	r3, r3, #31
 8008430:	2201      	movs	r2, #1
 8008432:	409a      	lsls	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008438:	e024      	b.n	8008484 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	b2db      	uxtb	r3, r3
 8008440:	3b10      	subs	r3, #16
 8008442:	4a1e      	ldr	r2, [pc, #120]	; (80084bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008444:	fba2 2303 	umull	r2, r3, r2, r3
 8008448:	091b      	lsrs	r3, r3, #4
 800844a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4a1c      	ldr	r2, [pc, #112]	; (80084c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d806      	bhi.n	8008462 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	4a1b      	ldr	r2, [pc, #108]	; (80084c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d902      	bls.n	8008462 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	3308      	adds	r3, #8
 8008460:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4b18      	ldr	r3, [pc, #96]	; (80084c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008466:	4413      	add	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	461a      	mov	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a16      	ldr	r2, [pc, #88]	; (80084cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008474:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f003 031f 	and.w	r3, r3, #31
 800847c:	2201      	movs	r2, #1
 800847e:	409a      	lsls	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008484:	bf00      	nop
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	58025408 	.word	0x58025408
 8008494:	5802541c 	.word	0x5802541c
 8008498:	58025430 	.word	0x58025430
 800849c:	58025444 	.word	0x58025444
 80084a0:	58025458 	.word	0x58025458
 80084a4:	5802546c 	.word	0x5802546c
 80084a8:	58025480 	.word	0x58025480
 80084ac:	58025494 	.word	0x58025494
 80084b0:	cccccccd 	.word	0xcccccccd
 80084b4:	16009600 	.word	0x16009600
 80084b8:	58025880 	.word	0x58025880
 80084bc:	aaaaaaab 	.word	0xaaaaaaab
 80084c0:	400204b8 	.word	0x400204b8
 80084c4:	4002040f 	.word	0x4002040f
 80084c8:	10008200 	.word	0x10008200
 80084cc:	40020880 	.word	0x40020880

080084d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d04a      	beq.n	800857c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2b08      	cmp	r3, #8
 80084ea:	d847      	bhi.n	800857c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a25      	ldr	r2, [pc, #148]	; (8008588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d022      	beq.n	800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a24      	ldr	r2, [pc, #144]	; (800858c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d01d      	beq.n	800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a22      	ldr	r2, [pc, #136]	; (8008590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d018      	beq.n	800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a21      	ldr	r2, [pc, #132]	; (8008594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d013      	beq.n	800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a1f      	ldr	r2, [pc, #124]	; (8008598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d00e      	beq.n	800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a1e      	ldr	r2, [pc, #120]	; (800859c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d009      	beq.n	800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a1c      	ldr	r2, [pc, #112]	; (80085a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d004      	beq.n	800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a1b      	ldr	r2, [pc, #108]	; (80085a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d101      	bne.n	8008540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800853c:	2301      	movs	r3, #1
 800853e:	e000      	b.n	8008542 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008540:	2300      	movs	r3, #0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00a      	beq.n	800855c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	4b17      	ldr	r3, [pc, #92]	; (80085a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800854a:	4413      	add	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	461a      	mov	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a15      	ldr	r2, [pc, #84]	; (80085ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008558:	671a      	str	r2, [r3, #112]	; 0x70
 800855a:	e009      	b.n	8008570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	4b14      	ldr	r3, [pc, #80]	; (80085b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008560:	4413      	add	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	461a      	mov	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a11      	ldr	r2, [pc, #68]	; (80085b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800856e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	3b01      	subs	r3, #1
 8008574:	2201      	movs	r2, #1
 8008576:	409a      	lsls	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800857c:	bf00      	nop
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	58025408 	.word	0x58025408
 800858c:	5802541c 	.word	0x5802541c
 8008590:	58025430 	.word	0x58025430
 8008594:	58025444 	.word	0x58025444
 8008598:	58025458 	.word	0x58025458
 800859c:	5802546c 	.word	0x5802546c
 80085a0:	58025480 	.word	0x58025480
 80085a4:	58025494 	.word	0x58025494
 80085a8:	1600963f 	.word	0x1600963f
 80085ac:	58025940 	.word	0x58025940
 80085b0:	1000823f 	.word	0x1000823f
 80085b4:	40020940 	.word	0x40020940

080085b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b098      	sub	sp, #96	; 0x60
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80085c0:	4a84      	ldr	r2, [pc, #528]	; (80087d4 <HAL_FDCAN_Init+0x21c>)
 80085c2:	f107 030c 	add.w	r3, r7, #12
 80085c6:	4611      	mov	r1, r2
 80085c8:	224c      	movs	r2, #76	; 0x4c
 80085ca:	4618      	mov	r0, r3
 80085cc:	f013 fe85 	bl	801c2da <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e1c6      	b.n	8008968 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a7e      	ldr	r2, [pc, #504]	; (80087d8 <HAL_FDCAN_Init+0x220>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d106      	bne.n	80085f2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80085ec:	461a      	mov	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d106      	bne.n	800860c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7fa fd76 	bl	80030f8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	699a      	ldr	r2, [r3, #24]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f022 0210 	bic.w	r2, r2, #16
 800861a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800861c:	f7fb fde6 	bl	80041ec <HAL_GetTick>
 8008620:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008622:	e014      	b.n	800864e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008624:	f7fb fde2 	bl	80041ec <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	2b0a      	cmp	r3, #10
 8008630:	d90d      	bls.n	800864e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008638:	f043 0201 	orr.w	r2, r3, #1
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2203      	movs	r2, #3
 8008646:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e18c      	b.n	8008968 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	f003 0308 	and.w	r3, r3, #8
 8008658:	2b08      	cmp	r3, #8
 800865a:	d0e3      	beq.n	8008624 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	699a      	ldr	r2, [r3, #24]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f042 0201 	orr.w	r2, r2, #1
 800866a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800866c:	f7fb fdbe 	bl	80041ec <HAL_GetTick>
 8008670:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008672:	e014      	b.n	800869e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008674:	f7fb fdba 	bl	80041ec <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b0a      	cmp	r3, #10
 8008680:	d90d      	bls.n	800869e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008688:	f043 0201 	orr.w	r2, r3, #1
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2203      	movs	r2, #3
 8008696:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e164      	b.n	8008968 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0e3      	beq.n	8008674 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	699a      	ldr	r2, [r3, #24]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f042 0202 	orr.w	r2, r2, #2
 80086ba:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	7c1b      	ldrb	r3, [r3, #16]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d108      	bne.n	80086d6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	699a      	ldr	r2, [r3, #24]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086d2:	619a      	str	r2, [r3, #24]
 80086d4:	e007      	b.n	80086e6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	699a      	ldr	r2, [r3, #24]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	7c5b      	ldrb	r3, [r3, #17]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d108      	bne.n	8008700 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	699a      	ldr	r2, [r3, #24]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086fc:	619a      	str	r2, [r3, #24]
 80086fe:	e007      	b.n	8008710 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	699a      	ldr	r2, [r3, #24]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800870e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	7c9b      	ldrb	r3, [r3, #18]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d108      	bne.n	800872a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	699a      	ldr	r2, [r3, #24]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008726:	619a      	str	r2, [r3, #24]
 8008728:	e007      	b.n	800873a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	699a      	ldr	r2, [r3, #24]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008738:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	689a      	ldr	r2, [r3, #8]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	699a      	ldr	r2, [r3, #24]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800875e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	691a      	ldr	r2, [r3, #16]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f022 0210 	bic.w	r2, r2, #16
 800876e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d108      	bne.n	800878a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	699a      	ldr	r2, [r3, #24]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0204 	orr.w	r2, r2, #4
 8008786:	619a      	str	r2, [r3, #24]
 8008788:	e030      	b.n	80087ec <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d02c      	beq.n	80087ec <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	2b02      	cmp	r3, #2
 8008798:	d020      	beq.n	80087dc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	699a      	ldr	r2, [r3, #24]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80087a8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	691a      	ldr	r2, [r3, #16]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f042 0210 	orr.w	r2, r2, #16
 80087b8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d114      	bne.n	80087ec <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	699a      	ldr	r2, [r3, #24]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f042 0220 	orr.w	r2, r2, #32
 80087d0:	619a      	str	r2, [r3, #24]
 80087d2:	e00b      	b.n	80087ec <HAL_FDCAN_Init+0x234>
 80087d4:	080202a4 	.word	0x080202a4
 80087d8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	699a      	ldr	r2, [r3, #24]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f042 0220 	orr.w	r2, r2, #32
 80087ea:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	3b01      	subs	r3, #1
 80087fa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087fc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008804:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	3b01      	subs	r3, #1
 800880e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008814:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008816:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008820:	d115      	bne.n	800884e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008826:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	3b01      	subs	r3, #1
 800882e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008830:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008836:	3b01      	subs	r3, #1
 8008838:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800883a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008842:	3b01      	subs	r3, #1
 8008844:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800884a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800884c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008874:	4413      	add	r3, r2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d011      	beq.n	800889e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008882:	f023 0107 	bic.w	r1, r3, #7
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	3360      	adds	r3, #96	; 0x60
 800888e:	443b      	add	r3, r7
 8008890:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d011      	beq.n	80088ca <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80088ae:	f023 0107 	bic.w	r1, r3, #7
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	3360      	adds	r3, #96	; 0x60
 80088ba:	443b      	add	r3, r7
 80088bc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	430a      	orrs	r2, r1
 80088c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d012      	beq.n	80088f8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80088da:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	3360      	adds	r3, #96	; 0x60
 80088e6:	443b      	add	r3, r7
 80088e8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80088ec:	011a      	lsls	r2, r3, #4
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	430a      	orrs	r2, r1
 80088f4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d012      	beq.n	8008926 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008908:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	3360      	adds	r3, #96	; 0x60
 8008914:	443b      	add	r3, r7
 8008916:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800891a:	021a      	lsls	r2, r3, #8
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	430a      	orrs	r2, r1
 8008922:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a11      	ldr	r2, [pc, #68]	; (8008970 <HAL_FDCAN_Init+0x3b8>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d107      	bne.n	8008940 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	689a      	ldr	r2, [r3, #8]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f022 0203 	bic.w	r2, r2, #3
 800893e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f80b 	bl	8008974 <FDCAN_CalcultateRamBlockAddresses>
 800895e:	4603      	mov	r3, r0
 8008960:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8008964:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8008968:	4618      	mov	r0, r3
 800896a:	3760      	adds	r7, #96	; 0x60
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	4000a000 	.word	0x4000a000

08008974 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008980:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800898a:	4ba7      	ldr	r3, [pc, #668]	; (8008c28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800898c:	4013      	ands	r3, r2
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	0091      	lsls	r1, r2, #2
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	6812      	ldr	r2, [r2, #0]
 8008996:	430b      	orrs	r3, r1
 8008998:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089a4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ac:	041a      	lsls	r2, r3, #16
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	4413      	add	r3, r2
 80089c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80089ca:	4b97      	ldr	r3, [pc, #604]	; (8008c28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80089cc:	4013      	ands	r3, r2
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	0091      	lsls	r1, r2, #2
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	6812      	ldr	r2, [r2, #0]
 80089d6:	430b      	orrs	r3, r1
 80089d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089e4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ec:	041a      	lsls	r2, r3, #16
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089fc:	005b      	lsls	r3, r3, #1
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	4413      	add	r3, r2
 8008a02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008a0c:	4b86      	ldr	r3, [pc, #536]	; (8008c28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a0e:	4013      	ands	r3, r2
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	0091      	lsls	r1, r2, #2
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	6812      	ldr	r2, [r2, #0]
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008a26:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	041a      	lsls	r2, r3, #16
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	430a      	orrs	r2, r1
 8008a36:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008a42:	fb02 f303 	mul.w	r3, r2, r3
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	4413      	add	r3, r2
 8008a4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008a54:	4b74      	ldr	r3, [pc, #464]	; (8008c28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a56:	4013      	ands	r3, r2
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	0091      	lsls	r1, r2, #2
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	6812      	ldr	r2, [r2, #0]
 8008a60:	430b      	orrs	r3, r1
 8008a62:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a6e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a76:	041a      	lsls	r2, r3, #16
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008a8a:	fb02 f303 	mul.w	r3, r2, r3
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	4413      	add	r3, r2
 8008a92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008a9c:	4b62      	ldr	r3, [pc, #392]	; (8008c28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	0091      	lsls	r1, r2, #2
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	6812      	ldr	r2, [r2, #0]
 8008aa8:	430b      	orrs	r3, r1
 8008aaa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008ab6:	fb02 f303 	mul.w	r3, r2, r3
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	4413      	add	r3, r2
 8008abe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008ac8:	4b57      	ldr	r3, [pc, #348]	; (8008c28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008aca:	4013      	ands	r3, r2
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	0091      	lsls	r1, r2, #2
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	6812      	ldr	r2, [r2, #0]
 8008ad4:	430b      	orrs	r3, r1
 8008ad6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ae2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aea:	041a      	lsls	r2, r3, #16
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	430a      	orrs	r2, r1
 8008af2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	68ba      	ldr	r2, [r7, #8]
 8008afe:	4413      	add	r3, r2
 8008b00:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008b0a:	4b47      	ldr	r3, [pc, #284]	; (8008c28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	0091      	lsls	r1, r2, #2
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	6812      	ldr	r2, [r2, #0]
 8008b16:	430b      	orrs	r3, r1
 8008b18:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008b24:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b2c:	041a      	lsls	r2, r3, #16
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008b40:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b48:	061a      	lsls	r2, r3, #24
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b58:	4b34      	ldr	r3, [pc, #208]	; (8008c2c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008b5a:	4413      	add	r3, r2
 8008b5c:	009a      	lsls	r2, r3, #2
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	441a      	add	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b7a:	00db      	lsls	r3, r3, #3
 8008b7c:	441a      	add	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8a:	6879      	ldr	r1, [r7, #4]
 8008b8c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8008b8e:	fb01 f303 	mul.w	r3, r1, r3
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	441a      	add	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8008ba6:	fb01 f303 	mul.w	r3, r1, r3
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	441a      	add	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8008bbe:	fb01 f303 	mul.w	r3, r1, r3
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	441a      	add	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd6:	00db      	lsls	r3, r3, #3
 8008bd8:	441a      	add	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bea:	6879      	ldr	r1, [r7, #4]
 8008bec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008bee:	fb01 f303 	mul.w	r3, r1, r3
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	441a      	add	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c06:	6879      	ldr	r1, [r7, #4]
 8008c08:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008c0a:	fb01 f303 	mul.w	r3, r1, r3
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	441a      	add	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c1e:	4a04      	ldr	r2, [pc, #16]	; (8008c30 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d915      	bls.n	8008c50 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008c24:	e006      	b.n	8008c34 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008c26:	bf00      	nop
 8008c28:	ffff0003 	.word	0xffff0003
 8008c2c:	10002b00 	.word	0x10002b00
 8008c30:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c3a:	f043 0220 	orr.w	r2, r3, #32
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2203      	movs	r2, #3
 8008c48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e010      	b.n	8008c72 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c54:	60fb      	str	r3, [r7, #12]
 8008c56:	e005      	b.n	8008c64 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	3304      	adds	r3, #4
 8008c62:	60fb      	str	r3, [r7, #12]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d3f3      	bcc.n	8008c58 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop

08008c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b089      	sub	sp, #36	; 0x24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c8e:	4b86      	ldr	r3, [pc, #536]	; (8008ea8 <HAL_GPIO_Init+0x228>)
 8008c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c92:	e18c      	b.n	8008fae <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	2101      	movs	r1, #1
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 817e 	beq.w	8008fa8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f003 0303 	and.w	r3, r3, #3
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d005      	beq.n	8008cc4 <HAL_GPIO_Init+0x44>
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	f003 0303 	and.w	r3, r3, #3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d130      	bne.n	8008d26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	005b      	lsls	r3, r3, #1
 8008cce:	2203      	movs	r2, #3
 8008cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd4:	43db      	mvns	r3, r3
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	68da      	ldr	r2, [r3, #12]
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	005b      	lsls	r3, r3, #1
 8008ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce8:	69ba      	ldr	r2, [r7, #24]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008d02:	43db      	mvns	r3, r3
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	4013      	ands	r3, r2
 8008d08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	091b      	lsrs	r3, r3, #4
 8008d10:	f003 0201 	and.w	r2, r3, #1
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f003 0303 	and.w	r3, r3, #3
 8008d2e:	2b03      	cmp	r3, #3
 8008d30:	d017      	beq.n	8008d62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	2203      	movs	r2, #3
 8008d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d42:	43db      	mvns	r3, r3
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	4013      	ands	r3, r2
 8008d48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	689a      	ldr	r2, [r3, #8]
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	005b      	lsls	r3, r3, #1
 8008d52:	fa02 f303 	lsl.w	r3, r2, r3
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f003 0303 	and.w	r3, r3, #3
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d123      	bne.n	8008db6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	08da      	lsrs	r2, r3, #3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	3208      	adds	r2, #8
 8008d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	f003 0307 	and.w	r3, r3, #7
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	220f      	movs	r2, #15
 8008d86:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8a:	43db      	mvns	r3, r3
 8008d8c:	69ba      	ldr	r2, [r7, #24]
 8008d8e:	4013      	ands	r3, r2
 8008d90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	691a      	ldr	r2, [r3, #16]
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	f003 0307 	and.w	r3, r3, #7
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	08da      	lsrs	r2, r3, #3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3208      	adds	r2, #8
 8008db0:	69b9      	ldr	r1, [r7, #24]
 8008db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	2203      	movs	r2, #3
 8008dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc6:	43db      	mvns	r3, r3
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	f003 0203 	and.w	r2, r3, #3
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	005b      	lsls	r3, r3, #1
 8008dda:	fa02 f303 	lsl.w	r3, r2, r3
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 80d8 	beq.w	8008fa8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008df8:	4b2c      	ldr	r3, [pc, #176]	; (8008eac <HAL_GPIO_Init+0x22c>)
 8008dfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008dfe:	4a2b      	ldr	r2, [pc, #172]	; (8008eac <HAL_GPIO_Init+0x22c>)
 8008e00:	f043 0302 	orr.w	r3, r3, #2
 8008e04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008e08:	4b28      	ldr	r3, [pc, #160]	; (8008eac <HAL_GPIO_Init+0x22c>)
 8008e0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e0e:	f003 0302 	and.w	r3, r3, #2
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e16:	4a26      	ldr	r2, [pc, #152]	; (8008eb0 <HAL_GPIO_Init+0x230>)
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	089b      	lsrs	r3, r3, #2
 8008e1c:	3302      	adds	r3, #2
 8008e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	f003 0303 	and.w	r3, r3, #3
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	220f      	movs	r2, #15
 8008e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e32:	43db      	mvns	r3, r3
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	4013      	ands	r3, r2
 8008e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a1d      	ldr	r2, [pc, #116]	; (8008eb4 <HAL_GPIO_Init+0x234>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d04a      	beq.n	8008ed8 <HAL_GPIO_Init+0x258>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a1c      	ldr	r2, [pc, #112]	; (8008eb8 <HAL_GPIO_Init+0x238>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d02b      	beq.n	8008ea2 <HAL_GPIO_Init+0x222>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a1b      	ldr	r2, [pc, #108]	; (8008ebc <HAL_GPIO_Init+0x23c>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d025      	beq.n	8008e9e <HAL_GPIO_Init+0x21e>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a1a      	ldr	r2, [pc, #104]	; (8008ec0 <HAL_GPIO_Init+0x240>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d01f      	beq.n	8008e9a <HAL_GPIO_Init+0x21a>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a19      	ldr	r2, [pc, #100]	; (8008ec4 <HAL_GPIO_Init+0x244>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d019      	beq.n	8008e96 <HAL_GPIO_Init+0x216>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a18      	ldr	r2, [pc, #96]	; (8008ec8 <HAL_GPIO_Init+0x248>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d013      	beq.n	8008e92 <HAL_GPIO_Init+0x212>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a17      	ldr	r2, [pc, #92]	; (8008ecc <HAL_GPIO_Init+0x24c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d00d      	beq.n	8008e8e <HAL_GPIO_Init+0x20e>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a16      	ldr	r2, [pc, #88]	; (8008ed0 <HAL_GPIO_Init+0x250>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d007      	beq.n	8008e8a <HAL_GPIO_Init+0x20a>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a15      	ldr	r2, [pc, #84]	; (8008ed4 <HAL_GPIO_Init+0x254>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d101      	bne.n	8008e86 <HAL_GPIO_Init+0x206>
 8008e82:	2309      	movs	r3, #9
 8008e84:	e029      	b.n	8008eda <HAL_GPIO_Init+0x25a>
 8008e86:	230a      	movs	r3, #10
 8008e88:	e027      	b.n	8008eda <HAL_GPIO_Init+0x25a>
 8008e8a:	2307      	movs	r3, #7
 8008e8c:	e025      	b.n	8008eda <HAL_GPIO_Init+0x25a>
 8008e8e:	2306      	movs	r3, #6
 8008e90:	e023      	b.n	8008eda <HAL_GPIO_Init+0x25a>
 8008e92:	2305      	movs	r3, #5
 8008e94:	e021      	b.n	8008eda <HAL_GPIO_Init+0x25a>
 8008e96:	2304      	movs	r3, #4
 8008e98:	e01f      	b.n	8008eda <HAL_GPIO_Init+0x25a>
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e01d      	b.n	8008eda <HAL_GPIO_Init+0x25a>
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	e01b      	b.n	8008eda <HAL_GPIO_Init+0x25a>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e019      	b.n	8008eda <HAL_GPIO_Init+0x25a>
 8008ea6:	bf00      	nop
 8008ea8:	58000080 	.word	0x58000080
 8008eac:	58024400 	.word	0x58024400
 8008eb0:	58000400 	.word	0x58000400
 8008eb4:	58020000 	.word	0x58020000
 8008eb8:	58020400 	.word	0x58020400
 8008ebc:	58020800 	.word	0x58020800
 8008ec0:	58020c00 	.word	0x58020c00
 8008ec4:	58021000 	.word	0x58021000
 8008ec8:	58021400 	.word	0x58021400
 8008ecc:	58021800 	.word	0x58021800
 8008ed0:	58021c00 	.word	0x58021c00
 8008ed4:	58022400 	.word	0x58022400
 8008ed8:	2300      	movs	r3, #0
 8008eda:	69fa      	ldr	r2, [r7, #28]
 8008edc:	f002 0203 	and.w	r2, r2, #3
 8008ee0:	0092      	lsls	r2, r2, #2
 8008ee2:	4093      	lsls	r3, r2
 8008ee4:	69ba      	ldr	r2, [r7, #24]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008eea:	4938      	ldr	r1, [pc, #224]	; (8008fcc <HAL_GPIO_Init+0x34c>)
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	089b      	lsrs	r3, r3, #2
 8008ef0:	3302      	adds	r3, #2
 8008ef2:	69ba      	ldr	r2, [r7, #24]
 8008ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	43db      	mvns	r3, r3
 8008f04:	69ba      	ldr	r2, [r7, #24]
 8008f06:	4013      	ands	r3, r2
 8008f08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008f16:	69ba      	ldr	r2, [r7, #24]
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008f1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	43db      	mvns	r3, r3
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	4013      	ands	r3, r2
 8008f36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d003      	beq.n	8008f4c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	43db      	mvns	r3, r3
 8008f5e:	69ba      	ldr	r2, [r7, #24]
 8008f60:	4013      	ands	r3, r2
 8008f62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d003      	beq.n	8008f78 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008f70:	69ba      	ldr	r2, [r7, #24]
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	43db      	mvns	r3, r3
 8008f88:	69ba      	ldr	r2, [r7, #24]
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008f9a:	69ba      	ldr	r2, [r7, #24]
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	69ba      	ldr	r2, [r7, #24]
 8008fa6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	3301      	adds	r3, #1
 8008fac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f47f ae6b 	bne.w	8008c94 <HAL_GPIO_Init+0x14>
  }
}
 8008fbe:	bf00      	nop
 8008fc0:	bf00      	nop
 8008fc2:	3724      	adds	r7, #36	; 0x24
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	58000400 	.word	0x58000400

08008fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	691a      	ldr	r2, [r3, #16]
 8008fe0:	887b      	ldrh	r3, [r7, #2]
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	73fb      	strb	r3, [r7, #15]
 8008fec:	e001      	b.n	8008ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	460b      	mov	r3, r1
 800900a:	807b      	strh	r3, [r7, #2]
 800900c:	4613      	mov	r3, r2
 800900e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009010:	787b      	ldrb	r3, [r7, #1]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009016:	887a      	ldrh	r2, [r7, #2]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800901c:	e003      	b.n	8009026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800901e:	887b      	ldrh	r3, [r7, #2]
 8009020:	041a      	lsls	r2, r3, #16
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	619a      	str	r2, [r3, #24]
}
 8009026:	bf00      	nop
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
	...

08009034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e07f      	b.n	8009146 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d106      	bne.n	8009060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7fa f8b4 	bl	80031c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2224      	movs	r2, #36	; 0x24
 8009064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f022 0201 	bic.w	r2, r2, #1
 8009076:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009084:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	689a      	ldr	r2, [r3, #8]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009094:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d107      	bne.n	80090ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	689a      	ldr	r2, [r3, #8]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090aa:	609a      	str	r2, [r3, #8]
 80090ac:	e006      	b.n	80090bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	689a      	ldr	r2, [r3, #8]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80090ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d104      	bne.n	80090ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6859      	ldr	r1, [r3, #4]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	4b1d      	ldr	r3, [pc, #116]	; (8009150 <HAL_I2C_Init+0x11c>)
 80090da:	430b      	orrs	r3, r1
 80090dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68da      	ldr	r2, [r3, #12]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	691a      	ldr	r2, [r3, #16]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	430a      	orrs	r2, r1
 8009106:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	69d9      	ldr	r1, [r3, #28]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a1a      	ldr	r2, [r3, #32]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	430a      	orrs	r2, r1
 8009116:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0201 	orr.w	r2, r2, #1
 8009126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2220      	movs	r2, #32
 8009132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	02008000 	.word	0x02008000

08009154 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	68f9      	ldr	r1, [r7, #12]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	4798      	blx	r3
  }
}
 8009180:	bf00      	nop
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b20      	cmp	r3, #32
 800919c:	d138      	bne.n	8009210 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d101      	bne.n	80091ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80091a8:	2302      	movs	r3, #2
 80091aa:	e032      	b.n	8009212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2224      	movs	r2, #36	; 0x24
 80091b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f022 0201 	bic.w	r2, r2, #1
 80091ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80091da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6819      	ldr	r1, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	430a      	orrs	r2, r1
 80091ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f042 0201 	orr.w	r2, r2, #1
 80091fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2220      	movs	r2, #32
 8009200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	e000      	b.n	8009212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009210:	2302      	movs	r3, #2
  }
}
 8009212:	4618      	mov	r0, r3
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800921e:	b480      	push	{r7}
 8009220:	b085      	sub	sp, #20
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800922e:	b2db      	uxtb	r3, r3
 8009230:	2b20      	cmp	r3, #32
 8009232:	d139      	bne.n	80092a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800923e:	2302      	movs	r3, #2
 8009240:	e033      	b.n	80092aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2224      	movs	r2, #36	; 0x24
 800924e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f022 0201 	bic.w	r2, r2, #1
 8009260:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009270:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	021b      	lsls	r3, r3, #8
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	4313      	orrs	r3, r2
 800927a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f042 0201 	orr.w	r2, r2, #1
 8009292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2220      	movs	r2, #32
 8009298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	e000      	b.n	80092aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80092a8:	2302      	movs	r3, #2
  }
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80092b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092b8:	b08f      	sub	sp, #60	; 0x3c
 80092ba:	af0a      	add	r7, sp, #40	; 0x28
 80092bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e116      	b.n	80094f6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d106      	bne.n	80092e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f011 fcd4 	bl	801ac90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2203      	movs	r2, #3
 80092ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d102      	bne.n	8009302 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4618      	mov	r0, r3
 8009308:	f00a fea5 	bl	8014056 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	603b      	str	r3, [r7, #0]
 8009312:	687e      	ldr	r6, [r7, #4]
 8009314:	466d      	mov	r5, sp
 8009316:	f106 0410 	add.w	r4, r6, #16
 800931a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800931c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800931e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009322:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009326:	e885 0003 	stmia.w	r5, {r0, r1}
 800932a:	1d33      	adds	r3, r6, #4
 800932c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800932e:	6838      	ldr	r0, [r7, #0]
 8009330:	f00a fd70 	bl	8013e14 <USB_CoreInit>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d005      	beq.n	8009346 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2202      	movs	r2, #2
 800933e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e0d7      	b.n	80094f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2100      	movs	r1, #0
 800934c:	4618      	mov	r0, r3
 800934e:	f00a fe93 	bl	8014078 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]
 8009356:	e04a      	b.n	80093ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009358:	7bfa      	ldrb	r2, [r7, #15]
 800935a:	6879      	ldr	r1, [r7, #4]
 800935c:	4613      	mov	r3, r2
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	440b      	add	r3, r1
 8009366:	333d      	adds	r3, #61	; 0x3d
 8009368:	2201      	movs	r2, #1
 800936a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800936c:	7bfa      	ldrb	r2, [r7, #15]
 800936e:	6879      	ldr	r1, [r7, #4]
 8009370:	4613      	mov	r3, r2
 8009372:	00db      	lsls	r3, r3, #3
 8009374:	4413      	add	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	440b      	add	r3, r1
 800937a:	333c      	adds	r3, #60	; 0x3c
 800937c:	7bfa      	ldrb	r2, [r7, #15]
 800937e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009380:	7bfa      	ldrb	r2, [r7, #15]
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	b298      	uxth	r0, r3
 8009386:	6879      	ldr	r1, [r7, #4]
 8009388:	4613      	mov	r3, r2
 800938a:	00db      	lsls	r3, r3, #3
 800938c:	4413      	add	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	440b      	add	r3, r1
 8009392:	3356      	adds	r3, #86	; 0x56
 8009394:	4602      	mov	r2, r0
 8009396:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009398:	7bfa      	ldrb	r2, [r7, #15]
 800939a:	6879      	ldr	r1, [r7, #4]
 800939c:	4613      	mov	r3, r2
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	4413      	add	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	440b      	add	r3, r1
 80093a6:	3340      	adds	r3, #64	; 0x40
 80093a8:	2200      	movs	r2, #0
 80093aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80093ac:	7bfa      	ldrb	r2, [r7, #15]
 80093ae:	6879      	ldr	r1, [r7, #4]
 80093b0:	4613      	mov	r3, r2
 80093b2:	00db      	lsls	r3, r3, #3
 80093b4:	4413      	add	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	440b      	add	r3, r1
 80093ba:	3344      	adds	r3, #68	; 0x44
 80093bc:	2200      	movs	r2, #0
 80093be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80093c0:	7bfa      	ldrb	r2, [r7, #15]
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	4613      	mov	r3, r2
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	4413      	add	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	440b      	add	r3, r1
 80093ce:	3348      	adds	r3, #72	; 0x48
 80093d0:	2200      	movs	r2, #0
 80093d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80093d4:	7bfa      	ldrb	r2, [r7, #15]
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	4613      	mov	r3, r2
 80093da:	00db      	lsls	r3, r3, #3
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	440b      	add	r3, r1
 80093e2:	334c      	adds	r3, #76	; 0x4c
 80093e4:	2200      	movs	r2, #0
 80093e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
 80093ea:	3301      	adds	r3, #1
 80093ec:	73fb      	strb	r3, [r7, #15]
 80093ee:	7bfa      	ldrb	r2, [r7, #15]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d3af      	bcc.n	8009358 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093f8:	2300      	movs	r3, #0
 80093fa:	73fb      	strb	r3, [r7, #15]
 80093fc:	e044      	b.n	8009488 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80093fe:	7bfa      	ldrb	r2, [r7, #15]
 8009400:	6879      	ldr	r1, [r7, #4]
 8009402:	4613      	mov	r3, r2
 8009404:	00db      	lsls	r3, r3, #3
 8009406:	4413      	add	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	440b      	add	r3, r1
 800940c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009410:	2200      	movs	r2, #0
 8009412:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009414:	7bfa      	ldrb	r2, [r7, #15]
 8009416:	6879      	ldr	r1, [r7, #4]
 8009418:	4613      	mov	r3, r2
 800941a:	00db      	lsls	r3, r3, #3
 800941c:	4413      	add	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	440b      	add	r3, r1
 8009422:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009426:	7bfa      	ldrb	r2, [r7, #15]
 8009428:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800942a:	7bfa      	ldrb	r2, [r7, #15]
 800942c:	6879      	ldr	r1, [r7, #4]
 800942e:	4613      	mov	r3, r2
 8009430:	00db      	lsls	r3, r3, #3
 8009432:	4413      	add	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	440b      	add	r3, r1
 8009438:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800943c:	2200      	movs	r2, #0
 800943e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009440:	7bfa      	ldrb	r2, [r7, #15]
 8009442:	6879      	ldr	r1, [r7, #4]
 8009444:	4613      	mov	r3, r2
 8009446:	00db      	lsls	r3, r3, #3
 8009448:	4413      	add	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	440b      	add	r3, r1
 800944e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8009452:	2200      	movs	r2, #0
 8009454:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009456:	7bfa      	ldrb	r2, [r7, #15]
 8009458:	6879      	ldr	r1, [r7, #4]
 800945a:	4613      	mov	r3, r2
 800945c:	00db      	lsls	r3, r3, #3
 800945e:	4413      	add	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	440b      	add	r3, r1
 8009464:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009468:	2200      	movs	r2, #0
 800946a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800946c:	7bfa      	ldrb	r2, [r7, #15]
 800946e:	6879      	ldr	r1, [r7, #4]
 8009470:	4613      	mov	r3, r2
 8009472:	00db      	lsls	r3, r3, #3
 8009474:	4413      	add	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	440b      	add	r3, r1
 800947a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800947e:	2200      	movs	r2, #0
 8009480:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	3301      	adds	r3, #1
 8009486:	73fb      	strb	r3, [r7, #15]
 8009488:	7bfa      	ldrb	r2, [r7, #15]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	429a      	cmp	r2, r3
 8009490:	d3b5      	bcc.n	80093fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	687e      	ldr	r6, [r7, #4]
 800949a:	466d      	mov	r5, sp
 800949c:	f106 0410 	add.w	r4, r6, #16
 80094a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80094ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80094b0:	1d33      	adds	r3, r6, #4
 80094b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094b4:	6838      	ldr	r0, [r7, #0]
 80094b6:	f00a fe2b 	bl	8014110 <USB_DevInit>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e014      	b.n	80094f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d102      	bne.n	80094ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f001 f96f 	bl	800a7c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f00b fe6d 	bl	80151ce <USB_DevDisconnect>

  return HAL_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080094fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b084      	sub	sp, #16
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009512:	2b01      	cmp	r3, #1
 8009514:	d101      	bne.n	800951a <HAL_PCD_Start+0x1c>
 8009516:	2302      	movs	r3, #2
 8009518:	e022      	b.n	8009560 <HAL_PCD_Start+0x62>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800952a:	2b00      	cmp	r3, #0
 800952c:	d109      	bne.n	8009542 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8009532:	2b01      	cmp	r3, #1
 8009534:	d105      	bne.n	8009542 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4618      	mov	r0, r3
 8009548:	f00a fd74 	bl	8014034 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4618      	mov	r0, r3
 8009552:	f00b fe1b 	bl	801518c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009568:	b590      	push	{r4, r7, lr}
 800956a:	b08d      	sub	sp, #52	; 0x34
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4618      	mov	r0, r3
 8009580:	f00b fed9 	bl	8015336 <USB_GetMode>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	f040 84b7 	bne.w	8009efa <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4618      	mov	r0, r3
 8009592:	f00b fe3d 	bl	8015210 <USB_ReadInterrupts>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 84ad 	beq.w	8009ef8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	0a1b      	lsrs	r3, r3, #8
 80095a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f00b fe2a 	bl	8015210 <USB_ReadInterrupts>
 80095bc:	4603      	mov	r3, r0
 80095be:	f003 0302 	and.w	r3, r3, #2
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d107      	bne.n	80095d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	695a      	ldr	r2, [r3, #20]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f002 0202 	and.w	r2, r2, #2
 80095d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4618      	mov	r0, r3
 80095dc:	f00b fe18 	bl	8015210 <USB_ReadInterrupts>
 80095e0:	4603      	mov	r3, r0
 80095e2:	f003 0310 	and.w	r3, r3, #16
 80095e6:	2b10      	cmp	r3, #16
 80095e8:	d161      	bne.n	80096ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	699a      	ldr	r2, [r3, #24]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f022 0210 	bic.w	r2, r2, #16
 80095f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80095fa:	6a3b      	ldr	r3, [r7, #32]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	f003 020f 	and.w	r2, r3, #15
 8009606:	4613      	mov	r3, r2
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	4413      	add	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	4413      	add	r3, r2
 8009616:	3304      	adds	r3, #4
 8009618:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	0c5b      	lsrs	r3, r3, #17
 800961e:	f003 030f 	and.w	r3, r3, #15
 8009622:	2b02      	cmp	r3, #2
 8009624:	d124      	bne.n	8009670 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009626:	69ba      	ldr	r2, [r7, #24]
 8009628:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800962c:	4013      	ands	r3, r2
 800962e:	2b00      	cmp	r3, #0
 8009630:	d035      	beq.n	800969e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	091b      	lsrs	r3, r3, #4
 800963a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800963c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009640:	b29b      	uxth	r3, r3
 8009642:	461a      	mov	r2, r3
 8009644:	6a38      	ldr	r0, [r7, #32]
 8009646:	f00b fc4f 	bl	8014ee8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	68da      	ldr	r2, [r3, #12]
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	091b      	lsrs	r3, r3, #4
 8009652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009656:	441a      	add	r2, r3
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	695a      	ldr	r2, [r3, #20]
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	091b      	lsrs	r3, r3, #4
 8009664:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009668:	441a      	add	r2, r3
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	615a      	str	r2, [r3, #20]
 800966e:	e016      	b.n	800969e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	0c5b      	lsrs	r3, r3, #17
 8009674:	f003 030f 	and.w	r3, r3, #15
 8009678:	2b06      	cmp	r3, #6
 800967a:	d110      	bne.n	800969e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009682:	2208      	movs	r2, #8
 8009684:	4619      	mov	r1, r3
 8009686:	6a38      	ldr	r0, [r7, #32]
 8009688:	f00b fc2e 	bl	8014ee8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	695a      	ldr	r2, [r3, #20]
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	091b      	lsrs	r3, r3, #4
 8009694:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009698:	441a      	add	r2, r3
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	699a      	ldr	r2, [r3, #24]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f042 0210 	orr.w	r2, r2, #16
 80096ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f00b fdac 	bl	8015210 <USB_ReadInterrupts>
 80096b8:	4603      	mov	r3, r0
 80096ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80096c2:	f040 80a7 	bne.w	8009814 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80096c6:	2300      	movs	r3, #0
 80096c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f00b fdb1 	bl	8015236 <USB_ReadDevAllOutEpInterrupt>
 80096d4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80096d6:	e099      	b.n	800980c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f000 808e 	beq.w	8009800 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ea:	b2d2      	uxtb	r2, r2
 80096ec:	4611      	mov	r1, r2
 80096ee:	4618      	mov	r0, r3
 80096f0:	f00b fdd5 	bl	801529e <USB_ReadDevOutEPInterrupt>
 80096f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00c      	beq.n	800971a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	015a      	lsls	r2, r3, #5
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	4413      	add	r3, r2
 8009708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800970c:	461a      	mov	r2, r3
 800970e:	2301      	movs	r3, #1
 8009710:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fed1 	bl	800a4bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	f003 0308 	and.w	r3, r3, #8
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00c      	beq.n	800973e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	4413      	add	r3, r2
 800972c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009730:	461a      	mov	r2, r3
 8009732:	2308      	movs	r3, #8
 8009734:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 ffa7 	bl	800a68c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f003 0310 	and.w	r3, r3, #16
 8009744:	2b00      	cmp	r3, #0
 8009746:	d008      	beq.n	800975a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	4413      	add	r3, r2
 8009750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009754:	461a      	mov	r2, r3
 8009756:	2310      	movs	r3, #16
 8009758:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f003 0302 	and.w	r3, r3, #2
 8009760:	2b00      	cmp	r3, #0
 8009762:	d030      	beq.n	80097c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	695b      	ldr	r3, [r3, #20]
 8009768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800976c:	2b80      	cmp	r3, #128	; 0x80
 800976e:	d109      	bne.n	8009784 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	69fa      	ldr	r2, [r7, #28]
 800977a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800977e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009782:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009786:	4613      	mov	r3, r2
 8009788:	00db      	lsls	r3, r3, #3
 800978a:	4413      	add	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	4413      	add	r3, r2
 8009796:	3304      	adds	r3, #4
 8009798:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	78db      	ldrb	r3, [r3, #3]
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d108      	bne.n	80097b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	2200      	movs	r2, #0
 80097a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f011 fb66 	bl	801ae80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c0:	461a      	mov	r2, r3
 80097c2:	2302      	movs	r3, #2
 80097c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f003 0320 	and.w	r3, r3, #32
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d008      	beq.n	80097e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097dc:	461a      	mov	r2, r3
 80097de:	2320      	movs	r3, #32
 80097e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d009      	beq.n	8009800 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	015a      	lsls	r2, r3, #5
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	4413      	add	r3, r2
 80097f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f8:	461a      	mov	r2, r3
 80097fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	3301      	adds	r3, #1
 8009804:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009808:	085b      	lsrs	r3, r3, #1
 800980a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800980c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980e:	2b00      	cmp	r3, #0
 8009810:	f47f af62 	bne.w	80096d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4618      	mov	r0, r3
 800981a:	f00b fcf9 	bl	8015210 <USB_ReadInterrupts>
 800981e:	4603      	mov	r3, r0
 8009820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009824:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009828:	f040 80db 	bne.w	80099e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4618      	mov	r0, r3
 8009832:	f00b fd1a 	bl	801526a <USB_ReadDevAllInEpInterrupt>
 8009836:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009838:	2300      	movs	r3, #0
 800983a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800983c:	e0cd      	b.n	80099da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800983e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	f000 80c2 	beq.w	80099ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009850:	b2d2      	uxtb	r2, r2
 8009852:	4611      	mov	r1, r2
 8009854:	4618      	mov	r0, r3
 8009856:	f00b fd40 	bl	80152da <USB_ReadDevInEPInterrupt>
 800985a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b00      	cmp	r3, #0
 8009864:	d057      	beq.n	8009916 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	f003 030f 	and.w	r3, r3, #15
 800986c:	2201      	movs	r2, #1
 800986e:	fa02 f303 	lsl.w	r3, r2, r3
 8009872:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800987a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	43db      	mvns	r3, r3
 8009880:	69f9      	ldr	r1, [r7, #28]
 8009882:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009886:	4013      	ands	r3, r2
 8009888:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	4413      	add	r3, r2
 8009892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009896:	461a      	mov	r2, r3
 8009898:	2301      	movs	r3, #1
 800989a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d132      	bne.n	800990a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80098a4:	6879      	ldr	r1, [r7, #4]
 80098a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a8:	4613      	mov	r3, r2
 80098aa:	00db      	lsls	r3, r3, #3
 80098ac:	4413      	add	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	440b      	add	r3, r1
 80098b2:	3348      	adds	r3, #72	; 0x48
 80098b4:	6819      	ldr	r1, [r3, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ba:	4613      	mov	r3, r2
 80098bc:	00db      	lsls	r3, r3, #3
 80098be:	4413      	add	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4403      	add	r3, r0
 80098c4:	3344      	adds	r3, #68	; 0x44
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4419      	add	r1, r3
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ce:	4613      	mov	r3, r2
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	4413      	add	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4403      	add	r3, r0
 80098d8:	3348      	adds	r3, #72	; 0x48
 80098da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d113      	bne.n	800990a <HAL_PCD_IRQHandler+0x3a2>
 80098e2:	6879      	ldr	r1, [r7, #4]
 80098e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098e6:	4613      	mov	r3, r2
 80098e8:	00db      	lsls	r3, r3, #3
 80098ea:	4413      	add	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	440b      	add	r3, r1
 80098f0:	334c      	adds	r3, #76	; 0x4c
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d108      	bne.n	800990a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6818      	ldr	r0, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009902:	461a      	mov	r2, r3
 8009904:	2101      	movs	r1, #1
 8009906:	f00b fd49 	bl	801539c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	b2db      	uxtb	r3, r3
 800990e:	4619      	mov	r1, r3
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f011 fa30 	bl	801ad76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f003 0308 	and.w	r3, r3, #8
 800991c:	2b00      	cmp	r3, #0
 800991e:	d008      	beq.n	8009932 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	015a      	lsls	r2, r3, #5
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	4413      	add	r3, r2
 8009928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800992c:	461a      	mov	r2, r3
 800992e:	2308      	movs	r3, #8
 8009930:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f003 0310 	and.w	r3, r3, #16
 8009938:	2b00      	cmp	r3, #0
 800993a:	d008      	beq.n	800994e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800993c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993e:	015a      	lsls	r2, r3, #5
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	4413      	add	r3, r2
 8009944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009948:	461a      	mov	r2, r3
 800994a:	2310      	movs	r3, #16
 800994c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009954:	2b00      	cmp	r3, #0
 8009956:	d008      	beq.n	800996a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009964:	461a      	mov	r2, r3
 8009966:	2340      	movs	r3, #64	; 0x40
 8009968:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	f003 0302 	and.w	r3, r3, #2
 8009970:	2b00      	cmp	r3, #0
 8009972:	d023      	beq.n	80099bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009976:	6a38      	ldr	r0, [r7, #32]
 8009978:	f00a fd28 	bl	80143cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800997c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800997e:	4613      	mov	r3, r2
 8009980:	00db      	lsls	r3, r3, #3
 8009982:	4413      	add	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	3338      	adds	r3, #56	; 0x38
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	4413      	add	r3, r2
 800998c:	3304      	adds	r3, #4
 800998e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	78db      	ldrb	r3, [r3, #3]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d108      	bne.n	80099aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	2200      	movs	r2, #0
 800999c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800999e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f011 fa7d 	bl	801aea4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	015a      	lsls	r2, r3, #5
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	4413      	add	r3, r2
 80099b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b6:	461a      	mov	r2, r3
 80099b8:	2302      	movs	r3, #2
 80099ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80099c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fcea 	bl	800a3a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	3301      	adds	r3, #1
 80099d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80099d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d6:	085b      	lsrs	r3, r3, #1
 80099d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80099da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f47f af2e 	bne.w	800983e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f00b fc12 	bl	8015210 <USB_ReadInterrupts>
 80099ec:	4603      	mov	r3, r0
 80099ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099f6:	d122      	bne.n	8009a3e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	69fa      	ldr	r2, [r7, #28]
 8009a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a06:	f023 0301 	bic.w	r3, r3, #1
 8009a0a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d108      	bne.n	8009a28 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009a1e:	2100      	movs	r1, #0
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fef5 	bl	800a810 <HAL_PCDEx_LPM_Callback>
 8009a26:	e002      	b.n	8009a2e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f011 fa1b 	bl	801ae64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	695a      	ldr	r2, [r3, #20]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f00b fbe4 	bl	8015210 <USB_ReadInterrupts>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a52:	d112      	bne.n	8009a7a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	f003 0301 	and.w	r3, r3, #1
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d102      	bne.n	8009a6a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f011 f9d7 	bl	801ae18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	695a      	ldr	r2, [r3, #20]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f00b fbc6 	bl	8015210 <USB_ReadInterrupts>
 8009a84:	4603      	mov	r3, r0
 8009a86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a8e:	d121      	bne.n	8009ad4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	695a      	ldr	r2, [r3, #20]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009a9e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d111      	bne.n	8009ace <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2201      	movs	r2, #1
 8009aae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab8:	089b      	lsrs	r3, r3, #2
 8009aba:	f003 020f 	and.w	r2, r3, #15
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fea2 	bl	800a810 <HAL_PCDEx_LPM_Callback>
 8009acc:	e002      	b.n	8009ad4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f011 f9a2 	bl	801ae18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f00b fb99 	bl	8015210 <USB_ReadInterrupts>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae8:	f040 80b7 	bne.w	8009c5a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	69fa      	ldr	r2, [r7, #28]
 8009af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009afa:	f023 0301 	bic.w	r3, r3, #1
 8009afe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2110      	movs	r1, #16
 8009b06:	4618      	mov	r0, r3
 8009b08:	f00a fc60 	bl	80143cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b10:	e046      	b.n	8009ba0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b14:	015a      	lsls	r2, r3, #5
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b1e:	461a      	mov	r2, r3
 8009b20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b28:	015a      	lsls	r2, r3, #5
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b36:	0151      	lsls	r1, r2, #5
 8009b38:	69fa      	ldr	r2, [r7, #28]
 8009b3a:	440a      	add	r2, r1
 8009b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b48:	015a      	lsls	r2, r3, #5
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b52:	461a      	mov	r2, r3
 8009b54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5c:	015a      	lsls	r2, r3, #5
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	4413      	add	r3, r2
 8009b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b6a:	0151      	lsls	r1, r2, #5
 8009b6c:	69fa      	ldr	r2, [r7, #28]
 8009b6e:	440a      	add	r2, r1
 8009b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7c:	015a      	lsls	r2, r3, #5
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	4413      	add	r3, r2
 8009b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b8a:	0151      	lsls	r1, r2, #5
 8009b8c:	69fa      	ldr	r2, [r7, #28]
 8009b8e:	440a      	add	r2, r1
 8009b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d3b3      	bcc.n	8009b12 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	69fa      	ldr	r2, [r7, #28]
 8009bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bb8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009bbc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d016      	beq.n	8009bf4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bd0:	69fa      	ldr	r2, [r7, #28]
 8009bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bd6:	f043 030b 	orr.w	r3, r3, #11
 8009bda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be6:	69fa      	ldr	r2, [r7, #28]
 8009be8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bec:	f043 030b 	orr.w	r3, r3, #11
 8009bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8009bf2:	e015      	b.n	8009c20 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bfa:	695a      	ldr	r2, [r3, #20]
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c02:	4619      	mov	r1, r3
 8009c04:	f242 032b 	movw	r3, #8235	; 0x202b
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	69fa      	ldr	r2, [r7, #28]
 8009c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c1a:	f043 030b 	orr.w	r3, r3, #11
 8009c1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	69fa      	ldr	r2, [r7, #28]
 8009c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6818      	ldr	r0, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009c44:	461a      	mov	r2, r3
 8009c46:	f00b fba9 	bl	801539c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	695a      	ldr	r2, [r3, #20]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009c58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f00b fad6 	bl	8015210 <USB_ReadInterrupts>
 8009c64:	4603      	mov	r3, r0
 8009c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c6e:	d124      	bne.n	8009cba <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f00b fb6d 	bl	8015354 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f00a fc21 	bl	80144c6 <USB_GetDevSpeed>
 8009c84:	4603      	mov	r3, r0
 8009c86:	461a      	mov	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681c      	ldr	r4, [r3, #0]
 8009c90:	f001 fd88 	bl	800b7a4 <HAL_RCC_GetHCLKFreq>
 8009c94:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f00a f926 	bl	8013ef0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f011 f88e 	bl	801adc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	695a      	ldr	r2, [r3, #20]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f00b faa6 	bl	8015210 <USB_ReadInterrupts>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	f003 0308 	and.w	r3, r3, #8
 8009cca:	2b08      	cmp	r3, #8
 8009ccc:	d10a      	bne.n	8009ce4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f011 f86b 	bl	801adaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	695a      	ldr	r2, [r3, #20]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f002 0208 	and.w	r2, r2, #8
 8009ce2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f00b fa91 	bl	8015210 <USB_ReadInterrupts>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cf4:	2b80      	cmp	r3, #128	; 0x80
 8009cf6:	d122      	bne.n	8009d3e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d04:	2301      	movs	r3, #1
 8009d06:	627b      	str	r3, [r7, #36]	; 0x24
 8009d08:	e014      	b.n	8009d34 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009d0a:	6879      	ldr	r1, [r7, #4]
 8009d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d0e:	4613      	mov	r3, r2
 8009d10:	00db      	lsls	r3, r3, #3
 8009d12:	4413      	add	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	440b      	add	r3, r1
 8009d18:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d105      	bne.n	8009d2e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	4619      	mov	r1, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fb09 	bl	800a340 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	3301      	adds	r3, #1
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d3e5      	bcc.n	8009d0a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f00b fa64 	bl	8015210 <USB_ReadInterrupts>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d52:	d13b      	bne.n	8009dcc <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d54:	2301      	movs	r3, #1
 8009d56:	627b      	str	r3, [r7, #36]	; 0x24
 8009d58:	e02b      	b.n	8009db2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	015a      	lsls	r2, r3, #5
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	4413      	add	r3, r2
 8009d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d6e:	4613      	mov	r3, r2
 8009d70:	00db      	lsls	r3, r3, #3
 8009d72:	4413      	add	r3, r2
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	440b      	add	r3, r1
 8009d78:	3340      	adds	r3, #64	; 0x40
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d115      	bne.n	8009dac <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009d80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	da12      	bge.n	8009dac <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009d86:	6879      	ldr	r1, [r7, #4]
 8009d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	00db      	lsls	r3, r3, #3
 8009d8e:	4413      	add	r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	440b      	add	r3, r1
 8009d94:	333f      	adds	r3, #63	; 0x3f
 8009d96:	2201      	movs	r2, #1
 8009d98:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 faca 	bl	800a340 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dae:	3301      	adds	r3, #1
 8009db0:	627b      	str	r3, [r7, #36]	; 0x24
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d3ce      	bcc.n	8009d5a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	695a      	ldr	r2, [r3, #20]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f00b fa1d 	bl	8015210 <USB_ReadInterrupts>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ddc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009de0:	d155      	bne.n	8009e8e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009de2:	2301      	movs	r3, #1
 8009de4:	627b      	str	r3, [r7, #36]	; 0x24
 8009de6:	e045      	b.n	8009e74 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009df8:	6879      	ldr	r1, [r7, #4]
 8009dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	00db      	lsls	r3, r3, #3
 8009e00:	4413      	add	r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	440b      	add	r3, r1
 8009e06:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d12e      	bne.n	8009e6e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009e10:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	da2b      	bge.n	8009e6e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009e22:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d121      	bne.n	8009e6e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009e2a:	6879      	ldr	r1, [r7, #4]
 8009e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e2e:	4613      	mov	r3, r2
 8009e30:	00db      	lsls	r3, r3, #3
 8009e32:	4413      	add	r3, r2
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	440b      	add	r3, r1
 8009e38:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009e40:	6a3b      	ldr	r3, [r7, #32]
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009e48:	6a3b      	ldr	r3, [r7, #32]
 8009e4a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	695b      	ldr	r3, [r3, #20]
 8009e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10a      	bne.n	8009e6e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	69fa      	ldr	r2, [r7, #28]
 8009e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e6a:	6053      	str	r3, [r2, #4]
            break;
 8009e6c:	e007      	b.n	8009e7e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e70:	3301      	adds	r3, #1
 8009e72:	627b      	str	r3, [r7, #36]	; 0x24
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d3b4      	bcc.n	8009de8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	695a      	ldr	r2, [r3, #20]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009e8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f00b f9bc 	bl	8015210 <USB_ReadInterrupts>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ea2:	d10a      	bne.n	8009eba <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f011 f80f 	bl	801aec8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	695a      	ldr	r2, [r3, #20]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009eb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f00b f9a6 	bl	8015210 <USB_ReadInterrupts>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	f003 0304 	and.w	r3, r3, #4
 8009eca:	2b04      	cmp	r3, #4
 8009ecc:	d115      	bne.n	8009efa <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	f003 0304 	and.w	r3, r3, #4
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f010 ffff 	bl	801aee4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	6859      	ldr	r1, [r3, #4]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	69ba      	ldr	r2, [r7, #24]
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	605a      	str	r2, [r3, #4]
 8009ef6:	e000      	b.n	8009efa <HAL_PCD_IRQHandler+0x992>
      return;
 8009ef8:	bf00      	nop
    }
  }
}
 8009efa:	3734      	adds	r7, #52	; 0x34
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd90      	pop	{r4, r7, pc}

08009f00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	460b      	mov	r3, r1
 8009f0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d101      	bne.n	8009f1a <HAL_PCD_SetAddress+0x1a>
 8009f16:	2302      	movs	r3, #2
 8009f18:	e013      	b.n	8009f42 <HAL_PCD_SetAddress+0x42>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	78fa      	ldrb	r2, [r7, #3]
 8009f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	78fa      	ldrb	r2, [r7, #3]
 8009f30:	4611      	mov	r1, r2
 8009f32:	4618      	mov	r0, r3
 8009f34:	f00b f904 	bl	8015140 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b084      	sub	sp, #16
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
 8009f52:	4608      	mov	r0, r1
 8009f54:	4611      	mov	r1, r2
 8009f56:	461a      	mov	r2, r3
 8009f58:	4603      	mov	r3, r0
 8009f5a:	70fb      	strb	r3, [r7, #3]
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	803b      	strh	r3, [r7, #0]
 8009f60:	4613      	mov	r3, r2
 8009f62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009f68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	da0f      	bge.n	8009f90 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f70:	78fb      	ldrb	r3, [r7, #3]
 8009f72:	f003 020f 	and.w	r2, r3, #15
 8009f76:	4613      	mov	r3, r2
 8009f78:	00db      	lsls	r3, r3, #3
 8009f7a:	4413      	add	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	3338      	adds	r3, #56	; 0x38
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	4413      	add	r3, r2
 8009f84:	3304      	adds	r3, #4
 8009f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	705a      	strb	r2, [r3, #1]
 8009f8e:	e00f      	b.n	8009fb0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f90:	78fb      	ldrb	r3, [r7, #3]
 8009f92:	f003 020f 	and.w	r2, r3, #15
 8009f96:	4613      	mov	r3, r2
 8009f98:	00db      	lsls	r3, r3, #3
 8009f9a:	4413      	add	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	3304      	adds	r3, #4
 8009fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009fb0:	78fb      	ldrb	r3, [r7, #3]
 8009fb2:	f003 030f 	and.w	r3, r3, #15
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009fbc:	883a      	ldrh	r2, [r7, #0]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	78ba      	ldrb	r2, [r7, #2]
 8009fc6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	785b      	ldrb	r3, [r3, #1]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d004      	beq.n	8009fda <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009fda:	78bb      	ldrb	r3, [r7, #2]
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d102      	bne.n	8009fe6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d101      	bne.n	8009ff4 <HAL_PCD_EP_Open+0xaa>
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	e00e      	b.n	800a012 <HAL_PCD_EP_Open+0xc8>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68f9      	ldr	r1, [r7, #12]
 800a002:	4618      	mov	r0, r3
 800a004:	f00a fa84 	bl	8014510 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a010:	7afb      	ldrb	r3, [r7, #11]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b084      	sub	sp, #16
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	460b      	mov	r3, r1
 800a024:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a026:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	da0f      	bge.n	800a04e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a02e:	78fb      	ldrb	r3, [r7, #3]
 800a030:	f003 020f 	and.w	r2, r3, #15
 800a034:	4613      	mov	r3, r2
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	4413      	add	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	3338      	adds	r3, #56	; 0x38
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	4413      	add	r3, r2
 800a042:	3304      	adds	r3, #4
 800a044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2201      	movs	r2, #1
 800a04a:	705a      	strb	r2, [r3, #1]
 800a04c:	e00f      	b.n	800a06e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a04e:	78fb      	ldrb	r3, [r7, #3]
 800a050:	f003 020f 	and.w	r2, r3, #15
 800a054:	4613      	mov	r3, r2
 800a056:	00db      	lsls	r3, r3, #3
 800a058:	4413      	add	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	4413      	add	r3, r2
 800a064:	3304      	adds	r3, #4
 800a066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a06e:	78fb      	ldrb	r3, [r7, #3]
 800a070:	f003 030f 	and.w	r3, r3, #15
 800a074:	b2da      	uxtb	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a080:	2b01      	cmp	r3, #1
 800a082:	d101      	bne.n	800a088 <HAL_PCD_EP_Close+0x6e>
 800a084:	2302      	movs	r3, #2
 800a086:	e00e      	b.n	800a0a6 <HAL_PCD_EP_Close+0x8c>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68f9      	ldr	r1, [r7, #12]
 800a096:	4618      	mov	r0, r3
 800a098:	f00a fac2 	bl	8014620 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b086      	sub	sp, #24
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	60f8      	str	r0, [r7, #12]
 800a0b6:	607a      	str	r2, [r7, #4]
 800a0b8:	603b      	str	r3, [r7, #0]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0be:	7afb      	ldrb	r3, [r7, #11]
 800a0c0:	f003 020f 	and.w	r2, r3, #15
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	00db      	lsls	r3, r3, #3
 800a0c8:	4413      	add	r3, r2
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0f0:	7afb      	ldrb	r3, [r7, #11]
 800a0f2:	f003 030f 	and.w	r3, r3, #15
 800a0f6:	b2da      	uxtb	r2, r3
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d102      	bne.n	800a10a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6818      	ldr	r0, [r3, #0]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	461a      	mov	r2, r3
 800a116:	6979      	ldr	r1, [r7, #20]
 800a118:	f00a fb5e 	bl	80147d8 <USB_EPStartXfer>

  return HAL_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a126:	b480      	push	{r7}
 800a128:	b083      	sub	sp, #12
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	460b      	mov	r3, r1
 800a130:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a132:	78fb      	ldrb	r3, [r7, #3]
 800a134:	f003 020f 	and.w	r2, r3, #15
 800a138:	6879      	ldr	r1, [r7, #4]
 800a13a:	4613      	mov	r3, r2
 800a13c:	00db      	lsls	r3, r3, #3
 800a13e:	4413      	add	r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	440b      	add	r3, r1
 800a144:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800a148:	681b      	ldr	r3, [r3, #0]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	370c      	adds	r7, #12
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b086      	sub	sp, #24
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	60f8      	str	r0, [r7, #12]
 800a15e:	607a      	str	r2, [r7, #4]
 800a160:	603b      	str	r3, [r7, #0]
 800a162:	460b      	mov	r3, r1
 800a164:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a166:	7afb      	ldrb	r3, [r7, #11]
 800a168:	f003 020f 	and.w	r2, r3, #15
 800a16c:	4613      	mov	r3, r2
 800a16e:	00db      	lsls	r3, r3, #3
 800a170:	4413      	add	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	3338      	adds	r3, #56	; 0x38
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	4413      	add	r3, r2
 800a17a:	3304      	adds	r3, #4
 800a17c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	2200      	movs	r2, #0
 800a18e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	2201      	movs	r2, #1
 800a194:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a196:	7afb      	ldrb	r3, [r7, #11]
 800a198:	f003 030f 	and.w	r3, r3, #15
 800a19c:	b2da      	uxtb	r2, r3
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d102      	bne.n	800a1b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6818      	ldr	r0, [r3, #0]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	6979      	ldr	r1, [r7, #20]
 800a1be:	f00a fb0b 	bl	80147d8 <USB_EPStartXfer>

  return HAL_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a1d8:	78fb      	ldrb	r3, [r7, #3]
 800a1da:	f003 020f 	and.w	r2, r3, #15
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d901      	bls.n	800a1ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e050      	b.n	800a28c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a1ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	da0f      	bge.n	800a212 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1f2:	78fb      	ldrb	r3, [r7, #3]
 800a1f4:	f003 020f 	and.w	r2, r3, #15
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	00db      	lsls	r3, r3, #3
 800a1fc:	4413      	add	r3, r2
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	3338      	adds	r3, #56	; 0x38
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	4413      	add	r3, r2
 800a206:	3304      	adds	r3, #4
 800a208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2201      	movs	r2, #1
 800a20e:	705a      	strb	r2, [r3, #1]
 800a210:	e00d      	b.n	800a22e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a212:	78fa      	ldrb	r2, [r7, #3]
 800a214:	4613      	mov	r3, r2
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	4413      	add	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	4413      	add	r3, r2
 800a224:	3304      	adds	r3, #4
 800a226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2201      	movs	r2, #1
 800a232:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a234:	78fb      	ldrb	r3, [r7, #3]
 800a236:	f003 030f 	and.w	r3, r3, #15
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a246:	2b01      	cmp	r3, #1
 800a248:	d101      	bne.n	800a24e <HAL_PCD_EP_SetStall+0x82>
 800a24a:	2302      	movs	r3, #2
 800a24c:	e01e      	b.n	800a28c <HAL_PCD_EP_SetStall+0xc0>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68f9      	ldr	r1, [r7, #12]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f00a fe9b 	bl	8014f98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a262:	78fb      	ldrb	r3, [r7, #3]
 800a264:	f003 030f 	and.w	r3, r3, #15
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10a      	bne.n	800a282 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6818      	ldr	r0, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	b2d9      	uxtb	r1, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a27c:	461a      	mov	r2, r3
 800a27e:	f00b f88d 	bl	801539c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	460b      	mov	r3, r1
 800a29e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a2a0:	78fb      	ldrb	r3, [r7, #3]
 800a2a2:	f003 020f 	and.w	r2, r3, #15
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d901      	bls.n	800a2b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e042      	b.n	800a338 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a2b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	da0f      	bge.n	800a2da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a2ba:	78fb      	ldrb	r3, [r7, #3]
 800a2bc:	f003 020f 	and.w	r2, r3, #15
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	00db      	lsls	r3, r3, #3
 800a2c4:	4413      	add	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	3338      	adds	r3, #56	; 0x38
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	705a      	strb	r2, [r3, #1]
 800a2d8:	e00f      	b.n	800a2fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2da:	78fb      	ldrb	r3, [r7, #3]
 800a2dc:	f003 020f 	and.w	r2, r3, #15
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	00db      	lsls	r3, r3, #3
 800a2e4:	4413      	add	r3, r2
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a300:	78fb      	ldrb	r3, [r7, #3]
 800a302:	f003 030f 	and.w	r3, r3, #15
 800a306:	b2da      	uxtb	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a312:	2b01      	cmp	r3, #1
 800a314:	d101      	bne.n	800a31a <HAL_PCD_EP_ClrStall+0x86>
 800a316:	2302      	movs	r3, #2
 800a318:	e00e      	b.n	800a338 <HAL_PCD_EP_ClrStall+0xa4>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2201      	movs	r2, #1
 800a31e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68f9      	ldr	r1, [r7, #12]
 800a328:	4618      	mov	r0, r3
 800a32a:	f00a fea3 	bl	8015074 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	460b      	mov	r3, r1
 800a34a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a34c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a350:	2b00      	cmp	r3, #0
 800a352:	da0c      	bge.n	800a36e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a354:	78fb      	ldrb	r3, [r7, #3]
 800a356:	f003 020f 	and.w	r2, r3, #15
 800a35a:	4613      	mov	r3, r2
 800a35c:	00db      	lsls	r3, r3, #3
 800a35e:	4413      	add	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	3338      	adds	r3, #56	; 0x38
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	4413      	add	r3, r2
 800a368:	3304      	adds	r3, #4
 800a36a:	60fb      	str	r3, [r7, #12]
 800a36c:	e00c      	b.n	800a388 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a36e:	78fb      	ldrb	r3, [r7, #3]
 800a370:	f003 020f 	and.w	r2, r3, #15
 800a374:	4613      	mov	r3, r2
 800a376:	00db      	lsls	r3, r3, #3
 800a378:	4413      	add	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	4413      	add	r3, r2
 800a384:	3304      	adds	r3, #4
 800a386:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68f9      	ldr	r1, [r7, #12]
 800a38e:	4618      	mov	r0, r3
 800a390:	f00a fcc2 	bl	8014d18 <USB_EPStopXfer>
 800a394:	4603      	mov	r3, r0
 800a396:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a398:	7afb      	ldrb	r3, [r7, #11]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b08a      	sub	sp, #40	; 0x28
 800a3a6:	af02      	add	r7, sp, #8
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	00db      	lsls	r3, r3, #3
 800a3bc:	4413      	add	r3, r2
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	3338      	adds	r3, #56	; 0x38
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	695a      	ldr	r2, [r3, #20]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d901      	bls.n	800a3da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e06c      	b.n	800a4b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	691a      	ldr	r2, [r3, #16]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	69fa      	ldr	r2, [r7, #28]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d902      	bls.n	800a3f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	3303      	adds	r3, #3
 800a3fa:	089b      	lsrs	r3, r3, #2
 800a3fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a3fe:	e02b      	b.n	800a458 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	691a      	ldr	r2, [r3, #16]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	695b      	ldr	r3, [r3, #20]
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	69fa      	ldr	r2, [r7, #28]
 800a412:	429a      	cmp	r2, r3
 800a414:	d902      	bls.n	800a41c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	3303      	adds	r3, #3
 800a420:	089b      	lsrs	r3, r3, #2
 800a422:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	68d9      	ldr	r1, [r3, #12]
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	b2da      	uxtb	r2, r3
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a434:	b2db      	uxtb	r3, r3
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	4603      	mov	r3, r0
 800a43a:	6978      	ldr	r0, [r7, #20]
 800a43c:	f00a fd16 	bl	8014e6c <USB_WritePacket>

    ep->xfer_buff  += len;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	68da      	ldr	r2, [r3, #12]
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	441a      	add	r2, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	695a      	ldr	r2, [r3, #20]
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	441a      	add	r2, r3
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a468:	69ba      	ldr	r2, [r7, #24]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d809      	bhi.n	800a482 <PCD_WriteEmptyTxFifo+0xe0>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	695a      	ldr	r2, [r3, #20]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a476:	429a      	cmp	r2, r3
 800a478:	d203      	bcs.n	800a482 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1be      	bne.n	800a400 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	691a      	ldr	r2, [r3, #16]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d811      	bhi.n	800a4b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	f003 030f 	and.w	r3, r3, #15
 800a494:	2201      	movs	r2, #1
 800a496:	fa02 f303 	lsl.w	r3, r2, r3
 800a49a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	43db      	mvns	r3, r3
 800a4a8:	6939      	ldr	r1, [r7, #16]
 800a4aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3720      	adds	r7, #32
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b088      	sub	sp, #32
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	333c      	adds	r3, #60	; 0x3c
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	015a      	lsls	r2, r3, #5
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d17b      	bne.n	800a5ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	f003 0308 	and.w	r3, r3, #8
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d015      	beq.n	800a528 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	4a61      	ldr	r2, [pc, #388]	; (800a684 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a500:	4293      	cmp	r3, r2
 800a502:	f240 80b9 	bls.w	800a678 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f000 80b3 	beq.w	800a678 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	015a      	lsls	r2, r3, #5
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	4413      	add	r3, r2
 800a51a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a51e:	461a      	mov	r2, r3
 800a520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a524:	6093      	str	r3, [r2, #8]
 800a526:	e0a7      	b.n	800a678 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	f003 0320 	and.w	r3, r3, #32
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d009      	beq.n	800a546 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	015a      	lsls	r2, r3, #5
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	4413      	add	r3, r2
 800a53a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a53e:	461a      	mov	r2, r3
 800a540:	2320      	movs	r3, #32
 800a542:	6093      	str	r3, [r2, #8]
 800a544:	e098      	b.n	800a678 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f040 8093 	bne.w	800a678 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	4a4b      	ldr	r2, [pc, #300]	; (800a684 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d90f      	bls.n	800a57a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00a      	beq.n	800a57a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	015a      	lsls	r2, r3, #5
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a570:	461a      	mov	r2, r3
 800a572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a576:	6093      	str	r3, [r2, #8]
 800a578:	e07e      	b.n	800a678 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	4613      	mov	r3, r2
 800a57e:	00db      	lsls	r3, r3, #3
 800a580:	4413      	add	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	4413      	add	r3, r2
 800a58c:	3304      	adds	r3, #4
 800a58e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6a1a      	ldr	r2, [r3, #32]
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	0159      	lsls	r1, r3, #5
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	440b      	add	r3, r1
 800a59c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5a6:	1ad2      	subs	r2, r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d114      	bne.n	800a5dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d109      	bne.n	800a5ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6818      	ldr	r0, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	2101      	movs	r1, #1
 800a5c8:	f00a fee8 	bl	801539c <USB_EP0_OutStart>
 800a5cc:	e006      	b.n	800a5dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	68da      	ldr	r2, [r3, #12]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	695b      	ldr	r3, [r3, #20]
 800a5d6:	441a      	add	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f010 fbac 	bl	801ad40 <HAL_PCD_DataOutStageCallback>
 800a5e8:	e046      	b.n	800a678 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	4a26      	ldr	r2, [pc, #152]	; (800a688 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d124      	bne.n	800a63c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00a      	beq.n	800a612 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	015a      	lsls	r2, r3, #5
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	4413      	add	r3, r2
 800a604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a608:	461a      	mov	r2, r3
 800a60a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a60e:	6093      	str	r3, [r2, #8]
 800a610:	e032      	b.n	800a678 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	f003 0320 	and.w	r3, r3, #32
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d008      	beq.n	800a62e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	015a      	lsls	r2, r3, #5
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	4413      	add	r3, r2
 800a624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a628:	461a      	mov	r2, r3
 800a62a:	2320      	movs	r3, #32
 800a62c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	b2db      	uxtb	r3, r3
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f010 fb83 	bl	801ad40 <HAL_PCD_DataOutStageCallback>
 800a63a:	e01d      	b.n	800a678 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d114      	bne.n	800a66c <PCD_EP_OutXfrComplete_int+0x1b0>
 800a642:	6879      	ldr	r1, [r7, #4]
 800a644:	683a      	ldr	r2, [r7, #0]
 800a646:	4613      	mov	r3, r2
 800a648:	00db      	lsls	r3, r3, #3
 800a64a:	4413      	add	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	440b      	add	r3, r1
 800a650:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d108      	bne.n	800a66c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6818      	ldr	r0, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a664:	461a      	mov	r2, r3
 800a666:	2100      	movs	r1, #0
 800a668:	f00a fe98 	bl	801539c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	4619      	mov	r1, r3
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f010 fb64 	bl	801ad40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3720      	adds	r7, #32
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	4f54300a 	.word	0x4f54300a
 800a688:	4f54310a 	.word	0x4f54310a

0800a68c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b086      	sub	sp, #24
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	333c      	adds	r3, #60	; 0x3c
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	015a      	lsls	r2, r3, #5
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	4a15      	ldr	r2, [pc, #84]	; (800a714 <PCD_EP_OutSetupPacket_int+0x88>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d90e      	bls.n	800a6e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d009      	beq.n	800a6e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	015a      	lsls	r2, r3, #5
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6d8:	461a      	mov	r2, r3
 800a6da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f010 fb1b 	bl	801ad1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	4a0a      	ldr	r2, [pc, #40]	; (800a714 <PCD_EP_OutSetupPacket_int+0x88>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d90c      	bls.n	800a708 <PCD_EP_OutSetupPacket_int+0x7c>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d108      	bne.n	800a708 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6818      	ldr	r0, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a700:	461a      	mov	r2, r3
 800a702:	2101      	movs	r1, #1
 800a704:	f00a fe4a 	bl	801539c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3718      	adds	r7, #24
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	4f54300a 	.word	0x4f54300a

0800a718 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	460b      	mov	r3, r1
 800a722:	70fb      	strb	r3, [r7, #3]
 800a724:	4613      	mov	r3, r2
 800a726:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a730:	78fb      	ldrb	r3, [r7, #3]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d107      	bne.n	800a746 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a736:	883b      	ldrh	r3, [r7, #0]
 800a738:	0419      	lsls	r1, r3, #16
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	430a      	orrs	r2, r1
 800a742:	629a      	str	r2, [r3, #40]	; 0x28
 800a744:	e028      	b.n	800a798 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a74c:	0c1b      	lsrs	r3, r3, #16
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	4413      	add	r3, r2
 800a752:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a754:	2300      	movs	r3, #0
 800a756:	73fb      	strb	r3, [r7, #15]
 800a758:	e00d      	b.n	800a776 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
 800a760:	3340      	adds	r3, #64	; 0x40
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	0c1b      	lsrs	r3, r3, #16
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	4413      	add	r3, r2
 800a76e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a770:	7bfb      	ldrb	r3, [r7, #15]
 800a772:	3301      	adds	r3, #1
 800a774:	73fb      	strb	r3, [r7, #15]
 800a776:	7bfa      	ldrb	r2, [r7, #15]
 800a778:	78fb      	ldrb	r3, [r7, #3]
 800a77a:	3b01      	subs	r3, #1
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d3ec      	bcc.n	800a75a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a780:	883b      	ldrh	r3, [r7, #0]
 800a782:	0418      	lsls	r0, r3, #16
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6819      	ldr	r1, [r3, #0]
 800a788:	78fb      	ldrb	r3, [r7, #3]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	4302      	orrs	r2, r0
 800a790:	3340      	adds	r3, #64	; 0x40
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	440b      	add	r3, r1
 800a796:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3714      	adds	r7, #20
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a7a6:	b480      	push	{r7}
 800a7a8:	b083      	sub	sp, #12
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	887a      	ldrh	r2, [r7, #2]
 800a7b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7f6:	4b05      	ldr	r3, [pc, #20]	; (800a80c <HAL_PCDEx_ActivateLPM+0x44>)
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3714      	adds	r7, #20
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr
 800a80c:	10000003 	.word	0x10000003

0800a810 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	460b      	mov	r3, r1
 800a81a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a81c:	bf00      	nop
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a830:	4b19      	ldr	r3, [pc, #100]	; (800a898 <HAL_PWREx_ConfigSupply+0x70>)
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	f003 0304 	and.w	r3, r3, #4
 800a838:	2b04      	cmp	r3, #4
 800a83a:	d00a      	beq.n	800a852 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a83c:	4b16      	ldr	r3, [pc, #88]	; (800a898 <HAL_PWREx_ConfigSupply+0x70>)
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	f003 0307 	and.w	r3, r3, #7
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	429a      	cmp	r2, r3
 800a848:	d001      	beq.n	800a84e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e01f      	b.n	800a88e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	e01d      	b.n	800a88e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a852:	4b11      	ldr	r3, [pc, #68]	; (800a898 <HAL_PWREx_ConfigSupply+0x70>)
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	f023 0207 	bic.w	r2, r3, #7
 800a85a:	490f      	ldr	r1, [pc, #60]	; (800a898 <HAL_PWREx_ConfigSupply+0x70>)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4313      	orrs	r3, r2
 800a860:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a862:	f7f9 fcc3 	bl	80041ec <HAL_GetTick>
 800a866:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a868:	e009      	b.n	800a87e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a86a:	f7f9 fcbf 	bl	80041ec <HAL_GetTick>
 800a86e:	4602      	mov	r2, r0
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a878:	d901      	bls.n	800a87e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	e007      	b.n	800a88e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a87e:	4b06      	ldr	r3, [pc, #24]	; (800a898 <HAL_PWREx_ConfigSupply+0x70>)
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a88a:	d1ee      	bne.n	800a86a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	58024800 	.word	0x58024800

0800a89c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a89c:	b480      	push	{r7}
 800a89e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a8a0:	4b05      	ldr	r3, [pc, #20]	; (800a8b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	4a04      	ldr	r2, [pc, #16]	; (800a8b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a8a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8aa:	60d3      	str	r3, [r2, #12]
}
 800a8ac:	bf00      	nop
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	58024800 	.word	0x58024800

0800a8bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b08c      	sub	sp, #48	; 0x30
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d101      	bne.n	800a8ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e3c8      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f003 0301 	and.w	r3, r3, #1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f000 8087 	beq.w	800a9ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8dc:	4b88      	ldr	r3, [pc, #544]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a8de:	691b      	ldr	r3, [r3, #16]
 800a8e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a8e6:	4b86      	ldr	r3, [pc, #536]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ee:	2b10      	cmp	r3, #16
 800a8f0:	d007      	beq.n	800a902 <HAL_RCC_OscConfig+0x46>
 800a8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f4:	2b18      	cmp	r3, #24
 800a8f6:	d110      	bne.n	800a91a <HAL_RCC_OscConfig+0x5e>
 800a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fa:	f003 0303 	and.w	r3, r3, #3
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d10b      	bne.n	800a91a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a902:	4b7f      	ldr	r3, [pc, #508]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d06c      	beq.n	800a9e8 <HAL_RCC_OscConfig+0x12c>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d168      	bne.n	800a9e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e3a2      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a922:	d106      	bne.n	800a932 <HAL_RCC_OscConfig+0x76>
 800a924:	4b76      	ldr	r3, [pc, #472]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a75      	ldr	r2, [pc, #468]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a92a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a92e:	6013      	str	r3, [r2, #0]
 800a930:	e02e      	b.n	800a990 <HAL_RCC_OscConfig+0xd4>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d10c      	bne.n	800a954 <HAL_RCC_OscConfig+0x98>
 800a93a:	4b71      	ldr	r3, [pc, #452]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a70      	ldr	r2, [pc, #448]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a944:	6013      	str	r3, [r2, #0]
 800a946:	4b6e      	ldr	r3, [pc, #440]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a6d      	ldr	r2, [pc, #436]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a94c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	e01d      	b.n	800a990 <HAL_RCC_OscConfig+0xd4>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a95c:	d10c      	bne.n	800a978 <HAL_RCC_OscConfig+0xbc>
 800a95e:	4b68      	ldr	r3, [pc, #416]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a67      	ldr	r2, [pc, #412]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a968:	6013      	str	r3, [r2, #0]
 800a96a:	4b65      	ldr	r3, [pc, #404]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a64      	ldr	r2, [pc, #400]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	e00b      	b.n	800a990 <HAL_RCC_OscConfig+0xd4>
 800a978:	4b61      	ldr	r3, [pc, #388]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a60      	ldr	r2, [pc, #384]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a97e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a982:	6013      	str	r3, [r2, #0]
 800a984:	4b5e      	ldr	r3, [pc, #376]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a5d      	ldr	r2, [pc, #372]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a98a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a98e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d013      	beq.n	800a9c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a998:	f7f9 fc28 	bl	80041ec <HAL_GetTick>
 800a99c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a99e:	e008      	b.n	800a9b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9a0:	f7f9 fc24 	bl	80041ec <HAL_GetTick>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	2b64      	cmp	r3, #100	; 0x64
 800a9ac:	d901      	bls.n	800a9b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a9ae:	2303      	movs	r3, #3
 800a9b0:	e356      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a9b2:	4b53      	ldr	r3, [pc, #332]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d0f0      	beq.n	800a9a0 <HAL_RCC_OscConfig+0xe4>
 800a9be:	e014      	b.n	800a9ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9c0:	f7f9 fc14 	bl	80041ec <HAL_GetTick>
 800a9c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a9c6:	e008      	b.n	800a9da <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9c8:	f7f9 fc10 	bl	80041ec <HAL_GetTick>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	2b64      	cmp	r3, #100	; 0x64
 800a9d4:	d901      	bls.n	800a9da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	e342      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a9da:	4b49      	ldr	r3, [pc, #292]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1f0      	bne.n	800a9c8 <HAL_RCC_OscConfig+0x10c>
 800a9e6:	e000      	b.n	800a9ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 0302 	and.w	r3, r3, #2
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	f000 808c 	beq.w	800ab10 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a9f8:	4b41      	ldr	r3, [pc, #260]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa02:	4b3f      	ldr	r3, [pc, #252]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800aa04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aa08:	6a3b      	ldr	r3, [r7, #32]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d007      	beq.n	800aa1e <HAL_RCC_OscConfig+0x162>
 800aa0e:	6a3b      	ldr	r3, [r7, #32]
 800aa10:	2b18      	cmp	r3, #24
 800aa12:	d137      	bne.n	800aa84 <HAL_RCC_OscConfig+0x1c8>
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	f003 0303 	and.w	r3, r3, #3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d132      	bne.n	800aa84 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa1e:	4b38      	ldr	r3, [pc, #224]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 0304 	and.w	r3, r3, #4
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d005      	beq.n	800aa36 <HAL_RCC_OscConfig+0x17a>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d101      	bne.n	800aa36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e314      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa36:	4b32      	ldr	r3, [pc, #200]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f023 0219 	bic.w	r2, r3, #25
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	492f      	ldr	r1, [pc, #188]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800aa44:	4313      	orrs	r3, r2
 800aa46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa48:	f7f9 fbd0 	bl	80041ec <HAL_GetTick>
 800aa4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa4e:	e008      	b.n	800aa62 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa50:	f7f9 fbcc 	bl	80041ec <HAL_GetTick>
 800aa54:	4602      	mov	r2, r0
 800aa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d901      	bls.n	800aa62 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800aa5e:	2303      	movs	r3, #3
 800aa60:	e2fe      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa62:	4b27      	ldr	r3, [pc, #156]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f003 0304 	and.w	r3, r3, #4
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d0f0      	beq.n	800aa50 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa6e:	4b24      	ldr	r3, [pc, #144]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	061b      	lsls	r3, r3, #24
 800aa7c:	4920      	ldr	r1, [pc, #128]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa82:	e045      	b.n	800ab10 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d026      	beq.n	800aada <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa8c:	4b1c      	ldr	r3, [pc, #112]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f023 0219 	bic.w	r2, r3, #25
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	4919      	ldr	r1, [pc, #100]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa9e:	f7f9 fba5 	bl	80041ec <HAL_GetTick>
 800aaa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aaa4:	e008      	b.n	800aab8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aaa6:	f7f9 fba1 	bl	80041ec <HAL_GetTick>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d901      	bls.n	800aab8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800aab4:	2303      	movs	r3, #3
 800aab6:	e2d3      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aab8:	4b11      	ldr	r3, [pc, #68]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0304 	and.w	r3, r3, #4
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d0f0      	beq.n	800aaa6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aac4:	4b0e      	ldr	r3, [pc, #56]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	061b      	lsls	r3, r3, #24
 800aad2:	490b      	ldr	r1, [pc, #44]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800aad4:	4313      	orrs	r3, r2
 800aad6:	604b      	str	r3, [r1, #4]
 800aad8:	e01a      	b.n	800ab10 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aada:	4b09      	ldr	r3, [pc, #36]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a08      	ldr	r2, [pc, #32]	; (800ab00 <HAL_RCC_OscConfig+0x244>)
 800aae0:	f023 0301 	bic.w	r3, r3, #1
 800aae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aae6:	f7f9 fb81 	bl	80041ec <HAL_GetTick>
 800aaea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aaec:	e00a      	b.n	800ab04 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aaee:	f7f9 fb7d 	bl	80041ec <HAL_GetTick>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf6:	1ad3      	subs	r3, r2, r3
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d903      	bls.n	800ab04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800aafc:	2303      	movs	r3, #3
 800aafe:	e2af      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
 800ab00:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ab04:	4b96      	ldr	r3, [pc, #600]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f003 0304 	and.w	r3, r3, #4
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1ee      	bne.n	800aaee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 0310 	and.w	r3, r3, #16
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d06a      	beq.n	800abf2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab1c:	4b90      	ldr	r3, [pc, #576]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab24:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab26:	4b8e      	ldr	r3, [pc, #568]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ab28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	2b08      	cmp	r3, #8
 800ab30:	d007      	beq.n	800ab42 <HAL_RCC_OscConfig+0x286>
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	2b18      	cmp	r3, #24
 800ab36:	d11b      	bne.n	800ab70 <HAL_RCC_OscConfig+0x2b4>
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f003 0303 	and.w	r3, r3, #3
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d116      	bne.n	800ab70 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab42:	4b87      	ldr	r3, [pc, #540]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d005      	beq.n	800ab5a <HAL_RCC_OscConfig+0x29e>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	69db      	ldr	r3, [r3, #28]
 800ab52:	2b80      	cmp	r3, #128	; 0x80
 800ab54:	d001      	beq.n	800ab5a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	e282      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab5a:	4b81      	ldr	r3, [pc, #516]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	061b      	lsls	r3, r3, #24
 800ab68:	497d      	ldr	r1, [pc, #500]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab6e:	e040      	b.n	800abf2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	69db      	ldr	r3, [r3, #28]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d023      	beq.n	800abc0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ab78:	4b79      	ldr	r3, [pc, #484]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a78      	ldr	r2, [pc, #480]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ab7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab84:	f7f9 fb32 	bl	80041ec <HAL_GetTick>
 800ab88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab8a:	e008      	b.n	800ab9e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ab8c:	f7f9 fb2e 	bl	80041ec <HAL_GetTick>
 800ab90:	4602      	mov	r2, r0
 800ab92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	d901      	bls.n	800ab9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	e260      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab9e:	4b70      	ldr	r3, [pc, #448]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d0f0      	beq.n	800ab8c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800abaa:	4b6d      	ldr	r3, [pc, #436]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	061b      	lsls	r3, r3, #24
 800abb8:	4969      	ldr	r1, [pc, #420]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800abba:	4313      	orrs	r3, r2
 800abbc:	60cb      	str	r3, [r1, #12]
 800abbe:	e018      	b.n	800abf2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800abc0:	4b67      	ldr	r3, [pc, #412]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a66      	ldr	r2, [pc, #408]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800abc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abcc:	f7f9 fb0e 	bl	80041ec <HAL_GetTick>
 800abd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800abd2:	e008      	b.n	800abe6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800abd4:	f7f9 fb0a 	bl	80041ec <HAL_GetTick>
 800abd8:	4602      	mov	r2, r0
 800abda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abdc:	1ad3      	subs	r3, r2, r3
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d901      	bls.n	800abe6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800abe2:	2303      	movs	r3, #3
 800abe4:	e23c      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800abe6:	4b5e      	ldr	r3, [pc, #376]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1f0      	bne.n	800abd4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f003 0308 	and.w	r3, r3, #8
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d036      	beq.n	800ac6c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d019      	beq.n	800ac3a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac06:	4b56      	ldr	r3, [pc, #344]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ac08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac0a:	4a55      	ldr	r2, [pc, #340]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ac0c:	f043 0301 	orr.w	r3, r3, #1
 800ac10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac12:	f7f9 faeb 	bl	80041ec <HAL_GetTick>
 800ac16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac18:	e008      	b.n	800ac2c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac1a:	f7f9 fae7 	bl	80041ec <HAL_GetTick>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d901      	bls.n	800ac2c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e219      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac2c:	4b4c      	ldr	r3, [pc, #304]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ac2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac30:	f003 0302 	and.w	r3, r3, #2
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d0f0      	beq.n	800ac1a <HAL_RCC_OscConfig+0x35e>
 800ac38:	e018      	b.n	800ac6c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac3a:	4b49      	ldr	r3, [pc, #292]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ac3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac3e:	4a48      	ldr	r2, [pc, #288]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ac40:	f023 0301 	bic.w	r3, r3, #1
 800ac44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac46:	f7f9 fad1 	bl	80041ec <HAL_GetTick>
 800ac4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac4c:	e008      	b.n	800ac60 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac4e:	f7f9 facd 	bl	80041ec <HAL_GetTick>
 800ac52:	4602      	mov	r2, r0
 800ac54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac56:	1ad3      	subs	r3, r2, r3
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d901      	bls.n	800ac60 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	e1ff      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac60:	4b3f      	ldr	r3, [pc, #252]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ac62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac64:	f003 0302 	and.w	r3, r3, #2
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1f0      	bne.n	800ac4e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 0320 	and.w	r3, r3, #32
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d036      	beq.n	800ace6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d019      	beq.n	800acb4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ac80:	4b37      	ldr	r3, [pc, #220]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a36      	ldr	r2, [pc, #216]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ac86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ac8c:	f7f9 faae 	bl	80041ec <HAL_GetTick>
 800ac90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ac92:	e008      	b.n	800aca6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac94:	f7f9 faaa 	bl	80041ec <HAL_GetTick>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9c:	1ad3      	subs	r3, r2, r3
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d901      	bls.n	800aca6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800aca2:	2303      	movs	r3, #3
 800aca4:	e1dc      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aca6:	4b2e      	ldr	r3, [pc, #184]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d0f0      	beq.n	800ac94 <HAL_RCC_OscConfig+0x3d8>
 800acb2:	e018      	b.n	800ace6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800acb4:	4b2a      	ldr	r3, [pc, #168]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a29      	ldr	r2, [pc, #164]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800acba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800acc0:	f7f9 fa94 	bl	80041ec <HAL_GetTick>
 800acc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800acc6:	e008      	b.n	800acda <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800acc8:	f7f9 fa90 	bl	80041ec <HAL_GetTick>
 800accc:	4602      	mov	r2, r0
 800acce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	d901      	bls.n	800acda <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800acd6:	2303      	movs	r3, #3
 800acd8:	e1c2      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800acda:	4b21      	ldr	r3, [pc, #132]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1f0      	bne.n	800acc8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f003 0304 	and.w	r3, r3, #4
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f000 8086 	beq.w	800ae00 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800acf4:	4b1b      	ldr	r3, [pc, #108]	; (800ad64 <HAL_RCC_OscConfig+0x4a8>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a1a      	ldr	r2, [pc, #104]	; (800ad64 <HAL_RCC_OscConfig+0x4a8>)
 800acfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ad00:	f7f9 fa74 	bl	80041ec <HAL_GetTick>
 800ad04:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad06:	e008      	b.n	800ad1a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad08:	f7f9 fa70 	bl	80041ec <HAL_GetTick>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	2b64      	cmp	r3, #100	; 0x64
 800ad14:	d901      	bls.n	800ad1a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800ad16:	2303      	movs	r3, #3
 800ad18:	e1a2      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad1a:	4b12      	ldr	r3, [pc, #72]	; (800ad64 <HAL_RCC_OscConfig+0x4a8>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0f0      	beq.n	800ad08 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d106      	bne.n	800ad3c <HAL_RCC_OscConfig+0x480>
 800ad2e:	4b0c      	ldr	r3, [pc, #48]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ad30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad32:	4a0b      	ldr	r2, [pc, #44]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ad34:	f043 0301 	orr.w	r3, r3, #1
 800ad38:	6713      	str	r3, [r2, #112]	; 0x70
 800ad3a:	e032      	b.n	800ada2 <HAL_RCC_OscConfig+0x4e6>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d111      	bne.n	800ad68 <HAL_RCC_OscConfig+0x4ac>
 800ad44:	4b06      	ldr	r3, [pc, #24]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ad46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad48:	4a05      	ldr	r2, [pc, #20]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ad4a:	f023 0301 	bic.w	r3, r3, #1
 800ad4e:	6713      	str	r3, [r2, #112]	; 0x70
 800ad50:	4b03      	ldr	r3, [pc, #12]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ad52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad54:	4a02      	ldr	r2, [pc, #8]	; (800ad60 <HAL_RCC_OscConfig+0x4a4>)
 800ad56:	f023 0304 	bic.w	r3, r3, #4
 800ad5a:	6713      	str	r3, [r2, #112]	; 0x70
 800ad5c:	e021      	b.n	800ada2 <HAL_RCC_OscConfig+0x4e6>
 800ad5e:	bf00      	nop
 800ad60:	58024400 	.word	0x58024400
 800ad64:	58024800 	.word	0x58024800
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	2b05      	cmp	r3, #5
 800ad6e:	d10c      	bne.n	800ad8a <HAL_RCC_OscConfig+0x4ce>
 800ad70:	4b83      	ldr	r3, [pc, #524]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800ad72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad74:	4a82      	ldr	r2, [pc, #520]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800ad76:	f043 0304 	orr.w	r3, r3, #4
 800ad7a:	6713      	str	r3, [r2, #112]	; 0x70
 800ad7c:	4b80      	ldr	r3, [pc, #512]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800ad7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad80:	4a7f      	ldr	r2, [pc, #508]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800ad82:	f043 0301 	orr.w	r3, r3, #1
 800ad86:	6713      	str	r3, [r2, #112]	; 0x70
 800ad88:	e00b      	b.n	800ada2 <HAL_RCC_OscConfig+0x4e6>
 800ad8a:	4b7d      	ldr	r3, [pc, #500]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800ad8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad8e:	4a7c      	ldr	r2, [pc, #496]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800ad90:	f023 0301 	bic.w	r3, r3, #1
 800ad94:	6713      	str	r3, [r2, #112]	; 0x70
 800ad96:	4b7a      	ldr	r3, [pc, #488]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800ad98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad9a:	4a79      	ldr	r2, [pc, #484]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800ad9c:	f023 0304 	bic.w	r3, r3, #4
 800ada0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d015      	beq.n	800add6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adaa:	f7f9 fa1f 	bl	80041ec <HAL_GetTick>
 800adae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800adb0:	e00a      	b.n	800adc8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800adb2:	f7f9 fa1b 	bl	80041ec <HAL_GetTick>
 800adb6:	4602      	mov	r2, r0
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d901      	bls.n	800adc8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800adc4:	2303      	movs	r3, #3
 800adc6:	e14b      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800adc8:	4b6d      	ldr	r3, [pc, #436]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800adca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adcc:	f003 0302 	and.w	r3, r3, #2
 800add0:	2b00      	cmp	r3, #0
 800add2:	d0ee      	beq.n	800adb2 <HAL_RCC_OscConfig+0x4f6>
 800add4:	e014      	b.n	800ae00 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800add6:	f7f9 fa09 	bl	80041ec <HAL_GetTick>
 800adda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800addc:	e00a      	b.n	800adf4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800adde:	f7f9 fa05 	bl	80041ec <HAL_GetTick>
 800ade2:	4602      	mov	r2, r0
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	1ad3      	subs	r3, r2, r3
 800ade8:	f241 3288 	movw	r2, #5000	; 0x1388
 800adec:	4293      	cmp	r3, r2
 800adee:	d901      	bls.n	800adf4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800adf0:	2303      	movs	r3, #3
 800adf2:	e135      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800adf4:	4b62      	ldr	r3, [pc, #392]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800adf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf8:	f003 0302 	and.w	r3, r3, #2
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1ee      	bne.n	800adde <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 812a 	beq.w	800b05e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ae0a:	4b5d      	ldr	r3, [pc, #372]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae12:	2b18      	cmp	r3, #24
 800ae14:	f000 80ba 	beq.w	800af8c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	f040 8095 	bne.w	800af4c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae22:	4b57      	ldr	r3, [pc, #348]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a56      	ldr	r2, [pc, #344]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800ae28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae2e:	f7f9 f9dd 	bl	80041ec <HAL_GetTick>
 800ae32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae34:	e008      	b.n	800ae48 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae36:	f7f9 f9d9 	bl	80041ec <HAL_GetTick>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	2b02      	cmp	r3, #2
 800ae42:	d901      	bls.n	800ae48 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e10b      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae48:	4b4d      	ldr	r3, [pc, #308]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1f0      	bne.n	800ae36 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae54:	4b4a      	ldr	r3, [pc, #296]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800ae56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae58:	4b4a      	ldr	r3, [pc, #296]	; (800af84 <HAL_RCC_OscConfig+0x6c8>)
 800ae5a:	4013      	ands	r3, r2
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae64:	0112      	lsls	r2, r2, #4
 800ae66:	430a      	orrs	r2, r1
 800ae68:	4945      	ldr	r1, [pc, #276]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	628b      	str	r3, [r1, #40]	; 0x28
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae72:	3b01      	subs	r3, #1
 800ae74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	025b      	lsls	r3, r3, #9
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	431a      	orrs	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	041b      	lsls	r3, r3, #16
 800ae8c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ae90:	431a      	orrs	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae96:	3b01      	subs	r3, #1
 800ae98:	061b      	lsls	r3, r3, #24
 800ae9a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ae9e:	4938      	ldr	r1, [pc, #224]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800aea0:	4313      	orrs	r3, r2
 800aea2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800aea4:	4b36      	ldr	r3, [pc, #216]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800aea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea8:	4a35      	ldr	r2, [pc, #212]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800aeaa:	f023 0301 	bic.w	r3, r3, #1
 800aeae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aeb0:	4b33      	ldr	r3, [pc, #204]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800aeb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aeb4:	4b34      	ldr	r3, [pc, #208]	; (800af88 <HAL_RCC_OscConfig+0x6cc>)
 800aeb6:	4013      	ands	r3, r2
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aebc:	00d2      	lsls	r2, r2, #3
 800aebe:	4930      	ldr	r1, [pc, #192]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800aec0:	4313      	orrs	r3, r2
 800aec2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aec4:	4b2e      	ldr	r3, [pc, #184]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800aec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec8:	f023 020c 	bic.w	r2, r3, #12
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed0:	492b      	ldr	r1, [pc, #172]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800aed2:	4313      	orrs	r3, r2
 800aed4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aed6:	4b2a      	ldr	r3, [pc, #168]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800aed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeda:	f023 0202 	bic.w	r2, r3, #2
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aee2:	4927      	ldr	r1, [pc, #156]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800aee4:	4313      	orrs	r3, r2
 800aee6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aee8:	4b25      	ldr	r3, [pc, #148]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800aeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeec:	4a24      	ldr	r2, [pc, #144]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800aeee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aef4:	4b22      	ldr	r3, [pc, #136]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800aef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef8:	4a21      	ldr	r2, [pc, #132]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800aefa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aefe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800af00:	4b1f      	ldr	r3, [pc, #124]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800af02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af04:	4a1e      	ldr	r2, [pc, #120]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800af06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800af0c:	4b1c      	ldr	r3, [pc, #112]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800af0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af10:	4a1b      	ldr	r2, [pc, #108]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800af12:	f043 0301 	orr.w	r3, r3, #1
 800af16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af18:	4b19      	ldr	r3, [pc, #100]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a18      	ldr	r2, [pc, #96]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800af1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af24:	f7f9 f962 	bl	80041ec <HAL_GetTick>
 800af28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af2a:	e008      	b.n	800af3e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af2c:	f7f9 f95e 	bl	80041ec <HAL_GetTick>
 800af30:	4602      	mov	r2, r0
 800af32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	2b02      	cmp	r3, #2
 800af38:	d901      	bls.n	800af3e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800af3a:	2303      	movs	r3, #3
 800af3c:	e090      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af3e:	4b10      	ldr	r3, [pc, #64]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af46:	2b00      	cmp	r3, #0
 800af48:	d0f0      	beq.n	800af2c <HAL_RCC_OscConfig+0x670>
 800af4a:	e088      	b.n	800b05e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af4c:	4b0c      	ldr	r3, [pc, #48]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a0b      	ldr	r2, [pc, #44]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800af52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af58:	f7f9 f948 	bl	80041ec <HAL_GetTick>
 800af5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af5e:	e008      	b.n	800af72 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af60:	f7f9 f944 	bl	80041ec <HAL_GetTick>
 800af64:	4602      	mov	r2, r0
 800af66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af68:	1ad3      	subs	r3, r2, r3
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d901      	bls.n	800af72 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800af6e:	2303      	movs	r3, #3
 800af70:	e076      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af72:	4b03      	ldr	r3, [pc, #12]	; (800af80 <HAL_RCC_OscConfig+0x6c4>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1f0      	bne.n	800af60 <HAL_RCC_OscConfig+0x6a4>
 800af7e:	e06e      	b.n	800b05e <HAL_RCC_OscConfig+0x7a2>
 800af80:	58024400 	.word	0x58024400
 800af84:	fffffc0c 	.word	0xfffffc0c
 800af88:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800af8c:	4b36      	ldr	r3, [pc, #216]	; (800b068 <HAL_RCC_OscConfig+0x7ac>)
 800af8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800af92:	4b35      	ldr	r3, [pc, #212]	; (800b068 <HAL_RCC_OscConfig+0x7ac>)
 800af94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af96:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d031      	beq.n	800b004 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	f003 0203 	and.w	r2, r3, #3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800afaa:	429a      	cmp	r2, r3
 800afac:	d12a      	bne.n	800b004 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	091b      	lsrs	r3, r3, #4
 800afb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afba:	429a      	cmp	r2, r3
 800afbc:	d122      	bne.n	800b004 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800afca:	429a      	cmp	r2, r3
 800afcc:	d11a      	bne.n	800b004 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	0a5b      	lsrs	r3, r3, #9
 800afd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afda:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800afdc:	429a      	cmp	r2, r3
 800afde:	d111      	bne.n	800b004 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	0c1b      	lsrs	r3, r3, #16
 800afe4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800afee:	429a      	cmp	r2, r3
 800aff0:	d108      	bne.n	800b004 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	0e1b      	lsrs	r3, r3, #24
 800aff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800affe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b000:	429a      	cmp	r2, r3
 800b002:	d001      	beq.n	800b008 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	e02b      	b.n	800b060 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b008:	4b17      	ldr	r3, [pc, #92]	; (800b068 <HAL_RCC_OscConfig+0x7ac>)
 800b00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b00c:	08db      	lsrs	r3, r3, #3
 800b00e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b012:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d01f      	beq.n	800b05e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b01e:	4b12      	ldr	r3, [pc, #72]	; (800b068 <HAL_RCC_OscConfig+0x7ac>)
 800b020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b022:	4a11      	ldr	r2, [pc, #68]	; (800b068 <HAL_RCC_OscConfig+0x7ac>)
 800b024:	f023 0301 	bic.w	r3, r3, #1
 800b028:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b02a:	f7f9 f8df 	bl	80041ec <HAL_GetTick>
 800b02e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b030:	bf00      	nop
 800b032:	f7f9 f8db 	bl	80041ec <HAL_GetTick>
 800b036:	4602      	mov	r2, r0
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d0f9      	beq.n	800b032 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b03e:	4b0a      	ldr	r3, [pc, #40]	; (800b068 <HAL_RCC_OscConfig+0x7ac>)
 800b040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b042:	4b0a      	ldr	r3, [pc, #40]	; (800b06c <HAL_RCC_OscConfig+0x7b0>)
 800b044:	4013      	ands	r3, r2
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b04a:	00d2      	lsls	r2, r2, #3
 800b04c:	4906      	ldr	r1, [pc, #24]	; (800b068 <HAL_RCC_OscConfig+0x7ac>)
 800b04e:	4313      	orrs	r3, r2
 800b050:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b052:	4b05      	ldr	r3, [pc, #20]	; (800b068 <HAL_RCC_OscConfig+0x7ac>)
 800b054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b056:	4a04      	ldr	r2, [pc, #16]	; (800b068 <HAL_RCC_OscConfig+0x7ac>)
 800b058:	f043 0301 	orr.w	r3, r3, #1
 800b05c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3730      	adds	r7, #48	; 0x30
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	58024400 	.word	0x58024400
 800b06c:	ffff0007 	.word	0xffff0007

0800b070 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d101      	bne.n	800b084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	e19c      	b.n	800b3be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b084:	4b8a      	ldr	r3, [pc, #552]	; (800b2b0 <HAL_RCC_ClockConfig+0x240>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 030f 	and.w	r3, r3, #15
 800b08c:	683a      	ldr	r2, [r7, #0]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d910      	bls.n	800b0b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b092:	4b87      	ldr	r3, [pc, #540]	; (800b2b0 <HAL_RCC_ClockConfig+0x240>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f023 020f 	bic.w	r2, r3, #15
 800b09a:	4985      	ldr	r1, [pc, #532]	; (800b2b0 <HAL_RCC_ClockConfig+0x240>)
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0a2:	4b83      	ldr	r3, [pc, #524]	; (800b2b0 <HAL_RCC_ClockConfig+0x240>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 030f 	and.w	r3, r3, #15
 800b0aa:	683a      	ldr	r2, [r7, #0]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d001      	beq.n	800b0b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e184      	b.n	800b3be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 0304 	and.w	r3, r3, #4
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d010      	beq.n	800b0e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	691a      	ldr	r2, [r3, #16]
 800b0c4:	4b7b      	ldr	r3, [pc, #492]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d908      	bls.n	800b0e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b0d0:	4b78      	ldr	r3, [pc, #480]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b0d2:	699b      	ldr	r3, [r3, #24]
 800b0d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	4975      	ldr	r1, [pc, #468]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f003 0308 	and.w	r3, r3, #8
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d010      	beq.n	800b110 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	695a      	ldr	r2, [r3, #20]
 800b0f2:	4b70      	ldr	r3, [pc, #448]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b0f4:	69db      	ldr	r3, [r3, #28]
 800b0f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d908      	bls.n	800b110 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b0fe:	4b6d      	ldr	r3, [pc, #436]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b100:	69db      	ldr	r3, [r3, #28]
 800b102:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	496a      	ldr	r1, [pc, #424]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b10c:	4313      	orrs	r3, r2
 800b10e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 0310 	and.w	r3, r3, #16
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d010      	beq.n	800b13e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	699a      	ldr	r2, [r3, #24]
 800b120:	4b64      	ldr	r3, [pc, #400]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b122:	69db      	ldr	r3, [r3, #28]
 800b124:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b128:	429a      	cmp	r2, r3
 800b12a:	d908      	bls.n	800b13e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b12c:	4b61      	ldr	r3, [pc, #388]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b12e:	69db      	ldr	r3, [r3, #28]
 800b130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	699b      	ldr	r3, [r3, #24]
 800b138:	495e      	ldr	r1, [pc, #376]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b13a:	4313      	orrs	r3, r2
 800b13c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f003 0320 	and.w	r3, r3, #32
 800b146:	2b00      	cmp	r3, #0
 800b148:	d010      	beq.n	800b16c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	69da      	ldr	r2, [r3, #28]
 800b14e:	4b59      	ldr	r3, [pc, #356]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b150:	6a1b      	ldr	r3, [r3, #32]
 800b152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b156:	429a      	cmp	r2, r3
 800b158:	d908      	bls.n	800b16c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b15a:	4b56      	ldr	r3, [pc, #344]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b15c:	6a1b      	ldr	r3, [r3, #32]
 800b15e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	69db      	ldr	r3, [r3, #28]
 800b166:	4953      	ldr	r1, [pc, #332]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b168:	4313      	orrs	r3, r2
 800b16a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 0302 	and.w	r3, r3, #2
 800b174:	2b00      	cmp	r3, #0
 800b176:	d010      	beq.n	800b19a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	68da      	ldr	r2, [r3, #12]
 800b17c:	4b4d      	ldr	r3, [pc, #308]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	f003 030f 	and.w	r3, r3, #15
 800b184:	429a      	cmp	r2, r3
 800b186:	d908      	bls.n	800b19a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b188:	4b4a      	ldr	r3, [pc, #296]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	f023 020f 	bic.w	r2, r3, #15
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	4947      	ldr	r1, [pc, #284]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b196:	4313      	orrs	r3, r2
 800b198:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 0301 	and.w	r3, r3, #1
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d055      	beq.n	800b252 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b1a6:	4b43      	ldr	r3, [pc, #268]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b1a8:	699b      	ldr	r3, [r3, #24]
 800b1aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	4940      	ldr	r1, [pc, #256]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	2b02      	cmp	r3, #2
 800b1be:	d107      	bne.n	800b1d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b1c0:	4b3c      	ldr	r3, [pc, #240]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d121      	bne.n	800b210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e0f6      	b.n	800b3be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	2b03      	cmp	r3, #3
 800b1d6:	d107      	bne.n	800b1e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1d8:	4b36      	ldr	r3, [pc, #216]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d115      	bne.n	800b210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e0ea      	b.n	800b3be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d107      	bne.n	800b200 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b1f0:	4b30      	ldr	r3, [pc, #192]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d109      	bne.n	800b210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e0de      	b.n	800b3be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b200:	4b2c      	ldr	r3, [pc, #176]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0304 	and.w	r3, r3, #4
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d101      	bne.n	800b210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	e0d6      	b.n	800b3be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b210:	4b28      	ldr	r3, [pc, #160]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b212:	691b      	ldr	r3, [r3, #16]
 800b214:	f023 0207 	bic.w	r2, r3, #7
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	4925      	ldr	r1, [pc, #148]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b21e:	4313      	orrs	r3, r2
 800b220:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b222:	f7f8 ffe3 	bl	80041ec <HAL_GetTick>
 800b226:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b228:	e00a      	b.n	800b240 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b22a:	f7f8 ffdf 	bl	80041ec <HAL_GetTick>
 800b22e:	4602      	mov	r2, r0
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	1ad3      	subs	r3, r2, r3
 800b234:	f241 3288 	movw	r2, #5000	; 0x1388
 800b238:	4293      	cmp	r3, r2
 800b23a:	d901      	bls.n	800b240 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b23c:	2303      	movs	r3, #3
 800b23e:	e0be      	b.n	800b3be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b240:	4b1c      	ldr	r3, [pc, #112]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	00db      	lsls	r3, r3, #3
 800b24e:	429a      	cmp	r2, r3
 800b250:	d1eb      	bne.n	800b22a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 0302 	and.w	r3, r3, #2
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d010      	beq.n	800b280 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	68da      	ldr	r2, [r3, #12]
 800b262:	4b14      	ldr	r3, [pc, #80]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b264:	699b      	ldr	r3, [r3, #24]
 800b266:	f003 030f 	and.w	r3, r3, #15
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d208      	bcs.n	800b280 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b26e:	4b11      	ldr	r3, [pc, #68]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b270:	699b      	ldr	r3, [r3, #24]
 800b272:	f023 020f 	bic.w	r2, r3, #15
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	490e      	ldr	r1, [pc, #56]	; (800b2b4 <HAL_RCC_ClockConfig+0x244>)
 800b27c:	4313      	orrs	r3, r2
 800b27e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b280:	4b0b      	ldr	r3, [pc, #44]	; (800b2b0 <HAL_RCC_ClockConfig+0x240>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f003 030f 	and.w	r3, r3, #15
 800b288:	683a      	ldr	r2, [r7, #0]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d214      	bcs.n	800b2b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b28e:	4b08      	ldr	r3, [pc, #32]	; (800b2b0 <HAL_RCC_ClockConfig+0x240>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f023 020f 	bic.w	r2, r3, #15
 800b296:	4906      	ldr	r1, [pc, #24]	; (800b2b0 <HAL_RCC_ClockConfig+0x240>)
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b29e:	4b04      	ldr	r3, [pc, #16]	; (800b2b0 <HAL_RCC_ClockConfig+0x240>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 030f 	and.w	r3, r3, #15
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d005      	beq.n	800b2b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	e086      	b.n	800b3be <HAL_RCC_ClockConfig+0x34e>
 800b2b0:	52002000 	.word	0x52002000
 800b2b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f003 0304 	and.w	r3, r3, #4
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d010      	beq.n	800b2e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	691a      	ldr	r2, [r3, #16]
 800b2c8:	4b3f      	ldr	r3, [pc, #252]	; (800b3c8 <HAL_RCC_ClockConfig+0x358>)
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d208      	bcs.n	800b2e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b2d4:	4b3c      	ldr	r3, [pc, #240]	; (800b3c8 <HAL_RCC_ClockConfig+0x358>)
 800b2d6:	699b      	ldr	r3, [r3, #24]
 800b2d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	691b      	ldr	r3, [r3, #16]
 800b2e0:	4939      	ldr	r1, [pc, #228]	; (800b3c8 <HAL_RCC_ClockConfig+0x358>)
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 0308 	and.w	r3, r3, #8
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d010      	beq.n	800b314 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	695a      	ldr	r2, [r3, #20]
 800b2f6:	4b34      	ldr	r3, [pc, #208]	; (800b3c8 <HAL_RCC_ClockConfig+0x358>)
 800b2f8:	69db      	ldr	r3, [r3, #28]
 800b2fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d208      	bcs.n	800b314 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b302:	4b31      	ldr	r3, [pc, #196]	; (800b3c8 <HAL_RCC_ClockConfig+0x358>)
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	695b      	ldr	r3, [r3, #20]
 800b30e:	492e      	ldr	r1, [pc, #184]	; (800b3c8 <HAL_RCC_ClockConfig+0x358>)
 800b310:	4313      	orrs	r3, r2
 800b312:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f003 0310 	and.w	r3, r3, #16
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d010      	beq.n	800b342 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	699a      	ldr	r2, [r3, #24]
 800b324:	4b28      	ldr	r3, [pc, #160]	; (800b3c8 <HAL_RCC_ClockConfig+0x358>)
 800b326:	69db      	ldr	r3, [r3, #28]
 800b328:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d208      	bcs.n	800b342 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b330:	4b25      	ldr	r3, [pc, #148]	; (800b3c8 <HAL_RCC_ClockConfig+0x358>)
 800b332:	69db      	ldr	r3, [r3, #28]
 800b334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	4922      	ldr	r1, [pc, #136]	; (800b3c8 <HAL_RCC_ClockConfig+0x358>)
 800b33e:	4313      	orrs	r3, r2
 800b340:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f003 0320 	and.w	r3, r3, #32
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d010      	beq.n	800b370 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	69da      	ldr	r2, [r3, #28]
 800b352:	4b1d      	ldr	r3, [pc, #116]	; (800b3c8 <HAL_RCC_ClockConfig+0x358>)
 800b354:	6a1b      	ldr	r3, [r3, #32]
 800b356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d208      	bcs.n	800b370 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b35e:	4b1a      	ldr	r3, [pc, #104]	; (800b3c8 <HAL_RCC_ClockConfig+0x358>)
 800b360:	6a1b      	ldr	r3, [r3, #32]
 800b362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	69db      	ldr	r3, [r3, #28]
 800b36a:	4917      	ldr	r1, [pc, #92]	; (800b3c8 <HAL_RCC_ClockConfig+0x358>)
 800b36c:	4313      	orrs	r3, r2
 800b36e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b370:	f000 f89e 	bl	800b4b0 <HAL_RCC_GetSysClockFreq>
 800b374:	4602      	mov	r2, r0
 800b376:	4b14      	ldr	r3, [pc, #80]	; (800b3c8 <HAL_RCC_ClockConfig+0x358>)
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	0a1b      	lsrs	r3, r3, #8
 800b37c:	f003 030f 	and.w	r3, r3, #15
 800b380:	4912      	ldr	r1, [pc, #72]	; (800b3cc <HAL_RCC_ClockConfig+0x35c>)
 800b382:	5ccb      	ldrb	r3, [r1, r3]
 800b384:	f003 031f 	and.w	r3, r3, #31
 800b388:	fa22 f303 	lsr.w	r3, r2, r3
 800b38c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b38e:	4b0e      	ldr	r3, [pc, #56]	; (800b3c8 <HAL_RCC_ClockConfig+0x358>)
 800b390:	699b      	ldr	r3, [r3, #24]
 800b392:	f003 030f 	and.w	r3, r3, #15
 800b396:	4a0d      	ldr	r2, [pc, #52]	; (800b3cc <HAL_RCC_ClockConfig+0x35c>)
 800b398:	5cd3      	ldrb	r3, [r2, r3]
 800b39a:	f003 031f 	and.w	r3, r3, #31
 800b39e:	693a      	ldr	r2, [r7, #16]
 800b3a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a4:	4a0a      	ldr	r2, [pc, #40]	; (800b3d0 <HAL_RCC_ClockConfig+0x360>)
 800b3a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b3a8:	4a0a      	ldr	r2, [pc, #40]	; (800b3d4 <HAL_RCC_ClockConfig+0x364>)
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b3ae:	4b0a      	ldr	r3, [pc, #40]	; (800b3d8 <HAL_RCC_ClockConfig+0x368>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7f8 fed0 	bl	8004158 <HAL_InitTick>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3718      	adds	r7, #24
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	58024400 	.word	0x58024400
 800b3cc:	080203f0 	.word	0x080203f0
 800b3d0:	24000104 	.word	0x24000104
 800b3d4:	24000100 	.word	0x24000100
 800b3d8:	24000108 	.word	0x24000108

0800b3dc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b08c      	sub	sp, #48	; 0x30
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d12a      	bne.n	800b444 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b3ee:	4b2d      	ldr	r3, [pc, #180]	; (800b4a4 <HAL_RCC_MCOConfig+0xc8>)
 800b3f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3f4:	4a2b      	ldr	r2, [pc, #172]	; (800b4a4 <HAL_RCC_MCOConfig+0xc8>)
 800b3f6:	f043 0301 	orr.w	r3, r3, #1
 800b3fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b3fe:	4b29      	ldr	r3, [pc, #164]	; (800b4a4 <HAL_RCC_MCOConfig+0xc8>)
 800b400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b404:	f003 0301 	and.w	r3, r3, #1
 800b408:	61bb      	str	r3, [r7, #24]
 800b40a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b40c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b412:	2302      	movs	r3, #2
 800b414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b416:	2303      	movs	r3, #3
 800b418:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b41a:	2300      	movs	r3, #0
 800b41c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b41e:	2300      	movs	r3, #0
 800b420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b422:	f107 031c 	add.w	r3, r7, #28
 800b426:	4619      	mov	r1, r3
 800b428:	481f      	ldr	r0, [pc, #124]	; (800b4a8 <HAL_RCC_MCOConfig+0xcc>)
 800b42a:	f7fd fc29 	bl	8008c80 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b42e:	4b1d      	ldr	r3, [pc, #116]	; (800b4a4 <HAL_RCC_MCOConfig+0xc8>)
 800b430:	691b      	ldr	r3, [r3, #16]
 800b432:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b436:	68b9      	ldr	r1, [r7, #8]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	430b      	orrs	r3, r1
 800b43c:	4919      	ldr	r1, [pc, #100]	; (800b4a4 <HAL_RCC_MCOConfig+0xc8>)
 800b43e:	4313      	orrs	r3, r2
 800b440:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b442:	e02a      	b.n	800b49a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b444:	4b17      	ldr	r3, [pc, #92]	; (800b4a4 <HAL_RCC_MCOConfig+0xc8>)
 800b446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b44a:	4a16      	ldr	r2, [pc, #88]	; (800b4a4 <HAL_RCC_MCOConfig+0xc8>)
 800b44c:	f043 0304 	orr.w	r3, r3, #4
 800b450:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b454:	4b13      	ldr	r3, [pc, #76]	; (800b4a4 <HAL_RCC_MCOConfig+0xc8>)
 800b456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b45a:	f003 0304 	and.w	r3, r3, #4
 800b45e:	617b      	str	r3, [r7, #20]
 800b460:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b462:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b468:	2302      	movs	r3, #2
 800b46a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b46c:	2303      	movs	r3, #3
 800b46e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b470:	2300      	movs	r3, #0
 800b472:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b474:	2300      	movs	r3, #0
 800b476:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b478:	f107 031c 	add.w	r3, r7, #28
 800b47c:	4619      	mov	r1, r3
 800b47e:	480b      	ldr	r0, [pc, #44]	; (800b4ac <HAL_RCC_MCOConfig+0xd0>)
 800b480:	f7fd fbfe 	bl	8008c80 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b484:	4b07      	ldr	r3, [pc, #28]	; (800b4a4 <HAL_RCC_MCOConfig+0xc8>)
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	01d9      	lsls	r1, r3, #7
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	430b      	orrs	r3, r1
 800b494:	4903      	ldr	r1, [pc, #12]	; (800b4a4 <HAL_RCC_MCOConfig+0xc8>)
 800b496:	4313      	orrs	r3, r2
 800b498:	610b      	str	r3, [r1, #16]
}
 800b49a:	bf00      	nop
 800b49c:	3730      	adds	r7, #48	; 0x30
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	58024400 	.word	0x58024400
 800b4a8:	58020000 	.word	0x58020000
 800b4ac:	58020800 	.word	0x58020800

0800b4b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b089      	sub	sp, #36	; 0x24
 800b4b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b4b6:	4bb3      	ldr	r3, [pc, #716]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b4be:	2b18      	cmp	r3, #24
 800b4c0:	f200 8155 	bhi.w	800b76e <HAL_RCC_GetSysClockFreq+0x2be>
 800b4c4:	a201      	add	r2, pc, #4	; (adr r2, 800b4cc <HAL_RCC_GetSysClockFreq+0x1c>)
 800b4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ca:	bf00      	nop
 800b4cc:	0800b531 	.word	0x0800b531
 800b4d0:	0800b76f 	.word	0x0800b76f
 800b4d4:	0800b76f 	.word	0x0800b76f
 800b4d8:	0800b76f 	.word	0x0800b76f
 800b4dc:	0800b76f 	.word	0x0800b76f
 800b4e0:	0800b76f 	.word	0x0800b76f
 800b4e4:	0800b76f 	.word	0x0800b76f
 800b4e8:	0800b76f 	.word	0x0800b76f
 800b4ec:	0800b557 	.word	0x0800b557
 800b4f0:	0800b76f 	.word	0x0800b76f
 800b4f4:	0800b76f 	.word	0x0800b76f
 800b4f8:	0800b76f 	.word	0x0800b76f
 800b4fc:	0800b76f 	.word	0x0800b76f
 800b500:	0800b76f 	.word	0x0800b76f
 800b504:	0800b76f 	.word	0x0800b76f
 800b508:	0800b76f 	.word	0x0800b76f
 800b50c:	0800b55d 	.word	0x0800b55d
 800b510:	0800b76f 	.word	0x0800b76f
 800b514:	0800b76f 	.word	0x0800b76f
 800b518:	0800b76f 	.word	0x0800b76f
 800b51c:	0800b76f 	.word	0x0800b76f
 800b520:	0800b76f 	.word	0x0800b76f
 800b524:	0800b76f 	.word	0x0800b76f
 800b528:	0800b76f 	.word	0x0800b76f
 800b52c:	0800b563 	.word	0x0800b563
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b530:	4b94      	ldr	r3, [pc, #592]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f003 0320 	and.w	r3, r3, #32
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d009      	beq.n	800b550 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b53c:	4b91      	ldr	r3, [pc, #580]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	08db      	lsrs	r3, r3, #3
 800b542:	f003 0303 	and.w	r3, r3, #3
 800b546:	4a90      	ldr	r2, [pc, #576]	; (800b788 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b548:	fa22 f303 	lsr.w	r3, r2, r3
 800b54c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b54e:	e111      	b.n	800b774 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b550:	4b8d      	ldr	r3, [pc, #564]	; (800b788 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b552:	61bb      	str	r3, [r7, #24]
      break;
 800b554:	e10e      	b.n	800b774 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b556:	4b8d      	ldr	r3, [pc, #564]	; (800b78c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b558:	61bb      	str	r3, [r7, #24]
      break;
 800b55a:	e10b      	b.n	800b774 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b55c:	4b8c      	ldr	r3, [pc, #560]	; (800b790 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b55e:	61bb      	str	r3, [r7, #24]
      break;
 800b560:	e108      	b.n	800b774 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b562:	4b88      	ldr	r3, [pc, #544]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b566:	f003 0303 	and.w	r3, r3, #3
 800b56a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b56c:	4b85      	ldr	r3, [pc, #532]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b570:	091b      	lsrs	r3, r3, #4
 800b572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b576:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b578:	4b82      	ldr	r3, [pc, #520]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57c:	f003 0301 	and.w	r3, r3, #1
 800b580:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b582:	4b80      	ldr	r3, [pc, #512]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b586:	08db      	lsrs	r3, r3, #3
 800b588:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	fb02 f303 	mul.w	r3, r2, r3
 800b592:	ee07 3a90 	vmov	s15, r3
 800b596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b59a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f000 80e1 	beq.w	800b768 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2b02      	cmp	r3, #2
 800b5aa:	f000 8083 	beq.w	800b6b4 <HAL_RCC_GetSysClockFreq+0x204>
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	2b02      	cmp	r3, #2
 800b5b2:	f200 80a1 	bhi.w	800b6f8 <HAL_RCC_GetSysClockFreq+0x248>
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d003      	beq.n	800b5c4 <HAL_RCC_GetSysClockFreq+0x114>
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d056      	beq.n	800b670 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b5c2:	e099      	b.n	800b6f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5c4:	4b6f      	ldr	r3, [pc, #444]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 0320 	and.w	r3, r3, #32
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d02d      	beq.n	800b62c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5d0:	4b6c      	ldr	r3, [pc, #432]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	08db      	lsrs	r3, r3, #3
 800b5d6:	f003 0303 	and.w	r3, r3, #3
 800b5da:	4a6b      	ldr	r2, [pc, #428]	; (800b788 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b5dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b5e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	ee07 3a90 	vmov	s15, r3
 800b5e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	ee07 3a90 	vmov	s15, r3
 800b5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5fa:	4b62      	ldr	r3, [pc, #392]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b602:	ee07 3a90 	vmov	s15, r3
 800b606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b60a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b60e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b794 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b61a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b61e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b622:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b626:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b62a:	e087      	b.n	800b73c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	ee07 3a90 	vmov	s15, r3
 800b632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b636:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b798 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b63a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b63e:	4b51      	ldr	r3, [pc, #324]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b646:	ee07 3a90 	vmov	s15, r3
 800b64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b64e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b652:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b794 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b65e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b66a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b66e:	e065      	b.n	800b73c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	ee07 3a90 	vmov	s15, r3
 800b676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b67a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b79c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b67e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b682:	4b40      	ldr	r3, [pc, #256]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b68a:	ee07 3a90 	vmov	s15, r3
 800b68e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b692:	ed97 6a02 	vldr	s12, [r7, #8]
 800b696:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b794 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b69a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b69e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b6b2:	e043      	b.n	800b73c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	ee07 3a90 	vmov	s15, r3
 800b6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6be:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b7a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b6c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6c6:	4b2f      	ldr	r3, [pc, #188]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ce:	ee07 3a90 	vmov	s15, r3
 800b6d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b794 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b6f6:	e021      	b.n	800b73c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	ee07 3a90 	vmov	s15, r3
 800b6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b702:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b79c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b70a:	4b1e      	ldr	r3, [pc, #120]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b712:	ee07 3a90 	vmov	s15, r3
 800b716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b71a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b71e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b794 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b72a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b736:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b73a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b73c:	4b11      	ldr	r3, [pc, #68]	; (800b784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b740:	0a5b      	lsrs	r3, r3, #9
 800b742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b746:	3301      	adds	r3, #1
 800b748:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	ee07 3a90 	vmov	s15, r3
 800b750:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b754:	edd7 6a07 	vldr	s13, [r7, #28]
 800b758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b75c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b760:	ee17 3a90 	vmov	r3, s15
 800b764:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b766:	e005      	b.n	800b774 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b768:	2300      	movs	r3, #0
 800b76a:	61bb      	str	r3, [r7, #24]
      break;
 800b76c:	e002      	b.n	800b774 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b76e:	4b07      	ldr	r3, [pc, #28]	; (800b78c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b770:	61bb      	str	r3, [r7, #24]
      break;
 800b772:	bf00      	nop
  }

  return sysclockfreq;
 800b774:	69bb      	ldr	r3, [r7, #24]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3724      	adds	r7, #36	; 0x24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr
 800b782:	bf00      	nop
 800b784:	58024400 	.word	0x58024400
 800b788:	03d09000 	.word	0x03d09000
 800b78c:	003d0900 	.word	0x003d0900
 800b790:	02faf080 	.word	0x02faf080
 800b794:	46000000 	.word	0x46000000
 800b798:	4c742400 	.word	0x4c742400
 800b79c:	4a742400 	.word	0x4a742400
 800b7a0:	4c3ebc20 	.word	0x4c3ebc20

0800b7a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b7aa:	f7ff fe81 	bl	800b4b0 <HAL_RCC_GetSysClockFreq>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	4b10      	ldr	r3, [pc, #64]	; (800b7f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	0a1b      	lsrs	r3, r3, #8
 800b7b6:	f003 030f 	and.w	r3, r3, #15
 800b7ba:	490f      	ldr	r1, [pc, #60]	; (800b7f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b7bc:	5ccb      	ldrb	r3, [r1, r3]
 800b7be:	f003 031f 	and.w	r3, r3, #31
 800b7c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b7c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b7c8:	4b0a      	ldr	r3, [pc, #40]	; (800b7f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	f003 030f 	and.w	r3, r3, #15
 800b7d0:	4a09      	ldr	r2, [pc, #36]	; (800b7f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b7d2:	5cd3      	ldrb	r3, [r2, r3]
 800b7d4:	f003 031f 	and.w	r3, r3, #31
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	fa22 f303 	lsr.w	r3, r2, r3
 800b7de:	4a07      	ldr	r2, [pc, #28]	; (800b7fc <HAL_RCC_GetHCLKFreq+0x58>)
 800b7e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b7e2:	4a07      	ldr	r2, [pc, #28]	; (800b800 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b7e8:	4b04      	ldr	r3, [pc, #16]	; (800b7fc <HAL_RCC_GetHCLKFreq+0x58>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	58024400 	.word	0x58024400
 800b7f8:	080203f0 	.word	0x080203f0
 800b7fc:	24000104 	.word	0x24000104
 800b800:	24000100 	.word	0x24000100

0800b804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b808:	f7ff ffcc 	bl	800b7a4 <HAL_RCC_GetHCLKFreq>
 800b80c:	4602      	mov	r2, r0
 800b80e:	4b06      	ldr	r3, [pc, #24]	; (800b828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b810:	69db      	ldr	r3, [r3, #28]
 800b812:	091b      	lsrs	r3, r3, #4
 800b814:	f003 0307 	and.w	r3, r3, #7
 800b818:	4904      	ldr	r1, [pc, #16]	; (800b82c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b81a:	5ccb      	ldrb	r3, [r1, r3]
 800b81c:	f003 031f 	and.w	r3, r3, #31
 800b820:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b824:	4618      	mov	r0, r3
 800b826:	bd80      	pop	{r7, pc}
 800b828:	58024400 	.word	0x58024400
 800b82c:	080203f0 	.word	0x080203f0

0800b830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b834:	f7ff ffb6 	bl	800b7a4 <HAL_RCC_GetHCLKFreq>
 800b838:	4602      	mov	r2, r0
 800b83a:	4b06      	ldr	r3, [pc, #24]	; (800b854 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b83c:	69db      	ldr	r3, [r3, #28]
 800b83e:	0a1b      	lsrs	r3, r3, #8
 800b840:	f003 0307 	and.w	r3, r3, #7
 800b844:	4904      	ldr	r1, [pc, #16]	; (800b858 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b846:	5ccb      	ldrb	r3, [r1, r3]
 800b848:	f003 031f 	and.w	r3, r3, #31
 800b84c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b850:	4618      	mov	r0, r3
 800b852:	bd80      	pop	{r7, pc}
 800b854:	58024400 	.word	0x58024400
 800b858:	080203f0 	.word	0x080203f0

0800b85c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b85c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b860:	b0c6      	sub	sp, #280	; 0x118
 800b862:	af00      	add	r7, sp, #0
 800b864:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b868:	2300      	movs	r3, #0
 800b86a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b86e:	2300      	movs	r3, #0
 800b870:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b880:	2500      	movs	r5, #0
 800b882:	ea54 0305 	orrs.w	r3, r4, r5
 800b886:	d049      	beq.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b88c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b88e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b892:	d02f      	beq.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b894:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b898:	d828      	bhi.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b89a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b89e:	d01a      	beq.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b8a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8a4:	d822      	bhi.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d003      	beq.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b8aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8ae:	d007      	beq.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b8b0:	e01c      	b.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8b2:	4bab      	ldr	r3, [pc, #684]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b6:	4aaa      	ldr	r2, [pc, #680]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b8be:	e01a      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c4:	3308      	adds	r3, #8
 800b8c6:	2102      	movs	r1, #2
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f002 fa49 	bl	800dd60 <RCCEx_PLL2_Config>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b8d4:	e00f      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8da:	3328      	adds	r3, #40	; 0x28
 800b8dc:	2102      	movs	r1, #2
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f002 faf0 	bl	800dec4 <RCCEx_PLL3_Config>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b8ea:	e004      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8f2:	e000      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b8f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10a      	bne.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b8fe:	4b98      	ldr	r3, [pc, #608]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b902:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b90a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b90c:	4a94      	ldr	r2, [pc, #592]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b90e:	430b      	orrs	r3, r1
 800b910:	6513      	str	r3, [r2, #80]	; 0x50
 800b912:	e003      	b.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b914:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b918:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b924:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b928:	f04f 0900 	mov.w	r9, #0
 800b92c:	ea58 0309 	orrs.w	r3, r8, r9
 800b930:	d047      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b938:	2b04      	cmp	r3, #4
 800b93a:	d82a      	bhi.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b93c:	a201      	add	r2, pc, #4	; (adr r2, 800b944 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b942:	bf00      	nop
 800b944:	0800b959 	.word	0x0800b959
 800b948:	0800b967 	.word	0x0800b967
 800b94c:	0800b97d 	.word	0x0800b97d
 800b950:	0800b99b 	.word	0x0800b99b
 800b954:	0800b99b 	.word	0x0800b99b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b958:	4b81      	ldr	r3, [pc, #516]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95c:	4a80      	ldr	r2, [pc, #512]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b95e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b962:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b964:	e01a      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96a:	3308      	adds	r3, #8
 800b96c:	2100      	movs	r1, #0
 800b96e:	4618      	mov	r0, r3
 800b970:	f002 f9f6 	bl	800dd60 <RCCEx_PLL2_Config>
 800b974:	4603      	mov	r3, r0
 800b976:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b97a:	e00f      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b980:	3328      	adds	r3, #40	; 0x28
 800b982:	2100      	movs	r1, #0
 800b984:	4618      	mov	r0, r3
 800b986:	f002 fa9d 	bl	800dec4 <RCCEx_PLL3_Config>
 800b98a:	4603      	mov	r3, r0
 800b98c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b990:	e004      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b998:	e000      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b99a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b99c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d10a      	bne.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b9a4:	4b6e      	ldr	r3, [pc, #440]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9a8:	f023 0107 	bic.w	r1, r3, #7
 800b9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9b2:	4a6b      	ldr	r2, [pc, #428]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9b4:	430b      	orrs	r3, r1
 800b9b6:	6513      	str	r3, [r2, #80]	; 0x50
 800b9b8:	e003      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800b9ce:	f04f 0b00 	mov.w	fp, #0
 800b9d2:	ea5a 030b 	orrs.w	r3, sl, fp
 800b9d6:	d05b      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b9e0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b9e4:	d03b      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b9e6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b9ea:	d834      	bhi.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b9ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b9f0:	d037      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b9f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b9f6:	d82e      	bhi.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b9f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b9fc:	d033      	beq.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b9fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ba02:	d828      	bhi.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ba04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba08:	d01a      	beq.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800ba0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba0e:	d822      	bhi.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d003      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800ba14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba18:	d007      	beq.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800ba1a:	e01c      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba1c:	4b50      	ldr	r3, [pc, #320]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba20:	4a4f      	ldr	r2, [pc, #316]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba28:	e01e      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba2e:	3308      	adds	r3, #8
 800ba30:	2100      	movs	r1, #0
 800ba32:	4618      	mov	r0, r3
 800ba34:	f002 f994 	bl	800dd60 <RCCEx_PLL2_Config>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ba3e:	e013      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba44:	3328      	adds	r3, #40	; 0x28
 800ba46:	2100      	movs	r1, #0
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f002 fa3b 	bl	800dec4 <RCCEx_PLL3_Config>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba54:	e008      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba5c:	e004      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ba5e:	bf00      	nop
 800ba60:	e002      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ba62:	bf00      	nop
 800ba64:	e000      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ba66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10b      	bne.n	800ba88 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ba70:	4b3b      	ldr	r3, [pc, #236]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba74:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ba78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ba80:	4a37      	ldr	r2, [pc, #220]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba82:	430b      	orrs	r3, r1
 800ba84:	6593      	str	r3, [r2, #88]	; 0x58
 800ba86:	e003      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ba90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba98:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ba9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800baa0:	2300      	movs	r3, #0
 800baa2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800baa6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800baaa:	460b      	mov	r3, r1
 800baac:	4313      	orrs	r3, r2
 800baae:	d05d      	beq.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bab8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800babc:	d03b      	beq.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800babe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800bac2:	d834      	bhi.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bac8:	d037      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800baca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bace:	d82e      	bhi.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bad0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bad4:	d033      	beq.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800bad6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bada:	d828      	bhi.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800badc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bae0:	d01a      	beq.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800bae2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bae6:	d822      	bhi.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d003      	beq.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800baec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800baf0:	d007      	beq.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800baf2:	e01c      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baf4:	4b1a      	ldr	r3, [pc, #104]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800baf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf8:	4a19      	ldr	r2, [pc, #100]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bafa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bafe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bb00:	e01e      	b.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb06:	3308      	adds	r3, #8
 800bb08:	2100      	movs	r1, #0
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f002 f928 	bl	800dd60 <RCCEx_PLL2_Config>
 800bb10:	4603      	mov	r3, r0
 800bb12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bb16:	e013      	b.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb1c:	3328      	adds	r3, #40	; 0x28
 800bb1e:	2100      	movs	r1, #0
 800bb20:	4618      	mov	r0, r3
 800bb22:	f002 f9cf 	bl	800dec4 <RCCEx_PLL3_Config>
 800bb26:	4603      	mov	r3, r0
 800bb28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bb2c:	e008      	b.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb34:	e004      	b.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bb36:	bf00      	nop
 800bb38:	e002      	b.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bb3a:	bf00      	nop
 800bb3c:	e000      	b.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bb3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d10d      	bne.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bb48:	4b05      	ldr	r3, [pc, #20]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb4c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800bb50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bb58:	4a01      	ldr	r2, [pc, #4]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb5a:	430b      	orrs	r3, r1
 800bb5c:	6593      	str	r3, [r2, #88]	; 0x58
 800bb5e:	e005      	b.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bb60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bb6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb74:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800bb78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb82:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800bb86:	460b      	mov	r3, r1
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	d03a      	beq.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb92:	2b30      	cmp	r3, #48	; 0x30
 800bb94:	d01f      	beq.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800bb96:	2b30      	cmp	r3, #48	; 0x30
 800bb98:	d819      	bhi.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bb9a:	2b20      	cmp	r3, #32
 800bb9c:	d00c      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bb9e:	2b20      	cmp	r3, #32
 800bba0:	d815      	bhi.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d019      	beq.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bba6:	2b10      	cmp	r3, #16
 800bba8:	d111      	bne.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbaa:	4baa      	ldr	r3, [pc, #680]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbae:	4aa9      	ldr	r2, [pc, #676]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bbb6:	e011      	b.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bbb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbbc:	3308      	adds	r3, #8
 800bbbe:	2102      	movs	r1, #2
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f002 f8cd 	bl	800dd60 <RCCEx_PLL2_Config>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bbcc:	e006      	b.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bbd4:	e002      	b.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bbd6:	bf00      	nop
 800bbd8:	e000      	b.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bbda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10a      	bne.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bbe4:	4b9b      	ldr	r3, [pc, #620]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbe8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800bbec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbf2:	4a98      	ldr	r2, [pc, #608]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbf4:	430b      	orrs	r3, r1
 800bbf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bbf8:	e003      	b.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbfa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbfe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bc02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800bc0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc12:	2300      	movs	r3, #0
 800bc14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc18:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	d051      	beq.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bc22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc2c:	d035      	beq.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bc2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc32:	d82e      	bhi.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bc34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc38:	d031      	beq.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bc3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc3e:	d828      	bhi.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bc40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc44:	d01a      	beq.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bc46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc4a:	d822      	bhi.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d003      	beq.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bc50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc54:	d007      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bc56:	e01c      	b.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc58:	4b7e      	ldr	r3, [pc, #504]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5c:	4a7d      	ldr	r2, [pc, #500]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bc64:	e01c      	b.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc6a:	3308      	adds	r3, #8
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f002 f876 	bl	800dd60 <RCCEx_PLL2_Config>
 800bc74:	4603      	mov	r3, r0
 800bc76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bc7a:	e011      	b.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc80:	3328      	adds	r3, #40	; 0x28
 800bc82:	2100      	movs	r1, #0
 800bc84:	4618      	mov	r0, r3
 800bc86:	f002 f91d 	bl	800dec4 <RCCEx_PLL3_Config>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bc90:	e006      	b.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc92:	2301      	movs	r3, #1
 800bc94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc98:	e002      	b.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bc9a:	bf00      	nop
 800bc9c:	e000      	b.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bc9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bca0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10a      	bne.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bca8:	4b6a      	ldr	r3, [pc, #424]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800bcb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcb6:	4a67      	ldr	r2, [pc, #412]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcb8:	430b      	orrs	r3, r1
 800bcba:	6513      	str	r3, [r2, #80]	; 0x50
 800bcbc:	e003      	b.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcc2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bcc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bcd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bcdc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bce0:	460b      	mov	r3, r1
 800bce2:	4313      	orrs	r3, r2
 800bce4:	d053      	beq.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bcf0:	d033      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bcf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bcf6:	d82c      	bhi.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bcf8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bcfc:	d02f      	beq.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bcfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd02:	d826      	bhi.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bd04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd08:	d02b      	beq.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bd0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd0e:	d820      	bhi.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bd10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd14:	d012      	beq.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bd16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd1a:	d81a      	bhi.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d022      	beq.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800bd20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd24:	d115      	bne.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd2a:	3308      	adds	r3, #8
 800bd2c:	2101      	movs	r1, #1
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f002 f816 	bl	800dd60 <RCCEx_PLL2_Config>
 800bd34:	4603      	mov	r3, r0
 800bd36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bd3a:	e015      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd40:	3328      	adds	r3, #40	; 0x28
 800bd42:	2101      	movs	r1, #1
 800bd44:	4618      	mov	r0, r3
 800bd46:	f002 f8bd 	bl	800dec4 <RCCEx_PLL3_Config>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bd50:	e00a      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bd58:	e006      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bd5a:	bf00      	nop
 800bd5c:	e004      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bd5e:	bf00      	nop
 800bd60:	e002      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bd62:	bf00      	nop
 800bd64:	e000      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bd66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d10a      	bne.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bd70:	4b38      	ldr	r3, [pc, #224]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd74:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bd78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd7e:	4a35      	ldr	r2, [pc, #212]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd80:	430b      	orrs	r3, r1
 800bd82:	6513      	str	r3, [r2, #80]	; 0x50
 800bd84:	e003      	b.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd8a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bd8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd96:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800bd9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bd9e:	2300      	movs	r3, #0
 800bda0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bda4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	d058      	beq.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bdae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bdb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bdba:	d033      	beq.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bdbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bdc0:	d82c      	bhi.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bdc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdc6:	d02f      	beq.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bdc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdcc:	d826      	bhi.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bdce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bdd2:	d02b      	beq.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bdd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bdd8:	d820      	bhi.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bdda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdde:	d012      	beq.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bde0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bde4:	d81a      	bhi.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d022      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bdea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdee:	d115      	bne.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bdf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdf4:	3308      	adds	r3, #8
 800bdf6:	2101      	movs	r1, #1
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f001 ffb1 	bl	800dd60 <RCCEx_PLL2_Config>
 800bdfe:	4603      	mov	r3, r0
 800be00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800be04:	e015      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be0a:	3328      	adds	r3, #40	; 0x28
 800be0c:	2101      	movs	r1, #1
 800be0e:	4618      	mov	r0, r3
 800be10:	f002 f858 	bl	800dec4 <RCCEx_PLL3_Config>
 800be14:	4603      	mov	r3, r0
 800be16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800be1a:	e00a      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800be22:	e006      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800be24:	bf00      	nop
 800be26:	e004      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800be28:	bf00      	nop
 800be2a:	e002      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800be2c:	bf00      	nop
 800be2e:	e000      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800be30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10e      	bne.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800be3a:	4b06      	ldr	r3, [pc, #24]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be3e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800be42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800be4a:	4a02      	ldr	r2, [pc, #8]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be4c:	430b      	orrs	r3, r1
 800be4e:	6593      	str	r3, [r2, #88]	; 0x58
 800be50:	e006      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800be52:	bf00      	nop
 800be54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800be60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be68:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800be6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be70:	2300      	movs	r3, #0
 800be72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800be76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800be7a:	460b      	mov	r3, r1
 800be7c:	4313      	orrs	r3, r2
 800be7e:	d037      	beq.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800be80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be8a:	d00e      	beq.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800be8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be90:	d816      	bhi.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800be92:	2b00      	cmp	r3, #0
 800be94:	d018      	beq.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800be96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be9a:	d111      	bne.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be9c:	4bc4      	ldr	r3, [pc, #784]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea0:	4ac3      	ldr	r2, [pc, #780]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bea6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bea8:	e00f      	b.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800beaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beae:	3308      	adds	r3, #8
 800beb0:	2101      	movs	r1, #1
 800beb2:	4618      	mov	r0, r3
 800beb4:	f001 ff54 	bl	800dd60 <RCCEx_PLL2_Config>
 800beb8:	4603      	mov	r3, r0
 800beba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bebe:	e004      	b.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bec6:	e000      	b.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d10a      	bne.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bed2:	4bb7      	ldr	r3, [pc, #732]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bed6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800beda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bee0:	4ab3      	ldr	r2, [pc, #716]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bee2:	430b      	orrs	r3, r1
 800bee4:	6513      	str	r3, [r2, #80]	; 0x50
 800bee6:	e003      	b.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bee8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800beec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800befc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf00:	2300      	movs	r3, #0
 800bf02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bf06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	d039      	beq.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bf10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf16:	2b03      	cmp	r3, #3
 800bf18:	d81c      	bhi.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bf1a:	a201      	add	r2, pc, #4	; (adr r2, 800bf20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bf1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf20:	0800bf5d 	.word	0x0800bf5d
 800bf24:	0800bf31 	.word	0x0800bf31
 800bf28:	0800bf3f 	.word	0x0800bf3f
 800bf2c:	0800bf5d 	.word	0x0800bf5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf30:	4b9f      	ldr	r3, [pc, #636]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf34:	4a9e      	ldr	r2, [pc, #632]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bf3c:	e00f      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf42:	3308      	adds	r3, #8
 800bf44:	2102      	movs	r1, #2
 800bf46:	4618      	mov	r0, r3
 800bf48:	f001 ff0a 	bl	800dd60 <RCCEx_PLL2_Config>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bf52:	e004      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bf5a:	e000      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bf5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10a      	bne.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bf66:	4b92      	ldr	r3, [pc, #584]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf6a:	f023 0103 	bic.w	r1, r3, #3
 800bf6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf74:	4a8e      	ldr	r2, [pc, #568]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf76:	430b      	orrs	r3, r1
 800bf78:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bf7a:	e003      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bf84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bf90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf94:	2300      	movs	r3, #0
 800bf96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	f000 8099 	beq.w	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bfa6:	4b83      	ldr	r3, [pc, #524]	; (800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a82      	ldr	r2, [pc, #520]	; (800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bfac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bfb2:	f7f8 f91b 	bl	80041ec <HAL_GetTick>
 800bfb6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bfba:	e00b      	b.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bfbc:	f7f8 f916 	bl	80041ec <HAL_GetTick>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bfc6:	1ad3      	subs	r3, r2, r3
 800bfc8:	2b64      	cmp	r3, #100	; 0x64
 800bfca:	d903      	bls.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bfcc:	2303      	movs	r3, #3
 800bfce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bfd2:	e005      	b.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bfd4:	4b77      	ldr	r3, [pc, #476]	; (800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d0ed      	beq.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bfe0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d173      	bne.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bfe8:	4b71      	ldr	r3, [pc, #452]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bfec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bff0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bff4:	4053      	eors	r3, r2
 800bff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d015      	beq.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bffe:	4b6c      	ldr	r3, [pc, #432]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c006:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c00a:	4b69      	ldr	r3, [pc, #420]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c00e:	4a68      	ldr	r2, [pc, #416]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c014:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c016:	4b66      	ldr	r3, [pc, #408]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c01a:	4a65      	ldr	r2, [pc, #404]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c01c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c020:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c022:	4a63      	ldr	r2, [pc, #396]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c024:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c028:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c02e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c036:	d118      	bne.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c038:	f7f8 f8d8 	bl	80041ec <HAL_GetTick>
 800c03c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c040:	e00d      	b.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c042:	f7f8 f8d3 	bl	80041ec <HAL_GetTick>
 800c046:	4602      	mov	r2, r0
 800c048:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c04c:	1ad2      	subs	r2, r2, r3
 800c04e:	f241 3388 	movw	r3, #5000	; 0x1388
 800c052:	429a      	cmp	r2, r3
 800c054:	d903      	bls.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c056:	2303      	movs	r3, #3
 800c058:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800c05c:	e005      	b.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c05e:	4b54      	ldr	r3, [pc, #336]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c062:	f003 0302 	and.w	r3, r3, #2
 800c066:	2b00      	cmp	r3, #0
 800c068:	d0eb      	beq.n	800c042 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c06a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d129      	bne.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c076:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c07a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c07e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c082:	d10e      	bne.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c084:	4b4a      	ldr	r3, [pc, #296]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c086:	691b      	ldr	r3, [r3, #16]
 800c088:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800c08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c090:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c094:	091a      	lsrs	r2, r3, #4
 800c096:	4b48      	ldr	r3, [pc, #288]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c098:	4013      	ands	r3, r2
 800c09a:	4a45      	ldr	r2, [pc, #276]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c09c:	430b      	orrs	r3, r1
 800c09e:	6113      	str	r3, [r2, #16]
 800c0a0:	e005      	b.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c0a2:	4b43      	ldr	r3, [pc, #268]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	4a42      	ldr	r2, [pc, #264]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c0ac:	6113      	str	r3, [r2, #16]
 800c0ae:	4b40      	ldr	r3, [pc, #256]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c0ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c0be:	4a3c      	ldr	r2, [pc, #240]	; (800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0c0:	430b      	orrs	r3, r1
 800c0c2:	6713      	str	r3, [r2, #112]	; 0x70
 800c0c4:	e008      	b.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c0c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c0ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800c0ce:	e003      	b.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c0d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e0:	f002 0301 	and.w	r3, r2, #1
 800c0e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c0ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	f000 808f 	beq.w	800c218 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c0fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c100:	2b28      	cmp	r3, #40	; 0x28
 800c102:	d871      	bhi.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c104:	a201      	add	r2, pc, #4	; (adr r2, 800c10c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10a:	bf00      	nop
 800c10c:	0800c1f1 	.word	0x0800c1f1
 800c110:	0800c1e9 	.word	0x0800c1e9
 800c114:	0800c1e9 	.word	0x0800c1e9
 800c118:	0800c1e9 	.word	0x0800c1e9
 800c11c:	0800c1e9 	.word	0x0800c1e9
 800c120:	0800c1e9 	.word	0x0800c1e9
 800c124:	0800c1e9 	.word	0x0800c1e9
 800c128:	0800c1e9 	.word	0x0800c1e9
 800c12c:	0800c1bd 	.word	0x0800c1bd
 800c130:	0800c1e9 	.word	0x0800c1e9
 800c134:	0800c1e9 	.word	0x0800c1e9
 800c138:	0800c1e9 	.word	0x0800c1e9
 800c13c:	0800c1e9 	.word	0x0800c1e9
 800c140:	0800c1e9 	.word	0x0800c1e9
 800c144:	0800c1e9 	.word	0x0800c1e9
 800c148:	0800c1e9 	.word	0x0800c1e9
 800c14c:	0800c1d3 	.word	0x0800c1d3
 800c150:	0800c1e9 	.word	0x0800c1e9
 800c154:	0800c1e9 	.word	0x0800c1e9
 800c158:	0800c1e9 	.word	0x0800c1e9
 800c15c:	0800c1e9 	.word	0x0800c1e9
 800c160:	0800c1e9 	.word	0x0800c1e9
 800c164:	0800c1e9 	.word	0x0800c1e9
 800c168:	0800c1e9 	.word	0x0800c1e9
 800c16c:	0800c1f1 	.word	0x0800c1f1
 800c170:	0800c1e9 	.word	0x0800c1e9
 800c174:	0800c1e9 	.word	0x0800c1e9
 800c178:	0800c1e9 	.word	0x0800c1e9
 800c17c:	0800c1e9 	.word	0x0800c1e9
 800c180:	0800c1e9 	.word	0x0800c1e9
 800c184:	0800c1e9 	.word	0x0800c1e9
 800c188:	0800c1e9 	.word	0x0800c1e9
 800c18c:	0800c1f1 	.word	0x0800c1f1
 800c190:	0800c1e9 	.word	0x0800c1e9
 800c194:	0800c1e9 	.word	0x0800c1e9
 800c198:	0800c1e9 	.word	0x0800c1e9
 800c19c:	0800c1e9 	.word	0x0800c1e9
 800c1a0:	0800c1e9 	.word	0x0800c1e9
 800c1a4:	0800c1e9 	.word	0x0800c1e9
 800c1a8:	0800c1e9 	.word	0x0800c1e9
 800c1ac:	0800c1f1 	.word	0x0800c1f1
 800c1b0:	58024400 	.word	0x58024400
 800c1b4:	58024800 	.word	0x58024800
 800c1b8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1c0:	3308      	adds	r3, #8
 800c1c2:	2101      	movs	r1, #1
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f001 fdcb 	bl	800dd60 <RCCEx_PLL2_Config>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c1d0:	e00f      	b.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1d6:	3328      	adds	r3, #40	; 0x28
 800c1d8:	2101      	movs	r1, #1
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f001 fe72 	bl	800dec4 <RCCEx_PLL3_Config>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c1e6:	e004      	b.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c1ee:	e000      	b.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c1f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10a      	bne.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c1fa:	4bbf      	ldr	r3, [pc, #764]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1fe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c208:	4abb      	ldr	r2, [pc, #748]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c20a:	430b      	orrs	r3, r1
 800c20c:	6553      	str	r3, [r2, #84]	; 0x54
 800c20e:	e003      	b.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c210:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c214:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c220:	f002 0302 	and.w	r3, r2, #2
 800c224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c228:	2300      	movs	r3, #0
 800c22a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c22e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c232:	460b      	mov	r3, r1
 800c234:	4313      	orrs	r3, r2
 800c236:	d041      	beq.n	800c2bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c23c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c23e:	2b05      	cmp	r3, #5
 800c240:	d824      	bhi.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c242:	a201      	add	r2, pc, #4	; (adr r2, 800c248 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c248:	0800c295 	.word	0x0800c295
 800c24c:	0800c261 	.word	0x0800c261
 800c250:	0800c277 	.word	0x0800c277
 800c254:	0800c295 	.word	0x0800c295
 800c258:	0800c295 	.word	0x0800c295
 800c25c:	0800c295 	.word	0x0800c295
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c264:	3308      	adds	r3, #8
 800c266:	2101      	movs	r1, #1
 800c268:	4618      	mov	r0, r3
 800c26a:	f001 fd79 	bl	800dd60 <RCCEx_PLL2_Config>
 800c26e:	4603      	mov	r3, r0
 800c270:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c274:	e00f      	b.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c27a:	3328      	adds	r3, #40	; 0x28
 800c27c:	2101      	movs	r1, #1
 800c27e:	4618      	mov	r0, r3
 800c280:	f001 fe20 	bl	800dec4 <RCCEx_PLL3_Config>
 800c284:	4603      	mov	r3, r0
 800c286:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c28a:	e004      	b.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c292:	e000      	b.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c294:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c296:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d10a      	bne.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c29e:	4b96      	ldr	r3, [pc, #600]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2a2:	f023 0107 	bic.w	r1, r3, #7
 800c2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2ac:	4a92      	ldr	r2, [pc, #584]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2ae:	430b      	orrs	r3, r1
 800c2b0:	6553      	str	r3, [r2, #84]	; 0x54
 800c2b2:	e003      	b.n	800c2bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c2b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c4:	f002 0304 	and.w	r3, r2, #4
 800c2c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c2d2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	d044      	beq.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c2dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2e4:	2b05      	cmp	r3, #5
 800c2e6:	d825      	bhi.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c2e8:	a201      	add	r2, pc, #4	; (adr r2, 800c2f0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ee:	bf00      	nop
 800c2f0:	0800c33d 	.word	0x0800c33d
 800c2f4:	0800c309 	.word	0x0800c309
 800c2f8:	0800c31f 	.word	0x0800c31f
 800c2fc:	0800c33d 	.word	0x0800c33d
 800c300:	0800c33d 	.word	0x0800c33d
 800c304:	0800c33d 	.word	0x0800c33d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c30c:	3308      	adds	r3, #8
 800c30e:	2101      	movs	r1, #1
 800c310:	4618      	mov	r0, r3
 800c312:	f001 fd25 	bl	800dd60 <RCCEx_PLL2_Config>
 800c316:	4603      	mov	r3, r0
 800c318:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c31c:	e00f      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c322:	3328      	adds	r3, #40	; 0x28
 800c324:	2101      	movs	r1, #1
 800c326:	4618      	mov	r0, r3
 800c328:	f001 fdcc 	bl	800dec4 <RCCEx_PLL3_Config>
 800c32c:	4603      	mov	r3, r0
 800c32e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c332:	e004      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c334:	2301      	movs	r3, #1
 800c336:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c33a:	e000      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c33c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c33e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10b      	bne.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c346:	4b6c      	ldr	r3, [pc, #432]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c34a:	f023 0107 	bic.w	r1, r3, #7
 800c34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c356:	4a68      	ldr	r2, [pc, #416]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c358:	430b      	orrs	r3, r1
 800c35a:	6593      	str	r3, [r2, #88]	; 0x58
 800c35c:	e003      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c35e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c362:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36e:	f002 0320 	and.w	r3, r2, #32
 800c372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c376:	2300      	movs	r3, #0
 800c378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c37c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c380:	460b      	mov	r3, r1
 800c382:	4313      	orrs	r3, r2
 800c384:	d055      	beq.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c38e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c392:	d033      	beq.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c398:	d82c      	bhi.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c39a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c39e:	d02f      	beq.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c3a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3a4:	d826      	bhi.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c3a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c3aa:	d02b      	beq.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c3ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c3b0:	d820      	bhi.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c3b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3b6:	d012      	beq.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c3b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3bc:	d81a      	bhi.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d022      	beq.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c3c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3c6:	d115      	bne.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3cc:	3308      	adds	r3, #8
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f001 fcc5 	bl	800dd60 <RCCEx_PLL2_Config>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c3dc:	e015      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3e2:	3328      	adds	r3, #40	; 0x28
 800c3e4:	2102      	movs	r1, #2
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f001 fd6c 	bl	800dec4 <RCCEx_PLL3_Config>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c3f2:	e00a      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c3fa:	e006      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c3fc:	bf00      	nop
 800c3fe:	e004      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c400:	bf00      	nop
 800c402:	e002      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c404:	bf00      	nop
 800c406:	e000      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c40a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d10b      	bne.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c412:	4b39      	ldr	r3, [pc, #228]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c416:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c41a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c41e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c422:	4a35      	ldr	r2, [pc, #212]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c424:	430b      	orrs	r3, r1
 800c426:	6553      	str	r3, [r2, #84]	; 0x54
 800c428:	e003      	b.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c42a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c42e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c43e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c442:	2300      	movs	r3, #0
 800c444:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c448:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c44c:	460b      	mov	r3, r1
 800c44e:	4313      	orrs	r3, r2
 800c450:	d058      	beq.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c45a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c45e:	d033      	beq.n	800c4c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c460:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c464:	d82c      	bhi.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c46a:	d02f      	beq.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c46c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c470:	d826      	bhi.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c472:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c476:	d02b      	beq.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c478:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c47c:	d820      	bhi.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c47e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c482:	d012      	beq.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c488:	d81a      	bhi.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d022      	beq.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c48e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c492:	d115      	bne.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c498:	3308      	adds	r3, #8
 800c49a:	2100      	movs	r1, #0
 800c49c:	4618      	mov	r0, r3
 800c49e:	f001 fc5f 	bl	800dd60 <RCCEx_PLL2_Config>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c4a8:	e015      	b.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4ae:	3328      	adds	r3, #40	; 0x28
 800c4b0:	2102      	movs	r1, #2
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f001 fd06 	bl	800dec4 <RCCEx_PLL3_Config>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c4be:	e00a      	b.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c4c6:	e006      	b.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c4c8:	bf00      	nop
 800c4ca:	e004      	b.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c4cc:	bf00      	nop
 800c4ce:	e002      	b.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c4d0:	bf00      	nop
 800c4d2:	e000      	b.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c4d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d10e      	bne.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c4de:	4b06      	ldr	r3, [pc, #24]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4e2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4ee:	4a02      	ldr	r2, [pc, #8]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4f0:	430b      	orrs	r3, r1
 800c4f2:	6593      	str	r3, [r2, #88]	; 0x58
 800c4f4:	e006      	b.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c4f6:	bf00      	nop
 800c4f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c500:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c510:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c514:	2300      	movs	r3, #0
 800c516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c51a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c51e:	460b      	mov	r3, r1
 800c520:	4313      	orrs	r3, r2
 800c522:	d055      	beq.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c528:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c52c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c530:	d033      	beq.n	800c59a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c532:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c536:	d82c      	bhi.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c53c:	d02f      	beq.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c53e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c542:	d826      	bhi.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c544:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c548:	d02b      	beq.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c54a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c54e:	d820      	bhi.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c554:	d012      	beq.n	800c57c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c55a:	d81a      	bhi.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d022      	beq.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c564:	d115      	bne.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c56a:	3308      	adds	r3, #8
 800c56c:	2100      	movs	r1, #0
 800c56e:	4618      	mov	r0, r3
 800c570:	f001 fbf6 	bl	800dd60 <RCCEx_PLL2_Config>
 800c574:	4603      	mov	r3, r0
 800c576:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c57a:	e015      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c580:	3328      	adds	r3, #40	; 0x28
 800c582:	2102      	movs	r1, #2
 800c584:	4618      	mov	r0, r3
 800c586:	f001 fc9d 	bl	800dec4 <RCCEx_PLL3_Config>
 800c58a:	4603      	mov	r3, r0
 800c58c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c590:	e00a      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c592:	2301      	movs	r3, #1
 800c594:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c598:	e006      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c59a:	bf00      	nop
 800c59c:	e004      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c59e:	bf00      	nop
 800c5a0:	e002      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c5a2:	bf00      	nop
 800c5a4:	e000      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c5a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d10b      	bne.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c5b0:	4ba0      	ldr	r3, [pc, #640]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5b4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c5c0:	4a9c      	ldr	r2, [pc, #624]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5c2:	430b      	orrs	r3, r1
 800c5c4:	6593      	str	r3, [r2, #88]	; 0x58
 800c5c6:	e003      	b.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c5cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	f002 0308 	and.w	r3, r2, #8
 800c5dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c5e6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	d01e      	beq.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5fc:	d10c      	bne.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c602:	3328      	adds	r3, #40	; 0x28
 800c604:	2102      	movs	r1, #2
 800c606:	4618      	mov	r0, r3
 800c608:	f001 fc5c 	bl	800dec4 <RCCEx_PLL3_Config>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d002      	beq.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c612:	2301      	movs	r3, #1
 800c614:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c618:	4b86      	ldr	r3, [pc, #536]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c61a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c61c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c628:	4a82      	ldr	r2, [pc, #520]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c62a:	430b      	orrs	r3, r1
 800c62c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c636:	f002 0310 	and.w	r3, r2, #16
 800c63a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c63e:	2300      	movs	r3, #0
 800c640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c644:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c648:	460b      	mov	r3, r1
 800c64a:	4313      	orrs	r3, r2
 800c64c:	d01e      	beq.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c65a:	d10c      	bne.n	800c676 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c660:	3328      	adds	r3, #40	; 0x28
 800c662:	2102      	movs	r1, #2
 800c664:	4618      	mov	r0, r3
 800c666:	f001 fc2d 	bl	800dec4 <RCCEx_PLL3_Config>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d002      	beq.n	800c676 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c670:	2301      	movs	r3, #1
 800c672:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c676:	4b6f      	ldr	r3, [pc, #444]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c67a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c686:	4a6b      	ldr	r2, [pc, #428]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c688:	430b      	orrs	r3, r1
 800c68a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c694:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c698:	67bb      	str	r3, [r7, #120]	; 0x78
 800c69a:	2300      	movs	r3, #0
 800c69c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c69e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	d03e      	beq.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c6b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6b4:	d022      	beq.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c6b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6ba:	d81b      	bhi.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d003      	beq.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c6c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6c4:	d00b      	beq.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c6c6:	e015      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6cc:	3308      	adds	r3, #8
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f001 fb45 	bl	800dd60 <RCCEx_PLL2_Config>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c6dc:	e00f      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6e2:	3328      	adds	r3, #40	; 0x28
 800c6e4:	2102      	movs	r1, #2
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f001 fbec 	bl	800dec4 <RCCEx_PLL3_Config>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c6f2:	e004      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c6fa:	e000      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c6fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10b      	bne.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c706:	4b4b      	ldr	r3, [pc, #300]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c70a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c716:	4a47      	ldr	r2, [pc, #284]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c718:	430b      	orrs	r3, r1
 800c71a:	6593      	str	r3, [r2, #88]	; 0x58
 800c71c:	e003      	b.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c71e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c722:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c732:	673b      	str	r3, [r7, #112]	; 0x70
 800c734:	2300      	movs	r3, #0
 800c736:	677b      	str	r3, [r7, #116]	; 0x74
 800c738:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c73c:	460b      	mov	r3, r1
 800c73e:	4313      	orrs	r3, r2
 800c740:	d03b      	beq.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c74a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c74e:	d01f      	beq.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c750:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c754:	d818      	bhi.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c75a:	d003      	beq.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c75c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c760:	d007      	beq.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c762:	e011      	b.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c764:	4b33      	ldr	r3, [pc, #204]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c768:	4a32      	ldr	r2, [pc, #200]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c76a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c76e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c770:	e00f      	b.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c776:	3328      	adds	r3, #40	; 0x28
 800c778:	2101      	movs	r1, #1
 800c77a:	4618      	mov	r0, r3
 800c77c:	f001 fba2 	bl	800dec4 <RCCEx_PLL3_Config>
 800c780:	4603      	mov	r3, r0
 800c782:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c786:	e004      	b.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c788:	2301      	movs	r3, #1
 800c78a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c78e:	e000      	b.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c790:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c792:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c796:	2b00      	cmp	r3, #0
 800c798:	d10b      	bne.n	800c7b2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c79a:	4b26      	ldr	r3, [pc, #152]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c79c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c79e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7aa:	4a22      	ldr	r2, [pc, #136]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7ac:	430b      	orrs	r3, r1
 800c7ae:	6553      	str	r3, [r2, #84]	; 0x54
 800c7b0:	e003      	b.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c7b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c7c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c7cc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	d034      	beq.n	800c840 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d003      	beq.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c7e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7e4:	d007      	beq.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c7e6:	e011      	b.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7e8:	4b12      	ldr	r3, [pc, #72]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ec:	4a11      	ldr	r2, [pc, #68]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c7f4:	e00e      	b.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7fa:	3308      	adds	r3, #8
 800c7fc:	2102      	movs	r1, #2
 800c7fe:	4618      	mov	r0, r3
 800c800:	f001 faae 	bl	800dd60 <RCCEx_PLL2_Config>
 800c804:	4603      	mov	r3, r0
 800c806:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c80a:	e003      	b.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c80c:	2301      	movs	r3, #1
 800c80e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c812:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c814:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10d      	bne.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c81c:	4b05      	ldr	r3, [pc, #20]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c81e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c820:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c82a:	4a02      	ldr	r2, [pc, #8]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c82c:	430b      	orrs	r3, r1
 800c82e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c830:	e006      	b.n	800c840 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c832:	bf00      	nop
 800c834:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c838:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c83c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c848:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c84c:	663b      	str	r3, [r7, #96]	; 0x60
 800c84e:	2300      	movs	r3, #0
 800c850:	667b      	str	r3, [r7, #100]	; 0x64
 800c852:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c856:	460b      	mov	r3, r1
 800c858:	4313      	orrs	r3, r2
 800c85a:	d00c      	beq.n	800c876 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c860:	3328      	adds	r3, #40	; 0x28
 800c862:	2102      	movs	r1, #2
 800c864:	4618      	mov	r0, r3
 800c866:	f001 fb2d 	bl	800dec4 <RCCEx_PLL3_Config>
 800c86a:	4603      	mov	r3, r0
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d002      	beq.n	800c876 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c870:	2301      	movs	r3, #1
 800c872:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c882:	65bb      	str	r3, [r7, #88]	; 0x58
 800c884:	2300      	movs	r3, #0
 800c886:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c888:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c88c:	460b      	mov	r3, r1
 800c88e:	4313      	orrs	r3, r2
 800c890:	d036      	beq.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c89c:	d018      	beq.n	800c8d0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c89e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8a2:	d811      	bhi.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c8a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8a8:	d014      	beq.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c8aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8ae:	d80b      	bhi.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d011      	beq.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c8b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8b8:	d106      	bne.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8ba:	4bb7      	ldr	r3, [pc, #732]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8be:	4ab6      	ldr	r2, [pc, #728]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c8c6:	e008      	b.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c8ce:	e004      	b.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c8d0:	bf00      	nop
 800c8d2:	e002      	b.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c8d4:	bf00      	nop
 800c8d6:	e000      	b.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c8d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10a      	bne.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c8e2:	4bad      	ldr	r3, [pc, #692]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8f0:	4aa9      	ldr	r2, [pc, #676]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8f2:	430b      	orrs	r3, r1
 800c8f4:	6553      	str	r3, [r2, #84]	; 0x54
 800c8f6:	e003      	b.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c908:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c90c:	653b      	str	r3, [r7, #80]	; 0x50
 800c90e:	2300      	movs	r3, #0
 800c910:	657b      	str	r3, [r7, #84]	; 0x54
 800c912:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c916:	460b      	mov	r3, r1
 800c918:	4313      	orrs	r3, r2
 800c91a:	d009      	beq.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c91c:	4b9e      	ldr	r3, [pc, #632]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c91e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c920:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c92a:	4a9b      	ldr	r2, [pc, #620]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c92c:	430b      	orrs	r3, r1
 800c92e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c938:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c93c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c93e:	2300      	movs	r3, #0
 800c940:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c942:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c946:	460b      	mov	r3, r1
 800c948:	4313      	orrs	r3, r2
 800c94a:	d009      	beq.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c94c:	4b92      	ldr	r3, [pc, #584]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c94e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c950:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c95a:	4a8f      	ldr	r2, [pc, #572]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c95c:	430b      	orrs	r3, r1
 800c95e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c968:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c96c:	643b      	str	r3, [r7, #64]	; 0x40
 800c96e:	2300      	movs	r3, #0
 800c970:	647b      	str	r3, [r7, #68]	; 0x44
 800c972:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c976:	460b      	mov	r3, r1
 800c978:	4313      	orrs	r3, r2
 800c97a:	d00e      	beq.n	800c99a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c97c:	4b86      	ldr	r3, [pc, #536]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	4a85      	ldr	r2, [pc, #532]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c982:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c986:	6113      	str	r3, [r2, #16]
 800c988:	4b83      	ldr	r3, [pc, #524]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c98a:	6919      	ldr	r1, [r3, #16]
 800c98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c990:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c994:	4a80      	ldr	r2, [pc, #512]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c996:	430b      	orrs	r3, r1
 800c998:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c9a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9ac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	d009      	beq.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c9b6:	4b78      	ldr	r3, [pc, #480]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9c4:	4a74      	ldr	r2, [pc, #464]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9c6:	430b      	orrs	r3, r1
 800c9c8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c9d6:	633b      	str	r3, [r7, #48]	; 0x30
 800c9d8:	2300      	movs	r3, #0
 800c9da:	637b      	str	r3, [r7, #52]	; 0x34
 800c9dc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	d00a      	beq.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c9e6:	4b6c      	ldr	r3, [pc, #432]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9ea:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9f6:	4a68      	ldr	r2, [pc, #416]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9f8:	430b      	orrs	r3, r1
 800c9fa:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca04:	2100      	movs	r1, #0
 800ca06:	62b9      	str	r1, [r7, #40]	; 0x28
 800ca08:	f003 0301 	and.w	r3, r3, #1
 800ca0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca0e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ca12:	460b      	mov	r3, r1
 800ca14:	4313      	orrs	r3, r2
 800ca16:	d011      	beq.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca1c:	3308      	adds	r3, #8
 800ca1e:	2100      	movs	r1, #0
 800ca20:	4618      	mov	r0, r3
 800ca22:	f001 f99d 	bl	800dd60 <RCCEx_PLL2_Config>
 800ca26:	4603      	mov	r3, r0
 800ca28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ca2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d003      	beq.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ca3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca44:	2100      	movs	r1, #0
 800ca46:	6239      	str	r1, [r7, #32]
 800ca48:	f003 0302 	and.w	r3, r3, #2
 800ca4c:	627b      	str	r3, [r7, #36]	; 0x24
 800ca4e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ca52:	460b      	mov	r3, r1
 800ca54:	4313      	orrs	r3, r2
 800ca56:	d011      	beq.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ca58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca5c:	3308      	adds	r3, #8
 800ca5e:	2101      	movs	r1, #1
 800ca60:	4618      	mov	r0, r3
 800ca62:	f001 f97d 	bl	800dd60 <RCCEx_PLL2_Config>
 800ca66:	4603      	mov	r3, r0
 800ca68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ca6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d003      	beq.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ca7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca84:	2100      	movs	r1, #0
 800ca86:	61b9      	str	r1, [r7, #24]
 800ca88:	f003 0304 	and.w	r3, r3, #4
 800ca8c:	61fb      	str	r3, [r7, #28]
 800ca8e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ca92:	460b      	mov	r3, r1
 800ca94:	4313      	orrs	r3, r2
 800ca96:	d011      	beq.n	800cabc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ca98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca9c:	3308      	adds	r3, #8
 800ca9e:	2102      	movs	r1, #2
 800caa0:	4618      	mov	r0, r3
 800caa2:	f001 f95d 	bl	800dd60 <RCCEx_PLL2_Config>
 800caa6:	4603      	mov	r3, r0
 800caa8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800caac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d003      	beq.n	800cabc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cab4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cab8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac4:	2100      	movs	r1, #0
 800cac6:	6139      	str	r1, [r7, #16]
 800cac8:	f003 0308 	and.w	r3, r3, #8
 800cacc:	617b      	str	r3, [r7, #20]
 800cace:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cad2:	460b      	mov	r3, r1
 800cad4:	4313      	orrs	r3, r2
 800cad6:	d011      	beq.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cadc:	3328      	adds	r3, #40	; 0x28
 800cade:	2100      	movs	r1, #0
 800cae0:	4618      	mov	r0, r3
 800cae2:	f001 f9ef 	bl	800dec4 <RCCEx_PLL3_Config>
 800cae6:	4603      	mov	r3, r0
 800cae8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800caec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d003      	beq.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800caf8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb04:	2100      	movs	r1, #0
 800cb06:	60b9      	str	r1, [r7, #8]
 800cb08:	f003 0310 	and.w	r3, r3, #16
 800cb0c:	60fb      	str	r3, [r7, #12]
 800cb0e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cb12:	460b      	mov	r3, r1
 800cb14:	4313      	orrs	r3, r2
 800cb16:	d011      	beq.n	800cb3c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb1c:	3328      	adds	r3, #40	; 0x28
 800cb1e:	2101      	movs	r1, #1
 800cb20:	4618      	mov	r0, r3
 800cb22:	f001 f9cf 	bl	800dec4 <RCCEx_PLL3_Config>
 800cb26:	4603      	mov	r3, r0
 800cb28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cb2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d003      	beq.n	800cb3c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cb3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb44:	2100      	movs	r1, #0
 800cb46:	6039      	str	r1, [r7, #0]
 800cb48:	f003 0320 	and.w	r3, r3, #32
 800cb4c:	607b      	str	r3, [r7, #4]
 800cb4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cb52:	460b      	mov	r3, r1
 800cb54:	4313      	orrs	r3, r2
 800cb56:	d011      	beq.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cb58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb5c:	3328      	adds	r3, #40	; 0x28
 800cb5e:	2102      	movs	r1, #2
 800cb60:	4618      	mov	r0, r3
 800cb62:	f001 f9af 	bl	800dec4 <RCCEx_PLL3_Config>
 800cb66:	4603      	mov	r3, r0
 800cb68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cb6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d003      	beq.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800cb7c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d101      	bne.n	800cb88 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800cb84:	2300      	movs	r3, #0
 800cb86:	e000      	b.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800cb88:	2301      	movs	r3, #1
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800cb90:	46bd      	mov	sp, r7
 800cb92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb96:	bf00      	nop
 800cb98:	58024400 	.word	0x58024400

0800cb9c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b090      	sub	sp, #64	; 0x40
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbaa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800cbae:	430b      	orrs	r3, r1
 800cbb0:	f040 8094 	bne.w	800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cbb4:	4b9b      	ldr	r3, [pc, #620]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbb8:	f003 0307 	and.w	r3, r3, #7
 800cbbc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc0:	2b04      	cmp	r3, #4
 800cbc2:	f200 8087 	bhi.w	800ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800cbc6:	a201      	add	r2, pc, #4	; (adr r2, 800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800cbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbcc:	0800cbe1 	.word	0x0800cbe1
 800cbd0:	0800cc09 	.word	0x0800cc09
 800cbd4:	0800cc31 	.word	0x0800cc31
 800cbd8:	0800cccd 	.word	0x0800cccd
 800cbdc:	0800cc59 	.word	0x0800cc59
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbe0:	4b90      	ldr	r3, [pc, #576]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbe8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbec:	d108      	bne.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f000 ff62 	bl	800dabc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbfc:	f000 bc93 	b.w	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc00:	2300      	movs	r3, #0
 800cc02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc04:	f000 bc8f 	b.w	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc08:	4b86      	ldr	r3, [pc, #536]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc14:	d108      	bne.n	800cc28 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc16:	f107 0318 	add.w	r3, r7, #24
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f000 fca6 	bl	800d56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc20:	69bb      	ldr	r3, [r7, #24]
 800cc22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc24:	f000 bc7f 	b.w	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc2c:	f000 bc7b 	b.w	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc30:	4b7c      	ldr	r3, [pc, #496]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc3c:	d108      	bne.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc3e:	f107 030c 	add.w	r3, r7, #12
 800cc42:	4618      	mov	r0, r3
 800cc44:	f000 fde6 	bl	800d814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc4c:	f000 bc6b 	b.w	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc50:	2300      	movs	r3, #0
 800cc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc54:	f000 bc67 	b.w	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc58:	4b72      	ldr	r3, [pc, #456]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc60:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc62:	4b70      	ldr	r3, [pc, #448]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f003 0304 	and.w	r3, r3, #4
 800cc6a:	2b04      	cmp	r3, #4
 800cc6c:	d10c      	bne.n	800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d109      	bne.n	800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc74:	4b6b      	ldr	r3, [pc, #428]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	08db      	lsrs	r3, r3, #3
 800cc7a:	f003 0303 	and.w	r3, r3, #3
 800cc7e:	4a6a      	ldr	r2, [pc, #424]	; (800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cc80:	fa22 f303 	lsr.w	r3, r2, r3
 800cc84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc86:	e01f      	b.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc88:	4b66      	ldr	r3, [pc, #408]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc94:	d106      	bne.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cc96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc9c:	d102      	bne.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc9e:	4b63      	ldr	r3, [pc, #396]	; (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cca2:	e011      	b.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cca4:	4b5f      	ldr	r3, [pc, #380]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccb0:	d106      	bne.n	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ccb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccb8:	d102      	bne.n	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ccba:	4b5d      	ldr	r3, [pc, #372]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ccbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccbe:	e003      	b.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ccc4:	f000 bc2f 	b.w	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ccc8:	f000 bc2d 	b.w	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cccc:	4b59      	ldr	r3, [pc, #356]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ccce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccd0:	f000 bc29 	b.w	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccd8:	f000 bc25 	b.w	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ccdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cce0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800cce4:	430b      	orrs	r3, r1
 800cce6:	f040 80a7 	bne.w	800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ccea:	4b4e      	ldr	r3, [pc, #312]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccee:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ccf2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ccfa:	d054      	beq.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cd02:	f200 808b 	bhi.w	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cd0c:	f000 8083 	beq.w	800ce16 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800cd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cd16:	f200 8081 	bhi.w	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd20:	d02f      	beq.n	800cd82 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800cd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd28:	d878      	bhi.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d004      	beq.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800cd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd36:	d012      	beq.n	800cd5e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800cd38:	e070      	b.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd3a:	4b3a      	ldr	r3, [pc, #232]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd46:	d107      	bne.n	800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 feb5 	bl	800dabc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd56:	e3e6      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd5c:	e3e3      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd5e:	4b31      	ldr	r3, [pc, #196]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd6a:	d107      	bne.n	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd6c:	f107 0318 	add.w	r3, r7, #24
 800cd70:	4618      	mov	r0, r3
 800cd72:	f000 fbfb 	bl	800d56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd7a:	e3d4      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd80:	e3d1      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd82:	4b28      	ldr	r3, [pc, #160]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd8e:	d107      	bne.n	800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd90:	f107 030c 	add.w	r3, r7, #12
 800cd94:	4618      	mov	r0, r3
 800cd96:	f000 fd3d 	bl	800d814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd9e:	e3c2      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cda0:	2300      	movs	r3, #0
 800cda2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cda4:	e3bf      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cda6:	4b1f      	ldr	r3, [pc, #124]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cda8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cdae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cdb0:	4b1c      	ldr	r3, [pc, #112]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f003 0304 	and.w	r3, r3, #4
 800cdb8:	2b04      	cmp	r3, #4
 800cdba:	d10c      	bne.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800cdbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d109      	bne.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdc2:	4b18      	ldr	r3, [pc, #96]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	08db      	lsrs	r3, r3, #3
 800cdc8:	f003 0303 	and.w	r3, r3, #3
 800cdcc:	4a16      	ldr	r2, [pc, #88]	; (800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cdce:	fa22 f303 	lsr.w	r3, r2, r3
 800cdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdd4:	e01e      	b.n	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cdd6:	4b13      	ldr	r3, [pc, #76]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cde2:	d106      	bne.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800cde4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cde6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdea:	d102      	bne.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cdec:	4b0f      	ldr	r3, [pc, #60]	; (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cdee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdf0:	e010      	b.n	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cdf2:	4b0c      	ldr	r3, [pc, #48]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdfe:	d106      	bne.n	800ce0e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ce00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce06:	d102      	bne.n	800ce0e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce08:	4b09      	ldr	r3, [pc, #36]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ce0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce0c:	e002      	b.n	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ce12:	e388      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce14:	e387      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce16:	4b07      	ldr	r3, [pc, #28]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ce18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce1a:	e384      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce20:	e381      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce22:	bf00      	nop
 800ce24:	58024400 	.word	0x58024400
 800ce28:	03d09000 	.word	0x03d09000
 800ce2c:	003d0900 	.word	0x003d0900
 800ce30:	02faf080 	.word	0x02faf080
 800ce34:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ce38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce3c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ce40:	430b      	orrs	r3, r1
 800ce42:	f040 809c 	bne.w	800cf7e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ce46:	4b9e      	ldr	r3, [pc, #632]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce4a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ce4e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ce50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce56:	d054      	beq.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ce58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce5e:	f200 808b 	bhi.w	800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ce62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ce68:	f000 8083 	beq.w	800cf72 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ce6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ce72:	f200 8081 	bhi.w	800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ce76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce7c:	d02f      	beq.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ce7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce84:	d878      	bhi.n	800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ce86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d004      	beq.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ce8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ce92:	d012      	beq.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ce94:	e070      	b.n	800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce96:	4b8a      	ldr	r3, [pc, #552]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cea2:	d107      	bne.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f000 fe07 	bl	800dabc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ceae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceb2:	e338      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceb8:	e335      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ceba:	4b81      	ldr	r3, [pc, #516]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cec6:	d107      	bne.n	800ced8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cec8:	f107 0318 	add.w	r3, r7, #24
 800cecc:	4618      	mov	r0, r3
 800cece:	f000 fb4d 	bl	800d56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ced6:	e326      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ced8:	2300      	movs	r3, #0
 800ceda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cedc:	e323      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cede:	4b78      	ldr	r3, [pc, #480]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ceea:	d107      	bne.n	800cefc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ceec:	f107 030c 	add.w	r3, r7, #12
 800cef0:	4618      	mov	r0, r3
 800cef2:	f000 fc8f 	bl	800d814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cefa:	e314      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cefc:	2300      	movs	r3, #0
 800cefe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf00:	e311      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cf02:	4b6f      	ldr	r3, [pc, #444]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cf0c:	4b6c      	ldr	r3, [pc, #432]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f003 0304 	and.w	r3, r3, #4
 800cf14:	2b04      	cmp	r3, #4
 800cf16:	d10c      	bne.n	800cf32 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800cf18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d109      	bne.n	800cf32 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf1e:	4b68      	ldr	r3, [pc, #416]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	08db      	lsrs	r3, r3, #3
 800cf24:	f003 0303 	and.w	r3, r3, #3
 800cf28:	4a66      	ldr	r2, [pc, #408]	; (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cf2a:	fa22 f303 	lsr.w	r3, r2, r3
 800cf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf30:	e01e      	b.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cf32:	4b63      	ldr	r3, [pc, #396]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf3e:	d106      	bne.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800cf40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf46:	d102      	bne.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cf48:	4b5f      	ldr	r3, [pc, #380]	; (800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf4c:	e010      	b.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf4e:	4b5c      	ldr	r3, [pc, #368]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf5a:	d106      	bne.n	800cf6a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800cf5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf62:	d102      	bne.n	800cf6a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cf64:	4b59      	ldr	r3, [pc, #356]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cf66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf68:	e002      	b.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cf6e:	e2da      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cf70:	e2d9      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cf72:	4b57      	ldr	r3, [pc, #348]	; (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cf74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf76:	e2d6      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf7c:	e2d3      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cf7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf82:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800cf86:	430b      	orrs	r3, r1
 800cf88:	f040 80a7 	bne.w	800d0da <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cf8c:	4b4c      	ldr	r3, [pc, #304]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf90:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cf94:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf9c:	d055      	beq.n	800d04a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800cf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cfa4:	f200 8096 	bhi.w	800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfaa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cfae:	f000 8084 	beq.w	800d0ba <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cfb8:	f200 808c 	bhi.w	800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cfc2:	d030      	beq.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cfca:	f200 8083 	bhi.w	800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d004      	beq.n	800cfde <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800cfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfda:	d012      	beq.n	800d002 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cfdc:	e07a      	b.n	800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cfde:	4b38      	ldr	r3, [pc, #224]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cfea:	d107      	bne.n	800cffc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cfec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cff0:	4618      	mov	r0, r3
 800cff2:	f000 fd63 	bl	800dabc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cffa:	e294      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cffc:	2300      	movs	r3, #0
 800cffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d000:	e291      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d002:	4b2f      	ldr	r3, [pc, #188]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d00a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d00e:	d107      	bne.n	800d020 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d010:	f107 0318 	add.w	r3, r7, #24
 800d014:	4618      	mov	r0, r3
 800d016:	f000 faa9 	bl	800d56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d01a:	69bb      	ldr	r3, [r7, #24]
 800d01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d01e:	e282      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d020:	2300      	movs	r3, #0
 800d022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d024:	e27f      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d026:	4b26      	ldr	r3, [pc, #152]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d02e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d032:	d107      	bne.n	800d044 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d034:	f107 030c 	add.w	r3, r7, #12
 800d038:	4618      	mov	r0, r3
 800d03a:	f000 fbeb 	bl	800d814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d042:	e270      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d044:	2300      	movs	r3, #0
 800d046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d048:	e26d      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d04a:	4b1d      	ldr	r3, [pc, #116]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d04e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d052:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d054:	4b1a      	ldr	r3, [pc, #104]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f003 0304 	and.w	r3, r3, #4
 800d05c:	2b04      	cmp	r3, #4
 800d05e:	d10c      	bne.n	800d07a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d062:	2b00      	cmp	r3, #0
 800d064:	d109      	bne.n	800d07a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d066:	4b16      	ldr	r3, [pc, #88]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	08db      	lsrs	r3, r3, #3
 800d06c:	f003 0303 	and.w	r3, r3, #3
 800d070:	4a14      	ldr	r2, [pc, #80]	; (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d072:	fa22 f303 	lsr.w	r3, r2, r3
 800d076:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d078:	e01e      	b.n	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d07a:	4b11      	ldr	r3, [pc, #68]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d086:	d106      	bne.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d08a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d08e:	d102      	bne.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d090:	4b0d      	ldr	r3, [pc, #52]	; (800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d092:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d094:	e010      	b.n	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d096:	4b0a      	ldr	r3, [pc, #40]	; (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d09e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0a2:	d106      	bne.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0aa:	d102      	bne.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d0ac:	4b07      	ldr	r3, [pc, #28]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0b0:	e002      	b.n	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d0b6:	e236      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d0b8:	e235      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d0ba:	4b05      	ldr	r3, [pc, #20]	; (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0be:	e232      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d0c0:	58024400 	.word	0x58024400
 800d0c4:	03d09000 	.word	0x03d09000
 800d0c8:	003d0900 	.word	0x003d0900
 800d0cc:	02faf080 	.word	0x02faf080
 800d0d0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0d8:	e225      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d0da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0de:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800d0e2:	430b      	orrs	r3, r1
 800d0e4:	f040 8085 	bne.w	800d1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d0e8:	4b9c      	ldr	r3, [pc, #624]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0ec:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d0f0:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800d0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d0f8:	d06b      	beq.n	800d1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d100:	d874      	bhi.n	800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d104:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d108:	d056      	beq.n	800d1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d110:	d86c      	bhi.n	800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d114:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d118:	d03b      	beq.n	800d192 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d120:	d864      	bhi.n	800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d128:	d021      	beq.n	800d16e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d12c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d130:	d85c      	bhi.n	800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d134:	2b00      	cmp	r3, #0
 800d136:	d004      	beq.n	800d142 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d13e:	d004      	beq.n	800d14a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d140:	e054      	b.n	800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d142:	f7fe fb5f 	bl	800b804 <HAL_RCC_GetPCLK1Freq>
 800d146:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d148:	e1ed      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d14a:	4b84      	ldr	r3, [pc, #528]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d156:	d107      	bne.n	800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d158:	f107 0318 	add.w	r3, r7, #24
 800d15c:	4618      	mov	r0, r3
 800d15e:	f000 fa05 	bl	800d56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d162:	69fb      	ldr	r3, [r7, #28]
 800d164:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d166:	e1de      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d168:	2300      	movs	r3, #0
 800d16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d16c:	e1db      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d16e:	4b7b      	ldr	r3, [pc, #492]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d17a:	d107      	bne.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d17c:	f107 030c 	add.w	r3, r7, #12
 800d180:	4618      	mov	r0, r3
 800d182:	f000 fb47 	bl	800d814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d18a:	e1cc      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d18c:	2300      	movs	r3, #0
 800d18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d190:	e1c9      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d192:	4b72      	ldr	r3, [pc, #456]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f003 0304 	and.w	r3, r3, #4
 800d19a:	2b04      	cmp	r3, #4
 800d19c:	d109      	bne.n	800d1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d19e:	4b6f      	ldr	r3, [pc, #444]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	08db      	lsrs	r3, r3, #3
 800d1a4:	f003 0303 	and.w	r3, r3, #3
 800d1a8:	4a6d      	ldr	r2, [pc, #436]	; (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d1aa:	fa22 f303 	lsr.w	r3, r2, r3
 800d1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1b0:	e1b9      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1b6:	e1b6      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d1b8:	4b68      	ldr	r3, [pc, #416]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1c4:	d102      	bne.n	800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d1c6:	4b67      	ldr	r3, [pc, #412]	; (800d364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1ca:	e1ac      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1d0:	e1a9      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d1d2:	4b62      	ldr	r3, [pc, #392]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1de:	d102      	bne.n	800d1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d1e0:	4b61      	ldr	r3, [pc, #388]	; (800d368 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1e4:	e19f      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1ea:	e19c      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1f0:	e199      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d1f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1f6:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800d1fa:	430b      	orrs	r3, r1
 800d1fc:	d173      	bne.n	800d2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d1fe:	4b57      	ldr	r3, [pc, #348]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d202:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d206:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d20e:	d02f      	beq.n	800d270 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d216:	d863      	bhi.n	800d2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d004      	beq.n	800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d224:	d012      	beq.n	800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d226:	e05b      	b.n	800d2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d228:	4b4c      	ldr	r3, [pc, #304]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d234:	d107      	bne.n	800d246 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d236:	f107 0318 	add.w	r3, r7, #24
 800d23a:	4618      	mov	r0, r3
 800d23c:	f000 f996 	bl	800d56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d244:	e16f      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d246:	2300      	movs	r3, #0
 800d248:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d24a:	e16c      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d24c:	4b43      	ldr	r3, [pc, #268]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d258:	d107      	bne.n	800d26a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d25a:	f107 030c 	add.w	r3, r7, #12
 800d25e:	4618      	mov	r0, r3
 800d260:	f000 fad8 	bl	800d814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d268:	e15d      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d26a:	2300      	movs	r3, #0
 800d26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d26e:	e15a      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d270:	4b3a      	ldr	r3, [pc, #232]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d278:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d27a:	4b38      	ldr	r3, [pc, #224]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f003 0304 	and.w	r3, r3, #4
 800d282:	2b04      	cmp	r3, #4
 800d284:	d10c      	bne.n	800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d109      	bne.n	800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d28c:	4b33      	ldr	r3, [pc, #204]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	08db      	lsrs	r3, r3, #3
 800d292:	f003 0303 	and.w	r3, r3, #3
 800d296:	4a32      	ldr	r2, [pc, #200]	; (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d298:	fa22 f303 	lsr.w	r3, r2, r3
 800d29c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d29e:	e01e      	b.n	800d2de <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d2a0:	4b2e      	ldr	r3, [pc, #184]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2ac:	d106      	bne.n	800d2bc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d2b4:	d102      	bne.n	800d2bc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d2b6:	4b2b      	ldr	r3, [pc, #172]	; (800d364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2ba:	e010      	b.n	800d2de <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d2bc:	4b27      	ldr	r3, [pc, #156]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d2c8:	d106      	bne.n	800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2d0:	d102      	bne.n	800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d2d2:	4b25      	ldr	r3, [pc, #148]	; (800d368 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2d6:	e002      	b.n	800d2de <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d2dc:	e123      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d2de:	e122      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2e4:	e11f      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d2e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2ea:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d2ee:	430b      	orrs	r3, r1
 800d2f0:	d13c      	bne.n	800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d2f2:	4b1a      	ldr	r3, [pc, #104]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d004      	beq.n	800d30c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d308:	d012      	beq.n	800d330 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d30a:	e023      	b.n	800d354 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d30c:	4b13      	ldr	r3, [pc, #76]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d318:	d107      	bne.n	800d32a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d31a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d31e:	4618      	mov	r0, r3
 800d320:	f000 fbcc 	bl	800dabc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d326:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d328:	e0fd      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d32a:	2300      	movs	r3, #0
 800d32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d32e:	e0fa      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d330:	4b0a      	ldr	r3, [pc, #40]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d338:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d33c:	d107      	bne.n	800d34e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d33e:	f107 0318 	add.w	r3, r7, #24
 800d342:	4618      	mov	r0, r3
 800d344:	f000 f912 	bl	800d56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d348:	6a3b      	ldr	r3, [r7, #32]
 800d34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d34c:	e0eb      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d352:	e0e8      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d354:	2300      	movs	r3, #0
 800d356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d358:	e0e5      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d35a:	bf00      	nop
 800d35c:	58024400 	.word	0x58024400
 800d360:	03d09000 	.word	0x03d09000
 800d364:	003d0900 	.word	0x003d0900
 800d368:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d36c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d370:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d374:	430b      	orrs	r3, r1
 800d376:	f040 8085 	bne.w	800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d37a:	4b6d      	ldr	r3, [pc, #436]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d37c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d37e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d382:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d386:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d38a:	d06b      	beq.n	800d464 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d38e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d392:	d874      	bhi.n	800d47e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d39a:	d056      	beq.n	800d44a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3a2:	d86c      	bhi.n	800d47e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d3aa:	d03b      	beq.n	800d424 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d3b2:	d864      	bhi.n	800d47e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3ba:	d021      	beq.n	800d400 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3c2:	d85c      	bhi.n	800d47e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d004      	beq.n	800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3d0:	d004      	beq.n	800d3dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d3d2:	e054      	b.n	800d47e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d3d4:	f000 f8b4 	bl	800d540 <HAL_RCCEx_GetD3PCLK1Freq>
 800d3d8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d3da:	e0a4      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d3dc:	4b54      	ldr	r3, [pc, #336]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d3e8:	d107      	bne.n	800d3fa <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3ea:	f107 0318 	add.w	r3, r7, #24
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f000 f8bc 	bl	800d56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3f8:	e095      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3fe:	e092      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d400:	4b4b      	ldr	r3, [pc, #300]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d40c:	d107      	bne.n	800d41e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d40e:	f107 030c 	add.w	r3, r7, #12
 800d412:	4618      	mov	r0, r3
 800d414:	f000 f9fe 	bl	800d814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d41c:	e083      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d41e:	2300      	movs	r3, #0
 800d420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d422:	e080      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d424:	4b42      	ldr	r3, [pc, #264]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f003 0304 	and.w	r3, r3, #4
 800d42c:	2b04      	cmp	r3, #4
 800d42e:	d109      	bne.n	800d444 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d430:	4b3f      	ldr	r3, [pc, #252]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	08db      	lsrs	r3, r3, #3
 800d436:	f003 0303 	and.w	r3, r3, #3
 800d43a:	4a3e      	ldr	r2, [pc, #248]	; (800d534 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d43c:	fa22 f303 	lsr.w	r3, r2, r3
 800d440:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d442:	e070      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d444:	2300      	movs	r3, #0
 800d446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d448:	e06d      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d44a:	4b39      	ldr	r3, [pc, #228]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d456:	d102      	bne.n	800d45e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d458:	4b37      	ldr	r3, [pc, #220]	; (800d538 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d45c:	e063      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d45e:	2300      	movs	r3, #0
 800d460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d462:	e060      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d464:	4b32      	ldr	r3, [pc, #200]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d46c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d470:	d102      	bne.n	800d478 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d472:	4b32      	ldr	r3, [pc, #200]	; (800d53c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d474:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d476:	e056      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d478:	2300      	movs	r3, #0
 800d47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d47c:	e053      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d47e:	2300      	movs	r3, #0
 800d480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d482:	e050      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d484:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d488:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d48c:	430b      	orrs	r3, r1
 800d48e:	d148      	bne.n	800d522 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d490:	4b27      	ldr	r3, [pc, #156]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d494:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d498:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d49c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4a0:	d02a      	beq.n	800d4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4a8:	d838      	bhi.n	800d51c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d004      	beq.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d4b6:	d00d      	beq.n	800d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d4b8:	e030      	b.n	800d51c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d4ba:	4b1d      	ldr	r3, [pc, #116]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d4c6:	d102      	bne.n	800d4ce <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d4c8:	4b1c      	ldr	r3, [pc, #112]	; (800d53c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4cc:	e02b      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4d2:	e028      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d4d4:	4b16      	ldr	r3, [pc, #88]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d4e0:	d107      	bne.n	800d4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d4e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f000 fae8 	bl	800dabc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4f0:	e019      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4f6:	e016      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d4f8:	4b0d      	ldr	r3, [pc, #52]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d504:	d107      	bne.n	800d516 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d506:	f107 0318 	add.w	r3, r7, #24
 800d50a:	4618      	mov	r0, r3
 800d50c:	f000 f82e 	bl	800d56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d514:	e007      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d516:	2300      	movs	r3, #0
 800d518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d51a:	e004      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d51c:	2300      	movs	r3, #0
 800d51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d520:	e001      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d522:	2300      	movs	r3, #0
 800d524:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3740      	adds	r7, #64	; 0x40
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	58024400 	.word	0x58024400
 800d534:	03d09000 	.word	0x03d09000
 800d538:	003d0900 	.word	0x003d0900
 800d53c:	02faf080 	.word	0x02faf080

0800d540 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d544:	f7fe f92e 	bl	800b7a4 <HAL_RCC_GetHCLKFreq>
 800d548:	4602      	mov	r2, r0
 800d54a:	4b06      	ldr	r3, [pc, #24]	; (800d564 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d54c:	6a1b      	ldr	r3, [r3, #32]
 800d54e:	091b      	lsrs	r3, r3, #4
 800d550:	f003 0307 	and.w	r3, r3, #7
 800d554:	4904      	ldr	r1, [pc, #16]	; (800d568 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d556:	5ccb      	ldrb	r3, [r1, r3]
 800d558:	f003 031f 	and.w	r3, r3, #31
 800d55c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d560:	4618      	mov	r0, r3
 800d562:	bd80      	pop	{r7, pc}
 800d564:	58024400 	.word	0x58024400
 800d568:	080203f0 	.word	0x080203f0

0800d56c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b089      	sub	sp, #36	; 0x24
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d574:	4ba1      	ldr	r3, [pc, #644]	; (800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d578:	f003 0303 	and.w	r3, r3, #3
 800d57c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d57e:	4b9f      	ldr	r3, [pc, #636]	; (800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d582:	0b1b      	lsrs	r3, r3, #12
 800d584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d588:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d58a:	4b9c      	ldr	r3, [pc, #624]	; (800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d58e:	091b      	lsrs	r3, r3, #4
 800d590:	f003 0301 	and.w	r3, r3, #1
 800d594:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d596:	4b99      	ldr	r3, [pc, #612]	; (800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d59a:	08db      	lsrs	r3, r3, #3
 800d59c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5a0:	693a      	ldr	r2, [r7, #16]
 800d5a2:	fb02 f303 	mul.w	r3, r2, r3
 800d5a6:	ee07 3a90 	vmov	s15, r3
 800d5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f000 8111 	beq.w	800d7dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	f000 8083 	beq.w	800d6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	f200 80a1 	bhi.w	800d70c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d003      	beq.n	800d5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d056      	beq.n	800d684 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d5d6:	e099      	b.n	800d70c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5d8:	4b88      	ldr	r3, [pc, #544]	; (800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f003 0320 	and.w	r3, r3, #32
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d02d      	beq.n	800d640 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d5e4:	4b85      	ldr	r3, [pc, #532]	; (800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	08db      	lsrs	r3, r3, #3
 800d5ea:	f003 0303 	and.w	r3, r3, #3
 800d5ee:	4a84      	ldr	r2, [pc, #528]	; (800d800 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d5f0:	fa22 f303 	lsr.w	r3, r2, r3
 800d5f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	ee07 3a90 	vmov	s15, r3
 800d5fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	ee07 3a90 	vmov	s15, r3
 800d606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d60a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d60e:	4b7b      	ldr	r3, [pc, #492]	; (800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d616:	ee07 3a90 	vmov	s15, r3
 800d61a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d61e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d622:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d62a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d62e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d63a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d63e:	e087      	b.n	800d750 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	ee07 3a90 	vmov	s15, r3
 800d646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d64a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d808 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d64e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d652:	4b6a      	ldr	r3, [pc, #424]	; (800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d65a:	ee07 3a90 	vmov	s15, r3
 800d65e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d662:	ed97 6a03 	vldr	s12, [r7, #12]
 800d666:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d66a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d66e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d67a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d67e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d682:	e065      	b.n	800d750 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	ee07 3a90 	vmov	s15, r3
 800d68a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d68e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d696:	4b59      	ldr	r3, [pc, #356]	; (800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d69a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d69e:	ee07 3a90 	vmov	s15, r3
 800d6a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d6ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6c6:	e043      	b.n	800d750 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	ee07 3a90 	vmov	s15, r3
 800d6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d810 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d6d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6da:	4b48      	ldr	r3, [pc, #288]	; (800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6e2:	ee07 3a90 	vmov	s15, r3
 800d6e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d6f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d702:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d70a:	e021      	b.n	800d750 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	ee07 3a90 	vmov	s15, r3
 800d712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d716:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d71a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d71e:	4b37      	ldr	r3, [pc, #220]	; (800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d726:	ee07 3a90 	vmov	s15, r3
 800d72a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d72e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d732:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d73a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d73e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d74a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d74e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d750:	4b2a      	ldr	r3, [pc, #168]	; (800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d754:	0a5b      	lsrs	r3, r3, #9
 800d756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d75a:	ee07 3a90 	vmov	s15, r3
 800d75e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d762:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d76a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d76e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d776:	ee17 2a90 	vmov	r2, s15
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d77e:	4b1f      	ldr	r3, [pc, #124]	; (800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d782:	0c1b      	lsrs	r3, r3, #16
 800d784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d788:	ee07 3a90 	vmov	s15, r3
 800d78c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d790:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d794:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d798:	edd7 6a07 	vldr	s13, [r7, #28]
 800d79c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7a4:	ee17 2a90 	vmov	r2, s15
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d7ac:	4b13      	ldr	r3, [pc, #76]	; (800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b0:	0e1b      	lsrs	r3, r3, #24
 800d7b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7b6:	ee07 3a90 	vmov	s15, r3
 800d7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7d2:	ee17 2a90 	vmov	r2, s15
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d7da:	e008      	b.n	800d7ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	609a      	str	r2, [r3, #8]
}
 800d7ee:	bf00      	nop
 800d7f0:	3724      	adds	r7, #36	; 0x24
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	58024400 	.word	0x58024400
 800d800:	03d09000 	.word	0x03d09000
 800d804:	46000000 	.word	0x46000000
 800d808:	4c742400 	.word	0x4c742400
 800d80c:	4a742400 	.word	0x4a742400
 800d810:	4c3ebc20 	.word	0x4c3ebc20

0800d814 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d814:	b480      	push	{r7}
 800d816:	b089      	sub	sp, #36	; 0x24
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d81c:	4ba1      	ldr	r3, [pc, #644]	; (800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d820:	f003 0303 	and.w	r3, r3, #3
 800d824:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d826:	4b9f      	ldr	r3, [pc, #636]	; (800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d82a:	0d1b      	lsrs	r3, r3, #20
 800d82c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d830:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d832:	4b9c      	ldr	r3, [pc, #624]	; (800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d836:	0a1b      	lsrs	r3, r3, #8
 800d838:	f003 0301 	and.w	r3, r3, #1
 800d83c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d83e:	4b99      	ldr	r3, [pc, #612]	; (800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d842:	08db      	lsrs	r3, r3, #3
 800d844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d848:	693a      	ldr	r2, [r7, #16]
 800d84a:	fb02 f303 	mul.w	r3, r2, r3
 800d84e:	ee07 3a90 	vmov	s15, r3
 800d852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d856:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f000 8111 	beq.w	800da84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d862:	69bb      	ldr	r3, [r7, #24]
 800d864:	2b02      	cmp	r3, #2
 800d866:	f000 8083 	beq.w	800d970 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d86a:	69bb      	ldr	r3, [r7, #24]
 800d86c:	2b02      	cmp	r3, #2
 800d86e:	f200 80a1 	bhi.w	800d9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d003      	beq.n	800d880 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d056      	beq.n	800d92c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d87e:	e099      	b.n	800d9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d880:	4b88      	ldr	r3, [pc, #544]	; (800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f003 0320 	and.w	r3, r3, #32
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d02d      	beq.n	800d8e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d88c:	4b85      	ldr	r3, [pc, #532]	; (800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	08db      	lsrs	r3, r3, #3
 800d892:	f003 0303 	and.w	r3, r3, #3
 800d896:	4a84      	ldr	r2, [pc, #528]	; (800daa8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d898:	fa22 f303 	lsr.w	r3, r2, r3
 800d89c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	ee07 3a90 	vmov	s15, r3
 800d8a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	ee07 3a90 	vmov	s15, r3
 800d8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8b6:	4b7b      	ldr	r3, [pc, #492]	; (800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8be:	ee07 3a90 	vmov	s15, r3
 800d8c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800daac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d8ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d8e6:	e087      	b.n	800d9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	ee07 3a90 	vmov	s15, r3
 800d8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800dab0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d8f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8fa:	4b6a      	ldr	r3, [pc, #424]	; (800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d902:	ee07 3a90 	vmov	s15, r3
 800d906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d90a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d90e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800daac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d91a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d91e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d922:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d92a:	e065      	b.n	800d9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	ee07 3a90 	vmov	s15, r3
 800d932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d936:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d93a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d93e:	4b59      	ldr	r3, [pc, #356]	; (800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d946:	ee07 3a90 	vmov	s15, r3
 800d94a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d94e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d952:	eddf 5a56 	vldr	s11, [pc, #344]	; 800daac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d95a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d95e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d96a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d96e:	e043      	b.n	800d9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	ee07 3a90 	vmov	s15, r3
 800d976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d97a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800dab8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d97e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d982:	4b48      	ldr	r3, [pc, #288]	; (800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d98a:	ee07 3a90 	vmov	s15, r3
 800d98e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d992:	ed97 6a03 	vldr	s12, [r7, #12]
 800d996:	eddf 5a45 	vldr	s11, [pc, #276]	; 800daac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d99a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d99e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9b2:	e021      	b.n	800d9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	ee07 3a90 	vmov	s15, r3
 800d9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d9c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9c6:	4b37      	ldr	r3, [pc, #220]	; (800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ce:	ee07 3a90 	vmov	s15, r3
 800d9d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9da:	eddf 5a34 	vldr	s11, [pc, #208]	; 800daac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d9de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d9f8:	4b2a      	ldr	r3, [pc, #168]	; (800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9fc:	0a5b      	lsrs	r3, r3, #9
 800d9fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da02:	ee07 3a90 	vmov	s15, r3
 800da06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da12:	edd7 6a07 	vldr	s13, [r7, #28]
 800da16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da1e:	ee17 2a90 	vmov	r2, s15
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800da26:	4b1f      	ldr	r3, [pc, #124]	; (800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da2a:	0c1b      	lsrs	r3, r3, #16
 800da2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da30:	ee07 3a90 	vmov	s15, r3
 800da34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da40:	edd7 6a07 	vldr	s13, [r7, #28]
 800da44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da4c:	ee17 2a90 	vmov	r2, s15
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800da54:	4b13      	ldr	r3, [pc, #76]	; (800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da58:	0e1b      	lsrs	r3, r3, #24
 800da5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da5e:	ee07 3a90 	vmov	s15, r3
 800da62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800da72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da7a:	ee17 2a90 	vmov	r2, s15
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800da82:	e008      	b.n	800da96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2200      	movs	r2, #0
 800da88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2200      	movs	r2, #0
 800da8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	609a      	str	r2, [r3, #8]
}
 800da96:	bf00      	nop
 800da98:	3724      	adds	r7, #36	; 0x24
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop
 800daa4:	58024400 	.word	0x58024400
 800daa8:	03d09000 	.word	0x03d09000
 800daac:	46000000 	.word	0x46000000
 800dab0:	4c742400 	.word	0x4c742400
 800dab4:	4a742400 	.word	0x4a742400
 800dab8:	4c3ebc20 	.word	0x4c3ebc20

0800dabc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b089      	sub	sp, #36	; 0x24
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dac4:	4ba0      	ldr	r3, [pc, #640]	; (800dd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac8:	f003 0303 	and.w	r3, r3, #3
 800dacc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800dace:	4b9e      	ldr	r3, [pc, #632]	; (800dd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dad2:	091b      	lsrs	r3, r3, #4
 800dad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dad8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800dada:	4b9b      	ldr	r3, [pc, #620]	; (800dd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dade:	f003 0301 	and.w	r3, r3, #1
 800dae2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800dae4:	4b98      	ldr	r3, [pc, #608]	; (800dd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dae8:	08db      	lsrs	r3, r3, #3
 800daea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800daee:	693a      	ldr	r2, [r7, #16]
 800daf0:	fb02 f303 	mul.w	r3, r2, r3
 800daf4:	ee07 3a90 	vmov	s15, r3
 800daf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dafc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	2b00      	cmp	r3, #0
 800db04:	f000 8111 	beq.w	800dd2a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800db08:	69bb      	ldr	r3, [r7, #24]
 800db0a:	2b02      	cmp	r3, #2
 800db0c:	f000 8083 	beq.w	800dc16 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	2b02      	cmp	r3, #2
 800db14:	f200 80a1 	bhi.w	800dc5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d003      	beq.n	800db26 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	2b01      	cmp	r3, #1
 800db22:	d056      	beq.n	800dbd2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800db24:	e099      	b.n	800dc5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db26:	4b88      	ldr	r3, [pc, #544]	; (800dd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f003 0320 	and.w	r3, r3, #32
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d02d      	beq.n	800db8e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db32:	4b85      	ldr	r3, [pc, #532]	; (800dd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	08db      	lsrs	r3, r3, #3
 800db38:	f003 0303 	and.w	r3, r3, #3
 800db3c:	4a83      	ldr	r2, [pc, #524]	; (800dd4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800db3e:	fa22 f303 	lsr.w	r3, r2, r3
 800db42:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	ee07 3a90 	vmov	s15, r3
 800db4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	ee07 3a90 	vmov	s15, r3
 800db54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db5c:	4b7a      	ldr	r3, [pc, #488]	; (800dd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db64:	ee07 3a90 	vmov	s15, r3
 800db68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800db70:	eddf 5a77 	vldr	s11, [pc, #476]	; 800dd50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db88:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800db8c:	e087      	b.n	800dc9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	ee07 3a90 	vmov	s15, r3
 800db94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db98:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800dd54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800db9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dba0:	4b69      	ldr	r3, [pc, #420]	; (800dd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dba8:	ee07 3a90 	vmov	s15, r3
 800dbac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbb4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800dd50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dbb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dbc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dbd0:	e065      	b.n	800dc9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	ee07 3a90 	vmov	s15, r3
 800dbd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbdc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800dd58 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800dbe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbe4:	4b58      	ldr	r3, [pc, #352]	; (800dd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbec:	ee07 3a90 	vmov	s15, r3
 800dbf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbf4:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbf8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800dd50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dbfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc14:	e043      	b.n	800dc9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	ee07 3a90 	vmov	s15, r3
 800dc1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc20:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800dd5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800dc24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc28:	4b47      	ldr	r3, [pc, #284]	; (800dd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc30:	ee07 3a90 	vmov	s15, r3
 800dc34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc38:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc3c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800dd50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc58:	e021      	b.n	800dc9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	ee07 3a90 	vmov	s15, r3
 800dc60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc64:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800dd54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dc68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc6c:	4b36      	ldr	r3, [pc, #216]	; (800dd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc74:	ee07 3a90 	vmov	s15, r3
 800dc78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc80:	eddf 5a33 	vldr	s11, [pc, #204]	; 800dd50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc9c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800dc9e:	4b2a      	ldr	r3, [pc, #168]	; (800dd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dca2:	0a5b      	lsrs	r3, r3, #9
 800dca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dca8:	ee07 3a90 	vmov	s15, r3
 800dcac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dcb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dcb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800dcbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dcc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcc4:	ee17 2a90 	vmov	r2, s15
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800dccc:	4b1e      	ldr	r3, [pc, #120]	; (800dd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dcce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcd0:	0c1b      	lsrs	r3, r3, #16
 800dcd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcd6:	ee07 3a90 	vmov	s15, r3
 800dcda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dce6:	edd7 6a07 	vldr	s13, [r7, #28]
 800dcea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dcee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcf2:	ee17 2a90 	vmov	r2, s15
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dcfa:	4b13      	ldr	r3, [pc, #76]	; (800dd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcfe:	0e1b      	lsrs	r3, r3, #24
 800dd00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd04:	ee07 3a90 	vmov	s15, r3
 800dd08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd10:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd14:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd20:	ee17 2a90 	vmov	r2, s15
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dd28:	e008      	b.n	800dd3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2200      	movs	r2, #0
 800dd34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	609a      	str	r2, [r3, #8]
}
 800dd3c:	bf00      	nop
 800dd3e:	3724      	adds	r7, #36	; 0x24
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr
 800dd48:	58024400 	.word	0x58024400
 800dd4c:	03d09000 	.word	0x03d09000
 800dd50:	46000000 	.word	0x46000000
 800dd54:	4c742400 	.word	0x4c742400
 800dd58:	4a742400 	.word	0x4a742400
 800dd5c:	4c3ebc20 	.word	0x4c3ebc20

0800dd60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dd6e:	4b53      	ldr	r3, [pc, #332]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800dd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd72:	f003 0303 	and.w	r3, r3, #3
 800dd76:	2b03      	cmp	r3, #3
 800dd78:	d101      	bne.n	800dd7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	e099      	b.n	800deb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dd7e:	4b4f      	ldr	r3, [pc, #316]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4a4e      	ldr	r2, [pc, #312]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800dd84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dd88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd8a:	f7f6 fa2f 	bl	80041ec <HAL_GetTick>
 800dd8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dd90:	e008      	b.n	800dda4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dd92:	f7f6 fa2b 	bl	80041ec <HAL_GetTick>
 800dd96:	4602      	mov	r2, r0
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	1ad3      	subs	r3, r2, r3
 800dd9c:	2b02      	cmp	r3, #2
 800dd9e:	d901      	bls.n	800dda4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dda0:	2303      	movs	r3, #3
 800dda2:	e086      	b.n	800deb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dda4:	4b45      	ldr	r3, [pc, #276]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d1f0      	bne.n	800dd92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ddb0:	4b42      	ldr	r3, [pc, #264]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800ddb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	031b      	lsls	r3, r3, #12
 800ddbe:	493f      	ldr	r1, [pc, #252]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	628b      	str	r3, [r1, #40]	; 0x28
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	689b      	ldr	r3, [r3, #8]
 800ddd2:	3b01      	subs	r3, #1
 800ddd4:	025b      	lsls	r3, r3, #9
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	431a      	orrs	r2, r3
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	3b01      	subs	r3, #1
 800dde0:	041b      	lsls	r3, r3, #16
 800dde2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dde6:	431a      	orrs	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	691b      	ldr	r3, [r3, #16]
 800ddec:	3b01      	subs	r3, #1
 800ddee:	061b      	lsls	r3, r3, #24
 800ddf0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ddf4:	4931      	ldr	r1, [pc, #196]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ddfa:	4b30      	ldr	r3, [pc, #192]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800ddfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	695b      	ldr	r3, [r3, #20]
 800de06:	492d      	ldr	r1, [pc, #180]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de08:	4313      	orrs	r3, r2
 800de0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800de0c:	4b2b      	ldr	r3, [pc, #172]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de10:	f023 0220 	bic.w	r2, r3, #32
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	699b      	ldr	r3, [r3, #24]
 800de18:	4928      	ldr	r1, [pc, #160]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de1a:	4313      	orrs	r3, r2
 800de1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800de1e:	4b27      	ldr	r3, [pc, #156]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de22:	4a26      	ldr	r2, [pc, #152]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de24:	f023 0310 	bic.w	r3, r3, #16
 800de28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800de2a:	4b24      	ldr	r3, [pc, #144]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de2e:	4b24      	ldr	r3, [pc, #144]	; (800dec0 <RCCEx_PLL2_Config+0x160>)
 800de30:	4013      	ands	r3, r2
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	69d2      	ldr	r2, [r2, #28]
 800de36:	00d2      	lsls	r2, r2, #3
 800de38:	4920      	ldr	r1, [pc, #128]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de3a:	4313      	orrs	r3, r2
 800de3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800de3e:	4b1f      	ldr	r3, [pc, #124]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de42:	4a1e      	ldr	r2, [pc, #120]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de44:	f043 0310 	orr.w	r3, r3, #16
 800de48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d106      	bne.n	800de5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800de50:	4b1a      	ldr	r3, [pc, #104]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de54:	4a19      	ldr	r2, [pc, #100]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800de5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800de5c:	e00f      	b.n	800de7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	2b01      	cmp	r3, #1
 800de62:	d106      	bne.n	800de72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800de64:	4b15      	ldr	r3, [pc, #84]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de68:	4a14      	ldr	r2, [pc, #80]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800de70:	e005      	b.n	800de7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800de72:	4b12      	ldr	r3, [pc, #72]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de76:	4a11      	ldr	r2, [pc, #68]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800de7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800de7e:	4b0f      	ldr	r3, [pc, #60]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4a0e      	ldr	r2, [pc, #56]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800de84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800de88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de8a:	f7f6 f9af 	bl	80041ec <HAL_GetTick>
 800de8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800de90:	e008      	b.n	800dea4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800de92:	f7f6 f9ab 	bl	80041ec <HAL_GetTick>
 800de96:	4602      	mov	r2, r0
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	1ad3      	subs	r3, r2, r3
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d901      	bls.n	800dea4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dea0:	2303      	movs	r3, #3
 800dea2:	e006      	b.n	800deb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dea4:	4b05      	ldr	r3, [pc, #20]	; (800debc <RCCEx_PLL2_Config+0x15c>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800deac:	2b00      	cmp	r3, #0
 800deae:	d0f0      	beq.n	800de92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800deb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3710      	adds	r7, #16
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	58024400 	.word	0x58024400
 800dec0:	ffff0007 	.word	0xffff0007

0800dec4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dece:	2300      	movs	r3, #0
 800ded0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ded2:	4b53      	ldr	r3, [pc, #332]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800ded4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ded6:	f003 0303 	and.w	r3, r3, #3
 800deda:	2b03      	cmp	r3, #3
 800dedc:	d101      	bne.n	800dee2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dede:	2301      	movs	r3, #1
 800dee0:	e099      	b.n	800e016 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dee2:	4b4f      	ldr	r3, [pc, #316]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	4a4e      	ldr	r2, [pc, #312]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800dee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800deec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800deee:	f7f6 f97d 	bl	80041ec <HAL_GetTick>
 800def2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800def4:	e008      	b.n	800df08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800def6:	f7f6 f979 	bl	80041ec <HAL_GetTick>
 800defa:	4602      	mov	r2, r0
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	1ad3      	subs	r3, r2, r3
 800df00:	2b02      	cmp	r3, #2
 800df02:	d901      	bls.n	800df08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800df04:	2303      	movs	r3, #3
 800df06:	e086      	b.n	800e016 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800df08:	4b45      	ldr	r3, [pc, #276]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df10:	2b00      	cmp	r3, #0
 800df12:	d1f0      	bne.n	800def6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800df14:	4b42      	ldr	r3, [pc, #264]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800df16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df18:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	051b      	lsls	r3, r3, #20
 800df22:	493f      	ldr	r1, [pc, #252]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800df24:	4313      	orrs	r3, r2
 800df26:	628b      	str	r3, [r1, #40]	; 0x28
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	3b01      	subs	r3, #1
 800df2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	689b      	ldr	r3, [r3, #8]
 800df36:	3b01      	subs	r3, #1
 800df38:	025b      	lsls	r3, r3, #9
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	431a      	orrs	r2, r3
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	3b01      	subs	r3, #1
 800df44:	041b      	lsls	r3, r3, #16
 800df46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800df4a:	431a      	orrs	r2, r3
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	691b      	ldr	r3, [r3, #16]
 800df50:	3b01      	subs	r3, #1
 800df52:	061b      	lsls	r3, r3, #24
 800df54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800df58:	4931      	ldr	r1, [pc, #196]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800df5a:	4313      	orrs	r3, r2
 800df5c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800df5e:	4b30      	ldr	r3, [pc, #192]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800df60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	695b      	ldr	r3, [r3, #20]
 800df6a:	492d      	ldr	r1, [pc, #180]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800df6c:	4313      	orrs	r3, r2
 800df6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800df70:	4b2b      	ldr	r3, [pc, #172]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800df72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	699b      	ldr	r3, [r3, #24]
 800df7c:	4928      	ldr	r1, [pc, #160]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800df7e:	4313      	orrs	r3, r2
 800df80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800df82:	4b27      	ldr	r3, [pc, #156]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800df84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df86:	4a26      	ldr	r2, [pc, #152]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800df88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800df8e:	4b24      	ldr	r3, [pc, #144]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800df90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df92:	4b24      	ldr	r3, [pc, #144]	; (800e024 <RCCEx_PLL3_Config+0x160>)
 800df94:	4013      	ands	r3, r2
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	69d2      	ldr	r2, [r2, #28]
 800df9a:	00d2      	lsls	r2, r2, #3
 800df9c:	4920      	ldr	r1, [pc, #128]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dfa2:	4b1f      	ldr	r3, [pc, #124]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800dfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfa6:	4a1e      	ldr	r2, [pc, #120]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800dfa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dfac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d106      	bne.n	800dfc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dfb4:	4b1a      	ldr	r3, [pc, #104]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800dfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb8:	4a19      	ldr	r2, [pc, #100]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800dfba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dfbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dfc0:	e00f      	b.n	800dfe2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d106      	bne.n	800dfd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dfc8:	4b15      	ldr	r3, [pc, #84]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800dfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfcc:	4a14      	ldr	r2, [pc, #80]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800dfce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dfd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dfd4:	e005      	b.n	800dfe2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dfd6:	4b12      	ldr	r3, [pc, #72]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800dfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfda:	4a11      	ldr	r2, [pc, #68]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800dfdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dfe0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dfe2:	4b0f      	ldr	r3, [pc, #60]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4a0e      	ldr	r2, [pc, #56]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800dfe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfee:	f7f6 f8fd 	bl	80041ec <HAL_GetTick>
 800dff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dff4:	e008      	b.n	800e008 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dff6:	f7f6 f8f9 	bl	80041ec <HAL_GetTick>
 800dffa:	4602      	mov	r2, r0
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	1ad3      	subs	r3, r2, r3
 800e000:	2b02      	cmp	r3, #2
 800e002:	d901      	bls.n	800e008 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e004:	2303      	movs	r3, #3
 800e006:	e006      	b.n	800e016 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e008:	4b05      	ldr	r3, [pc, #20]	; (800e020 <RCCEx_PLL3_Config+0x15c>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e010:	2b00      	cmp	r3, #0
 800e012:	d0f0      	beq.n	800dff6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e014:	7bfb      	ldrb	r3, [r7, #15]
}
 800e016:	4618      	mov	r0, r3
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	58024400 	.word	0x58024400
 800e024:	ffff0007 	.word	0xffff0007

0800e028 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d101      	bne.n	800e03a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800e036:	2301      	movs	r3, #1
 800e038:	e092      	b.n	800e160 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	7a5b      	ldrb	r3, [r3, #9]
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	2b00      	cmp	r3, #0
 800e042:	d105      	bne.n	800e050 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2200      	movs	r2, #0
 800e048:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f7f5 f92c 	bl	80032a8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2202      	movs	r2, #2
 800e054:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f022 0204 	bic.w	r2, r2, #4
 800e064:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	4b3e      	ldr	r3, [pc, #248]	; (800e168 <HAL_RNG_Init+0x140>)
 800e06e:	4013      	ands	r3, r2
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	6852      	ldr	r2, [r2, #4]
 800e074:	431a      	orrs	r2, r3
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e07e:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4a39      	ldr	r2, [pc, #228]	; (800e16c <HAL_RNG_Init+0x144>)
 800e086:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f247 2274 	movw	r2, #29300	; 0x7274
 800e090:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800e0a0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e0a2:	f7f6 f8a3 	bl	80041ec <HAL_GetTick>
 800e0a6:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800e0a8:	e016      	b.n	800e0d8 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800e0aa:	f7f6 f89f 	bl	80041ec <HAL_GetTick>
 800e0ae:	4602      	mov	r2, r0
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	1ad3      	subs	r3, r2, r3
 800e0b4:	2b02      	cmp	r3, #2
 800e0b6:	d90f      	bls.n	800e0d8 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e0c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0c6:	d107      	bne.n	800e0d8 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2202      	movs	r2, #2
 800e0d2:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e043      	b.n	800e160 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e0e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0e6:	d0e0      	beq.n	800e0aa <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f042 0204 	orr.w	r2, r2, #4
 800e0f6:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e102:	2b40      	cmp	r3, #64	; 0x40
 800e104:	d104      	bne.n	800e110 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2204      	movs	r2, #4
 800e10a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800e10c:	2301      	movs	r3, #1
 800e10e:	e027      	b.n	800e160 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800e110:	f7f6 f86c 	bl	80041ec <HAL_GetTick>
 800e114:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800e116:	e015      	b.n	800e144 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800e118:	f7f6 f868 	bl	80041ec <HAL_GetTick>
 800e11c:	4602      	mov	r2, r0
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	1ad3      	subs	r3, r2, r3
 800e122:	2b02      	cmp	r3, #2
 800e124:	d90e      	bls.n	800e144 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	f003 0304 	and.w	r3, r3, #4
 800e130:	2b04      	cmp	r3, #4
 800e132:	d107      	bne.n	800e144 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2204      	movs	r2, #4
 800e138:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2202      	movs	r2, #2
 800e13e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800e140:	2301      	movs	r3, #1
 800e142:	e00d      	b.n	800e160 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	f003 0304 	and.w	r3, r3, #4
 800e14e:	2b04      	cmp	r3, #4
 800e150:	d0e2      	beq.n	800e118 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2201      	movs	r2, #1
 800e156:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800e15e:	2300      	movs	r3, #0
}
 800e160:	4618      	mov	r0, r3
 800e162:	3710      	adds	r7, #16
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	bfffffdf 	.word	0xbfffffdf
 800e16c:	17590abc 	.word	0x17590abc

0800e170 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	7a1b      	ldrb	r3, [r3, #8]
 800e182:	2b01      	cmp	r3, #1
 800e184:	d101      	bne.n	800e18a <HAL_RNG_GenerateRandomNumber+0x1a>
 800e186:	2302      	movs	r3, #2
 800e188:	e06d      	b.n	800e266 <HAL_RNG_GenerateRandomNumber+0xf6>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2201      	movs	r2, #1
 800e18e:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	7a5b      	ldrb	r3, [r3, #9]
 800e194:	b2db      	uxtb	r3, r3
 800e196:	2b01      	cmp	r3, #1
 800e198:	d15c      	bne.n	800e254 <HAL_RNG_GenerateRandomNumber+0xe4>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2202      	movs	r2, #2
 800e19e:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1aa:	2b40      	cmp	r3, #64	; 0x40
 800e1ac:	d10c      	bne.n	800e1c8 <HAL_RNG_GenerateRandomNumber+0x58>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2208      	movs	r2, #8
 800e1b2:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 f864 	bl	800e282 <RNG_RecoverSeedError>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800e1be:	7bfb      	ldrb	r3, [r7, #15]
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d101      	bne.n	800e1c8 <HAL_RNG_GenerateRandomNumber+0x58>
      {
        return status;
 800e1c4:	7bfb      	ldrb	r3, [r7, #15]
 800e1c6:	e04e      	b.n	800e266 <HAL_RNG_GenerateRandomNumber+0xf6>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800e1c8:	f7f6 f810 	bl	80041ec <HAL_GetTick>
 800e1cc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e1ce:	e018      	b.n	800e202 <HAL_RNG_GenerateRandomNumber+0x92>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800e1d0:	f7f6 f80c 	bl	80041ec <HAL_GetTick>
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	1ad3      	subs	r3, r2, r3
 800e1da:	2b02      	cmp	r3, #2
 800e1dc:	d911      	bls.n	800e202 <HAL_RNG_GenerateRandomNumber+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	f003 0301 	and.w	r3, r3, #1
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d00a      	beq.n	800e202 <HAL_RNG_GenerateRandomNumber+0x92>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2202      	movs	r2, #2
 800e1f6:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800e1fe:	2301      	movs	r3, #1
 800e200:	e031      	b.n	800e266 <HAL_RNG_GenerateRandomNumber+0xf6>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	f003 0301 	and.w	r3, r3, #1
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d1df      	bne.n	800e1d0 <HAL_RNG_GenerateRandomNumber+0x60>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	689a      	ldr	r2, [r3, #8]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e224:	2b40      	cmp	r3, #64	; 0x40
 800e226:	d10d      	bne.n	800e244 <HAL_RNG_GenerateRandomNumber+0xd4>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2208      	movs	r2, #8
 800e22c:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800e22e:	2301      	movs	r3, #1
 800e230:	73fb      	strb	r3, [r7, #15]
      /* Clear bit DRDY */
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	685a      	ldr	r2, [r3, #4]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f022 0201 	bic.w	r2, r2, #1
 800e240:	605a      	str	r2, [r3, #4]
 800e242:	e003      	b.n	800e24c <HAL_RNG_GenerateRandomNumber+0xdc>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	691a      	ldr	r2, [r3, #16]
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2201      	movs	r2, #1
 800e250:	725a      	strb	r2, [r3, #9]
 800e252:	e004      	b.n	800e25e <HAL_RNG_GenerateRandomNumber+0xee>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2204      	movs	r2, #4
 800e258:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800e25a:	2301      	movs	r3, #1
 800e25c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2200      	movs	r2, #0
 800e262:	721a      	strb	r2, [r3, #8]

  return status;
 800e264:	7bfb      	ldrb	r3, [r7, #15]
}
 800e266:	4618      	mov	r0, r3
 800e268:	3710      	adds	r7, #16
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}

0800e26e <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800e26e:	b480      	push	{r7}
 800e270:	b083      	sub	sp, #12
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800e276:	bf00      	nop
 800e278:	370c      	adds	r7, #12
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr

0800e282 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800e282:	b580      	push	{r7, lr}
 800e284:	b084      	sub	sp, #16
 800e286:	af00      	add	r7, sp, #0
 800e288:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e28a:	2300      	movs	r3, #0
 800e28c:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	f003 0304 	and.w	r3, r3, #4
 800e298:	2b04      	cmp	r3, #4
 800e29a:	d008      	beq.n	800e2ae <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	685a      	ldr	r2, [r3, #4]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e2aa:	605a      	str	r2, [r3, #4]
 800e2ac:	e05f      	b.n	800e36e <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e2bc:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800e2cc:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800e2ce:	2302      	movs	r3, #2
 800e2d0:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	3b01      	subs	r3, #1
 800e2d6:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d110      	bne.n	800e300 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	f043 0202 	orr.w	r2, r3, #2
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7ff ffb9 	bl	800e26e <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	e03d      	b.n	800e37c <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e30a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e30e:	d0e0      	beq.n	800e2d2 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e31a:	2b40      	cmp	r3, #64	; 0x40
 800e31c:	d107      	bne.n	800e32e <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	685a      	ldr	r2, [r3, #4]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e32c:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800e32e:	2302      	movs	r3, #2
 800e330:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	3b01      	subs	r3, #1
 800e336:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d110      	bne.n	800e360 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2201      	movs	r2, #1
 800e342:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	f043 0202 	orr.w	r2, r3, #2
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2200      	movs	r2, #0
 800e354:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f7ff ff89 	bl	800e26e <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800e35c:	2301      	movs	r3, #1
 800e35e:	e00d      	b.n	800e37c <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	685b      	ldr	r3, [r3, #4]
 800e366:	f003 0304 	and.w	r3, r3, #4
 800e36a:	2b04      	cmp	r3, #4
 800e36c:	d0e1      	beq.n	800e332 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	f023 0208 	bic.w	r2, r3, #8
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800e37a:	2300      	movs	r3, #0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3710      	adds	r7, #16
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b08a      	sub	sp, #40	; 0x28
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d101      	bne.n	800e396 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e392:	2301      	movs	r3, #1
 800e394:	e075      	b.n	800e482 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d105      	bne.n	800e3ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f7f4 ffb7 	bl	800331c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2204      	movs	r2, #4
 800e3b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f000 f868 	bl	800e48c <HAL_SD_InitCard>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d001      	beq.n	800e3c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	e05d      	b.n	800e482 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800e3c6:	f107 0308 	add.w	r3, r7, #8
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 fdaf 	bl	800ef30 <HAL_SD_GetCardStatus>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d001      	beq.n	800e3dc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800e3d8:	2301      	movs	r3, #1
 800e3da:	e052      	b.n	800e482 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800e3dc:	7e3b      	ldrb	r3, [r7, #24]
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800e3e2:	7e7b      	ldrb	r3, [r7, #25]
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d10a      	bne.n	800e406 <HAL_SD_Init+0x82>
 800e3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d102      	bne.n	800e3fc <HAL_SD_Init+0x78>
 800e3f6:	6a3b      	ldr	r3, [r7, #32]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d004      	beq.n	800e406 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e402:	659a      	str	r2, [r3, #88]	; 0x58
 800e404:	e00b      	b.n	800e41e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d104      	bne.n	800e418 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e414:	659a      	str	r2, [r3, #88]	; 0x58
 800e416:	e002      	b.n	800e41e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2200      	movs	r2, #0
 800e41c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	4619      	mov	r1, r3
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f000 fe6d 	bl	800f104 <HAL_SD_ConfigWideBusOperation>
 800e42a:	4603      	mov	r3, r0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d001      	beq.n	800e434 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800e430:	2301      	movs	r3, #1
 800e432:	e026      	b.n	800e482 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800e434:	f7f5 feda 	bl	80041ec <HAL_GetTick>
 800e438:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e43a:	e011      	b.n	800e460 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e43c:	f7f5 fed6 	bl	80041ec <HAL_GetTick>
 800e440:	4602      	mov	r2, r0
 800e442:	69fb      	ldr	r3, [r7, #28]
 800e444:	1ad3      	subs	r3, r2, r3
 800e446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e44a:	d109      	bne.n	800e460 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e452:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2201      	movs	r2, #1
 800e458:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800e45c:	2303      	movs	r3, #3
 800e45e:	e010      	b.n	800e482 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 ff61 	bl	800f328 <HAL_SD_GetCardState>
 800e466:	4603      	mov	r3, r0
 800e468:	2b04      	cmp	r3, #4
 800e46a:	d1e7      	bne.n	800e43c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2200      	movs	r2, #0
 800e470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2200      	movs	r2, #0
 800e476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2201      	movs	r2, #1
 800e47c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800e480:	2300      	movs	r3, #0
}
 800e482:	4618      	mov	r0, r3
 800e484:	3728      	adds	r7, #40	; 0x28
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
	...

0800e48c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e48c:	b590      	push	{r4, r7, lr}
 800e48e:	b08d      	sub	sp, #52	; 0x34
 800e490:	af02      	add	r7, sp, #8
 800e492:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e494:	2300      	movs	r3, #0
 800e496:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e498:	2300      	movs	r3, #0
 800e49a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e49c:	2300      	movs	r3, #0
 800e49e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e4a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e4a8:	f04f 0100 	mov.w	r1, #0
 800e4ac:	f7fe fb76 	bl	800cb9c <HAL_RCCEx_GetPeriphCLKFreq>
 800e4b0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800e4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d109      	bne.n	800e4cc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e4c6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e070      	b.n	800e5ae <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ce:	0a1b      	lsrs	r3, r3, #8
 800e4d0:	4a39      	ldr	r2, [pc, #228]	; (800e5b8 <HAL_SD_InitCard+0x12c>)
 800e4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4d6:	091b      	lsrs	r3, r3, #4
 800e4d8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681c      	ldr	r4, [r3, #0]
 800e4de:	466a      	mov	r2, sp
 800e4e0:	f107 0318 	add.w	r3, r7, #24
 800e4e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e4e8:	e882 0003 	stmia.w	r2, {r0, r1}
 800e4ec:	f107 030c 	add.w	r3, r7, #12
 800e4f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	f004 fec4 	bl	8013280 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f004 ff07 	bl	8013310 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800e502:	69fb      	ldr	r3, [r7, #28]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d005      	beq.n	800e514 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	005b      	lsls	r3, r3, #1
 800e50c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e50e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e512:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800e514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e516:	2b00      	cmp	r3, #0
 800e518:	d007      	beq.n	800e52a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e51a:	4a28      	ldr	r2, [pc, #160]	; (800e5bc <HAL_SD_InitCard+0x130>)
 800e51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e522:	3301      	adds	r3, #1
 800e524:	4618      	mov	r0, r3
 800e526:	f7f5 fe6d 	bl	8004204 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f000 ffea 	bl	800f504 <SD_PowerON>
 800e530:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e532:	6a3b      	ldr	r3, [r7, #32]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d00b      	beq.n	800e550 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e544:	6a3b      	ldr	r3, [r7, #32]
 800e546:	431a      	orrs	r2, r3
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e54c:	2301      	movs	r3, #1
 800e54e:	e02e      	b.n	800e5ae <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f000 ff09 	bl	800f368 <SD_InitCard>
 800e556:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e558:	6a3b      	ldr	r3, [r7, #32]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00b      	beq.n	800e576 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2201      	movs	r2, #1
 800e562:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e56a:	6a3b      	ldr	r3, [r7, #32]
 800e56c:	431a      	orrs	r2, r3
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e572:	2301      	movs	r3, #1
 800e574:	e01b      	b.n	800e5ae <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e57e:	4618      	mov	r0, r3
 800e580:	f004 ff5c 	bl	801343c <SDMMC_CmdBlockLength>
 800e584:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e586:	6a3b      	ldr	r3, [r7, #32]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d00f      	beq.n	800e5ac <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4a0b      	ldr	r2, [pc, #44]	; (800e5c0 <HAL_SD_InitCard+0x134>)
 800e592:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e598:	6a3b      	ldr	r3, [r7, #32]
 800e59a:	431a      	orrs	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	e000      	b.n	800e5ae <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e5ac:	2300      	movs	r3, #0
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	372c      	adds	r7, #44	; 0x2c
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd90      	pop	{r4, r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	014f8b59 	.word	0x014f8b59
 800e5bc:	00012110 	.word	0x00012110
 800e5c0:	1fe00fff 	.word	0x1fe00fff

0800e5c4 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b08c      	sub	sp, #48	; 0x30
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	60f8      	str	r0, [r7, #12]
 800e5cc:	60b9      	str	r1, [r7, #8]
 800e5ce:	607a      	str	r2, [r7, #4]
 800e5d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d107      	bne.n	800e5ec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	e08d      	b.n	800e708 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	f040 8086 	bne.w	800e706 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	441a      	add	r2, r3
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d907      	bls.n	800e61e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e612:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e61a:	2301      	movs	r3, #1
 800e61c:	e074      	b.n	800e708 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2203      	movs	r2, #3
 800e622:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	2200      	movs	r2, #0
 800e62c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	68ba      	ldr	r2, [r7, #8]
 800e632:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	025a      	lsls	r2, r3, #9
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e640:	2b01      	cmp	r3, #1
 800e642:	d002      	beq.n	800e64a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800e644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e646:	025b      	lsls	r3, r3, #9
 800e648:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e64a:	f04f 33ff 	mov.w	r3, #4294967295
 800e64e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	025b      	lsls	r3, r3, #9
 800e654:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e656:	2390      	movs	r3, #144	; 0x90
 800e658:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e65a:	2302      	movs	r3, #2
 800e65c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e65e:	2300      	movs	r3, #0
 800e660:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e662:	2300      	movs	r3, #0
 800e664:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f107 0210 	add.w	r2, r7, #16
 800e66e:	4611      	mov	r1, r2
 800e670:	4618      	mov	r0, r3
 800e672:	f004 feb7 	bl	80133e4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	68da      	ldr	r2, [r3, #12]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e684:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	68ba      	ldr	r2, [r7, #8]
 800e68c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	2201      	movs	r2, #1
 800e694:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d90a      	bls.n	800e6b2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2282      	movs	r2, #130	; 0x82
 800e6a0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f004 ff0d 	bl	80134c8 <SDMMC_CmdReadMultiBlock>
 800e6ae:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e6b0:	e009      	b.n	800e6c6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2281      	movs	r2, #129	; 0x81
 800e6b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f004 fedf 	bl	8013482 <SDMMC_CmdReadSingleBlock>
 800e6c4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d012      	beq.n	800e6f2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a0f      	ldr	r2, [pc, #60]	; (800e710 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e6d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6da:	431a      	orrs	r2, r3
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2201      	movs	r2, #1
 800e6e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e00a      	b.n	800e708 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e700:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800e702:	2300      	movs	r3, #0
 800e704:	e000      	b.n	800e708 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e706:	2302      	movs	r3, #2
  }
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3730      	adds	r7, #48	; 0x30
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	1fe00fff 	.word	0x1fe00fff

0800e714 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b08c      	sub	sp, #48	; 0x30
 800e718:	af00      	add	r7, sp, #0
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	60b9      	str	r1, [r7, #8]
 800e71e:	607a      	str	r2, [r7, #4]
 800e720:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d107      	bne.n	800e73c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e730:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e738:	2301      	movs	r3, #1
 800e73a:	e08d      	b.n	800e858 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b01      	cmp	r3, #1
 800e746:	f040 8086 	bne.w	800e856 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2200      	movs	r2, #0
 800e74e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	441a      	add	r2, r3
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d907      	bls.n	800e76e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e762:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e76a:	2301      	movs	r3, #1
 800e76c:	e074      	b.n	800e858 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2203      	movs	r2, #3
 800e772:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2200      	movs	r2, #0
 800e77c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	68ba      	ldr	r2, [r7, #8]
 800e782:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	025a      	lsls	r2, r3, #9
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e790:	2b01      	cmp	r3, #1
 800e792:	d002      	beq.n	800e79a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e796:	025b      	lsls	r3, r3, #9
 800e798:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e79a:	f04f 33ff 	mov.w	r3, #4294967295
 800e79e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	025b      	lsls	r3, r3, #9
 800e7a4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e7a6:	2390      	movs	r3, #144	; 0x90
 800e7a8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f107 0210 	add.w	r2, r7, #16
 800e7be:	4611      	mov	r1, r2
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f004 fe0f 	bl	80133e4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	68da      	ldr	r2, [r3, #12]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e7d4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	68ba      	ldr	r2, [r7, #8]
 800e7dc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d90a      	bls.n	800e802 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	22a0      	movs	r2, #160	; 0xa0
 800e7f0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f004 feab 	bl	8013554 <SDMMC_CmdWriteMultiBlock>
 800e7fe:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e800:	e009      	b.n	800e816 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2290      	movs	r2, #144	; 0x90
 800e806:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e80e:	4618      	mov	r0, r3
 800e810:	f004 fe7d 	bl	801350e <SDMMC_CmdWriteSingleBlock>
 800e814:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d012      	beq.n	800e842 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a0f      	ldr	r2, [pc, #60]	; (800e860 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e822:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82a:	431a      	orrs	r2, r3
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2201      	movs	r2, #1
 800e834:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e83e:	2301      	movs	r3, #1
 800e840:	e00a      	b.n	800e858 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800e850:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e852:	2300      	movs	r3, #0
 800e854:	e000      	b.n	800e858 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e856:	2302      	movs	r3, #2
  }
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3730      	adds	r7, #48	; 0x30
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	1fe00fff 	.word	0x1fe00fff

0800e864 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e870:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d008      	beq.n	800e892 <HAL_SD_IRQHandler+0x2e>
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f003 0308 	and.w	r3, r3, #8
 800e886:	2b00      	cmp	r3, #0
 800e888:	d003      	beq.n	800e892 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f001 f926 	bl	800fadc <SD_Read_IT>
 800e890:	e19a      	b.n	800ebc8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	f000 80ac 	beq.w	800e9fa <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e8aa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	4b59      	ldr	r3, [pc, #356]	; (800ea1c <HAL_SD_IRQHandler+0x1b8>)
 800e8b8:	400b      	ands	r3, r1
 800e8ba:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e8ca:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68da      	ldr	r2, [r3, #12]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e8da:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f003 0308 	and.w	r3, r3, #8
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d038      	beq.n	800e958 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f003 0302 	and.w	r3, r3, #2
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d104      	bne.n	800e8fa <HAL_SD_IRQHandler+0x96>
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f003 0320 	and.w	r3, r3, #32
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d011      	beq.n	800e91e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	4618      	mov	r0, r3
 800e900:	f004 fe4c 	bl	801359c <SDMMC_CmdStopTransfer>
 800e904:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d008      	beq.n	800e91e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	431a      	orrs	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 f95b 	bl	800ebd4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	4a3f      	ldr	r2, [pc, #252]	; (800ea20 <HAL_SD_IRQHandler+0x1bc>)
 800e924:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2201      	movs	r2, #1
 800e92a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2200      	movs	r2, #0
 800e932:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f003 0301 	and.w	r3, r3, #1
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d104      	bne.n	800e948 <HAL_SD_IRQHandler+0xe4>
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f003 0302 	and.w	r3, r3, #2
 800e944:	2b00      	cmp	r3, #0
 800e946:	d003      	beq.n	800e950 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f006 fe55 	bl	80155f8 <HAL_SD_RxCpltCallback>
 800e94e:	e13b      	b.n	800ebc8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f006 fe47 	bl	80155e4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e956:	e137      	b.n	800ebc8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e95e:	2b00      	cmp	r3, #0
 800e960:	f000 8132 	beq.w	800ebc8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	2200      	movs	r2, #0
 800e96a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2200      	movs	r2, #0
 800e972:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2200      	movs	r2, #0
 800e97a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f003 0302 	and.w	r3, r3, #2
 800e982:	2b00      	cmp	r3, #0
 800e984:	d104      	bne.n	800e990 <HAL_SD_IRQHandler+0x12c>
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f003 0320 	and.w	r3, r3, #32
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d011      	beq.n	800e9b4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4618      	mov	r0, r3
 800e996:	f004 fe01 	bl	801359c <SDMMC_CmdStopTransfer>
 800e99a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d008      	beq.n	800e9b4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	431a      	orrs	r2, r3
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f000 f910 	bl	800ebd4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	f003 0310 	and.w	r3, r3, #16
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d104      	bne.n	800e9d6 <HAL_SD_IRQHandler+0x172>
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f003 0320 	and.w	r3, r3, #32
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d002      	beq.n	800e9dc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f006 fe04 	bl	80155e4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f003 0301 	and.w	r3, r3, #1
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d105      	bne.n	800e9f2 <HAL_SD_IRQHandler+0x18e>
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f003 0302 	and.w	r3, r3, #2
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	f000 80eb 	beq.w	800ebc8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f006 fe00 	bl	80155f8 <HAL_SD_RxCpltCallback>
}
 800e9f8:	e0e6      	b.n	800ebc8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d00d      	beq.n	800ea24 <HAL_SD_IRQHandler+0x1c0>
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f003 0308 	and.w	r3, r3, #8
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d008      	beq.n	800ea24 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f001 f8a8 	bl	800fb68 <SD_Write_IT>
 800ea18:	e0d6      	b.n	800ebc8 <HAL_SD_IRQHandler+0x364>
 800ea1a:	bf00      	nop
 800ea1c:	ffff3ec5 	.word	0xffff3ec5
 800ea20:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea2a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	f000 809d 	beq.w	800eb6e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea3a:	f003 0302 	and.w	r3, r3, #2
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d005      	beq.n	800ea4e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea46:	f043 0202 	orr.w	r2, r3, #2
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea54:	f003 0308 	and.w	r3, r3, #8
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d005      	beq.n	800ea68 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea60:	f043 0208 	orr.w	r2, r3, #8
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea6e:	f003 0320 	and.w	r3, r3, #32
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d005      	beq.n	800ea82 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea7a:	f043 0220 	orr.w	r2, r3, #32
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea88:	f003 0310 	and.w	r3, r3, #16
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d005      	beq.n	800ea9c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea94:	f043 0210 	orr.w	r2, r3, #16
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4a4b      	ldr	r2, [pc, #300]	; (800ebd0 <HAL_SD_IRQHandler+0x36c>)
 800eaa2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800eab2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	68da      	ldr	r2, [r3, #12]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eac2:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ead2:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	68da      	ldr	r2, [r3, #12]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800eae2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	4618      	mov	r0, r3
 800eaea:	f004 fd57 	bl	801359c <SDMMC_CmdStopTransfer>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaf4:	431a      	orrs	r2, r3
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	68da      	ldr	r2, [r3, #12]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eb08:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb12:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f003 0308 	and.w	r3, r3, #8
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d00a      	beq.n	800eb34 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2201      	movs	r2, #1
 800eb22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f000 f851 	bl	800ebd4 <HAL_SD_ErrorCallback>
}
 800eb32:	e049      	b.n	800ebc8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d044      	beq.n	800ebc8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d040      	beq.n	800ebc8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800eb54:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2201      	movs	r2, #1
 800eb62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 f834 	bl	800ebd4 <HAL_SD_ErrorCallback>
}
 800eb6c:	e02c      	b.n	800ebc8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d025      	beq.n	800ebc8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb84:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb8c:	f003 0304 	and.w	r3, r3, #4
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d10c      	bne.n	800ebae <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	f003 0320 	and.w	r3, r3, #32
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d003      	beq.n	800eba6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f001 f84a 	bl	800fc38 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800eba4:	e010      	b.n	800ebc8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f001 f832 	bl	800fc10 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800ebac:	e00c      	b.n	800ebc8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f003 0320 	and.w	r3, r3, #32
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d003      	beq.n	800ebc0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f001 f833 	bl	800fc24 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800ebbe:	e003      	b.n	800ebc8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f001 f81b 	bl	800fbfc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800ebc6:	e7ff      	b.n	800ebc8 <HAL_SD_IRQHandler+0x364>
 800ebc8:	bf00      	nop
 800ebca:	3710      	adds	r7, #16
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	18000f3a 	.word	0x18000f3a

0800ebd4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ebdc:	bf00      	nop
 800ebde:	370c      	adds	r7, #12
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr

0800ebe8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebf6:	0f9b      	lsrs	r3, r3, #30
 800ebf8:	b2da      	uxtb	r2, r3
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec02:	0e9b      	lsrs	r3, r3, #26
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	f003 030f 	and.w	r3, r3, #15
 800ec0a:	b2da      	uxtb	r2, r3
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec14:	0e1b      	lsrs	r3, r3, #24
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	f003 0303 	and.w	r3, r3, #3
 800ec1c:	b2da      	uxtb	r2, r3
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec26:	0c1b      	lsrs	r3, r3, #16
 800ec28:	b2da      	uxtb	r2, r3
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec32:	0a1b      	lsrs	r3, r3, #8
 800ec34:	b2da      	uxtb	r2, r3
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec3e:	b2da      	uxtb	r2, r3
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec48:	0d1b      	lsrs	r3, r3, #20
 800ec4a:	b29a      	uxth	r2, r3
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec54:	0c1b      	lsrs	r3, r3, #16
 800ec56:	b2db      	uxtb	r3, r3
 800ec58:	f003 030f 	and.w	r3, r3, #15
 800ec5c:	b2da      	uxtb	r2, r3
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec66:	0bdb      	lsrs	r3, r3, #15
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	f003 0301 	and.w	r3, r3, #1
 800ec6e:	b2da      	uxtb	r2, r3
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec78:	0b9b      	lsrs	r3, r3, #14
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	f003 0301 	and.w	r3, r3, #1
 800ec80:	b2da      	uxtb	r2, r3
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec8a:	0b5b      	lsrs	r3, r3, #13
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	f003 0301 	and.w	r3, r3, #1
 800ec92:	b2da      	uxtb	r2, r3
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec9c:	0b1b      	lsrs	r3, r3, #12
 800ec9e:	b2db      	uxtb	r3, r3
 800eca0:	f003 0301 	and.w	r3, r3, #1
 800eca4:	b2da      	uxtb	r2, r3
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	2200      	movs	r2, #0
 800ecae:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d163      	bne.n	800ed80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ecbc:	009a      	lsls	r2, r3, #2
 800ecbe:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ecc2:	4013      	ands	r3, r2
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ecc8:	0f92      	lsrs	r2, r2, #30
 800ecca:	431a      	orrs	r2, r3
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecd4:	0edb      	lsrs	r3, r3, #27
 800ecd6:	b2db      	uxtb	r3, r3
 800ecd8:	f003 0307 	and.w	r3, r3, #7
 800ecdc:	b2da      	uxtb	r2, r3
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ece6:	0e1b      	lsrs	r3, r3, #24
 800ece8:	b2db      	uxtb	r3, r3
 800ecea:	f003 0307 	and.w	r3, r3, #7
 800ecee:	b2da      	uxtb	r2, r3
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecf8:	0d5b      	lsrs	r3, r3, #21
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	f003 0307 	and.w	r3, r3, #7
 800ed00:	b2da      	uxtb	r2, r3
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed0a:	0c9b      	lsrs	r3, r3, #18
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	f003 0307 	and.w	r3, r3, #7
 800ed12:	b2da      	uxtb	r2, r3
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed1c:	0bdb      	lsrs	r3, r3, #15
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	f003 0307 	and.w	r3, r3, #7
 800ed24:	b2da      	uxtb	r2, r3
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	691b      	ldr	r3, [r3, #16]
 800ed2e:	1c5a      	adds	r2, r3, #1
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	7e1b      	ldrb	r3, [r3, #24]
 800ed38:	b2db      	uxtb	r3, r3
 800ed3a:	f003 0307 	and.w	r3, r3, #7
 800ed3e:	3302      	adds	r3, #2
 800ed40:	2201      	movs	r2, #1
 800ed42:	fa02 f303 	lsl.w	r3, r2, r3
 800ed46:	687a      	ldr	r2, [r7, #4]
 800ed48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ed4a:	fb03 f202 	mul.w	r2, r3, r2
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	7a1b      	ldrb	r3, [r3, #8]
 800ed56:	b2db      	uxtb	r3, r3
 800ed58:	f003 030f 	and.w	r3, r3, #15
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	409a      	lsls	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed68:	687a      	ldr	r2, [r7, #4]
 800ed6a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ed6c:	0a52      	lsrs	r2, r2, #9
 800ed6e:	fb03 f202 	mul.w	r2, r3, r2
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed7c:	655a      	str	r2, [r3, #84]	; 0x54
 800ed7e:	e031      	b.n	800ede4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed84:	2b01      	cmp	r3, #1
 800ed86:	d11d      	bne.n	800edc4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed8c:	041b      	lsls	r3, r3, #16
 800ed8e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed96:	0c1b      	lsrs	r3, r3, #16
 800ed98:	431a      	orrs	r2, r3
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	691b      	ldr	r3, [r3, #16]
 800eda2:	3301      	adds	r3, #1
 800eda4:	029a      	lsls	r2, r3, #10
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800edb8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	655a      	str	r2, [r3, #84]	; 0x54
 800edc2:	e00f      	b.n	800ede4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	4a58      	ldr	r2, [pc, #352]	; (800ef2c <HAL_SD_GetCardCSD+0x344>)
 800edca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2201      	movs	r2, #1
 800eddc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800ede0:	2301      	movs	r3, #1
 800ede2:	e09d      	b.n	800ef20 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ede8:	0b9b      	lsrs	r3, r3, #14
 800edea:	b2db      	uxtb	r3, r3
 800edec:	f003 0301 	and.w	r3, r3, #1
 800edf0:	b2da      	uxtb	r2, r3
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edfa:	09db      	lsrs	r3, r3, #7
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee02:	b2da      	uxtb	r2, r3
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee12:	b2da      	uxtb	r2, r3
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee1c:	0fdb      	lsrs	r3, r3, #31
 800ee1e:	b2da      	uxtb	r2, r3
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee28:	0f5b      	lsrs	r3, r3, #29
 800ee2a:	b2db      	uxtb	r3, r3
 800ee2c:	f003 0303 	and.w	r3, r3, #3
 800ee30:	b2da      	uxtb	r2, r3
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee3a:	0e9b      	lsrs	r3, r3, #26
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	f003 0307 	and.w	r3, r3, #7
 800ee42:	b2da      	uxtb	r2, r3
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee4c:	0d9b      	lsrs	r3, r3, #22
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	f003 030f 	and.w	r3, r3, #15
 800ee54:	b2da      	uxtb	r2, r3
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee5e:	0d5b      	lsrs	r3, r3, #21
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	f003 0301 	and.w	r3, r3, #1
 800ee66:	b2da      	uxtb	r2, r3
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	2200      	movs	r2, #0
 800ee72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee7a:	0c1b      	lsrs	r3, r3, #16
 800ee7c:	b2db      	uxtb	r3, r3
 800ee7e:	f003 0301 	and.w	r3, r3, #1
 800ee82:	b2da      	uxtb	r2, r3
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee8e:	0bdb      	lsrs	r3, r3, #15
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	f003 0301 	and.w	r3, r3, #1
 800ee96:	b2da      	uxtb	r2, r3
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eea2:	0b9b      	lsrs	r3, r3, #14
 800eea4:	b2db      	uxtb	r3, r3
 800eea6:	f003 0301 	and.w	r3, r3, #1
 800eeaa:	b2da      	uxtb	r2, r3
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eeb6:	0b5b      	lsrs	r3, r3, #13
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	f003 0301 	and.w	r3, r3, #1
 800eebe:	b2da      	uxtb	r2, r3
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eeca:	0b1b      	lsrs	r3, r3, #12
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	f003 0301 	and.w	r3, r3, #1
 800eed2:	b2da      	uxtb	r2, r3
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eede:	0a9b      	lsrs	r3, r3, #10
 800eee0:	b2db      	uxtb	r3, r3
 800eee2:	f003 0303 	and.w	r3, r3, #3
 800eee6:	b2da      	uxtb	r2, r3
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eef2:	0a1b      	lsrs	r3, r3, #8
 800eef4:	b2db      	uxtb	r3, r3
 800eef6:	f003 0303 	and.w	r3, r3, #3
 800eefa:	b2da      	uxtb	r2, r3
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef06:	085b      	lsrs	r3, r3, #1
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef0e:	b2da      	uxtb	r2, r3
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	2201      	movs	r2, #1
 800ef1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ef1e:	2300      	movs	r3, #0
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	370c      	adds	r7, #12
 800ef24:	46bd      	mov	sp, r7
 800ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2a:	4770      	bx	lr
 800ef2c:	1fe00fff 	.word	0x1fe00fff

0800ef30 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b094      	sub	sp, #80	; 0x50
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef46:	b2db      	uxtb	r3, r3
 800ef48:	2b03      	cmp	r3, #3
 800ef4a:	d101      	bne.n	800ef50 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	e0a7      	b.n	800f0a0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ef50:	f107 0308 	add.w	r3, r7, #8
 800ef54:	4619      	mov	r1, r3
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 fb62 	bl	800f620 <SD_SendSDStatus>
 800ef5c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d011      	beq.n	800ef88 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4a4f      	ldr	r2, [pc, #316]	; (800f0a8 <HAL_SD_GetCardStatus+0x178>)
 800ef6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef72:	431a      	orrs	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ef80:	2301      	movs	r3, #1
 800ef82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ef86:	e070      	b.n	800f06a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	099b      	lsrs	r3, r3, #6
 800ef8c:	b2db      	uxtb	r3, r3
 800ef8e:	f003 0303 	and.w	r3, r3, #3
 800ef92:	b2da      	uxtb	r2, r3
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	095b      	lsrs	r3, r3, #5
 800ef9c:	b2db      	uxtb	r3, r3
 800ef9e:	f003 0301 	and.w	r3, r3, #1
 800efa2:	b2da      	uxtb	r2, r3
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	0a1b      	lsrs	r3, r3, #8
 800efac:	b29b      	uxth	r3, r3
 800efae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800efb2:	b29a      	uxth	r2, r3
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	0e1b      	lsrs	r3, r3, #24
 800efb8:	b29b      	uxth	r3, r3
 800efba:	4313      	orrs	r3, r2
 800efbc:	b29a      	uxth	r2, r3
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	061a      	lsls	r2, r3, #24
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	021b      	lsls	r3, r3, #8
 800efca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800efce:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	0a1b      	lsrs	r3, r3, #8
 800efd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800efd8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	0e1b      	lsrs	r3, r3, #24
 800efde:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	b2da      	uxtb	r2, r3
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	0a1b      	lsrs	r3, r3, #8
 800eff0:	b2da      	uxtb	r2, r3
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	0d1b      	lsrs	r3, r3, #20
 800effa:	b2db      	uxtb	r3, r3
 800effc:	f003 030f 	and.w	r3, r3, #15
 800f000:	b2da      	uxtb	r2, r3
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	0c1b      	lsrs	r3, r3, #16
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f010:	b29a      	uxth	r2, r3
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	b29b      	uxth	r3, r3
 800f016:	b2db      	uxtb	r3, r3
 800f018:	b29b      	uxth	r3, r3
 800f01a:	4313      	orrs	r3, r2
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	0a9b      	lsrs	r3, r3, #10
 800f026:	b2db      	uxtb	r3, r3
 800f028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f02c:	b2da      	uxtb	r2, r3
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	0a1b      	lsrs	r3, r3, #8
 800f036:	b2db      	uxtb	r3, r3
 800f038:	f003 0303 	and.w	r3, r3, #3
 800f03c:	b2da      	uxtb	r2, r3
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	091b      	lsrs	r3, r3, #4
 800f046:	b2db      	uxtb	r3, r3
 800f048:	f003 030f 	and.w	r3, r3, #15
 800f04c:	b2da      	uxtb	r2, r3
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	b2db      	uxtb	r3, r3
 800f056:	f003 030f 	and.w	r3, r3, #15
 800f05a:	b2da      	uxtb	r2, r3
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800f060:	69bb      	ldr	r3, [r7, #24]
 800f062:	0e1b      	lsrs	r3, r3, #24
 800f064:	b2da      	uxtb	r2, r3
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f072:	4618      	mov	r0, r3
 800f074:	f004 f9e2 	bl	801343c <SDMMC_CmdBlockLength>
 800f078:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800f07a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d00d      	beq.n	800f09c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	4a08      	ldr	r2, [pc, #32]	; (800f0a8 <HAL_SD_GetCardStatus+0x178>)
 800f086:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f08c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2201      	movs	r2, #1
 800f092:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800f096:	2301      	movs	r3, #1
 800f098:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800f09c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3750      	adds	r7, #80	; 0x50
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}
 800f0a8:	1fe00fff 	.word	0x1fe00fff

0800f0ac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b083      	sub	sp, #12
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800f0f6:	2300      	movs	r3, #0
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	370c      	adds	r7, #12
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr

0800f104 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800f104:	b590      	push	{r4, r7, lr}
 800f106:	b08d      	sub	sp, #52	; 0x34
 800f108:	af02      	add	r7, sp, #8
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800f10e:	2300      	movs	r3, #0
 800f110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2203      	movs	r2, #3
 800f118:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f120:	2b03      	cmp	r3, #3
 800f122:	d02e      	beq.n	800f182 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f12a:	d106      	bne.n	800f13a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f130:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	635a      	str	r2, [r3, #52]	; 0x34
 800f138:	e029      	b.n	800f18e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f140:	d10a      	bne.n	800f158 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 fb64 	bl	800f810 <SD_WideBus_Enable>
 800f148:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f14e:	6a3b      	ldr	r3, [r7, #32]
 800f150:	431a      	orrs	r2, r3
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	635a      	str	r2, [r3, #52]	; 0x34
 800f156:	e01a      	b.n	800f18e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d10a      	bne.n	800f174 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 fba1 	bl	800f8a6 <SD_WideBus_Disable>
 800f164:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f16a:	6a3b      	ldr	r3, [r7, #32]
 800f16c:	431a      	orrs	r2, r3
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	635a      	str	r2, [r3, #52]	; 0x34
 800f172:	e00c      	b.n	800f18e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f178:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	635a      	str	r2, [r3, #52]	; 0x34
 800f180:	e005      	b.n	800f18e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f186:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f192:	2b00      	cmp	r3, #0
 800f194:	d007      	beq.n	800f1a6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	4a5f      	ldr	r2, [pc, #380]	; (800f318 <HAL_SD_ConfigWideBusOperation+0x214>)
 800f19c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800f19e:	2301      	movs	r3, #1
 800f1a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f1a4:	e096      	b.n	800f2d4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800f1a6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800f1aa:	f04f 0100 	mov.w	r1, #0
 800f1ae:	f7fd fcf5 	bl	800cb9c <HAL_RCCEx_GetPeriphCLKFreq>
 800f1b2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f000 8083 	beq.w	800f2c2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	689b      	ldr	r3, [r3, #8]
 800f1c6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	691b      	ldr	r3, [r3, #16]
 800f1d0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	695a      	ldr	r2, [r3, #20]
 800f1d6:	69fb      	ldr	r3, [r7, #28]
 800f1d8:	4950      	ldr	r1, [pc, #320]	; (800f31c <HAL_SD_ConfigWideBusOperation+0x218>)
 800f1da:	fba1 1303 	umull	r1, r3, r1, r3
 800f1de:	0e1b      	lsrs	r3, r3, #24
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d303      	bcc.n	800f1ec <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	695b      	ldr	r3, [r3, #20]
 800f1e8:	61bb      	str	r3, [r7, #24]
 800f1ea:	e05a      	b.n	800f2a2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1f4:	d103      	bne.n	800f1fe <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	695b      	ldr	r3, [r3, #20]
 800f1fa:	61bb      	str	r3, [r7, #24]
 800f1fc:	e051      	b.n	800f2a2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f206:	d126      	bne.n	800f256 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	695b      	ldr	r3, [r3, #20]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d10e      	bne.n	800f22e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800f210:	69fb      	ldr	r3, [r7, #28]
 800f212:	4a43      	ldr	r2, [pc, #268]	; (800f320 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800f214:	4293      	cmp	r3, r2
 800f216:	d906      	bls.n	800f226 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800f218:	69fb      	ldr	r3, [r7, #28]
 800f21a:	4a40      	ldr	r2, [pc, #256]	; (800f31c <HAL_SD_ConfigWideBusOperation+0x218>)
 800f21c:	fba2 2303 	umull	r2, r3, r2, r3
 800f220:	0e5b      	lsrs	r3, r3, #25
 800f222:	61bb      	str	r3, [r7, #24]
 800f224:	e03d      	b.n	800f2a2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	695b      	ldr	r3, [r3, #20]
 800f22a:	61bb      	str	r3, [r7, #24]
 800f22c:	e039      	b.n	800f2a2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	695b      	ldr	r3, [r3, #20]
 800f232:	005b      	lsls	r3, r3, #1
 800f234:	69fa      	ldr	r2, [r7, #28]
 800f236:	fbb2 f3f3 	udiv	r3, r2, r3
 800f23a:	4a39      	ldr	r2, [pc, #228]	; (800f320 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d906      	bls.n	800f24e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	4a36      	ldr	r2, [pc, #216]	; (800f31c <HAL_SD_ConfigWideBusOperation+0x218>)
 800f244:	fba2 2303 	umull	r2, r3, r2, r3
 800f248:	0e5b      	lsrs	r3, r3, #25
 800f24a:	61bb      	str	r3, [r7, #24]
 800f24c:	e029      	b.n	800f2a2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	695b      	ldr	r3, [r3, #20]
 800f252:	61bb      	str	r3, [r7, #24]
 800f254:	e025      	b.n	800f2a2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	695b      	ldr	r3, [r3, #20]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d10e      	bne.n	800f27c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	4a30      	ldr	r2, [pc, #192]	; (800f324 <HAL_SD_ConfigWideBusOperation+0x220>)
 800f262:	4293      	cmp	r3, r2
 800f264:	d906      	bls.n	800f274 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	4a2c      	ldr	r2, [pc, #176]	; (800f31c <HAL_SD_ConfigWideBusOperation+0x218>)
 800f26a:	fba2 2303 	umull	r2, r3, r2, r3
 800f26e:	0e1b      	lsrs	r3, r3, #24
 800f270:	61bb      	str	r3, [r7, #24]
 800f272:	e016      	b.n	800f2a2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	695b      	ldr	r3, [r3, #20]
 800f278:	61bb      	str	r3, [r7, #24]
 800f27a:	e012      	b.n	800f2a2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	695b      	ldr	r3, [r3, #20]
 800f280:	005b      	lsls	r3, r3, #1
 800f282:	69fa      	ldr	r2, [r7, #28]
 800f284:	fbb2 f3f3 	udiv	r3, r2, r3
 800f288:	4a26      	ldr	r2, [pc, #152]	; (800f324 <HAL_SD_ConfigWideBusOperation+0x220>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d906      	bls.n	800f29c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	4a22      	ldr	r2, [pc, #136]	; (800f31c <HAL_SD_ConfigWideBusOperation+0x218>)
 800f292:	fba2 2303 	umull	r2, r3, r2, r3
 800f296:	0e1b      	lsrs	r3, r3, #24
 800f298:	61bb      	str	r3, [r7, #24]
 800f29a:	e002      	b.n	800f2a2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	695b      	ldr	r3, [r3, #20]
 800f2a0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681c      	ldr	r4, [r3, #0]
 800f2a6:	466a      	mov	r2, sp
 800f2a8:	f107 0314 	add.w	r3, r7, #20
 800f2ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f2b0:	e882 0003 	stmia.w	r2, {r0, r1}
 800f2b4:	f107 0308 	add.w	r3, r7, #8
 800f2b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	f003 ffe0 	bl	8013280 <SDMMC_Init>
 800f2c0:	e008      	b.n	800f2d4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f004 f8ad 	bl	801343c <SDMMC_CmdBlockLength>
 800f2e2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f2e4:	6a3b      	ldr	r3, [r7, #32]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d00c      	beq.n	800f304 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	4a0a      	ldr	r2, [pc, #40]	; (800f318 <HAL_SD_ConfigWideBusOperation+0x214>)
 800f2f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2f6:	6a3b      	ldr	r3, [r7, #32]
 800f2f8:	431a      	orrs	r2, r3
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800f2fe:	2301      	movs	r3, #1
 800f300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2201      	movs	r2, #1
 800f308:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800f30c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f310:	4618      	mov	r0, r3
 800f312:	372c      	adds	r7, #44	; 0x2c
 800f314:	46bd      	mov	sp, r7
 800f316:	bd90      	pop	{r4, r7, pc}
 800f318:	1fe00fff 	.word	0x1fe00fff
 800f31c:	55e63b89 	.word	0x55e63b89
 800f320:	02faf080 	.word	0x02faf080
 800f324:	017d7840 	.word	0x017d7840

0800f328 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b086      	sub	sp, #24
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800f330:	2300      	movs	r3, #0
 800f332:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800f334:	f107 030c 	add.w	r3, r7, #12
 800f338:	4619      	mov	r1, r3
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f000 fa40 	bl	800f7c0 <SD_SendStatus>
 800f340:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d005      	beq.n	800f354 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	431a      	orrs	r2, r3
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	0a5b      	lsrs	r3, r3, #9
 800f358:	f003 030f 	and.w	r3, r3, #15
 800f35c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800f35e:	693b      	ldr	r3, [r7, #16]
}
 800f360:	4618      	mov	r0, r3
 800f362:	3718      	adds	r7, #24
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b090      	sub	sp, #64	; 0x40
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800f370:	2300      	movs	r3, #0
 800f372:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800f374:	f7f4 ff3a 	bl	80041ec <HAL_GetTick>
 800f378:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4618      	mov	r0, r3
 800f380:	f003 ffd7 	bl	8013332 <SDMMC_GetPowerState>
 800f384:	4603      	mov	r3, r0
 800f386:	2b00      	cmp	r3, #0
 800f388:	d102      	bne.n	800f390 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f38a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f38e:	e0b5      	b.n	800f4fc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f394:	2b03      	cmp	r3, #3
 800f396:	d02e      	beq.n	800f3f6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4618      	mov	r0, r3
 800f39e:	f004 fa22 	bl	80137e6 <SDMMC_CmdSendCID>
 800f3a2:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d001      	beq.n	800f3ae <SD_InitCard+0x46>
    {
      return errorstate;
 800f3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ac:	e0a6      	b.n	800f4fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2100      	movs	r1, #0
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f004 f802 	bl	80133be <SDMMC_GetResponse>
 800f3ba:	4602      	mov	r2, r0
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	2104      	movs	r1, #4
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f003 fff9 	bl	80133be <SDMMC_GetResponse>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	2108      	movs	r1, #8
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f003 fff0 	bl	80133be <SDMMC_GetResponse>
 800f3de:	4602      	mov	r2, r0
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	210c      	movs	r1, #12
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f003 ffe7 	bl	80133be <SDMMC_GetResponse>
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3fa:	2b03      	cmp	r3, #3
 800f3fc:	d01d      	beq.n	800f43a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800f3fe:	e019      	b.n	800f434 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	f107 020a 	add.w	r2, r7, #10
 800f408:	4611      	mov	r1, r2
 800f40a:	4618      	mov	r0, r3
 800f40c:	f004 fa2a 	bl	8013864 <SDMMC_CmdSetRelAdd>
 800f410:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800f412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f414:	2b00      	cmp	r3, #0
 800f416:	d001      	beq.n	800f41c <SD_InitCard+0xb4>
      {
        return errorstate;
 800f418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f41a:	e06f      	b.n	800f4fc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800f41c:	f7f4 fee6 	bl	80041ec <HAL_GetTick>
 800f420:	4602      	mov	r2, r0
 800f422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f424:	1ad3      	subs	r3, r2, r3
 800f426:	f241 3287 	movw	r2, #4999	; 0x1387
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d902      	bls.n	800f434 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800f42e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f432:	e063      	b.n	800f4fc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800f434:	897b      	ldrh	r3, [r7, #10]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d0e2      	beq.n	800f400 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f43e:	2b03      	cmp	r3, #3
 800f440:	d036      	beq.n	800f4b0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f442:	897b      	ldrh	r3, [r7, #10]
 800f444:	461a      	mov	r2, r3
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f452:	041b      	lsls	r3, r3, #16
 800f454:	4619      	mov	r1, r3
 800f456:	4610      	mov	r0, r2
 800f458:	f004 f9e4 	bl	8013824 <SDMMC_CmdSendCSD>
 800f45c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f460:	2b00      	cmp	r3, #0
 800f462:	d001      	beq.n	800f468 <SD_InitCard+0x100>
    {
      return errorstate;
 800f464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f466:	e049      	b.n	800f4fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	2100      	movs	r1, #0
 800f46e:	4618      	mov	r0, r3
 800f470:	f003 ffa5 	bl	80133be <SDMMC_GetResponse>
 800f474:	4602      	mov	r2, r0
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	2104      	movs	r1, #4
 800f480:	4618      	mov	r0, r3
 800f482:	f003 ff9c 	bl	80133be <SDMMC_GetResponse>
 800f486:	4602      	mov	r2, r0
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2108      	movs	r1, #8
 800f492:	4618      	mov	r0, r3
 800f494:	f003 ff93 	bl	80133be <SDMMC_GetResponse>
 800f498:	4602      	mov	r2, r0
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	210c      	movs	r1, #12
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f003 ff8a 	bl	80133be <SDMMC_GetResponse>
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2104      	movs	r1, #4
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f003 ff81 	bl	80133be <SDMMC_GetResponse>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	0d1a      	lsrs	r2, r3, #20
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f4c4:	f107 030c 	add.w	r3, r7, #12
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f7ff fb8c 	bl	800ebe8 <HAL_SD_GetCardCSD>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d002      	beq.n	800f4dc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f4d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f4da:	e00f      	b.n	800f4fc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4e4:	041b      	lsls	r3, r3, #16
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	4610      	mov	r0, r2
 800f4ea:	f004 f893 	bl	8013614 <SDMMC_CmdSelDesel>
 800f4ee:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800f4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d001      	beq.n	800f4fa <SD_InitCard+0x192>
  {
    return errorstate;
 800f4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f8:	e000      	b.n	800f4fc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f4fa:	2300      	movs	r3, #0
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3740      	adds	r7, #64	; 0x40
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b086      	sub	sp, #24
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f50c:	2300      	movs	r3, #0
 800f50e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800f510:	2300      	movs	r3, #0
 800f512:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800f514:	2300      	movs	r3, #0
 800f516:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	4618      	mov	r0, r3
 800f51e:	f004 f89c 	bl	801365a <SDMMC_CmdGoIdleState>
 800f522:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d001      	beq.n	800f52e <SD_PowerON+0x2a>
  {
    return errorstate;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	e072      	b.n	800f614 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	4618      	mov	r0, r3
 800f534:	f004 f8af 	bl	8013696 <SDMMC_CmdOperCond>
 800f538:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f540:	d10d      	bne.n	800f55e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2200      	movs	r2, #0
 800f546:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	4618      	mov	r0, r3
 800f54e:	f004 f884 	bl	801365a <SDMMC_CmdGoIdleState>
 800f552:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d004      	beq.n	800f564 <SD_PowerON+0x60>
    {
      return errorstate;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	e05a      	b.n	800f614 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2201      	movs	r2, #1
 800f562:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d137      	bne.n	800f5dc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	2100      	movs	r1, #0
 800f572:	4618      	mov	r0, r3
 800f574:	f004 f8af 	bl	80136d6 <SDMMC_CmdAppCommand>
 800f578:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d02d      	beq.n	800f5dc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f580:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f584:	e046      	b.n	800f614 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	2100      	movs	r1, #0
 800f58c:	4618      	mov	r0, r3
 800f58e:	f004 f8a2 	bl	80136d6 <SDMMC_CmdAppCommand>
 800f592:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d001      	beq.n	800f59e <SD_PowerON+0x9a>
    {
      return errorstate;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	e03a      	b.n	800f614 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	491e      	ldr	r1, [pc, #120]	; (800f61c <SD_PowerON+0x118>)
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f004 f8b9 	bl	801371c <SDMMC_CmdAppOperCommand>
 800f5aa:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d002      	beq.n	800f5b8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f5b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f5b6:	e02d      	b.n	800f614 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2100      	movs	r1, #0
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f003 fefd 	bl	80133be <SDMMC_GetResponse>
 800f5c4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	0fdb      	lsrs	r3, r3, #31
 800f5ca:	2b01      	cmp	r3, #1
 800f5cc:	d101      	bne.n	800f5d2 <SD_PowerON+0xce>
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	e000      	b.n	800f5d4 <SD_PowerON+0xd0>
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	613b      	str	r3, [r7, #16]

    count++;
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	3301      	adds	r3, #1
 800f5da:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d802      	bhi.n	800f5ec <SD_PowerON+0xe8>
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d0cc      	beq.n	800f586 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d902      	bls.n	800f5fc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f5f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f5fa:	e00b      	b.n	800f614 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2200      	movs	r2, #0
 800f600:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d002      	beq.n	800f612 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2201      	movs	r2, #1
 800f610:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f612:	2300      	movs	r3, #0
}
 800f614:	4618      	mov	r0, r3
 800f616:	3718      	adds	r7, #24
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	c1100000 	.word	0xc1100000

0800f620 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b08c      	sub	sp, #48	; 0x30
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f62a:	f7f4 fddf 	bl	80041ec <HAL_GetTick>
 800f62e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	2100      	movs	r1, #0
 800f63a:	4618      	mov	r0, r3
 800f63c:	f003 febf 	bl	80133be <SDMMC_GetResponse>
 800f640:	4603      	mov	r3, r0
 800f642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f646:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f64a:	d102      	bne.n	800f652 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f64c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f650:	e0b0      	b.n	800f7b4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	2140      	movs	r1, #64	; 0x40
 800f658:	4618      	mov	r0, r3
 800f65a:	f003 feef 	bl	801343c <SDMMC_CmdBlockLength>
 800f65e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f660:	6a3b      	ldr	r3, [r7, #32]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d005      	beq.n	800f672 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f66e:	6a3b      	ldr	r3, [r7, #32]
 800f670:	e0a0      	b.n	800f7b4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f67a:	041b      	lsls	r3, r3, #16
 800f67c:	4619      	mov	r1, r3
 800f67e:	4610      	mov	r0, r2
 800f680:	f004 f829 	bl	80136d6 <SDMMC_CmdAppCommand>
 800f684:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f686:	6a3b      	ldr	r3, [r7, #32]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d005      	beq.n	800f698 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f694:	6a3b      	ldr	r3, [r7, #32]
 800f696:	e08d      	b.n	800f7b4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f698:	f04f 33ff 	mov.w	r3, #4294967295
 800f69c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f69e:	2340      	movs	r3, #64	; 0x40
 800f6a0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f6a2:	2360      	movs	r3, #96	; 0x60
 800f6a4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f6a6:	2302      	movs	r3, #2
 800f6a8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f107 0208 	add.w	r2, r7, #8
 800f6ba:	4611      	mov	r1, r2
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f003 fe91 	bl	80133e4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f004 f911 	bl	80138ee <SDMMC_CmdStatusRegister>
 800f6cc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f6ce:	6a3b      	ldr	r3, [r7, #32]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d02b      	beq.n	800f72c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f6dc:	6a3b      	ldr	r3, [r7, #32]
 800f6de:	e069      	b.n	800f7b4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d013      	beq.n	800f716 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6f2:	e00d      	b.n	800f710 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f003 fdeb 	bl	80132d4 <SDMMC_ReadFIFO>
 800f6fe:	4602      	mov	r2, r0
 800f700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f702:	601a      	str	r2, [r3, #0]
        pData++;
 800f704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f706:	3304      	adds	r3, #4
 800f708:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800f70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f70c:	3301      	adds	r3, #1
 800f70e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f712:	2b07      	cmp	r3, #7
 800f714:	d9ee      	bls.n	800f6f4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f716:	f7f4 fd69 	bl	80041ec <HAL_GetTick>
 800f71a:	4602      	mov	r2, r0
 800f71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71e:	1ad3      	subs	r3, r2, r3
 800f720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f724:	d102      	bne.n	800f72c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f726:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f72a:	e043      	b.n	800f7b4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f732:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800f736:	2b00      	cmp	r3, #0
 800f738:	d0d2      	beq.n	800f6e0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f740:	f003 0308 	and.w	r3, r3, #8
 800f744:	2b00      	cmp	r3, #0
 800f746:	d001      	beq.n	800f74c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f748:	2308      	movs	r3, #8
 800f74a:	e033      	b.n	800f7b4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f752:	f003 0302 	and.w	r3, r3, #2
 800f756:	2b00      	cmp	r3, #0
 800f758:	d001      	beq.n	800f75e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f75a:	2302      	movs	r3, #2
 800f75c:	e02a      	b.n	800f7b4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f764:	f003 0320 	and.w	r3, r3, #32
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d017      	beq.n	800f79c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f76c:	2320      	movs	r3, #32
 800f76e:	e021      	b.n	800f7b4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4618      	mov	r0, r3
 800f776:	f003 fdad 	bl	80132d4 <SDMMC_ReadFIFO>
 800f77a:	4602      	mov	r2, r0
 800f77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f77e:	601a      	str	r2, [r3, #0]
    pData++;
 800f780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f782:	3304      	adds	r3, #4
 800f784:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f786:	f7f4 fd31 	bl	80041ec <HAL_GetTick>
 800f78a:	4602      	mov	r2, r0
 800f78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78e:	1ad3      	subs	r3, r2, r3
 800f790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f794:	d102      	bne.n	800f79c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f796:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f79a:	e00b      	b.n	800f7b4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d1e2      	bne.n	800f770 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	4a03      	ldr	r2, [pc, #12]	; (800f7bc <SD_SendSDStatus+0x19c>)
 800f7b0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800f7b2:	2300      	movs	r3, #0
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3730      	adds	r7, #48	; 0x30
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	18000f3a 	.word	0x18000f3a

0800f7c0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d102      	bne.n	800f7d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f7d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f7d4:	e018      	b.n	800f808 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7de:	041b      	lsls	r3, r3, #16
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	4610      	mov	r0, r2
 800f7e4:	f004 f860 	bl	80138a8 <SDMMC_CmdSendStatus>
 800f7e8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d001      	beq.n	800f7f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	e009      	b.n	800f808 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	2100      	movs	r1, #0
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f003 fddf 	bl	80133be <SDMMC_GetResponse>
 800f800:	4602      	mov	r2, r0
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f806:	2300      	movs	r3, #0
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3710      	adds	r7, #16
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b086      	sub	sp, #24
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f818:	2300      	movs	r3, #0
 800f81a:	60fb      	str	r3, [r7, #12]
 800f81c:	2300      	movs	r3, #0
 800f81e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	2100      	movs	r1, #0
 800f826:	4618      	mov	r0, r3
 800f828:	f003 fdc9 	bl	80133be <SDMMC_GetResponse>
 800f82c:	4603      	mov	r3, r0
 800f82e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f832:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f836:	d102      	bne.n	800f83e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f838:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f83c:	e02f      	b.n	800f89e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f83e:	f107 030c 	add.w	r3, r7, #12
 800f842:	4619      	mov	r1, r3
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f000 f879 	bl	800f93c <SD_FindSCR>
 800f84a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d001      	beq.n	800f856 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	e023      	b.n	800f89e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d01c      	beq.n	800f89a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f868:	041b      	lsls	r3, r3, #16
 800f86a:	4619      	mov	r1, r3
 800f86c:	4610      	mov	r0, r2
 800f86e:	f003 ff32 	bl	80136d6 <SDMMC_CmdAppCommand>
 800f872:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d001      	beq.n	800f87e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	e00f      	b.n	800f89e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	2102      	movs	r1, #2
 800f884:	4618      	mov	r0, r3
 800f886:	f003 ff69 	bl	801375c <SDMMC_CmdBusWidth>
 800f88a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d001      	beq.n	800f896 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	e003      	b.n	800f89e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f896:	2300      	movs	r3, #0
 800f898:	e001      	b.n	800f89e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f89a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3718      	adds	r7, #24
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}

0800f8a6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f8a6:	b580      	push	{r7, lr}
 800f8a8:	b086      	sub	sp, #24
 800f8aa:	af00      	add	r7, sp, #0
 800f8ac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	60fb      	str	r3, [r7, #12]
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	2100      	movs	r1, #0
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f003 fd7e 	bl	80133be <SDMMC_GetResponse>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f8c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f8cc:	d102      	bne.n	800f8d4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f8ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f8d2:	e02f      	b.n	800f934 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f8d4:	f107 030c 	add.w	r3, r7, #12
 800f8d8:	4619      	mov	r1, r3
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f000 f82e 	bl	800f93c <SD_FindSCR>
 800f8e0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d001      	beq.n	800f8ec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	e023      	b.n	800f934 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d01c      	beq.n	800f930 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8fe:	041b      	lsls	r3, r3, #16
 800f900:	4619      	mov	r1, r3
 800f902:	4610      	mov	r0, r2
 800f904:	f003 fee7 	bl	80136d6 <SDMMC_CmdAppCommand>
 800f908:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d001      	beq.n	800f914 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	e00f      	b.n	800f934 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	2100      	movs	r1, #0
 800f91a:	4618      	mov	r0, r3
 800f91c:	f003 ff1e 	bl	801375c <SDMMC_CmdBusWidth>
 800f920:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d001      	beq.n	800f92c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	e003      	b.n	800f934 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f92c:	2300      	movs	r3, #0
 800f92e:	e001      	b.n	800f934 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f930:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f934:	4618      	mov	r0, r3
 800f936:	3718      	adds	r7, #24
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b08e      	sub	sp, #56	; 0x38
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f946:	f7f4 fc51 	bl	80041ec <HAL_GetTick>
 800f94a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f94c:	2300      	movs	r3, #0
 800f94e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f950:	2300      	movs	r3, #0
 800f952:	60bb      	str	r3, [r7, #8]
 800f954:	2300      	movs	r3, #0
 800f956:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2108      	movs	r1, #8
 800f962:	4618      	mov	r0, r3
 800f964:	f003 fd6a 	bl	801343c <SDMMC_CmdBlockLength>
 800f968:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d001      	beq.n	800f974 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f972:	e0ad      	b.n	800fad0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f97c:	041b      	lsls	r3, r3, #16
 800f97e:	4619      	mov	r1, r3
 800f980:	4610      	mov	r0, r2
 800f982:	f003 fea8 	bl	80136d6 <SDMMC_CmdAppCommand>
 800f986:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d001      	beq.n	800f992 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f990:	e09e      	b.n	800fad0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f992:	f04f 33ff 	mov.w	r3, #4294967295
 800f996:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f998:	2308      	movs	r3, #8
 800f99a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f99c:	2330      	movs	r3, #48	; 0x30
 800f99e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f9a0:	2302      	movs	r3, #2
 800f9a2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f107 0210 	add.w	r2, r7, #16
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f003 fd14 	bl	80133e4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f003 feee 	bl	80137a2 <SDMMC_CmdSendSCR>
 800f9c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d027      	beq.n	800fa1e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d0:	e07e      	b.n	800fad0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d113      	bne.n	800fa08 <SD_FindSCR+0xcc>
 800f9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d110      	bne.n	800fa08 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f003 fc72 	bl	80132d4 <SDMMC_ReadFIFO>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f003 fc6b 	bl	80132d4 <SDMMC_ReadFIFO>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	60fb      	str	r3, [r7, #12]
      index++;
 800fa02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa04:	3301      	adds	r3, #1
 800fa06:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fa08:	f7f4 fbf0 	bl	80041ec <HAL_GetTick>
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa10:	1ad3      	subs	r3, r2, r3
 800fa12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa16:	d102      	bne.n	800fa1e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800fa18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fa1c:	e058      	b.n	800fad0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa24:	f240 532a 	movw	r3, #1322	; 0x52a
 800fa28:	4013      	ands	r3, r2
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d0d1      	beq.n	800f9d2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa34:	f003 0308 	and.w	r3, r3, #8
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d005      	beq.n	800fa48 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	2208      	movs	r2, #8
 800fa42:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800fa44:	2308      	movs	r3, #8
 800fa46:	e043      	b.n	800fad0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa4e:	f003 0302 	and.w	r3, r3, #2
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d005      	beq.n	800fa62 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2202      	movs	r2, #2
 800fa5c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800fa5e:	2302      	movs	r3, #2
 800fa60:	e036      	b.n	800fad0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa68:	f003 0320 	and.w	r3, r3, #32
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d005      	beq.n	800fa7c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	2220      	movs	r2, #32
 800fa76:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800fa78:	2320      	movs	r3, #32
 800fa7a:	e029      	b.n	800fad0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a15      	ldr	r2, [pc, #84]	; (800fad8 <SD_FindSCR+0x19c>)
 800fa82:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	061a      	lsls	r2, r3, #24
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	021b      	lsls	r3, r3, #8
 800fa8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fa90:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	0a1b      	lsrs	r3, r3, #8
 800fa96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800fa9a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	0e1b      	lsrs	r3, r3, #24
 800faa0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800faa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa4:	601a      	str	r2, [r3, #0]
    scr++;
 800faa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa8:	3304      	adds	r3, #4
 800faaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	061a      	lsls	r2, r3, #24
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	021b      	lsls	r3, r3, #8
 800fab4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fab8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	0a1b      	lsrs	r3, r3, #8
 800fabe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800fac2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	0e1b      	lsrs	r3, r3, #24
 800fac8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800faca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800facc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800face:	2300      	movs	r3, #0
}
 800fad0:	4618      	mov	r0, r3
 800fad2:	3738      	adds	r7, #56	; 0x38
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}
 800fad8:	18000f3a 	.word	0x18000f3a

0800fadc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b086      	sub	sp, #24
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faee:	2b1f      	cmp	r3, #31
 800faf0:	d936      	bls.n	800fb60 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800faf2:	2300      	movs	r3, #0
 800faf4:	617b      	str	r3, [r7, #20]
 800faf6:	e027      	b.n	800fb48 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	4618      	mov	r0, r3
 800fafe:	f003 fbe9 	bl	80132d4 <SDMMC_ReadFIFO>
 800fb02:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	b2da      	uxtb	r2, r3
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	3301      	adds	r3, #1
 800fb10:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	0a1b      	lsrs	r3, r3, #8
 800fb16:	b2da      	uxtb	r2, r3
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	3301      	adds	r3, #1
 800fb20:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	0c1b      	lsrs	r3, r3, #16
 800fb26:	b2da      	uxtb	r2, r3
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	3301      	adds	r3, #1
 800fb30:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	0e1b      	lsrs	r3, r3, #24
 800fb36:	b2da      	uxtb	r2, r3
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	3301      	adds	r3, #1
 800fb40:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	3301      	adds	r3, #1
 800fb46:	617b      	str	r3, [r7, #20]
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	2b07      	cmp	r3, #7
 800fb4c:	d9d4      	bls.n	800faf8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	693a      	ldr	r2, [r7, #16]
 800fb52:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb58:	f1a3 0220 	sub.w	r2, r3, #32
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800fb60:	bf00      	nop
 800fb62:	3718      	adds	r7, #24
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b086      	sub	sp, #24
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	69db      	ldr	r3, [r3, #28]
 800fb74:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6a1b      	ldr	r3, [r3, #32]
 800fb7a:	2b1f      	cmp	r3, #31
 800fb7c:	d93a      	bls.n	800fbf4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800fb7e:	2300      	movs	r3, #0
 800fb80:	617b      	str	r3, [r7, #20]
 800fb82:	e02b      	b.n	800fbdc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	021a      	lsls	r2, r3, #8
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	041a      	lsls	r2, r3, #16
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	4313      	orrs	r3, r2
 800fbac:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	3301      	adds	r3, #1
 800fbb2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	061a      	lsls	r2, r3, #24
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f107 020c 	add.w	r2, r7, #12
 800fbce:	4611      	mov	r1, r2
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f003 fb8c 	bl	80132ee <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	617b      	str	r3, [r7, #20]
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	2b07      	cmp	r3, #7
 800fbe0:	d9d0      	bls.n	800fb84 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	693a      	ldr	r2, [r7, #16]
 800fbe6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6a1b      	ldr	r3, [r3, #32]
 800fbec:	f1a3 0220 	sub.w	r2, r3, #32
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	621a      	str	r2, [r3, #32]
  }
}
 800fbf4:	bf00      	nop
 800fbf6:	3718      	adds	r7, #24
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800fc04:	bf00      	nop
 800fc06:	370c      	adds	r7, #12
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0e:	4770      	bx	lr

0800fc10 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800fc10:	b480      	push	{r7}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800fc18:	bf00      	nop
 800fc1a:	370c      	adds	r7, #12
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr

0800fc24 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800fc2c:	bf00      	nop
 800fc2e:	370c      	adds	r7, #12
 800fc30:	46bd      	mov	sp, r7
 800fc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc36:	4770      	bx	lr

0800fc38 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b083      	sub	sp, #12
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800fc40:	bf00      	nop
 800fc42:	370c      	adds	r7, #12
 800fc44:	46bd      	mov	sp, r7
 800fc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4a:	4770      	bx	lr

0800fc4c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b084      	sub	sp, #16
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d101      	bne.n	800fc5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	e10f      	b.n	800fe7e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2200      	movs	r2, #0
 800fc62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	4a87      	ldr	r2, [pc, #540]	; (800fe88 <HAL_SPI_Init+0x23c>)
 800fc6a:	4293      	cmp	r3, r2
 800fc6c:	d00f      	beq.n	800fc8e <HAL_SPI_Init+0x42>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	4a86      	ldr	r2, [pc, #536]	; (800fe8c <HAL_SPI_Init+0x240>)
 800fc74:	4293      	cmp	r3, r2
 800fc76:	d00a      	beq.n	800fc8e <HAL_SPI_Init+0x42>
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	4a84      	ldr	r2, [pc, #528]	; (800fe90 <HAL_SPI_Init+0x244>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d005      	beq.n	800fc8e <HAL_SPI_Init+0x42>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	68db      	ldr	r3, [r3, #12]
 800fc86:	2b0f      	cmp	r3, #15
 800fc88:	d901      	bls.n	800fc8e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	e0f7      	b.n	800fe7e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 fd5a 	bl	8010748 <SPI_GetPacketSize>
 800fc94:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	4a7b      	ldr	r2, [pc, #492]	; (800fe88 <HAL_SPI_Init+0x23c>)
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d00c      	beq.n	800fcba <HAL_SPI_Init+0x6e>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4a79      	ldr	r2, [pc, #484]	; (800fe8c <HAL_SPI_Init+0x240>)
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d007      	beq.n	800fcba <HAL_SPI_Init+0x6e>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	4a78      	ldr	r2, [pc, #480]	; (800fe90 <HAL_SPI_Init+0x244>)
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	d002      	beq.n	800fcba <HAL_SPI_Init+0x6e>
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2b08      	cmp	r3, #8
 800fcb8:	d811      	bhi.n	800fcde <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fcbe:	4a72      	ldr	r2, [pc, #456]	; (800fe88 <HAL_SPI_Init+0x23c>)
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	d009      	beq.n	800fcd8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	4a70      	ldr	r2, [pc, #448]	; (800fe8c <HAL_SPI_Init+0x240>)
 800fcca:	4293      	cmp	r3, r2
 800fccc:	d004      	beq.n	800fcd8 <HAL_SPI_Init+0x8c>
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	4a6f      	ldr	r2, [pc, #444]	; (800fe90 <HAL_SPI_Init+0x244>)
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	d104      	bne.n	800fce2 <HAL_SPI_Init+0x96>
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2b10      	cmp	r3, #16
 800fcdc:	d901      	bls.n	800fce2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800fcde:	2301      	movs	r3, #1
 800fce0:	e0cd      	b.n	800fe7e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fce8:	b2db      	uxtb	r3, r3
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d106      	bne.n	800fcfc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f7f3 fbe8 	bl	80034cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2202      	movs	r2, #2
 800fd00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	681a      	ldr	r2, [r3, #0]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f022 0201 	bic.w	r2, r2, #1
 800fd12:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	689b      	ldr	r3, [r3, #8]
 800fd1a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800fd1e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	699b      	ldr	r3, [r3, #24]
 800fd24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fd28:	d119      	bne.n	800fd5e <HAL_SPI_Init+0x112>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fd32:	d103      	bne.n	800fd3c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d008      	beq.n	800fd4e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d10c      	bne.n	800fd5e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fd48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fd4c:	d107      	bne.n	800fd5e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fd5c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d00f      	beq.n	800fd8a <HAL_SPI_Init+0x13e>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	68db      	ldr	r3, [r3, #12]
 800fd6e:	2b06      	cmp	r3, #6
 800fd70:	d90b      	bls.n	800fd8a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	430a      	orrs	r2, r1
 800fd86:	601a      	str	r2, [r3, #0]
 800fd88:	e007      	b.n	800fd9a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	681a      	ldr	r2, [r3, #0]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fd98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	69da      	ldr	r2, [r3, #28]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fda2:	431a      	orrs	r2, r3
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	431a      	orrs	r2, r3
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdac:	ea42 0103 	orr.w	r1, r2, r3
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	68da      	ldr	r2, [r3, #12]
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	430a      	orrs	r2, r1
 800fdba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc4:	431a      	orrs	r2, r3
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdca:	431a      	orrs	r2, r3
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	699b      	ldr	r3, [r3, #24]
 800fdd0:	431a      	orrs	r2, r3
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	691b      	ldr	r3, [r3, #16]
 800fdd6:	431a      	orrs	r2, r3
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	695b      	ldr	r3, [r3, #20]
 800fddc:	431a      	orrs	r2, r3
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6a1b      	ldr	r3, [r3, #32]
 800fde2:	431a      	orrs	r2, r3
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	685b      	ldr	r3, [r3, #4]
 800fde8:	431a      	orrs	r2, r3
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdee:	431a      	orrs	r2, r3
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	689b      	ldr	r3, [r3, #8]
 800fdf4:	431a      	orrs	r2, r3
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fdfa:	ea42 0103 	orr.w	r1, r2, r3
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	430a      	orrs	r2, r1
 800fe08:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d113      	bne.n	800fe3a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	689b      	ldr	r3, [r3, #8]
 800fe18:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe24:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	689b      	ldr	r3, [r3, #8]
 800fe2c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fe38:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	f022 0201 	bic.w	r2, r2, #1
 800fe48:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d00a      	beq.n	800fe6c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	430a      	orrs	r2, r1
 800fe6a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2201      	movs	r2, #1
 800fe78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800fe7c:	2300      	movs	r3, #0
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3710      	adds	r7, #16
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	40013000 	.word	0x40013000
 800fe8c:	40003800 	.word	0x40003800
 800fe90:	40003c00 	.word	0x40003c00

0800fe94 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b08a      	sub	sp, #40	; 0x28
 800fe98:	af02      	add	r7, sp, #8
 800fe9a:	60f8      	str	r0, [r7, #12]
 800fe9c:	60b9      	str	r1, [r7, #8]
 800fe9e:	603b      	str	r3, [r7, #0]
 800fea0:	4613      	mov	r3, r2
 800fea2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	3320      	adds	r3, #32
 800feaa:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800feac:	2300      	movs	r3, #0
 800feae:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800feb6:	2b01      	cmp	r3, #1
 800feb8:	d101      	bne.n	800febe <HAL_SPI_Transmit+0x2a>
 800feba:	2302      	movs	r3, #2
 800febc:	e1e1      	b.n	8010282 <HAL_SPI_Transmit+0x3ee>
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	2201      	movs	r2, #1
 800fec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fec6:	f7f4 f991 	bl	80041ec <HAL_GetTick>
 800feca:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fed2:	b2db      	uxtb	r3, r3
 800fed4:	2b01      	cmp	r3, #1
 800fed6:	d007      	beq.n	800fee8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800fed8:	2302      	movs	r3, #2
 800feda:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	2200      	movs	r2, #0
 800fee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fee4:	7efb      	ldrb	r3, [r7, #27]
 800fee6:	e1cc      	b.n	8010282 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d002      	beq.n	800fef4 <HAL_SPI_Transmit+0x60>
 800feee:	88fb      	ldrh	r3, [r7, #6]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d107      	bne.n	800ff04 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800fef4:	2301      	movs	r3, #1
 800fef6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2200      	movs	r2, #0
 800fefc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ff00:	7efb      	ldrb	r3, [r7, #27]
 800ff02:	e1be      	b.n	8010282 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2203      	movs	r2, #3
 800ff08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	68ba      	ldr	r2, [r7, #8]
 800ff18:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	88fa      	ldrh	r2, [r7, #6]
 800ff1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	88fa      	ldrh	r2, [r7, #6]
 800ff26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2200      	movs	r2, #0
 800ff34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	2200      	movs	r2, #0
 800ff44:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	689b      	ldr	r3, [r3, #8]
 800ff50:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ff54:	d108      	bne.n	800ff68 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	681a      	ldr	r2, [r3, #0]
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff64:	601a      	str	r2, [r3, #0]
 800ff66:	e009      	b.n	800ff7c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	68db      	ldr	r3, [r3, #12]
 800ff6e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ff7a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	685a      	ldr	r2, [r3, #4]
 800ff82:	4b96      	ldr	r3, [pc, #600]	; (80101dc <HAL_SPI_Transmit+0x348>)
 800ff84:	4013      	ands	r3, r2
 800ff86:	88f9      	ldrh	r1, [r7, #6]
 800ff88:	68fa      	ldr	r2, [r7, #12]
 800ff8a:	6812      	ldr	r2, [r2, #0]
 800ff8c:	430b      	orrs	r3, r1
 800ff8e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	681a      	ldr	r2, [r3, #0]
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f042 0201 	orr.w	r2, r2, #1
 800ff9e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ffa8:	d107      	bne.n	800ffba <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	681a      	ldr	r2, [r3, #0]
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ffb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	2b0f      	cmp	r3, #15
 800ffc0:	d947      	bls.n	8010052 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ffc2:	e03f      	b.n	8010044 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	695b      	ldr	r3, [r3, #20]
 800ffca:	f003 0302 	and.w	r3, r3, #2
 800ffce:	2b02      	cmp	r3, #2
 800ffd0:	d114      	bne.n	800fffc <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	6812      	ldr	r2, [r2, #0]
 800ffdc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ffe2:	1d1a      	adds	r2, r3, #4
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ffee:	b29b      	uxth	r3, r3
 800fff0:	3b01      	subs	r3, #1
 800fff2:	b29a      	uxth	r2, r3
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fffa:	e023      	b.n	8010044 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fffc:	f7f4 f8f6 	bl	80041ec <HAL_GetTick>
 8010000:	4602      	mov	r2, r0
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	683a      	ldr	r2, [r7, #0]
 8010008:	429a      	cmp	r2, r3
 801000a:	d803      	bhi.n	8010014 <HAL_SPI_Transmit+0x180>
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010012:	d102      	bne.n	801001a <HAL_SPI_Transmit+0x186>
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d114      	bne.n	8010044 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801001a:	68f8      	ldr	r0, [r7, #12]
 801001c:	f000 fac6 	bl	80105ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	2200      	movs	r2, #0
 8010024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801002e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2201      	movs	r2, #1
 801003c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010040:	2303      	movs	r3, #3
 8010042:	e11e      	b.n	8010282 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801004a:	b29b      	uxth	r3, r3
 801004c:	2b00      	cmp	r3, #0
 801004e:	d1b9      	bne.n	800ffc4 <HAL_SPI_Transmit+0x130>
 8010050:	e0f1      	b.n	8010236 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	68db      	ldr	r3, [r3, #12]
 8010056:	2b07      	cmp	r3, #7
 8010058:	f240 80e6 	bls.w	8010228 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801005c:	e05d      	b.n	801011a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	695b      	ldr	r3, [r3, #20]
 8010064:	f003 0302 	and.w	r3, r3, #2
 8010068:	2b02      	cmp	r3, #2
 801006a:	d132      	bne.n	80100d2 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010072:	b29b      	uxth	r3, r3
 8010074:	2b01      	cmp	r3, #1
 8010076:	d918      	bls.n	80100aa <HAL_SPI_Transmit+0x216>
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801007c:	2b00      	cmp	r3, #0
 801007e:	d014      	beq.n	80100aa <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	6812      	ldr	r2, [r2, #0]
 801008a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010090:	1d1a      	adds	r2, r3, #4
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801009c:	b29b      	uxth	r3, r3
 801009e:	3b02      	subs	r3, #2
 80100a0:	b29a      	uxth	r2, r3
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80100a8:	e037      	b.n	801011a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80100ae:	881a      	ldrh	r2, [r3, #0]
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80100b8:	1c9a      	adds	r2, r3, #2
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	3b01      	subs	r3, #1
 80100c8:	b29a      	uxth	r2, r3
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80100d0:	e023      	b.n	801011a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80100d2:	f7f4 f88b 	bl	80041ec <HAL_GetTick>
 80100d6:	4602      	mov	r2, r0
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	1ad3      	subs	r3, r2, r3
 80100dc:	683a      	ldr	r2, [r7, #0]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d803      	bhi.n	80100ea <HAL_SPI_Transmit+0x256>
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100e8:	d102      	bne.n	80100f0 <HAL_SPI_Transmit+0x25c>
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d114      	bne.n	801011a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80100f0:	68f8      	ldr	r0, [r7, #12]
 80100f2:	f000 fa5b 	bl	80105ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	2200      	movs	r2, #0
 80100fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010104:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	2201      	movs	r2, #1
 8010112:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010116:	2303      	movs	r3, #3
 8010118:	e0b3      	b.n	8010282 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010120:	b29b      	uxth	r3, r3
 8010122:	2b00      	cmp	r3, #0
 8010124:	d19b      	bne.n	801005e <HAL_SPI_Transmit+0x1ca>
 8010126:	e086      	b.n	8010236 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	695b      	ldr	r3, [r3, #20]
 801012e:	f003 0302 	and.w	r3, r3, #2
 8010132:	2b02      	cmp	r3, #2
 8010134:	d154      	bne.n	80101e0 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801013c:	b29b      	uxth	r3, r3
 801013e:	2b03      	cmp	r3, #3
 8010140:	d918      	bls.n	8010174 <HAL_SPI_Transmit+0x2e0>
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010146:	2b40      	cmp	r3, #64	; 0x40
 8010148:	d914      	bls.n	8010174 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	6812      	ldr	r2, [r2, #0]
 8010154:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801015a:	1d1a      	adds	r2, r3, #4
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010166:	b29b      	uxth	r3, r3
 8010168:	3b04      	subs	r3, #4
 801016a:	b29a      	uxth	r2, r3
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010172:	e059      	b.n	8010228 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801017a:	b29b      	uxth	r3, r3
 801017c:	2b01      	cmp	r3, #1
 801017e:	d917      	bls.n	80101b0 <HAL_SPI_Transmit+0x31c>
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010184:	2b00      	cmp	r3, #0
 8010186:	d013      	beq.n	80101b0 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801018c:	881a      	ldrh	r2, [r3, #0]
 801018e:	69fb      	ldr	r3, [r7, #28]
 8010190:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010196:	1c9a      	adds	r2, r3, #2
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	3b02      	subs	r3, #2
 80101a6:	b29a      	uxth	r2, r3
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80101ae:	e03b      	b.n	8010228 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	3320      	adds	r3, #32
 80101ba:	7812      	ldrb	r2, [r2, #0]
 80101bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80101c2:	1c5a      	adds	r2, r3, #1
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80101ce:	b29b      	uxth	r3, r3
 80101d0:	3b01      	subs	r3, #1
 80101d2:	b29a      	uxth	r2, r3
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80101da:	e025      	b.n	8010228 <HAL_SPI_Transmit+0x394>
 80101dc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80101e0:	f7f4 f804 	bl	80041ec <HAL_GetTick>
 80101e4:	4602      	mov	r2, r0
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	1ad3      	subs	r3, r2, r3
 80101ea:	683a      	ldr	r2, [r7, #0]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d803      	bhi.n	80101f8 <HAL_SPI_Transmit+0x364>
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101f6:	d102      	bne.n	80101fe <HAL_SPI_Transmit+0x36a>
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d114      	bne.n	8010228 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80101fe:	68f8      	ldr	r0, [r7, #12]
 8010200:	f000 f9d4 	bl	80105ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2200      	movs	r2, #0
 8010208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010212:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2201      	movs	r2, #1
 8010220:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010224:	2303      	movs	r3, #3
 8010226:	e02c      	b.n	8010282 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801022e:	b29b      	uxth	r3, r3
 8010230:	2b00      	cmp	r3, #0
 8010232:	f47f af79 	bne.w	8010128 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	9300      	str	r3, [sp, #0]
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	2200      	movs	r2, #0
 801023e:	2108      	movs	r1, #8
 8010240:	68f8      	ldr	r0, [r7, #12]
 8010242:	f000 fa53 	bl	80106ec <SPI_WaitOnFlagUntilTimeout>
 8010246:	4603      	mov	r3, r0
 8010248:	2b00      	cmp	r3, #0
 801024a:	d007      	beq.n	801025c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010252:	f043 0220 	orr.w	r2, r3, #32
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801025c:	68f8      	ldr	r0, [r7, #12]
 801025e:	f000 f9a5 	bl	80105ac <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2200      	movs	r2, #0
 8010266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2201      	movs	r2, #1
 801026e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010278:	2b00      	cmp	r3, #0
 801027a:	d001      	beq.n	8010280 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 801027c:	2301      	movs	r3, #1
 801027e:	e000      	b.n	8010282 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8010280:	7efb      	ldrb	r3, [r7, #27]
}
 8010282:	4618      	mov	r0, r3
 8010284:	3720      	adds	r7, #32
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}
 801028a:	bf00      	nop

0801028c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b088      	sub	sp, #32
 8010290:	af00      	add	r7, sp, #0
 8010292:	60f8      	str	r0, [r7, #12]
 8010294:	60b9      	str	r1, [r7, #8]
 8010296:	603b      	str	r3, [r7, #0]
 8010298:	4613      	mov	r3, r2
 801029a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801029c:	2300      	movs	r3, #0
 801029e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	3330      	adds	r3, #48	; 0x30
 80102a6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d101      	bne.n	80102b6 <HAL_SPI_Receive+0x2a>
 80102b2:	2302      	movs	r3, #2
 80102b4:	e173      	b.n	801059e <HAL_SPI_Receive+0x312>
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	2201      	movs	r2, #1
 80102ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80102be:	f7f3 ff95 	bl	80041ec <HAL_GetTick>
 80102c2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80102ca:	b2db      	uxtb	r3, r3
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	d007      	beq.n	80102e0 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 80102d0:	2302      	movs	r3, #2
 80102d2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	2200      	movs	r2, #0
 80102d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80102dc:	7ffb      	ldrb	r3, [r7, #31]
 80102de:	e15e      	b.n	801059e <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d002      	beq.n	80102ec <HAL_SPI_Receive+0x60>
 80102e6:	88fb      	ldrh	r3, [r7, #6]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d107      	bne.n	80102fc <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80102ec:	2301      	movs	r3, #1
 80102ee:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	2200      	movs	r2, #0
 80102f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80102f8:	7ffb      	ldrb	r3, [r7, #31]
 80102fa:	e150      	b.n	801059e <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2204      	movs	r2, #4
 8010300:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2200      	movs	r2, #0
 8010308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	68ba      	ldr	r2, [r7, #8]
 8010310:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	88fa      	ldrh	r2, [r7, #6]
 8010316:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	88fa      	ldrh	r2, [r7, #6]
 801031e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	2200      	movs	r2, #0
 8010326:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	2200      	movs	r2, #0
 801032c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2200      	movs	r2, #0
 8010334:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2200      	movs	r2, #0
 801033c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2200      	movs	r2, #0
 8010342:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	689b      	ldr	r3, [r3, #8]
 8010348:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 801034c:	d108      	bne.n	8010360 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	681a      	ldr	r2, [r3, #0]
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801035c:	601a      	str	r2, [r3, #0]
 801035e:	e009      	b.n	8010374 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	68db      	ldr	r3, [r3, #12]
 8010366:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8010372:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	685a      	ldr	r2, [r3, #4]
 801037a:	4b8b      	ldr	r3, [pc, #556]	; (80105a8 <HAL_SPI_Receive+0x31c>)
 801037c:	4013      	ands	r3, r2
 801037e:	88f9      	ldrh	r1, [r7, #6]
 8010380:	68fa      	ldr	r2, [r7, #12]
 8010382:	6812      	ldr	r2, [r2, #0]
 8010384:	430b      	orrs	r3, r1
 8010386:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f042 0201 	orr.w	r2, r2, #1
 8010396:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80103a0:	d107      	bne.n	80103b2 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	681a      	ldr	r2, [r3, #0]
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80103b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	68db      	ldr	r3, [r3, #12]
 80103b6:	2b0f      	cmp	r3, #15
 80103b8:	d948      	bls.n	801044c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80103ba:	e040      	b.n	801043e <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	695a      	ldr	r2, [r3, #20]
 80103c2:	f248 0308 	movw	r3, #32776	; 0x8008
 80103c6:	4013      	ands	r3, r2
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d014      	beq.n	80103f6 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80103d6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103dc:	1d1a      	adds	r2, r3, #4
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80103e8:	b29b      	uxth	r3, r3
 80103ea:	3b01      	subs	r3, #1
 80103ec:	b29a      	uxth	r2, r3
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80103f4:	e023      	b.n	801043e <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80103f6:	f7f3 fef9 	bl	80041ec <HAL_GetTick>
 80103fa:	4602      	mov	r2, r0
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	1ad3      	subs	r3, r2, r3
 8010400:	683a      	ldr	r2, [r7, #0]
 8010402:	429a      	cmp	r2, r3
 8010404:	d803      	bhi.n	801040e <HAL_SPI_Receive+0x182>
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	f1b3 3fff 	cmp.w	r3, #4294967295
 801040c:	d102      	bne.n	8010414 <HAL_SPI_Receive+0x188>
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d114      	bne.n	801043e <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010414:	68f8      	ldr	r0, [r7, #12]
 8010416:	f000 f8c9 	bl	80105ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	2200      	movs	r2, #0
 801041e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010428:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	2201      	movs	r2, #1
 8010436:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 801043a:	2303      	movs	r3, #3
 801043c:	e0af      	b.n	801059e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010444:	b29b      	uxth	r3, r3
 8010446:	2b00      	cmp	r3, #0
 8010448:	d1b8      	bne.n	80103bc <HAL_SPI_Receive+0x130>
 801044a:	e095      	b.n	8010578 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	68db      	ldr	r3, [r3, #12]
 8010450:	2b07      	cmp	r3, #7
 8010452:	f240 808b 	bls.w	801056c <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010456:	e03f      	b.n	80104d8 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	695b      	ldr	r3, [r3, #20]
 801045e:	f003 0301 	and.w	r3, r3, #1
 8010462:	2b01      	cmp	r3, #1
 8010464:	d114      	bne.n	8010490 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801046a:	69ba      	ldr	r2, [r7, #24]
 801046c:	8812      	ldrh	r2, [r2, #0]
 801046e:	b292      	uxth	r2, r2
 8010470:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010476:	1c9a      	adds	r2, r3, #2
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010482:	b29b      	uxth	r3, r3
 8010484:	3b01      	subs	r3, #1
 8010486:	b29a      	uxth	r2, r3
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801048e:	e023      	b.n	80104d8 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010490:	f7f3 feac 	bl	80041ec <HAL_GetTick>
 8010494:	4602      	mov	r2, r0
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	1ad3      	subs	r3, r2, r3
 801049a:	683a      	ldr	r2, [r7, #0]
 801049c:	429a      	cmp	r2, r3
 801049e:	d803      	bhi.n	80104a8 <HAL_SPI_Receive+0x21c>
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104a6:	d102      	bne.n	80104ae <HAL_SPI_Receive+0x222>
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d114      	bne.n	80104d8 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80104ae:	68f8      	ldr	r0, [r7, #12]
 80104b0:	f000 f87c 	bl	80105ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	2200      	movs	r2, #0
 80104b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80104c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	2201      	movs	r2, #1
 80104d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80104d4:	2303      	movs	r3, #3
 80104d6:	e062      	b.n	801059e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80104de:	b29b      	uxth	r3, r3
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d1b9      	bne.n	8010458 <HAL_SPI_Receive+0x1cc>
 80104e4:	e048      	b.n	8010578 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	695b      	ldr	r3, [r3, #20]
 80104ec:	f003 0301 	and.w	r3, r3, #1
 80104f0:	2b01      	cmp	r3, #1
 80104f2:	d117      	bne.n	8010524 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010500:	7812      	ldrb	r2, [r2, #0]
 8010502:	b2d2      	uxtb	r2, r2
 8010504:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801050a:	1c5a      	adds	r2, r3, #1
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010516:	b29b      	uxth	r3, r3
 8010518:	3b01      	subs	r3, #1
 801051a:	b29a      	uxth	r2, r3
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010522:	e023      	b.n	801056c <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010524:	f7f3 fe62 	bl	80041ec <HAL_GetTick>
 8010528:	4602      	mov	r2, r0
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	1ad3      	subs	r3, r2, r3
 801052e:	683a      	ldr	r2, [r7, #0]
 8010530:	429a      	cmp	r2, r3
 8010532:	d803      	bhi.n	801053c <HAL_SPI_Receive+0x2b0>
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801053a:	d102      	bne.n	8010542 <HAL_SPI_Receive+0x2b6>
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d114      	bne.n	801056c <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010542:	68f8      	ldr	r0, [r7, #12]
 8010544:	f000 f832 	bl	80105ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2200      	movs	r2, #0
 801054c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010556:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2201      	movs	r2, #1
 8010564:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010568:	2303      	movs	r3, #3
 801056a:	e018      	b.n	801059e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010572:	b29b      	uxth	r3, r3
 8010574:	2b00      	cmp	r3, #0
 8010576:	d1b6      	bne.n	80104e6 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010578:	68f8      	ldr	r0, [r7, #12]
 801057a:	f000 f817 	bl	80105ac <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	2200      	movs	r2, #0
 8010582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	2201      	movs	r2, #1
 801058a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010594:	2b00      	cmp	r3, #0
 8010596:	d001      	beq.n	801059c <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8010598:	2301      	movs	r3, #1
 801059a:	e000      	b.n	801059e <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 801059c:	7ffb      	ldrb	r3, [r7, #31]
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3720      	adds	r7, #32
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	ffff0000 	.word	0xffff0000

080105ac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b085      	sub	sp, #20
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	695b      	ldr	r3, [r3, #20]
 80105ba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	699a      	ldr	r2, [r3, #24]
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	f042 0208 	orr.w	r2, r2, #8
 80105ca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	699a      	ldr	r2, [r3, #24]
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	f042 0210 	orr.w	r2, r2, #16
 80105da:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	f022 0201 	bic.w	r2, r2, #1
 80105ea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	6919      	ldr	r1, [r3, #16]
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	4b3c      	ldr	r3, [pc, #240]	; (80106e8 <SPI_CloseTransfer+0x13c>)
 80105f8:	400b      	ands	r3, r1
 80105fa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	689a      	ldr	r2, [r3, #8]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801060a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010612:	b2db      	uxtb	r3, r3
 8010614:	2b04      	cmp	r3, #4
 8010616:	d014      	beq.n	8010642 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	f003 0320 	and.w	r3, r3, #32
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00f      	beq.n	8010642 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010628:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	699a      	ldr	r2, [r3, #24]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f042 0220 	orr.w	r2, r2, #32
 8010640:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010648:	b2db      	uxtb	r3, r3
 801064a:	2b03      	cmp	r3, #3
 801064c:	d014      	beq.n	8010678 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010654:	2b00      	cmp	r3, #0
 8010656:	d00f      	beq.n	8010678 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801065e:	f043 0204 	orr.w	r2, r3, #4
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	699a      	ldr	r2, [r3, #24]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010676:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801067e:	2b00      	cmp	r3, #0
 8010680:	d00f      	beq.n	80106a2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010688:	f043 0201 	orr.w	r2, r3, #1
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	699a      	ldr	r2, [r3, #24]
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80106a0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d00f      	beq.n	80106cc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106b2:	f043 0208 	orr.w	r2, r3, #8
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	699a      	ldr	r2, [r3, #24]
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80106ca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2200      	movs	r2, #0
 80106d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2200      	movs	r2, #0
 80106d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80106dc:	bf00      	nop
 80106de:	3714      	adds	r7, #20
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr
 80106e8:	fffffc90 	.word	0xfffffc90

080106ec <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b084      	sub	sp, #16
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	60f8      	str	r0, [r7, #12]
 80106f4:	60b9      	str	r1, [r7, #8]
 80106f6:	603b      	str	r3, [r7, #0]
 80106f8:	4613      	mov	r3, r2
 80106fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80106fc:	e010      	b.n	8010720 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80106fe:	f7f3 fd75 	bl	80041ec <HAL_GetTick>
 8010702:	4602      	mov	r2, r0
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	1ad3      	subs	r3, r2, r3
 8010708:	683a      	ldr	r2, [r7, #0]
 801070a:	429a      	cmp	r2, r3
 801070c:	d803      	bhi.n	8010716 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010714:	d102      	bne.n	801071c <SPI_WaitOnFlagUntilTimeout+0x30>
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d101      	bne.n	8010720 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 801071c:	2303      	movs	r3, #3
 801071e:	e00f      	b.n	8010740 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	695a      	ldr	r2, [r3, #20]
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	4013      	ands	r3, r2
 801072a:	68ba      	ldr	r2, [r7, #8]
 801072c:	429a      	cmp	r2, r3
 801072e:	bf0c      	ite	eq
 8010730:	2301      	moveq	r3, #1
 8010732:	2300      	movne	r3, #0
 8010734:	b2db      	uxtb	r3, r3
 8010736:	461a      	mov	r2, r3
 8010738:	79fb      	ldrb	r3, [r7, #7]
 801073a:	429a      	cmp	r2, r3
 801073c:	d0df      	beq.n	80106fe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801073e:	2300      	movs	r3, #0
}
 8010740:	4618      	mov	r0, r3
 8010742:	3710      	adds	r7, #16
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}

08010748 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010748:	b480      	push	{r7}
 801074a:	b085      	sub	sp, #20
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010754:	095b      	lsrs	r3, r3, #5
 8010756:	3301      	adds	r3, #1
 8010758:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	68db      	ldr	r3, [r3, #12]
 801075e:	3301      	adds	r3, #1
 8010760:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	3307      	adds	r3, #7
 8010766:	08db      	lsrs	r3, r3, #3
 8010768:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	68fa      	ldr	r2, [r7, #12]
 801076e:	fb02 f303 	mul.w	r3, r2, r3
}
 8010772:	4618      	mov	r0, r3
 8010774:	3714      	adds	r7, #20
 8010776:	46bd      	mov	sp, r7
 8010778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077c:	4770      	bx	lr

0801077e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801077e:	b580      	push	{r7, lr}
 8010780:	b082      	sub	sp, #8
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d101      	bne.n	8010790 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801078c:	2301      	movs	r3, #1
 801078e:	e049      	b.n	8010824 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010796:	b2db      	uxtb	r3, r3
 8010798:	2b00      	cmp	r3, #0
 801079a:	d106      	bne.n	80107aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2200      	movs	r2, #0
 80107a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	f7f3 f8e3 	bl	8003970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2202      	movs	r2, #2
 80107ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681a      	ldr	r2, [r3, #0]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	3304      	adds	r3, #4
 80107ba:	4619      	mov	r1, r3
 80107bc:	4610      	mov	r0, r2
 80107be:	f000 ff29 	bl	8011614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2201      	movs	r2, #1
 80107c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2201      	movs	r2, #1
 80107ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2201      	movs	r2, #1
 80107d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2201      	movs	r2, #1
 80107de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2201      	movs	r2, #1
 80107e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2201      	movs	r2, #1
 80107ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2201      	movs	r2, #1
 80107f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2201      	movs	r2, #1
 80107fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2201      	movs	r2, #1
 8010806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2201      	movs	r2, #1
 801080e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2201      	movs	r2, #1
 8010816:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2201      	movs	r2, #1
 801081e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010822:	2300      	movs	r3, #0
}
 8010824:	4618      	mov	r0, r3
 8010826:	3708      	adds	r7, #8
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}

0801082c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b082      	sub	sp, #8
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d101      	bne.n	801083e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801083a:	2301      	movs	r3, #1
 801083c:	e049      	b.n	80108d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010844:	b2db      	uxtb	r3, r3
 8010846:	2b00      	cmp	r3, #0
 8010848:	d106      	bne.n	8010858 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2200      	movs	r2, #0
 801084e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f7f2 fef6 	bl	8003644 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2202      	movs	r2, #2
 801085c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681a      	ldr	r2, [r3, #0]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	3304      	adds	r3, #4
 8010868:	4619      	mov	r1, r3
 801086a:	4610      	mov	r0, r2
 801086c:	f000 fed2 	bl	8011614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2201      	movs	r2, #1
 8010874:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2201      	movs	r2, #1
 801087c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2201      	movs	r2, #1
 8010884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2201      	movs	r2, #1
 801088c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2201      	movs	r2, #1
 8010894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2201      	movs	r2, #1
 801089c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2201      	movs	r2, #1
 80108a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2201      	movs	r2, #1
 80108ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2201      	movs	r2, #1
 80108b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2201      	movs	r2, #1
 80108bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2201      	movs	r2, #1
 80108c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2201      	movs	r2, #1
 80108cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80108d0:	2300      	movs	r3, #0
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3708      	adds	r7, #8
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
	...

080108dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b084      	sub	sp, #16
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d109      	bne.n	8010900 <HAL_TIM_PWM_Start+0x24>
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80108f2:	b2db      	uxtb	r3, r3
 80108f4:	2b01      	cmp	r3, #1
 80108f6:	bf14      	ite	ne
 80108f8:	2301      	movne	r3, #1
 80108fa:	2300      	moveq	r3, #0
 80108fc:	b2db      	uxtb	r3, r3
 80108fe:	e03c      	b.n	801097a <HAL_TIM_PWM_Start+0x9e>
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	2b04      	cmp	r3, #4
 8010904:	d109      	bne.n	801091a <HAL_TIM_PWM_Start+0x3e>
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801090c:	b2db      	uxtb	r3, r3
 801090e:	2b01      	cmp	r3, #1
 8010910:	bf14      	ite	ne
 8010912:	2301      	movne	r3, #1
 8010914:	2300      	moveq	r3, #0
 8010916:	b2db      	uxtb	r3, r3
 8010918:	e02f      	b.n	801097a <HAL_TIM_PWM_Start+0x9e>
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	2b08      	cmp	r3, #8
 801091e:	d109      	bne.n	8010934 <HAL_TIM_PWM_Start+0x58>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010926:	b2db      	uxtb	r3, r3
 8010928:	2b01      	cmp	r3, #1
 801092a:	bf14      	ite	ne
 801092c:	2301      	movne	r3, #1
 801092e:	2300      	moveq	r3, #0
 8010930:	b2db      	uxtb	r3, r3
 8010932:	e022      	b.n	801097a <HAL_TIM_PWM_Start+0x9e>
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	2b0c      	cmp	r3, #12
 8010938:	d109      	bne.n	801094e <HAL_TIM_PWM_Start+0x72>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010940:	b2db      	uxtb	r3, r3
 8010942:	2b01      	cmp	r3, #1
 8010944:	bf14      	ite	ne
 8010946:	2301      	movne	r3, #1
 8010948:	2300      	moveq	r3, #0
 801094a:	b2db      	uxtb	r3, r3
 801094c:	e015      	b.n	801097a <HAL_TIM_PWM_Start+0x9e>
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	2b10      	cmp	r3, #16
 8010952:	d109      	bne.n	8010968 <HAL_TIM_PWM_Start+0x8c>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801095a:	b2db      	uxtb	r3, r3
 801095c:	2b01      	cmp	r3, #1
 801095e:	bf14      	ite	ne
 8010960:	2301      	movne	r3, #1
 8010962:	2300      	moveq	r3, #0
 8010964:	b2db      	uxtb	r3, r3
 8010966:	e008      	b.n	801097a <HAL_TIM_PWM_Start+0x9e>
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801096e:	b2db      	uxtb	r3, r3
 8010970:	2b01      	cmp	r3, #1
 8010972:	bf14      	ite	ne
 8010974:	2301      	movne	r3, #1
 8010976:	2300      	moveq	r3, #0
 8010978:	b2db      	uxtb	r3, r3
 801097a:	2b00      	cmp	r3, #0
 801097c:	d001      	beq.n	8010982 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801097e:	2301      	movs	r3, #1
 8010980:	e0ab      	b.n	8010ada <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d104      	bne.n	8010992 <HAL_TIM_PWM_Start+0xb6>
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2202      	movs	r2, #2
 801098c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010990:	e023      	b.n	80109da <HAL_TIM_PWM_Start+0xfe>
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	2b04      	cmp	r3, #4
 8010996:	d104      	bne.n	80109a2 <HAL_TIM_PWM_Start+0xc6>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2202      	movs	r2, #2
 801099c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80109a0:	e01b      	b.n	80109da <HAL_TIM_PWM_Start+0xfe>
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	2b08      	cmp	r3, #8
 80109a6:	d104      	bne.n	80109b2 <HAL_TIM_PWM_Start+0xd6>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2202      	movs	r2, #2
 80109ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80109b0:	e013      	b.n	80109da <HAL_TIM_PWM_Start+0xfe>
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	2b0c      	cmp	r3, #12
 80109b6:	d104      	bne.n	80109c2 <HAL_TIM_PWM_Start+0xe6>
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2202      	movs	r2, #2
 80109bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80109c0:	e00b      	b.n	80109da <HAL_TIM_PWM_Start+0xfe>
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	2b10      	cmp	r3, #16
 80109c6:	d104      	bne.n	80109d2 <HAL_TIM_PWM_Start+0xf6>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2202      	movs	r2, #2
 80109cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80109d0:	e003      	b.n	80109da <HAL_TIM_PWM_Start+0xfe>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2202      	movs	r2, #2
 80109d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	2201      	movs	r2, #1
 80109e0:	6839      	ldr	r1, [r7, #0]
 80109e2:	4618      	mov	r0, r3
 80109e4:	f001 f992 	bl	8011d0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	4a3d      	ldr	r2, [pc, #244]	; (8010ae4 <HAL_TIM_PWM_Start+0x208>)
 80109ee:	4293      	cmp	r3, r2
 80109f0:	d013      	beq.n	8010a1a <HAL_TIM_PWM_Start+0x13e>
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	4a3c      	ldr	r2, [pc, #240]	; (8010ae8 <HAL_TIM_PWM_Start+0x20c>)
 80109f8:	4293      	cmp	r3, r2
 80109fa:	d00e      	beq.n	8010a1a <HAL_TIM_PWM_Start+0x13e>
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	4a3a      	ldr	r2, [pc, #232]	; (8010aec <HAL_TIM_PWM_Start+0x210>)
 8010a02:	4293      	cmp	r3, r2
 8010a04:	d009      	beq.n	8010a1a <HAL_TIM_PWM_Start+0x13e>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	4a39      	ldr	r2, [pc, #228]	; (8010af0 <HAL_TIM_PWM_Start+0x214>)
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	d004      	beq.n	8010a1a <HAL_TIM_PWM_Start+0x13e>
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	4a37      	ldr	r2, [pc, #220]	; (8010af4 <HAL_TIM_PWM_Start+0x218>)
 8010a16:	4293      	cmp	r3, r2
 8010a18:	d101      	bne.n	8010a1e <HAL_TIM_PWM_Start+0x142>
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	e000      	b.n	8010a20 <HAL_TIM_PWM_Start+0x144>
 8010a1e:	2300      	movs	r3, #0
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d007      	beq.n	8010a34 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010a32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	4a2a      	ldr	r2, [pc, #168]	; (8010ae4 <HAL_TIM_PWM_Start+0x208>)
 8010a3a:	4293      	cmp	r3, r2
 8010a3c:	d02c      	beq.n	8010a98 <HAL_TIM_PWM_Start+0x1bc>
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a46:	d027      	beq.n	8010a98 <HAL_TIM_PWM_Start+0x1bc>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	4a2a      	ldr	r2, [pc, #168]	; (8010af8 <HAL_TIM_PWM_Start+0x21c>)
 8010a4e:	4293      	cmp	r3, r2
 8010a50:	d022      	beq.n	8010a98 <HAL_TIM_PWM_Start+0x1bc>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	4a29      	ldr	r2, [pc, #164]	; (8010afc <HAL_TIM_PWM_Start+0x220>)
 8010a58:	4293      	cmp	r3, r2
 8010a5a:	d01d      	beq.n	8010a98 <HAL_TIM_PWM_Start+0x1bc>
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	4a27      	ldr	r2, [pc, #156]	; (8010b00 <HAL_TIM_PWM_Start+0x224>)
 8010a62:	4293      	cmp	r3, r2
 8010a64:	d018      	beq.n	8010a98 <HAL_TIM_PWM_Start+0x1bc>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	4a1f      	ldr	r2, [pc, #124]	; (8010ae8 <HAL_TIM_PWM_Start+0x20c>)
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	d013      	beq.n	8010a98 <HAL_TIM_PWM_Start+0x1bc>
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	4a23      	ldr	r2, [pc, #140]	; (8010b04 <HAL_TIM_PWM_Start+0x228>)
 8010a76:	4293      	cmp	r3, r2
 8010a78:	d00e      	beq.n	8010a98 <HAL_TIM_PWM_Start+0x1bc>
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	4a1b      	ldr	r2, [pc, #108]	; (8010aec <HAL_TIM_PWM_Start+0x210>)
 8010a80:	4293      	cmp	r3, r2
 8010a82:	d009      	beq.n	8010a98 <HAL_TIM_PWM_Start+0x1bc>
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	4a1f      	ldr	r2, [pc, #124]	; (8010b08 <HAL_TIM_PWM_Start+0x22c>)
 8010a8a:	4293      	cmp	r3, r2
 8010a8c:	d004      	beq.n	8010a98 <HAL_TIM_PWM_Start+0x1bc>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	4a1e      	ldr	r2, [pc, #120]	; (8010b0c <HAL_TIM_PWM_Start+0x230>)
 8010a94:	4293      	cmp	r3, r2
 8010a96:	d115      	bne.n	8010ac4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	689a      	ldr	r2, [r3, #8]
 8010a9e:	4b1c      	ldr	r3, [pc, #112]	; (8010b10 <HAL_TIM_PWM_Start+0x234>)
 8010aa0:	4013      	ands	r3, r2
 8010aa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2b06      	cmp	r3, #6
 8010aa8:	d015      	beq.n	8010ad6 <HAL_TIM_PWM_Start+0x1fa>
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ab0:	d011      	beq.n	8010ad6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f042 0201 	orr.w	r2, r2, #1
 8010ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ac2:	e008      	b.n	8010ad6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	681a      	ldr	r2, [r3, #0]
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	f042 0201 	orr.w	r2, r2, #1
 8010ad2:	601a      	str	r2, [r3, #0]
 8010ad4:	e000      	b.n	8010ad8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ad6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010ad8:	2300      	movs	r3, #0
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3710      	adds	r7, #16
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	40010000 	.word	0x40010000
 8010ae8:	40010400 	.word	0x40010400
 8010aec:	40014000 	.word	0x40014000
 8010af0:	40014400 	.word	0x40014400
 8010af4:	40014800 	.word	0x40014800
 8010af8:	40000400 	.word	0x40000400
 8010afc:	40000800 	.word	0x40000800
 8010b00:	40000c00 	.word	0x40000c00
 8010b04:	40001800 	.word	0x40001800
 8010b08:	4000e000 	.word	0x4000e000
 8010b0c:	4000e400 	.word	0x4000e400
 8010b10:	00010007 	.word	0x00010007

08010b14 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b086      	sub	sp, #24
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	60b9      	str	r1, [r7, #8]
 8010b1e:	607a      	str	r2, [r7, #4]
 8010b20:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8010b22:	2300      	movs	r3, #0
 8010b24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d109      	bne.n	8010b40 <HAL_TIM_PWM_Start_DMA+0x2c>
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010b32:	b2db      	uxtb	r3, r3
 8010b34:	2b02      	cmp	r3, #2
 8010b36:	bf0c      	ite	eq
 8010b38:	2301      	moveq	r3, #1
 8010b3a:	2300      	movne	r3, #0
 8010b3c:	b2db      	uxtb	r3, r3
 8010b3e:	e03c      	b.n	8010bba <HAL_TIM_PWM_Start_DMA+0xa6>
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	2b04      	cmp	r3, #4
 8010b44:	d109      	bne.n	8010b5a <HAL_TIM_PWM_Start_DMA+0x46>
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	2b02      	cmp	r3, #2
 8010b50:	bf0c      	ite	eq
 8010b52:	2301      	moveq	r3, #1
 8010b54:	2300      	movne	r3, #0
 8010b56:	b2db      	uxtb	r3, r3
 8010b58:	e02f      	b.n	8010bba <HAL_TIM_PWM_Start_DMA+0xa6>
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	2b08      	cmp	r3, #8
 8010b5e:	d109      	bne.n	8010b74 <HAL_TIM_PWM_Start_DMA+0x60>
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b66:	b2db      	uxtb	r3, r3
 8010b68:	2b02      	cmp	r3, #2
 8010b6a:	bf0c      	ite	eq
 8010b6c:	2301      	moveq	r3, #1
 8010b6e:	2300      	movne	r3, #0
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	e022      	b.n	8010bba <HAL_TIM_PWM_Start_DMA+0xa6>
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	2b0c      	cmp	r3, #12
 8010b78:	d109      	bne.n	8010b8e <HAL_TIM_PWM_Start_DMA+0x7a>
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010b80:	b2db      	uxtb	r3, r3
 8010b82:	2b02      	cmp	r3, #2
 8010b84:	bf0c      	ite	eq
 8010b86:	2301      	moveq	r3, #1
 8010b88:	2300      	movne	r3, #0
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	e015      	b.n	8010bba <HAL_TIM_PWM_Start_DMA+0xa6>
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	2b10      	cmp	r3, #16
 8010b92:	d109      	bne.n	8010ba8 <HAL_TIM_PWM_Start_DMA+0x94>
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b9a:	b2db      	uxtb	r3, r3
 8010b9c:	2b02      	cmp	r3, #2
 8010b9e:	bf0c      	ite	eq
 8010ba0:	2301      	moveq	r3, #1
 8010ba2:	2300      	movne	r3, #0
 8010ba4:	b2db      	uxtb	r3, r3
 8010ba6:	e008      	b.n	8010bba <HAL_TIM_PWM_Start_DMA+0xa6>
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bae:	b2db      	uxtb	r3, r3
 8010bb0:	2b02      	cmp	r3, #2
 8010bb2:	bf0c      	ite	eq
 8010bb4:	2301      	moveq	r3, #1
 8010bb6:	2300      	movne	r3, #0
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d001      	beq.n	8010bc2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8010bbe:	2302      	movs	r3, #2
 8010bc0:	e1ba      	b.n	8010f38 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d109      	bne.n	8010bdc <HAL_TIM_PWM_Start_DMA+0xc8>
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010bce:	b2db      	uxtb	r3, r3
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	bf0c      	ite	eq
 8010bd4:	2301      	moveq	r3, #1
 8010bd6:	2300      	movne	r3, #0
 8010bd8:	b2db      	uxtb	r3, r3
 8010bda:	e03c      	b.n	8010c56 <HAL_TIM_PWM_Start_DMA+0x142>
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	2b04      	cmp	r3, #4
 8010be0:	d109      	bne.n	8010bf6 <HAL_TIM_PWM_Start_DMA+0xe2>
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	2b01      	cmp	r3, #1
 8010bec:	bf0c      	ite	eq
 8010bee:	2301      	moveq	r3, #1
 8010bf0:	2300      	movne	r3, #0
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	e02f      	b.n	8010c56 <HAL_TIM_PWM_Start_DMA+0x142>
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	2b08      	cmp	r3, #8
 8010bfa:	d109      	bne.n	8010c10 <HAL_TIM_PWM_Start_DMA+0xfc>
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	bf0c      	ite	eq
 8010c08:	2301      	moveq	r3, #1
 8010c0a:	2300      	movne	r3, #0
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	e022      	b.n	8010c56 <HAL_TIM_PWM_Start_DMA+0x142>
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	2b0c      	cmp	r3, #12
 8010c14:	d109      	bne.n	8010c2a <HAL_TIM_PWM_Start_DMA+0x116>
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010c1c:	b2db      	uxtb	r3, r3
 8010c1e:	2b01      	cmp	r3, #1
 8010c20:	bf0c      	ite	eq
 8010c22:	2301      	moveq	r3, #1
 8010c24:	2300      	movne	r3, #0
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	e015      	b.n	8010c56 <HAL_TIM_PWM_Start_DMA+0x142>
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	2b10      	cmp	r3, #16
 8010c2e:	d109      	bne.n	8010c44 <HAL_TIM_PWM_Start_DMA+0x130>
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c36:	b2db      	uxtb	r3, r3
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	bf0c      	ite	eq
 8010c3c:	2301      	moveq	r3, #1
 8010c3e:	2300      	movne	r3, #0
 8010c40:	b2db      	uxtb	r3, r3
 8010c42:	e008      	b.n	8010c56 <HAL_TIM_PWM_Start_DMA+0x142>
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c4a:	b2db      	uxtb	r3, r3
 8010c4c:	2b01      	cmp	r3, #1
 8010c4e:	bf0c      	ite	eq
 8010c50:	2301      	moveq	r3, #1
 8010c52:	2300      	movne	r3, #0
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d034      	beq.n	8010cc4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d002      	beq.n	8010c66 <HAL_TIM_PWM_Start_DMA+0x152>
 8010c60:	887b      	ldrh	r3, [r7, #2]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d101      	bne.n	8010c6a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8010c66:	2301      	movs	r3, #1
 8010c68:	e166      	b.n	8010f38 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d104      	bne.n	8010c7a <HAL_TIM_PWM_Start_DMA+0x166>
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	2202      	movs	r2, #2
 8010c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010c78:	e026      	b.n	8010cc8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	2b04      	cmp	r3, #4
 8010c7e:	d104      	bne.n	8010c8a <HAL_TIM_PWM_Start_DMA+0x176>
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	2202      	movs	r2, #2
 8010c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010c88:	e01e      	b.n	8010cc8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	2b08      	cmp	r3, #8
 8010c8e:	d104      	bne.n	8010c9a <HAL_TIM_PWM_Start_DMA+0x186>
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	2202      	movs	r2, #2
 8010c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010c98:	e016      	b.n	8010cc8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	2b0c      	cmp	r3, #12
 8010c9e:	d104      	bne.n	8010caa <HAL_TIM_PWM_Start_DMA+0x196>
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	2202      	movs	r2, #2
 8010ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010ca8:	e00e      	b.n	8010cc8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	2b10      	cmp	r3, #16
 8010cae:	d104      	bne.n	8010cba <HAL_TIM_PWM_Start_DMA+0x1a6>
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	2202      	movs	r2, #2
 8010cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010cb8:	e006      	b.n	8010cc8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	2202      	movs	r2, #2
 8010cbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010cc2:	e001      	b.n	8010cc8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	e137      	b.n	8010f38 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	2b0c      	cmp	r3, #12
 8010ccc:	f200 80ae 	bhi.w	8010e2c <HAL_TIM_PWM_Start_DMA+0x318>
 8010cd0:	a201      	add	r2, pc, #4	; (adr r2, 8010cd8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8010cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cd6:	bf00      	nop
 8010cd8:	08010d0d 	.word	0x08010d0d
 8010cdc:	08010e2d 	.word	0x08010e2d
 8010ce0:	08010e2d 	.word	0x08010e2d
 8010ce4:	08010e2d 	.word	0x08010e2d
 8010ce8:	08010d55 	.word	0x08010d55
 8010cec:	08010e2d 	.word	0x08010e2d
 8010cf0:	08010e2d 	.word	0x08010e2d
 8010cf4:	08010e2d 	.word	0x08010e2d
 8010cf8:	08010d9d 	.word	0x08010d9d
 8010cfc:	08010e2d 	.word	0x08010e2d
 8010d00:	08010e2d 	.word	0x08010e2d
 8010d04:	08010e2d 	.word	0x08010e2d
 8010d08:	08010de5 	.word	0x08010de5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d10:	4a8b      	ldr	r2, [pc, #556]	; (8010f40 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010d12:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d18:	4a8a      	ldr	r2, [pc, #552]	; (8010f44 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010d1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d20:	4a89      	ldr	r2, [pc, #548]	; (8010f48 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010d22:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010d28:	6879      	ldr	r1, [r7, #4]
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	3334      	adds	r3, #52	; 0x34
 8010d30:	461a      	mov	r2, r3
 8010d32:	887b      	ldrh	r3, [r7, #2]
 8010d34:	f7f5 fec4 	bl	8006ac0 <HAL_DMA_Start_IT>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d001      	beq.n	8010d42 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010d3e:	2301      	movs	r3, #1
 8010d40:	e0fa      	b.n	8010f38 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	68da      	ldr	r2, [r3, #12]
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010d50:	60da      	str	r2, [r3, #12]
      break;
 8010d52:	e06e      	b.n	8010e32 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d58:	4a79      	ldr	r2, [pc, #484]	; (8010f40 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010d5a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d60:	4a78      	ldr	r2, [pc, #480]	; (8010f44 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010d62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d68:	4a77      	ldr	r2, [pc, #476]	; (8010f48 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010d6a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010d70:	6879      	ldr	r1, [r7, #4]
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	3338      	adds	r3, #56	; 0x38
 8010d78:	461a      	mov	r2, r3
 8010d7a:	887b      	ldrh	r3, [r7, #2]
 8010d7c:	f7f5 fea0 	bl	8006ac0 <HAL_DMA_Start_IT>
 8010d80:	4603      	mov	r3, r0
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d001      	beq.n	8010d8a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010d86:	2301      	movs	r3, #1
 8010d88:	e0d6      	b.n	8010f38 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	68da      	ldr	r2, [r3, #12]
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010d98:	60da      	str	r2, [r3, #12]
      break;
 8010d9a:	e04a      	b.n	8010e32 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010da0:	4a67      	ldr	r2, [pc, #412]	; (8010f40 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010da2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010da8:	4a66      	ldr	r2, [pc, #408]	; (8010f44 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010daa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db0:	4a65      	ldr	r2, [pc, #404]	; (8010f48 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010db2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010db8:	6879      	ldr	r1, [r7, #4]
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	333c      	adds	r3, #60	; 0x3c
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	887b      	ldrh	r3, [r7, #2]
 8010dc4:	f7f5 fe7c 	bl	8006ac0 <HAL_DMA_Start_IT>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d001      	beq.n	8010dd2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010dce:	2301      	movs	r3, #1
 8010dd0:	e0b2      	b.n	8010f38 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	68da      	ldr	r2, [r3, #12]
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010de0:	60da      	str	r2, [r3, #12]
      break;
 8010de2:	e026      	b.n	8010e32 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010de8:	4a55      	ldr	r2, [pc, #340]	; (8010f40 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010dea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010df0:	4a54      	ldr	r2, [pc, #336]	; (8010f44 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010df2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010df8:	4a53      	ldr	r2, [pc, #332]	; (8010f48 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010dfa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010e00:	6879      	ldr	r1, [r7, #4]
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	3340      	adds	r3, #64	; 0x40
 8010e08:	461a      	mov	r2, r3
 8010e0a:	887b      	ldrh	r3, [r7, #2]
 8010e0c:	f7f5 fe58 	bl	8006ac0 <HAL_DMA_Start_IT>
 8010e10:	4603      	mov	r3, r0
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d001      	beq.n	8010e1a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010e16:	2301      	movs	r3, #1
 8010e18:	e08e      	b.n	8010f38 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	68da      	ldr	r2, [r3, #12]
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010e28:	60da      	str	r2, [r3, #12]
      break;
 8010e2a:	e002      	b.n	8010e32 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8010e30:	bf00      	nop
  }

  if (status == HAL_OK)
 8010e32:	7dfb      	ldrb	r3, [r7, #23]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d17e      	bne.n	8010f36 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	2201      	movs	r2, #1
 8010e3e:	68b9      	ldr	r1, [r7, #8]
 8010e40:	4618      	mov	r0, r3
 8010e42:	f000 ff63 	bl	8011d0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	4a40      	ldr	r2, [pc, #256]	; (8010f4c <HAL_TIM_PWM_Start_DMA+0x438>)
 8010e4c:	4293      	cmp	r3, r2
 8010e4e:	d013      	beq.n	8010e78 <HAL_TIM_PWM_Start_DMA+0x364>
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	4a3e      	ldr	r2, [pc, #248]	; (8010f50 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d00e      	beq.n	8010e78 <HAL_TIM_PWM_Start_DMA+0x364>
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	4a3d      	ldr	r2, [pc, #244]	; (8010f54 <HAL_TIM_PWM_Start_DMA+0x440>)
 8010e60:	4293      	cmp	r3, r2
 8010e62:	d009      	beq.n	8010e78 <HAL_TIM_PWM_Start_DMA+0x364>
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	4a3b      	ldr	r2, [pc, #236]	; (8010f58 <HAL_TIM_PWM_Start_DMA+0x444>)
 8010e6a:	4293      	cmp	r3, r2
 8010e6c:	d004      	beq.n	8010e78 <HAL_TIM_PWM_Start_DMA+0x364>
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	4a3a      	ldr	r2, [pc, #232]	; (8010f5c <HAL_TIM_PWM_Start_DMA+0x448>)
 8010e74:	4293      	cmp	r3, r2
 8010e76:	d101      	bne.n	8010e7c <HAL_TIM_PWM_Start_DMA+0x368>
 8010e78:	2301      	movs	r3, #1
 8010e7a:	e000      	b.n	8010e7e <HAL_TIM_PWM_Start_DMA+0x36a>
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d007      	beq.n	8010e92 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010e90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	4a2d      	ldr	r2, [pc, #180]	; (8010f4c <HAL_TIM_PWM_Start_DMA+0x438>)
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	d02c      	beq.n	8010ef6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010ea4:	d027      	beq.n	8010ef6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	4a2d      	ldr	r2, [pc, #180]	; (8010f60 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8010eac:	4293      	cmp	r3, r2
 8010eae:	d022      	beq.n	8010ef6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	4a2b      	ldr	r2, [pc, #172]	; (8010f64 <HAL_TIM_PWM_Start_DMA+0x450>)
 8010eb6:	4293      	cmp	r3, r2
 8010eb8:	d01d      	beq.n	8010ef6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	4a2a      	ldr	r2, [pc, #168]	; (8010f68 <HAL_TIM_PWM_Start_DMA+0x454>)
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	d018      	beq.n	8010ef6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	4a21      	ldr	r2, [pc, #132]	; (8010f50 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	d013      	beq.n	8010ef6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	4a26      	ldr	r2, [pc, #152]	; (8010f6c <HAL_TIM_PWM_Start_DMA+0x458>)
 8010ed4:	4293      	cmp	r3, r2
 8010ed6:	d00e      	beq.n	8010ef6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	4a1d      	ldr	r2, [pc, #116]	; (8010f54 <HAL_TIM_PWM_Start_DMA+0x440>)
 8010ede:	4293      	cmp	r3, r2
 8010ee0:	d009      	beq.n	8010ef6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	4a22      	ldr	r2, [pc, #136]	; (8010f70 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8010ee8:	4293      	cmp	r3, r2
 8010eea:	d004      	beq.n	8010ef6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	4a20      	ldr	r2, [pc, #128]	; (8010f74 <HAL_TIM_PWM_Start_DMA+0x460>)
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	d115      	bne.n	8010f22 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	689a      	ldr	r2, [r3, #8]
 8010efc:	4b1e      	ldr	r3, [pc, #120]	; (8010f78 <HAL_TIM_PWM_Start_DMA+0x464>)
 8010efe:	4013      	ands	r3, r2
 8010f00:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f02:	693b      	ldr	r3, [r7, #16]
 8010f04:	2b06      	cmp	r3, #6
 8010f06:	d015      	beq.n	8010f34 <HAL_TIM_PWM_Start_DMA+0x420>
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f0e:	d011      	beq.n	8010f34 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	681a      	ldr	r2, [r3, #0]
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	f042 0201 	orr.w	r2, r2, #1
 8010f1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f20:	e008      	b.n	8010f34 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	681a      	ldr	r2, [r3, #0]
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	f042 0201 	orr.w	r2, r2, #1
 8010f30:	601a      	str	r2, [r3, #0]
 8010f32:	e000      	b.n	8010f36 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f34:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3718      	adds	r7, #24
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	08011503 	.word	0x08011503
 8010f44:	080115ab 	.word	0x080115ab
 8010f48:	08011471 	.word	0x08011471
 8010f4c:	40010000 	.word	0x40010000
 8010f50:	40010400 	.word	0x40010400
 8010f54:	40014000 	.word	0x40014000
 8010f58:	40014400 	.word	0x40014400
 8010f5c:	40014800 	.word	0x40014800
 8010f60:	40000400 	.word	0x40000400
 8010f64:	40000800 	.word	0x40000800
 8010f68:	40000c00 	.word	0x40000c00
 8010f6c:	40001800 	.word	0x40001800
 8010f70:	4000e000 	.word	0x4000e000
 8010f74:	4000e400 	.word	0x4000e400
 8010f78:	00010007 	.word	0x00010007

08010f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b082      	sub	sp, #8
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	691b      	ldr	r3, [r3, #16]
 8010f8a:	f003 0302 	and.w	r3, r3, #2
 8010f8e:	2b02      	cmp	r3, #2
 8010f90:	d122      	bne.n	8010fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	68db      	ldr	r3, [r3, #12]
 8010f98:	f003 0302 	and.w	r3, r3, #2
 8010f9c:	2b02      	cmp	r3, #2
 8010f9e:	d11b      	bne.n	8010fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	f06f 0202 	mvn.w	r2, #2
 8010fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2201      	movs	r2, #1
 8010fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	699b      	ldr	r3, [r3, #24]
 8010fb6:	f003 0303 	and.w	r3, r3, #3
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d003      	beq.n	8010fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f000 fa24 	bl	801140c <HAL_TIM_IC_CaptureCallback>
 8010fc4:	e005      	b.n	8010fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 fa16 	bl	80113f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f000 fa27 	bl	8011420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	691b      	ldr	r3, [r3, #16]
 8010fde:	f003 0304 	and.w	r3, r3, #4
 8010fe2:	2b04      	cmp	r3, #4
 8010fe4:	d122      	bne.n	801102c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	f003 0304 	and.w	r3, r3, #4
 8010ff0:	2b04      	cmp	r3, #4
 8010ff2:	d11b      	bne.n	801102c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	f06f 0204 	mvn.w	r2, #4
 8010ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2202      	movs	r2, #2
 8011002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	699b      	ldr	r3, [r3, #24]
 801100a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801100e:	2b00      	cmp	r3, #0
 8011010:	d003      	beq.n	801101a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f000 f9fa 	bl	801140c <HAL_TIM_IC_CaptureCallback>
 8011018:	e005      	b.n	8011026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f000 f9ec 	bl	80113f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f000 f9fd 	bl	8011420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2200      	movs	r2, #0
 801102a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	691b      	ldr	r3, [r3, #16]
 8011032:	f003 0308 	and.w	r3, r3, #8
 8011036:	2b08      	cmp	r3, #8
 8011038:	d122      	bne.n	8011080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	68db      	ldr	r3, [r3, #12]
 8011040:	f003 0308 	and.w	r3, r3, #8
 8011044:	2b08      	cmp	r3, #8
 8011046:	d11b      	bne.n	8011080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	f06f 0208 	mvn.w	r2, #8
 8011050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	2204      	movs	r2, #4
 8011056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	69db      	ldr	r3, [r3, #28]
 801105e:	f003 0303 	and.w	r3, r3, #3
 8011062:	2b00      	cmp	r3, #0
 8011064:	d003      	beq.n	801106e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	f000 f9d0 	bl	801140c <HAL_TIM_IC_CaptureCallback>
 801106c:	e005      	b.n	801107a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f000 f9c2 	bl	80113f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f000 f9d3 	bl	8011420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2200      	movs	r2, #0
 801107e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	691b      	ldr	r3, [r3, #16]
 8011086:	f003 0310 	and.w	r3, r3, #16
 801108a:	2b10      	cmp	r3, #16
 801108c:	d122      	bne.n	80110d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	68db      	ldr	r3, [r3, #12]
 8011094:	f003 0310 	and.w	r3, r3, #16
 8011098:	2b10      	cmp	r3, #16
 801109a:	d11b      	bne.n	80110d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	f06f 0210 	mvn.w	r2, #16
 80110a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2208      	movs	r2, #8
 80110aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	69db      	ldr	r3, [r3, #28]
 80110b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d003      	beq.n	80110c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f000 f9a6 	bl	801140c <HAL_TIM_IC_CaptureCallback>
 80110c0:	e005      	b.n	80110ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f000 f998 	bl	80113f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	f000 f9a9 	bl	8011420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	2200      	movs	r2, #0
 80110d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	691b      	ldr	r3, [r3, #16]
 80110da:	f003 0301 	and.w	r3, r3, #1
 80110de:	2b01      	cmp	r3, #1
 80110e0:	d10e      	bne.n	8011100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	68db      	ldr	r3, [r3, #12]
 80110e8:	f003 0301 	and.w	r3, r3, #1
 80110ec:	2b01      	cmp	r3, #1
 80110ee:	d107      	bne.n	8011100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	f06f 0201 	mvn.w	r2, #1
 80110f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f000 f972 	bl	80113e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	691b      	ldr	r3, [r3, #16]
 8011106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801110a:	2b80      	cmp	r3, #128	; 0x80
 801110c:	d10e      	bne.n	801112c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	68db      	ldr	r3, [r3, #12]
 8011114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011118:	2b80      	cmp	r3, #128	; 0x80
 801111a:	d107      	bne.n	801112c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f000 febc 	bl	8011ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	691b      	ldr	r3, [r3, #16]
 8011132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801113a:	d10e      	bne.n	801115a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	68db      	ldr	r3, [r3, #12]
 8011142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011146:	2b80      	cmp	r3, #128	; 0x80
 8011148:	d107      	bne.n	801115a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8011152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f000 feaf 	bl	8011eb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	691b      	ldr	r3, [r3, #16]
 8011160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011164:	2b40      	cmp	r3, #64	; 0x40
 8011166:	d10e      	bne.n	8011186 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	68db      	ldr	r3, [r3, #12]
 801116e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011172:	2b40      	cmp	r3, #64	; 0x40
 8011174:	d107      	bne.n	8011186 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801117e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f000 f961 	bl	8011448 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	691b      	ldr	r3, [r3, #16]
 801118c:	f003 0320 	and.w	r3, r3, #32
 8011190:	2b20      	cmp	r3, #32
 8011192:	d10e      	bne.n	80111b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	68db      	ldr	r3, [r3, #12]
 801119a:	f003 0320 	and.w	r3, r3, #32
 801119e:	2b20      	cmp	r3, #32
 80111a0:	d107      	bne.n	80111b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f06f 0220 	mvn.w	r2, #32
 80111aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f000 fe6f 	bl	8011e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80111b2:	bf00      	nop
 80111b4:	3708      	adds	r7, #8
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}
	...

080111bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b086      	sub	sp, #24
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	60f8      	str	r0, [r7, #12]
 80111c4:	60b9      	str	r1, [r7, #8]
 80111c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80111c8:	2300      	movs	r3, #0
 80111ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	d101      	bne.n	80111da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80111d6:	2302      	movs	r3, #2
 80111d8:	e0ff      	b.n	80113da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	2201      	movs	r2, #1
 80111de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2b14      	cmp	r3, #20
 80111e6:	f200 80f0 	bhi.w	80113ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80111ea:	a201      	add	r2, pc, #4	; (adr r2, 80111f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80111ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111f0:	08011245 	.word	0x08011245
 80111f4:	080113cb 	.word	0x080113cb
 80111f8:	080113cb 	.word	0x080113cb
 80111fc:	080113cb 	.word	0x080113cb
 8011200:	08011285 	.word	0x08011285
 8011204:	080113cb 	.word	0x080113cb
 8011208:	080113cb 	.word	0x080113cb
 801120c:	080113cb 	.word	0x080113cb
 8011210:	080112c7 	.word	0x080112c7
 8011214:	080113cb 	.word	0x080113cb
 8011218:	080113cb 	.word	0x080113cb
 801121c:	080113cb 	.word	0x080113cb
 8011220:	08011307 	.word	0x08011307
 8011224:	080113cb 	.word	0x080113cb
 8011228:	080113cb 	.word	0x080113cb
 801122c:	080113cb 	.word	0x080113cb
 8011230:	08011349 	.word	0x08011349
 8011234:	080113cb 	.word	0x080113cb
 8011238:	080113cb 	.word	0x080113cb
 801123c:	080113cb 	.word	0x080113cb
 8011240:	08011389 	.word	0x08011389
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	68b9      	ldr	r1, [r7, #8]
 801124a:	4618      	mov	r0, r3
 801124c:	f000 fa88 	bl	8011760 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	699a      	ldr	r2, [r3, #24]
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	f042 0208 	orr.w	r2, r2, #8
 801125e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	699a      	ldr	r2, [r3, #24]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f022 0204 	bic.w	r2, r2, #4
 801126e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	6999      	ldr	r1, [r3, #24]
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	691a      	ldr	r2, [r3, #16]
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	430a      	orrs	r2, r1
 8011280:	619a      	str	r2, [r3, #24]
      break;
 8011282:	e0a5      	b.n	80113d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	68b9      	ldr	r1, [r7, #8]
 801128a:	4618      	mov	r0, r3
 801128c:	f000 faf8 	bl	8011880 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	699a      	ldr	r2, [r3, #24]
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801129e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	699a      	ldr	r2, [r3, #24]
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80112ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	6999      	ldr	r1, [r3, #24]
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	691b      	ldr	r3, [r3, #16]
 80112ba:	021a      	lsls	r2, r3, #8
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	430a      	orrs	r2, r1
 80112c2:	619a      	str	r2, [r3, #24]
      break;
 80112c4:	e084      	b.n	80113d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	68b9      	ldr	r1, [r7, #8]
 80112cc:	4618      	mov	r0, r3
 80112ce:	f000 fb61 	bl	8011994 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	69da      	ldr	r2, [r3, #28]
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	f042 0208 	orr.w	r2, r2, #8
 80112e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	69da      	ldr	r2, [r3, #28]
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	f022 0204 	bic.w	r2, r2, #4
 80112f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	69d9      	ldr	r1, [r3, #28]
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	691a      	ldr	r2, [r3, #16]
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	430a      	orrs	r2, r1
 8011302:	61da      	str	r2, [r3, #28]
      break;
 8011304:	e064      	b.n	80113d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	68b9      	ldr	r1, [r7, #8]
 801130c:	4618      	mov	r0, r3
 801130e:	f000 fbc9 	bl	8011aa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	69da      	ldr	r2, [r3, #28]
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	69da      	ldr	r2, [r3, #28]
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	69d9      	ldr	r1, [r3, #28]
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	691b      	ldr	r3, [r3, #16]
 801133c:	021a      	lsls	r2, r3, #8
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	430a      	orrs	r2, r1
 8011344:	61da      	str	r2, [r3, #28]
      break;
 8011346:	e043      	b.n	80113d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	68b9      	ldr	r1, [r7, #8]
 801134e:	4618      	mov	r0, r3
 8011350:	f000 fc12 	bl	8011b78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	f042 0208 	orr.w	r2, r2, #8
 8011362:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	f022 0204 	bic.w	r2, r2, #4
 8011372:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	691a      	ldr	r2, [r3, #16]
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	430a      	orrs	r2, r1
 8011384:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011386:	e023      	b.n	80113d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	68b9      	ldr	r1, [r7, #8]
 801138e:	4618      	mov	r0, r3
 8011390:	f000 fc56 	bl	8011c40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80113a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80113b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	691b      	ldr	r3, [r3, #16]
 80113be:	021a      	lsls	r2, r3, #8
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	430a      	orrs	r2, r1
 80113c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80113c8:	e002      	b.n	80113d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80113ca:	2301      	movs	r3, #1
 80113cc:	75fb      	strb	r3, [r7, #23]
      break;
 80113ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	2200      	movs	r2, #0
 80113d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80113d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3718      	adds	r7, #24
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}
 80113e2:	bf00      	nop

080113e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80113e4:	b480      	push	{r7}
 80113e6:	b083      	sub	sp, #12
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80113ec:	bf00      	nop
 80113ee:	370c      	adds	r7, #12
 80113f0:	46bd      	mov	sp, r7
 80113f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f6:	4770      	bx	lr

080113f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80113f8:	b480      	push	{r7}
 80113fa:	b083      	sub	sp, #12
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011400:	bf00      	nop
 8011402:	370c      	adds	r7, #12
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr

0801140c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801140c:	b480      	push	{r7}
 801140e:	b083      	sub	sp, #12
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011414:	bf00      	nop
 8011416:	370c      	adds	r7, #12
 8011418:	46bd      	mov	sp, r7
 801141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141e:	4770      	bx	lr

08011420 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011420:	b480      	push	{r7}
 8011422:	b083      	sub	sp, #12
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011428:	bf00      	nop
 801142a:	370c      	adds	r7, #12
 801142c:	46bd      	mov	sp, r7
 801142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011432:	4770      	bx	lr

08011434 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011434:	b480      	push	{r7}
 8011436:	b083      	sub	sp, #12
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 801143c:	bf00      	nop
 801143e:	370c      	adds	r7, #12
 8011440:	46bd      	mov	sp, r7
 8011442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011446:	4770      	bx	lr

08011448 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011448:	b480      	push	{r7}
 801144a:	b083      	sub	sp, #12
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011450:	bf00      	nop
 8011452:	370c      	adds	r7, #12
 8011454:	46bd      	mov	sp, r7
 8011456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145a:	4770      	bx	lr

0801145c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 801145c:	b480      	push	{r7}
 801145e:	b083      	sub	sp, #12
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8011464:	bf00      	nop
 8011466:	370c      	adds	r7, #12
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr

08011470 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801147c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011482:	687a      	ldr	r2, [r7, #4]
 8011484:	429a      	cmp	r2, r3
 8011486:	d107      	bne.n	8011498 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	2201      	movs	r2, #1
 801148c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	2201      	movs	r2, #1
 8011492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011496:	e02a      	b.n	80114ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	429a      	cmp	r2, r3
 80114a0:	d107      	bne.n	80114b2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	2202      	movs	r2, #2
 80114a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	2201      	movs	r2, #1
 80114ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80114b0:	e01d      	b.n	80114ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b6:	687a      	ldr	r2, [r7, #4]
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d107      	bne.n	80114cc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	2204      	movs	r2, #4
 80114c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	2201      	movs	r2, #1
 80114c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80114ca:	e010      	b.n	80114ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114d0:	687a      	ldr	r2, [r7, #4]
 80114d2:	429a      	cmp	r2, r3
 80114d4:	d107      	bne.n	80114e6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2208      	movs	r2, #8
 80114da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	2201      	movs	r2, #1
 80114e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80114e4:	e003      	b.n	80114ee <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	2201      	movs	r2, #1
 80114ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80114ee:	68f8      	ldr	r0, [r7, #12]
 80114f0:	f7ff ffb4 	bl	801145c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	2200      	movs	r2, #0
 80114f8:	771a      	strb	r2, [r3, #28]
}
 80114fa:	bf00      	nop
 80114fc:	3710      	adds	r7, #16
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}

08011502 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8011502:	b580      	push	{r7, lr}
 8011504:	b084      	sub	sp, #16
 8011506:	af00      	add	r7, sp, #0
 8011508:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801150e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011514:	687a      	ldr	r2, [r7, #4]
 8011516:	429a      	cmp	r2, r3
 8011518:	d10b      	bne.n	8011532 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	2201      	movs	r2, #1
 801151e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	69db      	ldr	r3, [r3, #28]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d136      	bne.n	8011596 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	2201      	movs	r2, #1
 801152c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011530:	e031      	b.n	8011596 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011536:	687a      	ldr	r2, [r7, #4]
 8011538:	429a      	cmp	r2, r3
 801153a:	d10b      	bne.n	8011554 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	2202      	movs	r2, #2
 8011540:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	69db      	ldr	r3, [r3, #28]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d125      	bne.n	8011596 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	2201      	movs	r2, #1
 801154e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011552:	e020      	b.n	8011596 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011558:	687a      	ldr	r2, [r7, #4]
 801155a:	429a      	cmp	r2, r3
 801155c:	d10b      	bne.n	8011576 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	2204      	movs	r2, #4
 8011562:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	69db      	ldr	r3, [r3, #28]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d114      	bne.n	8011596 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	2201      	movs	r2, #1
 8011570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011574:	e00f      	b.n	8011596 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	429a      	cmp	r2, r3
 801157e:	d10a      	bne.n	8011596 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	2208      	movs	r2, #8
 8011584:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	69db      	ldr	r3, [r3, #28]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d103      	bne.n	8011596 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	2201      	movs	r2, #1
 8011592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011596:	68f8      	ldr	r0, [r7, #12]
 8011598:	f7ff ff42 	bl	8011420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	2200      	movs	r2, #0
 80115a0:	771a      	strb	r2, [r3, #28]
}
 80115a2:	bf00      	nop
 80115a4:	3710      	adds	r7, #16
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}

080115aa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80115aa:	b580      	push	{r7, lr}
 80115ac:	b084      	sub	sp, #16
 80115ae:	af00      	add	r7, sp, #0
 80115b0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115b6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115bc:	687a      	ldr	r2, [r7, #4]
 80115be:	429a      	cmp	r2, r3
 80115c0:	d103      	bne.n	80115ca <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	2201      	movs	r2, #1
 80115c6:	771a      	strb	r2, [r3, #28]
 80115c8:	e019      	b.n	80115fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115ce:	687a      	ldr	r2, [r7, #4]
 80115d0:	429a      	cmp	r2, r3
 80115d2:	d103      	bne.n	80115dc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	2202      	movs	r2, #2
 80115d8:	771a      	strb	r2, [r3, #28]
 80115da:	e010      	b.n	80115fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	429a      	cmp	r2, r3
 80115e4:	d103      	bne.n	80115ee <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	2204      	movs	r2, #4
 80115ea:	771a      	strb	r2, [r3, #28]
 80115ec:	e007      	b.n	80115fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115f2:	687a      	ldr	r2, [r7, #4]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d102      	bne.n	80115fe <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	2208      	movs	r2, #8
 80115fc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80115fe:	68f8      	ldr	r0, [r7, #12]
 8011600:	f7ff ff18 	bl	8011434 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	2200      	movs	r2, #0
 8011608:	771a      	strb	r2, [r3, #28]
}
 801160a:	bf00      	nop
 801160c:	3710      	adds	r7, #16
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
	...

08011614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011614:	b480      	push	{r7}
 8011616:	b085      	sub	sp, #20
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	4a44      	ldr	r2, [pc, #272]	; (8011738 <TIM_Base_SetConfig+0x124>)
 8011628:	4293      	cmp	r3, r2
 801162a:	d013      	beq.n	8011654 <TIM_Base_SetConfig+0x40>
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011632:	d00f      	beq.n	8011654 <TIM_Base_SetConfig+0x40>
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	4a41      	ldr	r2, [pc, #260]	; (801173c <TIM_Base_SetConfig+0x128>)
 8011638:	4293      	cmp	r3, r2
 801163a:	d00b      	beq.n	8011654 <TIM_Base_SetConfig+0x40>
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	4a40      	ldr	r2, [pc, #256]	; (8011740 <TIM_Base_SetConfig+0x12c>)
 8011640:	4293      	cmp	r3, r2
 8011642:	d007      	beq.n	8011654 <TIM_Base_SetConfig+0x40>
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	4a3f      	ldr	r2, [pc, #252]	; (8011744 <TIM_Base_SetConfig+0x130>)
 8011648:	4293      	cmp	r3, r2
 801164a:	d003      	beq.n	8011654 <TIM_Base_SetConfig+0x40>
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	4a3e      	ldr	r2, [pc, #248]	; (8011748 <TIM_Base_SetConfig+0x134>)
 8011650:	4293      	cmp	r3, r2
 8011652:	d108      	bne.n	8011666 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801165a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	68fa      	ldr	r2, [r7, #12]
 8011662:	4313      	orrs	r3, r2
 8011664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	4a33      	ldr	r2, [pc, #204]	; (8011738 <TIM_Base_SetConfig+0x124>)
 801166a:	4293      	cmp	r3, r2
 801166c:	d027      	beq.n	80116be <TIM_Base_SetConfig+0xaa>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011674:	d023      	beq.n	80116be <TIM_Base_SetConfig+0xaa>
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	4a30      	ldr	r2, [pc, #192]	; (801173c <TIM_Base_SetConfig+0x128>)
 801167a:	4293      	cmp	r3, r2
 801167c:	d01f      	beq.n	80116be <TIM_Base_SetConfig+0xaa>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4a2f      	ldr	r2, [pc, #188]	; (8011740 <TIM_Base_SetConfig+0x12c>)
 8011682:	4293      	cmp	r3, r2
 8011684:	d01b      	beq.n	80116be <TIM_Base_SetConfig+0xaa>
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	4a2e      	ldr	r2, [pc, #184]	; (8011744 <TIM_Base_SetConfig+0x130>)
 801168a:	4293      	cmp	r3, r2
 801168c:	d017      	beq.n	80116be <TIM_Base_SetConfig+0xaa>
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	4a2d      	ldr	r2, [pc, #180]	; (8011748 <TIM_Base_SetConfig+0x134>)
 8011692:	4293      	cmp	r3, r2
 8011694:	d013      	beq.n	80116be <TIM_Base_SetConfig+0xaa>
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	4a2c      	ldr	r2, [pc, #176]	; (801174c <TIM_Base_SetConfig+0x138>)
 801169a:	4293      	cmp	r3, r2
 801169c:	d00f      	beq.n	80116be <TIM_Base_SetConfig+0xaa>
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4a2b      	ldr	r2, [pc, #172]	; (8011750 <TIM_Base_SetConfig+0x13c>)
 80116a2:	4293      	cmp	r3, r2
 80116a4:	d00b      	beq.n	80116be <TIM_Base_SetConfig+0xaa>
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	4a2a      	ldr	r2, [pc, #168]	; (8011754 <TIM_Base_SetConfig+0x140>)
 80116aa:	4293      	cmp	r3, r2
 80116ac:	d007      	beq.n	80116be <TIM_Base_SetConfig+0xaa>
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	4a29      	ldr	r2, [pc, #164]	; (8011758 <TIM_Base_SetConfig+0x144>)
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d003      	beq.n	80116be <TIM_Base_SetConfig+0xaa>
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	4a28      	ldr	r2, [pc, #160]	; (801175c <TIM_Base_SetConfig+0x148>)
 80116ba:	4293      	cmp	r3, r2
 80116bc:	d108      	bne.n	80116d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80116c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	68db      	ldr	r3, [r3, #12]
 80116ca:	68fa      	ldr	r2, [r7, #12]
 80116cc:	4313      	orrs	r3, r2
 80116ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	695b      	ldr	r3, [r3, #20]
 80116da:	4313      	orrs	r3, r2
 80116dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	68fa      	ldr	r2, [r7, #12]
 80116e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	689a      	ldr	r2, [r3, #8]
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	681a      	ldr	r2, [r3, #0]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	4a10      	ldr	r2, [pc, #64]	; (8011738 <TIM_Base_SetConfig+0x124>)
 80116f8:	4293      	cmp	r3, r2
 80116fa:	d00f      	beq.n	801171c <TIM_Base_SetConfig+0x108>
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	4a12      	ldr	r2, [pc, #72]	; (8011748 <TIM_Base_SetConfig+0x134>)
 8011700:	4293      	cmp	r3, r2
 8011702:	d00b      	beq.n	801171c <TIM_Base_SetConfig+0x108>
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	4a11      	ldr	r2, [pc, #68]	; (801174c <TIM_Base_SetConfig+0x138>)
 8011708:	4293      	cmp	r3, r2
 801170a:	d007      	beq.n	801171c <TIM_Base_SetConfig+0x108>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	4a10      	ldr	r2, [pc, #64]	; (8011750 <TIM_Base_SetConfig+0x13c>)
 8011710:	4293      	cmp	r3, r2
 8011712:	d003      	beq.n	801171c <TIM_Base_SetConfig+0x108>
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	4a0f      	ldr	r2, [pc, #60]	; (8011754 <TIM_Base_SetConfig+0x140>)
 8011718:	4293      	cmp	r3, r2
 801171a:	d103      	bne.n	8011724 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	691a      	ldr	r2, [r3, #16]
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2201      	movs	r2, #1
 8011728:	615a      	str	r2, [r3, #20]
}
 801172a:	bf00      	nop
 801172c:	3714      	adds	r7, #20
 801172e:	46bd      	mov	sp, r7
 8011730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011734:	4770      	bx	lr
 8011736:	bf00      	nop
 8011738:	40010000 	.word	0x40010000
 801173c:	40000400 	.word	0x40000400
 8011740:	40000800 	.word	0x40000800
 8011744:	40000c00 	.word	0x40000c00
 8011748:	40010400 	.word	0x40010400
 801174c:	40014000 	.word	0x40014000
 8011750:	40014400 	.word	0x40014400
 8011754:	40014800 	.word	0x40014800
 8011758:	4000e000 	.word	0x4000e000
 801175c:	4000e400 	.word	0x4000e400

08011760 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011760:	b480      	push	{r7}
 8011762:	b087      	sub	sp, #28
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	6a1b      	ldr	r3, [r3, #32]
 801176e:	f023 0201 	bic.w	r2, r3, #1
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	6a1b      	ldr	r3, [r3, #32]
 801177a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	699b      	ldr	r3, [r3, #24]
 8011786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011788:	68fa      	ldr	r2, [r7, #12]
 801178a:	4b37      	ldr	r3, [pc, #220]	; (8011868 <TIM_OC1_SetConfig+0x108>)
 801178c:	4013      	ands	r3, r2
 801178e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	f023 0303 	bic.w	r3, r3, #3
 8011796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	68fa      	ldr	r2, [r7, #12]
 801179e:	4313      	orrs	r3, r2
 80117a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	f023 0302 	bic.w	r3, r3, #2
 80117a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	689b      	ldr	r3, [r3, #8]
 80117ae:	697a      	ldr	r2, [r7, #20]
 80117b0:	4313      	orrs	r3, r2
 80117b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	4a2d      	ldr	r2, [pc, #180]	; (801186c <TIM_OC1_SetConfig+0x10c>)
 80117b8:	4293      	cmp	r3, r2
 80117ba:	d00f      	beq.n	80117dc <TIM_OC1_SetConfig+0x7c>
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	4a2c      	ldr	r2, [pc, #176]	; (8011870 <TIM_OC1_SetConfig+0x110>)
 80117c0:	4293      	cmp	r3, r2
 80117c2:	d00b      	beq.n	80117dc <TIM_OC1_SetConfig+0x7c>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	4a2b      	ldr	r2, [pc, #172]	; (8011874 <TIM_OC1_SetConfig+0x114>)
 80117c8:	4293      	cmp	r3, r2
 80117ca:	d007      	beq.n	80117dc <TIM_OC1_SetConfig+0x7c>
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	4a2a      	ldr	r2, [pc, #168]	; (8011878 <TIM_OC1_SetConfig+0x118>)
 80117d0:	4293      	cmp	r3, r2
 80117d2:	d003      	beq.n	80117dc <TIM_OC1_SetConfig+0x7c>
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	4a29      	ldr	r2, [pc, #164]	; (801187c <TIM_OC1_SetConfig+0x11c>)
 80117d8:	4293      	cmp	r3, r2
 80117da:	d10c      	bne.n	80117f6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	f023 0308 	bic.w	r3, r3, #8
 80117e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	68db      	ldr	r3, [r3, #12]
 80117e8:	697a      	ldr	r2, [r7, #20]
 80117ea:	4313      	orrs	r3, r2
 80117ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	f023 0304 	bic.w	r3, r3, #4
 80117f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	4a1c      	ldr	r2, [pc, #112]	; (801186c <TIM_OC1_SetConfig+0x10c>)
 80117fa:	4293      	cmp	r3, r2
 80117fc:	d00f      	beq.n	801181e <TIM_OC1_SetConfig+0xbe>
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	4a1b      	ldr	r2, [pc, #108]	; (8011870 <TIM_OC1_SetConfig+0x110>)
 8011802:	4293      	cmp	r3, r2
 8011804:	d00b      	beq.n	801181e <TIM_OC1_SetConfig+0xbe>
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	4a1a      	ldr	r2, [pc, #104]	; (8011874 <TIM_OC1_SetConfig+0x114>)
 801180a:	4293      	cmp	r3, r2
 801180c:	d007      	beq.n	801181e <TIM_OC1_SetConfig+0xbe>
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	4a19      	ldr	r2, [pc, #100]	; (8011878 <TIM_OC1_SetConfig+0x118>)
 8011812:	4293      	cmp	r3, r2
 8011814:	d003      	beq.n	801181e <TIM_OC1_SetConfig+0xbe>
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	4a18      	ldr	r2, [pc, #96]	; (801187c <TIM_OC1_SetConfig+0x11c>)
 801181a:	4293      	cmp	r3, r2
 801181c:	d111      	bne.n	8011842 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011826:	693b      	ldr	r3, [r7, #16]
 8011828:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801182c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	695b      	ldr	r3, [r3, #20]
 8011832:	693a      	ldr	r2, [r7, #16]
 8011834:	4313      	orrs	r3, r2
 8011836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	699b      	ldr	r3, [r3, #24]
 801183c:	693a      	ldr	r2, [r7, #16]
 801183e:	4313      	orrs	r3, r2
 8011840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	693a      	ldr	r2, [r7, #16]
 8011846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	68fa      	ldr	r2, [r7, #12]
 801184c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	685a      	ldr	r2, [r3, #4]
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	697a      	ldr	r2, [r7, #20]
 801185a:	621a      	str	r2, [r3, #32]
}
 801185c:	bf00      	nop
 801185e:	371c      	adds	r7, #28
 8011860:	46bd      	mov	sp, r7
 8011862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011866:	4770      	bx	lr
 8011868:	fffeff8f 	.word	0xfffeff8f
 801186c:	40010000 	.word	0x40010000
 8011870:	40010400 	.word	0x40010400
 8011874:	40014000 	.word	0x40014000
 8011878:	40014400 	.word	0x40014400
 801187c:	40014800 	.word	0x40014800

08011880 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011880:	b480      	push	{r7}
 8011882:	b087      	sub	sp, #28
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
 8011888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6a1b      	ldr	r3, [r3, #32]
 801188e:	f023 0210 	bic.w	r2, r3, #16
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6a1b      	ldr	r3, [r3, #32]
 801189a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	699b      	ldr	r3, [r3, #24]
 80118a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80118a8:	68fa      	ldr	r2, [r7, #12]
 80118aa:	4b34      	ldr	r3, [pc, #208]	; (801197c <TIM_OC2_SetConfig+0xfc>)
 80118ac:	4013      	ands	r3, r2
 80118ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80118b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	021b      	lsls	r3, r3, #8
 80118be:	68fa      	ldr	r2, [r7, #12]
 80118c0:	4313      	orrs	r3, r2
 80118c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	f023 0320 	bic.w	r3, r3, #32
 80118ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	689b      	ldr	r3, [r3, #8]
 80118d0:	011b      	lsls	r3, r3, #4
 80118d2:	697a      	ldr	r2, [r7, #20]
 80118d4:	4313      	orrs	r3, r2
 80118d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	4a29      	ldr	r2, [pc, #164]	; (8011980 <TIM_OC2_SetConfig+0x100>)
 80118dc:	4293      	cmp	r3, r2
 80118de:	d003      	beq.n	80118e8 <TIM_OC2_SetConfig+0x68>
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	4a28      	ldr	r2, [pc, #160]	; (8011984 <TIM_OC2_SetConfig+0x104>)
 80118e4:	4293      	cmp	r3, r2
 80118e6:	d10d      	bne.n	8011904 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80118ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	68db      	ldr	r3, [r3, #12]
 80118f4:	011b      	lsls	r3, r3, #4
 80118f6:	697a      	ldr	r2, [r7, #20]
 80118f8:	4313      	orrs	r3, r2
 80118fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80118fc:	697b      	ldr	r3, [r7, #20]
 80118fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011902:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	4a1e      	ldr	r2, [pc, #120]	; (8011980 <TIM_OC2_SetConfig+0x100>)
 8011908:	4293      	cmp	r3, r2
 801190a:	d00f      	beq.n	801192c <TIM_OC2_SetConfig+0xac>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	4a1d      	ldr	r2, [pc, #116]	; (8011984 <TIM_OC2_SetConfig+0x104>)
 8011910:	4293      	cmp	r3, r2
 8011912:	d00b      	beq.n	801192c <TIM_OC2_SetConfig+0xac>
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	4a1c      	ldr	r2, [pc, #112]	; (8011988 <TIM_OC2_SetConfig+0x108>)
 8011918:	4293      	cmp	r3, r2
 801191a:	d007      	beq.n	801192c <TIM_OC2_SetConfig+0xac>
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	4a1b      	ldr	r2, [pc, #108]	; (801198c <TIM_OC2_SetConfig+0x10c>)
 8011920:	4293      	cmp	r3, r2
 8011922:	d003      	beq.n	801192c <TIM_OC2_SetConfig+0xac>
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	4a1a      	ldr	r2, [pc, #104]	; (8011990 <TIM_OC2_SetConfig+0x110>)
 8011928:	4293      	cmp	r3, r2
 801192a:	d113      	bne.n	8011954 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801192c:	693b      	ldr	r3, [r7, #16]
 801192e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801193a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	695b      	ldr	r3, [r3, #20]
 8011940:	009b      	lsls	r3, r3, #2
 8011942:	693a      	ldr	r2, [r7, #16]
 8011944:	4313      	orrs	r3, r2
 8011946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	699b      	ldr	r3, [r3, #24]
 801194c:	009b      	lsls	r3, r3, #2
 801194e:	693a      	ldr	r2, [r7, #16]
 8011950:	4313      	orrs	r3, r2
 8011952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	693a      	ldr	r2, [r7, #16]
 8011958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	68fa      	ldr	r2, [r7, #12]
 801195e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	685a      	ldr	r2, [r3, #4]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	697a      	ldr	r2, [r7, #20]
 801196c:	621a      	str	r2, [r3, #32]
}
 801196e:	bf00      	nop
 8011970:	371c      	adds	r7, #28
 8011972:	46bd      	mov	sp, r7
 8011974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011978:	4770      	bx	lr
 801197a:	bf00      	nop
 801197c:	feff8fff 	.word	0xfeff8fff
 8011980:	40010000 	.word	0x40010000
 8011984:	40010400 	.word	0x40010400
 8011988:	40014000 	.word	0x40014000
 801198c:	40014400 	.word	0x40014400
 8011990:	40014800 	.word	0x40014800

08011994 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011994:	b480      	push	{r7}
 8011996:	b087      	sub	sp, #28
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6a1b      	ldr	r3, [r3, #32]
 80119a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6a1b      	ldr	r3, [r3, #32]
 80119ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	685b      	ldr	r3, [r3, #4]
 80119b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	69db      	ldr	r3, [r3, #28]
 80119ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80119bc:	68fa      	ldr	r2, [r7, #12]
 80119be:	4b33      	ldr	r3, [pc, #204]	; (8011a8c <TIM_OC3_SetConfig+0xf8>)
 80119c0:	4013      	ands	r3, r2
 80119c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	f023 0303 	bic.w	r3, r3, #3
 80119ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	68fa      	ldr	r2, [r7, #12]
 80119d2:	4313      	orrs	r3, r2
 80119d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80119d6:	697b      	ldr	r3, [r7, #20]
 80119d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80119dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	689b      	ldr	r3, [r3, #8]
 80119e2:	021b      	lsls	r3, r3, #8
 80119e4:	697a      	ldr	r2, [r7, #20]
 80119e6:	4313      	orrs	r3, r2
 80119e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	4a28      	ldr	r2, [pc, #160]	; (8011a90 <TIM_OC3_SetConfig+0xfc>)
 80119ee:	4293      	cmp	r3, r2
 80119f0:	d003      	beq.n	80119fa <TIM_OC3_SetConfig+0x66>
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	4a27      	ldr	r2, [pc, #156]	; (8011a94 <TIM_OC3_SetConfig+0x100>)
 80119f6:	4293      	cmp	r3, r2
 80119f8:	d10d      	bne.n	8011a16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	68db      	ldr	r3, [r3, #12]
 8011a06:	021b      	lsls	r3, r3, #8
 8011a08:	697a      	ldr	r2, [r7, #20]
 8011a0a:	4313      	orrs	r3, r2
 8011a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011a0e:	697b      	ldr	r3, [r7, #20]
 8011a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	4a1d      	ldr	r2, [pc, #116]	; (8011a90 <TIM_OC3_SetConfig+0xfc>)
 8011a1a:	4293      	cmp	r3, r2
 8011a1c:	d00f      	beq.n	8011a3e <TIM_OC3_SetConfig+0xaa>
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	4a1c      	ldr	r2, [pc, #112]	; (8011a94 <TIM_OC3_SetConfig+0x100>)
 8011a22:	4293      	cmp	r3, r2
 8011a24:	d00b      	beq.n	8011a3e <TIM_OC3_SetConfig+0xaa>
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	4a1b      	ldr	r2, [pc, #108]	; (8011a98 <TIM_OC3_SetConfig+0x104>)
 8011a2a:	4293      	cmp	r3, r2
 8011a2c:	d007      	beq.n	8011a3e <TIM_OC3_SetConfig+0xaa>
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	4a1a      	ldr	r2, [pc, #104]	; (8011a9c <TIM_OC3_SetConfig+0x108>)
 8011a32:	4293      	cmp	r3, r2
 8011a34:	d003      	beq.n	8011a3e <TIM_OC3_SetConfig+0xaa>
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	4a19      	ldr	r2, [pc, #100]	; (8011aa0 <TIM_OC3_SetConfig+0x10c>)
 8011a3a:	4293      	cmp	r3, r2
 8011a3c:	d113      	bne.n	8011a66 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011a3e:	693b      	ldr	r3, [r7, #16]
 8011a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011a46:	693b      	ldr	r3, [r7, #16]
 8011a48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	695b      	ldr	r3, [r3, #20]
 8011a52:	011b      	lsls	r3, r3, #4
 8011a54:	693a      	ldr	r2, [r7, #16]
 8011a56:	4313      	orrs	r3, r2
 8011a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	699b      	ldr	r3, [r3, #24]
 8011a5e:	011b      	lsls	r3, r3, #4
 8011a60:	693a      	ldr	r2, [r7, #16]
 8011a62:	4313      	orrs	r3, r2
 8011a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	693a      	ldr	r2, [r7, #16]
 8011a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	68fa      	ldr	r2, [r7, #12]
 8011a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011a72:	683b      	ldr	r3, [r7, #0]
 8011a74:	685a      	ldr	r2, [r3, #4]
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	697a      	ldr	r2, [r7, #20]
 8011a7e:	621a      	str	r2, [r3, #32]
}
 8011a80:	bf00      	nop
 8011a82:	371c      	adds	r7, #28
 8011a84:	46bd      	mov	sp, r7
 8011a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8a:	4770      	bx	lr
 8011a8c:	fffeff8f 	.word	0xfffeff8f
 8011a90:	40010000 	.word	0x40010000
 8011a94:	40010400 	.word	0x40010400
 8011a98:	40014000 	.word	0x40014000
 8011a9c:	40014400 	.word	0x40014400
 8011aa0:	40014800 	.word	0x40014800

08011aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	b087      	sub	sp, #28
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6a1b      	ldr	r3, [r3, #32]
 8011ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6a1b      	ldr	r3, [r3, #32]
 8011abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	685b      	ldr	r3, [r3, #4]
 8011ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	69db      	ldr	r3, [r3, #28]
 8011aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011acc:	68fa      	ldr	r2, [r7, #12]
 8011ace:	4b24      	ldr	r3, [pc, #144]	; (8011b60 <TIM_OC4_SetConfig+0xbc>)
 8011ad0:	4013      	ands	r3, r2
 8011ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	021b      	lsls	r3, r3, #8
 8011ae2:	68fa      	ldr	r2, [r7, #12]
 8011ae4:	4313      	orrs	r3, r2
 8011ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	689b      	ldr	r3, [r3, #8]
 8011af4:	031b      	lsls	r3, r3, #12
 8011af6:	693a      	ldr	r2, [r7, #16]
 8011af8:	4313      	orrs	r3, r2
 8011afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	4a19      	ldr	r2, [pc, #100]	; (8011b64 <TIM_OC4_SetConfig+0xc0>)
 8011b00:	4293      	cmp	r3, r2
 8011b02:	d00f      	beq.n	8011b24 <TIM_OC4_SetConfig+0x80>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	4a18      	ldr	r2, [pc, #96]	; (8011b68 <TIM_OC4_SetConfig+0xc4>)
 8011b08:	4293      	cmp	r3, r2
 8011b0a:	d00b      	beq.n	8011b24 <TIM_OC4_SetConfig+0x80>
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	4a17      	ldr	r2, [pc, #92]	; (8011b6c <TIM_OC4_SetConfig+0xc8>)
 8011b10:	4293      	cmp	r3, r2
 8011b12:	d007      	beq.n	8011b24 <TIM_OC4_SetConfig+0x80>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	4a16      	ldr	r2, [pc, #88]	; (8011b70 <TIM_OC4_SetConfig+0xcc>)
 8011b18:	4293      	cmp	r3, r2
 8011b1a:	d003      	beq.n	8011b24 <TIM_OC4_SetConfig+0x80>
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	4a15      	ldr	r2, [pc, #84]	; (8011b74 <TIM_OC4_SetConfig+0xd0>)
 8011b20:	4293      	cmp	r3, r2
 8011b22:	d109      	bne.n	8011b38 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011b24:	697b      	ldr	r3, [r7, #20]
 8011b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011b2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	695b      	ldr	r3, [r3, #20]
 8011b30:	019b      	lsls	r3, r3, #6
 8011b32:	697a      	ldr	r2, [r7, #20]
 8011b34:	4313      	orrs	r3, r2
 8011b36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	697a      	ldr	r2, [r7, #20]
 8011b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	68fa      	ldr	r2, [r7, #12]
 8011b42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	685a      	ldr	r2, [r3, #4]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	693a      	ldr	r2, [r7, #16]
 8011b50:	621a      	str	r2, [r3, #32]
}
 8011b52:	bf00      	nop
 8011b54:	371c      	adds	r7, #28
 8011b56:	46bd      	mov	sp, r7
 8011b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5c:	4770      	bx	lr
 8011b5e:	bf00      	nop
 8011b60:	feff8fff 	.word	0xfeff8fff
 8011b64:	40010000 	.word	0x40010000
 8011b68:	40010400 	.word	0x40010400
 8011b6c:	40014000 	.word	0x40014000
 8011b70:	40014400 	.word	0x40014400
 8011b74:	40014800 	.word	0x40014800

08011b78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b087      	sub	sp, #28
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6a1b      	ldr	r3, [r3, #32]
 8011b86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6a1b      	ldr	r3, [r3, #32]
 8011b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	685b      	ldr	r3, [r3, #4]
 8011b98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011ba0:	68fa      	ldr	r2, [r7, #12]
 8011ba2:	4b21      	ldr	r3, [pc, #132]	; (8011c28 <TIM_OC5_SetConfig+0xb0>)
 8011ba4:	4013      	ands	r3, r2
 8011ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	68fa      	ldr	r2, [r7, #12]
 8011bae:	4313      	orrs	r3, r2
 8011bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011bb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011bba:	683b      	ldr	r3, [r7, #0]
 8011bbc:	689b      	ldr	r3, [r3, #8]
 8011bbe:	041b      	lsls	r3, r3, #16
 8011bc0:	693a      	ldr	r2, [r7, #16]
 8011bc2:	4313      	orrs	r3, r2
 8011bc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	4a18      	ldr	r2, [pc, #96]	; (8011c2c <TIM_OC5_SetConfig+0xb4>)
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d00f      	beq.n	8011bee <TIM_OC5_SetConfig+0x76>
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	4a17      	ldr	r2, [pc, #92]	; (8011c30 <TIM_OC5_SetConfig+0xb8>)
 8011bd2:	4293      	cmp	r3, r2
 8011bd4:	d00b      	beq.n	8011bee <TIM_OC5_SetConfig+0x76>
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	4a16      	ldr	r2, [pc, #88]	; (8011c34 <TIM_OC5_SetConfig+0xbc>)
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	d007      	beq.n	8011bee <TIM_OC5_SetConfig+0x76>
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	4a15      	ldr	r2, [pc, #84]	; (8011c38 <TIM_OC5_SetConfig+0xc0>)
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d003      	beq.n	8011bee <TIM_OC5_SetConfig+0x76>
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	4a14      	ldr	r2, [pc, #80]	; (8011c3c <TIM_OC5_SetConfig+0xc4>)
 8011bea:	4293      	cmp	r3, r2
 8011bec:	d109      	bne.n	8011c02 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011bee:	697b      	ldr	r3, [r7, #20]
 8011bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	695b      	ldr	r3, [r3, #20]
 8011bfa:	021b      	lsls	r3, r3, #8
 8011bfc:	697a      	ldr	r2, [r7, #20]
 8011bfe:	4313      	orrs	r3, r2
 8011c00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	697a      	ldr	r2, [r7, #20]
 8011c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	68fa      	ldr	r2, [r7, #12]
 8011c0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	685a      	ldr	r2, [r3, #4]
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	693a      	ldr	r2, [r7, #16]
 8011c1a:	621a      	str	r2, [r3, #32]
}
 8011c1c:	bf00      	nop
 8011c1e:	371c      	adds	r7, #28
 8011c20:	46bd      	mov	sp, r7
 8011c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c26:	4770      	bx	lr
 8011c28:	fffeff8f 	.word	0xfffeff8f
 8011c2c:	40010000 	.word	0x40010000
 8011c30:	40010400 	.word	0x40010400
 8011c34:	40014000 	.word	0x40014000
 8011c38:	40014400 	.word	0x40014400
 8011c3c:	40014800 	.word	0x40014800

08011c40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011c40:	b480      	push	{r7}
 8011c42:	b087      	sub	sp, #28
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
 8011c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	6a1b      	ldr	r3, [r3, #32]
 8011c4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6a1b      	ldr	r3, [r3, #32]
 8011c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011c68:	68fa      	ldr	r2, [r7, #12]
 8011c6a:	4b22      	ldr	r3, [pc, #136]	; (8011cf4 <TIM_OC6_SetConfig+0xb4>)
 8011c6c:	4013      	ands	r3, r2
 8011c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	021b      	lsls	r3, r3, #8
 8011c76:	68fa      	ldr	r2, [r7, #12]
 8011c78:	4313      	orrs	r3, r2
 8011c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011c7c:	693b      	ldr	r3, [r7, #16]
 8011c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	689b      	ldr	r3, [r3, #8]
 8011c88:	051b      	lsls	r3, r3, #20
 8011c8a:	693a      	ldr	r2, [r7, #16]
 8011c8c:	4313      	orrs	r3, r2
 8011c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	4a19      	ldr	r2, [pc, #100]	; (8011cf8 <TIM_OC6_SetConfig+0xb8>)
 8011c94:	4293      	cmp	r3, r2
 8011c96:	d00f      	beq.n	8011cb8 <TIM_OC6_SetConfig+0x78>
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	4a18      	ldr	r2, [pc, #96]	; (8011cfc <TIM_OC6_SetConfig+0xbc>)
 8011c9c:	4293      	cmp	r3, r2
 8011c9e:	d00b      	beq.n	8011cb8 <TIM_OC6_SetConfig+0x78>
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	4a17      	ldr	r2, [pc, #92]	; (8011d00 <TIM_OC6_SetConfig+0xc0>)
 8011ca4:	4293      	cmp	r3, r2
 8011ca6:	d007      	beq.n	8011cb8 <TIM_OC6_SetConfig+0x78>
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	4a16      	ldr	r2, [pc, #88]	; (8011d04 <TIM_OC6_SetConfig+0xc4>)
 8011cac:	4293      	cmp	r3, r2
 8011cae:	d003      	beq.n	8011cb8 <TIM_OC6_SetConfig+0x78>
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	4a15      	ldr	r2, [pc, #84]	; (8011d08 <TIM_OC6_SetConfig+0xc8>)
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	d109      	bne.n	8011ccc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	695b      	ldr	r3, [r3, #20]
 8011cc4:	029b      	lsls	r3, r3, #10
 8011cc6:	697a      	ldr	r2, [r7, #20]
 8011cc8:	4313      	orrs	r3, r2
 8011cca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	697a      	ldr	r2, [r7, #20]
 8011cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	68fa      	ldr	r2, [r7, #12]
 8011cd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	685a      	ldr	r2, [r3, #4]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	693a      	ldr	r2, [r7, #16]
 8011ce4:	621a      	str	r2, [r3, #32]
}
 8011ce6:	bf00      	nop
 8011ce8:	371c      	adds	r7, #28
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	feff8fff 	.word	0xfeff8fff
 8011cf8:	40010000 	.word	0x40010000
 8011cfc:	40010400 	.word	0x40010400
 8011d00:	40014000 	.word	0x40014000
 8011d04:	40014400 	.word	0x40014400
 8011d08:	40014800 	.word	0x40014800

08011d0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011d0c:	b480      	push	{r7}
 8011d0e:	b087      	sub	sp, #28
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	60f8      	str	r0, [r7, #12]
 8011d14:	60b9      	str	r1, [r7, #8]
 8011d16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	f003 031f 	and.w	r3, r3, #31
 8011d1e:	2201      	movs	r2, #1
 8011d20:	fa02 f303 	lsl.w	r3, r2, r3
 8011d24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	6a1a      	ldr	r2, [r3, #32]
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	43db      	mvns	r3, r3
 8011d2e:	401a      	ands	r2, r3
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	6a1a      	ldr	r2, [r3, #32]
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	f003 031f 	and.w	r3, r3, #31
 8011d3e:	6879      	ldr	r1, [r7, #4]
 8011d40:	fa01 f303 	lsl.w	r3, r1, r3
 8011d44:	431a      	orrs	r2, r3
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	621a      	str	r2, [r3, #32]
}
 8011d4a:	bf00      	nop
 8011d4c:	371c      	adds	r7, #28
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d54:	4770      	bx	lr
	...

08011d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b085      	sub	sp, #20
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011d68:	2b01      	cmp	r3, #1
 8011d6a:	d101      	bne.n	8011d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011d6c:	2302      	movs	r3, #2
 8011d6e:	e077      	b.n	8011e60 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2201      	movs	r2, #1
 8011d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2202      	movs	r2, #2
 8011d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	689b      	ldr	r3, [r3, #8]
 8011d8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	4a35      	ldr	r2, [pc, #212]	; (8011e6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011d96:	4293      	cmp	r3, r2
 8011d98:	d004      	beq.n	8011da4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	4a34      	ldr	r2, [pc, #208]	; (8011e70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011da0:	4293      	cmp	r3, r2
 8011da2:	d108      	bne.n	8011db6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011daa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	685b      	ldr	r3, [r3, #4]
 8011db0:	68fa      	ldr	r2, [r7, #12]
 8011db2:	4313      	orrs	r3, r2
 8011db4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011dbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	68fa      	ldr	r2, [r7, #12]
 8011dc4:	4313      	orrs	r3, r2
 8011dc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	68fa      	ldr	r2, [r7, #12]
 8011dce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	4a25      	ldr	r2, [pc, #148]	; (8011e6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	d02c      	beq.n	8011e34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011de2:	d027      	beq.n	8011e34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	4a22      	ldr	r2, [pc, #136]	; (8011e74 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8011dea:	4293      	cmp	r3, r2
 8011dec:	d022      	beq.n	8011e34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	4a21      	ldr	r2, [pc, #132]	; (8011e78 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011df4:	4293      	cmp	r3, r2
 8011df6:	d01d      	beq.n	8011e34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	4a1f      	ldr	r2, [pc, #124]	; (8011e7c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011dfe:	4293      	cmp	r3, r2
 8011e00:	d018      	beq.n	8011e34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	4a1a      	ldr	r2, [pc, #104]	; (8011e70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011e08:	4293      	cmp	r3, r2
 8011e0a:	d013      	beq.n	8011e34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	4a1b      	ldr	r2, [pc, #108]	; (8011e80 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011e12:	4293      	cmp	r3, r2
 8011e14:	d00e      	beq.n	8011e34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	4a1a      	ldr	r2, [pc, #104]	; (8011e84 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011e1c:	4293      	cmp	r3, r2
 8011e1e:	d009      	beq.n	8011e34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	4a18      	ldr	r2, [pc, #96]	; (8011e88 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8011e26:	4293      	cmp	r3, r2
 8011e28:	d004      	beq.n	8011e34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	4a17      	ldr	r2, [pc, #92]	; (8011e8c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011e30:	4293      	cmp	r3, r2
 8011e32:	d10c      	bne.n	8011e4e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	689b      	ldr	r3, [r3, #8]
 8011e40:	68ba      	ldr	r2, [r7, #8]
 8011e42:	4313      	orrs	r3, r2
 8011e44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	68ba      	ldr	r2, [r7, #8]
 8011e4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2201      	movs	r2, #1
 8011e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011e5e:	2300      	movs	r3, #0
}
 8011e60:	4618      	mov	r0, r3
 8011e62:	3714      	adds	r7, #20
 8011e64:	46bd      	mov	sp, r7
 8011e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6a:	4770      	bx	lr
 8011e6c:	40010000 	.word	0x40010000
 8011e70:	40010400 	.word	0x40010400
 8011e74:	40000400 	.word	0x40000400
 8011e78:	40000800 	.word	0x40000800
 8011e7c:	40000c00 	.word	0x40000c00
 8011e80:	40001800 	.word	0x40001800
 8011e84:	40014000 	.word	0x40014000
 8011e88:	4000e000 	.word	0x4000e000
 8011e8c:	4000e400 	.word	0x4000e400

08011e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011e90:	b480      	push	{r7}
 8011e92:	b083      	sub	sp, #12
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011e98:	bf00      	nop
 8011e9a:	370c      	adds	r7, #12
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr

08011ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011ea4:	b480      	push	{r7}
 8011ea6:	b083      	sub	sp, #12
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011eac:	bf00      	nop
 8011eae:	370c      	adds	r7, #12
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb6:	4770      	bx	lr

08011eb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011eb8:	b480      	push	{r7}
 8011eba:	b083      	sub	sp, #12
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011ec0:	bf00      	nop
 8011ec2:	370c      	adds	r7, #12
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eca:	4770      	bx	lr

08011ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b082      	sub	sp, #8
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d101      	bne.n	8011ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011eda:	2301      	movs	r3, #1
 8011edc:	e042      	b.n	8011f64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d106      	bne.n	8011ef6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2200      	movs	r2, #0
 8011eec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f7f1 fe3b 	bl	8003b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	2224      	movs	r2, #36	; 0x24
 8011efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	681a      	ldr	r2, [r3, #0]
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	f022 0201 	bic.w	r2, r2, #1
 8011f0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f000 f82c 	bl	8011f6c <UART_SetConfig>
 8011f14:	4603      	mov	r3, r0
 8011f16:	2b01      	cmp	r3, #1
 8011f18:	d101      	bne.n	8011f1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8011f1a:	2301      	movs	r3, #1
 8011f1c:	e022      	b.n	8011f64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d002      	beq.n	8011f2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f000 fe8c 	bl	8012c44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	685a      	ldr	r2, [r3, #4]
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011f3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	689a      	ldr	r2, [r3, #8]
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011f4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	681a      	ldr	r2, [r3, #0]
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	f042 0201 	orr.w	r2, r2, #1
 8011f5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f000 ff13 	bl	8012d88 <UART_CheckIdleState>
 8011f62:	4603      	mov	r3, r0
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3708      	adds	r7, #8
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}

08011f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011f70:	b092      	sub	sp, #72	; 0x48
 8011f72:	af00      	add	r7, sp, #0
 8011f74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011f76:	2300      	movs	r3, #0
 8011f78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011f7c:	697b      	ldr	r3, [r7, #20]
 8011f7e:	689a      	ldr	r2, [r3, #8]
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	691b      	ldr	r3, [r3, #16]
 8011f84:	431a      	orrs	r2, r3
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	695b      	ldr	r3, [r3, #20]
 8011f8a:	431a      	orrs	r2, r3
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	69db      	ldr	r3, [r3, #28]
 8011f90:	4313      	orrs	r3, r2
 8011f92:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	681a      	ldr	r2, [r3, #0]
 8011f9a:	4bbe      	ldr	r3, [pc, #760]	; (8012294 <UART_SetConfig+0x328>)
 8011f9c:	4013      	ands	r3, r2
 8011f9e:	697a      	ldr	r2, [r7, #20]
 8011fa0:	6812      	ldr	r2, [r2, #0]
 8011fa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011fa4:	430b      	orrs	r3, r1
 8011fa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011fb2:	697b      	ldr	r3, [r7, #20]
 8011fb4:	68da      	ldr	r2, [r3, #12]
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	430a      	orrs	r2, r1
 8011fbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011fbe:	697b      	ldr	r3, [r7, #20]
 8011fc0:	699b      	ldr	r3, [r3, #24]
 8011fc2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	4ab3      	ldr	r2, [pc, #716]	; (8012298 <UART_SetConfig+0x32c>)
 8011fca:	4293      	cmp	r3, r2
 8011fcc:	d004      	beq.n	8011fd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011fce:	697b      	ldr	r3, [r7, #20]
 8011fd0:	6a1b      	ldr	r3, [r3, #32]
 8011fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011fd4:	4313      	orrs	r3, r2
 8011fd6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	689a      	ldr	r2, [r3, #8]
 8011fde:	4baf      	ldr	r3, [pc, #700]	; (801229c <UART_SetConfig+0x330>)
 8011fe0:	4013      	ands	r3, r2
 8011fe2:	697a      	ldr	r2, [r7, #20]
 8011fe4:	6812      	ldr	r2, [r2, #0]
 8011fe6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011fe8:	430b      	orrs	r3, r1
 8011fea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011fec:	697b      	ldr	r3, [r7, #20]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ff2:	f023 010f 	bic.w	r1, r3, #15
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	430a      	orrs	r2, r1
 8012000:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	4aa6      	ldr	r2, [pc, #664]	; (80122a0 <UART_SetConfig+0x334>)
 8012008:	4293      	cmp	r3, r2
 801200a:	d177      	bne.n	80120fc <UART_SetConfig+0x190>
 801200c:	4ba5      	ldr	r3, [pc, #660]	; (80122a4 <UART_SetConfig+0x338>)
 801200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012010:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012014:	2b28      	cmp	r3, #40	; 0x28
 8012016:	d86d      	bhi.n	80120f4 <UART_SetConfig+0x188>
 8012018:	a201      	add	r2, pc, #4	; (adr r2, 8012020 <UART_SetConfig+0xb4>)
 801201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801201e:	bf00      	nop
 8012020:	080120c5 	.word	0x080120c5
 8012024:	080120f5 	.word	0x080120f5
 8012028:	080120f5 	.word	0x080120f5
 801202c:	080120f5 	.word	0x080120f5
 8012030:	080120f5 	.word	0x080120f5
 8012034:	080120f5 	.word	0x080120f5
 8012038:	080120f5 	.word	0x080120f5
 801203c:	080120f5 	.word	0x080120f5
 8012040:	080120cd 	.word	0x080120cd
 8012044:	080120f5 	.word	0x080120f5
 8012048:	080120f5 	.word	0x080120f5
 801204c:	080120f5 	.word	0x080120f5
 8012050:	080120f5 	.word	0x080120f5
 8012054:	080120f5 	.word	0x080120f5
 8012058:	080120f5 	.word	0x080120f5
 801205c:	080120f5 	.word	0x080120f5
 8012060:	080120d5 	.word	0x080120d5
 8012064:	080120f5 	.word	0x080120f5
 8012068:	080120f5 	.word	0x080120f5
 801206c:	080120f5 	.word	0x080120f5
 8012070:	080120f5 	.word	0x080120f5
 8012074:	080120f5 	.word	0x080120f5
 8012078:	080120f5 	.word	0x080120f5
 801207c:	080120f5 	.word	0x080120f5
 8012080:	080120dd 	.word	0x080120dd
 8012084:	080120f5 	.word	0x080120f5
 8012088:	080120f5 	.word	0x080120f5
 801208c:	080120f5 	.word	0x080120f5
 8012090:	080120f5 	.word	0x080120f5
 8012094:	080120f5 	.word	0x080120f5
 8012098:	080120f5 	.word	0x080120f5
 801209c:	080120f5 	.word	0x080120f5
 80120a0:	080120e5 	.word	0x080120e5
 80120a4:	080120f5 	.word	0x080120f5
 80120a8:	080120f5 	.word	0x080120f5
 80120ac:	080120f5 	.word	0x080120f5
 80120b0:	080120f5 	.word	0x080120f5
 80120b4:	080120f5 	.word	0x080120f5
 80120b8:	080120f5 	.word	0x080120f5
 80120bc:	080120f5 	.word	0x080120f5
 80120c0:	080120ed 	.word	0x080120ed
 80120c4:	2301      	movs	r3, #1
 80120c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120ca:	e326      	b.n	801271a <UART_SetConfig+0x7ae>
 80120cc:	2304      	movs	r3, #4
 80120ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120d2:	e322      	b.n	801271a <UART_SetConfig+0x7ae>
 80120d4:	2308      	movs	r3, #8
 80120d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120da:	e31e      	b.n	801271a <UART_SetConfig+0x7ae>
 80120dc:	2310      	movs	r3, #16
 80120de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120e2:	e31a      	b.n	801271a <UART_SetConfig+0x7ae>
 80120e4:	2320      	movs	r3, #32
 80120e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120ea:	e316      	b.n	801271a <UART_SetConfig+0x7ae>
 80120ec:	2340      	movs	r3, #64	; 0x40
 80120ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120f2:	e312      	b.n	801271a <UART_SetConfig+0x7ae>
 80120f4:	2380      	movs	r3, #128	; 0x80
 80120f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120fa:	e30e      	b.n	801271a <UART_SetConfig+0x7ae>
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	4a69      	ldr	r2, [pc, #420]	; (80122a8 <UART_SetConfig+0x33c>)
 8012102:	4293      	cmp	r3, r2
 8012104:	d130      	bne.n	8012168 <UART_SetConfig+0x1fc>
 8012106:	4b67      	ldr	r3, [pc, #412]	; (80122a4 <UART_SetConfig+0x338>)
 8012108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801210a:	f003 0307 	and.w	r3, r3, #7
 801210e:	2b05      	cmp	r3, #5
 8012110:	d826      	bhi.n	8012160 <UART_SetConfig+0x1f4>
 8012112:	a201      	add	r2, pc, #4	; (adr r2, 8012118 <UART_SetConfig+0x1ac>)
 8012114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012118:	08012131 	.word	0x08012131
 801211c:	08012139 	.word	0x08012139
 8012120:	08012141 	.word	0x08012141
 8012124:	08012149 	.word	0x08012149
 8012128:	08012151 	.word	0x08012151
 801212c:	08012159 	.word	0x08012159
 8012130:	2300      	movs	r3, #0
 8012132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012136:	e2f0      	b.n	801271a <UART_SetConfig+0x7ae>
 8012138:	2304      	movs	r3, #4
 801213a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801213e:	e2ec      	b.n	801271a <UART_SetConfig+0x7ae>
 8012140:	2308      	movs	r3, #8
 8012142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012146:	e2e8      	b.n	801271a <UART_SetConfig+0x7ae>
 8012148:	2310      	movs	r3, #16
 801214a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801214e:	e2e4      	b.n	801271a <UART_SetConfig+0x7ae>
 8012150:	2320      	movs	r3, #32
 8012152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012156:	e2e0      	b.n	801271a <UART_SetConfig+0x7ae>
 8012158:	2340      	movs	r3, #64	; 0x40
 801215a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801215e:	e2dc      	b.n	801271a <UART_SetConfig+0x7ae>
 8012160:	2380      	movs	r3, #128	; 0x80
 8012162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012166:	e2d8      	b.n	801271a <UART_SetConfig+0x7ae>
 8012168:	697b      	ldr	r3, [r7, #20]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	4a4f      	ldr	r2, [pc, #316]	; (80122ac <UART_SetConfig+0x340>)
 801216e:	4293      	cmp	r3, r2
 8012170:	d130      	bne.n	80121d4 <UART_SetConfig+0x268>
 8012172:	4b4c      	ldr	r3, [pc, #304]	; (80122a4 <UART_SetConfig+0x338>)
 8012174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012176:	f003 0307 	and.w	r3, r3, #7
 801217a:	2b05      	cmp	r3, #5
 801217c:	d826      	bhi.n	80121cc <UART_SetConfig+0x260>
 801217e:	a201      	add	r2, pc, #4	; (adr r2, 8012184 <UART_SetConfig+0x218>)
 8012180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012184:	0801219d 	.word	0x0801219d
 8012188:	080121a5 	.word	0x080121a5
 801218c:	080121ad 	.word	0x080121ad
 8012190:	080121b5 	.word	0x080121b5
 8012194:	080121bd 	.word	0x080121bd
 8012198:	080121c5 	.word	0x080121c5
 801219c:	2300      	movs	r3, #0
 801219e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121a2:	e2ba      	b.n	801271a <UART_SetConfig+0x7ae>
 80121a4:	2304      	movs	r3, #4
 80121a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121aa:	e2b6      	b.n	801271a <UART_SetConfig+0x7ae>
 80121ac:	2308      	movs	r3, #8
 80121ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121b2:	e2b2      	b.n	801271a <UART_SetConfig+0x7ae>
 80121b4:	2310      	movs	r3, #16
 80121b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121ba:	e2ae      	b.n	801271a <UART_SetConfig+0x7ae>
 80121bc:	2320      	movs	r3, #32
 80121be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121c2:	e2aa      	b.n	801271a <UART_SetConfig+0x7ae>
 80121c4:	2340      	movs	r3, #64	; 0x40
 80121c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121ca:	e2a6      	b.n	801271a <UART_SetConfig+0x7ae>
 80121cc:	2380      	movs	r3, #128	; 0x80
 80121ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121d2:	e2a2      	b.n	801271a <UART_SetConfig+0x7ae>
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	4a35      	ldr	r2, [pc, #212]	; (80122b0 <UART_SetConfig+0x344>)
 80121da:	4293      	cmp	r3, r2
 80121dc:	d130      	bne.n	8012240 <UART_SetConfig+0x2d4>
 80121de:	4b31      	ldr	r3, [pc, #196]	; (80122a4 <UART_SetConfig+0x338>)
 80121e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121e2:	f003 0307 	and.w	r3, r3, #7
 80121e6:	2b05      	cmp	r3, #5
 80121e8:	d826      	bhi.n	8012238 <UART_SetConfig+0x2cc>
 80121ea:	a201      	add	r2, pc, #4	; (adr r2, 80121f0 <UART_SetConfig+0x284>)
 80121ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121f0:	08012209 	.word	0x08012209
 80121f4:	08012211 	.word	0x08012211
 80121f8:	08012219 	.word	0x08012219
 80121fc:	08012221 	.word	0x08012221
 8012200:	08012229 	.word	0x08012229
 8012204:	08012231 	.word	0x08012231
 8012208:	2300      	movs	r3, #0
 801220a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801220e:	e284      	b.n	801271a <UART_SetConfig+0x7ae>
 8012210:	2304      	movs	r3, #4
 8012212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012216:	e280      	b.n	801271a <UART_SetConfig+0x7ae>
 8012218:	2308      	movs	r3, #8
 801221a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801221e:	e27c      	b.n	801271a <UART_SetConfig+0x7ae>
 8012220:	2310      	movs	r3, #16
 8012222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012226:	e278      	b.n	801271a <UART_SetConfig+0x7ae>
 8012228:	2320      	movs	r3, #32
 801222a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801222e:	e274      	b.n	801271a <UART_SetConfig+0x7ae>
 8012230:	2340      	movs	r3, #64	; 0x40
 8012232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012236:	e270      	b.n	801271a <UART_SetConfig+0x7ae>
 8012238:	2380      	movs	r3, #128	; 0x80
 801223a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801223e:	e26c      	b.n	801271a <UART_SetConfig+0x7ae>
 8012240:	697b      	ldr	r3, [r7, #20]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	4a1b      	ldr	r2, [pc, #108]	; (80122b4 <UART_SetConfig+0x348>)
 8012246:	4293      	cmp	r3, r2
 8012248:	d142      	bne.n	80122d0 <UART_SetConfig+0x364>
 801224a:	4b16      	ldr	r3, [pc, #88]	; (80122a4 <UART_SetConfig+0x338>)
 801224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801224e:	f003 0307 	and.w	r3, r3, #7
 8012252:	2b05      	cmp	r3, #5
 8012254:	d838      	bhi.n	80122c8 <UART_SetConfig+0x35c>
 8012256:	a201      	add	r2, pc, #4	; (adr r2, 801225c <UART_SetConfig+0x2f0>)
 8012258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801225c:	08012275 	.word	0x08012275
 8012260:	0801227d 	.word	0x0801227d
 8012264:	08012285 	.word	0x08012285
 8012268:	0801228d 	.word	0x0801228d
 801226c:	080122b9 	.word	0x080122b9
 8012270:	080122c1 	.word	0x080122c1
 8012274:	2300      	movs	r3, #0
 8012276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801227a:	e24e      	b.n	801271a <UART_SetConfig+0x7ae>
 801227c:	2304      	movs	r3, #4
 801227e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012282:	e24a      	b.n	801271a <UART_SetConfig+0x7ae>
 8012284:	2308      	movs	r3, #8
 8012286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801228a:	e246      	b.n	801271a <UART_SetConfig+0x7ae>
 801228c:	2310      	movs	r3, #16
 801228e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012292:	e242      	b.n	801271a <UART_SetConfig+0x7ae>
 8012294:	cfff69f3 	.word	0xcfff69f3
 8012298:	58000c00 	.word	0x58000c00
 801229c:	11fff4ff 	.word	0x11fff4ff
 80122a0:	40011000 	.word	0x40011000
 80122a4:	58024400 	.word	0x58024400
 80122a8:	40004400 	.word	0x40004400
 80122ac:	40004800 	.word	0x40004800
 80122b0:	40004c00 	.word	0x40004c00
 80122b4:	40005000 	.word	0x40005000
 80122b8:	2320      	movs	r3, #32
 80122ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122be:	e22c      	b.n	801271a <UART_SetConfig+0x7ae>
 80122c0:	2340      	movs	r3, #64	; 0x40
 80122c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122c6:	e228      	b.n	801271a <UART_SetConfig+0x7ae>
 80122c8:	2380      	movs	r3, #128	; 0x80
 80122ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122ce:	e224      	b.n	801271a <UART_SetConfig+0x7ae>
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	4ab1      	ldr	r2, [pc, #708]	; (801259c <UART_SetConfig+0x630>)
 80122d6:	4293      	cmp	r3, r2
 80122d8:	d176      	bne.n	80123c8 <UART_SetConfig+0x45c>
 80122da:	4bb1      	ldr	r3, [pc, #708]	; (80125a0 <UART_SetConfig+0x634>)
 80122dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80122e2:	2b28      	cmp	r3, #40	; 0x28
 80122e4:	d86c      	bhi.n	80123c0 <UART_SetConfig+0x454>
 80122e6:	a201      	add	r2, pc, #4	; (adr r2, 80122ec <UART_SetConfig+0x380>)
 80122e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122ec:	08012391 	.word	0x08012391
 80122f0:	080123c1 	.word	0x080123c1
 80122f4:	080123c1 	.word	0x080123c1
 80122f8:	080123c1 	.word	0x080123c1
 80122fc:	080123c1 	.word	0x080123c1
 8012300:	080123c1 	.word	0x080123c1
 8012304:	080123c1 	.word	0x080123c1
 8012308:	080123c1 	.word	0x080123c1
 801230c:	08012399 	.word	0x08012399
 8012310:	080123c1 	.word	0x080123c1
 8012314:	080123c1 	.word	0x080123c1
 8012318:	080123c1 	.word	0x080123c1
 801231c:	080123c1 	.word	0x080123c1
 8012320:	080123c1 	.word	0x080123c1
 8012324:	080123c1 	.word	0x080123c1
 8012328:	080123c1 	.word	0x080123c1
 801232c:	080123a1 	.word	0x080123a1
 8012330:	080123c1 	.word	0x080123c1
 8012334:	080123c1 	.word	0x080123c1
 8012338:	080123c1 	.word	0x080123c1
 801233c:	080123c1 	.word	0x080123c1
 8012340:	080123c1 	.word	0x080123c1
 8012344:	080123c1 	.word	0x080123c1
 8012348:	080123c1 	.word	0x080123c1
 801234c:	080123a9 	.word	0x080123a9
 8012350:	080123c1 	.word	0x080123c1
 8012354:	080123c1 	.word	0x080123c1
 8012358:	080123c1 	.word	0x080123c1
 801235c:	080123c1 	.word	0x080123c1
 8012360:	080123c1 	.word	0x080123c1
 8012364:	080123c1 	.word	0x080123c1
 8012368:	080123c1 	.word	0x080123c1
 801236c:	080123b1 	.word	0x080123b1
 8012370:	080123c1 	.word	0x080123c1
 8012374:	080123c1 	.word	0x080123c1
 8012378:	080123c1 	.word	0x080123c1
 801237c:	080123c1 	.word	0x080123c1
 8012380:	080123c1 	.word	0x080123c1
 8012384:	080123c1 	.word	0x080123c1
 8012388:	080123c1 	.word	0x080123c1
 801238c:	080123b9 	.word	0x080123b9
 8012390:	2301      	movs	r3, #1
 8012392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012396:	e1c0      	b.n	801271a <UART_SetConfig+0x7ae>
 8012398:	2304      	movs	r3, #4
 801239a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801239e:	e1bc      	b.n	801271a <UART_SetConfig+0x7ae>
 80123a0:	2308      	movs	r3, #8
 80123a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123a6:	e1b8      	b.n	801271a <UART_SetConfig+0x7ae>
 80123a8:	2310      	movs	r3, #16
 80123aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123ae:	e1b4      	b.n	801271a <UART_SetConfig+0x7ae>
 80123b0:	2320      	movs	r3, #32
 80123b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123b6:	e1b0      	b.n	801271a <UART_SetConfig+0x7ae>
 80123b8:	2340      	movs	r3, #64	; 0x40
 80123ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123be:	e1ac      	b.n	801271a <UART_SetConfig+0x7ae>
 80123c0:	2380      	movs	r3, #128	; 0x80
 80123c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123c6:	e1a8      	b.n	801271a <UART_SetConfig+0x7ae>
 80123c8:	697b      	ldr	r3, [r7, #20]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	4a75      	ldr	r2, [pc, #468]	; (80125a4 <UART_SetConfig+0x638>)
 80123ce:	4293      	cmp	r3, r2
 80123d0:	d130      	bne.n	8012434 <UART_SetConfig+0x4c8>
 80123d2:	4b73      	ldr	r3, [pc, #460]	; (80125a0 <UART_SetConfig+0x634>)
 80123d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123d6:	f003 0307 	and.w	r3, r3, #7
 80123da:	2b05      	cmp	r3, #5
 80123dc:	d826      	bhi.n	801242c <UART_SetConfig+0x4c0>
 80123de:	a201      	add	r2, pc, #4	; (adr r2, 80123e4 <UART_SetConfig+0x478>)
 80123e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123e4:	080123fd 	.word	0x080123fd
 80123e8:	08012405 	.word	0x08012405
 80123ec:	0801240d 	.word	0x0801240d
 80123f0:	08012415 	.word	0x08012415
 80123f4:	0801241d 	.word	0x0801241d
 80123f8:	08012425 	.word	0x08012425
 80123fc:	2300      	movs	r3, #0
 80123fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012402:	e18a      	b.n	801271a <UART_SetConfig+0x7ae>
 8012404:	2304      	movs	r3, #4
 8012406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801240a:	e186      	b.n	801271a <UART_SetConfig+0x7ae>
 801240c:	2308      	movs	r3, #8
 801240e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012412:	e182      	b.n	801271a <UART_SetConfig+0x7ae>
 8012414:	2310      	movs	r3, #16
 8012416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801241a:	e17e      	b.n	801271a <UART_SetConfig+0x7ae>
 801241c:	2320      	movs	r3, #32
 801241e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012422:	e17a      	b.n	801271a <UART_SetConfig+0x7ae>
 8012424:	2340      	movs	r3, #64	; 0x40
 8012426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801242a:	e176      	b.n	801271a <UART_SetConfig+0x7ae>
 801242c:	2380      	movs	r3, #128	; 0x80
 801242e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012432:	e172      	b.n	801271a <UART_SetConfig+0x7ae>
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	4a5b      	ldr	r2, [pc, #364]	; (80125a8 <UART_SetConfig+0x63c>)
 801243a:	4293      	cmp	r3, r2
 801243c:	d130      	bne.n	80124a0 <UART_SetConfig+0x534>
 801243e:	4b58      	ldr	r3, [pc, #352]	; (80125a0 <UART_SetConfig+0x634>)
 8012440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012442:	f003 0307 	and.w	r3, r3, #7
 8012446:	2b05      	cmp	r3, #5
 8012448:	d826      	bhi.n	8012498 <UART_SetConfig+0x52c>
 801244a:	a201      	add	r2, pc, #4	; (adr r2, 8012450 <UART_SetConfig+0x4e4>)
 801244c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012450:	08012469 	.word	0x08012469
 8012454:	08012471 	.word	0x08012471
 8012458:	08012479 	.word	0x08012479
 801245c:	08012481 	.word	0x08012481
 8012460:	08012489 	.word	0x08012489
 8012464:	08012491 	.word	0x08012491
 8012468:	2300      	movs	r3, #0
 801246a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801246e:	e154      	b.n	801271a <UART_SetConfig+0x7ae>
 8012470:	2304      	movs	r3, #4
 8012472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012476:	e150      	b.n	801271a <UART_SetConfig+0x7ae>
 8012478:	2308      	movs	r3, #8
 801247a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801247e:	e14c      	b.n	801271a <UART_SetConfig+0x7ae>
 8012480:	2310      	movs	r3, #16
 8012482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012486:	e148      	b.n	801271a <UART_SetConfig+0x7ae>
 8012488:	2320      	movs	r3, #32
 801248a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801248e:	e144      	b.n	801271a <UART_SetConfig+0x7ae>
 8012490:	2340      	movs	r3, #64	; 0x40
 8012492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012496:	e140      	b.n	801271a <UART_SetConfig+0x7ae>
 8012498:	2380      	movs	r3, #128	; 0x80
 801249a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801249e:	e13c      	b.n	801271a <UART_SetConfig+0x7ae>
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	4a41      	ldr	r2, [pc, #260]	; (80125ac <UART_SetConfig+0x640>)
 80124a6:	4293      	cmp	r3, r2
 80124a8:	f040 8082 	bne.w	80125b0 <UART_SetConfig+0x644>
 80124ac:	4b3c      	ldr	r3, [pc, #240]	; (80125a0 <UART_SetConfig+0x634>)
 80124ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80124b4:	2b28      	cmp	r3, #40	; 0x28
 80124b6:	d86d      	bhi.n	8012594 <UART_SetConfig+0x628>
 80124b8:	a201      	add	r2, pc, #4	; (adr r2, 80124c0 <UART_SetConfig+0x554>)
 80124ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124be:	bf00      	nop
 80124c0:	08012565 	.word	0x08012565
 80124c4:	08012595 	.word	0x08012595
 80124c8:	08012595 	.word	0x08012595
 80124cc:	08012595 	.word	0x08012595
 80124d0:	08012595 	.word	0x08012595
 80124d4:	08012595 	.word	0x08012595
 80124d8:	08012595 	.word	0x08012595
 80124dc:	08012595 	.word	0x08012595
 80124e0:	0801256d 	.word	0x0801256d
 80124e4:	08012595 	.word	0x08012595
 80124e8:	08012595 	.word	0x08012595
 80124ec:	08012595 	.word	0x08012595
 80124f0:	08012595 	.word	0x08012595
 80124f4:	08012595 	.word	0x08012595
 80124f8:	08012595 	.word	0x08012595
 80124fc:	08012595 	.word	0x08012595
 8012500:	08012575 	.word	0x08012575
 8012504:	08012595 	.word	0x08012595
 8012508:	08012595 	.word	0x08012595
 801250c:	08012595 	.word	0x08012595
 8012510:	08012595 	.word	0x08012595
 8012514:	08012595 	.word	0x08012595
 8012518:	08012595 	.word	0x08012595
 801251c:	08012595 	.word	0x08012595
 8012520:	0801257d 	.word	0x0801257d
 8012524:	08012595 	.word	0x08012595
 8012528:	08012595 	.word	0x08012595
 801252c:	08012595 	.word	0x08012595
 8012530:	08012595 	.word	0x08012595
 8012534:	08012595 	.word	0x08012595
 8012538:	08012595 	.word	0x08012595
 801253c:	08012595 	.word	0x08012595
 8012540:	08012585 	.word	0x08012585
 8012544:	08012595 	.word	0x08012595
 8012548:	08012595 	.word	0x08012595
 801254c:	08012595 	.word	0x08012595
 8012550:	08012595 	.word	0x08012595
 8012554:	08012595 	.word	0x08012595
 8012558:	08012595 	.word	0x08012595
 801255c:	08012595 	.word	0x08012595
 8012560:	0801258d 	.word	0x0801258d
 8012564:	2301      	movs	r3, #1
 8012566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801256a:	e0d6      	b.n	801271a <UART_SetConfig+0x7ae>
 801256c:	2304      	movs	r3, #4
 801256e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012572:	e0d2      	b.n	801271a <UART_SetConfig+0x7ae>
 8012574:	2308      	movs	r3, #8
 8012576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801257a:	e0ce      	b.n	801271a <UART_SetConfig+0x7ae>
 801257c:	2310      	movs	r3, #16
 801257e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012582:	e0ca      	b.n	801271a <UART_SetConfig+0x7ae>
 8012584:	2320      	movs	r3, #32
 8012586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801258a:	e0c6      	b.n	801271a <UART_SetConfig+0x7ae>
 801258c:	2340      	movs	r3, #64	; 0x40
 801258e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012592:	e0c2      	b.n	801271a <UART_SetConfig+0x7ae>
 8012594:	2380      	movs	r3, #128	; 0x80
 8012596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801259a:	e0be      	b.n	801271a <UART_SetConfig+0x7ae>
 801259c:	40011400 	.word	0x40011400
 80125a0:	58024400 	.word	0x58024400
 80125a4:	40007800 	.word	0x40007800
 80125a8:	40007c00 	.word	0x40007c00
 80125ac:	40011800 	.word	0x40011800
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	4aad      	ldr	r2, [pc, #692]	; (801286c <UART_SetConfig+0x900>)
 80125b6:	4293      	cmp	r3, r2
 80125b8:	d176      	bne.n	80126a8 <UART_SetConfig+0x73c>
 80125ba:	4bad      	ldr	r3, [pc, #692]	; (8012870 <UART_SetConfig+0x904>)
 80125bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80125c2:	2b28      	cmp	r3, #40	; 0x28
 80125c4:	d86c      	bhi.n	80126a0 <UART_SetConfig+0x734>
 80125c6:	a201      	add	r2, pc, #4	; (adr r2, 80125cc <UART_SetConfig+0x660>)
 80125c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125cc:	08012671 	.word	0x08012671
 80125d0:	080126a1 	.word	0x080126a1
 80125d4:	080126a1 	.word	0x080126a1
 80125d8:	080126a1 	.word	0x080126a1
 80125dc:	080126a1 	.word	0x080126a1
 80125e0:	080126a1 	.word	0x080126a1
 80125e4:	080126a1 	.word	0x080126a1
 80125e8:	080126a1 	.word	0x080126a1
 80125ec:	08012679 	.word	0x08012679
 80125f0:	080126a1 	.word	0x080126a1
 80125f4:	080126a1 	.word	0x080126a1
 80125f8:	080126a1 	.word	0x080126a1
 80125fc:	080126a1 	.word	0x080126a1
 8012600:	080126a1 	.word	0x080126a1
 8012604:	080126a1 	.word	0x080126a1
 8012608:	080126a1 	.word	0x080126a1
 801260c:	08012681 	.word	0x08012681
 8012610:	080126a1 	.word	0x080126a1
 8012614:	080126a1 	.word	0x080126a1
 8012618:	080126a1 	.word	0x080126a1
 801261c:	080126a1 	.word	0x080126a1
 8012620:	080126a1 	.word	0x080126a1
 8012624:	080126a1 	.word	0x080126a1
 8012628:	080126a1 	.word	0x080126a1
 801262c:	08012689 	.word	0x08012689
 8012630:	080126a1 	.word	0x080126a1
 8012634:	080126a1 	.word	0x080126a1
 8012638:	080126a1 	.word	0x080126a1
 801263c:	080126a1 	.word	0x080126a1
 8012640:	080126a1 	.word	0x080126a1
 8012644:	080126a1 	.word	0x080126a1
 8012648:	080126a1 	.word	0x080126a1
 801264c:	08012691 	.word	0x08012691
 8012650:	080126a1 	.word	0x080126a1
 8012654:	080126a1 	.word	0x080126a1
 8012658:	080126a1 	.word	0x080126a1
 801265c:	080126a1 	.word	0x080126a1
 8012660:	080126a1 	.word	0x080126a1
 8012664:	080126a1 	.word	0x080126a1
 8012668:	080126a1 	.word	0x080126a1
 801266c:	08012699 	.word	0x08012699
 8012670:	2301      	movs	r3, #1
 8012672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012676:	e050      	b.n	801271a <UART_SetConfig+0x7ae>
 8012678:	2304      	movs	r3, #4
 801267a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801267e:	e04c      	b.n	801271a <UART_SetConfig+0x7ae>
 8012680:	2308      	movs	r3, #8
 8012682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012686:	e048      	b.n	801271a <UART_SetConfig+0x7ae>
 8012688:	2310      	movs	r3, #16
 801268a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801268e:	e044      	b.n	801271a <UART_SetConfig+0x7ae>
 8012690:	2320      	movs	r3, #32
 8012692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012696:	e040      	b.n	801271a <UART_SetConfig+0x7ae>
 8012698:	2340      	movs	r3, #64	; 0x40
 801269a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801269e:	e03c      	b.n	801271a <UART_SetConfig+0x7ae>
 80126a0:	2380      	movs	r3, #128	; 0x80
 80126a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80126a6:	e038      	b.n	801271a <UART_SetConfig+0x7ae>
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	4a71      	ldr	r2, [pc, #452]	; (8012874 <UART_SetConfig+0x908>)
 80126ae:	4293      	cmp	r3, r2
 80126b0:	d130      	bne.n	8012714 <UART_SetConfig+0x7a8>
 80126b2:	4b6f      	ldr	r3, [pc, #444]	; (8012870 <UART_SetConfig+0x904>)
 80126b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126b6:	f003 0307 	and.w	r3, r3, #7
 80126ba:	2b05      	cmp	r3, #5
 80126bc:	d826      	bhi.n	801270c <UART_SetConfig+0x7a0>
 80126be:	a201      	add	r2, pc, #4	; (adr r2, 80126c4 <UART_SetConfig+0x758>)
 80126c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126c4:	080126dd 	.word	0x080126dd
 80126c8:	080126e5 	.word	0x080126e5
 80126cc:	080126ed 	.word	0x080126ed
 80126d0:	080126f5 	.word	0x080126f5
 80126d4:	080126fd 	.word	0x080126fd
 80126d8:	08012705 	.word	0x08012705
 80126dc:	2302      	movs	r3, #2
 80126de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80126e2:	e01a      	b.n	801271a <UART_SetConfig+0x7ae>
 80126e4:	2304      	movs	r3, #4
 80126e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80126ea:	e016      	b.n	801271a <UART_SetConfig+0x7ae>
 80126ec:	2308      	movs	r3, #8
 80126ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80126f2:	e012      	b.n	801271a <UART_SetConfig+0x7ae>
 80126f4:	2310      	movs	r3, #16
 80126f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80126fa:	e00e      	b.n	801271a <UART_SetConfig+0x7ae>
 80126fc:	2320      	movs	r3, #32
 80126fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012702:	e00a      	b.n	801271a <UART_SetConfig+0x7ae>
 8012704:	2340      	movs	r3, #64	; 0x40
 8012706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801270a:	e006      	b.n	801271a <UART_SetConfig+0x7ae>
 801270c:	2380      	movs	r3, #128	; 0x80
 801270e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012712:	e002      	b.n	801271a <UART_SetConfig+0x7ae>
 8012714:	2380      	movs	r3, #128	; 0x80
 8012716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	4a55      	ldr	r2, [pc, #340]	; (8012874 <UART_SetConfig+0x908>)
 8012720:	4293      	cmp	r3, r2
 8012722:	f040 80f8 	bne.w	8012916 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012726:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801272a:	2b20      	cmp	r3, #32
 801272c:	dc46      	bgt.n	80127bc <UART_SetConfig+0x850>
 801272e:	2b02      	cmp	r3, #2
 8012730:	db75      	blt.n	801281e <UART_SetConfig+0x8b2>
 8012732:	3b02      	subs	r3, #2
 8012734:	2b1e      	cmp	r3, #30
 8012736:	d872      	bhi.n	801281e <UART_SetConfig+0x8b2>
 8012738:	a201      	add	r2, pc, #4	; (adr r2, 8012740 <UART_SetConfig+0x7d4>)
 801273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801273e:	bf00      	nop
 8012740:	080127c3 	.word	0x080127c3
 8012744:	0801281f 	.word	0x0801281f
 8012748:	080127cb 	.word	0x080127cb
 801274c:	0801281f 	.word	0x0801281f
 8012750:	0801281f 	.word	0x0801281f
 8012754:	0801281f 	.word	0x0801281f
 8012758:	080127db 	.word	0x080127db
 801275c:	0801281f 	.word	0x0801281f
 8012760:	0801281f 	.word	0x0801281f
 8012764:	0801281f 	.word	0x0801281f
 8012768:	0801281f 	.word	0x0801281f
 801276c:	0801281f 	.word	0x0801281f
 8012770:	0801281f 	.word	0x0801281f
 8012774:	0801281f 	.word	0x0801281f
 8012778:	080127eb 	.word	0x080127eb
 801277c:	0801281f 	.word	0x0801281f
 8012780:	0801281f 	.word	0x0801281f
 8012784:	0801281f 	.word	0x0801281f
 8012788:	0801281f 	.word	0x0801281f
 801278c:	0801281f 	.word	0x0801281f
 8012790:	0801281f 	.word	0x0801281f
 8012794:	0801281f 	.word	0x0801281f
 8012798:	0801281f 	.word	0x0801281f
 801279c:	0801281f 	.word	0x0801281f
 80127a0:	0801281f 	.word	0x0801281f
 80127a4:	0801281f 	.word	0x0801281f
 80127a8:	0801281f 	.word	0x0801281f
 80127ac:	0801281f 	.word	0x0801281f
 80127b0:	0801281f 	.word	0x0801281f
 80127b4:	0801281f 	.word	0x0801281f
 80127b8:	08012811 	.word	0x08012811
 80127bc:	2b40      	cmp	r3, #64	; 0x40
 80127be:	d02a      	beq.n	8012816 <UART_SetConfig+0x8aa>
 80127c0:	e02d      	b.n	801281e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80127c2:	f7fa febd 	bl	800d540 <HAL_RCCEx_GetD3PCLK1Freq>
 80127c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80127c8:	e02f      	b.n	801282a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80127ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80127ce:	4618      	mov	r0, r3
 80127d0:	f7fa fecc 	bl	800d56c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80127d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80127d8:	e027      	b.n	801282a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80127da:	f107 0318 	add.w	r3, r7, #24
 80127de:	4618      	mov	r0, r3
 80127e0:	f7fb f818 	bl	800d814 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80127e4:	69fb      	ldr	r3, [r7, #28]
 80127e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80127e8:	e01f      	b.n	801282a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80127ea:	4b21      	ldr	r3, [pc, #132]	; (8012870 <UART_SetConfig+0x904>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	f003 0320 	and.w	r3, r3, #32
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d009      	beq.n	801280a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80127f6:	4b1e      	ldr	r3, [pc, #120]	; (8012870 <UART_SetConfig+0x904>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	08db      	lsrs	r3, r3, #3
 80127fc:	f003 0303 	and.w	r3, r3, #3
 8012800:	4a1d      	ldr	r2, [pc, #116]	; (8012878 <UART_SetConfig+0x90c>)
 8012802:	fa22 f303 	lsr.w	r3, r2, r3
 8012806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012808:	e00f      	b.n	801282a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801280a:	4b1b      	ldr	r3, [pc, #108]	; (8012878 <UART_SetConfig+0x90c>)
 801280c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801280e:	e00c      	b.n	801282a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012810:	4b1a      	ldr	r3, [pc, #104]	; (801287c <UART_SetConfig+0x910>)
 8012812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012814:	e009      	b.n	801282a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801281a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801281c:	e005      	b.n	801282a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801281e:	2300      	movs	r3, #0
 8012820:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012822:	2301      	movs	r3, #1
 8012824:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012828:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801282a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801282c:	2b00      	cmp	r3, #0
 801282e:	f000 81ee 	beq.w	8012c0e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012836:	4a12      	ldr	r2, [pc, #72]	; (8012880 <UART_SetConfig+0x914>)
 8012838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801283c:	461a      	mov	r2, r3
 801283e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012840:	fbb3 f3f2 	udiv	r3, r3, r2
 8012844:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	685a      	ldr	r2, [r3, #4]
 801284a:	4613      	mov	r3, r2
 801284c:	005b      	lsls	r3, r3, #1
 801284e:	4413      	add	r3, r2
 8012850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012852:	429a      	cmp	r2, r3
 8012854:	d305      	bcc.n	8012862 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	685b      	ldr	r3, [r3, #4]
 801285a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801285c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801285e:	429a      	cmp	r2, r3
 8012860:	d910      	bls.n	8012884 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8012862:	2301      	movs	r3, #1
 8012864:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012868:	e1d1      	b.n	8012c0e <UART_SetConfig+0xca2>
 801286a:	bf00      	nop
 801286c:	40011c00 	.word	0x40011c00
 8012870:	58024400 	.word	0x58024400
 8012874:	58000c00 	.word	0x58000c00
 8012878:	03d09000 	.word	0x03d09000
 801287c:	003d0900 	.word	0x003d0900
 8012880:	08020408 	.word	0x08020408
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012886:	2200      	movs	r2, #0
 8012888:	60bb      	str	r3, [r7, #8]
 801288a:	60fa      	str	r2, [r7, #12]
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012890:	4ac0      	ldr	r2, [pc, #768]	; (8012b94 <UART_SetConfig+0xc28>)
 8012892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012896:	b29b      	uxth	r3, r3
 8012898:	2200      	movs	r2, #0
 801289a:	603b      	str	r3, [r7, #0]
 801289c:	607a      	str	r2, [r7, #4]
 801289e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80128a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80128a6:	f7ed ff57 	bl	8000758 <__aeabi_uldivmod>
 80128aa:	4602      	mov	r2, r0
 80128ac:	460b      	mov	r3, r1
 80128ae:	4610      	mov	r0, r2
 80128b0:	4619      	mov	r1, r3
 80128b2:	f04f 0200 	mov.w	r2, #0
 80128b6:	f04f 0300 	mov.w	r3, #0
 80128ba:	020b      	lsls	r3, r1, #8
 80128bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80128c0:	0202      	lsls	r2, r0, #8
 80128c2:	6979      	ldr	r1, [r7, #20]
 80128c4:	6849      	ldr	r1, [r1, #4]
 80128c6:	0849      	lsrs	r1, r1, #1
 80128c8:	2000      	movs	r0, #0
 80128ca:	460c      	mov	r4, r1
 80128cc:	4605      	mov	r5, r0
 80128ce:	eb12 0804 	adds.w	r8, r2, r4
 80128d2:	eb43 0905 	adc.w	r9, r3, r5
 80128d6:	697b      	ldr	r3, [r7, #20]
 80128d8:	685b      	ldr	r3, [r3, #4]
 80128da:	2200      	movs	r2, #0
 80128dc:	469a      	mov	sl, r3
 80128de:	4693      	mov	fp, r2
 80128e0:	4652      	mov	r2, sl
 80128e2:	465b      	mov	r3, fp
 80128e4:	4640      	mov	r0, r8
 80128e6:	4649      	mov	r1, r9
 80128e8:	f7ed ff36 	bl	8000758 <__aeabi_uldivmod>
 80128ec:	4602      	mov	r2, r0
 80128ee:	460b      	mov	r3, r1
 80128f0:	4613      	mov	r3, r2
 80128f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80128f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80128fa:	d308      	bcc.n	801290e <UART_SetConfig+0x9a2>
 80128fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012902:	d204      	bcs.n	801290e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801290a:	60da      	str	r2, [r3, #12]
 801290c:	e17f      	b.n	8012c0e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801290e:	2301      	movs	r3, #1
 8012910:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012914:	e17b      	b.n	8012c0e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012916:	697b      	ldr	r3, [r7, #20]
 8012918:	69db      	ldr	r3, [r3, #28]
 801291a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801291e:	f040 80bd 	bne.w	8012a9c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8012922:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012926:	2b20      	cmp	r3, #32
 8012928:	dc48      	bgt.n	80129bc <UART_SetConfig+0xa50>
 801292a:	2b00      	cmp	r3, #0
 801292c:	db7b      	blt.n	8012a26 <UART_SetConfig+0xaba>
 801292e:	2b20      	cmp	r3, #32
 8012930:	d879      	bhi.n	8012a26 <UART_SetConfig+0xaba>
 8012932:	a201      	add	r2, pc, #4	; (adr r2, 8012938 <UART_SetConfig+0x9cc>)
 8012934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012938:	080129c3 	.word	0x080129c3
 801293c:	080129cb 	.word	0x080129cb
 8012940:	08012a27 	.word	0x08012a27
 8012944:	08012a27 	.word	0x08012a27
 8012948:	080129d3 	.word	0x080129d3
 801294c:	08012a27 	.word	0x08012a27
 8012950:	08012a27 	.word	0x08012a27
 8012954:	08012a27 	.word	0x08012a27
 8012958:	080129e3 	.word	0x080129e3
 801295c:	08012a27 	.word	0x08012a27
 8012960:	08012a27 	.word	0x08012a27
 8012964:	08012a27 	.word	0x08012a27
 8012968:	08012a27 	.word	0x08012a27
 801296c:	08012a27 	.word	0x08012a27
 8012970:	08012a27 	.word	0x08012a27
 8012974:	08012a27 	.word	0x08012a27
 8012978:	080129f3 	.word	0x080129f3
 801297c:	08012a27 	.word	0x08012a27
 8012980:	08012a27 	.word	0x08012a27
 8012984:	08012a27 	.word	0x08012a27
 8012988:	08012a27 	.word	0x08012a27
 801298c:	08012a27 	.word	0x08012a27
 8012990:	08012a27 	.word	0x08012a27
 8012994:	08012a27 	.word	0x08012a27
 8012998:	08012a27 	.word	0x08012a27
 801299c:	08012a27 	.word	0x08012a27
 80129a0:	08012a27 	.word	0x08012a27
 80129a4:	08012a27 	.word	0x08012a27
 80129a8:	08012a27 	.word	0x08012a27
 80129ac:	08012a27 	.word	0x08012a27
 80129b0:	08012a27 	.word	0x08012a27
 80129b4:	08012a27 	.word	0x08012a27
 80129b8:	08012a19 	.word	0x08012a19
 80129bc:	2b40      	cmp	r3, #64	; 0x40
 80129be:	d02e      	beq.n	8012a1e <UART_SetConfig+0xab2>
 80129c0:	e031      	b.n	8012a26 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80129c2:	f7f8 ff1f 	bl	800b804 <HAL_RCC_GetPCLK1Freq>
 80129c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80129c8:	e033      	b.n	8012a32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80129ca:	f7f8 ff31 	bl	800b830 <HAL_RCC_GetPCLK2Freq>
 80129ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80129d0:	e02f      	b.n	8012a32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80129d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80129d6:	4618      	mov	r0, r3
 80129d8:	f7fa fdc8 	bl	800d56c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80129dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80129e0:	e027      	b.n	8012a32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80129e2:	f107 0318 	add.w	r3, r7, #24
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7fa ff14 	bl	800d814 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80129ec:	69fb      	ldr	r3, [r7, #28]
 80129ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80129f0:	e01f      	b.n	8012a32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80129f2:	4b69      	ldr	r3, [pc, #420]	; (8012b98 <UART_SetConfig+0xc2c>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	f003 0320 	and.w	r3, r3, #32
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d009      	beq.n	8012a12 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80129fe:	4b66      	ldr	r3, [pc, #408]	; (8012b98 <UART_SetConfig+0xc2c>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	08db      	lsrs	r3, r3, #3
 8012a04:	f003 0303 	and.w	r3, r3, #3
 8012a08:	4a64      	ldr	r2, [pc, #400]	; (8012b9c <UART_SetConfig+0xc30>)
 8012a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8012a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012a10:	e00f      	b.n	8012a32 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8012a12:	4b62      	ldr	r3, [pc, #392]	; (8012b9c <UART_SetConfig+0xc30>)
 8012a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012a16:	e00c      	b.n	8012a32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012a18:	4b61      	ldr	r3, [pc, #388]	; (8012ba0 <UART_SetConfig+0xc34>)
 8012a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012a1c:	e009      	b.n	8012a32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012a24:	e005      	b.n	8012a32 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8012a26:	2300      	movs	r3, #0
 8012a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012a2a:	2301      	movs	r3, #1
 8012a2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012a30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	f000 80ea 	beq.w	8012c0e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012a3a:	697b      	ldr	r3, [r7, #20]
 8012a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a3e:	4a55      	ldr	r2, [pc, #340]	; (8012b94 <UART_SetConfig+0xc28>)
 8012a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012a44:	461a      	mov	r2, r3
 8012a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a48:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a4c:	005a      	lsls	r2, r3, #1
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	685b      	ldr	r3, [r3, #4]
 8012a52:	085b      	lsrs	r3, r3, #1
 8012a54:	441a      	add	r2, r3
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a62:	2b0f      	cmp	r3, #15
 8012a64:	d916      	bls.n	8012a94 <UART_SetConfig+0xb28>
 8012a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a6c:	d212      	bcs.n	8012a94 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a70:	b29b      	uxth	r3, r3
 8012a72:	f023 030f 	bic.w	r3, r3, #15
 8012a76:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a7a:	085b      	lsrs	r3, r3, #1
 8012a7c:	b29b      	uxth	r3, r3
 8012a7e:	f003 0307 	and.w	r3, r3, #7
 8012a82:	b29a      	uxth	r2, r3
 8012a84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012a86:	4313      	orrs	r3, r2
 8012a88:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012a90:	60da      	str	r2, [r3, #12]
 8012a92:	e0bc      	b.n	8012c0e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012a94:	2301      	movs	r3, #1
 8012a96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012a9a:	e0b8      	b.n	8012c0e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012a9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012aa0:	2b20      	cmp	r3, #32
 8012aa2:	dc4b      	bgt.n	8012b3c <UART_SetConfig+0xbd0>
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	f2c0 8087 	blt.w	8012bb8 <UART_SetConfig+0xc4c>
 8012aaa:	2b20      	cmp	r3, #32
 8012aac:	f200 8084 	bhi.w	8012bb8 <UART_SetConfig+0xc4c>
 8012ab0:	a201      	add	r2, pc, #4	; (adr r2, 8012ab8 <UART_SetConfig+0xb4c>)
 8012ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ab6:	bf00      	nop
 8012ab8:	08012b43 	.word	0x08012b43
 8012abc:	08012b4b 	.word	0x08012b4b
 8012ac0:	08012bb9 	.word	0x08012bb9
 8012ac4:	08012bb9 	.word	0x08012bb9
 8012ac8:	08012b53 	.word	0x08012b53
 8012acc:	08012bb9 	.word	0x08012bb9
 8012ad0:	08012bb9 	.word	0x08012bb9
 8012ad4:	08012bb9 	.word	0x08012bb9
 8012ad8:	08012b63 	.word	0x08012b63
 8012adc:	08012bb9 	.word	0x08012bb9
 8012ae0:	08012bb9 	.word	0x08012bb9
 8012ae4:	08012bb9 	.word	0x08012bb9
 8012ae8:	08012bb9 	.word	0x08012bb9
 8012aec:	08012bb9 	.word	0x08012bb9
 8012af0:	08012bb9 	.word	0x08012bb9
 8012af4:	08012bb9 	.word	0x08012bb9
 8012af8:	08012b73 	.word	0x08012b73
 8012afc:	08012bb9 	.word	0x08012bb9
 8012b00:	08012bb9 	.word	0x08012bb9
 8012b04:	08012bb9 	.word	0x08012bb9
 8012b08:	08012bb9 	.word	0x08012bb9
 8012b0c:	08012bb9 	.word	0x08012bb9
 8012b10:	08012bb9 	.word	0x08012bb9
 8012b14:	08012bb9 	.word	0x08012bb9
 8012b18:	08012bb9 	.word	0x08012bb9
 8012b1c:	08012bb9 	.word	0x08012bb9
 8012b20:	08012bb9 	.word	0x08012bb9
 8012b24:	08012bb9 	.word	0x08012bb9
 8012b28:	08012bb9 	.word	0x08012bb9
 8012b2c:	08012bb9 	.word	0x08012bb9
 8012b30:	08012bb9 	.word	0x08012bb9
 8012b34:	08012bb9 	.word	0x08012bb9
 8012b38:	08012bab 	.word	0x08012bab
 8012b3c:	2b40      	cmp	r3, #64	; 0x40
 8012b3e:	d037      	beq.n	8012bb0 <UART_SetConfig+0xc44>
 8012b40:	e03a      	b.n	8012bb8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012b42:	f7f8 fe5f 	bl	800b804 <HAL_RCC_GetPCLK1Freq>
 8012b46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012b48:	e03c      	b.n	8012bc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012b4a:	f7f8 fe71 	bl	800b830 <HAL_RCC_GetPCLK2Freq>
 8012b4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012b50:	e038      	b.n	8012bc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012b56:	4618      	mov	r0, r3
 8012b58:	f7fa fd08 	bl	800d56c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012b60:	e030      	b.n	8012bc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012b62:	f107 0318 	add.w	r3, r7, #24
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7fa fe54 	bl	800d814 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012b6c:	69fb      	ldr	r3, [r7, #28]
 8012b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012b70:	e028      	b.n	8012bc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012b72:	4b09      	ldr	r3, [pc, #36]	; (8012b98 <UART_SetConfig+0xc2c>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	f003 0320 	and.w	r3, r3, #32
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d012      	beq.n	8012ba4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012b7e:	4b06      	ldr	r3, [pc, #24]	; (8012b98 <UART_SetConfig+0xc2c>)
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	08db      	lsrs	r3, r3, #3
 8012b84:	f003 0303 	and.w	r3, r3, #3
 8012b88:	4a04      	ldr	r2, [pc, #16]	; (8012b9c <UART_SetConfig+0xc30>)
 8012b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8012b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012b90:	e018      	b.n	8012bc4 <UART_SetConfig+0xc58>
 8012b92:	bf00      	nop
 8012b94:	08020408 	.word	0x08020408
 8012b98:	58024400 	.word	0x58024400
 8012b9c:	03d09000 	.word	0x03d09000
 8012ba0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8012ba4:	4b24      	ldr	r3, [pc, #144]	; (8012c38 <UART_SetConfig+0xccc>)
 8012ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012ba8:	e00c      	b.n	8012bc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012baa:	4b24      	ldr	r3, [pc, #144]	; (8012c3c <UART_SetConfig+0xcd0>)
 8012bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012bae:	e009      	b.n	8012bc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012bb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012bb6:	e005      	b.n	8012bc4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012bbc:	2301      	movs	r3, #1
 8012bbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012bc2:	bf00      	nop
    }

    if (pclk != 0U)
 8012bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d021      	beq.n	8012c0e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bce:	4a1c      	ldr	r2, [pc, #112]	; (8012c40 <UART_SetConfig+0xcd4>)
 8012bd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bd8:	fbb3 f2f2 	udiv	r2, r3, r2
 8012bdc:	697b      	ldr	r3, [r7, #20]
 8012bde:	685b      	ldr	r3, [r3, #4]
 8012be0:	085b      	lsrs	r3, r3, #1
 8012be2:	441a      	add	r2, r3
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	685b      	ldr	r3, [r3, #4]
 8012be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8012bec:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf0:	2b0f      	cmp	r3, #15
 8012bf2:	d909      	bls.n	8012c08 <UART_SetConfig+0xc9c>
 8012bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012bfa:	d205      	bcs.n	8012c08 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bfe:	b29a      	uxth	r2, r3
 8012c00:	697b      	ldr	r3, [r7, #20]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	60da      	str	r2, [r3, #12]
 8012c06:	e002      	b.n	8012c0e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012c08:	2301      	movs	r3, #1
 8012c0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012c0e:	697b      	ldr	r3, [r7, #20]
 8012c10:	2201      	movs	r2, #1
 8012c12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8012c16:	697b      	ldr	r3, [r7, #20]
 8012c18:	2201      	movs	r2, #1
 8012c1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	2200      	movs	r2, #0
 8012c22:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8012c24:	697b      	ldr	r3, [r7, #20]
 8012c26:	2200      	movs	r2, #0
 8012c28:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8012c2a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3748      	adds	r7, #72	; 0x48
 8012c32:	46bd      	mov	sp, r7
 8012c34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012c38:	03d09000 	.word	0x03d09000
 8012c3c:	003d0900 	.word	0x003d0900
 8012c40:	08020408 	.word	0x08020408

08012c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012c44:	b480      	push	{r7}
 8012c46:	b083      	sub	sp, #12
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c50:	f003 0301 	and.w	r3, r3, #1
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d00a      	beq.n	8012c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	685b      	ldr	r3, [r3, #4]
 8012c5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	430a      	orrs	r2, r1
 8012c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c72:	f003 0302 	and.w	r3, r3, #2
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d00a      	beq.n	8012c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	430a      	orrs	r2, r1
 8012c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c94:	f003 0304 	and.w	r3, r3, #4
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d00a      	beq.n	8012cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	685b      	ldr	r3, [r3, #4]
 8012ca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	430a      	orrs	r2, r1
 8012cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cb6:	f003 0308 	and.w	r3, r3, #8
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d00a      	beq.n	8012cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	430a      	orrs	r2, r1
 8012cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cd8:	f003 0310 	and.w	r3, r3, #16
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d00a      	beq.n	8012cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	689b      	ldr	r3, [r3, #8]
 8012ce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	430a      	orrs	r2, r1
 8012cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cfa:	f003 0320 	and.w	r3, r3, #32
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d00a      	beq.n	8012d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	689b      	ldr	r3, [r3, #8]
 8012d08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	430a      	orrs	r2, r1
 8012d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d01a      	beq.n	8012d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	685b      	ldr	r3, [r3, #4]
 8012d2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	430a      	orrs	r2, r1
 8012d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012d42:	d10a      	bne.n	8012d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	685b      	ldr	r3, [r3, #4]
 8012d4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	430a      	orrs	r2, r1
 8012d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d00a      	beq.n	8012d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	685b      	ldr	r3, [r3, #4]
 8012d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	430a      	orrs	r2, r1
 8012d7a:	605a      	str	r2, [r3, #4]
  }
}
 8012d7c:	bf00      	nop
 8012d7e:	370c      	adds	r7, #12
 8012d80:	46bd      	mov	sp, r7
 8012d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d86:	4770      	bx	lr

08012d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b098      	sub	sp, #96	; 0x60
 8012d8c:	af02      	add	r7, sp, #8
 8012d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2200      	movs	r2, #0
 8012d94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012d98:	f7f1 fa28 	bl	80041ec <HAL_GetTick>
 8012d9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	f003 0308 	and.w	r3, r3, #8
 8012da8:	2b08      	cmp	r3, #8
 8012daa:	d12f      	bne.n	8012e0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012db0:	9300      	str	r3, [sp, #0]
 8012db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012db4:	2200      	movs	r2, #0
 8012db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f000 f88e 	bl	8012edc <UART_WaitOnFlagUntilTimeout>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d022      	beq.n	8012e0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dce:	e853 3f00 	ldrex	r3, [r3]
 8012dd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012dda:	653b      	str	r3, [r7, #80]	; 0x50
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	461a      	mov	r2, r3
 8012de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012de4:	647b      	str	r3, [r7, #68]	; 0x44
 8012de6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012de8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012dec:	e841 2300 	strex	r3, r2, [r1]
 8012df0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d1e6      	bne.n	8012dc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2220      	movs	r2, #32
 8012dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2200      	movs	r2, #0
 8012e04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012e08:	2303      	movs	r3, #3
 8012e0a:	e063      	b.n	8012ed4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	f003 0304 	and.w	r3, r3, #4
 8012e16:	2b04      	cmp	r3, #4
 8012e18:	d149      	bne.n	8012eae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012e1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012e1e:	9300      	str	r3, [sp, #0]
 8012e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e22:	2200      	movs	r2, #0
 8012e24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f000 f857 	bl	8012edc <UART_WaitOnFlagUntilTimeout>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d03c      	beq.n	8012eae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e3c:	e853 3f00 	ldrex	r3, [r3]
 8012e40:	623b      	str	r3, [r7, #32]
   return(result);
 8012e42:	6a3b      	ldr	r3, [r7, #32]
 8012e44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012e48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	461a      	mov	r2, r3
 8012e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e52:	633b      	str	r3, [r7, #48]	; 0x30
 8012e54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e5a:	e841 2300 	strex	r3, r2, [r1]
 8012e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d1e6      	bne.n	8012e34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	3308      	adds	r3, #8
 8012e6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e6e:	693b      	ldr	r3, [r7, #16]
 8012e70:	e853 3f00 	ldrex	r3, [r3]
 8012e74:	60fb      	str	r3, [r7, #12]
   return(result);
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	f023 0301 	bic.w	r3, r3, #1
 8012e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	3308      	adds	r3, #8
 8012e84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e86:	61fa      	str	r2, [r7, #28]
 8012e88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e8a:	69b9      	ldr	r1, [r7, #24]
 8012e8c:	69fa      	ldr	r2, [r7, #28]
 8012e8e:	e841 2300 	strex	r3, r2, [r1]
 8012e92:	617b      	str	r3, [r7, #20]
   return(result);
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d1e5      	bne.n	8012e66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	2220      	movs	r2, #32
 8012e9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012eaa:	2303      	movs	r3, #3
 8012eac:	e012      	b.n	8012ed4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2220      	movs	r2, #32
 8012eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	2220      	movs	r2, #32
 8012eba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	2200      	movs	r2, #0
 8012ece:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012ed2:	2300      	movs	r3, #0
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3758      	adds	r7, #88	; 0x58
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}

08012edc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b084      	sub	sp, #16
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	60f8      	str	r0, [r7, #12]
 8012ee4:	60b9      	str	r1, [r7, #8]
 8012ee6:	603b      	str	r3, [r7, #0]
 8012ee8:	4613      	mov	r3, r2
 8012eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012eec:	e049      	b.n	8012f82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012eee:	69bb      	ldr	r3, [r7, #24]
 8012ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ef4:	d045      	beq.n	8012f82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012ef6:	f7f1 f979 	bl	80041ec <HAL_GetTick>
 8012efa:	4602      	mov	r2, r0
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	1ad3      	subs	r3, r2, r3
 8012f00:	69ba      	ldr	r2, [r7, #24]
 8012f02:	429a      	cmp	r2, r3
 8012f04:	d302      	bcc.n	8012f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8012f06:	69bb      	ldr	r3, [r7, #24]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d101      	bne.n	8012f10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012f0c:	2303      	movs	r3, #3
 8012f0e:	e048      	b.n	8012fa2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	f003 0304 	and.w	r3, r3, #4
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d031      	beq.n	8012f82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	69db      	ldr	r3, [r3, #28]
 8012f24:	f003 0308 	and.w	r3, r3, #8
 8012f28:	2b08      	cmp	r3, #8
 8012f2a:	d110      	bne.n	8012f4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	2208      	movs	r2, #8
 8012f32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012f34:	68f8      	ldr	r0, [r7, #12]
 8012f36:	f000 f839 	bl	8012fac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	2208      	movs	r2, #8
 8012f3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	2200      	movs	r2, #0
 8012f46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	e029      	b.n	8012fa2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	69db      	ldr	r3, [r3, #28]
 8012f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012f5c:	d111      	bne.n	8012f82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012f68:	68f8      	ldr	r0, [r7, #12]
 8012f6a:	f000 f81f 	bl	8012fac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	2220      	movs	r2, #32
 8012f72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	2200      	movs	r2, #0
 8012f7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012f7e:	2303      	movs	r3, #3
 8012f80:	e00f      	b.n	8012fa2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	69da      	ldr	r2, [r3, #28]
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	4013      	ands	r3, r2
 8012f8c:	68ba      	ldr	r2, [r7, #8]
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	bf0c      	ite	eq
 8012f92:	2301      	moveq	r3, #1
 8012f94:	2300      	movne	r3, #0
 8012f96:	b2db      	uxtb	r3, r3
 8012f98:	461a      	mov	r2, r3
 8012f9a:	79fb      	ldrb	r3, [r7, #7]
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	d0a6      	beq.n	8012eee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012fa0:	2300      	movs	r3, #0
}
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	3710      	adds	r7, #16
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bd80      	pop	{r7, pc}
	...

08012fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012fac:	b480      	push	{r7}
 8012fae:	b095      	sub	sp, #84	; 0x54
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fbc:	e853 3f00 	ldrex	r3, [r3]
 8012fc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	461a      	mov	r2, r3
 8012fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8012fd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012fd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012fda:	e841 2300 	strex	r3, r2, [r1]
 8012fde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d1e6      	bne.n	8012fb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	3308      	adds	r3, #8
 8012fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fee:	6a3b      	ldr	r3, [r7, #32]
 8012ff0:	e853 3f00 	ldrex	r3, [r3]
 8012ff4:	61fb      	str	r3, [r7, #28]
   return(result);
 8012ff6:	69fa      	ldr	r2, [r7, #28]
 8012ff8:	4b1e      	ldr	r3, [pc, #120]	; (8013074 <UART_EndRxTransfer+0xc8>)
 8012ffa:	4013      	ands	r3, r2
 8012ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	3308      	adds	r3, #8
 8013004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013006:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013008:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801300a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801300c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801300e:	e841 2300 	strex	r3, r2, [r1]
 8013012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013016:	2b00      	cmp	r3, #0
 8013018:	d1e5      	bne.n	8012fe6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801301e:	2b01      	cmp	r3, #1
 8013020:	d118      	bne.n	8013054 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	e853 3f00 	ldrex	r3, [r3]
 801302e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	f023 0310 	bic.w	r3, r3, #16
 8013036:	647b      	str	r3, [r7, #68]	; 0x44
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	461a      	mov	r2, r3
 801303e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013040:	61bb      	str	r3, [r7, #24]
 8013042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013044:	6979      	ldr	r1, [r7, #20]
 8013046:	69ba      	ldr	r2, [r7, #24]
 8013048:	e841 2300 	strex	r3, r2, [r1]
 801304c:	613b      	str	r3, [r7, #16]
   return(result);
 801304e:	693b      	ldr	r3, [r7, #16]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d1e6      	bne.n	8013022 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2220      	movs	r2, #32
 8013058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	2200      	movs	r2, #0
 8013060:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	2200      	movs	r2, #0
 8013066:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013068:	bf00      	nop
 801306a:	3754      	adds	r7, #84	; 0x54
 801306c:	46bd      	mov	sp, r7
 801306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013072:	4770      	bx	lr
 8013074:	effffffe 	.word	0xeffffffe

08013078 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013078:	b480      	push	{r7}
 801307a:	b085      	sub	sp, #20
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013086:	2b01      	cmp	r3, #1
 8013088:	d101      	bne.n	801308e <HAL_UARTEx_DisableFifoMode+0x16>
 801308a:	2302      	movs	r3, #2
 801308c:	e027      	b.n	80130de <HAL_UARTEx_DisableFifoMode+0x66>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2201      	movs	r2, #1
 8013092:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	2224      	movs	r2, #36	; 0x24
 801309a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	681a      	ldr	r2, [r3, #0]
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	f022 0201 	bic.w	r2, r2, #1
 80130b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80130bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2200      	movs	r2, #0
 80130c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	68fa      	ldr	r2, [r7, #12]
 80130ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2220      	movs	r2, #32
 80130d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2200      	movs	r2, #0
 80130d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80130dc:	2300      	movs	r3, #0
}
 80130de:	4618      	mov	r0, r3
 80130e0:	3714      	adds	r7, #20
 80130e2:	46bd      	mov	sp, r7
 80130e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e8:	4770      	bx	lr

080130ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80130ea:	b580      	push	{r7, lr}
 80130ec:	b084      	sub	sp, #16
 80130ee:	af00      	add	r7, sp, #0
 80130f0:	6078      	str	r0, [r7, #4]
 80130f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80130fa:	2b01      	cmp	r3, #1
 80130fc:	d101      	bne.n	8013102 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80130fe:	2302      	movs	r3, #2
 8013100:	e02d      	b.n	801315e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2201      	movs	r2, #1
 8013106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	2224      	movs	r2, #36	; 0x24
 801310e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	681a      	ldr	r2, [r3, #0]
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	f022 0201 	bic.w	r2, r2, #1
 8013128:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	689b      	ldr	r3, [r3, #8]
 8013130:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	683a      	ldr	r2, [r7, #0]
 801313a:	430a      	orrs	r2, r1
 801313c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f000 f850 	bl	80131e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	68fa      	ldr	r2, [r7, #12]
 801314a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2220      	movs	r2, #32
 8013150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2200      	movs	r2, #0
 8013158:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801315c:	2300      	movs	r3, #0
}
 801315e:	4618      	mov	r0, r3
 8013160:	3710      	adds	r7, #16
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013166:	b580      	push	{r7, lr}
 8013168:	b084      	sub	sp, #16
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
 801316e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013176:	2b01      	cmp	r3, #1
 8013178:	d101      	bne.n	801317e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801317a:	2302      	movs	r3, #2
 801317c:	e02d      	b.n	80131da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	2201      	movs	r2, #1
 8013182:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2224      	movs	r2, #36	; 0x24
 801318a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	681a      	ldr	r2, [r3, #0]
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	f022 0201 	bic.w	r2, r2, #1
 80131a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	689b      	ldr	r3, [r3, #8]
 80131ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	683a      	ldr	r2, [r7, #0]
 80131b6:	430a      	orrs	r2, r1
 80131b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80131ba:	6878      	ldr	r0, [r7, #4]
 80131bc:	f000 f812 	bl	80131e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	68fa      	ldr	r2, [r7, #12]
 80131c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2220      	movs	r2, #32
 80131cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2200      	movs	r2, #0
 80131d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80131d8:	2300      	movs	r3, #0
}
 80131da:	4618      	mov	r0, r3
 80131dc:	3710      	adds	r7, #16
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd80      	pop	{r7, pc}
	...

080131e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80131e4:	b480      	push	{r7}
 80131e6:	b085      	sub	sp, #20
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d108      	bne.n	8013206 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2201      	movs	r2, #1
 80131f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2201      	movs	r2, #1
 8013200:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013204:	e031      	b.n	801326a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013206:	2310      	movs	r3, #16
 8013208:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801320a:	2310      	movs	r3, #16
 801320c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	689b      	ldr	r3, [r3, #8]
 8013214:	0e5b      	lsrs	r3, r3, #25
 8013216:	b2db      	uxtb	r3, r3
 8013218:	f003 0307 	and.w	r3, r3, #7
 801321c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	689b      	ldr	r3, [r3, #8]
 8013224:	0f5b      	lsrs	r3, r3, #29
 8013226:	b2db      	uxtb	r3, r3
 8013228:	f003 0307 	and.w	r3, r3, #7
 801322c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801322e:	7bbb      	ldrb	r3, [r7, #14]
 8013230:	7b3a      	ldrb	r2, [r7, #12]
 8013232:	4911      	ldr	r1, [pc, #68]	; (8013278 <UARTEx_SetNbDataToProcess+0x94>)
 8013234:	5c8a      	ldrb	r2, [r1, r2]
 8013236:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801323a:	7b3a      	ldrb	r2, [r7, #12]
 801323c:	490f      	ldr	r1, [pc, #60]	; (801327c <UARTEx_SetNbDataToProcess+0x98>)
 801323e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013240:	fb93 f3f2 	sdiv	r3, r3, r2
 8013244:	b29a      	uxth	r2, r3
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801324c:	7bfb      	ldrb	r3, [r7, #15]
 801324e:	7b7a      	ldrb	r2, [r7, #13]
 8013250:	4909      	ldr	r1, [pc, #36]	; (8013278 <UARTEx_SetNbDataToProcess+0x94>)
 8013252:	5c8a      	ldrb	r2, [r1, r2]
 8013254:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013258:	7b7a      	ldrb	r2, [r7, #13]
 801325a:	4908      	ldr	r1, [pc, #32]	; (801327c <UARTEx_SetNbDataToProcess+0x98>)
 801325c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801325e:	fb93 f3f2 	sdiv	r3, r3, r2
 8013262:	b29a      	uxth	r2, r3
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801326a:	bf00      	nop
 801326c:	3714      	adds	r7, #20
 801326e:	46bd      	mov	sp, r7
 8013270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013274:	4770      	bx	lr
 8013276:	bf00      	nop
 8013278:	08020420 	.word	0x08020420
 801327c:	08020428 	.word	0x08020428

08013280 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8013280:	b084      	sub	sp, #16
 8013282:	b480      	push	{r7}
 8013284:	b085      	sub	sp, #20
 8013286:	af00      	add	r7, sp, #0
 8013288:	6078      	str	r0, [r7, #4]
 801328a:	f107 001c 	add.w	r0, r7, #28
 801328e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8013292:	2300      	movs	r3, #0
 8013294:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8013296:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8013298:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801329a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 801329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 801329e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80132a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80132a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80132a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80132a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80132a8:	68fa      	ldr	r2, [r7, #12]
 80132aa:	4313      	orrs	r3, r2
 80132ac:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	685a      	ldr	r2, [r3, #4]
 80132b2:	4b07      	ldr	r3, [pc, #28]	; (80132d0 <SDMMC_Init+0x50>)
 80132b4:	4013      	ands	r3, r2
 80132b6:	68fa      	ldr	r2, [r7, #12]
 80132b8:	431a      	orrs	r2, r3
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80132be:	2300      	movs	r3, #0
}
 80132c0:	4618      	mov	r0, r3
 80132c2:	3714      	adds	r7, #20
 80132c4:	46bd      	mov	sp, r7
 80132c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ca:	b004      	add	sp, #16
 80132cc:	4770      	bx	lr
 80132ce:	bf00      	nop
 80132d0:	ffc02c00 	.word	0xffc02c00

080132d4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80132d4:	b480      	push	{r7}
 80132d6:	b083      	sub	sp, #12
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80132e2:	4618      	mov	r0, r3
 80132e4:	370c      	adds	r7, #12
 80132e6:	46bd      	mov	sp, r7
 80132e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ec:	4770      	bx	lr

080132ee <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80132ee:	b480      	push	{r7}
 80132f0:	b083      	sub	sp, #12
 80132f2:	af00      	add	r7, sp, #0
 80132f4:	6078      	str	r0, [r7, #4]
 80132f6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	681a      	ldr	r2, [r3, #0]
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013302:	2300      	movs	r3, #0
}
 8013304:	4618      	mov	r0, r3
 8013306:	370c      	adds	r7, #12
 8013308:	46bd      	mov	sp, r7
 801330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330e:	4770      	bx	lr

08013310 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8013310:	b480      	push	{r7}
 8013312:	b083      	sub	sp, #12
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	f043 0203 	orr.w	r2, r3, #3
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8013324:	2300      	movs	r3, #0
}
 8013326:	4618      	mov	r0, r3
 8013328:	370c      	adds	r7, #12
 801332a:	46bd      	mov	sp, r7
 801332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013330:	4770      	bx	lr

08013332 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8013332:	b480      	push	{r7}
 8013334:	b083      	sub	sp, #12
 8013336:	af00      	add	r7, sp, #0
 8013338:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	f003 0303 	and.w	r3, r3, #3
}
 8013342:	4618      	mov	r0, r3
 8013344:	370c      	adds	r7, #12
 8013346:	46bd      	mov	sp, r7
 8013348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334c:	4770      	bx	lr
	...

08013350 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8013350:	b480      	push	{r7}
 8013352:	b085      	sub	sp, #20
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
 8013358:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801335a:	2300      	movs	r3, #0
 801335c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	681a      	ldr	r2, [r3, #0]
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801336e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8013374:	431a      	orrs	r2, r3
                       Command->CPSM);
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801337a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801337c:	68fa      	ldr	r2, [r7, #12]
 801337e:	4313      	orrs	r3, r2
 8013380:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	68da      	ldr	r2, [r3, #12]
 8013386:	4b06      	ldr	r3, [pc, #24]	; (80133a0 <SDMMC_SendCommand+0x50>)
 8013388:	4013      	ands	r3, r2
 801338a:	68fa      	ldr	r2, [r7, #12]
 801338c:	431a      	orrs	r2, r3
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013392:	2300      	movs	r3, #0
}
 8013394:	4618      	mov	r0, r3
 8013396:	3714      	adds	r7, #20
 8013398:	46bd      	mov	sp, r7
 801339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339e:	4770      	bx	lr
 80133a0:	fffee0c0 	.word	0xfffee0c0

080133a4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80133a4:	b480      	push	{r7}
 80133a6:	b083      	sub	sp, #12
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	691b      	ldr	r3, [r3, #16]
 80133b0:	b2db      	uxtb	r3, r3
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	370c      	adds	r7, #12
 80133b6:	46bd      	mov	sp, r7
 80133b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133bc:	4770      	bx	lr

080133be <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80133be:	b480      	push	{r7}
 80133c0:	b085      	sub	sp, #20
 80133c2:	af00      	add	r7, sp, #0
 80133c4:	6078      	str	r0, [r7, #4]
 80133c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	3314      	adds	r3, #20
 80133cc:	461a      	mov	r2, r3
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	4413      	add	r3, r2
 80133d2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	681b      	ldr	r3, [r3, #0]
}
 80133d8:	4618      	mov	r0, r3
 80133da:	3714      	adds	r7, #20
 80133dc:	46bd      	mov	sp, r7
 80133de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e2:	4770      	bx	lr

080133e4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80133e4:	b480      	push	{r7}
 80133e6:	b085      	sub	sp, #20
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
 80133ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80133ee:	2300      	movs	r3, #0
 80133f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	681a      	ldr	r2, [r3, #0]
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	685a      	ldr	r2, [r3, #4]
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801340a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8013410:	431a      	orrs	r2, r3
                       Data->DPSM);
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8013416:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013418:	68fa      	ldr	r2, [r7, #12]
 801341a:	4313      	orrs	r3, r2
 801341c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013422:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	431a      	orrs	r2, r3
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801342e:	2300      	movs	r3, #0

}
 8013430:	4618      	mov	r0, r3
 8013432:	3714      	adds	r7, #20
 8013434:	46bd      	mov	sp, r7
 8013436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343a:	4770      	bx	lr

0801343c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b088      	sub	sp, #32
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
 8013444:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801344a:	2310      	movs	r3, #16
 801344c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801344e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013452:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013454:	2300      	movs	r3, #0
 8013456:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801345c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801345e:	f107 0308 	add.w	r3, r7, #8
 8013462:	4619      	mov	r1, r3
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f7ff ff73 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801346a:	f241 3288 	movw	r2, #5000	; 0x1388
 801346e:	2110      	movs	r1, #16
 8013470:	6878      	ldr	r0, [r7, #4]
 8013472:	f000 fa5f 	bl	8013934 <SDMMC_GetCmdResp1>
 8013476:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013478:	69fb      	ldr	r3, [r7, #28]
}
 801347a:	4618      	mov	r0, r3
 801347c:	3720      	adds	r7, #32
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}

08013482 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013482:	b580      	push	{r7, lr}
 8013484:	b088      	sub	sp, #32
 8013486:	af00      	add	r7, sp, #0
 8013488:	6078      	str	r0, [r7, #4]
 801348a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801348c:	683b      	ldr	r3, [r7, #0]
 801348e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8013490:	2311      	movs	r3, #17
 8013492:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801349a:	2300      	movs	r3, #0
 801349c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801349e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80134a4:	f107 0308 	add.w	r3, r7, #8
 80134a8:	4619      	mov	r1, r3
 80134aa:	6878      	ldr	r0, [r7, #4]
 80134ac:	f7ff ff50 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80134b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80134b4:	2111      	movs	r1, #17
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f000 fa3c 	bl	8013934 <SDMMC_GetCmdResp1>
 80134bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80134be:	69fb      	ldr	r3, [r7, #28]
}
 80134c0:	4618      	mov	r0, r3
 80134c2:	3720      	adds	r7, #32
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}

080134c8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b088      	sub	sp, #32
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
 80134d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80134d6:	2312      	movs	r3, #18
 80134d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80134da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80134de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80134e0:	2300      	movs	r3, #0
 80134e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80134e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80134ea:	f107 0308 	add.w	r3, r7, #8
 80134ee:	4619      	mov	r1, r3
 80134f0:	6878      	ldr	r0, [r7, #4]
 80134f2:	f7ff ff2d 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80134f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80134fa:	2112      	movs	r1, #18
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f000 fa19 	bl	8013934 <SDMMC_GetCmdResp1>
 8013502:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013504:	69fb      	ldr	r3, [r7, #28]
}
 8013506:	4618      	mov	r0, r3
 8013508:	3720      	adds	r7, #32
 801350a:	46bd      	mov	sp, r7
 801350c:	bd80      	pop	{r7, pc}

0801350e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801350e:	b580      	push	{r7, lr}
 8013510:	b088      	sub	sp, #32
 8013512:	af00      	add	r7, sp, #0
 8013514:	6078      	str	r0, [r7, #4]
 8013516:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801351c:	2318      	movs	r3, #24
 801351e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013524:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013526:	2300      	movs	r3, #0
 8013528:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801352a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801352e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013530:	f107 0308 	add.w	r3, r7, #8
 8013534:	4619      	mov	r1, r3
 8013536:	6878      	ldr	r0, [r7, #4]
 8013538:	f7ff ff0a 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801353c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013540:	2118      	movs	r1, #24
 8013542:	6878      	ldr	r0, [r7, #4]
 8013544:	f000 f9f6 	bl	8013934 <SDMMC_GetCmdResp1>
 8013548:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801354a:	69fb      	ldr	r3, [r7, #28]
}
 801354c:	4618      	mov	r0, r3
 801354e:	3720      	adds	r7, #32
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}

08013554 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b088      	sub	sp, #32
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8013562:	2319      	movs	r3, #25
 8013564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013566:	f44f 7380 	mov.w	r3, #256	; 0x100
 801356a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801356c:	2300      	movs	r3, #0
 801356e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013574:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013576:	f107 0308 	add.w	r3, r7, #8
 801357a:	4619      	mov	r1, r3
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f7ff fee7 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013582:	f241 3288 	movw	r2, #5000	; 0x1388
 8013586:	2119      	movs	r1, #25
 8013588:	6878      	ldr	r0, [r7, #4]
 801358a:	f000 f9d3 	bl	8013934 <SDMMC_GetCmdResp1>
 801358e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013590:	69fb      	ldr	r3, [r7, #28]
}
 8013592:	4618      	mov	r0, r3
 8013594:	3720      	adds	r7, #32
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}
	...

0801359c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b088      	sub	sp, #32
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80135a4:	2300      	movs	r3, #0
 80135a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80135a8:	230c      	movs	r3, #12
 80135aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80135ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80135b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80135b2:	2300      	movs	r3, #0
 80135b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80135b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80135ba:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	68db      	ldr	r3, [r3, #12]
 80135c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	68db      	ldr	r3, [r3, #12]
 80135cc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80135d4:	f107 0308 	add.w	r3, r7, #8
 80135d8:	4619      	mov	r1, r3
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f7ff feb8 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80135e0:	4a0b      	ldr	r2, [pc, #44]	; (8013610 <SDMMC_CmdStopTransfer+0x74>)
 80135e2:	210c      	movs	r1, #12
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	f000 f9a5 	bl	8013934 <SDMMC_GetCmdResp1>
 80135ea:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	68db      	ldr	r3, [r3, #12]
 80135f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80135f8:	69fb      	ldr	r3, [r7, #28]
 80135fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80135fe:	d101      	bne.n	8013604 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8013600:	2300      	movs	r3, #0
 8013602:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8013604:	69fb      	ldr	r3, [r7, #28]
}
 8013606:	4618      	mov	r0, r3
 8013608:	3720      	adds	r7, #32
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}
 801360e:	bf00      	nop
 8013610:	05f5e100 	.word	0x05f5e100

08013614 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b088      	sub	sp, #32
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
 801361c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8013622:	2307      	movs	r3, #7
 8013624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013626:	f44f 7380 	mov.w	r3, #256	; 0x100
 801362a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801362c:	2300      	movs	r3, #0
 801362e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013634:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013636:	f107 0308 	add.w	r3, r7, #8
 801363a:	4619      	mov	r1, r3
 801363c:	6878      	ldr	r0, [r7, #4]
 801363e:	f7ff fe87 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8013642:	f241 3288 	movw	r2, #5000	; 0x1388
 8013646:	2107      	movs	r1, #7
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	f000 f973 	bl	8013934 <SDMMC_GetCmdResp1>
 801364e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013650:	69fb      	ldr	r3, [r7, #28]
}
 8013652:	4618      	mov	r0, r3
 8013654:	3720      	adds	r7, #32
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}

0801365a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801365a:	b580      	push	{r7, lr}
 801365c:	b088      	sub	sp, #32
 801365e:	af00      	add	r7, sp, #0
 8013660:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013662:	2300      	movs	r3, #0
 8013664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8013666:	2300      	movs	r3, #0
 8013668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801366a:	2300      	movs	r3, #0
 801366c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801366e:	2300      	movs	r3, #0
 8013670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013676:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013678:	f107 0308 	add.w	r3, r7, #8
 801367c:	4619      	mov	r1, r3
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	f7ff fe66 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f000 fb97 	bl	8013db8 <SDMMC_GetCmdError>
 801368a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801368c:	69fb      	ldr	r3, [r7, #28]
}
 801368e:	4618      	mov	r0, r3
 8013690:	3720      	adds	r7, #32
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}

08013696 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8013696:	b580      	push	{r7, lr}
 8013698:	b088      	sub	sp, #32
 801369a:	af00      	add	r7, sp, #0
 801369c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801369e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80136a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80136a4:	2308      	movs	r3, #8
 80136a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80136a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80136ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80136ae:	2300      	movs	r3, #0
 80136b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80136b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80136b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80136b8:	f107 0308 	add.w	r3, r7, #8
 80136bc:	4619      	mov	r1, r3
 80136be:	6878      	ldr	r0, [r7, #4]
 80136c0:	f7ff fe46 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80136c4:	6878      	ldr	r0, [r7, #4]
 80136c6:	f000 fb29 	bl	8013d1c <SDMMC_GetCmdResp7>
 80136ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80136cc:	69fb      	ldr	r3, [r7, #28]
}
 80136ce:	4618      	mov	r0, r3
 80136d0:	3720      	adds	r7, #32
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd80      	pop	{r7, pc}

080136d6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80136d6:	b580      	push	{r7, lr}
 80136d8:	b088      	sub	sp, #32
 80136da:	af00      	add	r7, sp, #0
 80136dc:	6078      	str	r0, [r7, #4]
 80136de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80136e4:	2337      	movs	r3, #55	; 0x37
 80136e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80136e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80136ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80136ee:	2300      	movs	r3, #0
 80136f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80136f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80136f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80136f8:	f107 0308 	add.w	r3, r7, #8
 80136fc:	4619      	mov	r1, r3
 80136fe:	6878      	ldr	r0, [r7, #4]
 8013700:	f7ff fe26 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8013704:	f241 3288 	movw	r2, #5000	; 0x1388
 8013708:	2137      	movs	r1, #55	; 0x37
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f000 f912 	bl	8013934 <SDMMC_GetCmdResp1>
 8013710:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013712:	69fb      	ldr	r3, [r7, #28]
}
 8013714:	4618      	mov	r0, r3
 8013716:	3720      	adds	r7, #32
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}

0801371c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b088      	sub	sp, #32
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
 8013724:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801372a:	2329      	movs	r3, #41	; 0x29
 801372c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801372e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013734:	2300      	movs	r3, #0
 8013736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801373c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801373e:	f107 0308 	add.w	r3, r7, #8
 8013742:	4619      	mov	r1, r3
 8013744:	6878      	ldr	r0, [r7, #4]
 8013746:	f7ff fe03 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f000 fa2e 	bl	8013bac <SDMMC_GetCmdResp3>
 8013750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013752:	69fb      	ldr	r3, [r7, #28]
}
 8013754:	4618      	mov	r0, r3
 8013756:	3720      	adds	r7, #32
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}

0801375c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b088      	sub	sp, #32
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
 8013764:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801376a:	2306      	movs	r3, #6
 801376c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801376e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013772:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013774:	2300      	movs	r3, #0
 8013776:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801377c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801377e:	f107 0308 	add.w	r3, r7, #8
 8013782:	4619      	mov	r1, r3
 8013784:	6878      	ldr	r0, [r7, #4]
 8013786:	f7ff fde3 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801378a:	f241 3288 	movw	r2, #5000	; 0x1388
 801378e:	2106      	movs	r1, #6
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f000 f8cf 	bl	8013934 <SDMMC_GetCmdResp1>
 8013796:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013798:	69fb      	ldr	r3, [r7, #28]
}
 801379a:	4618      	mov	r0, r3
 801379c:	3720      	adds	r7, #32
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}

080137a2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80137a2:	b580      	push	{r7, lr}
 80137a4:	b088      	sub	sp, #32
 80137a6:	af00      	add	r7, sp, #0
 80137a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80137aa:	2300      	movs	r3, #0
 80137ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80137ae:	2333      	movs	r3, #51	; 0x33
 80137b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80137b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80137b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80137b8:	2300      	movs	r3, #0
 80137ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80137bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80137c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80137c2:	f107 0308 	add.w	r3, r7, #8
 80137c6:	4619      	mov	r1, r3
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f7ff fdc1 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80137ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80137d2:	2133      	movs	r1, #51	; 0x33
 80137d4:	6878      	ldr	r0, [r7, #4]
 80137d6:	f000 f8ad 	bl	8013934 <SDMMC_GetCmdResp1>
 80137da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80137dc:	69fb      	ldr	r3, [r7, #28]
}
 80137de:	4618      	mov	r0, r3
 80137e0:	3720      	adds	r7, #32
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}

080137e6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80137e6:	b580      	push	{r7, lr}
 80137e8:	b088      	sub	sp, #32
 80137ea:	af00      	add	r7, sp, #0
 80137ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80137ee:	2300      	movs	r3, #0
 80137f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80137f2:	2302      	movs	r3, #2
 80137f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80137f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80137fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80137fc:	2300      	movs	r3, #0
 80137fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013804:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013806:	f107 0308 	add.w	r3, r7, #8
 801380a:	4619      	mov	r1, r3
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f7ff fd9f 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013812:	6878      	ldr	r0, [r7, #4]
 8013814:	f000 f980 	bl	8013b18 <SDMMC_GetCmdResp2>
 8013818:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801381a:	69fb      	ldr	r3, [r7, #28]
}
 801381c:	4618      	mov	r0, r3
 801381e:	3720      	adds	r7, #32
 8013820:	46bd      	mov	sp, r7
 8013822:	bd80      	pop	{r7, pc}

08013824 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b088      	sub	sp, #32
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8013832:	2309      	movs	r3, #9
 8013834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013836:	f44f 7340 	mov.w	r3, #768	; 0x300
 801383a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801383c:	2300      	movs	r3, #0
 801383e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013844:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013846:	f107 0308 	add.w	r3, r7, #8
 801384a:	4619      	mov	r1, r3
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f7ff fd7f 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013852:	6878      	ldr	r0, [r7, #4]
 8013854:	f000 f960 	bl	8013b18 <SDMMC_GetCmdResp2>
 8013858:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801385a:	69fb      	ldr	r3, [r7, #28]
}
 801385c:	4618      	mov	r0, r3
 801385e:	3720      	adds	r7, #32
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}

08013864 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b088      	sub	sp, #32
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
 801386c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801386e:	2300      	movs	r3, #0
 8013870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8013872:	2303      	movs	r3, #3
 8013874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013876:	f44f 7380 	mov.w	r3, #256	; 0x100
 801387a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801387c:	2300      	movs	r3, #0
 801387e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013884:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013886:	f107 0308 	add.w	r3, r7, #8
 801388a:	4619      	mov	r1, r3
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f7ff fd5f 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8013892:	683a      	ldr	r2, [r7, #0]
 8013894:	2103      	movs	r1, #3
 8013896:	6878      	ldr	r0, [r7, #4]
 8013898:	f000 f9c8 	bl	8013c2c <SDMMC_GetCmdResp6>
 801389c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801389e:	69fb      	ldr	r3, [r7, #28]
}
 80138a0:	4618      	mov	r0, r3
 80138a2:	3720      	adds	r7, #32
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd80      	pop	{r7, pc}

080138a8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b088      	sub	sp, #32
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
 80138b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80138b6:	230d      	movs	r3, #13
 80138b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80138ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80138be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80138c0:	2300      	movs	r3, #0
 80138c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80138c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80138c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80138ca:	f107 0308 	add.w	r3, r7, #8
 80138ce:	4619      	mov	r1, r3
 80138d0:	6878      	ldr	r0, [r7, #4]
 80138d2:	f7ff fd3d 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80138d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80138da:	210d      	movs	r1, #13
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	f000 f829 	bl	8013934 <SDMMC_GetCmdResp1>
 80138e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80138e4:	69fb      	ldr	r3, [r7, #28]
}
 80138e6:	4618      	mov	r0, r3
 80138e8:	3720      	adds	r7, #32
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bd80      	pop	{r7, pc}

080138ee <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80138ee:	b580      	push	{r7, lr}
 80138f0:	b088      	sub	sp, #32
 80138f2:	af00      	add	r7, sp, #0
 80138f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80138f6:	2300      	movs	r3, #0
 80138f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80138fa:	230d      	movs	r3, #13
 80138fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80138fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013904:	2300      	movs	r3, #0
 8013906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801390c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801390e:	f107 0308 	add.w	r3, r7, #8
 8013912:	4619      	mov	r1, r3
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f7ff fd1b 	bl	8013350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801391a:	f241 3288 	movw	r2, #5000	; 0x1388
 801391e:	210d      	movs	r1, #13
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f000 f807 	bl	8013934 <SDMMC_GetCmdResp1>
 8013926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013928:	69fb      	ldr	r3, [r7, #28]
}
 801392a:	4618      	mov	r0, r3
 801392c:	3720      	adds	r7, #32
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}
	...

08013934 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b088      	sub	sp, #32
 8013938:	af00      	add	r7, sp, #0
 801393a:	60f8      	str	r0, [r7, #12]
 801393c:	460b      	mov	r3, r1
 801393e:	607a      	str	r2, [r7, #4]
 8013940:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8013942:	4b70      	ldr	r3, [pc, #448]	; (8013b04 <SDMMC_GetCmdResp1+0x1d0>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	4a70      	ldr	r2, [pc, #448]	; (8013b08 <SDMMC_GetCmdResp1+0x1d4>)
 8013948:	fba2 2303 	umull	r2, r3, r2, r3
 801394c:	0a5a      	lsrs	r2, r3, #9
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	fb02 f303 	mul.w	r3, r2, r3
 8013954:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013956:	69fb      	ldr	r3, [r7, #28]
 8013958:	1e5a      	subs	r2, r3, #1
 801395a:	61fa      	str	r2, [r7, #28]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d102      	bne.n	8013966 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013960:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013964:	e0c9      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801396a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801396c:	69ba      	ldr	r2, [r7, #24]
 801396e:	4b67      	ldr	r3, [pc, #412]	; (8013b0c <SDMMC_GetCmdResp1+0x1d8>)
 8013970:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013972:	2b00      	cmp	r3, #0
 8013974:	d0ef      	beq.n	8013956 <SDMMC_GetCmdResp1+0x22>
 8013976:	69bb      	ldr	r3, [r7, #24]
 8013978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801397c:	2b00      	cmp	r3, #0
 801397e:	d1ea      	bne.n	8013956 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013984:	f003 0304 	and.w	r3, r3, #4
 8013988:	2b00      	cmp	r3, #0
 801398a:	d004      	beq.n	8013996 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	2204      	movs	r2, #4
 8013990:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013992:	2304      	movs	r3, #4
 8013994:	e0b1      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801399a:	f003 0301 	and.w	r3, r3, #1
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d004      	beq.n	80139ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	2201      	movs	r2, #1
 80139a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80139a8:	2301      	movs	r3, #1
 80139aa:	e0a6      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	4a58      	ldr	r2, [pc, #352]	; (8013b10 <SDMMC_GetCmdResp1+0x1dc>)
 80139b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80139b2:	68f8      	ldr	r0, [r7, #12]
 80139b4:	f7ff fcf6 	bl	80133a4 <SDMMC_GetCommandResponse>
 80139b8:	4603      	mov	r3, r0
 80139ba:	461a      	mov	r2, r3
 80139bc:	7afb      	ldrb	r3, [r7, #11]
 80139be:	4293      	cmp	r3, r2
 80139c0:	d001      	beq.n	80139c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80139c2:	2301      	movs	r3, #1
 80139c4:	e099      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80139c6:	2100      	movs	r1, #0
 80139c8:	68f8      	ldr	r0, [r7, #12]
 80139ca:	f7ff fcf8 	bl	80133be <SDMMC_GetResponse>
 80139ce:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80139d0:	697a      	ldr	r2, [r7, #20]
 80139d2:	4b50      	ldr	r3, [pc, #320]	; (8013b14 <SDMMC_GetCmdResp1+0x1e0>)
 80139d4:	4013      	ands	r3, r2
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d101      	bne.n	80139de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80139da:	2300      	movs	r3, #0
 80139dc:	e08d      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	da02      	bge.n	80139ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80139e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80139e8:	e087      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80139ea:	697b      	ldr	r3, [r7, #20]
 80139ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d001      	beq.n	80139f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80139f4:	2340      	movs	r3, #64	; 0x40
 80139f6:	e080      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80139f8:	697b      	ldr	r3, [r7, #20]
 80139fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d001      	beq.n	8013a06 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013a02:	2380      	movs	r3, #128	; 0x80
 8013a04:	e079      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013a06:	697b      	ldr	r3, [r7, #20]
 8013a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d002      	beq.n	8013a16 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013a14:	e071      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d002      	beq.n	8013a26 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013a24:	e069      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013a26:	697b      	ldr	r3, [r7, #20]
 8013a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d002      	beq.n	8013a36 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013a34:	e061      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013a36:	697b      	ldr	r3, [r7, #20]
 8013a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d002      	beq.n	8013a46 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013a40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013a44:	e059      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013a46:	697b      	ldr	r3, [r7, #20]
 8013a48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d002      	beq.n	8013a56 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013a54:	e051      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d002      	beq.n	8013a66 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013a64:	e049      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d002      	beq.n	8013a76 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013a70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013a74:	e041      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013a76:	697b      	ldr	r3, [r7, #20]
 8013a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d002      	beq.n	8013a86 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013a84:	e039      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013a86:	697b      	ldr	r3, [r7, #20]
 8013a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d002      	beq.n	8013a96 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013a94:	e031      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d002      	beq.n	8013aa6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013aa0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013aa4:	e029      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013aa6:	697b      	ldr	r3, [r7, #20]
 8013aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d002      	beq.n	8013ab6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013ab0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013ab4:	e021      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013ab6:	697b      	ldr	r3, [r7, #20]
 8013ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d002      	beq.n	8013ac6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013ac0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013ac4:	e019      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d002      	beq.n	8013ad6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013ad0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013ad4:	e011      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013ad6:	697b      	ldr	r3, [r7, #20]
 8013ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d002      	beq.n	8013ae6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013ae0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013ae4:	e009      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8013ae6:	697b      	ldr	r3, [r7, #20]
 8013ae8:	f003 0308 	and.w	r3, r3, #8
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d002      	beq.n	8013af6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013af0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013af4:	e001      	b.n	8013afa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013af6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	3720      	adds	r7, #32
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}
 8013b02:	bf00      	nop
 8013b04:	24000100 	.word	0x24000100
 8013b08:	10624dd3 	.word	0x10624dd3
 8013b0c:	00200045 	.word	0x00200045
 8013b10:	002000c5 	.word	0x002000c5
 8013b14:	fdffe008 	.word	0xfdffe008

08013b18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013b18:	b480      	push	{r7}
 8013b1a:	b085      	sub	sp, #20
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013b20:	4b1f      	ldr	r3, [pc, #124]	; (8013ba0 <SDMMC_GetCmdResp2+0x88>)
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	4a1f      	ldr	r2, [pc, #124]	; (8013ba4 <SDMMC_GetCmdResp2+0x8c>)
 8013b26:	fba2 2303 	umull	r2, r3, r2, r3
 8013b2a:	0a5b      	lsrs	r3, r3, #9
 8013b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013b30:	fb02 f303 	mul.w	r3, r2, r3
 8013b34:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	1e5a      	subs	r2, r3, #1
 8013b3a:	60fa      	str	r2, [r7, #12]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d102      	bne.n	8013b46 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013b40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013b44:	e026      	b.n	8013b94 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b4a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d0ef      	beq.n	8013b36 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d1ea      	bne.n	8013b36 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b64:	f003 0304 	and.w	r3, r3, #4
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d004      	beq.n	8013b76 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2204      	movs	r2, #4
 8013b70:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013b72:	2304      	movs	r3, #4
 8013b74:	e00e      	b.n	8013b94 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b7a:	f003 0301 	and.w	r3, r3, #1
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d004      	beq.n	8013b8c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	2201      	movs	r2, #1
 8013b86:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013b88:	2301      	movs	r3, #1
 8013b8a:	e003      	b.n	8013b94 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	4a06      	ldr	r2, [pc, #24]	; (8013ba8 <SDMMC_GetCmdResp2+0x90>)
 8013b90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013b92:	2300      	movs	r3, #0
}
 8013b94:	4618      	mov	r0, r3
 8013b96:	3714      	adds	r7, #20
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9e:	4770      	bx	lr
 8013ba0:	24000100 	.word	0x24000100
 8013ba4:	10624dd3 	.word	0x10624dd3
 8013ba8:	002000c5 	.word	0x002000c5

08013bac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013bac:	b480      	push	{r7}
 8013bae:	b085      	sub	sp, #20
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013bb4:	4b1a      	ldr	r3, [pc, #104]	; (8013c20 <SDMMC_GetCmdResp3+0x74>)
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	4a1a      	ldr	r2, [pc, #104]	; (8013c24 <SDMMC_GetCmdResp3+0x78>)
 8013bba:	fba2 2303 	umull	r2, r3, r2, r3
 8013bbe:	0a5b      	lsrs	r3, r3, #9
 8013bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8013bc4:	fb02 f303 	mul.w	r3, r2, r3
 8013bc8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	1e5a      	subs	r2, r3, #1
 8013bce:	60fa      	str	r2, [r7, #12]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d102      	bne.n	8013bda <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013bd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013bd8:	e01b      	b.n	8013c12 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bde:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d0ef      	beq.n	8013bca <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d1ea      	bne.n	8013bca <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bf8:	f003 0304 	and.w	r3, r3, #4
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d004      	beq.n	8013c0a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2204      	movs	r2, #4
 8013c04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013c06:	2304      	movs	r3, #4
 8013c08:	e003      	b.n	8013c12 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	4a06      	ldr	r2, [pc, #24]	; (8013c28 <SDMMC_GetCmdResp3+0x7c>)
 8013c0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013c10:	2300      	movs	r3, #0
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	3714      	adds	r7, #20
 8013c16:	46bd      	mov	sp, r7
 8013c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1c:	4770      	bx	lr
 8013c1e:	bf00      	nop
 8013c20:	24000100 	.word	0x24000100
 8013c24:	10624dd3 	.word	0x10624dd3
 8013c28:	002000c5 	.word	0x002000c5

08013c2c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b088      	sub	sp, #32
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	60f8      	str	r0, [r7, #12]
 8013c34:	460b      	mov	r3, r1
 8013c36:	607a      	str	r2, [r7, #4]
 8013c38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013c3a:	4b35      	ldr	r3, [pc, #212]	; (8013d10 <SDMMC_GetCmdResp6+0xe4>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	4a35      	ldr	r2, [pc, #212]	; (8013d14 <SDMMC_GetCmdResp6+0xe8>)
 8013c40:	fba2 2303 	umull	r2, r3, r2, r3
 8013c44:	0a5b      	lsrs	r3, r3, #9
 8013c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8013c4a:	fb02 f303 	mul.w	r3, r2, r3
 8013c4e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013c50:	69fb      	ldr	r3, [r7, #28]
 8013c52:	1e5a      	subs	r2, r3, #1
 8013c54:	61fa      	str	r2, [r7, #28]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d102      	bne.n	8013c60 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013c5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013c5e:	e052      	b.n	8013d06 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c64:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013c66:	69bb      	ldr	r3, [r7, #24]
 8013c68:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d0ef      	beq.n	8013c50 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013c70:	69bb      	ldr	r3, [r7, #24]
 8013c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d1ea      	bne.n	8013c50 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c7e:	f003 0304 	and.w	r3, r3, #4
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d004      	beq.n	8013c90 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	2204      	movs	r2, #4
 8013c8a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013c8c:	2304      	movs	r3, #4
 8013c8e:	e03a      	b.n	8013d06 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c94:	f003 0301 	and.w	r3, r3, #1
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d004      	beq.n	8013ca6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	2201      	movs	r2, #1
 8013ca0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	e02f      	b.n	8013d06 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013ca6:	68f8      	ldr	r0, [r7, #12]
 8013ca8:	f7ff fb7c 	bl	80133a4 <SDMMC_GetCommandResponse>
 8013cac:	4603      	mov	r3, r0
 8013cae:	461a      	mov	r2, r3
 8013cb0:	7afb      	ldrb	r3, [r7, #11]
 8013cb2:	4293      	cmp	r3, r2
 8013cb4:	d001      	beq.n	8013cba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	e025      	b.n	8013d06 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	4a16      	ldr	r2, [pc, #88]	; (8013d18 <SDMMC_GetCmdResp6+0xec>)
 8013cbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013cc0:	2100      	movs	r1, #0
 8013cc2:	68f8      	ldr	r0, [r7, #12]
 8013cc4:	f7ff fb7b 	bl	80133be <SDMMC_GetResponse>
 8013cc8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8013cca:	697b      	ldr	r3, [r7, #20]
 8013ccc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d106      	bne.n	8013ce2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8013cd4:	697b      	ldr	r3, [r7, #20]
 8013cd6:	0c1b      	lsrs	r3, r3, #16
 8013cd8:	b29a      	uxth	r2, r3
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	e011      	b.n	8013d06 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d002      	beq.n	8013cf2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013cf0:	e009      	b.n	8013d06 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d002      	beq.n	8013d02 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013d00:	e001      	b.n	8013d06 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	3720      	adds	r7, #32
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bd80      	pop	{r7, pc}
 8013d0e:	bf00      	nop
 8013d10:	24000100 	.word	0x24000100
 8013d14:	10624dd3 	.word	0x10624dd3
 8013d18:	002000c5 	.word	0x002000c5

08013d1c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013d1c:	b480      	push	{r7}
 8013d1e:	b085      	sub	sp, #20
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013d24:	4b22      	ldr	r3, [pc, #136]	; (8013db0 <SDMMC_GetCmdResp7+0x94>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	4a22      	ldr	r2, [pc, #136]	; (8013db4 <SDMMC_GetCmdResp7+0x98>)
 8013d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8013d2e:	0a5b      	lsrs	r3, r3, #9
 8013d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8013d34:	fb02 f303 	mul.w	r3, r2, r3
 8013d38:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	1e5a      	subs	r2, r3, #1
 8013d3e:	60fa      	str	r2, [r7, #12]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d102      	bne.n	8013d4a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013d44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013d48:	e02c      	b.n	8013da4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d4e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d0ef      	beq.n	8013d3a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d1ea      	bne.n	8013d3a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d68:	f003 0304 	and.w	r3, r3, #4
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d004      	beq.n	8013d7a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	2204      	movs	r2, #4
 8013d74:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013d76:	2304      	movs	r3, #4
 8013d78:	e014      	b.n	8013da4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d7e:	f003 0301 	and.w	r3, r3, #1
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d004      	beq.n	8013d90 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2201      	movs	r2, #1
 8013d8a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013d8c:	2301      	movs	r3, #1
 8013d8e:	e009      	b.n	8013da4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d002      	beq.n	8013da2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2240      	movs	r2, #64	; 0x40
 8013da0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013da2:	2300      	movs	r3, #0

}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3714      	adds	r7, #20
 8013da8:	46bd      	mov	sp, r7
 8013daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dae:	4770      	bx	lr
 8013db0:	24000100 	.word	0x24000100
 8013db4:	10624dd3 	.word	0x10624dd3

08013db8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013db8:	b480      	push	{r7}
 8013dba:	b085      	sub	sp, #20
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013dc0:	4b11      	ldr	r3, [pc, #68]	; (8013e08 <SDMMC_GetCmdError+0x50>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	4a11      	ldr	r2, [pc, #68]	; (8013e0c <SDMMC_GetCmdError+0x54>)
 8013dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8013dca:	0a5b      	lsrs	r3, r3, #9
 8013dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8013dd0:	fb02 f303 	mul.w	r3, r2, r3
 8013dd4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	1e5a      	subs	r2, r3, #1
 8013dda:	60fa      	str	r2, [r7, #12]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d102      	bne.n	8013de6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013de0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013de4:	e009      	b.n	8013dfa <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d0f1      	beq.n	8013dd6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	4a06      	ldr	r2, [pc, #24]	; (8013e10 <SDMMC_GetCmdError+0x58>)
 8013df6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8013df8:	2300      	movs	r3, #0
}
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	3714      	adds	r7, #20
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e04:	4770      	bx	lr
 8013e06:	bf00      	nop
 8013e08:	24000100 	.word	0x24000100
 8013e0c:	10624dd3 	.word	0x10624dd3
 8013e10:	002000c5 	.word	0x002000c5

08013e14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013e14:	b084      	sub	sp, #16
 8013e16:	b580      	push	{r7, lr}
 8013e18:	b084      	sub	sp, #16
 8013e1a:	af00      	add	r7, sp, #0
 8013e1c:	6078      	str	r0, [r7, #4]
 8013e1e:	f107 001c 	add.w	r0, r7, #28
 8013e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e28:	2b01      	cmp	r3, #1
 8013e2a:	d120      	bne.n	8013e6e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	68da      	ldr	r2, [r3, #12]
 8013e3c:	4b2a      	ldr	r3, [pc, #168]	; (8013ee8 <USB_CoreInit+0xd4>)
 8013e3e:	4013      	ands	r3, r2
 8013e40:	687a      	ldr	r2, [r7, #4]
 8013e42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	68db      	ldr	r3, [r3, #12]
 8013e48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e52:	2b01      	cmp	r3, #1
 8013e54:	d105      	bne.n	8013e62 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	68db      	ldr	r3, [r3, #12]
 8013e5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013e62:	6878      	ldr	r0, [r7, #4]
 8013e64:	f001 faf8 	bl	8015458 <USB_CoreReset>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	73fb      	strb	r3, [r7, #15]
 8013e6c:	e01a      	b.n	8013ea4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	68db      	ldr	r3, [r3, #12]
 8013e72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f001 faec 	bl	8015458 <USB_CoreReset>
 8013e80:	4603      	mov	r3, r0
 8013e82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d106      	bne.n	8013e98 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	639a      	str	r2, [r3, #56]	; 0x38
 8013e96:	e005      	b.n	8013ea4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea6:	2b01      	cmp	r3, #1
 8013ea8:	d116      	bne.n	8013ed8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013eae:	b29a      	uxth	r2, r3
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013eb8:	4b0c      	ldr	r3, [pc, #48]	; (8013eec <USB_CoreInit+0xd8>)
 8013eba:	4313      	orrs	r3, r2
 8013ebc:	687a      	ldr	r2, [r7, #4]
 8013ebe:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	689b      	ldr	r3, [r3, #8]
 8013ec4:	f043 0206 	orr.w	r2, r3, #6
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	689b      	ldr	r3, [r3, #8]
 8013ed0:	f043 0220 	orr.w	r2, r3, #32
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3710      	adds	r7, #16
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013ee4:	b004      	add	sp, #16
 8013ee6:	4770      	bx	lr
 8013ee8:	ffbdffbf 	.word	0xffbdffbf
 8013eec:	03ee0000 	.word	0x03ee0000

08013ef0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013ef0:	b480      	push	{r7}
 8013ef2:	b087      	sub	sp, #28
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	60f8      	str	r0, [r7, #12]
 8013ef8:	60b9      	str	r1, [r7, #8]
 8013efa:	4613      	mov	r3, r2
 8013efc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013efe:	79fb      	ldrb	r3, [r7, #7]
 8013f00:	2b02      	cmp	r3, #2
 8013f02:	d165      	bne.n	8013fd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	4a41      	ldr	r2, [pc, #260]	; (801400c <USB_SetTurnaroundTime+0x11c>)
 8013f08:	4293      	cmp	r3, r2
 8013f0a:	d906      	bls.n	8013f1a <USB_SetTurnaroundTime+0x2a>
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	4a40      	ldr	r2, [pc, #256]	; (8014010 <USB_SetTurnaroundTime+0x120>)
 8013f10:	4293      	cmp	r3, r2
 8013f12:	d202      	bcs.n	8013f1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013f14:	230f      	movs	r3, #15
 8013f16:	617b      	str	r3, [r7, #20]
 8013f18:	e062      	b.n	8013fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	4a3c      	ldr	r2, [pc, #240]	; (8014010 <USB_SetTurnaroundTime+0x120>)
 8013f1e:	4293      	cmp	r3, r2
 8013f20:	d306      	bcc.n	8013f30 <USB_SetTurnaroundTime+0x40>
 8013f22:	68bb      	ldr	r3, [r7, #8]
 8013f24:	4a3b      	ldr	r2, [pc, #236]	; (8014014 <USB_SetTurnaroundTime+0x124>)
 8013f26:	4293      	cmp	r3, r2
 8013f28:	d202      	bcs.n	8013f30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013f2a:	230e      	movs	r3, #14
 8013f2c:	617b      	str	r3, [r7, #20]
 8013f2e:	e057      	b.n	8013fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	4a38      	ldr	r2, [pc, #224]	; (8014014 <USB_SetTurnaroundTime+0x124>)
 8013f34:	4293      	cmp	r3, r2
 8013f36:	d306      	bcc.n	8013f46 <USB_SetTurnaroundTime+0x56>
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	4a37      	ldr	r2, [pc, #220]	; (8014018 <USB_SetTurnaroundTime+0x128>)
 8013f3c:	4293      	cmp	r3, r2
 8013f3e:	d202      	bcs.n	8013f46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013f40:	230d      	movs	r3, #13
 8013f42:	617b      	str	r3, [r7, #20]
 8013f44:	e04c      	b.n	8013fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013f46:	68bb      	ldr	r3, [r7, #8]
 8013f48:	4a33      	ldr	r2, [pc, #204]	; (8014018 <USB_SetTurnaroundTime+0x128>)
 8013f4a:	4293      	cmp	r3, r2
 8013f4c:	d306      	bcc.n	8013f5c <USB_SetTurnaroundTime+0x6c>
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	4a32      	ldr	r2, [pc, #200]	; (801401c <USB_SetTurnaroundTime+0x12c>)
 8013f52:	4293      	cmp	r3, r2
 8013f54:	d802      	bhi.n	8013f5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013f56:	230c      	movs	r3, #12
 8013f58:	617b      	str	r3, [r7, #20]
 8013f5a:	e041      	b.n	8013fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013f5c:	68bb      	ldr	r3, [r7, #8]
 8013f5e:	4a2f      	ldr	r2, [pc, #188]	; (801401c <USB_SetTurnaroundTime+0x12c>)
 8013f60:	4293      	cmp	r3, r2
 8013f62:	d906      	bls.n	8013f72 <USB_SetTurnaroundTime+0x82>
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	4a2e      	ldr	r2, [pc, #184]	; (8014020 <USB_SetTurnaroundTime+0x130>)
 8013f68:	4293      	cmp	r3, r2
 8013f6a:	d802      	bhi.n	8013f72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013f6c:	230b      	movs	r3, #11
 8013f6e:	617b      	str	r3, [r7, #20]
 8013f70:	e036      	b.n	8013fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	4a2a      	ldr	r2, [pc, #168]	; (8014020 <USB_SetTurnaroundTime+0x130>)
 8013f76:	4293      	cmp	r3, r2
 8013f78:	d906      	bls.n	8013f88 <USB_SetTurnaroundTime+0x98>
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	4a29      	ldr	r2, [pc, #164]	; (8014024 <USB_SetTurnaroundTime+0x134>)
 8013f7e:	4293      	cmp	r3, r2
 8013f80:	d802      	bhi.n	8013f88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013f82:	230a      	movs	r3, #10
 8013f84:	617b      	str	r3, [r7, #20]
 8013f86:	e02b      	b.n	8013fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013f88:	68bb      	ldr	r3, [r7, #8]
 8013f8a:	4a26      	ldr	r2, [pc, #152]	; (8014024 <USB_SetTurnaroundTime+0x134>)
 8013f8c:	4293      	cmp	r3, r2
 8013f8e:	d906      	bls.n	8013f9e <USB_SetTurnaroundTime+0xae>
 8013f90:	68bb      	ldr	r3, [r7, #8]
 8013f92:	4a25      	ldr	r2, [pc, #148]	; (8014028 <USB_SetTurnaroundTime+0x138>)
 8013f94:	4293      	cmp	r3, r2
 8013f96:	d202      	bcs.n	8013f9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013f98:	2309      	movs	r3, #9
 8013f9a:	617b      	str	r3, [r7, #20]
 8013f9c:	e020      	b.n	8013fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013f9e:	68bb      	ldr	r3, [r7, #8]
 8013fa0:	4a21      	ldr	r2, [pc, #132]	; (8014028 <USB_SetTurnaroundTime+0x138>)
 8013fa2:	4293      	cmp	r3, r2
 8013fa4:	d306      	bcc.n	8013fb4 <USB_SetTurnaroundTime+0xc4>
 8013fa6:	68bb      	ldr	r3, [r7, #8]
 8013fa8:	4a20      	ldr	r2, [pc, #128]	; (801402c <USB_SetTurnaroundTime+0x13c>)
 8013faa:	4293      	cmp	r3, r2
 8013fac:	d802      	bhi.n	8013fb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013fae:	2308      	movs	r3, #8
 8013fb0:	617b      	str	r3, [r7, #20]
 8013fb2:	e015      	b.n	8013fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	4a1d      	ldr	r2, [pc, #116]	; (801402c <USB_SetTurnaroundTime+0x13c>)
 8013fb8:	4293      	cmp	r3, r2
 8013fba:	d906      	bls.n	8013fca <USB_SetTurnaroundTime+0xda>
 8013fbc:	68bb      	ldr	r3, [r7, #8]
 8013fbe:	4a1c      	ldr	r2, [pc, #112]	; (8014030 <USB_SetTurnaroundTime+0x140>)
 8013fc0:	4293      	cmp	r3, r2
 8013fc2:	d202      	bcs.n	8013fca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013fc4:	2307      	movs	r3, #7
 8013fc6:	617b      	str	r3, [r7, #20]
 8013fc8:	e00a      	b.n	8013fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013fca:	2306      	movs	r3, #6
 8013fcc:	617b      	str	r3, [r7, #20]
 8013fce:	e007      	b.n	8013fe0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013fd0:	79fb      	ldrb	r3, [r7, #7]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d102      	bne.n	8013fdc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013fd6:	2309      	movs	r3, #9
 8013fd8:	617b      	str	r3, [r7, #20]
 8013fda:	e001      	b.n	8013fe0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013fdc:	2309      	movs	r3, #9
 8013fde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	68db      	ldr	r3, [r3, #12]
 8013fe4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	68da      	ldr	r2, [r3, #12]
 8013ff0:	697b      	ldr	r3, [r7, #20]
 8013ff2:	029b      	lsls	r3, r3, #10
 8013ff4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013ff8:	431a      	orrs	r2, r3
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013ffe:	2300      	movs	r3, #0
}
 8014000:	4618      	mov	r0, r3
 8014002:	371c      	adds	r7, #28
 8014004:	46bd      	mov	sp, r7
 8014006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400a:	4770      	bx	lr
 801400c:	00d8acbf 	.word	0x00d8acbf
 8014010:	00e4e1c0 	.word	0x00e4e1c0
 8014014:	00f42400 	.word	0x00f42400
 8014018:	01067380 	.word	0x01067380
 801401c:	011a499f 	.word	0x011a499f
 8014020:	01312cff 	.word	0x01312cff
 8014024:	014ca43f 	.word	0x014ca43f
 8014028:	016e3600 	.word	0x016e3600
 801402c:	01a6ab1f 	.word	0x01a6ab1f
 8014030:	01e84800 	.word	0x01e84800

08014034 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014034:	b480      	push	{r7}
 8014036:	b083      	sub	sp, #12
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	689b      	ldr	r3, [r3, #8]
 8014040:	f043 0201 	orr.w	r2, r3, #1
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014048:	2300      	movs	r3, #0
}
 801404a:	4618      	mov	r0, r3
 801404c:	370c      	adds	r7, #12
 801404e:	46bd      	mov	sp, r7
 8014050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014054:	4770      	bx	lr

08014056 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014056:	b480      	push	{r7}
 8014058:	b083      	sub	sp, #12
 801405a:	af00      	add	r7, sp, #0
 801405c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	689b      	ldr	r3, [r3, #8]
 8014062:	f023 0201 	bic.w	r2, r3, #1
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801406a:	2300      	movs	r3, #0
}
 801406c:	4618      	mov	r0, r3
 801406e:	370c      	adds	r7, #12
 8014070:	46bd      	mov	sp, r7
 8014072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014076:	4770      	bx	lr

08014078 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b084      	sub	sp, #16
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
 8014080:	460b      	mov	r3, r1
 8014082:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014084:	2300      	movs	r3, #0
 8014086:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	68db      	ldr	r3, [r3, #12]
 801408c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014094:	78fb      	ldrb	r3, [r7, #3]
 8014096:	2b01      	cmp	r3, #1
 8014098:	d115      	bne.n	80140c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	68db      	ldr	r3, [r3, #12]
 801409e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80140a6:	2001      	movs	r0, #1
 80140a8:	f7f0 f8ac 	bl	8004204 <HAL_Delay>
      ms++;
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	3301      	adds	r3, #1
 80140b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80140b2:	6878      	ldr	r0, [r7, #4]
 80140b4:	f001 f93f 	bl	8015336 <USB_GetMode>
 80140b8:	4603      	mov	r3, r0
 80140ba:	2b01      	cmp	r3, #1
 80140bc:	d01e      	beq.n	80140fc <USB_SetCurrentMode+0x84>
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	2b31      	cmp	r3, #49	; 0x31
 80140c2:	d9f0      	bls.n	80140a6 <USB_SetCurrentMode+0x2e>
 80140c4:	e01a      	b.n	80140fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80140c6:	78fb      	ldrb	r3, [r7, #3]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d115      	bne.n	80140f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	68db      	ldr	r3, [r3, #12]
 80140d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80140d8:	2001      	movs	r0, #1
 80140da:	f7f0 f893 	bl	8004204 <HAL_Delay>
      ms++;
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	3301      	adds	r3, #1
 80140e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80140e4:	6878      	ldr	r0, [r7, #4]
 80140e6:	f001 f926 	bl	8015336 <USB_GetMode>
 80140ea:	4603      	mov	r3, r0
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d005      	beq.n	80140fc <USB_SetCurrentMode+0x84>
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	2b31      	cmp	r3, #49	; 0x31
 80140f4:	d9f0      	bls.n	80140d8 <USB_SetCurrentMode+0x60>
 80140f6:	e001      	b.n	80140fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80140f8:	2301      	movs	r3, #1
 80140fa:	e005      	b.n	8014108 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	2b32      	cmp	r3, #50	; 0x32
 8014100:	d101      	bne.n	8014106 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014102:	2301      	movs	r3, #1
 8014104:	e000      	b.n	8014108 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014106:	2300      	movs	r3, #0
}
 8014108:	4618      	mov	r0, r3
 801410a:	3710      	adds	r7, #16
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}

08014110 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014110:	b084      	sub	sp, #16
 8014112:	b580      	push	{r7, lr}
 8014114:	b086      	sub	sp, #24
 8014116:	af00      	add	r7, sp, #0
 8014118:	6078      	str	r0, [r7, #4]
 801411a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801411e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014122:	2300      	movs	r3, #0
 8014124:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801412a:	2300      	movs	r3, #0
 801412c:	613b      	str	r3, [r7, #16]
 801412e:	e009      	b.n	8014144 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014130:	687a      	ldr	r2, [r7, #4]
 8014132:	693b      	ldr	r3, [r7, #16]
 8014134:	3340      	adds	r3, #64	; 0x40
 8014136:	009b      	lsls	r3, r3, #2
 8014138:	4413      	add	r3, r2
 801413a:	2200      	movs	r2, #0
 801413c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801413e:	693b      	ldr	r3, [r7, #16]
 8014140:	3301      	adds	r3, #1
 8014142:	613b      	str	r3, [r7, #16]
 8014144:	693b      	ldr	r3, [r7, #16]
 8014146:	2b0e      	cmp	r3, #14
 8014148:	d9f2      	bls.n	8014130 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801414a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801414c:	2b00      	cmp	r3, #0
 801414e:	d11c      	bne.n	801418a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014156:	685b      	ldr	r3, [r3, #4]
 8014158:	68fa      	ldr	r2, [r7, #12]
 801415a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801415e:	f043 0302 	orr.w	r3, r3, #2
 8014162:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014168:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	601a      	str	r2, [r3, #0]
 8014188:	e005      	b.n	8014196 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801418e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801419c:	461a      	mov	r2, r3
 801419e:	2300      	movs	r3, #0
 80141a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141a8:	4619      	mov	r1, r3
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141b0:	461a      	mov	r2, r3
 80141b2:	680b      	ldr	r3, [r1, #0]
 80141b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80141b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b8:	2b01      	cmp	r3, #1
 80141ba:	d10c      	bne.n	80141d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80141bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d104      	bne.n	80141cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80141c2:	2100      	movs	r1, #0
 80141c4:	6878      	ldr	r0, [r7, #4]
 80141c6:	f000 f965 	bl	8014494 <USB_SetDevSpeed>
 80141ca:	e008      	b.n	80141de <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80141cc:	2101      	movs	r1, #1
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f000 f960 	bl	8014494 <USB_SetDevSpeed>
 80141d4:	e003      	b.n	80141de <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80141d6:	2103      	movs	r1, #3
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f000 f95b 	bl	8014494 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80141de:	2110      	movs	r1, #16
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f000 f8f3 	bl	80143cc <USB_FlushTxFifo>
 80141e6:	4603      	mov	r3, r0
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d001      	beq.n	80141f0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80141ec:	2301      	movs	r3, #1
 80141ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80141f0:	6878      	ldr	r0, [r7, #4]
 80141f2:	f000 f91f 	bl	8014434 <USB_FlushRxFifo>
 80141f6:	4603      	mov	r3, r0
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d001      	beq.n	8014200 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80141fc:	2301      	movs	r3, #1
 80141fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014206:	461a      	mov	r2, r3
 8014208:	2300      	movs	r3, #0
 801420a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014212:	461a      	mov	r2, r3
 8014214:	2300      	movs	r3, #0
 8014216:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801421e:	461a      	mov	r2, r3
 8014220:	2300      	movs	r3, #0
 8014222:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014224:	2300      	movs	r3, #0
 8014226:	613b      	str	r3, [r7, #16]
 8014228:	e043      	b.n	80142b2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801422a:	693b      	ldr	r3, [r7, #16]
 801422c:	015a      	lsls	r2, r3, #5
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	4413      	add	r3, r2
 8014232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801423c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014240:	d118      	bne.n	8014274 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8014242:	693b      	ldr	r3, [r7, #16]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d10a      	bne.n	801425e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014248:	693b      	ldr	r3, [r7, #16]
 801424a:	015a      	lsls	r2, r3, #5
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	4413      	add	r3, r2
 8014250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014254:	461a      	mov	r2, r3
 8014256:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801425a:	6013      	str	r3, [r2, #0]
 801425c:	e013      	b.n	8014286 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801425e:	693b      	ldr	r3, [r7, #16]
 8014260:	015a      	lsls	r2, r3, #5
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	4413      	add	r3, r2
 8014266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801426a:	461a      	mov	r2, r3
 801426c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014270:	6013      	str	r3, [r2, #0]
 8014272:	e008      	b.n	8014286 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014274:	693b      	ldr	r3, [r7, #16]
 8014276:	015a      	lsls	r2, r3, #5
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	4413      	add	r3, r2
 801427c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014280:	461a      	mov	r2, r3
 8014282:	2300      	movs	r3, #0
 8014284:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014286:	693b      	ldr	r3, [r7, #16]
 8014288:	015a      	lsls	r2, r3, #5
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	4413      	add	r3, r2
 801428e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014292:	461a      	mov	r2, r3
 8014294:	2300      	movs	r3, #0
 8014296:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014298:	693b      	ldr	r3, [r7, #16]
 801429a:	015a      	lsls	r2, r3, #5
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	4413      	add	r3, r2
 80142a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142a4:	461a      	mov	r2, r3
 80142a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80142aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80142ac:	693b      	ldr	r3, [r7, #16]
 80142ae:	3301      	adds	r3, #1
 80142b0:	613b      	str	r3, [r7, #16]
 80142b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142b4:	693a      	ldr	r2, [r7, #16]
 80142b6:	429a      	cmp	r2, r3
 80142b8:	d3b7      	bcc.n	801422a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80142ba:	2300      	movs	r3, #0
 80142bc:	613b      	str	r3, [r7, #16]
 80142be:	e043      	b.n	8014348 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80142c0:	693b      	ldr	r3, [r7, #16]
 80142c2:	015a      	lsls	r2, r3, #5
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	4413      	add	r3, r2
 80142c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80142d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80142d6:	d118      	bne.n	801430a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80142d8:	693b      	ldr	r3, [r7, #16]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d10a      	bne.n	80142f4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80142de:	693b      	ldr	r3, [r7, #16]
 80142e0:	015a      	lsls	r2, r3, #5
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	4413      	add	r3, r2
 80142e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142ea:	461a      	mov	r2, r3
 80142ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80142f0:	6013      	str	r3, [r2, #0]
 80142f2:	e013      	b.n	801431c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80142f4:	693b      	ldr	r3, [r7, #16]
 80142f6:	015a      	lsls	r2, r3, #5
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	4413      	add	r3, r2
 80142fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014300:	461a      	mov	r2, r3
 8014302:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014306:	6013      	str	r3, [r2, #0]
 8014308:	e008      	b.n	801431c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801430a:	693b      	ldr	r3, [r7, #16]
 801430c:	015a      	lsls	r2, r3, #5
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	4413      	add	r3, r2
 8014312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014316:	461a      	mov	r2, r3
 8014318:	2300      	movs	r3, #0
 801431a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801431c:	693b      	ldr	r3, [r7, #16]
 801431e:	015a      	lsls	r2, r3, #5
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	4413      	add	r3, r2
 8014324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014328:	461a      	mov	r2, r3
 801432a:	2300      	movs	r3, #0
 801432c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801432e:	693b      	ldr	r3, [r7, #16]
 8014330:	015a      	lsls	r2, r3, #5
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	4413      	add	r3, r2
 8014336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801433a:	461a      	mov	r2, r3
 801433c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8014340:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	3301      	adds	r3, #1
 8014346:	613b      	str	r3, [r7, #16]
 8014348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434a:	693a      	ldr	r2, [r7, #16]
 801434c:	429a      	cmp	r2, r3
 801434e:	d3b7      	bcc.n	80142c0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014356:	691b      	ldr	r3, [r3, #16]
 8014358:	68fa      	ldr	r2, [r7, #12]
 801435a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801435e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014362:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	2200      	movs	r2, #0
 8014368:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8014370:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014374:	2b00      	cmp	r3, #0
 8014376:	d105      	bne.n	8014384 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	699b      	ldr	r3, [r3, #24]
 801437c:	f043 0210 	orr.w	r2, r3, #16
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	699a      	ldr	r2, [r3, #24]
 8014388:	4b0e      	ldr	r3, [pc, #56]	; (80143c4 <USB_DevInit+0x2b4>)
 801438a:	4313      	orrs	r3, r2
 801438c:	687a      	ldr	r2, [r7, #4]
 801438e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8014390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014392:	2b00      	cmp	r3, #0
 8014394:	d005      	beq.n	80143a2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	699b      	ldr	r3, [r3, #24]
 801439a:	f043 0208 	orr.w	r2, r3, #8
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80143a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143a4:	2b01      	cmp	r3, #1
 80143a6:	d105      	bne.n	80143b4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	699a      	ldr	r2, [r3, #24]
 80143ac:	4b06      	ldr	r3, [pc, #24]	; (80143c8 <USB_DevInit+0x2b8>)
 80143ae:	4313      	orrs	r3, r2
 80143b0:	687a      	ldr	r2, [r7, #4]
 80143b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80143b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80143b6:	4618      	mov	r0, r3
 80143b8:	3718      	adds	r7, #24
 80143ba:	46bd      	mov	sp, r7
 80143bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80143c0:	b004      	add	sp, #16
 80143c2:	4770      	bx	lr
 80143c4:	803c3800 	.word	0x803c3800
 80143c8:	40000004 	.word	0x40000004

080143cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80143cc:	b480      	push	{r7}
 80143ce:	b085      	sub	sp, #20
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80143d6:	2300      	movs	r3, #0
 80143d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	3301      	adds	r3, #1
 80143de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	4a13      	ldr	r2, [pc, #76]	; (8014430 <USB_FlushTxFifo+0x64>)
 80143e4:	4293      	cmp	r3, r2
 80143e6:	d901      	bls.n	80143ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80143e8:	2303      	movs	r3, #3
 80143ea:	e01b      	b.n	8014424 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	691b      	ldr	r3, [r3, #16]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	daf2      	bge.n	80143da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80143f4:	2300      	movs	r3, #0
 80143f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	019b      	lsls	r3, r3, #6
 80143fc:	f043 0220 	orr.w	r2, r3, #32
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	3301      	adds	r3, #1
 8014408:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	4a08      	ldr	r2, [pc, #32]	; (8014430 <USB_FlushTxFifo+0x64>)
 801440e:	4293      	cmp	r3, r2
 8014410:	d901      	bls.n	8014416 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014412:	2303      	movs	r3, #3
 8014414:	e006      	b.n	8014424 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	691b      	ldr	r3, [r3, #16]
 801441a:	f003 0320 	and.w	r3, r3, #32
 801441e:	2b20      	cmp	r3, #32
 8014420:	d0f0      	beq.n	8014404 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014422:	2300      	movs	r3, #0
}
 8014424:	4618      	mov	r0, r3
 8014426:	3714      	adds	r7, #20
 8014428:	46bd      	mov	sp, r7
 801442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442e:	4770      	bx	lr
 8014430:	00030d40 	.word	0x00030d40

08014434 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014434:	b480      	push	{r7}
 8014436:	b085      	sub	sp, #20
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801443c:	2300      	movs	r3, #0
 801443e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	3301      	adds	r3, #1
 8014444:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	4a11      	ldr	r2, [pc, #68]	; (8014490 <USB_FlushRxFifo+0x5c>)
 801444a:	4293      	cmp	r3, r2
 801444c:	d901      	bls.n	8014452 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801444e:	2303      	movs	r3, #3
 8014450:	e018      	b.n	8014484 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	691b      	ldr	r3, [r3, #16]
 8014456:	2b00      	cmp	r3, #0
 8014458:	daf2      	bge.n	8014440 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801445a:	2300      	movs	r3, #0
 801445c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	2210      	movs	r2, #16
 8014462:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	3301      	adds	r3, #1
 8014468:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	4a08      	ldr	r2, [pc, #32]	; (8014490 <USB_FlushRxFifo+0x5c>)
 801446e:	4293      	cmp	r3, r2
 8014470:	d901      	bls.n	8014476 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8014472:	2303      	movs	r3, #3
 8014474:	e006      	b.n	8014484 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	691b      	ldr	r3, [r3, #16]
 801447a:	f003 0310 	and.w	r3, r3, #16
 801447e:	2b10      	cmp	r3, #16
 8014480:	d0f0      	beq.n	8014464 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8014482:	2300      	movs	r3, #0
}
 8014484:	4618      	mov	r0, r3
 8014486:	3714      	adds	r7, #20
 8014488:	46bd      	mov	sp, r7
 801448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448e:	4770      	bx	lr
 8014490:	00030d40 	.word	0x00030d40

08014494 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014494:	b480      	push	{r7}
 8014496:	b085      	sub	sp, #20
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
 801449c:	460b      	mov	r3, r1
 801449e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144aa:	681a      	ldr	r2, [r3, #0]
 80144ac:	78fb      	ldrb	r3, [r7, #3]
 80144ae:	68f9      	ldr	r1, [r7, #12]
 80144b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80144b4:	4313      	orrs	r3, r2
 80144b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80144b8:	2300      	movs	r3, #0
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3714      	adds	r7, #20
 80144be:	46bd      	mov	sp, r7
 80144c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c4:	4770      	bx	lr

080144c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80144c6:	b480      	push	{r7}
 80144c8:	b087      	sub	sp, #28
 80144ca:	af00      	add	r7, sp, #0
 80144cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80144d2:	693b      	ldr	r3, [r7, #16]
 80144d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144d8:	689b      	ldr	r3, [r3, #8]
 80144da:	f003 0306 	and.w	r3, r3, #6
 80144de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d102      	bne.n	80144ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80144e6:	2300      	movs	r3, #0
 80144e8:	75fb      	strb	r3, [r7, #23]
 80144ea:	e00a      	b.n	8014502 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	2b02      	cmp	r3, #2
 80144f0:	d002      	beq.n	80144f8 <USB_GetDevSpeed+0x32>
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	2b06      	cmp	r3, #6
 80144f6:	d102      	bne.n	80144fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80144f8:	2302      	movs	r3, #2
 80144fa:	75fb      	strb	r3, [r7, #23]
 80144fc:	e001      	b.n	8014502 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80144fe:	230f      	movs	r3, #15
 8014500:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014502:	7dfb      	ldrb	r3, [r7, #23]
}
 8014504:	4618      	mov	r0, r3
 8014506:	371c      	adds	r7, #28
 8014508:	46bd      	mov	sp, r7
 801450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450e:	4770      	bx	lr

08014510 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014510:	b480      	push	{r7}
 8014512:	b085      	sub	sp, #20
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
 8014518:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	785b      	ldrb	r3, [r3, #1]
 8014528:	2b01      	cmp	r3, #1
 801452a:	d139      	bne.n	80145a0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014532:	69da      	ldr	r2, [r3, #28]
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	781b      	ldrb	r3, [r3, #0]
 8014538:	f003 030f 	and.w	r3, r3, #15
 801453c:	2101      	movs	r1, #1
 801453e:	fa01 f303 	lsl.w	r3, r1, r3
 8014542:	b29b      	uxth	r3, r3
 8014544:	68f9      	ldr	r1, [r7, #12]
 8014546:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801454a:	4313      	orrs	r3, r2
 801454c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801454e:	68bb      	ldr	r3, [r7, #8]
 8014550:	015a      	lsls	r2, r3, #5
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	4413      	add	r3, r2
 8014556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014560:	2b00      	cmp	r3, #0
 8014562:	d153      	bne.n	801460c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	015a      	lsls	r2, r3, #5
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	4413      	add	r3, r2
 801456c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014570:	681a      	ldr	r2, [r3, #0]
 8014572:	683b      	ldr	r3, [r7, #0]
 8014574:	689b      	ldr	r3, [r3, #8]
 8014576:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	791b      	ldrb	r3, [r3, #4]
 801457e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014580:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	059b      	lsls	r3, r3, #22
 8014586:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014588:	431a      	orrs	r2, r3
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	0159      	lsls	r1, r3, #5
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	440b      	add	r3, r1
 8014592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014596:	4619      	mov	r1, r3
 8014598:	4b20      	ldr	r3, [pc, #128]	; (801461c <USB_ActivateEndpoint+0x10c>)
 801459a:	4313      	orrs	r3, r2
 801459c:	600b      	str	r3, [r1, #0]
 801459e:	e035      	b.n	801460c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145a6:	69da      	ldr	r2, [r3, #28]
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	781b      	ldrb	r3, [r3, #0]
 80145ac:	f003 030f 	and.w	r3, r3, #15
 80145b0:	2101      	movs	r1, #1
 80145b2:	fa01 f303 	lsl.w	r3, r1, r3
 80145b6:	041b      	lsls	r3, r3, #16
 80145b8:	68f9      	ldr	r1, [r7, #12]
 80145ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80145be:	4313      	orrs	r3, r2
 80145c0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80145c2:	68bb      	ldr	r3, [r7, #8]
 80145c4:	015a      	lsls	r2, r3, #5
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	4413      	add	r3, r2
 80145ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d119      	bne.n	801460c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80145d8:	68bb      	ldr	r3, [r7, #8]
 80145da:	015a      	lsls	r2, r3, #5
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	4413      	add	r3, r2
 80145e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145e4:	681a      	ldr	r2, [r3, #0]
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	689b      	ldr	r3, [r3, #8]
 80145ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	791b      	ldrb	r3, [r3, #4]
 80145f2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80145f4:	430b      	orrs	r3, r1
 80145f6:	431a      	orrs	r2, r3
 80145f8:	68bb      	ldr	r3, [r7, #8]
 80145fa:	0159      	lsls	r1, r3, #5
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	440b      	add	r3, r1
 8014600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014604:	4619      	mov	r1, r3
 8014606:	4b05      	ldr	r3, [pc, #20]	; (801461c <USB_ActivateEndpoint+0x10c>)
 8014608:	4313      	orrs	r3, r2
 801460a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801460c:	2300      	movs	r3, #0
}
 801460e:	4618      	mov	r0, r3
 8014610:	3714      	adds	r7, #20
 8014612:	46bd      	mov	sp, r7
 8014614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014618:	4770      	bx	lr
 801461a:	bf00      	nop
 801461c:	10008000 	.word	0x10008000

08014620 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014620:	b480      	push	{r7}
 8014622:	b085      	sub	sp, #20
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
 8014628:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801462e:	683b      	ldr	r3, [r7, #0]
 8014630:	781b      	ldrb	r3, [r3, #0]
 8014632:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014634:	683b      	ldr	r3, [r7, #0]
 8014636:	785b      	ldrb	r3, [r3, #1]
 8014638:	2b01      	cmp	r3, #1
 801463a:	d161      	bne.n	8014700 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801463c:	68bb      	ldr	r3, [r7, #8]
 801463e:	015a      	lsls	r2, r3, #5
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	4413      	add	r3, r2
 8014644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801464e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014652:	d11f      	bne.n	8014694 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	015a      	lsls	r2, r3, #5
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	4413      	add	r3, r2
 801465c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	68ba      	ldr	r2, [r7, #8]
 8014664:	0151      	lsls	r1, r2, #5
 8014666:	68fa      	ldr	r2, [r7, #12]
 8014668:	440a      	add	r2, r1
 801466a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801466e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014672:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	015a      	lsls	r2, r3, #5
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	4413      	add	r3, r2
 801467c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	68ba      	ldr	r2, [r7, #8]
 8014684:	0151      	lsls	r1, r2, #5
 8014686:	68fa      	ldr	r2, [r7, #12]
 8014688:	440a      	add	r2, r1
 801468a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801468e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014692:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801469a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	f003 030f 	and.w	r3, r3, #15
 80146a4:	2101      	movs	r1, #1
 80146a6:	fa01 f303 	lsl.w	r3, r1, r3
 80146aa:	b29b      	uxth	r3, r3
 80146ac:	43db      	mvns	r3, r3
 80146ae:	68f9      	ldr	r1, [r7, #12]
 80146b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80146b4:	4013      	ands	r3, r2
 80146b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80146be:	69da      	ldr	r2, [r3, #28]
 80146c0:	683b      	ldr	r3, [r7, #0]
 80146c2:	781b      	ldrb	r3, [r3, #0]
 80146c4:	f003 030f 	and.w	r3, r3, #15
 80146c8:	2101      	movs	r1, #1
 80146ca:	fa01 f303 	lsl.w	r3, r1, r3
 80146ce:	b29b      	uxth	r3, r3
 80146d0:	43db      	mvns	r3, r3
 80146d2:	68f9      	ldr	r1, [r7, #12]
 80146d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80146d8:	4013      	ands	r3, r2
 80146da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80146dc:	68bb      	ldr	r3, [r7, #8]
 80146de:	015a      	lsls	r2, r3, #5
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	4413      	add	r3, r2
 80146e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146e8:	681a      	ldr	r2, [r3, #0]
 80146ea:	68bb      	ldr	r3, [r7, #8]
 80146ec:	0159      	lsls	r1, r3, #5
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	440b      	add	r3, r1
 80146f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146f6:	4619      	mov	r1, r3
 80146f8:	4b35      	ldr	r3, [pc, #212]	; (80147d0 <USB_DeactivateEndpoint+0x1b0>)
 80146fa:	4013      	ands	r3, r2
 80146fc:	600b      	str	r3, [r1, #0]
 80146fe:	e060      	b.n	80147c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	015a      	lsls	r2, r3, #5
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	4413      	add	r3, r2
 8014708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014716:	d11f      	bne.n	8014758 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014718:	68bb      	ldr	r3, [r7, #8]
 801471a:	015a      	lsls	r2, r3, #5
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	4413      	add	r3, r2
 8014720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	68ba      	ldr	r2, [r7, #8]
 8014728:	0151      	lsls	r1, r2, #5
 801472a:	68fa      	ldr	r2, [r7, #12]
 801472c:	440a      	add	r2, r1
 801472e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014732:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014736:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014738:	68bb      	ldr	r3, [r7, #8]
 801473a:	015a      	lsls	r2, r3, #5
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	4413      	add	r3, r2
 8014740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	68ba      	ldr	r2, [r7, #8]
 8014748:	0151      	lsls	r1, r2, #5
 801474a:	68fa      	ldr	r2, [r7, #12]
 801474c:	440a      	add	r2, r1
 801474e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014752:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014756:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801475e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	781b      	ldrb	r3, [r3, #0]
 8014764:	f003 030f 	and.w	r3, r3, #15
 8014768:	2101      	movs	r1, #1
 801476a:	fa01 f303 	lsl.w	r3, r1, r3
 801476e:	041b      	lsls	r3, r3, #16
 8014770:	43db      	mvns	r3, r3
 8014772:	68f9      	ldr	r1, [r7, #12]
 8014774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014778:	4013      	ands	r3, r2
 801477a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014782:	69da      	ldr	r2, [r3, #28]
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	f003 030f 	and.w	r3, r3, #15
 801478c:	2101      	movs	r1, #1
 801478e:	fa01 f303 	lsl.w	r3, r1, r3
 8014792:	041b      	lsls	r3, r3, #16
 8014794:	43db      	mvns	r3, r3
 8014796:	68f9      	ldr	r1, [r7, #12]
 8014798:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801479c:	4013      	ands	r3, r2
 801479e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	015a      	lsls	r2, r3, #5
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	4413      	add	r3, r2
 80147a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147ac:	681a      	ldr	r2, [r3, #0]
 80147ae:	68bb      	ldr	r3, [r7, #8]
 80147b0:	0159      	lsls	r1, r3, #5
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	440b      	add	r3, r1
 80147b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147ba:	4619      	mov	r1, r3
 80147bc:	4b05      	ldr	r3, [pc, #20]	; (80147d4 <USB_DeactivateEndpoint+0x1b4>)
 80147be:	4013      	ands	r3, r2
 80147c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80147c2:	2300      	movs	r3, #0
}
 80147c4:	4618      	mov	r0, r3
 80147c6:	3714      	adds	r7, #20
 80147c8:	46bd      	mov	sp, r7
 80147ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ce:	4770      	bx	lr
 80147d0:	ec337800 	.word	0xec337800
 80147d4:	eff37800 	.word	0xeff37800

080147d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b08a      	sub	sp, #40	; 0x28
 80147dc:	af02      	add	r7, sp, #8
 80147de:	60f8      	str	r0, [r7, #12]
 80147e0:	60b9      	str	r1, [r7, #8]
 80147e2:	4613      	mov	r3, r2
 80147e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80147ea:	68bb      	ldr	r3, [r7, #8]
 80147ec:	781b      	ldrb	r3, [r3, #0]
 80147ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80147f0:	68bb      	ldr	r3, [r7, #8]
 80147f2:	785b      	ldrb	r3, [r3, #1]
 80147f4:	2b01      	cmp	r3, #1
 80147f6:	f040 8181 	bne.w	8014afc <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80147fa:	68bb      	ldr	r3, [r7, #8]
 80147fc:	691b      	ldr	r3, [r3, #16]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d132      	bne.n	8014868 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014802:	69bb      	ldr	r3, [r7, #24]
 8014804:	015a      	lsls	r2, r3, #5
 8014806:	69fb      	ldr	r3, [r7, #28]
 8014808:	4413      	add	r3, r2
 801480a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801480e:	691a      	ldr	r2, [r3, #16]
 8014810:	69bb      	ldr	r3, [r7, #24]
 8014812:	0159      	lsls	r1, r3, #5
 8014814:	69fb      	ldr	r3, [r7, #28]
 8014816:	440b      	add	r3, r1
 8014818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801481c:	4619      	mov	r1, r3
 801481e:	4ba5      	ldr	r3, [pc, #660]	; (8014ab4 <USB_EPStartXfer+0x2dc>)
 8014820:	4013      	ands	r3, r2
 8014822:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014824:	69bb      	ldr	r3, [r7, #24]
 8014826:	015a      	lsls	r2, r3, #5
 8014828:	69fb      	ldr	r3, [r7, #28]
 801482a:	4413      	add	r3, r2
 801482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014830:	691b      	ldr	r3, [r3, #16]
 8014832:	69ba      	ldr	r2, [r7, #24]
 8014834:	0151      	lsls	r1, r2, #5
 8014836:	69fa      	ldr	r2, [r7, #28]
 8014838:	440a      	add	r2, r1
 801483a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801483e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014842:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014844:	69bb      	ldr	r3, [r7, #24]
 8014846:	015a      	lsls	r2, r3, #5
 8014848:	69fb      	ldr	r3, [r7, #28]
 801484a:	4413      	add	r3, r2
 801484c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014850:	691a      	ldr	r2, [r3, #16]
 8014852:	69bb      	ldr	r3, [r7, #24]
 8014854:	0159      	lsls	r1, r3, #5
 8014856:	69fb      	ldr	r3, [r7, #28]
 8014858:	440b      	add	r3, r1
 801485a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801485e:	4619      	mov	r1, r3
 8014860:	4b95      	ldr	r3, [pc, #596]	; (8014ab8 <USB_EPStartXfer+0x2e0>)
 8014862:	4013      	ands	r3, r2
 8014864:	610b      	str	r3, [r1, #16]
 8014866:	e092      	b.n	801498e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014868:	69bb      	ldr	r3, [r7, #24]
 801486a:	015a      	lsls	r2, r3, #5
 801486c:	69fb      	ldr	r3, [r7, #28]
 801486e:	4413      	add	r3, r2
 8014870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014874:	691a      	ldr	r2, [r3, #16]
 8014876:	69bb      	ldr	r3, [r7, #24]
 8014878:	0159      	lsls	r1, r3, #5
 801487a:	69fb      	ldr	r3, [r7, #28]
 801487c:	440b      	add	r3, r1
 801487e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014882:	4619      	mov	r1, r3
 8014884:	4b8c      	ldr	r3, [pc, #560]	; (8014ab8 <USB_EPStartXfer+0x2e0>)
 8014886:	4013      	ands	r3, r2
 8014888:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801488a:	69bb      	ldr	r3, [r7, #24]
 801488c:	015a      	lsls	r2, r3, #5
 801488e:	69fb      	ldr	r3, [r7, #28]
 8014890:	4413      	add	r3, r2
 8014892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014896:	691a      	ldr	r2, [r3, #16]
 8014898:	69bb      	ldr	r3, [r7, #24]
 801489a:	0159      	lsls	r1, r3, #5
 801489c:	69fb      	ldr	r3, [r7, #28]
 801489e:	440b      	add	r3, r1
 80148a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148a4:	4619      	mov	r1, r3
 80148a6:	4b83      	ldr	r3, [pc, #524]	; (8014ab4 <USB_EPStartXfer+0x2dc>)
 80148a8:	4013      	ands	r3, r2
 80148aa:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80148ac:	69bb      	ldr	r3, [r7, #24]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d11a      	bne.n	80148e8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80148b2:	68bb      	ldr	r3, [r7, #8]
 80148b4:	691a      	ldr	r2, [r3, #16]
 80148b6:	68bb      	ldr	r3, [r7, #8]
 80148b8:	689b      	ldr	r3, [r3, #8]
 80148ba:	429a      	cmp	r2, r3
 80148bc:	d903      	bls.n	80148c6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	689a      	ldr	r2, [r3, #8]
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80148c6:	69bb      	ldr	r3, [r7, #24]
 80148c8:	015a      	lsls	r2, r3, #5
 80148ca:	69fb      	ldr	r3, [r7, #28]
 80148cc:	4413      	add	r3, r2
 80148ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148d2:	691b      	ldr	r3, [r3, #16]
 80148d4:	69ba      	ldr	r2, [r7, #24]
 80148d6:	0151      	lsls	r1, r2, #5
 80148d8:	69fa      	ldr	r2, [r7, #28]
 80148da:	440a      	add	r2, r1
 80148dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80148e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80148e4:	6113      	str	r3, [r2, #16]
 80148e6:	e01b      	b.n	8014920 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80148e8:	69bb      	ldr	r3, [r7, #24]
 80148ea:	015a      	lsls	r2, r3, #5
 80148ec:	69fb      	ldr	r3, [r7, #28]
 80148ee:	4413      	add	r3, r2
 80148f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148f4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80148f6:	68bb      	ldr	r3, [r7, #8]
 80148f8:	6919      	ldr	r1, [r3, #16]
 80148fa:	68bb      	ldr	r3, [r7, #8]
 80148fc:	689b      	ldr	r3, [r3, #8]
 80148fe:	440b      	add	r3, r1
 8014900:	1e59      	subs	r1, r3, #1
 8014902:	68bb      	ldr	r3, [r7, #8]
 8014904:	689b      	ldr	r3, [r3, #8]
 8014906:	fbb1 f3f3 	udiv	r3, r1, r3
 801490a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801490c:	4b6b      	ldr	r3, [pc, #428]	; (8014abc <USB_EPStartXfer+0x2e4>)
 801490e:	400b      	ands	r3, r1
 8014910:	69b9      	ldr	r1, [r7, #24]
 8014912:	0148      	lsls	r0, r1, #5
 8014914:	69f9      	ldr	r1, [r7, #28]
 8014916:	4401      	add	r1, r0
 8014918:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801491c:	4313      	orrs	r3, r2
 801491e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014920:	69bb      	ldr	r3, [r7, #24]
 8014922:	015a      	lsls	r2, r3, #5
 8014924:	69fb      	ldr	r3, [r7, #28]
 8014926:	4413      	add	r3, r2
 8014928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801492c:	691a      	ldr	r2, [r3, #16]
 801492e:	68bb      	ldr	r3, [r7, #8]
 8014930:	691b      	ldr	r3, [r3, #16]
 8014932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014936:	69b9      	ldr	r1, [r7, #24]
 8014938:	0148      	lsls	r0, r1, #5
 801493a:	69f9      	ldr	r1, [r7, #28]
 801493c:	4401      	add	r1, r0
 801493e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014942:	4313      	orrs	r3, r2
 8014944:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8014946:	68bb      	ldr	r3, [r7, #8]
 8014948:	791b      	ldrb	r3, [r3, #4]
 801494a:	2b01      	cmp	r3, #1
 801494c:	d11f      	bne.n	801498e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801494e:	69bb      	ldr	r3, [r7, #24]
 8014950:	015a      	lsls	r2, r3, #5
 8014952:	69fb      	ldr	r3, [r7, #28]
 8014954:	4413      	add	r3, r2
 8014956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801495a:	691b      	ldr	r3, [r3, #16]
 801495c:	69ba      	ldr	r2, [r7, #24]
 801495e:	0151      	lsls	r1, r2, #5
 8014960:	69fa      	ldr	r2, [r7, #28]
 8014962:	440a      	add	r2, r1
 8014964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014968:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801496c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801496e:	69bb      	ldr	r3, [r7, #24]
 8014970:	015a      	lsls	r2, r3, #5
 8014972:	69fb      	ldr	r3, [r7, #28]
 8014974:	4413      	add	r3, r2
 8014976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801497a:	691b      	ldr	r3, [r3, #16]
 801497c:	69ba      	ldr	r2, [r7, #24]
 801497e:	0151      	lsls	r1, r2, #5
 8014980:	69fa      	ldr	r2, [r7, #28]
 8014982:	440a      	add	r2, r1
 8014984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014988:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801498c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801498e:	79fb      	ldrb	r3, [r7, #7]
 8014990:	2b01      	cmp	r3, #1
 8014992:	d14b      	bne.n	8014a2c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014994:	68bb      	ldr	r3, [r7, #8]
 8014996:	69db      	ldr	r3, [r3, #28]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d009      	beq.n	80149b0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801499c:	69bb      	ldr	r3, [r7, #24]
 801499e:	015a      	lsls	r2, r3, #5
 80149a0:	69fb      	ldr	r3, [r7, #28]
 80149a2:	4413      	add	r3, r2
 80149a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149a8:	461a      	mov	r2, r3
 80149aa:	68bb      	ldr	r3, [r7, #8]
 80149ac:	69db      	ldr	r3, [r3, #28]
 80149ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80149b0:	68bb      	ldr	r3, [r7, #8]
 80149b2:	791b      	ldrb	r3, [r3, #4]
 80149b4:	2b01      	cmp	r3, #1
 80149b6:	d128      	bne.n	8014a0a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80149b8:	69fb      	ldr	r3, [r7, #28]
 80149ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149be:	689b      	ldr	r3, [r3, #8]
 80149c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d110      	bne.n	80149ea <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80149c8:	69bb      	ldr	r3, [r7, #24]
 80149ca:	015a      	lsls	r2, r3, #5
 80149cc:	69fb      	ldr	r3, [r7, #28]
 80149ce:	4413      	add	r3, r2
 80149d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	69ba      	ldr	r2, [r7, #24]
 80149d8:	0151      	lsls	r1, r2, #5
 80149da:	69fa      	ldr	r2, [r7, #28]
 80149dc:	440a      	add	r2, r1
 80149de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80149e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80149e6:	6013      	str	r3, [r2, #0]
 80149e8:	e00f      	b.n	8014a0a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80149ea:	69bb      	ldr	r3, [r7, #24]
 80149ec:	015a      	lsls	r2, r3, #5
 80149ee:	69fb      	ldr	r3, [r7, #28]
 80149f0:	4413      	add	r3, r2
 80149f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	69ba      	ldr	r2, [r7, #24]
 80149fa:	0151      	lsls	r1, r2, #5
 80149fc:	69fa      	ldr	r2, [r7, #28]
 80149fe:	440a      	add	r2, r1
 8014a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014a08:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014a0a:	69bb      	ldr	r3, [r7, #24]
 8014a0c:	015a      	lsls	r2, r3, #5
 8014a0e:	69fb      	ldr	r3, [r7, #28]
 8014a10:	4413      	add	r3, r2
 8014a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	69ba      	ldr	r2, [r7, #24]
 8014a1a:	0151      	lsls	r1, r2, #5
 8014a1c:	69fa      	ldr	r2, [r7, #28]
 8014a1e:	440a      	add	r2, r1
 8014a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014a24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014a28:	6013      	str	r3, [r2, #0]
 8014a2a:	e16a      	b.n	8014d02 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014a2c:	69bb      	ldr	r3, [r7, #24]
 8014a2e:	015a      	lsls	r2, r3, #5
 8014a30:	69fb      	ldr	r3, [r7, #28]
 8014a32:	4413      	add	r3, r2
 8014a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	69ba      	ldr	r2, [r7, #24]
 8014a3c:	0151      	lsls	r1, r2, #5
 8014a3e:	69fa      	ldr	r2, [r7, #28]
 8014a40:	440a      	add	r2, r1
 8014a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014a46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014a4a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014a4c:	68bb      	ldr	r3, [r7, #8]
 8014a4e:	791b      	ldrb	r3, [r3, #4]
 8014a50:	2b01      	cmp	r3, #1
 8014a52:	d015      	beq.n	8014a80 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014a54:	68bb      	ldr	r3, [r7, #8]
 8014a56:	691b      	ldr	r3, [r3, #16]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	f000 8152 	beq.w	8014d02 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014a5e:	69fb      	ldr	r3, [r7, #28]
 8014a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	781b      	ldrb	r3, [r3, #0]
 8014a6a:	f003 030f 	and.w	r3, r3, #15
 8014a6e:	2101      	movs	r1, #1
 8014a70:	fa01 f303 	lsl.w	r3, r1, r3
 8014a74:	69f9      	ldr	r1, [r7, #28]
 8014a76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014a7a:	4313      	orrs	r3, r2
 8014a7c:	634b      	str	r3, [r1, #52]	; 0x34
 8014a7e:	e140      	b.n	8014d02 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014a80:	69fb      	ldr	r3, [r7, #28]
 8014a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a86:	689b      	ldr	r3, [r3, #8]
 8014a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d117      	bne.n	8014ac0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014a90:	69bb      	ldr	r3, [r7, #24]
 8014a92:	015a      	lsls	r2, r3, #5
 8014a94:	69fb      	ldr	r3, [r7, #28]
 8014a96:	4413      	add	r3, r2
 8014a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	69ba      	ldr	r2, [r7, #24]
 8014aa0:	0151      	lsls	r1, r2, #5
 8014aa2:	69fa      	ldr	r2, [r7, #28]
 8014aa4:	440a      	add	r2, r1
 8014aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014aaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014aae:	6013      	str	r3, [r2, #0]
 8014ab0:	e016      	b.n	8014ae0 <USB_EPStartXfer+0x308>
 8014ab2:	bf00      	nop
 8014ab4:	e007ffff 	.word	0xe007ffff
 8014ab8:	fff80000 	.word	0xfff80000
 8014abc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014ac0:	69bb      	ldr	r3, [r7, #24]
 8014ac2:	015a      	lsls	r2, r3, #5
 8014ac4:	69fb      	ldr	r3, [r7, #28]
 8014ac6:	4413      	add	r3, r2
 8014ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	69ba      	ldr	r2, [r7, #24]
 8014ad0:	0151      	lsls	r1, r2, #5
 8014ad2:	69fa      	ldr	r2, [r7, #28]
 8014ad4:	440a      	add	r2, r1
 8014ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014ade:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	68d9      	ldr	r1, [r3, #12]
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	781a      	ldrb	r2, [r3, #0]
 8014ae8:	68bb      	ldr	r3, [r7, #8]
 8014aea:	691b      	ldr	r3, [r3, #16]
 8014aec:	b298      	uxth	r0, r3
 8014aee:	79fb      	ldrb	r3, [r7, #7]
 8014af0:	9300      	str	r3, [sp, #0]
 8014af2:	4603      	mov	r3, r0
 8014af4:	68f8      	ldr	r0, [r7, #12]
 8014af6:	f000 f9b9 	bl	8014e6c <USB_WritePacket>
 8014afa:	e102      	b.n	8014d02 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014afc:	69bb      	ldr	r3, [r7, #24]
 8014afe:	015a      	lsls	r2, r3, #5
 8014b00:	69fb      	ldr	r3, [r7, #28]
 8014b02:	4413      	add	r3, r2
 8014b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b08:	691a      	ldr	r2, [r3, #16]
 8014b0a:	69bb      	ldr	r3, [r7, #24]
 8014b0c:	0159      	lsls	r1, r3, #5
 8014b0e:	69fb      	ldr	r3, [r7, #28]
 8014b10:	440b      	add	r3, r1
 8014b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b16:	4619      	mov	r1, r3
 8014b18:	4b7c      	ldr	r3, [pc, #496]	; (8014d0c <USB_EPStartXfer+0x534>)
 8014b1a:	4013      	ands	r3, r2
 8014b1c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014b1e:	69bb      	ldr	r3, [r7, #24]
 8014b20:	015a      	lsls	r2, r3, #5
 8014b22:	69fb      	ldr	r3, [r7, #28]
 8014b24:	4413      	add	r3, r2
 8014b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b2a:	691a      	ldr	r2, [r3, #16]
 8014b2c:	69bb      	ldr	r3, [r7, #24]
 8014b2e:	0159      	lsls	r1, r3, #5
 8014b30:	69fb      	ldr	r3, [r7, #28]
 8014b32:	440b      	add	r3, r1
 8014b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b38:	4619      	mov	r1, r3
 8014b3a:	4b75      	ldr	r3, [pc, #468]	; (8014d10 <USB_EPStartXfer+0x538>)
 8014b3c:	4013      	ands	r3, r2
 8014b3e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014b40:	69bb      	ldr	r3, [r7, #24]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d12f      	bne.n	8014ba6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8014b46:	68bb      	ldr	r3, [r7, #8]
 8014b48:	691b      	ldr	r3, [r3, #16]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d003      	beq.n	8014b56 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8014b4e:	68bb      	ldr	r3, [r7, #8]
 8014b50:	689a      	ldr	r2, [r3, #8]
 8014b52:	68bb      	ldr	r3, [r7, #8]
 8014b54:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014b56:	68bb      	ldr	r3, [r7, #8]
 8014b58:	689a      	ldr	r2, [r3, #8]
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014b5e:	69bb      	ldr	r3, [r7, #24]
 8014b60:	015a      	lsls	r2, r3, #5
 8014b62:	69fb      	ldr	r3, [r7, #28]
 8014b64:	4413      	add	r3, r2
 8014b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b6a:	691a      	ldr	r2, [r3, #16]
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	6a1b      	ldr	r3, [r3, #32]
 8014b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014b74:	69b9      	ldr	r1, [r7, #24]
 8014b76:	0148      	lsls	r0, r1, #5
 8014b78:	69f9      	ldr	r1, [r7, #28]
 8014b7a:	4401      	add	r1, r0
 8014b7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014b80:	4313      	orrs	r3, r2
 8014b82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014b84:	69bb      	ldr	r3, [r7, #24]
 8014b86:	015a      	lsls	r2, r3, #5
 8014b88:	69fb      	ldr	r3, [r7, #28]
 8014b8a:	4413      	add	r3, r2
 8014b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b90:	691b      	ldr	r3, [r3, #16]
 8014b92:	69ba      	ldr	r2, [r7, #24]
 8014b94:	0151      	lsls	r1, r2, #5
 8014b96:	69fa      	ldr	r2, [r7, #28]
 8014b98:	440a      	add	r2, r1
 8014b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014ba2:	6113      	str	r3, [r2, #16]
 8014ba4:	e05f      	b.n	8014c66 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014ba6:	68bb      	ldr	r3, [r7, #8]
 8014ba8:	691b      	ldr	r3, [r3, #16]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d123      	bne.n	8014bf6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014bae:	69bb      	ldr	r3, [r7, #24]
 8014bb0:	015a      	lsls	r2, r3, #5
 8014bb2:	69fb      	ldr	r3, [r7, #28]
 8014bb4:	4413      	add	r3, r2
 8014bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014bba:	691a      	ldr	r2, [r3, #16]
 8014bbc:	68bb      	ldr	r3, [r7, #8]
 8014bbe:	689b      	ldr	r3, [r3, #8]
 8014bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014bc4:	69b9      	ldr	r1, [r7, #24]
 8014bc6:	0148      	lsls	r0, r1, #5
 8014bc8:	69f9      	ldr	r1, [r7, #28]
 8014bca:	4401      	add	r1, r0
 8014bcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014bd0:	4313      	orrs	r3, r2
 8014bd2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014bd4:	69bb      	ldr	r3, [r7, #24]
 8014bd6:	015a      	lsls	r2, r3, #5
 8014bd8:	69fb      	ldr	r3, [r7, #28]
 8014bda:	4413      	add	r3, r2
 8014bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014be0:	691b      	ldr	r3, [r3, #16]
 8014be2:	69ba      	ldr	r2, [r7, #24]
 8014be4:	0151      	lsls	r1, r2, #5
 8014be6:	69fa      	ldr	r2, [r7, #28]
 8014be8:	440a      	add	r2, r1
 8014bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014bee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014bf2:	6113      	str	r3, [r2, #16]
 8014bf4:	e037      	b.n	8014c66 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014bf6:	68bb      	ldr	r3, [r7, #8]
 8014bf8:	691a      	ldr	r2, [r3, #16]
 8014bfa:	68bb      	ldr	r3, [r7, #8]
 8014bfc:	689b      	ldr	r3, [r3, #8]
 8014bfe:	4413      	add	r3, r2
 8014c00:	1e5a      	subs	r2, r3, #1
 8014c02:	68bb      	ldr	r3, [r7, #8]
 8014c04:	689b      	ldr	r3, [r3, #8]
 8014c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8014c0a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	689b      	ldr	r3, [r3, #8]
 8014c10:	8afa      	ldrh	r2, [r7, #22]
 8014c12:	fb03 f202 	mul.w	r2, r3, r2
 8014c16:	68bb      	ldr	r3, [r7, #8]
 8014c18:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014c1a:	69bb      	ldr	r3, [r7, #24]
 8014c1c:	015a      	lsls	r2, r3, #5
 8014c1e:	69fb      	ldr	r3, [r7, #28]
 8014c20:	4413      	add	r3, r2
 8014c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c26:	691a      	ldr	r2, [r3, #16]
 8014c28:	8afb      	ldrh	r3, [r7, #22]
 8014c2a:	04d9      	lsls	r1, r3, #19
 8014c2c:	4b39      	ldr	r3, [pc, #228]	; (8014d14 <USB_EPStartXfer+0x53c>)
 8014c2e:	400b      	ands	r3, r1
 8014c30:	69b9      	ldr	r1, [r7, #24]
 8014c32:	0148      	lsls	r0, r1, #5
 8014c34:	69f9      	ldr	r1, [r7, #28]
 8014c36:	4401      	add	r1, r0
 8014c38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014c3c:	4313      	orrs	r3, r2
 8014c3e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014c40:	69bb      	ldr	r3, [r7, #24]
 8014c42:	015a      	lsls	r2, r3, #5
 8014c44:	69fb      	ldr	r3, [r7, #28]
 8014c46:	4413      	add	r3, r2
 8014c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c4c:	691a      	ldr	r2, [r3, #16]
 8014c4e:	68bb      	ldr	r3, [r7, #8]
 8014c50:	6a1b      	ldr	r3, [r3, #32]
 8014c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014c56:	69b9      	ldr	r1, [r7, #24]
 8014c58:	0148      	lsls	r0, r1, #5
 8014c5a:	69f9      	ldr	r1, [r7, #28]
 8014c5c:	4401      	add	r1, r0
 8014c5e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014c62:	4313      	orrs	r3, r2
 8014c64:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014c66:	79fb      	ldrb	r3, [r7, #7]
 8014c68:	2b01      	cmp	r3, #1
 8014c6a:	d10d      	bne.n	8014c88 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014c6c:	68bb      	ldr	r3, [r7, #8]
 8014c6e:	68db      	ldr	r3, [r3, #12]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d009      	beq.n	8014c88 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014c74:	68bb      	ldr	r3, [r7, #8]
 8014c76:	68d9      	ldr	r1, [r3, #12]
 8014c78:	69bb      	ldr	r3, [r7, #24]
 8014c7a:	015a      	lsls	r2, r3, #5
 8014c7c:	69fb      	ldr	r3, [r7, #28]
 8014c7e:	4413      	add	r3, r2
 8014c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c84:	460a      	mov	r2, r1
 8014c86:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014c88:	68bb      	ldr	r3, [r7, #8]
 8014c8a:	791b      	ldrb	r3, [r3, #4]
 8014c8c:	2b01      	cmp	r3, #1
 8014c8e:	d128      	bne.n	8014ce2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014c90:	69fb      	ldr	r3, [r7, #28]
 8014c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c96:	689b      	ldr	r3, [r3, #8]
 8014c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d110      	bne.n	8014cc2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014ca0:	69bb      	ldr	r3, [r7, #24]
 8014ca2:	015a      	lsls	r2, r3, #5
 8014ca4:	69fb      	ldr	r3, [r7, #28]
 8014ca6:	4413      	add	r3, r2
 8014ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	69ba      	ldr	r2, [r7, #24]
 8014cb0:	0151      	lsls	r1, r2, #5
 8014cb2:	69fa      	ldr	r2, [r7, #28]
 8014cb4:	440a      	add	r2, r1
 8014cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014cba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014cbe:	6013      	str	r3, [r2, #0]
 8014cc0:	e00f      	b.n	8014ce2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014cc2:	69bb      	ldr	r3, [r7, #24]
 8014cc4:	015a      	lsls	r2, r3, #5
 8014cc6:	69fb      	ldr	r3, [r7, #28]
 8014cc8:	4413      	add	r3, r2
 8014cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	69ba      	ldr	r2, [r7, #24]
 8014cd2:	0151      	lsls	r1, r2, #5
 8014cd4:	69fa      	ldr	r2, [r7, #28]
 8014cd6:	440a      	add	r2, r1
 8014cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014ce0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014ce2:	69bb      	ldr	r3, [r7, #24]
 8014ce4:	015a      	lsls	r2, r3, #5
 8014ce6:	69fb      	ldr	r3, [r7, #28]
 8014ce8:	4413      	add	r3, r2
 8014cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	69ba      	ldr	r2, [r7, #24]
 8014cf2:	0151      	lsls	r1, r2, #5
 8014cf4:	69fa      	ldr	r2, [r7, #28]
 8014cf6:	440a      	add	r2, r1
 8014cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014cfc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014d00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014d02:	2300      	movs	r3, #0
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	3720      	adds	r7, #32
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}
 8014d0c:	fff80000 	.word	0xfff80000
 8014d10:	e007ffff 	.word	0xe007ffff
 8014d14:	1ff80000 	.word	0x1ff80000

08014d18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014d18:	b480      	push	{r7}
 8014d1a:	b087      	sub	sp, #28
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
 8014d20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014d22:	2300      	movs	r3, #0
 8014d24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014d26:	2300      	movs	r3, #0
 8014d28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014d2e:	683b      	ldr	r3, [r7, #0]
 8014d30:	785b      	ldrb	r3, [r3, #1]
 8014d32:	2b01      	cmp	r3, #1
 8014d34:	d14a      	bne.n	8014dcc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	781b      	ldrb	r3, [r3, #0]
 8014d3a:	015a      	lsls	r2, r3, #5
 8014d3c:	693b      	ldr	r3, [r7, #16]
 8014d3e:	4413      	add	r3, r2
 8014d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014d4e:	f040 8086 	bne.w	8014e5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014d52:	683b      	ldr	r3, [r7, #0]
 8014d54:	781b      	ldrb	r3, [r3, #0]
 8014d56:	015a      	lsls	r2, r3, #5
 8014d58:	693b      	ldr	r3, [r7, #16]
 8014d5a:	4413      	add	r3, r2
 8014d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	683a      	ldr	r2, [r7, #0]
 8014d64:	7812      	ldrb	r2, [r2, #0]
 8014d66:	0151      	lsls	r1, r2, #5
 8014d68:	693a      	ldr	r2, [r7, #16]
 8014d6a:	440a      	add	r2, r1
 8014d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014d70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014d74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014d76:	683b      	ldr	r3, [r7, #0]
 8014d78:	781b      	ldrb	r3, [r3, #0]
 8014d7a:	015a      	lsls	r2, r3, #5
 8014d7c:	693b      	ldr	r3, [r7, #16]
 8014d7e:	4413      	add	r3, r2
 8014d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	683a      	ldr	r2, [r7, #0]
 8014d88:	7812      	ldrb	r2, [r2, #0]
 8014d8a:	0151      	lsls	r1, r2, #5
 8014d8c:	693a      	ldr	r2, [r7, #16]
 8014d8e:	440a      	add	r2, r1
 8014d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014d94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014d98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	3301      	adds	r3, #1
 8014d9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	f242 7210 	movw	r2, #10000	; 0x2710
 8014da6:	4293      	cmp	r3, r2
 8014da8:	d902      	bls.n	8014db0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014daa:	2301      	movs	r3, #1
 8014dac:	75fb      	strb	r3, [r7, #23]
          break;
 8014dae:	e056      	b.n	8014e5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014db0:	683b      	ldr	r3, [r7, #0]
 8014db2:	781b      	ldrb	r3, [r3, #0]
 8014db4:	015a      	lsls	r2, r3, #5
 8014db6:	693b      	ldr	r3, [r7, #16]
 8014db8:	4413      	add	r3, r2
 8014dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014dc8:	d0e7      	beq.n	8014d9a <USB_EPStopXfer+0x82>
 8014dca:	e048      	b.n	8014e5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014dcc:	683b      	ldr	r3, [r7, #0]
 8014dce:	781b      	ldrb	r3, [r3, #0]
 8014dd0:	015a      	lsls	r2, r3, #5
 8014dd2:	693b      	ldr	r3, [r7, #16]
 8014dd4:	4413      	add	r3, r2
 8014dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014de4:	d13b      	bne.n	8014e5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014de6:	683b      	ldr	r3, [r7, #0]
 8014de8:	781b      	ldrb	r3, [r3, #0]
 8014dea:	015a      	lsls	r2, r3, #5
 8014dec:	693b      	ldr	r3, [r7, #16]
 8014dee:	4413      	add	r3, r2
 8014df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	683a      	ldr	r2, [r7, #0]
 8014df8:	7812      	ldrb	r2, [r2, #0]
 8014dfa:	0151      	lsls	r1, r2, #5
 8014dfc:	693a      	ldr	r2, [r7, #16]
 8014dfe:	440a      	add	r2, r1
 8014e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014e08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	015a      	lsls	r2, r3, #5
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	4413      	add	r3, r2
 8014e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	683a      	ldr	r2, [r7, #0]
 8014e1c:	7812      	ldrb	r2, [r2, #0]
 8014e1e:	0151      	lsls	r1, r2, #5
 8014e20:	693a      	ldr	r2, [r7, #16]
 8014e22:	440a      	add	r2, r1
 8014e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014e2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	3301      	adds	r3, #1
 8014e32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	f242 7210 	movw	r2, #10000	; 0x2710
 8014e3a:	4293      	cmp	r3, r2
 8014e3c:	d902      	bls.n	8014e44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014e3e:	2301      	movs	r3, #1
 8014e40:	75fb      	strb	r3, [r7, #23]
          break;
 8014e42:	e00c      	b.n	8014e5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014e44:	683b      	ldr	r3, [r7, #0]
 8014e46:	781b      	ldrb	r3, [r3, #0]
 8014e48:	015a      	lsls	r2, r3, #5
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	4413      	add	r3, r2
 8014e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014e5c:	d0e7      	beq.n	8014e2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e60:	4618      	mov	r0, r3
 8014e62:	371c      	adds	r7, #28
 8014e64:	46bd      	mov	sp, r7
 8014e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6a:	4770      	bx	lr

08014e6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014e6c:	b480      	push	{r7}
 8014e6e:	b089      	sub	sp, #36	; 0x24
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	60f8      	str	r0, [r7, #12]
 8014e74:	60b9      	str	r1, [r7, #8]
 8014e76:	4611      	mov	r1, r2
 8014e78:	461a      	mov	r2, r3
 8014e7a:	460b      	mov	r3, r1
 8014e7c:	71fb      	strb	r3, [r7, #7]
 8014e7e:	4613      	mov	r3, r2
 8014e80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014e86:	68bb      	ldr	r3, [r7, #8]
 8014e88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014e8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d123      	bne.n	8014eda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014e92:	88bb      	ldrh	r3, [r7, #4]
 8014e94:	3303      	adds	r3, #3
 8014e96:	089b      	lsrs	r3, r3, #2
 8014e98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	61bb      	str	r3, [r7, #24]
 8014e9e:	e018      	b.n	8014ed2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014ea0:	79fb      	ldrb	r3, [r7, #7]
 8014ea2:	031a      	lsls	r2, r3, #12
 8014ea4:	697b      	ldr	r3, [r7, #20]
 8014ea6:	4413      	add	r3, r2
 8014ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014eac:	461a      	mov	r2, r3
 8014eae:	69fb      	ldr	r3, [r7, #28]
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014eb4:	69fb      	ldr	r3, [r7, #28]
 8014eb6:	3301      	adds	r3, #1
 8014eb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014eba:	69fb      	ldr	r3, [r7, #28]
 8014ebc:	3301      	adds	r3, #1
 8014ebe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014ec0:	69fb      	ldr	r3, [r7, #28]
 8014ec2:	3301      	adds	r3, #1
 8014ec4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014ec6:	69fb      	ldr	r3, [r7, #28]
 8014ec8:	3301      	adds	r3, #1
 8014eca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014ecc:	69bb      	ldr	r3, [r7, #24]
 8014ece:	3301      	adds	r3, #1
 8014ed0:	61bb      	str	r3, [r7, #24]
 8014ed2:	69ba      	ldr	r2, [r7, #24]
 8014ed4:	693b      	ldr	r3, [r7, #16]
 8014ed6:	429a      	cmp	r2, r3
 8014ed8:	d3e2      	bcc.n	8014ea0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014eda:	2300      	movs	r3, #0
}
 8014edc:	4618      	mov	r0, r3
 8014ede:	3724      	adds	r7, #36	; 0x24
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee6:	4770      	bx	lr

08014ee8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014ee8:	b480      	push	{r7}
 8014eea:	b08b      	sub	sp, #44	; 0x2c
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	60f8      	str	r0, [r7, #12]
 8014ef0:	60b9      	str	r1, [r7, #8]
 8014ef2:	4613      	mov	r3, r2
 8014ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014efa:	68bb      	ldr	r3, [r7, #8]
 8014efc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014efe:	88fb      	ldrh	r3, [r7, #6]
 8014f00:	089b      	lsrs	r3, r3, #2
 8014f02:	b29b      	uxth	r3, r3
 8014f04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014f06:	88fb      	ldrh	r3, [r7, #6]
 8014f08:	f003 0303 	and.w	r3, r3, #3
 8014f0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014f0e:	2300      	movs	r3, #0
 8014f10:	623b      	str	r3, [r7, #32]
 8014f12:	e014      	b.n	8014f3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014f14:	69bb      	ldr	r3, [r7, #24]
 8014f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f1a:	681a      	ldr	r2, [r3, #0]
 8014f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8014f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f22:	3301      	adds	r3, #1
 8014f24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f28:	3301      	adds	r3, #1
 8014f2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f2e:	3301      	adds	r3, #1
 8014f30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f34:	3301      	adds	r3, #1
 8014f36:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014f38:	6a3b      	ldr	r3, [r7, #32]
 8014f3a:	3301      	adds	r3, #1
 8014f3c:	623b      	str	r3, [r7, #32]
 8014f3e:	6a3a      	ldr	r2, [r7, #32]
 8014f40:	697b      	ldr	r3, [r7, #20]
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d3e6      	bcc.n	8014f14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014f46:	8bfb      	ldrh	r3, [r7, #30]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d01e      	beq.n	8014f8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014f50:	69bb      	ldr	r3, [r7, #24]
 8014f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f56:	461a      	mov	r2, r3
 8014f58:	f107 0310 	add.w	r3, r7, #16
 8014f5c:	6812      	ldr	r2, [r2, #0]
 8014f5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014f60:	693a      	ldr	r2, [r7, #16]
 8014f62:	6a3b      	ldr	r3, [r7, #32]
 8014f64:	b2db      	uxtb	r3, r3
 8014f66:	00db      	lsls	r3, r3, #3
 8014f68:	fa22 f303 	lsr.w	r3, r2, r3
 8014f6c:	b2da      	uxtb	r2, r3
 8014f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f70:	701a      	strb	r2, [r3, #0]
      i++;
 8014f72:	6a3b      	ldr	r3, [r7, #32]
 8014f74:	3301      	adds	r3, #1
 8014f76:	623b      	str	r3, [r7, #32]
      pDest++;
 8014f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f7a:	3301      	adds	r3, #1
 8014f7c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014f7e:	8bfb      	ldrh	r3, [r7, #30]
 8014f80:	3b01      	subs	r3, #1
 8014f82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014f84:	8bfb      	ldrh	r3, [r7, #30]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d1ea      	bne.n	8014f60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	372c      	adds	r7, #44	; 0x2c
 8014f90:	46bd      	mov	sp, r7
 8014f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f96:	4770      	bx	lr

08014f98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014f98:	b480      	push	{r7}
 8014f9a:	b085      	sub	sp, #20
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
 8014fa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	781b      	ldrb	r3, [r3, #0]
 8014faa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	785b      	ldrb	r3, [r3, #1]
 8014fb0:	2b01      	cmp	r3, #1
 8014fb2:	d12c      	bne.n	801500e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014fb4:	68bb      	ldr	r3, [r7, #8]
 8014fb6:	015a      	lsls	r2, r3, #5
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	4413      	add	r3, r2
 8014fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	db12      	blt.n	8014fec <USB_EPSetStall+0x54>
 8014fc6:	68bb      	ldr	r3, [r7, #8]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d00f      	beq.n	8014fec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	015a      	lsls	r2, r3, #5
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	4413      	add	r3, r2
 8014fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	68ba      	ldr	r2, [r7, #8]
 8014fdc:	0151      	lsls	r1, r2, #5
 8014fde:	68fa      	ldr	r2, [r7, #12]
 8014fe0:	440a      	add	r2, r1
 8014fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014fe6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014fea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014fec:	68bb      	ldr	r3, [r7, #8]
 8014fee:	015a      	lsls	r2, r3, #5
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	4413      	add	r3, r2
 8014ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	68ba      	ldr	r2, [r7, #8]
 8014ffc:	0151      	lsls	r1, r2, #5
 8014ffe:	68fa      	ldr	r2, [r7, #12]
 8015000:	440a      	add	r2, r1
 8015002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015006:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801500a:	6013      	str	r3, [r2, #0]
 801500c:	e02b      	b.n	8015066 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	015a      	lsls	r2, r3, #5
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	4413      	add	r3, r2
 8015016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	2b00      	cmp	r3, #0
 801501e:	db12      	blt.n	8015046 <USB_EPSetStall+0xae>
 8015020:	68bb      	ldr	r3, [r7, #8]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d00f      	beq.n	8015046 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015026:	68bb      	ldr	r3, [r7, #8]
 8015028:	015a      	lsls	r2, r3, #5
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	4413      	add	r3, r2
 801502e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	68ba      	ldr	r2, [r7, #8]
 8015036:	0151      	lsls	r1, r2, #5
 8015038:	68fa      	ldr	r2, [r7, #12]
 801503a:	440a      	add	r2, r1
 801503c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015040:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015044:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015046:	68bb      	ldr	r3, [r7, #8]
 8015048:	015a      	lsls	r2, r3, #5
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	4413      	add	r3, r2
 801504e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	68ba      	ldr	r2, [r7, #8]
 8015056:	0151      	lsls	r1, r2, #5
 8015058:	68fa      	ldr	r2, [r7, #12]
 801505a:	440a      	add	r2, r1
 801505c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015060:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015064:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015066:	2300      	movs	r3, #0
}
 8015068:	4618      	mov	r0, r3
 801506a:	3714      	adds	r7, #20
 801506c:	46bd      	mov	sp, r7
 801506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015072:	4770      	bx	lr

08015074 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015074:	b480      	push	{r7}
 8015076:	b085      	sub	sp, #20
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
 801507c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	781b      	ldrb	r3, [r3, #0]
 8015086:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015088:	683b      	ldr	r3, [r7, #0]
 801508a:	785b      	ldrb	r3, [r3, #1]
 801508c:	2b01      	cmp	r3, #1
 801508e:	d128      	bne.n	80150e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8015090:	68bb      	ldr	r3, [r7, #8]
 8015092:	015a      	lsls	r2, r3, #5
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	4413      	add	r3, r2
 8015098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	68ba      	ldr	r2, [r7, #8]
 80150a0:	0151      	lsls	r1, r2, #5
 80150a2:	68fa      	ldr	r2, [r7, #12]
 80150a4:	440a      	add	r2, r1
 80150a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80150aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80150ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	791b      	ldrb	r3, [r3, #4]
 80150b4:	2b03      	cmp	r3, #3
 80150b6:	d003      	beq.n	80150c0 <USB_EPClearStall+0x4c>
 80150b8:	683b      	ldr	r3, [r7, #0]
 80150ba:	791b      	ldrb	r3, [r3, #4]
 80150bc:	2b02      	cmp	r3, #2
 80150be:	d138      	bne.n	8015132 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80150c0:	68bb      	ldr	r3, [r7, #8]
 80150c2:	015a      	lsls	r2, r3, #5
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	4413      	add	r3, r2
 80150c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	68ba      	ldr	r2, [r7, #8]
 80150d0:	0151      	lsls	r1, r2, #5
 80150d2:	68fa      	ldr	r2, [r7, #12]
 80150d4:	440a      	add	r2, r1
 80150d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80150da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80150de:	6013      	str	r3, [r2, #0]
 80150e0:	e027      	b.n	8015132 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80150e2:	68bb      	ldr	r3, [r7, #8]
 80150e4:	015a      	lsls	r2, r3, #5
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	4413      	add	r3, r2
 80150ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	68ba      	ldr	r2, [r7, #8]
 80150f2:	0151      	lsls	r1, r2, #5
 80150f4:	68fa      	ldr	r2, [r7, #12]
 80150f6:	440a      	add	r2, r1
 80150f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80150fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015100:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015102:	683b      	ldr	r3, [r7, #0]
 8015104:	791b      	ldrb	r3, [r3, #4]
 8015106:	2b03      	cmp	r3, #3
 8015108:	d003      	beq.n	8015112 <USB_EPClearStall+0x9e>
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	791b      	ldrb	r3, [r3, #4]
 801510e:	2b02      	cmp	r3, #2
 8015110:	d10f      	bne.n	8015132 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015112:	68bb      	ldr	r3, [r7, #8]
 8015114:	015a      	lsls	r2, r3, #5
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	4413      	add	r3, r2
 801511a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	68ba      	ldr	r2, [r7, #8]
 8015122:	0151      	lsls	r1, r2, #5
 8015124:	68fa      	ldr	r2, [r7, #12]
 8015126:	440a      	add	r2, r1
 8015128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801512c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015130:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8015132:	2300      	movs	r3, #0
}
 8015134:	4618      	mov	r0, r3
 8015136:	3714      	adds	r7, #20
 8015138:	46bd      	mov	sp, r7
 801513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801513e:	4770      	bx	lr

08015140 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8015140:	b480      	push	{r7}
 8015142:	b085      	sub	sp, #20
 8015144:	af00      	add	r7, sp, #0
 8015146:	6078      	str	r0, [r7, #4]
 8015148:	460b      	mov	r3, r1
 801514a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	68fa      	ldr	r2, [r7, #12]
 801515a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801515e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8015162:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801516a:	681a      	ldr	r2, [r3, #0]
 801516c:	78fb      	ldrb	r3, [r7, #3]
 801516e:	011b      	lsls	r3, r3, #4
 8015170:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8015174:	68f9      	ldr	r1, [r7, #12]
 8015176:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801517a:	4313      	orrs	r3, r2
 801517c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801517e:	2300      	movs	r3, #0
}
 8015180:	4618      	mov	r0, r3
 8015182:	3714      	adds	r7, #20
 8015184:	46bd      	mov	sp, r7
 8015186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518a:	4770      	bx	lr

0801518c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801518c:	b480      	push	{r7}
 801518e:	b085      	sub	sp, #20
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	68fa      	ldr	r2, [r7, #12]
 80151a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80151a6:	f023 0303 	bic.w	r3, r3, #3
 80151aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80151b2:	685b      	ldr	r3, [r3, #4]
 80151b4:	68fa      	ldr	r2, [r7, #12]
 80151b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80151ba:	f023 0302 	bic.w	r3, r3, #2
 80151be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80151c0:	2300      	movs	r3, #0
}
 80151c2:	4618      	mov	r0, r3
 80151c4:	3714      	adds	r7, #20
 80151c6:	46bd      	mov	sp, r7
 80151c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151cc:	4770      	bx	lr

080151ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80151ce:	b480      	push	{r7}
 80151d0:	b085      	sub	sp, #20
 80151d2:	af00      	add	r7, sp, #0
 80151d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	68fa      	ldr	r2, [r7, #12]
 80151e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80151e8:	f023 0303 	bic.w	r3, r3, #3
 80151ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80151f4:	685b      	ldr	r3, [r3, #4]
 80151f6:	68fa      	ldr	r2, [r7, #12]
 80151f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80151fc:	f043 0302 	orr.w	r3, r3, #2
 8015200:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015202:	2300      	movs	r3, #0
}
 8015204:	4618      	mov	r0, r3
 8015206:	3714      	adds	r7, #20
 8015208:	46bd      	mov	sp, r7
 801520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520e:	4770      	bx	lr

08015210 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8015210:	b480      	push	{r7}
 8015212:	b085      	sub	sp, #20
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	695b      	ldr	r3, [r3, #20]
 801521c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	699b      	ldr	r3, [r3, #24]
 8015222:	68fa      	ldr	r2, [r7, #12]
 8015224:	4013      	ands	r3, r2
 8015226:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015228:	68fb      	ldr	r3, [r7, #12]
}
 801522a:	4618      	mov	r0, r3
 801522c:	3714      	adds	r7, #20
 801522e:	46bd      	mov	sp, r7
 8015230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015234:	4770      	bx	lr

08015236 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015236:	b480      	push	{r7}
 8015238:	b085      	sub	sp, #20
 801523a:	af00      	add	r7, sp, #0
 801523c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015248:	699b      	ldr	r3, [r3, #24]
 801524a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015252:	69db      	ldr	r3, [r3, #28]
 8015254:	68ba      	ldr	r2, [r7, #8]
 8015256:	4013      	ands	r3, r2
 8015258:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801525a:	68bb      	ldr	r3, [r7, #8]
 801525c:	0c1b      	lsrs	r3, r3, #16
}
 801525e:	4618      	mov	r0, r3
 8015260:	3714      	adds	r7, #20
 8015262:	46bd      	mov	sp, r7
 8015264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015268:	4770      	bx	lr

0801526a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801526a:	b480      	push	{r7}
 801526c:	b085      	sub	sp, #20
 801526e:	af00      	add	r7, sp, #0
 8015270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801527c:	699b      	ldr	r3, [r3, #24]
 801527e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015286:	69db      	ldr	r3, [r3, #28]
 8015288:	68ba      	ldr	r2, [r7, #8]
 801528a:	4013      	ands	r3, r2
 801528c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801528e:	68bb      	ldr	r3, [r7, #8]
 8015290:	b29b      	uxth	r3, r3
}
 8015292:	4618      	mov	r0, r3
 8015294:	3714      	adds	r7, #20
 8015296:	46bd      	mov	sp, r7
 8015298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529c:	4770      	bx	lr

0801529e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801529e:	b480      	push	{r7}
 80152a0:	b085      	sub	sp, #20
 80152a2:	af00      	add	r7, sp, #0
 80152a4:	6078      	str	r0, [r7, #4]
 80152a6:	460b      	mov	r3, r1
 80152a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80152ae:	78fb      	ldrb	r3, [r7, #3]
 80152b0:	015a      	lsls	r2, r3, #5
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	4413      	add	r3, r2
 80152b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80152ba:	689b      	ldr	r3, [r3, #8]
 80152bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80152c4:	695b      	ldr	r3, [r3, #20]
 80152c6:	68ba      	ldr	r2, [r7, #8]
 80152c8:	4013      	ands	r3, r2
 80152ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80152cc:	68bb      	ldr	r3, [r7, #8]
}
 80152ce:	4618      	mov	r0, r3
 80152d0:	3714      	adds	r7, #20
 80152d2:	46bd      	mov	sp, r7
 80152d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d8:	4770      	bx	lr

080152da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80152da:	b480      	push	{r7}
 80152dc:	b087      	sub	sp, #28
 80152de:	af00      	add	r7, sp, #0
 80152e0:	6078      	str	r0, [r7, #4]
 80152e2:	460b      	mov	r3, r1
 80152e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80152ea:	697b      	ldr	r3, [r7, #20]
 80152ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80152f0:	691b      	ldr	r3, [r3, #16]
 80152f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80152f4:	697b      	ldr	r3, [r7, #20]
 80152f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80152fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80152fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80152fe:	78fb      	ldrb	r3, [r7, #3]
 8015300:	f003 030f 	and.w	r3, r3, #15
 8015304:	68fa      	ldr	r2, [r7, #12]
 8015306:	fa22 f303 	lsr.w	r3, r2, r3
 801530a:	01db      	lsls	r3, r3, #7
 801530c:	b2db      	uxtb	r3, r3
 801530e:	693a      	ldr	r2, [r7, #16]
 8015310:	4313      	orrs	r3, r2
 8015312:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015314:	78fb      	ldrb	r3, [r7, #3]
 8015316:	015a      	lsls	r2, r3, #5
 8015318:	697b      	ldr	r3, [r7, #20]
 801531a:	4413      	add	r3, r2
 801531c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015320:	689b      	ldr	r3, [r3, #8]
 8015322:	693a      	ldr	r2, [r7, #16]
 8015324:	4013      	ands	r3, r2
 8015326:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015328:	68bb      	ldr	r3, [r7, #8]
}
 801532a:	4618      	mov	r0, r3
 801532c:	371c      	adds	r7, #28
 801532e:	46bd      	mov	sp, r7
 8015330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015334:	4770      	bx	lr

08015336 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8015336:	b480      	push	{r7}
 8015338:	b083      	sub	sp, #12
 801533a:	af00      	add	r7, sp, #0
 801533c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	695b      	ldr	r3, [r3, #20]
 8015342:	f003 0301 	and.w	r3, r3, #1
}
 8015346:	4618      	mov	r0, r3
 8015348:	370c      	adds	r7, #12
 801534a:	46bd      	mov	sp, r7
 801534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015350:	4770      	bx	lr
	...

08015354 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8015354:	b480      	push	{r7}
 8015356:	b085      	sub	sp, #20
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015366:	681a      	ldr	r2, [r3, #0]
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801536e:	4619      	mov	r1, r3
 8015370:	4b09      	ldr	r3, [pc, #36]	; (8015398 <USB_ActivateSetup+0x44>)
 8015372:	4013      	ands	r3, r2
 8015374:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801537c:	685b      	ldr	r3, [r3, #4]
 801537e:	68fa      	ldr	r2, [r7, #12]
 8015380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015388:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801538a:	2300      	movs	r3, #0
}
 801538c:	4618      	mov	r0, r3
 801538e:	3714      	adds	r7, #20
 8015390:	46bd      	mov	sp, r7
 8015392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015396:	4770      	bx	lr
 8015398:	fffff800 	.word	0xfffff800

0801539c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801539c:	b480      	push	{r7}
 801539e:	b087      	sub	sp, #28
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	60f8      	str	r0, [r7, #12]
 80153a4:	460b      	mov	r3, r1
 80153a6:	607a      	str	r2, [r7, #4]
 80153a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	333c      	adds	r3, #60	; 0x3c
 80153b2:	3304      	adds	r3, #4
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80153b8:	693b      	ldr	r3, [r7, #16]
 80153ba:	4a26      	ldr	r2, [pc, #152]	; (8015454 <USB_EP0_OutStart+0xb8>)
 80153bc:	4293      	cmp	r3, r2
 80153be:	d90a      	bls.n	80153d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80153c0:	697b      	ldr	r3, [r7, #20]
 80153c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80153cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80153d0:	d101      	bne.n	80153d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80153d2:	2300      	movs	r3, #0
 80153d4:	e037      	b.n	8015446 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80153d6:	697b      	ldr	r3, [r7, #20]
 80153d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80153dc:	461a      	mov	r2, r3
 80153de:	2300      	movs	r3, #0
 80153e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80153e2:	697b      	ldr	r3, [r7, #20]
 80153e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80153e8:	691b      	ldr	r3, [r3, #16]
 80153ea:	697a      	ldr	r2, [r7, #20]
 80153ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80153f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80153f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80153f6:	697b      	ldr	r3, [r7, #20]
 80153f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80153fc:	691b      	ldr	r3, [r3, #16]
 80153fe:	697a      	ldr	r2, [r7, #20]
 8015400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015404:	f043 0318 	orr.w	r3, r3, #24
 8015408:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801540a:	697b      	ldr	r3, [r7, #20]
 801540c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015410:	691b      	ldr	r3, [r3, #16]
 8015412:	697a      	ldr	r2, [r7, #20]
 8015414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015418:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801541c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801541e:	7afb      	ldrb	r3, [r7, #11]
 8015420:	2b01      	cmp	r3, #1
 8015422:	d10f      	bne.n	8015444 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015424:	697b      	ldr	r3, [r7, #20]
 8015426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801542a:	461a      	mov	r2, r3
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015430:	697b      	ldr	r3, [r7, #20]
 8015432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	697a      	ldr	r2, [r7, #20]
 801543a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801543e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8015442:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015444:	2300      	movs	r3, #0
}
 8015446:	4618      	mov	r0, r3
 8015448:	371c      	adds	r7, #28
 801544a:	46bd      	mov	sp, r7
 801544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015450:	4770      	bx	lr
 8015452:	bf00      	nop
 8015454:	4f54300a 	.word	0x4f54300a

08015458 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015458:	b480      	push	{r7}
 801545a:	b085      	sub	sp, #20
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015460:	2300      	movs	r3, #0
 8015462:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	3301      	adds	r3, #1
 8015468:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	4a13      	ldr	r2, [pc, #76]	; (80154bc <USB_CoreReset+0x64>)
 801546e:	4293      	cmp	r3, r2
 8015470:	d901      	bls.n	8015476 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8015472:	2303      	movs	r3, #3
 8015474:	e01b      	b.n	80154ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	691b      	ldr	r3, [r3, #16]
 801547a:	2b00      	cmp	r3, #0
 801547c:	daf2      	bge.n	8015464 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801547e:	2300      	movs	r3, #0
 8015480:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	691b      	ldr	r3, [r3, #16]
 8015486:	f043 0201 	orr.w	r2, r3, #1
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	3301      	adds	r3, #1
 8015492:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	4a09      	ldr	r2, [pc, #36]	; (80154bc <USB_CoreReset+0x64>)
 8015498:	4293      	cmp	r3, r2
 801549a:	d901      	bls.n	80154a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801549c:	2303      	movs	r3, #3
 801549e:	e006      	b.n	80154ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	691b      	ldr	r3, [r3, #16]
 80154a4:	f003 0301 	and.w	r3, r3, #1
 80154a8:	2b01      	cmp	r3, #1
 80154aa:	d0f0      	beq.n	801548e <USB_CoreReset+0x36>

  return HAL_OK;
 80154ac:	2300      	movs	r3, #0
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3714      	adds	r7, #20
 80154b2:	46bd      	mov	sp, r7
 80154b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b8:	4770      	bx	lr
 80154ba:	bf00      	nop
 80154bc:	00030d40 	.word	0x00030d40

080154c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80154c4:	4904      	ldr	r1, [pc, #16]	; (80154d8 <MX_FATFS_Init+0x18>)
 80154c6:	4805      	ldr	r0, [pc, #20]	; (80154dc <MX_FATFS_Init+0x1c>)
 80154c8:	f005 f904 	bl	801a6d4 <FATFS_LinkDriver>
 80154cc:	4603      	mov	r3, r0
 80154ce:	461a      	mov	r2, r3
 80154d0:	4b03      	ldr	r3, [pc, #12]	; (80154e0 <MX_FATFS_Init+0x20>)
 80154d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80154d4:	bf00      	nop
 80154d6:	bd80      	pop	{r7, pc}
 80154d8:	24003e64 	.word	0x24003e64
 80154dc:	08020430 	.word	0x08020430
 80154e0:	24003e60 	.word	0x24003e60

080154e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80154e4:	b480      	push	{r7}
 80154e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80154e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	46bd      	mov	sp, r7
 80154ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f2:	4770      	bx	lr

080154f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b082      	sub	sp, #8
 80154f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80154fa:	2300      	movs	r3, #0
 80154fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80154fe:	f000 f885 	bl	801560c <BSP_SD_IsDetected>
 8015502:	4603      	mov	r3, r0
 8015504:	2b01      	cmp	r3, #1
 8015506:	d001      	beq.n	801550c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8015508:	2302      	movs	r3, #2
 801550a:	e012      	b.n	8015532 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 801550c:	480b      	ldr	r0, [pc, #44]	; (801553c <BSP_SD_Init+0x48>)
 801550e:	f7f8 ff39 	bl	800e384 <HAL_SD_Init>
 8015512:	4603      	mov	r3, r0
 8015514:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8015516:	79fb      	ldrb	r3, [r7, #7]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d109      	bne.n	8015530 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801551c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8015520:	4806      	ldr	r0, [pc, #24]	; (801553c <BSP_SD_Init+0x48>)
 8015522:	f7f9 fdef 	bl	800f104 <HAL_SD_ConfigWideBusOperation>
 8015526:	4603      	mov	r3, r0
 8015528:	2b00      	cmp	r3, #0
 801552a:	d001      	beq.n	8015530 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801552c:	2301      	movs	r3, #1
 801552e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8015530:	79fb      	ldrb	r3, [r7, #7]
}
 8015532:	4618      	mov	r0, r3
 8015534:	3708      	adds	r7, #8
 8015536:	46bd      	mov	sp, r7
 8015538:	bd80      	pop	{r7, pc}
 801553a:	bf00      	nop
 801553c:	24001030 	.word	0x24001030

08015540 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b086      	sub	sp, #24
 8015544:	af00      	add	r7, sp, #0
 8015546:	60f8      	str	r0, [r7, #12]
 8015548:	60b9      	str	r1, [r7, #8]
 801554a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801554c:	2300      	movs	r3, #0
 801554e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	68ba      	ldr	r2, [r7, #8]
 8015554:	68f9      	ldr	r1, [r7, #12]
 8015556:	4806      	ldr	r0, [pc, #24]	; (8015570 <BSP_SD_ReadBlocks_DMA+0x30>)
 8015558:	f7f9 f834 	bl	800e5c4 <HAL_SD_ReadBlocks_DMA>
 801555c:	4603      	mov	r3, r0
 801555e:	2b00      	cmp	r3, #0
 8015560:	d001      	beq.n	8015566 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8015562:	2301      	movs	r3, #1
 8015564:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8015566:	7dfb      	ldrb	r3, [r7, #23]
}
 8015568:	4618      	mov	r0, r3
 801556a:	3718      	adds	r7, #24
 801556c:	46bd      	mov	sp, r7
 801556e:	bd80      	pop	{r7, pc}
 8015570:	24001030 	.word	0x24001030

08015574 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b086      	sub	sp, #24
 8015578:	af00      	add	r7, sp, #0
 801557a:	60f8      	str	r0, [r7, #12]
 801557c:	60b9      	str	r1, [r7, #8]
 801557e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015580:	2300      	movs	r3, #0
 8015582:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	68ba      	ldr	r2, [r7, #8]
 8015588:	68f9      	ldr	r1, [r7, #12]
 801558a:	4806      	ldr	r0, [pc, #24]	; (80155a4 <BSP_SD_WriteBlocks_DMA+0x30>)
 801558c:	f7f9 f8c2 	bl	800e714 <HAL_SD_WriteBlocks_DMA>
 8015590:	4603      	mov	r3, r0
 8015592:	2b00      	cmp	r3, #0
 8015594:	d001      	beq.n	801559a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8015596:	2301      	movs	r3, #1
 8015598:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801559a:	7dfb      	ldrb	r3, [r7, #23]
}
 801559c:	4618      	mov	r0, r3
 801559e:	3718      	adds	r7, #24
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd80      	pop	{r7, pc}
 80155a4:	24001030 	.word	0x24001030

080155a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80155ac:	4805      	ldr	r0, [pc, #20]	; (80155c4 <BSP_SD_GetCardState+0x1c>)
 80155ae:	f7f9 febb 	bl	800f328 <HAL_SD_GetCardState>
 80155b2:	4603      	mov	r3, r0
 80155b4:	2b04      	cmp	r3, #4
 80155b6:	bf14      	ite	ne
 80155b8:	2301      	movne	r3, #1
 80155ba:	2300      	moveq	r3, #0
 80155bc:	b2db      	uxtb	r3, r3
}
 80155be:	4618      	mov	r0, r3
 80155c0:	bd80      	pop	{r7, pc}
 80155c2:	bf00      	nop
 80155c4:	24001030 	.word	0x24001030

080155c8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80155c8:	b580      	push	{r7, lr}
 80155ca:	b082      	sub	sp, #8
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80155d0:	6879      	ldr	r1, [r7, #4]
 80155d2:	4803      	ldr	r0, [pc, #12]	; (80155e0 <BSP_SD_GetCardInfo+0x18>)
 80155d4:	f7f9 fd6a 	bl	800f0ac <HAL_SD_GetCardInfo>
}
 80155d8:	bf00      	nop
 80155da:	3708      	adds	r7, #8
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}
 80155e0:	24001030 	.word	0x24001030

080155e4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b082      	sub	sp, #8
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80155ec:	f000 f984 	bl	80158f8 <BSP_SD_WriteCpltCallback>
}
 80155f0:	bf00      	nop
 80155f2:	3708      	adds	r7, #8
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8015600:	f000 f986 	bl	8015910 <BSP_SD_ReadCpltCallback>
}
 8015604:	bf00      	nop
 8015606:	3708      	adds	r7, #8
 8015608:	46bd      	mov	sp, r7
 801560a:	bd80      	pop	{r7, pc}

0801560c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801560c:	b480      	push	{r7}
 801560e:	b083      	sub	sp, #12
 8015610:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8015612:	2301      	movs	r3, #1
 8015614:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8015616:	79fb      	ldrb	r3, [r7, #7]
 8015618:	b2db      	uxtb	r3, r3
}
 801561a:	4618      	mov	r0, r3
 801561c:	370c      	adds	r7, #12
 801561e:	46bd      	mov	sp, r7
 8015620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015624:	4770      	bx	lr

08015626 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8015626:	b580      	push	{r7, lr}
 8015628:	b084      	sub	sp, #16
 801562a:	af00      	add	r7, sp, #0
 801562c:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801562e:	f7ee fddd 	bl	80041ec <HAL_GetTick>
 8015632:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8015634:	e006      	b.n	8015644 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015636:	f7ff ffb7 	bl	80155a8 <BSP_SD_GetCardState>
 801563a:	4603      	mov	r3, r0
 801563c:	2b00      	cmp	r3, #0
 801563e:	d101      	bne.n	8015644 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8015640:	2300      	movs	r3, #0
 8015642:	e009      	b.n	8015658 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8015644:	f7ee fdd2 	bl	80041ec <HAL_GetTick>
 8015648:	4602      	mov	r2, r0
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	1ad3      	subs	r3, r2, r3
 801564e:	687a      	ldr	r2, [r7, #4]
 8015650:	429a      	cmp	r2, r3
 8015652:	d8f0      	bhi.n	8015636 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8015654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015658:	4618      	mov	r0, r3
 801565a:	3710      	adds	r7, #16
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}

08015660 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b082      	sub	sp, #8
 8015664:	af00      	add	r7, sp, #0
 8015666:	4603      	mov	r3, r0
 8015668:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801566a:	4b0b      	ldr	r3, [pc, #44]	; (8015698 <SD_CheckStatus+0x38>)
 801566c:	2201      	movs	r2, #1
 801566e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8015670:	f7ff ff9a 	bl	80155a8 <BSP_SD_GetCardState>
 8015674:	4603      	mov	r3, r0
 8015676:	2b00      	cmp	r3, #0
 8015678:	d107      	bne.n	801568a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801567a:	4b07      	ldr	r3, [pc, #28]	; (8015698 <SD_CheckStatus+0x38>)
 801567c:	781b      	ldrb	r3, [r3, #0]
 801567e:	b2db      	uxtb	r3, r3
 8015680:	f023 0301 	bic.w	r3, r3, #1
 8015684:	b2da      	uxtb	r2, r3
 8015686:	4b04      	ldr	r3, [pc, #16]	; (8015698 <SD_CheckStatus+0x38>)
 8015688:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801568a:	4b03      	ldr	r3, [pc, #12]	; (8015698 <SD_CheckStatus+0x38>)
 801568c:	781b      	ldrb	r3, [r3, #0]
 801568e:	b2db      	uxtb	r3, r3
}
 8015690:	4618      	mov	r0, r3
 8015692:	3708      	adds	r7, #8
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}
 8015698:	2400010d 	.word	0x2400010d

0801569c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801569c:	b580      	push	{r7, lr}
 801569e:	b082      	sub	sp, #8
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	4603      	mov	r3, r0
 80156a4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80156a6:	f7ff ff25 	bl	80154f4 <BSP_SD_Init>
 80156aa:	4603      	mov	r3, r0
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d107      	bne.n	80156c0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80156b0:	79fb      	ldrb	r3, [r7, #7]
 80156b2:	4618      	mov	r0, r3
 80156b4:	f7ff ffd4 	bl	8015660 <SD_CheckStatus>
 80156b8:	4603      	mov	r3, r0
 80156ba:	461a      	mov	r2, r3
 80156bc:	4b04      	ldr	r3, [pc, #16]	; (80156d0 <SD_initialize+0x34>)
 80156be:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80156c0:	4b03      	ldr	r3, [pc, #12]	; (80156d0 <SD_initialize+0x34>)
 80156c2:	781b      	ldrb	r3, [r3, #0]
 80156c4:	b2db      	uxtb	r3, r3
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	3708      	adds	r7, #8
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd80      	pop	{r7, pc}
 80156ce:	bf00      	nop
 80156d0:	2400010d 	.word	0x2400010d

080156d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b082      	sub	sp, #8
 80156d8:	af00      	add	r7, sp, #0
 80156da:	4603      	mov	r3, r0
 80156dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80156de:	79fb      	ldrb	r3, [r7, #7]
 80156e0:	4618      	mov	r0, r3
 80156e2:	f7ff ffbd 	bl	8015660 <SD_CheckStatus>
 80156e6:	4603      	mov	r3, r0
}
 80156e8:	4618      	mov	r0, r3
 80156ea:	3708      	adds	r7, #8
 80156ec:	46bd      	mov	sp, r7
 80156ee:	bd80      	pop	{r7, pc}

080156f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b086      	sub	sp, #24
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	60b9      	str	r1, [r7, #8]
 80156f8:	607a      	str	r2, [r7, #4]
 80156fa:	603b      	str	r3, [r7, #0]
 80156fc:	4603      	mov	r3, r0
 80156fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015700:	2301      	movs	r3, #1
 8015702:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015704:	f247 5030 	movw	r0, #30000	; 0x7530
 8015708:	f7ff ff8d 	bl	8015626 <SD_CheckStatusWithTimeout>
 801570c:	4603      	mov	r3, r0
 801570e:	2b00      	cmp	r3, #0
 8015710:	da01      	bge.n	8015716 <SD_read+0x26>
  {
    return res;
 8015712:	7dfb      	ldrb	r3, [r7, #23]
 8015714:	e03b      	b.n	801578e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8015716:	683a      	ldr	r2, [r7, #0]
 8015718:	6879      	ldr	r1, [r7, #4]
 801571a:	68b8      	ldr	r0, [r7, #8]
 801571c:	f7ff ff10 	bl	8015540 <BSP_SD_ReadBlocks_DMA>
 8015720:	4603      	mov	r3, r0
 8015722:	2b00      	cmp	r3, #0
 8015724:	d132      	bne.n	801578c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8015726:	4b1c      	ldr	r3, [pc, #112]	; (8015798 <SD_read+0xa8>)
 8015728:	2200      	movs	r2, #0
 801572a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801572c:	f7ee fd5e 	bl	80041ec <HAL_GetTick>
 8015730:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015732:	bf00      	nop
 8015734:	4b18      	ldr	r3, [pc, #96]	; (8015798 <SD_read+0xa8>)
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d108      	bne.n	801574e <SD_read+0x5e>
 801573c:	f7ee fd56 	bl	80041ec <HAL_GetTick>
 8015740:	4602      	mov	r2, r0
 8015742:	693b      	ldr	r3, [r7, #16]
 8015744:	1ad3      	subs	r3, r2, r3
 8015746:	f247 522f 	movw	r2, #29999	; 0x752f
 801574a:	4293      	cmp	r3, r2
 801574c:	d9f2      	bls.n	8015734 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801574e:	4b12      	ldr	r3, [pc, #72]	; (8015798 <SD_read+0xa8>)
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d102      	bne.n	801575c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8015756:	2301      	movs	r3, #1
 8015758:	75fb      	strb	r3, [r7, #23]
 801575a:	e017      	b.n	801578c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801575c:	4b0e      	ldr	r3, [pc, #56]	; (8015798 <SD_read+0xa8>)
 801575e:	2200      	movs	r2, #0
 8015760:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015762:	f7ee fd43 	bl	80041ec <HAL_GetTick>
 8015766:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015768:	e007      	b.n	801577a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801576a:	f7ff ff1d 	bl	80155a8 <BSP_SD_GetCardState>
 801576e:	4603      	mov	r3, r0
 8015770:	2b00      	cmp	r3, #0
 8015772:	d102      	bne.n	801577a <SD_read+0x8a>
          {
            res = RES_OK;
 8015774:	2300      	movs	r3, #0
 8015776:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8015778:	e008      	b.n	801578c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801577a:	f7ee fd37 	bl	80041ec <HAL_GetTick>
 801577e:	4602      	mov	r2, r0
 8015780:	693b      	ldr	r3, [r7, #16]
 8015782:	1ad3      	subs	r3, r2, r3
 8015784:	f247 522f 	movw	r2, #29999	; 0x752f
 8015788:	4293      	cmp	r3, r2
 801578a:	d9ee      	bls.n	801576a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801578c:	7dfb      	ldrb	r3, [r7, #23]
}
 801578e:	4618      	mov	r0, r3
 8015790:	3718      	adds	r7, #24
 8015792:	46bd      	mov	sp, r7
 8015794:	bd80      	pop	{r7, pc}
 8015796:	bf00      	nop
 8015798:	24003e6c 	.word	0x24003e6c

0801579c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b086      	sub	sp, #24
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	60b9      	str	r1, [r7, #8]
 80157a4:	607a      	str	r2, [r7, #4]
 80157a6:	603b      	str	r3, [r7, #0]
 80157a8:	4603      	mov	r3, r0
 80157aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80157ac:	2301      	movs	r3, #1
 80157ae:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80157b0:	4b24      	ldr	r3, [pc, #144]	; (8015844 <SD_write+0xa8>)
 80157b2:	2200      	movs	r2, #0
 80157b4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80157b6:	f247 5030 	movw	r0, #30000	; 0x7530
 80157ba:	f7ff ff34 	bl	8015626 <SD_CheckStatusWithTimeout>
 80157be:	4603      	mov	r3, r0
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	da01      	bge.n	80157c8 <SD_write+0x2c>
  {
    return res;
 80157c4:	7dfb      	ldrb	r3, [r7, #23]
 80157c6:	e038      	b.n	801583a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80157c8:	683a      	ldr	r2, [r7, #0]
 80157ca:	6879      	ldr	r1, [r7, #4]
 80157cc:	68b8      	ldr	r0, [r7, #8]
 80157ce:	f7ff fed1 	bl	8015574 <BSP_SD_WriteBlocks_DMA>
 80157d2:	4603      	mov	r3, r0
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d12f      	bne.n	8015838 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80157d8:	f7ee fd08 	bl	80041ec <HAL_GetTick>
 80157dc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80157de:	bf00      	nop
 80157e0:	4b18      	ldr	r3, [pc, #96]	; (8015844 <SD_write+0xa8>)
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d108      	bne.n	80157fa <SD_write+0x5e>
 80157e8:	f7ee fd00 	bl	80041ec <HAL_GetTick>
 80157ec:	4602      	mov	r2, r0
 80157ee:	693b      	ldr	r3, [r7, #16]
 80157f0:	1ad3      	subs	r3, r2, r3
 80157f2:	f247 522f 	movw	r2, #29999	; 0x752f
 80157f6:	4293      	cmp	r3, r2
 80157f8:	d9f2      	bls.n	80157e0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80157fa:	4b12      	ldr	r3, [pc, #72]	; (8015844 <SD_write+0xa8>)
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d102      	bne.n	8015808 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8015802:	2301      	movs	r3, #1
 8015804:	75fb      	strb	r3, [r7, #23]
 8015806:	e017      	b.n	8015838 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8015808:	4b0e      	ldr	r3, [pc, #56]	; (8015844 <SD_write+0xa8>)
 801580a:	2200      	movs	r2, #0
 801580c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801580e:	f7ee fced 	bl	80041ec <HAL_GetTick>
 8015812:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015814:	e007      	b.n	8015826 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015816:	f7ff fec7 	bl	80155a8 <BSP_SD_GetCardState>
 801581a:	4603      	mov	r3, r0
 801581c:	2b00      	cmp	r3, #0
 801581e:	d102      	bne.n	8015826 <SD_write+0x8a>
          {
            res = RES_OK;
 8015820:	2300      	movs	r3, #0
 8015822:	75fb      	strb	r3, [r7, #23]
            break;
 8015824:	e008      	b.n	8015838 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015826:	f7ee fce1 	bl	80041ec <HAL_GetTick>
 801582a:	4602      	mov	r2, r0
 801582c:	693b      	ldr	r3, [r7, #16]
 801582e:	1ad3      	subs	r3, r2, r3
 8015830:	f247 522f 	movw	r2, #29999	; 0x752f
 8015834:	4293      	cmp	r3, r2
 8015836:	d9ee      	bls.n	8015816 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8015838:	7dfb      	ldrb	r3, [r7, #23]
}
 801583a:	4618      	mov	r0, r3
 801583c:	3718      	adds	r7, #24
 801583e:	46bd      	mov	sp, r7
 8015840:	bd80      	pop	{r7, pc}
 8015842:	bf00      	nop
 8015844:	24003e68 	.word	0x24003e68

08015848 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b08c      	sub	sp, #48	; 0x30
 801584c:	af00      	add	r7, sp, #0
 801584e:	4603      	mov	r3, r0
 8015850:	603a      	str	r2, [r7, #0]
 8015852:	71fb      	strb	r3, [r7, #7]
 8015854:	460b      	mov	r3, r1
 8015856:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015858:	2301      	movs	r3, #1
 801585a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801585e:	4b25      	ldr	r3, [pc, #148]	; (80158f4 <SD_ioctl+0xac>)
 8015860:	781b      	ldrb	r3, [r3, #0]
 8015862:	b2db      	uxtb	r3, r3
 8015864:	f003 0301 	and.w	r3, r3, #1
 8015868:	2b00      	cmp	r3, #0
 801586a:	d001      	beq.n	8015870 <SD_ioctl+0x28>
 801586c:	2303      	movs	r3, #3
 801586e:	e03c      	b.n	80158ea <SD_ioctl+0xa2>

  switch (cmd)
 8015870:	79bb      	ldrb	r3, [r7, #6]
 8015872:	2b03      	cmp	r3, #3
 8015874:	d834      	bhi.n	80158e0 <SD_ioctl+0x98>
 8015876:	a201      	add	r2, pc, #4	; (adr r2, 801587c <SD_ioctl+0x34>)
 8015878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801587c:	0801588d 	.word	0x0801588d
 8015880:	08015895 	.word	0x08015895
 8015884:	080158ad 	.word	0x080158ad
 8015888:	080158c7 	.word	0x080158c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801588c:	2300      	movs	r3, #0
 801588e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015892:	e028      	b.n	80158e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8015894:	f107 0308 	add.w	r3, r7, #8
 8015898:	4618      	mov	r0, r3
 801589a:	f7ff fe95 	bl	80155c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801589e:	6a3a      	ldr	r2, [r7, #32]
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80158a4:	2300      	movs	r3, #0
 80158a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80158aa:	e01c      	b.n	80158e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80158ac:	f107 0308 	add.w	r3, r7, #8
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7ff fe89 	bl	80155c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80158b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b8:	b29a      	uxth	r2, r3
 80158ba:	683b      	ldr	r3, [r7, #0]
 80158bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80158be:	2300      	movs	r3, #0
 80158c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80158c4:	e00f      	b.n	80158e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80158c6:	f107 0308 	add.w	r3, r7, #8
 80158ca:	4618      	mov	r0, r3
 80158cc:	f7ff fe7c 	bl	80155c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80158d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158d2:	0a5a      	lsrs	r2, r3, #9
 80158d4:	683b      	ldr	r3, [r7, #0]
 80158d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80158d8:	2300      	movs	r3, #0
 80158da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80158de:	e002      	b.n	80158e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80158e0:	2304      	movs	r3, #4
 80158e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80158e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	3730      	adds	r7, #48	; 0x30
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd80      	pop	{r7, pc}
 80158f2:	bf00      	nop
 80158f4:	2400010d 	.word	0x2400010d

080158f8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80158f8:	b480      	push	{r7}
 80158fa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80158fc:	4b03      	ldr	r3, [pc, #12]	; (801590c <BSP_SD_WriteCpltCallback+0x14>)
 80158fe:	2201      	movs	r2, #1
 8015900:	601a      	str	r2, [r3, #0]
}
 8015902:	bf00      	nop
 8015904:	46bd      	mov	sp, r7
 8015906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801590a:	4770      	bx	lr
 801590c:	24003e68 	.word	0x24003e68

08015910 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015910:	b480      	push	{r7}
 8015912:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8015914:	4b03      	ldr	r3, [pc, #12]	; (8015924 <BSP_SD_ReadCpltCallback+0x14>)
 8015916:	2201      	movs	r2, #1
 8015918:	601a      	str	r2, [r3, #0]
}
 801591a:	bf00      	nop
 801591c:	46bd      	mov	sp, r7
 801591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015922:	4770      	bx	lr
 8015924:	24003e6c 	.word	0x24003e6c

08015928 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b084      	sub	sp, #16
 801592c:	af00      	add	r7, sp, #0
 801592e:	6078      	str	r0, [r7, #4]
 8015930:	460b      	mov	r3, r1
 8015932:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015934:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015938:	f005 fc72 	bl	801b220 <USBD_static_malloc>
 801593c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d109      	bne.n	8015958 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	32b0      	adds	r2, #176	; 0xb0
 801594e:	2100      	movs	r1, #0
 8015950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015954:	2302      	movs	r3, #2
 8015956:	e0d4      	b.n	8015b02 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015958:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801595c:	2100      	movs	r1, #0
 801595e:	68f8      	ldr	r0, [r7, #12]
 8015960:	f006 fc33 	bl	801c1ca <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	32b0      	adds	r2, #176	; 0xb0
 801596e:	68f9      	ldr	r1, [r7, #12]
 8015970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	32b0      	adds	r2, #176	; 0xb0
 801597e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	7c1b      	ldrb	r3, [r3, #16]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d138      	bne.n	8015a02 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015990:	4b5e      	ldr	r3, [pc, #376]	; (8015b0c <USBD_CDC_Init+0x1e4>)
 8015992:	7819      	ldrb	r1, [r3, #0]
 8015994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015998:	2202      	movs	r2, #2
 801599a:	6878      	ldr	r0, [r7, #4]
 801599c:	f005 fb1d 	bl	801afda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80159a0:	4b5a      	ldr	r3, [pc, #360]	; (8015b0c <USBD_CDC_Init+0x1e4>)
 80159a2:	781b      	ldrb	r3, [r3, #0]
 80159a4:	f003 020f 	and.w	r2, r3, #15
 80159a8:	6879      	ldr	r1, [r7, #4]
 80159aa:	4613      	mov	r3, r2
 80159ac:	009b      	lsls	r3, r3, #2
 80159ae:	4413      	add	r3, r2
 80159b0:	009b      	lsls	r3, r3, #2
 80159b2:	440b      	add	r3, r1
 80159b4:	3324      	adds	r3, #36	; 0x24
 80159b6:	2201      	movs	r2, #1
 80159b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80159ba:	4b55      	ldr	r3, [pc, #340]	; (8015b10 <USBD_CDC_Init+0x1e8>)
 80159bc:	7819      	ldrb	r1, [r3, #0]
 80159be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80159c2:	2202      	movs	r2, #2
 80159c4:	6878      	ldr	r0, [r7, #4]
 80159c6:	f005 fb08 	bl	801afda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80159ca:	4b51      	ldr	r3, [pc, #324]	; (8015b10 <USBD_CDC_Init+0x1e8>)
 80159cc:	781b      	ldrb	r3, [r3, #0]
 80159ce:	f003 020f 	and.w	r2, r3, #15
 80159d2:	6879      	ldr	r1, [r7, #4]
 80159d4:	4613      	mov	r3, r2
 80159d6:	009b      	lsls	r3, r3, #2
 80159d8:	4413      	add	r3, r2
 80159da:	009b      	lsls	r3, r3, #2
 80159dc:	440b      	add	r3, r1
 80159de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80159e2:	2201      	movs	r2, #1
 80159e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80159e6:	4b4b      	ldr	r3, [pc, #300]	; (8015b14 <USBD_CDC_Init+0x1ec>)
 80159e8:	781b      	ldrb	r3, [r3, #0]
 80159ea:	f003 020f 	and.w	r2, r3, #15
 80159ee:	6879      	ldr	r1, [r7, #4]
 80159f0:	4613      	mov	r3, r2
 80159f2:	009b      	lsls	r3, r3, #2
 80159f4:	4413      	add	r3, r2
 80159f6:	009b      	lsls	r3, r3, #2
 80159f8:	440b      	add	r3, r1
 80159fa:	3326      	adds	r3, #38	; 0x26
 80159fc:	2210      	movs	r2, #16
 80159fe:	801a      	strh	r2, [r3, #0]
 8015a00:	e035      	b.n	8015a6e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015a02:	4b42      	ldr	r3, [pc, #264]	; (8015b0c <USBD_CDC_Init+0x1e4>)
 8015a04:	7819      	ldrb	r1, [r3, #0]
 8015a06:	2340      	movs	r3, #64	; 0x40
 8015a08:	2202      	movs	r2, #2
 8015a0a:	6878      	ldr	r0, [r7, #4]
 8015a0c:	f005 fae5 	bl	801afda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015a10:	4b3e      	ldr	r3, [pc, #248]	; (8015b0c <USBD_CDC_Init+0x1e4>)
 8015a12:	781b      	ldrb	r3, [r3, #0]
 8015a14:	f003 020f 	and.w	r2, r3, #15
 8015a18:	6879      	ldr	r1, [r7, #4]
 8015a1a:	4613      	mov	r3, r2
 8015a1c:	009b      	lsls	r3, r3, #2
 8015a1e:	4413      	add	r3, r2
 8015a20:	009b      	lsls	r3, r3, #2
 8015a22:	440b      	add	r3, r1
 8015a24:	3324      	adds	r3, #36	; 0x24
 8015a26:	2201      	movs	r2, #1
 8015a28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015a2a:	4b39      	ldr	r3, [pc, #228]	; (8015b10 <USBD_CDC_Init+0x1e8>)
 8015a2c:	7819      	ldrb	r1, [r3, #0]
 8015a2e:	2340      	movs	r3, #64	; 0x40
 8015a30:	2202      	movs	r2, #2
 8015a32:	6878      	ldr	r0, [r7, #4]
 8015a34:	f005 fad1 	bl	801afda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015a38:	4b35      	ldr	r3, [pc, #212]	; (8015b10 <USBD_CDC_Init+0x1e8>)
 8015a3a:	781b      	ldrb	r3, [r3, #0]
 8015a3c:	f003 020f 	and.w	r2, r3, #15
 8015a40:	6879      	ldr	r1, [r7, #4]
 8015a42:	4613      	mov	r3, r2
 8015a44:	009b      	lsls	r3, r3, #2
 8015a46:	4413      	add	r3, r2
 8015a48:	009b      	lsls	r3, r3, #2
 8015a4a:	440b      	add	r3, r1
 8015a4c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015a50:	2201      	movs	r2, #1
 8015a52:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015a54:	4b2f      	ldr	r3, [pc, #188]	; (8015b14 <USBD_CDC_Init+0x1ec>)
 8015a56:	781b      	ldrb	r3, [r3, #0]
 8015a58:	f003 020f 	and.w	r2, r3, #15
 8015a5c:	6879      	ldr	r1, [r7, #4]
 8015a5e:	4613      	mov	r3, r2
 8015a60:	009b      	lsls	r3, r3, #2
 8015a62:	4413      	add	r3, r2
 8015a64:	009b      	lsls	r3, r3, #2
 8015a66:	440b      	add	r3, r1
 8015a68:	3326      	adds	r3, #38	; 0x26
 8015a6a:	2210      	movs	r2, #16
 8015a6c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015a6e:	4b29      	ldr	r3, [pc, #164]	; (8015b14 <USBD_CDC_Init+0x1ec>)
 8015a70:	7819      	ldrb	r1, [r3, #0]
 8015a72:	2308      	movs	r3, #8
 8015a74:	2203      	movs	r2, #3
 8015a76:	6878      	ldr	r0, [r7, #4]
 8015a78:	f005 faaf 	bl	801afda <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015a7c:	4b25      	ldr	r3, [pc, #148]	; (8015b14 <USBD_CDC_Init+0x1ec>)
 8015a7e:	781b      	ldrb	r3, [r3, #0]
 8015a80:	f003 020f 	and.w	r2, r3, #15
 8015a84:	6879      	ldr	r1, [r7, #4]
 8015a86:	4613      	mov	r3, r2
 8015a88:	009b      	lsls	r3, r3, #2
 8015a8a:	4413      	add	r3, r2
 8015a8c:	009b      	lsls	r3, r3, #2
 8015a8e:	440b      	add	r3, r1
 8015a90:	3324      	adds	r3, #36	; 0x24
 8015a92:	2201      	movs	r2, #1
 8015a94:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	2200      	movs	r2, #0
 8015a9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015aa4:	687a      	ldr	r2, [r7, #4]
 8015aa6:	33b0      	adds	r3, #176	; 0xb0
 8015aa8:	009b      	lsls	r3, r3, #2
 8015aaa:	4413      	add	r3, r2
 8015aac:	685b      	ldr	r3, [r3, #4]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	2200      	movs	r2, #0
 8015abe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d101      	bne.n	8015ad0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015acc:	2302      	movs	r3, #2
 8015ace:	e018      	b.n	8015b02 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	7c1b      	ldrb	r3, [r3, #16]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d10a      	bne.n	8015aee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015ad8:	4b0d      	ldr	r3, [pc, #52]	; (8015b10 <USBD_CDC_Init+0x1e8>)
 8015ada:	7819      	ldrb	r1, [r3, #0]
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015ae6:	6878      	ldr	r0, [r7, #4]
 8015ae8:	f005 fb66 	bl	801b1b8 <USBD_LL_PrepareReceive>
 8015aec:	e008      	b.n	8015b00 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015aee:	4b08      	ldr	r3, [pc, #32]	; (8015b10 <USBD_CDC_Init+0x1e8>)
 8015af0:	7819      	ldrb	r1, [r3, #0]
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015af8:	2340      	movs	r3, #64	; 0x40
 8015afa:	6878      	ldr	r0, [r7, #4]
 8015afc:	f005 fb5c 	bl	801b1b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015b00:	2300      	movs	r3, #0
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	3710      	adds	r7, #16
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}
 8015b0a:	bf00      	nop
 8015b0c:	24000197 	.word	0x24000197
 8015b10:	24000198 	.word	0x24000198
 8015b14:	24000199 	.word	0x24000199

08015b18 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b082      	sub	sp, #8
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
 8015b20:	460b      	mov	r3, r1
 8015b22:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015b24:	4b3a      	ldr	r3, [pc, #232]	; (8015c10 <USBD_CDC_DeInit+0xf8>)
 8015b26:	781b      	ldrb	r3, [r3, #0]
 8015b28:	4619      	mov	r1, r3
 8015b2a:	6878      	ldr	r0, [r7, #4]
 8015b2c:	f005 fa7b 	bl	801b026 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015b30:	4b37      	ldr	r3, [pc, #220]	; (8015c10 <USBD_CDC_DeInit+0xf8>)
 8015b32:	781b      	ldrb	r3, [r3, #0]
 8015b34:	f003 020f 	and.w	r2, r3, #15
 8015b38:	6879      	ldr	r1, [r7, #4]
 8015b3a:	4613      	mov	r3, r2
 8015b3c:	009b      	lsls	r3, r3, #2
 8015b3e:	4413      	add	r3, r2
 8015b40:	009b      	lsls	r3, r3, #2
 8015b42:	440b      	add	r3, r1
 8015b44:	3324      	adds	r3, #36	; 0x24
 8015b46:	2200      	movs	r2, #0
 8015b48:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015b4a:	4b32      	ldr	r3, [pc, #200]	; (8015c14 <USBD_CDC_DeInit+0xfc>)
 8015b4c:	781b      	ldrb	r3, [r3, #0]
 8015b4e:	4619      	mov	r1, r3
 8015b50:	6878      	ldr	r0, [r7, #4]
 8015b52:	f005 fa68 	bl	801b026 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015b56:	4b2f      	ldr	r3, [pc, #188]	; (8015c14 <USBD_CDC_DeInit+0xfc>)
 8015b58:	781b      	ldrb	r3, [r3, #0]
 8015b5a:	f003 020f 	and.w	r2, r3, #15
 8015b5e:	6879      	ldr	r1, [r7, #4]
 8015b60:	4613      	mov	r3, r2
 8015b62:	009b      	lsls	r3, r3, #2
 8015b64:	4413      	add	r3, r2
 8015b66:	009b      	lsls	r3, r3, #2
 8015b68:	440b      	add	r3, r1
 8015b6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015b6e:	2200      	movs	r2, #0
 8015b70:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015b72:	4b29      	ldr	r3, [pc, #164]	; (8015c18 <USBD_CDC_DeInit+0x100>)
 8015b74:	781b      	ldrb	r3, [r3, #0]
 8015b76:	4619      	mov	r1, r3
 8015b78:	6878      	ldr	r0, [r7, #4]
 8015b7a:	f005 fa54 	bl	801b026 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015b7e:	4b26      	ldr	r3, [pc, #152]	; (8015c18 <USBD_CDC_DeInit+0x100>)
 8015b80:	781b      	ldrb	r3, [r3, #0]
 8015b82:	f003 020f 	and.w	r2, r3, #15
 8015b86:	6879      	ldr	r1, [r7, #4]
 8015b88:	4613      	mov	r3, r2
 8015b8a:	009b      	lsls	r3, r3, #2
 8015b8c:	4413      	add	r3, r2
 8015b8e:	009b      	lsls	r3, r3, #2
 8015b90:	440b      	add	r3, r1
 8015b92:	3324      	adds	r3, #36	; 0x24
 8015b94:	2200      	movs	r2, #0
 8015b96:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015b98:	4b1f      	ldr	r3, [pc, #124]	; (8015c18 <USBD_CDC_DeInit+0x100>)
 8015b9a:	781b      	ldrb	r3, [r3, #0]
 8015b9c:	f003 020f 	and.w	r2, r3, #15
 8015ba0:	6879      	ldr	r1, [r7, #4]
 8015ba2:	4613      	mov	r3, r2
 8015ba4:	009b      	lsls	r3, r3, #2
 8015ba6:	4413      	add	r3, r2
 8015ba8:	009b      	lsls	r3, r3, #2
 8015baa:	440b      	add	r3, r1
 8015bac:	3326      	adds	r3, #38	; 0x26
 8015bae:	2200      	movs	r2, #0
 8015bb0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	32b0      	adds	r2, #176	; 0xb0
 8015bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d01f      	beq.n	8015c04 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015bca:	687a      	ldr	r2, [r7, #4]
 8015bcc:	33b0      	adds	r3, #176	; 0xb0
 8015bce:	009b      	lsls	r3, r3, #2
 8015bd0:	4413      	add	r3, r2
 8015bd2:	685b      	ldr	r3, [r3, #4]
 8015bd4:	685b      	ldr	r3, [r3, #4]
 8015bd6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	32b0      	adds	r2, #176	; 0xb0
 8015be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015be6:	4618      	mov	r0, r3
 8015be8:	f005 fb28 	bl	801b23c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	32b0      	adds	r2, #176	; 0xb0
 8015bf6:	2100      	movs	r1, #0
 8015bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	2200      	movs	r2, #0
 8015c00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015c04:	2300      	movs	r3, #0
}
 8015c06:	4618      	mov	r0, r3
 8015c08:	3708      	adds	r7, #8
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	bd80      	pop	{r7, pc}
 8015c0e:	bf00      	nop
 8015c10:	24000197 	.word	0x24000197
 8015c14:	24000198 	.word	0x24000198
 8015c18:	24000199 	.word	0x24000199

08015c1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b086      	sub	sp, #24
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
 8015c24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	32b0      	adds	r2, #176	; 0xb0
 8015c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c34:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015c36:	2300      	movs	r3, #0
 8015c38:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015c3e:	2300      	movs	r3, #0
 8015c40:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015c42:	693b      	ldr	r3, [r7, #16]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d101      	bne.n	8015c4c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015c48:	2303      	movs	r3, #3
 8015c4a:	e0bf      	b.n	8015dcc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015c4c:	683b      	ldr	r3, [r7, #0]
 8015c4e:	781b      	ldrb	r3, [r3, #0]
 8015c50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d050      	beq.n	8015cfa <USBD_CDC_Setup+0xde>
 8015c58:	2b20      	cmp	r3, #32
 8015c5a:	f040 80af 	bne.w	8015dbc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	88db      	ldrh	r3, [r3, #6]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d03a      	beq.n	8015cdc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	781b      	ldrb	r3, [r3, #0]
 8015c6a:	b25b      	sxtb	r3, r3
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	da1b      	bge.n	8015ca8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015c76:	687a      	ldr	r2, [r7, #4]
 8015c78:	33b0      	adds	r3, #176	; 0xb0
 8015c7a:	009b      	lsls	r3, r3, #2
 8015c7c:	4413      	add	r3, r2
 8015c7e:	685b      	ldr	r3, [r3, #4]
 8015c80:	689b      	ldr	r3, [r3, #8]
 8015c82:	683a      	ldr	r2, [r7, #0]
 8015c84:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015c86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015c88:	683a      	ldr	r2, [r7, #0]
 8015c8a:	88d2      	ldrh	r2, [r2, #6]
 8015c8c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015c8e:	683b      	ldr	r3, [r7, #0]
 8015c90:	88db      	ldrh	r3, [r3, #6]
 8015c92:	2b07      	cmp	r3, #7
 8015c94:	bf28      	it	cs
 8015c96:	2307      	movcs	r3, #7
 8015c98:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015c9a:	693b      	ldr	r3, [r7, #16]
 8015c9c:	89fa      	ldrh	r2, [r7, #14]
 8015c9e:	4619      	mov	r1, r3
 8015ca0:	6878      	ldr	r0, [r7, #4]
 8015ca2:	f001 fd89 	bl	80177b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015ca6:	e090      	b.n	8015dca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	785a      	ldrb	r2, [r3, #1]
 8015cac:	693b      	ldr	r3, [r7, #16]
 8015cae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015cb2:	683b      	ldr	r3, [r7, #0]
 8015cb4:	88db      	ldrh	r3, [r3, #6]
 8015cb6:	2b3f      	cmp	r3, #63	; 0x3f
 8015cb8:	d803      	bhi.n	8015cc2 <USBD_CDC_Setup+0xa6>
 8015cba:	683b      	ldr	r3, [r7, #0]
 8015cbc:	88db      	ldrh	r3, [r3, #6]
 8015cbe:	b2da      	uxtb	r2, r3
 8015cc0:	e000      	b.n	8015cc4 <USBD_CDC_Setup+0xa8>
 8015cc2:	2240      	movs	r2, #64	; 0x40
 8015cc4:	693b      	ldr	r3, [r7, #16]
 8015cc6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015cca:	6939      	ldr	r1, [r7, #16]
 8015ccc:	693b      	ldr	r3, [r7, #16]
 8015cce:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8015cd2:	461a      	mov	r2, r3
 8015cd4:	6878      	ldr	r0, [r7, #4]
 8015cd6:	f001 fd9b 	bl	8017810 <USBD_CtlPrepareRx>
      break;
 8015cda:	e076      	b.n	8015dca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015ce2:	687a      	ldr	r2, [r7, #4]
 8015ce4:	33b0      	adds	r3, #176	; 0xb0
 8015ce6:	009b      	lsls	r3, r3, #2
 8015ce8:	4413      	add	r3, r2
 8015cea:	685b      	ldr	r3, [r3, #4]
 8015cec:	689b      	ldr	r3, [r3, #8]
 8015cee:	683a      	ldr	r2, [r7, #0]
 8015cf0:	7850      	ldrb	r0, [r2, #1]
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	6839      	ldr	r1, [r7, #0]
 8015cf6:	4798      	blx	r3
      break;
 8015cf8:	e067      	b.n	8015dca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015cfa:	683b      	ldr	r3, [r7, #0]
 8015cfc:	785b      	ldrb	r3, [r3, #1]
 8015cfe:	2b0b      	cmp	r3, #11
 8015d00:	d851      	bhi.n	8015da6 <USBD_CDC_Setup+0x18a>
 8015d02:	a201      	add	r2, pc, #4	; (adr r2, 8015d08 <USBD_CDC_Setup+0xec>)
 8015d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d08:	08015d39 	.word	0x08015d39
 8015d0c:	08015db5 	.word	0x08015db5
 8015d10:	08015da7 	.word	0x08015da7
 8015d14:	08015da7 	.word	0x08015da7
 8015d18:	08015da7 	.word	0x08015da7
 8015d1c:	08015da7 	.word	0x08015da7
 8015d20:	08015da7 	.word	0x08015da7
 8015d24:	08015da7 	.word	0x08015da7
 8015d28:	08015da7 	.word	0x08015da7
 8015d2c:	08015da7 	.word	0x08015da7
 8015d30:	08015d63 	.word	0x08015d63
 8015d34:	08015d8d 	.word	0x08015d8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d3e:	b2db      	uxtb	r3, r3
 8015d40:	2b03      	cmp	r3, #3
 8015d42:	d107      	bne.n	8015d54 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015d44:	f107 030a 	add.w	r3, r7, #10
 8015d48:	2202      	movs	r2, #2
 8015d4a:	4619      	mov	r1, r3
 8015d4c:	6878      	ldr	r0, [r7, #4]
 8015d4e:	f001 fd33 	bl	80177b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015d52:	e032      	b.n	8015dba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015d54:	6839      	ldr	r1, [r7, #0]
 8015d56:	6878      	ldr	r0, [r7, #4]
 8015d58:	f001 fcbd 	bl	80176d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8015d5c:	2303      	movs	r3, #3
 8015d5e:	75fb      	strb	r3, [r7, #23]
          break;
 8015d60:	e02b      	b.n	8015dba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d68:	b2db      	uxtb	r3, r3
 8015d6a:	2b03      	cmp	r3, #3
 8015d6c:	d107      	bne.n	8015d7e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015d6e:	f107 030d 	add.w	r3, r7, #13
 8015d72:	2201      	movs	r2, #1
 8015d74:	4619      	mov	r1, r3
 8015d76:	6878      	ldr	r0, [r7, #4]
 8015d78:	f001 fd1e 	bl	80177b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015d7c:	e01d      	b.n	8015dba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015d7e:	6839      	ldr	r1, [r7, #0]
 8015d80:	6878      	ldr	r0, [r7, #4]
 8015d82:	f001 fca8 	bl	80176d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8015d86:	2303      	movs	r3, #3
 8015d88:	75fb      	strb	r3, [r7, #23]
          break;
 8015d8a:	e016      	b.n	8015dba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d92:	b2db      	uxtb	r3, r3
 8015d94:	2b03      	cmp	r3, #3
 8015d96:	d00f      	beq.n	8015db8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015d98:	6839      	ldr	r1, [r7, #0]
 8015d9a:	6878      	ldr	r0, [r7, #4]
 8015d9c:	f001 fc9b 	bl	80176d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8015da0:	2303      	movs	r3, #3
 8015da2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015da4:	e008      	b.n	8015db8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015da6:	6839      	ldr	r1, [r7, #0]
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f001 fc94 	bl	80176d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8015dae:	2303      	movs	r3, #3
 8015db0:	75fb      	strb	r3, [r7, #23]
          break;
 8015db2:	e002      	b.n	8015dba <USBD_CDC_Setup+0x19e>
          break;
 8015db4:	bf00      	nop
 8015db6:	e008      	b.n	8015dca <USBD_CDC_Setup+0x1ae>
          break;
 8015db8:	bf00      	nop
      }
      break;
 8015dba:	e006      	b.n	8015dca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015dbc:	6839      	ldr	r1, [r7, #0]
 8015dbe:	6878      	ldr	r0, [r7, #4]
 8015dc0:	f001 fc89 	bl	80176d6 <USBD_CtlError>
      ret = USBD_FAIL;
 8015dc4:	2303      	movs	r3, #3
 8015dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8015dc8:	bf00      	nop
  }

  return (uint8_t)ret;
 8015dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8015dcc:	4618      	mov	r0, r3
 8015dce:	3718      	adds	r7, #24
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bd80      	pop	{r7, pc}

08015dd4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b084      	sub	sp, #16
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
 8015ddc:	460b      	mov	r3, r1
 8015dde:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015de6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	32b0      	adds	r2, #176	; 0xb0
 8015df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d101      	bne.n	8015dfe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015dfa:	2303      	movs	r3, #3
 8015dfc:	e065      	b.n	8015eca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	32b0      	adds	r2, #176	; 0xb0
 8015e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e0c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015e0e:	78fb      	ldrb	r3, [r7, #3]
 8015e10:	f003 020f 	and.w	r2, r3, #15
 8015e14:	6879      	ldr	r1, [r7, #4]
 8015e16:	4613      	mov	r3, r2
 8015e18:	009b      	lsls	r3, r3, #2
 8015e1a:	4413      	add	r3, r2
 8015e1c:	009b      	lsls	r3, r3, #2
 8015e1e:	440b      	add	r3, r1
 8015e20:	3318      	adds	r3, #24
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d02f      	beq.n	8015e88 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015e28:	78fb      	ldrb	r3, [r7, #3]
 8015e2a:	f003 020f 	and.w	r2, r3, #15
 8015e2e:	6879      	ldr	r1, [r7, #4]
 8015e30:	4613      	mov	r3, r2
 8015e32:	009b      	lsls	r3, r3, #2
 8015e34:	4413      	add	r3, r2
 8015e36:	009b      	lsls	r3, r3, #2
 8015e38:	440b      	add	r3, r1
 8015e3a:	3318      	adds	r3, #24
 8015e3c:	681a      	ldr	r2, [r3, #0]
 8015e3e:	78fb      	ldrb	r3, [r7, #3]
 8015e40:	f003 010f 	and.w	r1, r3, #15
 8015e44:	68f8      	ldr	r0, [r7, #12]
 8015e46:	460b      	mov	r3, r1
 8015e48:	00db      	lsls	r3, r3, #3
 8015e4a:	440b      	add	r3, r1
 8015e4c:	009b      	lsls	r3, r3, #2
 8015e4e:	4403      	add	r3, r0
 8015e50:	3344      	adds	r3, #68	; 0x44
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	fbb2 f1f3 	udiv	r1, r2, r3
 8015e58:	fb01 f303 	mul.w	r3, r1, r3
 8015e5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d112      	bne.n	8015e88 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015e62:	78fb      	ldrb	r3, [r7, #3]
 8015e64:	f003 020f 	and.w	r2, r3, #15
 8015e68:	6879      	ldr	r1, [r7, #4]
 8015e6a:	4613      	mov	r3, r2
 8015e6c:	009b      	lsls	r3, r3, #2
 8015e6e:	4413      	add	r3, r2
 8015e70:	009b      	lsls	r3, r3, #2
 8015e72:	440b      	add	r3, r1
 8015e74:	3318      	adds	r3, #24
 8015e76:	2200      	movs	r2, #0
 8015e78:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015e7a:	78f9      	ldrb	r1, [r7, #3]
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	2200      	movs	r2, #0
 8015e80:	6878      	ldr	r0, [r7, #4]
 8015e82:	f005 f978 	bl	801b176 <USBD_LL_Transmit>
 8015e86:	e01f      	b.n	8015ec8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015e88:	68bb      	ldr	r3, [r7, #8]
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015e96:	687a      	ldr	r2, [r7, #4]
 8015e98:	33b0      	adds	r3, #176	; 0xb0
 8015e9a:	009b      	lsls	r3, r3, #2
 8015e9c:	4413      	add	r3, r2
 8015e9e:	685b      	ldr	r3, [r3, #4]
 8015ea0:	691b      	ldr	r3, [r3, #16]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d010      	beq.n	8015ec8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015eac:	687a      	ldr	r2, [r7, #4]
 8015eae:	33b0      	adds	r3, #176	; 0xb0
 8015eb0:	009b      	lsls	r3, r3, #2
 8015eb2:	4413      	add	r3, r2
 8015eb4:	685b      	ldr	r3, [r3, #4]
 8015eb6:	691b      	ldr	r3, [r3, #16]
 8015eb8:	68ba      	ldr	r2, [r7, #8]
 8015eba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8015ebe:	68ba      	ldr	r2, [r7, #8]
 8015ec0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015ec4:	78fa      	ldrb	r2, [r7, #3]
 8015ec6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015ec8:	2300      	movs	r3, #0
}
 8015eca:	4618      	mov	r0, r3
 8015ecc:	3710      	adds	r7, #16
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	bd80      	pop	{r7, pc}

08015ed2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015ed2:	b580      	push	{r7, lr}
 8015ed4:	b084      	sub	sp, #16
 8015ed6:	af00      	add	r7, sp, #0
 8015ed8:	6078      	str	r0, [r7, #4]
 8015eda:	460b      	mov	r3, r1
 8015edc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	32b0      	adds	r2, #176	; 0xb0
 8015ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015eec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	32b0      	adds	r2, #176	; 0xb0
 8015ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d101      	bne.n	8015f04 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015f00:	2303      	movs	r3, #3
 8015f02:	e01a      	b.n	8015f3a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015f04:	78fb      	ldrb	r3, [r7, #3]
 8015f06:	4619      	mov	r1, r3
 8015f08:	6878      	ldr	r0, [r7, #4]
 8015f0a:	f005 f976 	bl	801b1fa <USBD_LL_GetRxDataSize>
 8015f0e:	4602      	mov	r2, r0
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015f1c:	687a      	ldr	r2, [r7, #4]
 8015f1e:	33b0      	adds	r3, #176	; 0xb0
 8015f20:	009b      	lsls	r3, r3, #2
 8015f22:	4413      	add	r3, r2
 8015f24:	685b      	ldr	r3, [r3, #4]
 8015f26:	68db      	ldr	r3, [r3, #12]
 8015f28:	68fa      	ldr	r2, [r7, #12]
 8015f2a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8015f2e:	68fa      	ldr	r2, [r7, #12]
 8015f30:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015f34:	4611      	mov	r1, r2
 8015f36:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015f38:	2300      	movs	r3, #0
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3710      	adds	r7, #16
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}

08015f42 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015f42:	b580      	push	{r7, lr}
 8015f44:	b084      	sub	sp, #16
 8015f46:	af00      	add	r7, sp, #0
 8015f48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	32b0      	adds	r2, #176	; 0xb0
 8015f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d101      	bne.n	8015f64 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015f60:	2303      	movs	r3, #3
 8015f62:	e025      	b.n	8015fb0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015f6a:	687a      	ldr	r2, [r7, #4]
 8015f6c:	33b0      	adds	r3, #176	; 0xb0
 8015f6e:	009b      	lsls	r3, r3, #2
 8015f70:	4413      	add	r3, r2
 8015f72:	685b      	ldr	r3, [r3, #4]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d01a      	beq.n	8015fae <USBD_CDC_EP0_RxReady+0x6c>
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015f7e:	2bff      	cmp	r3, #255	; 0xff
 8015f80:	d015      	beq.n	8015fae <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015f88:	687a      	ldr	r2, [r7, #4]
 8015f8a:	33b0      	adds	r3, #176	; 0xb0
 8015f8c:	009b      	lsls	r3, r3, #2
 8015f8e:	4413      	add	r3, r2
 8015f90:	685b      	ldr	r3, [r3, #4]
 8015f92:	689b      	ldr	r3, [r3, #8]
 8015f94:	68fa      	ldr	r2, [r7, #12]
 8015f96:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8015f9a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015f9c:	68fa      	ldr	r2, [r7, #12]
 8015f9e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015fa2:	b292      	uxth	r2, r2
 8015fa4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	22ff      	movs	r2, #255	; 0xff
 8015faa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015fae:	2300      	movs	r3, #0
}
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	3710      	adds	r7, #16
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	bd80      	pop	{r7, pc}

08015fb8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b086      	sub	sp, #24
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015fc0:	2182      	movs	r1, #130	; 0x82
 8015fc2:	4818      	ldr	r0, [pc, #96]	; (8016024 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015fc4:	f000 fd4f 	bl	8016a66 <USBD_GetEpDesc>
 8015fc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015fca:	2101      	movs	r1, #1
 8015fcc:	4815      	ldr	r0, [pc, #84]	; (8016024 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015fce:	f000 fd4a 	bl	8016a66 <USBD_GetEpDesc>
 8015fd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015fd4:	2181      	movs	r1, #129	; 0x81
 8015fd6:	4813      	ldr	r0, [pc, #76]	; (8016024 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015fd8:	f000 fd45 	bl	8016a66 <USBD_GetEpDesc>
 8015fdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015fde:	697b      	ldr	r3, [r7, #20]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d002      	beq.n	8015fea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015fe4:	697b      	ldr	r3, [r7, #20]
 8015fe6:	2210      	movs	r2, #16
 8015fe8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015fea:	693b      	ldr	r3, [r7, #16]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d006      	beq.n	8015ffe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015ff0:	693b      	ldr	r3, [r7, #16]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015ff8:	711a      	strb	r2, [r3, #4]
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d006      	beq.n	8016012 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	2200      	movs	r2, #0
 8016008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801600c:	711a      	strb	r2, [r3, #4]
 801600e:	2200      	movs	r2, #0
 8016010:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	2243      	movs	r2, #67	; 0x43
 8016016:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016018:	4b02      	ldr	r3, [pc, #8]	; (8016024 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801601a:	4618      	mov	r0, r3
 801601c:	3718      	adds	r7, #24
 801601e:	46bd      	mov	sp, r7
 8016020:	bd80      	pop	{r7, pc}
 8016022:	bf00      	nop
 8016024:	24000154 	.word	0x24000154

08016028 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b086      	sub	sp, #24
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016030:	2182      	movs	r1, #130	; 0x82
 8016032:	4818      	ldr	r0, [pc, #96]	; (8016094 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016034:	f000 fd17 	bl	8016a66 <USBD_GetEpDesc>
 8016038:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801603a:	2101      	movs	r1, #1
 801603c:	4815      	ldr	r0, [pc, #84]	; (8016094 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801603e:	f000 fd12 	bl	8016a66 <USBD_GetEpDesc>
 8016042:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016044:	2181      	movs	r1, #129	; 0x81
 8016046:	4813      	ldr	r0, [pc, #76]	; (8016094 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016048:	f000 fd0d 	bl	8016a66 <USBD_GetEpDesc>
 801604c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801604e:	697b      	ldr	r3, [r7, #20]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d002      	beq.n	801605a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8016054:	697b      	ldr	r3, [r7, #20]
 8016056:	2210      	movs	r2, #16
 8016058:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801605a:	693b      	ldr	r3, [r7, #16]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d006      	beq.n	801606e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016060:	693b      	ldr	r3, [r7, #16]
 8016062:	2200      	movs	r2, #0
 8016064:	711a      	strb	r2, [r3, #4]
 8016066:	2200      	movs	r2, #0
 8016068:	f042 0202 	orr.w	r2, r2, #2
 801606c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d006      	beq.n	8016082 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	2200      	movs	r2, #0
 8016078:	711a      	strb	r2, [r3, #4]
 801607a:	2200      	movs	r2, #0
 801607c:	f042 0202 	orr.w	r2, r2, #2
 8016080:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	2243      	movs	r2, #67	; 0x43
 8016086:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016088:	4b02      	ldr	r3, [pc, #8]	; (8016094 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801608a:	4618      	mov	r0, r3
 801608c:	3718      	adds	r7, #24
 801608e:	46bd      	mov	sp, r7
 8016090:	bd80      	pop	{r7, pc}
 8016092:	bf00      	nop
 8016094:	24000154 	.word	0x24000154

08016098 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b086      	sub	sp, #24
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80160a0:	2182      	movs	r1, #130	; 0x82
 80160a2:	4818      	ldr	r0, [pc, #96]	; (8016104 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80160a4:	f000 fcdf 	bl	8016a66 <USBD_GetEpDesc>
 80160a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80160aa:	2101      	movs	r1, #1
 80160ac:	4815      	ldr	r0, [pc, #84]	; (8016104 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80160ae:	f000 fcda 	bl	8016a66 <USBD_GetEpDesc>
 80160b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80160b4:	2181      	movs	r1, #129	; 0x81
 80160b6:	4813      	ldr	r0, [pc, #76]	; (8016104 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80160b8:	f000 fcd5 	bl	8016a66 <USBD_GetEpDesc>
 80160bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80160be:	697b      	ldr	r3, [r7, #20]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d002      	beq.n	80160ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80160c4:	697b      	ldr	r3, [r7, #20]
 80160c6:	2210      	movs	r2, #16
 80160c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80160ca:	693b      	ldr	r3, [r7, #16]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d006      	beq.n	80160de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80160d0:	693b      	ldr	r3, [r7, #16]
 80160d2:	2200      	movs	r2, #0
 80160d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80160d8:	711a      	strb	r2, [r3, #4]
 80160da:	2200      	movs	r2, #0
 80160dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d006      	beq.n	80160f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	2200      	movs	r2, #0
 80160e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80160ec:	711a      	strb	r2, [r3, #4]
 80160ee:	2200      	movs	r2, #0
 80160f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	2243      	movs	r2, #67	; 0x43
 80160f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80160f8:	4b02      	ldr	r3, [pc, #8]	; (8016104 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80160fa:	4618      	mov	r0, r3
 80160fc:	3718      	adds	r7, #24
 80160fe:	46bd      	mov	sp, r7
 8016100:	bd80      	pop	{r7, pc}
 8016102:	bf00      	nop
 8016104:	24000154 	.word	0x24000154

08016108 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016108:	b480      	push	{r7}
 801610a:	b083      	sub	sp, #12
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	220a      	movs	r2, #10
 8016114:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8016116:	4b03      	ldr	r3, [pc, #12]	; (8016124 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016118:	4618      	mov	r0, r3
 801611a:	370c      	adds	r7, #12
 801611c:	46bd      	mov	sp, r7
 801611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016122:	4770      	bx	lr
 8016124:	24000110 	.word	0x24000110

08016128 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016128:	b480      	push	{r7}
 801612a:	b083      	sub	sp, #12
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
 8016130:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8016132:	683b      	ldr	r3, [r7, #0]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d101      	bne.n	801613c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016138:	2303      	movs	r3, #3
 801613a:	e009      	b.n	8016150 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8016142:	687a      	ldr	r2, [r7, #4]
 8016144:	33b0      	adds	r3, #176	; 0xb0
 8016146:	009b      	lsls	r3, r3, #2
 8016148:	4413      	add	r3, r2
 801614a:	683a      	ldr	r2, [r7, #0]
 801614c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801614e:	2300      	movs	r3, #0
}
 8016150:	4618      	mov	r0, r3
 8016152:	370c      	adds	r7, #12
 8016154:	46bd      	mov	sp, r7
 8016156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801615a:	4770      	bx	lr

0801615c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801615c:	b480      	push	{r7}
 801615e:	b087      	sub	sp, #28
 8016160:	af00      	add	r7, sp, #0
 8016162:	60f8      	str	r0, [r7, #12]
 8016164:	60b9      	str	r1, [r7, #8]
 8016166:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	32b0      	adds	r2, #176	; 0xb0
 8016172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016176:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016178:	697b      	ldr	r3, [r7, #20]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d101      	bne.n	8016182 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801617e:	2303      	movs	r3, #3
 8016180:	e008      	b.n	8016194 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8016182:	697b      	ldr	r3, [r7, #20]
 8016184:	68ba      	ldr	r2, [r7, #8]
 8016186:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801618a:	697b      	ldr	r3, [r7, #20]
 801618c:	687a      	ldr	r2, [r7, #4]
 801618e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8016192:	2300      	movs	r3, #0
}
 8016194:	4618      	mov	r0, r3
 8016196:	371c      	adds	r7, #28
 8016198:	46bd      	mov	sp, r7
 801619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801619e:	4770      	bx	lr

080161a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80161a0:	b480      	push	{r7}
 80161a2:	b085      	sub	sp, #20
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
 80161a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	32b0      	adds	r2, #176	; 0xb0
 80161b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d101      	bne.n	80161c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80161c0:	2303      	movs	r3, #3
 80161c2:	e004      	b.n	80161ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	683a      	ldr	r2, [r7, #0]
 80161c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80161cc:	2300      	movs	r3, #0
}
 80161ce:	4618      	mov	r0, r3
 80161d0:	3714      	adds	r7, #20
 80161d2:	46bd      	mov	sp, r7
 80161d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d8:	4770      	bx	lr
	...

080161dc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b084      	sub	sp, #16
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	32b0      	adds	r2, #176	; 0xb0
 80161ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161f2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80161f4:	2301      	movs	r3, #1
 80161f6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80161f8:	68bb      	ldr	r3, [r7, #8]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d101      	bne.n	8016202 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80161fe:	2303      	movs	r3, #3
 8016200:	e025      	b.n	801624e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8016202:	68bb      	ldr	r3, [r7, #8]
 8016204:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016208:	2b00      	cmp	r3, #0
 801620a:	d11f      	bne.n	801624c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801620c:	68bb      	ldr	r3, [r7, #8]
 801620e:	2201      	movs	r2, #1
 8016210:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8016214:	4b10      	ldr	r3, [pc, #64]	; (8016258 <USBD_CDC_TransmitPacket+0x7c>)
 8016216:	781b      	ldrb	r3, [r3, #0]
 8016218:	f003 020f 	and.w	r2, r3, #15
 801621c:	68bb      	ldr	r3, [r7, #8]
 801621e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8016222:	6878      	ldr	r0, [r7, #4]
 8016224:	4613      	mov	r3, r2
 8016226:	009b      	lsls	r3, r3, #2
 8016228:	4413      	add	r3, r2
 801622a:	009b      	lsls	r3, r3, #2
 801622c:	4403      	add	r3, r0
 801622e:	3318      	adds	r3, #24
 8016230:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8016232:	4b09      	ldr	r3, [pc, #36]	; (8016258 <USBD_CDC_TransmitPacket+0x7c>)
 8016234:	7819      	ldrb	r1, [r3, #0]
 8016236:	68bb      	ldr	r3, [r7, #8]
 8016238:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801623c:	68bb      	ldr	r3, [r7, #8]
 801623e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8016242:	6878      	ldr	r0, [r7, #4]
 8016244:	f004 ff97 	bl	801b176 <USBD_LL_Transmit>

    ret = USBD_OK;
 8016248:	2300      	movs	r3, #0
 801624a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801624c:	7bfb      	ldrb	r3, [r7, #15]
}
 801624e:	4618      	mov	r0, r3
 8016250:	3710      	adds	r7, #16
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}
 8016256:	bf00      	nop
 8016258:	24000197 	.word	0x24000197

0801625c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b084      	sub	sp, #16
 8016260:	af00      	add	r7, sp, #0
 8016262:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	32b0      	adds	r2, #176	; 0xb0
 801626e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016272:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	32b0      	adds	r2, #176	; 0xb0
 801627e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d101      	bne.n	801628a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8016286:	2303      	movs	r3, #3
 8016288:	e018      	b.n	80162bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	7c1b      	ldrb	r3, [r3, #16]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d10a      	bne.n	80162a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016292:	4b0c      	ldr	r3, [pc, #48]	; (80162c4 <USBD_CDC_ReceivePacket+0x68>)
 8016294:	7819      	ldrb	r1, [r3, #0]
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801629c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80162a0:	6878      	ldr	r0, [r7, #4]
 80162a2:	f004 ff89 	bl	801b1b8 <USBD_LL_PrepareReceive>
 80162a6:	e008      	b.n	80162ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80162a8:	4b06      	ldr	r3, [pc, #24]	; (80162c4 <USBD_CDC_ReceivePacket+0x68>)
 80162aa:	7819      	ldrb	r1, [r3, #0]
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80162b2:	2340      	movs	r3, #64	; 0x40
 80162b4:	6878      	ldr	r0, [r7, #4]
 80162b6:	f004 ff7f 	bl	801b1b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80162ba:	2300      	movs	r3, #0
}
 80162bc:	4618      	mov	r0, r3
 80162be:	3710      	adds	r7, #16
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bd80      	pop	{r7, pc}
 80162c4:	24000198 	.word	0x24000198

080162c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b086      	sub	sp, #24
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	60f8      	str	r0, [r7, #12]
 80162d0:	60b9      	str	r1, [r7, #8]
 80162d2:	4613      	mov	r3, r2
 80162d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d101      	bne.n	80162e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80162dc:	2303      	movs	r3, #3
 80162de:	e01f      	b.n	8016320 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	2200      	movs	r2, #0
 80162e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	2200      	movs	r2, #0
 80162ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	2200      	movs	r2, #0
 80162f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80162f8:	68bb      	ldr	r3, [r7, #8]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d003      	beq.n	8016306 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	68ba      	ldr	r2, [r7, #8]
 8016302:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	2201      	movs	r2, #1
 801630a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	79fa      	ldrb	r2, [r7, #7]
 8016312:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016314:	68f8      	ldr	r0, [r7, #12]
 8016316:	f004 fdf3 	bl	801af00 <USBD_LL_Init>
 801631a:	4603      	mov	r3, r0
 801631c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801631e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016320:	4618      	mov	r0, r3
 8016322:	3718      	adds	r7, #24
 8016324:	46bd      	mov	sp, r7
 8016326:	bd80      	pop	{r7, pc}

08016328 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b084      	sub	sp, #16
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
 8016330:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016332:	2300      	movs	r3, #0
 8016334:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016336:	683b      	ldr	r3, [r7, #0]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d101      	bne.n	8016340 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801633c:	2303      	movs	r3, #3
 801633e:	e025      	b.n	801638c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	683a      	ldr	r2, [r7, #0]
 8016344:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	32ae      	adds	r2, #174	; 0xae
 8016352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016358:	2b00      	cmp	r3, #0
 801635a:	d00f      	beq.n	801637c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	32ae      	adds	r2, #174	; 0xae
 8016366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801636c:	f107 020e 	add.w	r2, r7, #14
 8016370:	4610      	mov	r0, r2
 8016372:	4798      	blx	r3
 8016374:	4602      	mov	r2, r0
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8016382:	1c5a      	adds	r2, r3, #1
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801638a:	2300      	movs	r3, #0
}
 801638c:	4618      	mov	r0, r3
 801638e:	3710      	adds	r7, #16
 8016390:	46bd      	mov	sp, r7
 8016392:	bd80      	pop	{r7, pc}

08016394 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b082      	sub	sp, #8
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801639c:	6878      	ldr	r0, [r7, #4]
 801639e:	f004 fe01 	bl	801afa4 <USBD_LL_Start>
 80163a2:	4603      	mov	r3, r0
}
 80163a4:	4618      	mov	r0, r3
 80163a6:	3708      	adds	r7, #8
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd80      	pop	{r7, pc}

080163ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80163ac:	b480      	push	{r7}
 80163ae:	b083      	sub	sp, #12
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80163b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80163b6:	4618      	mov	r0, r3
 80163b8:	370c      	adds	r7, #12
 80163ba:	46bd      	mov	sp, r7
 80163bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c0:	4770      	bx	lr

080163c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80163c2:	b580      	push	{r7, lr}
 80163c4:	b084      	sub	sp, #16
 80163c6:	af00      	add	r7, sp, #0
 80163c8:	6078      	str	r0, [r7, #4]
 80163ca:	460b      	mov	r3, r1
 80163cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80163ce:	2300      	movs	r3, #0
 80163d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d009      	beq.n	80163f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	78fa      	ldrb	r2, [r7, #3]
 80163e6:	4611      	mov	r1, r2
 80163e8:	6878      	ldr	r0, [r7, #4]
 80163ea:	4798      	blx	r3
 80163ec:	4603      	mov	r3, r0
 80163ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80163f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80163f2:	4618      	mov	r0, r3
 80163f4:	3710      	adds	r7, #16
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bd80      	pop	{r7, pc}

080163fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80163fa:	b580      	push	{r7, lr}
 80163fc:	b084      	sub	sp, #16
 80163fe:	af00      	add	r7, sp, #0
 8016400:	6078      	str	r0, [r7, #4]
 8016402:	460b      	mov	r3, r1
 8016404:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016406:	2300      	movs	r3, #0
 8016408:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016410:	685b      	ldr	r3, [r3, #4]
 8016412:	78fa      	ldrb	r2, [r7, #3]
 8016414:	4611      	mov	r1, r2
 8016416:	6878      	ldr	r0, [r7, #4]
 8016418:	4798      	blx	r3
 801641a:	4603      	mov	r3, r0
 801641c:	2b00      	cmp	r3, #0
 801641e:	d001      	beq.n	8016424 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8016420:	2303      	movs	r3, #3
 8016422:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016424:	7bfb      	ldrb	r3, [r7, #15]
}
 8016426:	4618      	mov	r0, r3
 8016428:	3710      	adds	r7, #16
 801642a:	46bd      	mov	sp, r7
 801642c:	bd80      	pop	{r7, pc}

0801642e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801642e:	b580      	push	{r7, lr}
 8016430:	b084      	sub	sp, #16
 8016432:	af00      	add	r7, sp, #0
 8016434:	6078      	str	r0, [r7, #4]
 8016436:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801643e:	6839      	ldr	r1, [r7, #0]
 8016440:	4618      	mov	r0, r3
 8016442:	f001 f90e 	bl	8017662 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	2201      	movs	r2, #1
 801644a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8016454:	461a      	mov	r2, r3
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016462:	f003 031f 	and.w	r3, r3, #31
 8016466:	2b02      	cmp	r3, #2
 8016468:	d01a      	beq.n	80164a0 <USBD_LL_SetupStage+0x72>
 801646a:	2b02      	cmp	r3, #2
 801646c:	d822      	bhi.n	80164b4 <USBD_LL_SetupStage+0x86>
 801646e:	2b00      	cmp	r3, #0
 8016470:	d002      	beq.n	8016478 <USBD_LL_SetupStage+0x4a>
 8016472:	2b01      	cmp	r3, #1
 8016474:	d00a      	beq.n	801648c <USBD_LL_SetupStage+0x5e>
 8016476:	e01d      	b.n	80164b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801647e:	4619      	mov	r1, r3
 8016480:	6878      	ldr	r0, [r7, #4]
 8016482:	f000 fb65 	bl	8016b50 <USBD_StdDevReq>
 8016486:	4603      	mov	r3, r0
 8016488:	73fb      	strb	r3, [r7, #15]
      break;
 801648a:	e020      	b.n	80164ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016492:	4619      	mov	r1, r3
 8016494:	6878      	ldr	r0, [r7, #4]
 8016496:	f000 fbcd 	bl	8016c34 <USBD_StdItfReq>
 801649a:	4603      	mov	r3, r0
 801649c:	73fb      	strb	r3, [r7, #15]
      break;
 801649e:	e016      	b.n	80164ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80164a6:	4619      	mov	r1, r3
 80164a8:	6878      	ldr	r0, [r7, #4]
 80164aa:	f000 fc2f 	bl	8016d0c <USBD_StdEPReq>
 80164ae:	4603      	mov	r3, r0
 80164b0:	73fb      	strb	r3, [r7, #15]
      break;
 80164b2:	e00c      	b.n	80164ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80164ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80164be:	b2db      	uxtb	r3, r3
 80164c0:	4619      	mov	r1, r3
 80164c2:	6878      	ldr	r0, [r7, #4]
 80164c4:	f004 fdce 	bl	801b064 <USBD_LL_StallEP>
 80164c8:	4603      	mov	r3, r0
 80164ca:	73fb      	strb	r3, [r7, #15]
      break;
 80164cc:	bf00      	nop
  }

  return ret;
 80164ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80164d0:	4618      	mov	r0, r3
 80164d2:	3710      	adds	r7, #16
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}

080164d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80164d8:	b580      	push	{r7, lr}
 80164da:	b086      	sub	sp, #24
 80164dc:	af00      	add	r7, sp, #0
 80164de:	60f8      	str	r0, [r7, #12]
 80164e0:	460b      	mov	r3, r1
 80164e2:	607a      	str	r2, [r7, #4]
 80164e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80164e6:	2300      	movs	r3, #0
 80164e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80164ea:	7afb      	ldrb	r3, [r7, #11]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d16e      	bne.n	80165ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80164f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80164fe:	2b03      	cmp	r3, #3
 8016500:	f040 8098 	bne.w	8016634 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016504:	693b      	ldr	r3, [r7, #16]
 8016506:	689a      	ldr	r2, [r3, #8]
 8016508:	693b      	ldr	r3, [r7, #16]
 801650a:	68db      	ldr	r3, [r3, #12]
 801650c:	429a      	cmp	r2, r3
 801650e:	d913      	bls.n	8016538 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016510:	693b      	ldr	r3, [r7, #16]
 8016512:	689a      	ldr	r2, [r3, #8]
 8016514:	693b      	ldr	r3, [r7, #16]
 8016516:	68db      	ldr	r3, [r3, #12]
 8016518:	1ad2      	subs	r2, r2, r3
 801651a:	693b      	ldr	r3, [r7, #16]
 801651c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801651e:	693b      	ldr	r3, [r7, #16]
 8016520:	68da      	ldr	r2, [r3, #12]
 8016522:	693b      	ldr	r3, [r7, #16]
 8016524:	689b      	ldr	r3, [r3, #8]
 8016526:	4293      	cmp	r3, r2
 8016528:	bf28      	it	cs
 801652a:	4613      	movcs	r3, r2
 801652c:	461a      	mov	r2, r3
 801652e:	6879      	ldr	r1, [r7, #4]
 8016530:	68f8      	ldr	r0, [r7, #12]
 8016532:	f001 f98a 	bl	801784a <USBD_CtlContinueRx>
 8016536:	e07d      	b.n	8016634 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801653e:	f003 031f 	and.w	r3, r3, #31
 8016542:	2b02      	cmp	r3, #2
 8016544:	d014      	beq.n	8016570 <USBD_LL_DataOutStage+0x98>
 8016546:	2b02      	cmp	r3, #2
 8016548:	d81d      	bhi.n	8016586 <USBD_LL_DataOutStage+0xae>
 801654a:	2b00      	cmp	r3, #0
 801654c:	d002      	beq.n	8016554 <USBD_LL_DataOutStage+0x7c>
 801654e:	2b01      	cmp	r3, #1
 8016550:	d003      	beq.n	801655a <USBD_LL_DataOutStage+0x82>
 8016552:	e018      	b.n	8016586 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016554:	2300      	movs	r3, #0
 8016556:	75bb      	strb	r3, [r7, #22]
            break;
 8016558:	e018      	b.n	801658c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016560:	b2db      	uxtb	r3, r3
 8016562:	4619      	mov	r1, r3
 8016564:	68f8      	ldr	r0, [r7, #12]
 8016566:	f000 fa64 	bl	8016a32 <USBD_CoreFindIF>
 801656a:	4603      	mov	r3, r0
 801656c:	75bb      	strb	r3, [r7, #22]
            break;
 801656e:	e00d      	b.n	801658c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016576:	b2db      	uxtb	r3, r3
 8016578:	4619      	mov	r1, r3
 801657a:	68f8      	ldr	r0, [r7, #12]
 801657c:	f000 fa66 	bl	8016a4c <USBD_CoreFindEP>
 8016580:	4603      	mov	r3, r0
 8016582:	75bb      	strb	r3, [r7, #22]
            break;
 8016584:	e002      	b.n	801658c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016586:	2300      	movs	r3, #0
 8016588:	75bb      	strb	r3, [r7, #22]
            break;
 801658a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801658c:	7dbb      	ldrb	r3, [r7, #22]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d119      	bne.n	80165c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016598:	b2db      	uxtb	r3, r3
 801659a:	2b03      	cmp	r3, #3
 801659c:	d113      	bne.n	80165c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801659e:	7dba      	ldrb	r2, [r7, #22]
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	32ae      	adds	r2, #174	; 0xae
 80165a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165a8:	691b      	ldr	r3, [r3, #16]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d00b      	beq.n	80165c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80165ae:	7dba      	ldrb	r2, [r7, #22]
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80165b6:	7dba      	ldrb	r2, [r7, #22]
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	32ae      	adds	r2, #174	; 0xae
 80165bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165c0:	691b      	ldr	r3, [r3, #16]
 80165c2:	68f8      	ldr	r0, [r7, #12]
 80165c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80165c6:	68f8      	ldr	r0, [r7, #12]
 80165c8:	f001 f950 	bl	801786c <USBD_CtlSendStatus>
 80165cc:	e032      	b.n	8016634 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80165ce:	7afb      	ldrb	r3, [r7, #11]
 80165d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80165d4:	b2db      	uxtb	r3, r3
 80165d6:	4619      	mov	r1, r3
 80165d8:	68f8      	ldr	r0, [r7, #12]
 80165da:	f000 fa37 	bl	8016a4c <USBD_CoreFindEP>
 80165de:	4603      	mov	r3, r0
 80165e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80165e2:	7dbb      	ldrb	r3, [r7, #22]
 80165e4:	2bff      	cmp	r3, #255	; 0xff
 80165e6:	d025      	beq.n	8016634 <USBD_LL_DataOutStage+0x15c>
 80165e8:	7dbb      	ldrb	r3, [r7, #22]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d122      	bne.n	8016634 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165f4:	b2db      	uxtb	r3, r3
 80165f6:	2b03      	cmp	r3, #3
 80165f8:	d117      	bne.n	801662a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80165fa:	7dba      	ldrb	r2, [r7, #22]
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	32ae      	adds	r2, #174	; 0xae
 8016600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016604:	699b      	ldr	r3, [r3, #24]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d00f      	beq.n	801662a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801660a:	7dba      	ldrb	r2, [r7, #22]
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016612:	7dba      	ldrb	r2, [r7, #22]
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	32ae      	adds	r2, #174	; 0xae
 8016618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801661c:	699b      	ldr	r3, [r3, #24]
 801661e:	7afa      	ldrb	r2, [r7, #11]
 8016620:	4611      	mov	r1, r2
 8016622:	68f8      	ldr	r0, [r7, #12]
 8016624:	4798      	blx	r3
 8016626:	4603      	mov	r3, r0
 8016628:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801662a:	7dfb      	ldrb	r3, [r7, #23]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d001      	beq.n	8016634 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016630:	7dfb      	ldrb	r3, [r7, #23]
 8016632:	e000      	b.n	8016636 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016634:	2300      	movs	r3, #0
}
 8016636:	4618      	mov	r0, r3
 8016638:	3718      	adds	r7, #24
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}

0801663e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801663e:	b580      	push	{r7, lr}
 8016640:	b086      	sub	sp, #24
 8016642:	af00      	add	r7, sp, #0
 8016644:	60f8      	str	r0, [r7, #12]
 8016646:	460b      	mov	r3, r1
 8016648:	607a      	str	r2, [r7, #4]
 801664a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801664c:	7afb      	ldrb	r3, [r7, #11]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d16f      	bne.n	8016732 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	3314      	adds	r3, #20
 8016656:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801665e:	2b02      	cmp	r3, #2
 8016660:	d15a      	bne.n	8016718 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016662:	693b      	ldr	r3, [r7, #16]
 8016664:	689a      	ldr	r2, [r3, #8]
 8016666:	693b      	ldr	r3, [r7, #16]
 8016668:	68db      	ldr	r3, [r3, #12]
 801666a:	429a      	cmp	r2, r3
 801666c:	d914      	bls.n	8016698 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801666e:	693b      	ldr	r3, [r7, #16]
 8016670:	689a      	ldr	r2, [r3, #8]
 8016672:	693b      	ldr	r3, [r7, #16]
 8016674:	68db      	ldr	r3, [r3, #12]
 8016676:	1ad2      	subs	r2, r2, r3
 8016678:	693b      	ldr	r3, [r7, #16]
 801667a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801667c:	693b      	ldr	r3, [r7, #16]
 801667e:	689b      	ldr	r3, [r3, #8]
 8016680:	461a      	mov	r2, r3
 8016682:	6879      	ldr	r1, [r7, #4]
 8016684:	68f8      	ldr	r0, [r7, #12]
 8016686:	f001 f8b2 	bl	80177ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801668a:	2300      	movs	r3, #0
 801668c:	2200      	movs	r2, #0
 801668e:	2100      	movs	r1, #0
 8016690:	68f8      	ldr	r0, [r7, #12]
 8016692:	f004 fd91 	bl	801b1b8 <USBD_LL_PrepareReceive>
 8016696:	e03f      	b.n	8016718 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016698:	693b      	ldr	r3, [r7, #16]
 801669a:	68da      	ldr	r2, [r3, #12]
 801669c:	693b      	ldr	r3, [r7, #16]
 801669e:	689b      	ldr	r3, [r3, #8]
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d11c      	bne.n	80166de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80166a4:	693b      	ldr	r3, [r7, #16]
 80166a6:	685a      	ldr	r2, [r3, #4]
 80166a8:	693b      	ldr	r3, [r7, #16]
 80166aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80166ac:	429a      	cmp	r2, r3
 80166ae:	d316      	bcc.n	80166de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80166b0:	693b      	ldr	r3, [r7, #16]
 80166b2:	685a      	ldr	r2, [r3, #4]
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d20f      	bcs.n	80166de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80166be:	2200      	movs	r2, #0
 80166c0:	2100      	movs	r1, #0
 80166c2:	68f8      	ldr	r0, [r7, #12]
 80166c4:	f001 f893 	bl	80177ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	2200      	movs	r2, #0
 80166cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80166d0:	2300      	movs	r3, #0
 80166d2:	2200      	movs	r2, #0
 80166d4:	2100      	movs	r1, #0
 80166d6:	68f8      	ldr	r0, [r7, #12]
 80166d8:	f004 fd6e 	bl	801b1b8 <USBD_LL_PrepareReceive>
 80166dc:	e01c      	b.n	8016718 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80166e4:	b2db      	uxtb	r3, r3
 80166e6:	2b03      	cmp	r3, #3
 80166e8:	d10f      	bne.n	801670a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166f0:	68db      	ldr	r3, [r3, #12]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d009      	beq.n	801670a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	2200      	movs	r2, #0
 80166fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016704:	68db      	ldr	r3, [r3, #12]
 8016706:	68f8      	ldr	r0, [r7, #12]
 8016708:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801670a:	2180      	movs	r1, #128	; 0x80
 801670c:	68f8      	ldr	r0, [r7, #12]
 801670e:	f004 fca9 	bl	801b064 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016712:	68f8      	ldr	r0, [r7, #12]
 8016714:	f001 f8bd 	bl	8017892 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801671e:	2b00      	cmp	r3, #0
 8016720:	d03a      	beq.n	8016798 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016722:	68f8      	ldr	r0, [r7, #12]
 8016724:	f7ff fe42 	bl	80163ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	2200      	movs	r2, #0
 801672c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016730:	e032      	b.n	8016798 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016732:	7afb      	ldrb	r3, [r7, #11]
 8016734:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016738:	b2db      	uxtb	r3, r3
 801673a:	4619      	mov	r1, r3
 801673c:	68f8      	ldr	r0, [r7, #12]
 801673e:	f000 f985 	bl	8016a4c <USBD_CoreFindEP>
 8016742:	4603      	mov	r3, r0
 8016744:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016746:	7dfb      	ldrb	r3, [r7, #23]
 8016748:	2bff      	cmp	r3, #255	; 0xff
 801674a:	d025      	beq.n	8016798 <USBD_LL_DataInStage+0x15a>
 801674c:	7dfb      	ldrb	r3, [r7, #23]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d122      	bne.n	8016798 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016758:	b2db      	uxtb	r3, r3
 801675a:	2b03      	cmp	r3, #3
 801675c:	d11c      	bne.n	8016798 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801675e:	7dfa      	ldrb	r2, [r7, #23]
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	32ae      	adds	r2, #174	; 0xae
 8016764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016768:	695b      	ldr	r3, [r3, #20]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d014      	beq.n	8016798 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801676e:	7dfa      	ldrb	r2, [r7, #23]
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016776:	7dfa      	ldrb	r2, [r7, #23]
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	32ae      	adds	r2, #174	; 0xae
 801677c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016780:	695b      	ldr	r3, [r3, #20]
 8016782:	7afa      	ldrb	r2, [r7, #11]
 8016784:	4611      	mov	r1, r2
 8016786:	68f8      	ldr	r0, [r7, #12]
 8016788:	4798      	blx	r3
 801678a:	4603      	mov	r3, r0
 801678c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801678e:	7dbb      	ldrb	r3, [r7, #22]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d001      	beq.n	8016798 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016794:	7dbb      	ldrb	r3, [r7, #22]
 8016796:	e000      	b.n	801679a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016798:	2300      	movs	r3, #0
}
 801679a:	4618      	mov	r0, r3
 801679c:	3718      	adds	r7, #24
 801679e:	46bd      	mov	sp, r7
 80167a0:	bd80      	pop	{r7, pc}

080167a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80167a2:	b580      	push	{r7, lr}
 80167a4:	b084      	sub	sp, #16
 80167a6:	af00      	add	r7, sp, #0
 80167a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80167aa:	2300      	movs	r3, #0
 80167ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	2201      	movs	r2, #1
 80167b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	2200      	movs	r2, #0
 80167ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	2200      	movs	r2, #0
 80167c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	2200      	movs	r2, #0
 80167c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	2200      	movs	r2, #0
 80167d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d014      	beq.n	8016808 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80167e4:	685b      	ldr	r3, [r3, #4]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d00e      	beq.n	8016808 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80167f0:	685b      	ldr	r3, [r3, #4]
 80167f2:	687a      	ldr	r2, [r7, #4]
 80167f4:	6852      	ldr	r2, [r2, #4]
 80167f6:	b2d2      	uxtb	r2, r2
 80167f8:	4611      	mov	r1, r2
 80167fa:	6878      	ldr	r0, [r7, #4]
 80167fc:	4798      	blx	r3
 80167fe:	4603      	mov	r3, r0
 8016800:	2b00      	cmp	r3, #0
 8016802:	d001      	beq.n	8016808 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016804:	2303      	movs	r3, #3
 8016806:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016808:	2340      	movs	r3, #64	; 0x40
 801680a:	2200      	movs	r2, #0
 801680c:	2100      	movs	r1, #0
 801680e:	6878      	ldr	r0, [r7, #4]
 8016810:	f004 fbe3 	bl	801afda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2201      	movs	r2, #1
 8016818:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	2240      	movs	r2, #64	; 0x40
 8016820:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016824:	2340      	movs	r3, #64	; 0x40
 8016826:	2200      	movs	r2, #0
 8016828:	2180      	movs	r1, #128	; 0x80
 801682a:	6878      	ldr	r0, [r7, #4]
 801682c:	f004 fbd5 	bl	801afda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	2201      	movs	r2, #1
 8016834:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	2240      	movs	r2, #64	; 0x40
 801683a:	621a      	str	r2, [r3, #32]

  return ret;
 801683c:	7bfb      	ldrb	r3, [r7, #15]
}
 801683e:	4618      	mov	r0, r3
 8016840:	3710      	adds	r7, #16
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}

08016846 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016846:	b480      	push	{r7}
 8016848:	b083      	sub	sp, #12
 801684a:	af00      	add	r7, sp, #0
 801684c:	6078      	str	r0, [r7, #4]
 801684e:	460b      	mov	r3, r1
 8016850:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	78fa      	ldrb	r2, [r7, #3]
 8016856:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016858:	2300      	movs	r3, #0
}
 801685a:	4618      	mov	r0, r3
 801685c:	370c      	adds	r7, #12
 801685e:	46bd      	mov	sp, r7
 8016860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016864:	4770      	bx	lr

08016866 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016866:	b480      	push	{r7}
 8016868:	b083      	sub	sp, #12
 801686a:	af00      	add	r7, sp, #0
 801686c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016874:	b2db      	uxtb	r3, r3
 8016876:	2b04      	cmp	r3, #4
 8016878:	d006      	beq.n	8016888 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016880:	b2da      	uxtb	r2, r3
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	2204      	movs	r2, #4
 801688c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016890:	2300      	movs	r3, #0
}
 8016892:	4618      	mov	r0, r3
 8016894:	370c      	adds	r7, #12
 8016896:	46bd      	mov	sp, r7
 8016898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689c:	4770      	bx	lr

0801689e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801689e:	b480      	push	{r7}
 80168a0:	b083      	sub	sp, #12
 80168a2:	af00      	add	r7, sp, #0
 80168a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80168ac:	b2db      	uxtb	r3, r3
 80168ae:	2b04      	cmp	r3, #4
 80168b0:	d106      	bne.n	80168c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80168b8:	b2da      	uxtb	r2, r3
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80168c0:	2300      	movs	r3, #0
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	370c      	adds	r7, #12
 80168c6:	46bd      	mov	sp, r7
 80168c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168cc:	4770      	bx	lr

080168ce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80168ce:	b580      	push	{r7, lr}
 80168d0:	b082      	sub	sp, #8
 80168d2:	af00      	add	r7, sp, #0
 80168d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80168dc:	b2db      	uxtb	r3, r3
 80168de:	2b03      	cmp	r3, #3
 80168e0:	d110      	bne.n	8016904 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d00b      	beq.n	8016904 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80168f2:	69db      	ldr	r3, [r3, #28]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d005      	beq.n	8016904 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80168fe:	69db      	ldr	r3, [r3, #28]
 8016900:	6878      	ldr	r0, [r7, #4]
 8016902:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016904:	2300      	movs	r3, #0
}
 8016906:	4618      	mov	r0, r3
 8016908:	3708      	adds	r7, #8
 801690a:	46bd      	mov	sp, r7
 801690c:	bd80      	pop	{r7, pc}

0801690e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801690e:	b580      	push	{r7, lr}
 8016910:	b082      	sub	sp, #8
 8016912:	af00      	add	r7, sp, #0
 8016914:	6078      	str	r0, [r7, #4]
 8016916:	460b      	mov	r3, r1
 8016918:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	32ae      	adds	r2, #174	; 0xae
 8016924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d101      	bne.n	8016930 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801692c:	2303      	movs	r3, #3
 801692e:	e01c      	b.n	801696a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016936:	b2db      	uxtb	r3, r3
 8016938:	2b03      	cmp	r3, #3
 801693a:	d115      	bne.n	8016968 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	32ae      	adds	r2, #174	; 0xae
 8016946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801694a:	6a1b      	ldr	r3, [r3, #32]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d00b      	beq.n	8016968 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	32ae      	adds	r2, #174	; 0xae
 801695a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801695e:	6a1b      	ldr	r3, [r3, #32]
 8016960:	78fa      	ldrb	r2, [r7, #3]
 8016962:	4611      	mov	r1, r2
 8016964:	6878      	ldr	r0, [r7, #4]
 8016966:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016968:	2300      	movs	r3, #0
}
 801696a:	4618      	mov	r0, r3
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}

08016972 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016972:	b580      	push	{r7, lr}
 8016974:	b082      	sub	sp, #8
 8016976:	af00      	add	r7, sp, #0
 8016978:	6078      	str	r0, [r7, #4]
 801697a:	460b      	mov	r3, r1
 801697c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	32ae      	adds	r2, #174	; 0xae
 8016988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d101      	bne.n	8016994 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016990:	2303      	movs	r3, #3
 8016992:	e01c      	b.n	80169ce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801699a:	b2db      	uxtb	r3, r3
 801699c:	2b03      	cmp	r3, #3
 801699e:	d115      	bne.n	80169cc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	32ae      	adds	r2, #174	; 0xae
 80169aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d00b      	beq.n	80169cc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	32ae      	adds	r2, #174	; 0xae
 80169be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169c4:	78fa      	ldrb	r2, [r7, #3]
 80169c6:	4611      	mov	r1, r2
 80169c8:	6878      	ldr	r0, [r7, #4]
 80169ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80169cc:	2300      	movs	r3, #0
}
 80169ce:	4618      	mov	r0, r3
 80169d0:	3708      	adds	r7, #8
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}

080169d6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80169d6:	b480      	push	{r7}
 80169d8:	b083      	sub	sp, #12
 80169da:	af00      	add	r7, sp, #0
 80169dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80169de:	2300      	movs	r3, #0
}
 80169e0:	4618      	mov	r0, r3
 80169e2:	370c      	adds	r7, #12
 80169e4:	46bd      	mov	sp, r7
 80169e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ea:	4770      	bx	lr

080169ec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b084      	sub	sp, #16
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80169f4:	2300      	movs	r3, #0
 80169f6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	2201      	movs	r2, #1
 80169fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d00e      	beq.n	8016a28 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a10:	685b      	ldr	r3, [r3, #4]
 8016a12:	687a      	ldr	r2, [r7, #4]
 8016a14:	6852      	ldr	r2, [r2, #4]
 8016a16:	b2d2      	uxtb	r2, r2
 8016a18:	4611      	mov	r1, r2
 8016a1a:	6878      	ldr	r0, [r7, #4]
 8016a1c:	4798      	blx	r3
 8016a1e:	4603      	mov	r3, r0
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d001      	beq.n	8016a28 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016a24:	2303      	movs	r3, #3
 8016a26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	3710      	adds	r7, #16
 8016a2e:	46bd      	mov	sp, r7
 8016a30:	bd80      	pop	{r7, pc}

08016a32 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016a32:	b480      	push	{r7}
 8016a34:	b083      	sub	sp, #12
 8016a36:	af00      	add	r7, sp, #0
 8016a38:	6078      	str	r0, [r7, #4]
 8016a3a:	460b      	mov	r3, r1
 8016a3c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016a3e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016a40:	4618      	mov	r0, r3
 8016a42:	370c      	adds	r7, #12
 8016a44:	46bd      	mov	sp, r7
 8016a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a4a:	4770      	bx	lr

08016a4c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016a4c:	b480      	push	{r7}
 8016a4e:	b083      	sub	sp, #12
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	6078      	str	r0, [r7, #4]
 8016a54:	460b      	mov	r3, r1
 8016a56:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016a58:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	370c      	adds	r7, #12
 8016a5e:	46bd      	mov	sp, r7
 8016a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a64:	4770      	bx	lr

08016a66 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016a66:	b580      	push	{r7, lr}
 8016a68:	b086      	sub	sp, #24
 8016a6a:	af00      	add	r7, sp, #0
 8016a6c:	6078      	str	r0, [r7, #4]
 8016a6e:	460b      	mov	r3, r1
 8016a70:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	885b      	ldrh	r3, [r3, #2]
 8016a82:	b29a      	uxth	r2, r3
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	781b      	ldrb	r3, [r3, #0]
 8016a88:	b29b      	uxth	r3, r3
 8016a8a:	429a      	cmp	r2, r3
 8016a8c:	d920      	bls.n	8016ad0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	781b      	ldrb	r3, [r3, #0]
 8016a92:	b29b      	uxth	r3, r3
 8016a94:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016a96:	e013      	b.n	8016ac0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016a98:	f107 030a 	add.w	r3, r7, #10
 8016a9c:	4619      	mov	r1, r3
 8016a9e:	6978      	ldr	r0, [r7, #20]
 8016aa0:	f000 f81b 	bl	8016ada <USBD_GetNextDesc>
 8016aa4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016aa6:	697b      	ldr	r3, [r7, #20]
 8016aa8:	785b      	ldrb	r3, [r3, #1]
 8016aaa:	2b05      	cmp	r3, #5
 8016aac:	d108      	bne.n	8016ac0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016aae:	697b      	ldr	r3, [r7, #20]
 8016ab0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016ab2:	693b      	ldr	r3, [r7, #16]
 8016ab4:	789b      	ldrb	r3, [r3, #2]
 8016ab6:	78fa      	ldrb	r2, [r7, #3]
 8016ab8:	429a      	cmp	r2, r3
 8016aba:	d008      	beq.n	8016ace <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016abc:	2300      	movs	r3, #0
 8016abe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	885b      	ldrh	r3, [r3, #2]
 8016ac4:	b29a      	uxth	r2, r3
 8016ac6:	897b      	ldrh	r3, [r7, #10]
 8016ac8:	429a      	cmp	r2, r3
 8016aca:	d8e5      	bhi.n	8016a98 <USBD_GetEpDesc+0x32>
 8016acc:	e000      	b.n	8016ad0 <USBD_GetEpDesc+0x6a>
          break;
 8016ace:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016ad0:	693b      	ldr	r3, [r7, #16]
}
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	3718      	adds	r7, #24
 8016ad6:	46bd      	mov	sp, r7
 8016ad8:	bd80      	pop	{r7, pc}

08016ada <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016ada:	b480      	push	{r7}
 8016adc:	b085      	sub	sp, #20
 8016ade:	af00      	add	r7, sp, #0
 8016ae0:	6078      	str	r0, [r7, #4]
 8016ae2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016ae8:	683b      	ldr	r3, [r7, #0]
 8016aea:	881a      	ldrh	r2, [r3, #0]
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	781b      	ldrb	r3, [r3, #0]
 8016af0:	b29b      	uxth	r3, r3
 8016af2:	4413      	add	r3, r2
 8016af4:	b29a      	uxth	r2, r3
 8016af6:	683b      	ldr	r3, [r7, #0]
 8016af8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	781b      	ldrb	r3, [r3, #0]
 8016afe:	461a      	mov	r2, r3
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	4413      	add	r3, r2
 8016b04:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016b06:	68fb      	ldr	r3, [r7, #12]
}
 8016b08:	4618      	mov	r0, r3
 8016b0a:	3714      	adds	r7, #20
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b12:	4770      	bx	lr

08016b14 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016b14:	b480      	push	{r7}
 8016b16:	b087      	sub	sp, #28
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016b20:	697b      	ldr	r3, [r7, #20]
 8016b22:	781b      	ldrb	r3, [r3, #0]
 8016b24:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016b26:	697b      	ldr	r3, [r7, #20]
 8016b28:	3301      	adds	r3, #1
 8016b2a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016b2c:	697b      	ldr	r3, [r7, #20]
 8016b2e:	781b      	ldrb	r3, [r3, #0]
 8016b30:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016b32:	8a3b      	ldrh	r3, [r7, #16]
 8016b34:	021b      	lsls	r3, r3, #8
 8016b36:	b21a      	sxth	r2, r3
 8016b38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016b3c:	4313      	orrs	r3, r2
 8016b3e:	b21b      	sxth	r3, r3
 8016b40:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016b42:	89fb      	ldrh	r3, [r7, #14]
}
 8016b44:	4618      	mov	r0, r3
 8016b46:	371c      	adds	r7, #28
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4e:	4770      	bx	lr

08016b50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b084      	sub	sp, #16
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
 8016b58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016b5e:	683b      	ldr	r3, [r7, #0]
 8016b60:	781b      	ldrb	r3, [r3, #0]
 8016b62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016b66:	2b40      	cmp	r3, #64	; 0x40
 8016b68:	d005      	beq.n	8016b76 <USBD_StdDevReq+0x26>
 8016b6a:	2b40      	cmp	r3, #64	; 0x40
 8016b6c:	d857      	bhi.n	8016c1e <USBD_StdDevReq+0xce>
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d00f      	beq.n	8016b92 <USBD_StdDevReq+0x42>
 8016b72:	2b20      	cmp	r3, #32
 8016b74:	d153      	bne.n	8016c1e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	32ae      	adds	r2, #174	; 0xae
 8016b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b84:	689b      	ldr	r3, [r3, #8]
 8016b86:	6839      	ldr	r1, [r7, #0]
 8016b88:	6878      	ldr	r0, [r7, #4]
 8016b8a:	4798      	blx	r3
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8016b90:	e04a      	b.n	8016c28 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016b92:	683b      	ldr	r3, [r7, #0]
 8016b94:	785b      	ldrb	r3, [r3, #1]
 8016b96:	2b09      	cmp	r3, #9
 8016b98:	d83b      	bhi.n	8016c12 <USBD_StdDevReq+0xc2>
 8016b9a:	a201      	add	r2, pc, #4	; (adr r2, 8016ba0 <USBD_StdDevReq+0x50>)
 8016b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ba0:	08016bf5 	.word	0x08016bf5
 8016ba4:	08016c09 	.word	0x08016c09
 8016ba8:	08016c13 	.word	0x08016c13
 8016bac:	08016bff 	.word	0x08016bff
 8016bb0:	08016c13 	.word	0x08016c13
 8016bb4:	08016bd3 	.word	0x08016bd3
 8016bb8:	08016bc9 	.word	0x08016bc9
 8016bbc:	08016c13 	.word	0x08016c13
 8016bc0:	08016beb 	.word	0x08016beb
 8016bc4:	08016bdd 	.word	0x08016bdd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016bc8:	6839      	ldr	r1, [r7, #0]
 8016bca:	6878      	ldr	r0, [r7, #4]
 8016bcc:	f000 fa3c 	bl	8017048 <USBD_GetDescriptor>
          break;
 8016bd0:	e024      	b.n	8016c1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016bd2:	6839      	ldr	r1, [r7, #0]
 8016bd4:	6878      	ldr	r0, [r7, #4]
 8016bd6:	f000 fba1 	bl	801731c <USBD_SetAddress>
          break;
 8016bda:	e01f      	b.n	8016c1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016bdc:	6839      	ldr	r1, [r7, #0]
 8016bde:	6878      	ldr	r0, [r7, #4]
 8016be0:	f000 fbe0 	bl	80173a4 <USBD_SetConfig>
 8016be4:	4603      	mov	r3, r0
 8016be6:	73fb      	strb	r3, [r7, #15]
          break;
 8016be8:	e018      	b.n	8016c1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016bea:	6839      	ldr	r1, [r7, #0]
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f000 fc83 	bl	80174f8 <USBD_GetConfig>
          break;
 8016bf2:	e013      	b.n	8016c1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016bf4:	6839      	ldr	r1, [r7, #0]
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f000 fcb4 	bl	8017564 <USBD_GetStatus>
          break;
 8016bfc:	e00e      	b.n	8016c1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016bfe:	6839      	ldr	r1, [r7, #0]
 8016c00:	6878      	ldr	r0, [r7, #4]
 8016c02:	f000 fce3 	bl	80175cc <USBD_SetFeature>
          break;
 8016c06:	e009      	b.n	8016c1c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016c08:	6839      	ldr	r1, [r7, #0]
 8016c0a:	6878      	ldr	r0, [r7, #4]
 8016c0c:	f000 fd07 	bl	801761e <USBD_ClrFeature>
          break;
 8016c10:	e004      	b.n	8016c1c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016c12:	6839      	ldr	r1, [r7, #0]
 8016c14:	6878      	ldr	r0, [r7, #4]
 8016c16:	f000 fd5e 	bl	80176d6 <USBD_CtlError>
          break;
 8016c1a:	bf00      	nop
      }
      break;
 8016c1c:	e004      	b.n	8016c28 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016c1e:	6839      	ldr	r1, [r7, #0]
 8016c20:	6878      	ldr	r0, [r7, #4]
 8016c22:	f000 fd58 	bl	80176d6 <USBD_CtlError>
      break;
 8016c26:	bf00      	nop
  }

  return ret;
 8016c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	3710      	adds	r7, #16
 8016c2e:	46bd      	mov	sp, r7
 8016c30:	bd80      	pop	{r7, pc}
 8016c32:	bf00      	nop

08016c34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b084      	sub	sp, #16
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
 8016c3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016c3e:	2300      	movs	r3, #0
 8016c40:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016c42:	683b      	ldr	r3, [r7, #0]
 8016c44:	781b      	ldrb	r3, [r3, #0]
 8016c46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016c4a:	2b40      	cmp	r3, #64	; 0x40
 8016c4c:	d005      	beq.n	8016c5a <USBD_StdItfReq+0x26>
 8016c4e:	2b40      	cmp	r3, #64	; 0x40
 8016c50:	d852      	bhi.n	8016cf8 <USBD_StdItfReq+0xc4>
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d001      	beq.n	8016c5a <USBD_StdItfReq+0x26>
 8016c56:	2b20      	cmp	r3, #32
 8016c58:	d14e      	bne.n	8016cf8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c60:	b2db      	uxtb	r3, r3
 8016c62:	3b01      	subs	r3, #1
 8016c64:	2b02      	cmp	r3, #2
 8016c66:	d840      	bhi.n	8016cea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016c68:	683b      	ldr	r3, [r7, #0]
 8016c6a:	889b      	ldrh	r3, [r3, #4]
 8016c6c:	b2db      	uxtb	r3, r3
 8016c6e:	2b01      	cmp	r3, #1
 8016c70:	d836      	bhi.n	8016ce0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016c72:	683b      	ldr	r3, [r7, #0]
 8016c74:	889b      	ldrh	r3, [r3, #4]
 8016c76:	b2db      	uxtb	r3, r3
 8016c78:	4619      	mov	r1, r3
 8016c7a:	6878      	ldr	r0, [r7, #4]
 8016c7c:	f7ff fed9 	bl	8016a32 <USBD_CoreFindIF>
 8016c80:	4603      	mov	r3, r0
 8016c82:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016c84:	7bbb      	ldrb	r3, [r7, #14]
 8016c86:	2bff      	cmp	r3, #255	; 0xff
 8016c88:	d01d      	beq.n	8016cc6 <USBD_StdItfReq+0x92>
 8016c8a:	7bbb      	ldrb	r3, [r7, #14]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d11a      	bne.n	8016cc6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016c90:	7bba      	ldrb	r2, [r7, #14]
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	32ae      	adds	r2, #174	; 0xae
 8016c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c9a:	689b      	ldr	r3, [r3, #8]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d00f      	beq.n	8016cc0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016ca0:	7bba      	ldrb	r2, [r7, #14]
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016ca8:	7bba      	ldrb	r2, [r7, #14]
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	32ae      	adds	r2, #174	; 0xae
 8016cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016cb2:	689b      	ldr	r3, [r3, #8]
 8016cb4:	6839      	ldr	r1, [r7, #0]
 8016cb6:	6878      	ldr	r0, [r7, #4]
 8016cb8:	4798      	blx	r3
 8016cba:	4603      	mov	r3, r0
 8016cbc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016cbe:	e004      	b.n	8016cca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016cc0:	2303      	movs	r3, #3
 8016cc2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016cc4:	e001      	b.n	8016cca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016cc6:	2303      	movs	r3, #3
 8016cc8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016cca:	683b      	ldr	r3, [r7, #0]
 8016ccc:	88db      	ldrh	r3, [r3, #6]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d110      	bne.n	8016cf4 <USBD_StdItfReq+0xc0>
 8016cd2:	7bfb      	ldrb	r3, [r7, #15]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d10d      	bne.n	8016cf4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016cd8:	6878      	ldr	r0, [r7, #4]
 8016cda:	f000 fdc7 	bl	801786c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016cde:	e009      	b.n	8016cf4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016ce0:	6839      	ldr	r1, [r7, #0]
 8016ce2:	6878      	ldr	r0, [r7, #4]
 8016ce4:	f000 fcf7 	bl	80176d6 <USBD_CtlError>
          break;
 8016ce8:	e004      	b.n	8016cf4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016cea:	6839      	ldr	r1, [r7, #0]
 8016cec:	6878      	ldr	r0, [r7, #4]
 8016cee:	f000 fcf2 	bl	80176d6 <USBD_CtlError>
          break;
 8016cf2:	e000      	b.n	8016cf6 <USBD_StdItfReq+0xc2>
          break;
 8016cf4:	bf00      	nop
      }
      break;
 8016cf6:	e004      	b.n	8016d02 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016cf8:	6839      	ldr	r1, [r7, #0]
 8016cfa:	6878      	ldr	r0, [r7, #4]
 8016cfc:	f000 fceb 	bl	80176d6 <USBD_CtlError>
      break;
 8016d00:	bf00      	nop
  }

  return ret;
 8016d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d04:	4618      	mov	r0, r3
 8016d06:	3710      	adds	r7, #16
 8016d08:	46bd      	mov	sp, r7
 8016d0a:	bd80      	pop	{r7, pc}

08016d0c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b084      	sub	sp, #16
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
 8016d14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016d16:	2300      	movs	r3, #0
 8016d18:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016d1a:	683b      	ldr	r3, [r7, #0]
 8016d1c:	889b      	ldrh	r3, [r3, #4]
 8016d1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016d20:	683b      	ldr	r3, [r7, #0]
 8016d22:	781b      	ldrb	r3, [r3, #0]
 8016d24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016d28:	2b40      	cmp	r3, #64	; 0x40
 8016d2a:	d007      	beq.n	8016d3c <USBD_StdEPReq+0x30>
 8016d2c:	2b40      	cmp	r3, #64	; 0x40
 8016d2e:	f200 817f 	bhi.w	8017030 <USBD_StdEPReq+0x324>
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d02a      	beq.n	8016d8c <USBD_StdEPReq+0x80>
 8016d36:	2b20      	cmp	r3, #32
 8016d38:	f040 817a 	bne.w	8017030 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016d3c:	7bbb      	ldrb	r3, [r7, #14]
 8016d3e:	4619      	mov	r1, r3
 8016d40:	6878      	ldr	r0, [r7, #4]
 8016d42:	f7ff fe83 	bl	8016a4c <USBD_CoreFindEP>
 8016d46:	4603      	mov	r3, r0
 8016d48:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016d4a:	7b7b      	ldrb	r3, [r7, #13]
 8016d4c:	2bff      	cmp	r3, #255	; 0xff
 8016d4e:	f000 8174 	beq.w	801703a <USBD_StdEPReq+0x32e>
 8016d52:	7b7b      	ldrb	r3, [r7, #13]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	f040 8170 	bne.w	801703a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016d5a:	7b7a      	ldrb	r2, [r7, #13]
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016d62:	7b7a      	ldrb	r2, [r7, #13]
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	32ae      	adds	r2, #174	; 0xae
 8016d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d6c:	689b      	ldr	r3, [r3, #8]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	f000 8163 	beq.w	801703a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016d74:	7b7a      	ldrb	r2, [r7, #13]
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	32ae      	adds	r2, #174	; 0xae
 8016d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d7e:	689b      	ldr	r3, [r3, #8]
 8016d80:	6839      	ldr	r1, [r7, #0]
 8016d82:	6878      	ldr	r0, [r7, #4]
 8016d84:	4798      	blx	r3
 8016d86:	4603      	mov	r3, r0
 8016d88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016d8a:	e156      	b.n	801703a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016d8c:	683b      	ldr	r3, [r7, #0]
 8016d8e:	785b      	ldrb	r3, [r3, #1]
 8016d90:	2b03      	cmp	r3, #3
 8016d92:	d008      	beq.n	8016da6 <USBD_StdEPReq+0x9a>
 8016d94:	2b03      	cmp	r3, #3
 8016d96:	f300 8145 	bgt.w	8017024 <USBD_StdEPReq+0x318>
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	f000 809b 	beq.w	8016ed6 <USBD_StdEPReq+0x1ca>
 8016da0:	2b01      	cmp	r3, #1
 8016da2:	d03c      	beq.n	8016e1e <USBD_StdEPReq+0x112>
 8016da4:	e13e      	b.n	8017024 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016dac:	b2db      	uxtb	r3, r3
 8016dae:	2b02      	cmp	r3, #2
 8016db0:	d002      	beq.n	8016db8 <USBD_StdEPReq+0xac>
 8016db2:	2b03      	cmp	r3, #3
 8016db4:	d016      	beq.n	8016de4 <USBD_StdEPReq+0xd8>
 8016db6:	e02c      	b.n	8016e12 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016db8:	7bbb      	ldrb	r3, [r7, #14]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d00d      	beq.n	8016dda <USBD_StdEPReq+0xce>
 8016dbe:	7bbb      	ldrb	r3, [r7, #14]
 8016dc0:	2b80      	cmp	r3, #128	; 0x80
 8016dc2:	d00a      	beq.n	8016dda <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016dc4:	7bbb      	ldrb	r3, [r7, #14]
 8016dc6:	4619      	mov	r1, r3
 8016dc8:	6878      	ldr	r0, [r7, #4]
 8016dca:	f004 f94b 	bl	801b064 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016dce:	2180      	movs	r1, #128	; 0x80
 8016dd0:	6878      	ldr	r0, [r7, #4]
 8016dd2:	f004 f947 	bl	801b064 <USBD_LL_StallEP>
 8016dd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016dd8:	e020      	b.n	8016e1c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016dda:	6839      	ldr	r1, [r7, #0]
 8016ddc:	6878      	ldr	r0, [r7, #4]
 8016dde:	f000 fc7a 	bl	80176d6 <USBD_CtlError>
              break;
 8016de2:	e01b      	b.n	8016e1c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016de4:	683b      	ldr	r3, [r7, #0]
 8016de6:	885b      	ldrh	r3, [r3, #2]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d10e      	bne.n	8016e0a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016dec:	7bbb      	ldrb	r3, [r7, #14]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d00b      	beq.n	8016e0a <USBD_StdEPReq+0xfe>
 8016df2:	7bbb      	ldrb	r3, [r7, #14]
 8016df4:	2b80      	cmp	r3, #128	; 0x80
 8016df6:	d008      	beq.n	8016e0a <USBD_StdEPReq+0xfe>
 8016df8:	683b      	ldr	r3, [r7, #0]
 8016dfa:	88db      	ldrh	r3, [r3, #6]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d104      	bne.n	8016e0a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016e00:	7bbb      	ldrb	r3, [r7, #14]
 8016e02:	4619      	mov	r1, r3
 8016e04:	6878      	ldr	r0, [r7, #4]
 8016e06:	f004 f92d 	bl	801b064 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016e0a:	6878      	ldr	r0, [r7, #4]
 8016e0c:	f000 fd2e 	bl	801786c <USBD_CtlSendStatus>

              break;
 8016e10:	e004      	b.n	8016e1c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016e12:	6839      	ldr	r1, [r7, #0]
 8016e14:	6878      	ldr	r0, [r7, #4]
 8016e16:	f000 fc5e 	bl	80176d6 <USBD_CtlError>
              break;
 8016e1a:	bf00      	nop
          }
          break;
 8016e1c:	e107      	b.n	801702e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e24:	b2db      	uxtb	r3, r3
 8016e26:	2b02      	cmp	r3, #2
 8016e28:	d002      	beq.n	8016e30 <USBD_StdEPReq+0x124>
 8016e2a:	2b03      	cmp	r3, #3
 8016e2c:	d016      	beq.n	8016e5c <USBD_StdEPReq+0x150>
 8016e2e:	e04b      	b.n	8016ec8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016e30:	7bbb      	ldrb	r3, [r7, #14]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d00d      	beq.n	8016e52 <USBD_StdEPReq+0x146>
 8016e36:	7bbb      	ldrb	r3, [r7, #14]
 8016e38:	2b80      	cmp	r3, #128	; 0x80
 8016e3a:	d00a      	beq.n	8016e52 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016e3c:	7bbb      	ldrb	r3, [r7, #14]
 8016e3e:	4619      	mov	r1, r3
 8016e40:	6878      	ldr	r0, [r7, #4]
 8016e42:	f004 f90f 	bl	801b064 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016e46:	2180      	movs	r1, #128	; 0x80
 8016e48:	6878      	ldr	r0, [r7, #4]
 8016e4a:	f004 f90b 	bl	801b064 <USBD_LL_StallEP>
 8016e4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016e50:	e040      	b.n	8016ed4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016e52:	6839      	ldr	r1, [r7, #0]
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f000 fc3e 	bl	80176d6 <USBD_CtlError>
              break;
 8016e5a:	e03b      	b.n	8016ed4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016e5c:	683b      	ldr	r3, [r7, #0]
 8016e5e:	885b      	ldrh	r3, [r3, #2]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d136      	bne.n	8016ed2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016e64:	7bbb      	ldrb	r3, [r7, #14]
 8016e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d004      	beq.n	8016e78 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016e6e:	7bbb      	ldrb	r3, [r7, #14]
 8016e70:	4619      	mov	r1, r3
 8016e72:	6878      	ldr	r0, [r7, #4]
 8016e74:	f004 f915 	bl	801b0a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016e78:	6878      	ldr	r0, [r7, #4]
 8016e7a:	f000 fcf7 	bl	801786c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016e7e:	7bbb      	ldrb	r3, [r7, #14]
 8016e80:	4619      	mov	r1, r3
 8016e82:	6878      	ldr	r0, [r7, #4]
 8016e84:	f7ff fde2 	bl	8016a4c <USBD_CoreFindEP>
 8016e88:	4603      	mov	r3, r0
 8016e8a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016e8c:	7b7b      	ldrb	r3, [r7, #13]
 8016e8e:	2bff      	cmp	r3, #255	; 0xff
 8016e90:	d01f      	beq.n	8016ed2 <USBD_StdEPReq+0x1c6>
 8016e92:	7b7b      	ldrb	r3, [r7, #13]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d11c      	bne.n	8016ed2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016e98:	7b7a      	ldrb	r2, [r7, #13]
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016ea0:	7b7a      	ldrb	r2, [r7, #13]
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	32ae      	adds	r2, #174	; 0xae
 8016ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016eaa:	689b      	ldr	r3, [r3, #8]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d010      	beq.n	8016ed2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016eb0:	7b7a      	ldrb	r2, [r7, #13]
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	32ae      	adds	r2, #174	; 0xae
 8016eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016eba:	689b      	ldr	r3, [r3, #8]
 8016ebc:	6839      	ldr	r1, [r7, #0]
 8016ebe:	6878      	ldr	r0, [r7, #4]
 8016ec0:	4798      	blx	r3
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016ec6:	e004      	b.n	8016ed2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016ec8:	6839      	ldr	r1, [r7, #0]
 8016eca:	6878      	ldr	r0, [r7, #4]
 8016ecc:	f000 fc03 	bl	80176d6 <USBD_CtlError>
              break;
 8016ed0:	e000      	b.n	8016ed4 <USBD_StdEPReq+0x1c8>
              break;
 8016ed2:	bf00      	nop
          }
          break;
 8016ed4:	e0ab      	b.n	801702e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016edc:	b2db      	uxtb	r3, r3
 8016ede:	2b02      	cmp	r3, #2
 8016ee0:	d002      	beq.n	8016ee8 <USBD_StdEPReq+0x1dc>
 8016ee2:	2b03      	cmp	r3, #3
 8016ee4:	d032      	beq.n	8016f4c <USBD_StdEPReq+0x240>
 8016ee6:	e097      	b.n	8017018 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016ee8:	7bbb      	ldrb	r3, [r7, #14]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d007      	beq.n	8016efe <USBD_StdEPReq+0x1f2>
 8016eee:	7bbb      	ldrb	r3, [r7, #14]
 8016ef0:	2b80      	cmp	r3, #128	; 0x80
 8016ef2:	d004      	beq.n	8016efe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016ef4:	6839      	ldr	r1, [r7, #0]
 8016ef6:	6878      	ldr	r0, [r7, #4]
 8016ef8:	f000 fbed 	bl	80176d6 <USBD_CtlError>
                break;
 8016efc:	e091      	b.n	8017022 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016efe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	da0b      	bge.n	8016f1e <USBD_StdEPReq+0x212>
 8016f06:	7bbb      	ldrb	r3, [r7, #14]
 8016f08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016f0c:	4613      	mov	r3, r2
 8016f0e:	009b      	lsls	r3, r3, #2
 8016f10:	4413      	add	r3, r2
 8016f12:	009b      	lsls	r3, r3, #2
 8016f14:	3310      	adds	r3, #16
 8016f16:	687a      	ldr	r2, [r7, #4]
 8016f18:	4413      	add	r3, r2
 8016f1a:	3304      	adds	r3, #4
 8016f1c:	e00b      	b.n	8016f36 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016f1e:	7bbb      	ldrb	r3, [r7, #14]
 8016f20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016f24:	4613      	mov	r3, r2
 8016f26:	009b      	lsls	r3, r3, #2
 8016f28:	4413      	add	r3, r2
 8016f2a:	009b      	lsls	r3, r3, #2
 8016f2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016f30:	687a      	ldr	r2, [r7, #4]
 8016f32:	4413      	add	r3, r2
 8016f34:	3304      	adds	r3, #4
 8016f36:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016f38:	68bb      	ldr	r3, [r7, #8]
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016f3e:	68bb      	ldr	r3, [r7, #8]
 8016f40:	2202      	movs	r2, #2
 8016f42:	4619      	mov	r1, r3
 8016f44:	6878      	ldr	r0, [r7, #4]
 8016f46:	f000 fc37 	bl	80177b8 <USBD_CtlSendData>
              break;
 8016f4a:	e06a      	b.n	8017022 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	da11      	bge.n	8016f78 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016f54:	7bbb      	ldrb	r3, [r7, #14]
 8016f56:	f003 020f 	and.w	r2, r3, #15
 8016f5a:	6879      	ldr	r1, [r7, #4]
 8016f5c:	4613      	mov	r3, r2
 8016f5e:	009b      	lsls	r3, r3, #2
 8016f60:	4413      	add	r3, r2
 8016f62:	009b      	lsls	r3, r3, #2
 8016f64:	440b      	add	r3, r1
 8016f66:	3324      	adds	r3, #36	; 0x24
 8016f68:	881b      	ldrh	r3, [r3, #0]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d117      	bne.n	8016f9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016f6e:	6839      	ldr	r1, [r7, #0]
 8016f70:	6878      	ldr	r0, [r7, #4]
 8016f72:	f000 fbb0 	bl	80176d6 <USBD_CtlError>
                  break;
 8016f76:	e054      	b.n	8017022 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016f78:	7bbb      	ldrb	r3, [r7, #14]
 8016f7a:	f003 020f 	and.w	r2, r3, #15
 8016f7e:	6879      	ldr	r1, [r7, #4]
 8016f80:	4613      	mov	r3, r2
 8016f82:	009b      	lsls	r3, r3, #2
 8016f84:	4413      	add	r3, r2
 8016f86:	009b      	lsls	r3, r3, #2
 8016f88:	440b      	add	r3, r1
 8016f8a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016f8e:	881b      	ldrh	r3, [r3, #0]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d104      	bne.n	8016f9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016f94:	6839      	ldr	r1, [r7, #0]
 8016f96:	6878      	ldr	r0, [r7, #4]
 8016f98:	f000 fb9d 	bl	80176d6 <USBD_CtlError>
                  break;
 8016f9c:	e041      	b.n	8017022 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016f9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	da0b      	bge.n	8016fbe <USBD_StdEPReq+0x2b2>
 8016fa6:	7bbb      	ldrb	r3, [r7, #14]
 8016fa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016fac:	4613      	mov	r3, r2
 8016fae:	009b      	lsls	r3, r3, #2
 8016fb0:	4413      	add	r3, r2
 8016fb2:	009b      	lsls	r3, r3, #2
 8016fb4:	3310      	adds	r3, #16
 8016fb6:	687a      	ldr	r2, [r7, #4]
 8016fb8:	4413      	add	r3, r2
 8016fba:	3304      	adds	r3, #4
 8016fbc:	e00b      	b.n	8016fd6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016fbe:	7bbb      	ldrb	r3, [r7, #14]
 8016fc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016fc4:	4613      	mov	r3, r2
 8016fc6:	009b      	lsls	r3, r3, #2
 8016fc8:	4413      	add	r3, r2
 8016fca:	009b      	lsls	r3, r3, #2
 8016fcc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016fd0:	687a      	ldr	r2, [r7, #4]
 8016fd2:	4413      	add	r3, r2
 8016fd4:	3304      	adds	r3, #4
 8016fd6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016fd8:	7bbb      	ldrb	r3, [r7, #14]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d002      	beq.n	8016fe4 <USBD_StdEPReq+0x2d8>
 8016fde:	7bbb      	ldrb	r3, [r7, #14]
 8016fe0:	2b80      	cmp	r3, #128	; 0x80
 8016fe2:	d103      	bne.n	8016fec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016fe4:	68bb      	ldr	r3, [r7, #8]
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	601a      	str	r2, [r3, #0]
 8016fea:	e00e      	b.n	801700a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016fec:	7bbb      	ldrb	r3, [r7, #14]
 8016fee:	4619      	mov	r1, r3
 8016ff0:	6878      	ldr	r0, [r7, #4]
 8016ff2:	f004 f875 	bl	801b0e0 <USBD_LL_IsStallEP>
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d003      	beq.n	8017004 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016ffc:	68bb      	ldr	r3, [r7, #8]
 8016ffe:	2201      	movs	r2, #1
 8017000:	601a      	str	r2, [r3, #0]
 8017002:	e002      	b.n	801700a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8017004:	68bb      	ldr	r3, [r7, #8]
 8017006:	2200      	movs	r2, #0
 8017008:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801700a:	68bb      	ldr	r3, [r7, #8]
 801700c:	2202      	movs	r2, #2
 801700e:	4619      	mov	r1, r3
 8017010:	6878      	ldr	r0, [r7, #4]
 8017012:	f000 fbd1 	bl	80177b8 <USBD_CtlSendData>
              break;
 8017016:	e004      	b.n	8017022 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8017018:	6839      	ldr	r1, [r7, #0]
 801701a:	6878      	ldr	r0, [r7, #4]
 801701c:	f000 fb5b 	bl	80176d6 <USBD_CtlError>
              break;
 8017020:	bf00      	nop
          }
          break;
 8017022:	e004      	b.n	801702e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8017024:	6839      	ldr	r1, [r7, #0]
 8017026:	6878      	ldr	r0, [r7, #4]
 8017028:	f000 fb55 	bl	80176d6 <USBD_CtlError>
          break;
 801702c:	bf00      	nop
      }
      break;
 801702e:	e005      	b.n	801703c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8017030:	6839      	ldr	r1, [r7, #0]
 8017032:	6878      	ldr	r0, [r7, #4]
 8017034:	f000 fb4f 	bl	80176d6 <USBD_CtlError>
      break;
 8017038:	e000      	b.n	801703c <USBD_StdEPReq+0x330>
      break;
 801703a:	bf00      	nop
  }

  return ret;
 801703c:	7bfb      	ldrb	r3, [r7, #15]
}
 801703e:	4618      	mov	r0, r3
 8017040:	3710      	adds	r7, #16
 8017042:	46bd      	mov	sp, r7
 8017044:	bd80      	pop	{r7, pc}
	...

08017048 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017048:	b580      	push	{r7, lr}
 801704a:	b084      	sub	sp, #16
 801704c:	af00      	add	r7, sp, #0
 801704e:	6078      	str	r0, [r7, #4]
 8017050:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017052:	2300      	movs	r3, #0
 8017054:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017056:	2300      	movs	r3, #0
 8017058:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801705a:	2300      	movs	r3, #0
 801705c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	885b      	ldrh	r3, [r3, #2]
 8017062:	0a1b      	lsrs	r3, r3, #8
 8017064:	b29b      	uxth	r3, r3
 8017066:	3b01      	subs	r3, #1
 8017068:	2b06      	cmp	r3, #6
 801706a:	f200 8128 	bhi.w	80172be <USBD_GetDescriptor+0x276>
 801706e:	a201      	add	r2, pc, #4	; (adr r2, 8017074 <USBD_GetDescriptor+0x2c>)
 8017070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017074:	08017091 	.word	0x08017091
 8017078:	080170a9 	.word	0x080170a9
 801707c:	080170e9 	.word	0x080170e9
 8017080:	080172bf 	.word	0x080172bf
 8017084:	080172bf 	.word	0x080172bf
 8017088:	0801725f 	.word	0x0801725f
 801708c:	0801728b 	.word	0x0801728b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	687a      	ldr	r2, [r7, #4]
 801709a:	7c12      	ldrb	r2, [r2, #16]
 801709c:	f107 0108 	add.w	r1, r7, #8
 80170a0:	4610      	mov	r0, r2
 80170a2:	4798      	blx	r3
 80170a4:	60f8      	str	r0, [r7, #12]
      break;
 80170a6:	e112      	b.n	80172ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	7c1b      	ldrb	r3, [r3, #16]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d10d      	bne.n	80170cc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170b8:	f107 0208 	add.w	r2, r7, #8
 80170bc:	4610      	mov	r0, r2
 80170be:	4798      	blx	r3
 80170c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	3301      	adds	r3, #1
 80170c6:	2202      	movs	r2, #2
 80170c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80170ca:	e100      	b.n	80172ce <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170d4:	f107 0208 	add.w	r2, r7, #8
 80170d8:	4610      	mov	r0, r2
 80170da:	4798      	blx	r3
 80170dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	3301      	adds	r3, #1
 80170e2:	2202      	movs	r2, #2
 80170e4:	701a      	strb	r2, [r3, #0]
      break;
 80170e6:	e0f2      	b.n	80172ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80170e8:	683b      	ldr	r3, [r7, #0]
 80170ea:	885b      	ldrh	r3, [r3, #2]
 80170ec:	b2db      	uxtb	r3, r3
 80170ee:	2b05      	cmp	r3, #5
 80170f0:	f200 80ac 	bhi.w	801724c <USBD_GetDescriptor+0x204>
 80170f4:	a201      	add	r2, pc, #4	; (adr r2, 80170fc <USBD_GetDescriptor+0xb4>)
 80170f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170fa:	bf00      	nop
 80170fc:	08017115 	.word	0x08017115
 8017100:	08017149 	.word	0x08017149
 8017104:	0801717d 	.word	0x0801717d
 8017108:	080171b1 	.word	0x080171b1
 801710c:	080171e5 	.word	0x080171e5
 8017110:	08017219 	.word	0x08017219
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801711a:	685b      	ldr	r3, [r3, #4]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d00b      	beq.n	8017138 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017126:	685b      	ldr	r3, [r3, #4]
 8017128:	687a      	ldr	r2, [r7, #4]
 801712a:	7c12      	ldrb	r2, [r2, #16]
 801712c:	f107 0108 	add.w	r1, r7, #8
 8017130:	4610      	mov	r0, r2
 8017132:	4798      	blx	r3
 8017134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017136:	e091      	b.n	801725c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017138:	6839      	ldr	r1, [r7, #0]
 801713a:	6878      	ldr	r0, [r7, #4]
 801713c:	f000 facb 	bl	80176d6 <USBD_CtlError>
            err++;
 8017140:	7afb      	ldrb	r3, [r7, #11]
 8017142:	3301      	adds	r3, #1
 8017144:	72fb      	strb	r3, [r7, #11]
          break;
 8017146:	e089      	b.n	801725c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801714e:	689b      	ldr	r3, [r3, #8]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d00b      	beq.n	801716c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801715a:	689b      	ldr	r3, [r3, #8]
 801715c:	687a      	ldr	r2, [r7, #4]
 801715e:	7c12      	ldrb	r2, [r2, #16]
 8017160:	f107 0108 	add.w	r1, r7, #8
 8017164:	4610      	mov	r0, r2
 8017166:	4798      	blx	r3
 8017168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801716a:	e077      	b.n	801725c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801716c:	6839      	ldr	r1, [r7, #0]
 801716e:	6878      	ldr	r0, [r7, #4]
 8017170:	f000 fab1 	bl	80176d6 <USBD_CtlError>
            err++;
 8017174:	7afb      	ldrb	r3, [r7, #11]
 8017176:	3301      	adds	r3, #1
 8017178:	72fb      	strb	r3, [r7, #11]
          break;
 801717a:	e06f      	b.n	801725c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017182:	68db      	ldr	r3, [r3, #12]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d00b      	beq.n	80171a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801718e:	68db      	ldr	r3, [r3, #12]
 8017190:	687a      	ldr	r2, [r7, #4]
 8017192:	7c12      	ldrb	r2, [r2, #16]
 8017194:	f107 0108 	add.w	r1, r7, #8
 8017198:	4610      	mov	r0, r2
 801719a:	4798      	blx	r3
 801719c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801719e:	e05d      	b.n	801725c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80171a0:	6839      	ldr	r1, [r7, #0]
 80171a2:	6878      	ldr	r0, [r7, #4]
 80171a4:	f000 fa97 	bl	80176d6 <USBD_CtlError>
            err++;
 80171a8:	7afb      	ldrb	r3, [r7, #11]
 80171aa:	3301      	adds	r3, #1
 80171ac:	72fb      	strb	r3, [r7, #11]
          break;
 80171ae:	e055      	b.n	801725c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80171b6:	691b      	ldr	r3, [r3, #16]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d00b      	beq.n	80171d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80171c2:	691b      	ldr	r3, [r3, #16]
 80171c4:	687a      	ldr	r2, [r7, #4]
 80171c6:	7c12      	ldrb	r2, [r2, #16]
 80171c8:	f107 0108 	add.w	r1, r7, #8
 80171cc:	4610      	mov	r0, r2
 80171ce:	4798      	blx	r3
 80171d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80171d2:	e043      	b.n	801725c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80171d4:	6839      	ldr	r1, [r7, #0]
 80171d6:	6878      	ldr	r0, [r7, #4]
 80171d8:	f000 fa7d 	bl	80176d6 <USBD_CtlError>
            err++;
 80171dc:	7afb      	ldrb	r3, [r7, #11]
 80171de:	3301      	adds	r3, #1
 80171e0:	72fb      	strb	r3, [r7, #11]
          break;
 80171e2:	e03b      	b.n	801725c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80171ea:	695b      	ldr	r3, [r3, #20]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d00b      	beq.n	8017208 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80171f6:	695b      	ldr	r3, [r3, #20]
 80171f8:	687a      	ldr	r2, [r7, #4]
 80171fa:	7c12      	ldrb	r2, [r2, #16]
 80171fc:	f107 0108 	add.w	r1, r7, #8
 8017200:	4610      	mov	r0, r2
 8017202:	4798      	blx	r3
 8017204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017206:	e029      	b.n	801725c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017208:	6839      	ldr	r1, [r7, #0]
 801720a:	6878      	ldr	r0, [r7, #4]
 801720c:	f000 fa63 	bl	80176d6 <USBD_CtlError>
            err++;
 8017210:	7afb      	ldrb	r3, [r7, #11]
 8017212:	3301      	adds	r3, #1
 8017214:	72fb      	strb	r3, [r7, #11]
          break;
 8017216:	e021      	b.n	801725c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801721e:	699b      	ldr	r3, [r3, #24]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d00b      	beq.n	801723c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801722a:	699b      	ldr	r3, [r3, #24]
 801722c:	687a      	ldr	r2, [r7, #4]
 801722e:	7c12      	ldrb	r2, [r2, #16]
 8017230:	f107 0108 	add.w	r1, r7, #8
 8017234:	4610      	mov	r0, r2
 8017236:	4798      	blx	r3
 8017238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801723a:	e00f      	b.n	801725c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801723c:	6839      	ldr	r1, [r7, #0]
 801723e:	6878      	ldr	r0, [r7, #4]
 8017240:	f000 fa49 	bl	80176d6 <USBD_CtlError>
            err++;
 8017244:	7afb      	ldrb	r3, [r7, #11]
 8017246:	3301      	adds	r3, #1
 8017248:	72fb      	strb	r3, [r7, #11]
          break;
 801724a:	e007      	b.n	801725c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801724c:	6839      	ldr	r1, [r7, #0]
 801724e:	6878      	ldr	r0, [r7, #4]
 8017250:	f000 fa41 	bl	80176d6 <USBD_CtlError>
          err++;
 8017254:	7afb      	ldrb	r3, [r7, #11]
 8017256:	3301      	adds	r3, #1
 8017258:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801725a:	bf00      	nop
      }
      break;
 801725c:	e037      	b.n	80172ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	7c1b      	ldrb	r3, [r3, #16]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d109      	bne.n	801727a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801726c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801726e:	f107 0208 	add.w	r2, r7, #8
 8017272:	4610      	mov	r0, r2
 8017274:	4798      	blx	r3
 8017276:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017278:	e029      	b.n	80172ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801727a:	6839      	ldr	r1, [r7, #0]
 801727c:	6878      	ldr	r0, [r7, #4]
 801727e:	f000 fa2a 	bl	80176d6 <USBD_CtlError>
        err++;
 8017282:	7afb      	ldrb	r3, [r7, #11]
 8017284:	3301      	adds	r3, #1
 8017286:	72fb      	strb	r3, [r7, #11]
      break;
 8017288:	e021      	b.n	80172ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	7c1b      	ldrb	r3, [r3, #16]
 801728e:	2b00      	cmp	r3, #0
 8017290:	d10d      	bne.n	80172ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801729a:	f107 0208 	add.w	r2, r7, #8
 801729e:	4610      	mov	r0, r2
 80172a0:	4798      	blx	r3
 80172a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	3301      	adds	r3, #1
 80172a8:	2207      	movs	r2, #7
 80172aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80172ac:	e00f      	b.n	80172ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80172ae:	6839      	ldr	r1, [r7, #0]
 80172b0:	6878      	ldr	r0, [r7, #4]
 80172b2:	f000 fa10 	bl	80176d6 <USBD_CtlError>
        err++;
 80172b6:	7afb      	ldrb	r3, [r7, #11]
 80172b8:	3301      	adds	r3, #1
 80172ba:	72fb      	strb	r3, [r7, #11]
      break;
 80172bc:	e007      	b.n	80172ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80172be:	6839      	ldr	r1, [r7, #0]
 80172c0:	6878      	ldr	r0, [r7, #4]
 80172c2:	f000 fa08 	bl	80176d6 <USBD_CtlError>
      err++;
 80172c6:	7afb      	ldrb	r3, [r7, #11]
 80172c8:	3301      	adds	r3, #1
 80172ca:	72fb      	strb	r3, [r7, #11]
      break;
 80172cc:	bf00      	nop
  }

  if (err != 0U)
 80172ce:	7afb      	ldrb	r3, [r7, #11]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d11e      	bne.n	8017312 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80172d4:	683b      	ldr	r3, [r7, #0]
 80172d6:	88db      	ldrh	r3, [r3, #6]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d016      	beq.n	801730a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80172dc:	893b      	ldrh	r3, [r7, #8]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d00e      	beq.n	8017300 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80172e2:	683b      	ldr	r3, [r7, #0]
 80172e4:	88da      	ldrh	r2, [r3, #6]
 80172e6:	893b      	ldrh	r3, [r7, #8]
 80172e8:	4293      	cmp	r3, r2
 80172ea:	bf28      	it	cs
 80172ec:	4613      	movcs	r3, r2
 80172ee:	b29b      	uxth	r3, r3
 80172f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80172f2:	893b      	ldrh	r3, [r7, #8]
 80172f4:	461a      	mov	r2, r3
 80172f6:	68f9      	ldr	r1, [r7, #12]
 80172f8:	6878      	ldr	r0, [r7, #4]
 80172fa:	f000 fa5d 	bl	80177b8 <USBD_CtlSendData>
 80172fe:	e009      	b.n	8017314 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017300:	6839      	ldr	r1, [r7, #0]
 8017302:	6878      	ldr	r0, [r7, #4]
 8017304:	f000 f9e7 	bl	80176d6 <USBD_CtlError>
 8017308:	e004      	b.n	8017314 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801730a:	6878      	ldr	r0, [r7, #4]
 801730c:	f000 faae 	bl	801786c <USBD_CtlSendStatus>
 8017310:	e000      	b.n	8017314 <USBD_GetDescriptor+0x2cc>
    return;
 8017312:	bf00      	nop
  }
}
 8017314:	3710      	adds	r7, #16
 8017316:	46bd      	mov	sp, r7
 8017318:	bd80      	pop	{r7, pc}
 801731a:	bf00      	nop

0801731c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801731c:	b580      	push	{r7, lr}
 801731e:	b084      	sub	sp, #16
 8017320:	af00      	add	r7, sp, #0
 8017322:	6078      	str	r0, [r7, #4]
 8017324:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017326:	683b      	ldr	r3, [r7, #0]
 8017328:	889b      	ldrh	r3, [r3, #4]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d131      	bne.n	8017392 <USBD_SetAddress+0x76>
 801732e:	683b      	ldr	r3, [r7, #0]
 8017330:	88db      	ldrh	r3, [r3, #6]
 8017332:	2b00      	cmp	r3, #0
 8017334:	d12d      	bne.n	8017392 <USBD_SetAddress+0x76>
 8017336:	683b      	ldr	r3, [r7, #0]
 8017338:	885b      	ldrh	r3, [r3, #2]
 801733a:	2b7f      	cmp	r3, #127	; 0x7f
 801733c:	d829      	bhi.n	8017392 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801733e:	683b      	ldr	r3, [r7, #0]
 8017340:	885b      	ldrh	r3, [r3, #2]
 8017342:	b2db      	uxtb	r3, r3
 8017344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017348:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017350:	b2db      	uxtb	r3, r3
 8017352:	2b03      	cmp	r3, #3
 8017354:	d104      	bne.n	8017360 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017356:	6839      	ldr	r1, [r7, #0]
 8017358:	6878      	ldr	r0, [r7, #4]
 801735a:	f000 f9bc 	bl	80176d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801735e:	e01d      	b.n	801739c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	7bfa      	ldrb	r2, [r7, #15]
 8017364:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017368:	7bfb      	ldrb	r3, [r7, #15]
 801736a:	4619      	mov	r1, r3
 801736c:	6878      	ldr	r0, [r7, #4]
 801736e:	f003 fee3 	bl	801b138 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8017372:	6878      	ldr	r0, [r7, #4]
 8017374:	f000 fa7a 	bl	801786c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017378:	7bfb      	ldrb	r3, [r7, #15]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d004      	beq.n	8017388 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	2202      	movs	r2, #2
 8017382:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017386:	e009      	b.n	801739c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	2201      	movs	r2, #1
 801738c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017390:	e004      	b.n	801739c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017392:	6839      	ldr	r1, [r7, #0]
 8017394:	6878      	ldr	r0, [r7, #4]
 8017396:	f000 f99e 	bl	80176d6 <USBD_CtlError>
  }
}
 801739a:	bf00      	nop
 801739c:	bf00      	nop
 801739e:	3710      	adds	r7, #16
 80173a0:	46bd      	mov	sp, r7
 80173a2:	bd80      	pop	{r7, pc}

080173a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80173a4:	b580      	push	{r7, lr}
 80173a6:	b084      	sub	sp, #16
 80173a8:	af00      	add	r7, sp, #0
 80173aa:	6078      	str	r0, [r7, #4]
 80173ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80173ae:	2300      	movs	r3, #0
 80173b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80173b2:	683b      	ldr	r3, [r7, #0]
 80173b4:	885b      	ldrh	r3, [r3, #2]
 80173b6:	b2da      	uxtb	r2, r3
 80173b8:	4b4e      	ldr	r3, [pc, #312]	; (80174f4 <USBD_SetConfig+0x150>)
 80173ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80173bc:	4b4d      	ldr	r3, [pc, #308]	; (80174f4 <USBD_SetConfig+0x150>)
 80173be:	781b      	ldrb	r3, [r3, #0]
 80173c0:	2b01      	cmp	r3, #1
 80173c2:	d905      	bls.n	80173d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80173c4:	6839      	ldr	r1, [r7, #0]
 80173c6:	6878      	ldr	r0, [r7, #4]
 80173c8:	f000 f985 	bl	80176d6 <USBD_CtlError>
    return USBD_FAIL;
 80173cc:	2303      	movs	r3, #3
 80173ce:	e08c      	b.n	80174ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80173d6:	b2db      	uxtb	r3, r3
 80173d8:	2b02      	cmp	r3, #2
 80173da:	d002      	beq.n	80173e2 <USBD_SetConfig+0x3e>
 80173dc:	2b03      	cmp	r3, #3
 80173de:	d029      	beq.n	8017434 <USBD_SetConfig+0x90>
 80173e0:	e075      	b.n	80174ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80173e2:	4b44      	ldr	r3, [pc, #272]	; (80174f4 <USBD_SetConfig+0x150>)
 80173e4:	781b      	ldrb	r3, [r3, #0]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d020      	beq.n	801742c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80173ea:	4b42      	ldr	r3, [pc, #264]	; (80174f4 <USBD_SetConfig+0x150>)
 80173ec:	781b      	ldrb	r3, [r3, #0]
 80173ee:	461a      	mov	r2, r3
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80173f4:	4b3f      	ldr	r3, [pc, #252]	; (80174f4 <USBD_SetConfig+0x150>)
 80173f6:	781b      	ldrb	r3, [r3, #0]
 80173f8:	4619      	mov	r1, r3
 80173fa:	6878      	ldr	r0, [r7, #4]
 80173fc:	f7fe ffe1 	bl	80163c2 <USBD_SetClassConfig>
 8017400:	4603      	mov	r3, r0
 8017402:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017404:	7bfb      	ldrb	r3, [r7, #15]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d008      	beq.n	801741c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801740a:	6839      	ldr	r1, [r7, #0]
 801740c:	6878      	ldr	r0, [r7, #4]
 801740e:	f000 f962 	bl	80176d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	2202      	movs	r2, #2
 8017416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801741a:	e065      	b.n	80174e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801741c:	6878      	ldr	r0, [r7, #4]
 801741e:	f000 fa25 	bl	801786c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	2203      	movs	r2, #3
 8017426:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801742a:	e05d      	b.n	80174e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801742c:	6878      	ldr	r0, [r7, #4]
 801742e:	f000 fa1d 	bl	801786c <USBD_CtlSendStatus>
      break;
 8017432:	e059      	b.n	80174e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017434:	4b2f      	ldr	r3, [pc, #188]	; (80174f4 <USBD_SetConfig+0x150>)
 8017436:	781b      	ldrb	r3, [r3, #0]
 8017438:	2b00      	cmp	r3, #0
 801743a:	d112      	bne.n	8017462 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	2202      	movs	r2, #2
 8017440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8017444:	4b2b      	ldr	r3, [pc, #172]	; (80174f4 <USBD_SetConfig+0x150>)
 8017446:	781b      	ldrb	r3, [r3, #0]
 8017448:	461a      	mov	r2, r3
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801744e:	4b29      	ldr	r3, [pc, #164]	; (80174f4 <USBD_SetConfig+0x150>)
 8017450:	781b      	ldrb	r3, [r3, #0]
 8017452:	4619      	mov	r1, r3
 8017454:	6878      	ldr	r0, [r7, #4]
 8017456:	f7fe ffd0 	bl	80163fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801745a:	6878      	ldr	r0, [r7, #4]
 801745c:	f000 fa06 	bl	801786c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017460:	e042      	b.n	80174e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8017462:	4b24      	ldr	r3, [pc, #144]	; (80174f4 <USBD_SetConfig+0x150>)
 8017464:	781b      	ldrb	r3, [r3, #0]
 8017466:	461a      	mov	r2, r3
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	685b      	ldr	r3, [r3, #4]
 801746c:	429a      	cmp	r2, r3
 801746e:	d02a      	beq.n	80174c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	685b      	ldr	r3, [r3, #4]
 8017474:	b2db      	uxtb	r3, r3
 8017476:	4619      	mov	r1, r3
 8017478:	6878      	ldr	r0, [r7, #4]
 801747a:	f7fe ffbe 	bl	80163fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801747e:	4b1d      	ldr	r3, [pc, #116]	; (80174f4 <USBD_SetConfig+0x150>)
 8017480:	781b      	ldrb	r3, [r3, #0]
 8017482:	461a      	mov	r2, r3
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017488:	4b1a      	ldr	r3, [pc, #104]	; (80174f4 <USBD_SetConfig+0x150>)
 801748a:	781b      	ldrb	r3, [r3, #0]
 801748c:	4619      	mov	r1, r3
 801748e:	6878      	ldr	r0, [r7, #4]
 8017490:	f7fe ff97 	bl	80163c2 <USBD_SetClassConfig>
 8017494:	4603      	mov	r3, r0
 8017496:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017498:	7bfb      	ldrb	r3, [r7, #15]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d00f      	beq.n	80174be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801749e:	6839      	ldr	r1, [r7, #0]
 80174a0:	6878      	ldr	r0, [r7, #4]
 80174a2:	f000 f918 	bl	80176d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	685b      	ldr	r3, [r3, #4]
 80174aa:	b2db      	uxtb	r3, r3
 80174ac:	4619      	mov	r1, r3
 80174ae:	6878      	ldr	r0, [r7, #4]
 80174b0:	f7fe ffa3 	bl	80163fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	2202      	movs	r2, #2
 80174b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80174bc:	e014      	b.n	80174e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80174be:	6878      	ldr	r0, [r7, #4]
 80174c0:	f000 f9d4 	bl	801786c <USBD_CtlSendStatus>
      break;
 80174c4:	e010      	b.n	80174e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80174c6:	6878      	ldr	r0, [r7, #4]
 80174c8:	f000 f9d0 	bl	801786c <USBD_CtlSendStatus>
      break;
 80174cc:	e00c      	b.n	80174e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80174ce:	6839      	ldr	r1, [r7, #0]
 80174d0:	6878      	ldr	r0, [r7, #4]
 80174d2:	f000 f900 	bl	80176d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80174d6:	4b07      	ldr	r3, [pc, #28]	; (80174f4 <USBD_SetConfig+0x150>)
 80174d8:	781b      	ldrb	r3, [r3, #0]
 80174da:	4619      	mov	r1, r3
 80174dc:	6878      	ldr	r0, [r7, #4]
 80174de:	f7fe ff8c 	bl	80163fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80174e2:	2303      	movs	r3, #3
 80174e4:	73fb      	strb	r3, [r7, #15]
      break;
 80174e6:	bf00      	nop
  }

  return ret;
 80174e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80174ea:	4618      	mov	r0, r3
 80174ec:	3710      	adds	r7, #16
 80174ee:	46bd      	mov	sp, r7
 80174f0:	bd80      	pop	{r7, pc}
 80174f2:	bf00      	nop
 80174f4:	24003e70 	.word	0x24003e70

080174f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b082      	sub	sp, #8
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	6078      	str	r0, [r7, #4]
 8017500:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017502:	683b      	ldr	r3, [r7, #0]
 8017504:	88db      	ldrh	r3, [r3, #6]
 8017506:	2b01      	cmp	r3, #1
 8017508:	d004      	beq.n	8017514 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801750a:	6839      	ldr	r1, [r7, #0]
 801750c:	6878      	ldr	r0, [r7, #4]
 801750e:	f000 f8e2 	bl	80176d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017512:	e023      	b.n	801755c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801751a:	b2db      	uxtb	r3, r3
 801751c:	2b02      	cmp	r3, #2
 801751e:	dc02      	bgt.n	8017526 <USBD_GetConfig+0x2e>
 8017520:	2b00      	cmp	r3, #0
 8017522:	dc03      	bgt.n	801752c <USBD_GetConfig+0x34>
 8017524:	e015      	b.n	8017552 <USBD_GetConfig+0x5a>
 8017526:	2b03      	cmp	r3, #3
 8017528:	d00b      	beq.n	8017542 <USBD_GetConfig+0x4a>
 801752a:	e012      	b.n	8017552 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	2200      	movs	r2, #0
 8017530:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	3308      	adds	r3, #8
 8017536:	2201      	movs	r2, #1
 8017538:	4619      	mov	r1, r3
 801753a:	6878      	ldr	r0, [r7, #4]
 801753c:	f000 f93c 	bl	80177b8 <USBD_CtlSendData>
        break;
 8017540:	e00c      	b.n	801755c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	3304      	adds	r3, #4
 8017546:	2201      	movs	r2, #1
 8017548:	4619      	mov	r1, r3
 801754a:	6878      	ldr	r0, [r7, #4]
 801754c:	f000 f934 	bl	80177b8 <USBD_CtlSendData>
        break;
 8017550:	e004      	b.n	801755c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017552:	6839      	ldr	r1, [r7, #0]
 8017554:	6878      	ldr	r0, [r7, #4]
 8017556:	f000 f8be 	bl	80176d6 <USBD_CtlError>
        break;
 801755a:	bf00      	nop
}
 801755c:	bf00      	nop
 801755e:	3708      	adds	r7, #8
 8017560:	46bd      	mov	sp, r7
 8017562:	bd80      	pop	{r7, pc}

08017564 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b082      	sub	sp, #8
 8017568:	af00      	add	r7, sp, #0
 801756a:	6078      	str	r0, [r7, #4]
 801756c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017574:	b2db      	uxtb	r3, r3
 8017576:	3b01      	subs	r3, #1
 8017578:	2b02      	cmp	r3, #2
 801757a:	d81e      	bhi.n	80175ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801757c:	683b      	ldr	r3, [r7, #0]
 801757e:	88db      	ldrh	r3, [r3, #6]
 8017580:	2b02      	cmp	r3, #2
 8017582:	d004      	beq.n	801758e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017584:	6839      	ldr	r1, [r7, #0]
 8017586:	6878      	ldr	r0, [r7, #4]
 8017588:	f000 f8a5 	bl	80176d6 <USBD_CtlError>
        break;
 801758c:	e01a      	b.n	80175c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	2201      	movs	r2, #1
 8017592:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801759a:	2b00      	cmp	r3, #0
 801759c:	d005      	beq.n	80175aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	68db      	ldr	r3, [r3, #12]
 80175a2:	f043 0202 	orr.w	r2, r3, #2
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	330c      	adds	r3, #12
 80175ae:	2202      	movs	r2, #2
 80175b0:	4619      	mov	r1, r3
 80175b2:	6878      	ldr	r0, [r7, #4]
 80175b4:	f000 f900 	bl	80177b8 <USBD_CtlSendData>
      break;
 80175b8:	e004      	b.n	80175c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80175ba:	6839      	ldr	r1, [r7, #0]
 80175bc:	6878      	ldr	r0, [r7, #4]
 80175be:	f000 f88a 	bl	80176d6 <USBD_CtlError>
      break;
 80175c2:	bf00      	nop
  }
}
 80175c4:	bf00      	nop
 80175c6:	3708      	adds	r7, #8
 80175c8:	46bd      	mov	sp, r7
 80175ca:	bd80      	pop	{r7, pc}

080175cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80175cc:	b580      	push	{r7, lr}
 80175ce:	b082      	sub	sp, #8
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	6078      	str	r0, [r7, #4]
 80175d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80175d6:	683b      	ldr	r3, [r7, #0]
 80175d8:	885b      	ldrh	r3, [r3, #2]
 80175da:	2b01      	cmp	r3, #1
 80175dc:	d107      	bne.n	80175ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	2201      	movs	r2, #1
 80175e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80175e6:	6878      	ldr	r0, [r7, #4]
 80175e8:	f000 f940 	bl	801786c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80175ec:	e013      	b.n	8017616 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80175ee:	683b      	ldr	r3, [r7, #0]
 80175f0:	885b      	ldrh	r3, [r3, #2]
 80175f2:	2b02      	cmp	r3, #2
 80175f4:	d10b      	bne.n	801760e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80175f6:	683b      	ldr	r3, [r7, #0]
 80175f8:	889b      	ldrh	r3, [r3, #4]
 80175fa:	0a1b      	lsrs	r3, r3, #8
 80175fc:	b29b      	uxth	r3, r3
 80175fe:	b2da      	uxtb	r2, r3
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8017606:	6878      	ldr	r0, [r7, #4]
 8017608:	f000 f930 	bl	801786c <USBD_CtlSendStatus>
}
 801760c:	e003      	b.n	8017616 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801760e:	6839      	ldr	r1, [r7, #0]
 8017610:	6878      	ldr	r0, [r7, #4]
 8017612:	f000 f860 	bl	80176d6 <USBD_CtlError>
}
 8017616:	bf00      	nop
 8017618:	3708      	adds	r7, #8
 801761a:	46bd      	mov	sp, r7
 801761c:	bd80      	pop	{r7, pc}

0801761e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801761e:	b580      	push	{r7, lr}
 8017620:	b082      	sub	sp, #8
 8017622:	af00      	add	r7, sp, #0
 8017624:	6078      	str	r0, [r7, #4]
 8017626:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801762e:	b2db      	uxtb	r3, r3
 8017630:	3b01      	subs	r3, #1
 8017632:	2b02      	cmp	r3, #2
 8017634:	d80b      	bhi.n	801764e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017636:	683b      	ldr	r3, [r7, #0]
 8017638:	885b      	ldrh	r3, [r3, #2]
 801763a:	2b01      	cmp	r3, #1
 801763c:	d10c      	bne.n	8017658 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	2200      	movs	r2, #0
 8017642:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017646:	6878      	ldr	r0, [r7, #4]
 8017648:	f000 f910 	bl	801786c <USBD_CtlSendStatus>
      }
      break;
 801764c:	e004      	b.n	8017658 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801764e:	6839      	ldr	r1, [r7, #0]
 8017650:	6878      	ldr	r0, [r7, #4]
 8017652:	f000 f840 	bl	80176d6 <USBD_CtlError>
      break;
 8017656:	e000      	b.n	801765a <USBD_ClrFeature+0x3c>
      break;
 8017658:	bf00      	nop
  }
}
 801765a:	bf00      	nop
 801765c:	3708      	adds	r7, #8
 801765e:	46bd      	mov	sp, r7
 8017660:	bd80      	pop	{r7, pc}

08017662 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017662:	b580      	push	{r7, lr}
 8017664:	b084      	sub	sp, #16
 8017666:	af00      	add	r7, sp, #0
 8017668:	6078      	str	r0, [r7, #4]
 801766a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801766c:	683b      	ldr	r3, [r7, #0]
 801766e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	781a      	ldrb	r2, [r3, #0]
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	3301      	adds	r3, #1
 801767c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	781a      	ldrb	r2, [r3, #0]
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	3301      	adds	r3, #1
 801768a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801768c:	68f8      	ldr	r0, [r7, #12]
 801768e:	f7ff fa41 	bl	8016b14 <SWAPBYTE>
 8017692:	4603      	mov	r3, r0
 8017694:	461a      	mov	r2, r3
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	3301      	adds	r3, #1
 801769e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	3301      	adds	r3, #1
 80176a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80176a6:	68f8      	ldr	r0, [r7, #12]
 80176a8:	f7ff fa34 	bl	8016b14 <SWAPBYTE>
 80176ac:	4603      	mov	r3, r0
 80176ae:	461a      	mov	r2, r3
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	3301      	adds	r3, #1
 80176b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	3301      	adds	r3, #1
 80176be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80176c0:	68f8      	ldr	r0, [r7, #12]
 80176c2:	f7ff fa27 	bl	8016b14 <SWAPBYTE>
 80176c6:	4603      	mov	r3, r0
 80176c8:	461a      	mov	r2, r3
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	80da      	strh	r2, [r3, #6]
}
 80176ce:	bf00      	nop
 80176d0:	3710      	adds	r7, #16
 80176d2:	46bd      	mov	sp, r7
 80176d4:	bd80      	pop	{r7, pc}

080176d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80176d6:	b580      	push	{r7, lr}
 80176d8:	b082      	sub	sp, #8
 80176da:	af00      	add	r7, sp, #0
 80176dc:	6078      	str	r0, [r7, #4]
 80176de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80176e0:	2180      	movs	r1, #128	; 0x80
 80176e2:	6878      	ldr	r0, [r7, #4]
 80176e4:	f003 fcbe 	bl	801b064 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80176e8:	2100      	movs	r1, #0
 80176ea:	6878      	ldr	r0, [r7, #4]
 80176ec:	f003 fcba 	bl	801b064 <USBD_LL_StallEP>
}
 80176f0:	bf00      	nop
 80176f2:	3708      	adds	r7, #8
 80176f4:	46bd      	mov	sp, r7
 80176f6:	bd80      	pop	{r7, pc}

080176f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b086      	sub	sp, #24
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	60f8      	str	r0, [r7, #12]
 8017700:	60b9      	str	r1, [r7, #8]
 8017702:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017704:	2300      	movs	r3, #0
 8017706:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d036      	beq.n	801777c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017712:	6938      	ldr	r0, [r7, #16]
 8017714:	f000 f836 	bl	8017784 <USBD_GetLen>
 8017718:	4603      	mov	r3, r0
 801771a:	3301      	adds	r3, #1
 801771c:	b29b      	uxth	r3, r3
 801771e:	005b      	lsls	r3, r3, #1
 8017720:	b29a      	uxth	r2, r3
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017726:	7dfb      	ldrb	r3, [r7, #23]
 8017728:	68ba      	ldr	r2, [r7, #8]
 801772a:	4413      	add	r3, r2
 801772c:	687a      	ldr	r2, [r7, #4]
 801772e:	7812      	ldrb	r2, [r2, #0]
 8017730:	701a      	strb	r2, [r3, #0]
  idx++;
 8017732:	7dfb      	ldrb	r3, [r7, #23]
 8017734:	3301      	adds	r3, #1
 8017736:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017738:	7dfb      	ldrb	r3, [r7, #23]
 801773a:	68ba      	ldr	r2, [r7, #8]
 801773c:	4413      	add	r3, r2
 801773e:	2203      	movs	r2, #3
 8017740:	701a      	strb	r2, [r3, #0]
  idx++;
 8017742:	7dfb      	ldrb	r3, [r7, #23]
 8017744:	3301      	adds	r3, #1
 8017746:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017748:	e013      	b.n	8017772 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801774a:	7dfb      	ldrb	r3, [r7, #23]
 801774c:	68ba      	ldr	r2, [r7, #8]
 801774e:	4413      	add	r3, r2
 8017750:	693a      	ldr	r2, [r7, #16]
 8017752:	7812      	ldrb	r2, [r2, #0]
 8017754:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017756:	693b      	ldr	r3, [r7, #16]
 8017758:	3301      	adds	r3, #1
 801775a:	613b      	str	r3, [r7, #16]
    idx++;
 801775c:	7dfb      	ldrb	r3, [r7, #23]
 801775e:	3301      	adds	r3, #1
 8017760:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017762:	7dfb      	ldrb	r3, [r7, #23]
 8017764:	68ba      	ldr	r2, [r7, #8]
 8017766:	4413      	add	r3, r2
 8017768:	2200      	movs	r2, #0
 801776a:	701a      	strb	r2, [r3, #0]
    idx++;
 801776c:	7dfb      	ldrb	r3, [r7, #23]
 801776e:	3301      	adds	r3, #1
 8017770:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017772:	693b      	ldr	r3, [r7, #16]
 8017774:	781b      	ldrb	r3, [r3, #0]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d1e7      	bne.n	801774a <USBD_GetString+0x52>
 801777a:	e000      	b.n	801777e <USBD_GetString+0x86>
    return;
 801777c:	bf00      	nop
  }
}
 801777e:	3718      	adds	r7, #24
 8017780:	46bd      	mov	sp, r7
 8017782:	bd80      	pop	{r7, pc}

08017784 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017784:	b480      	push	{r7}
 8017786:	b085      	sub	sp, #20
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801778c:	2300      	movs	r3, #0
 801778e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017794:	e005      	b.n	80177a2 <USBD_GetLen+0x1e>
  {
    len++;
 8017796:	7bfb      	ldrb	r3, [r7, #15]
 8017798:	3301      	adds	r3, #1
 801779a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801779c:	68bb      	ldr	r3, [r7, #8]
 801779e:	3301      	adds	r3, #1
 80177a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80177a2:	68bb      	ldr	r3, [r7, #8]
 80177a4:	781b      	ldrb	r3, [r3, #0]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d1f5      	bne.n	8017796 <USBD_GetLen+0x12>
  }

  return len;
 80177aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80177ac:	4618      	mov	r0, r3
 80177ae:	3714      	adds	r7, #20
 80177b0:	46bd      	mov	sp, r7
 80177b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b6:	4770      	bx	lr

080177b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b084      	sub	sp, #16
 80177bc:	af00      	add	r7, sp, #0
 80177be:	60f8      	str	r0, [r7, #12]
 80177c0:	60b9      	str	r1, [r7, #8]
 80177c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	2202      	movs	r2, #2
 80177c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	687a      	ldr	r2, [r7, #4]
 80177d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	687a      	ldr	r2, [r7, #4]
 80177d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	68ba      	ldr	r2, [r7, #8]
 80177dc:	2100      	movs	r1, #0
 80177de:	68f8      	ldr	r0, [r7, #12]
 80177e0:	f003 fcc9 	bl	801b176 <USBD_LL_Transmit>

  return USBD_OK;
 80177e4:	2300      	movs	r3, #0
}
 80177e6:	4618      	mov	r0, r3
 80177e8:	3710      	adds	r7, #16
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd80      	pop	{r7, pc}

080177ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80177ee:	b580      	push	{r7, lr}
 80177f0:	b084      	sub	sp, #16
 80177f2:	af00      	add	r7, sp, #0
 80177f4:	60f8      	str	r0, [r7, #12]
 80177f6:	60b9      	str	r1, [r7, #8]
 80177f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	68ba      	ldr	r2, [r7, #8]
 80177fe:	2100      	movs	r1, #0
 8017800:	68f8      	ldr	r0, [r7, #12]
 8017802:	f003 fcb8 	bl	801b176 <USBD_LL_Transmit>

  return USBD_OK;
 8017806:	2300      	movs	r3, #0
}
 8017808:	4618      	mov	r0, r3
 801780a:	3710      	adds	r7, #16
 801780c:	46bd      	mov	sp, r7
 801780e:	bd80      	pop	{r7, pc}

08017810 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017810:	b580      	push	{r7, lr}
 8017812:	b084      	sub	sp, #16
 8017814:	af00      	add	r7, sp, #0
 8017816:	60f8      	str	r0, [r7, #12]
 8017818:	60b9      	str	r1, [r7, #8]
 801781a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	2203      	movs	r2, #3
 8017820:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	687a      	ldr	r2, [r7, #4]
 8017828:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	687a      	ldr	r2, [r7, #4]
 8017830:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	68ba      	ldr	r2, [r7, #8]
 8017838:	2100      	movs	r1, #0
 801783a:	68f8      	ldr	r0, [r7, #12]
 801783c:	f003 fcbc 	bl	801b1b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017840:	2300      	movs	r3, #0
}
 8017842:	4618      	mov	r0, r3
 8017844:	3710      	adds	r7, #16
 8017846:	46bd      	mov	sp, r7
 8017848:	bd80      	pop	{r7, pc}

0801784a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801784a:	b580      	push	{r7, lr}
 801784c:	b084      	sub	sp, #16
 801784e:	af00      	add	r7, sp, #0
 8017850:	60f8      	str	r0, [r7, #12]
 8017852:	60b9      	str	r1, [r7, #8]
 8017854:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	68ba      	ldr	r2, [r7, #8]
 801785a:	2100      	movs	r1, #0
 801785c:	68f8      	ldr	r0, [r7, #12]
 801785e:	f003 fcab 	bl	801b1b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017862:	2300      	movs	r3, #0
}
 8017864:	4618      	mov	r0, r3
 8017866:	3710      	adds	r7, #16
 8017868:	46bd      	mov	sp, r7
 801786a:	bd80      	pop	{r7, pc}

0801786c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b082      	sub	sp, #8
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	2204      	movs	r2, #4
 8017878:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801787c:	2300      	movs	r3, #0
 801787e:	2200      	movs	r2, #0
 8017880:	2100      	movs	r1, #0
 8017882:	6878      	ldr	r0, [r7, #4]
 8017884:	f003 fc77 	bl	801b176 <USBD_LL_Transmit>

  return USBD_OK;
 8017888:	2300      	movs	r3, #0
}
 801788a:	4618      	mov	r0, r3
 801788c:	3708      	adds	r7, #8
 801788e:	46bd      	mov	sp, r7
 8017890:	bd80      	pop	{r7, pc}

08017892 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017892:	b580      	push	{r7, lr}
 8017894:	b082      	sub	sp, #8
 8017896:	af00      	add	r7, sp, #0
 8017898:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	2205      	movs	r2, #5
 801789e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80178a2:	2300      	movs	r3, #0
 80178a4:	2200      	movs	r2, #0
 80178a6:	2100      	movs	r1, #0
 80178a8:	6878      	ldr	r0, [r7, #4]
 80178aa:	f003 fc85 	bl	801b1b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80178ae:	2300      	movs	r3, #0
}
 80178b0:	4618      	mov	r0, r3
 80178b2:	3708      	adds	r7, #8
 80178b4:	46bd      	mov	sp, r7
 80178b6:	bd80      	pop	{r7, pc}

080178b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80178b8:	b580      	push	{r7, lr}
 80178ba:	b084      	sub	sp, #16
 80178bc:	af00      	add	r7, sp, #0
 80178be:	4603      	mov	r3, r0
 80178c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80178c2:	79fb      	ldrb	r3, [r7, #7]
 80178c4:	4a08      	ldr	r2, [pc, #32]	; (80178e8 <disk_status+0x30>)
 80178c6:	009b      	lsls	r3, r3, #2
 80178c8:	4413      	add	r3, r2
 80178ca:	685b      	ldr	r3, [r3, #4]
 80178cc:	685b      	ldr	r3, [r3, #4]
 80178ce:	79fa      	ldrb	r2, [r7, #7]
 80178d0:	4905      	ldr	r1, [pc, #20]	; (80178e8 <disk_status+0x30>)
 80178d2:	440a      	add	r2, r1
 80178d4:	7a12      	ldrb	r2, [r2, #8]
 80178d6:	4610      	mov	r0, r2
 80178d8:	4798      	blx	r3
 80178da:	4603      	mov	r3, r0
 80178dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80178de:	7bfb      	ldrb	r3, [r7, #15]
}
 80178e0:	4618      	mov	r0, r3
 80178e2:	3710      	adds	r7, #16
 80178e4:	46bd      	mov	sp, r7
 80178e6:	bd80      	pop	{r7, pc}
 80178e8:	2400409c 	.word	0x2400409c

080178ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b084      	sub	sp, #16
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	4603      	mov	r3, r0
 80178f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80178f6:	2300      	movs	r3, #0
 80178f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80178fa:	79fb      	ldrb	r3, [r7, #7]
 80178fc:	4a0d      	ldr	r2, [pc, #52]	; (8017934 <disk_initialize+0x48>)
 80178fe:	5cd3      	ldrb	r3, [r2, r3]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d111      	bne.n	8017928 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8017904:	79fb      	ldrb	r3, [r7, #7]
 8017906:	4a0b      	ldr	r2, [pc, #44]	; (8017934 <disk_initialize+0x48>)
 8017908:	2101      	movs	r1, #1
 801790a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801790c:	79fb      	ldrb	r3, [r7, #7]
 801790e:	4a09      	ldr	r2, [pc, #36]	; (8017934 <disk_initialize+0x48>)
 8017910:	009b      	lsls	r3, r3, #2
 8017912:	4413      	add	r3, r2
 8017914:	685b      	ldr	r3, [r3, #4]
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	79fa      	ldrb	r2, [r7, #7]
 801791a:	4906      	ldr	r1, [pc, #24]	; (8017934 <disk_initialize+0x48>)
 801791c:	440a      	add	r2, r1
 801791e:	7a12      	ldrb	r2, [r2, #8]
 8017920:	4610      	mov	r0, r2
 8017922:	4798      	blx	r3
 8017924:	4603      	mov	r3, r0
 8017926:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8017928:	7bfb      	ldrb	r3, [r7, #15]
}
 801792a:	4618      	mov	r0, r3
 801792c:	3710      	adds	r7, #16
 801792e:	46bd      	mov	sp, r7
 8017930:	bd80      	pop	{r7, pc}
 8017932:	bf00      	nop
 8017934:	2400409c 	.word	0x2400409c

08017938 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8017938:	b590      	push	{r4, r7, lr}
 801793a:	b087      	sub	sp, #28
 801793c:	af00      	add	r7, sp, #0
 801793e:	60b9      	str	r1, [r7, #8]
 8017940:	607a      	str	r2, [r7, #4]
 8017942:	603b      	str	r3, [r7, #0]
 8017944:	4603      	mov	r3, r0
 8017946:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8017948:	7bfb      	ldrb	r3, [r7, #15]
 801794a:	4a0a      	ldr	r2, [pc, #40]	; (8017974 <disk_read+0x3c>)
 801794c:	009b      	lsls	r3, r3, #2
 801794e:	4413      	add	r3, r2
 8017950:	685b      	ldr	r3, [r3, #4]
 8017952:	689c      	ldr	r4, [r3, #8]
 8017954:	7bfb      	ldrb	r3, [r7, #15]
 8017956:	4a07      	ldr	r2, [pc, #28]	; (8017974 <disk_read+0x3c>)
 8017958:	4413      	add	r3, r2
 801795a:	7a18      	ldrb	r0, [r3, #8]
 801795c:	683b      	ldr	r3, [r7, #0]
 801795e:	687a      	ldr	r2, [r7, #4]
 8017960:	68b9      	ldr	r1, [r7, #8]
 8017962:	47a0      	blx	r4
 8017964:	4603      	mov	r3, r0
 8017966:	75fb      	strb	r3, [r7, #23]
  return res;
 8017968:	7dfb      	ldrb	r3, [r7, #23]
}
 801796a:	4618      	mov	r0, r3
 801796c:	371c      	adds	r7, #28
 801796e:	46bd      	mov	sp, r7
 8017970:	bd90      	pop	{r4, r7, pc}
 8017972:	bf00      	nop
 8017974:	2400409c 	.word	0x2400409c

08017978 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8017978:	b590      	push	{r4, r7, lr}
 801797a:	b087      	sub	sp, #28
 801797c:	af00      	add	r7, sp, #0
 801797e:	60b9      	str	r1, [r7, #8]
 8017980:	607a      	str	r2, [r7, #4]
 8017982:	603b      	str	r3, [r7, #0]
 8017984:	4603      	mov	r3, r0
 8017986:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8017988:	7bfb      	ldrb	r3, [r7, #15]
 801798a:	4a0a      	ldr	r2, [pc, #40]	; (80179b4 <disk_write+0x3c>)
 801798c:	009b      	lsls	r3, r3, #2
 801798e:	4413      	add	r3, r2
 8017990:	685b      	ldr	r3, [r3, #4]
 8017992:	68dc      	ldr	r4, [r3, #12]
 8017994:	7bfb      	ldrb	r3, [r7, #15]
 8017996:	4a07      	ldr	r2, [pc, #28]	; (80179b4 <disk_write+0x3c>)
 8017998:	4413      	add	r3, r2
 801799a:	7a18      	ldrb	r0, [r3, #8]
 801799c:	683b      	ldr	r3, [r7, #0]
 801799e:	687a      	ldr	r2, [r7, #4]
 80179a0:	68b9      	ldr	r1, [r7, #8]
 80179a2:	47a0      	blx	r4
 80179a4:	4603      	mov	r3, r0
 80179a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80179a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80179aa:	4618      	mov	r0, r3
 80179ac:	371c      	adds	r7, #28
 80179ae:	46bd      	mov	sp, r7
 80179b0:	bd90      	pop	{r4, r7, pc}
 80179b2:	bf00      	nop
 80179b4:	2400409c 	.word	0x2400409c

080179b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80179b8:	b580      	push	{r7, lr}
 80179ba:	b084      	sub	sp, #16
 80179bc:	af00      	add	r7, sp, #0
 80179be:	4603      	mov	r3, r0
 80179c0:	603a      	str	r2, [r7, #0]
 80179c2:	71fb      	strb	r3, [r7, #7]
 80179c4:	460b      	mov	r3, r1
 80179c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80179c8:	79fb      	ldrb	r3, [r7, #7]
 80179ca:	4a09      	ldr	r2, [pc, #36]	; (80179f0 <disk_ioctl+0x38>)
 80179cc:	009b      	lsls	r3, r3, #2
 80179ce:	4413      	add	r3, r2
 80179d0:	685b      	ldr	r3, [r3, #4]
 80179d2:	691b      	ldr	r3, [r3, #16]
 80179d4:	79fa      	ldrb	r2, [r7, #7]
 80179d6:	4906      	ldr	r1, [pc, #24]	; (80179f0 <disk_ioctl+0x38>)
 80179d8:	440a      	add	r2, r1
 80179da:	7a10      	ldrb	r0, [r2, #8]
 80179dc:	79b9      	ldrb	r1, [r7, #6]
 80179de:	683a      	ldr	r2, [r7, #0]
 80179e0:	4798      	blx	r3
 80179e2:	4603      	mov	r3, r0
 80179e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80179e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80179e8:	4618      	mov	r0, r3
 80179ea:	3710      	adds	r7, #16
 80179ec:	46bd      	mov	sp, r7
 80179ee:	bd80      	pop	{r7, pc}
 80179f0:	2400409c 	.word	0x2400409c

080179f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80179f4:	b480      	push	{r7}
 80179f6:	b085      	sub	sp, #20
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	3301      	adds	r3, #1
 8017a00:	781b      	ldrb	r3, [r3, #0]
 8017a02:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8017a04:	89fb      	ldrh	r3, [r7, #14]
 8017a06:	021b      	lsls	r3, r3, #8
 8017a08:	b21a      	sxth	r2, r3
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	781b      	ldrb	r3, [r3, #0]
 8017a0e:	b21b      	sxth	r3, r3
 8017a10:	4313      	orrs	r3, r2
 8017a12:	b21b      	sxth	r3, r3
 8017a14:	81fb      	strh	r3, [r7, #14]
	return rv;
 8017a16:	89fb      	ldrh	r3, [r7, #14]
}
 8017a18:	4618      	mov	r0, r3
 8017a1a:	3714      	adds	r7, #20
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a22:	4770      	bx	lr

08017a24 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8017a24:	b480      	push	{r7}
 8017a26:	b085      	sub	sp, #20
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	3303      	adds	r3, #3
 8017a30:	781b      	ldrb	r3, [r3, #0]
 8017a32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	021b      	lsls	r3, r3, #8
 8017a38:	687a      	ldr	r2, [r7, #4]
 8017a3a:	3202      	adds	r2, #2
 8017a3c:	7812      	ldrb	r2, [r2, #0]
 8017a3e:	4313      	orrs	r3, r2
 8017a40:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	021b      	lsls	r3, r3, #8
 8017a46:	687a      	ldr	r2, [r7, #4]
 8017a48:	3201      	adds	r2, #1
 8017a4a:	7812      	ldrb	r2, [r2, #0]
 8017a4c:	4313      	orrs	r3, r2
 8017a4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	021b      	lsls	r3, r3, #8
 8017a54:	687a      	ldr	r2, [r7, #4]
 8017a56:	7812      	ldrb	r2, [r2, #0]
 8017a58:	4313      	orrs	r3, r2
 8017a5a:	60fb      	str	r3, [r7, #12]
	return rv;
 8017a5c:	68fb      	ldr	r3, [r7, #12]
}
 8017a5e:	4618      	mov	r0, r3
 8017a60:	3714      	adds	r7, #20
 8017a62:	46bd      	mov	sp, r7
 8017a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a68:	4770      	bx	lr

08017a6a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8017a6a:	b480      	push	{r7}
 8017a6c:	b083      	sub	sp, #12
 8017a6e:	af00      	add	r7, sp, #0
 8017a70:	6078      	str	r0, [r7, #4]
 8017a72:	460b      	mov	r3, r1
 8017a74:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	1c5a      	adds	r2, r3, #1
 8017a7a:	607a      	str	r2, [r7, #4]
 8017a7c:	887a      	ldrh	r2, [r7, #2]
 8017a7e:	b2d2      	uxtb	r2, r2
 8017a80:	701a      	strb	r2, [r3, #0]
 8017a82:	887b      	ldrh	r3, [r7, #2]
 8017a84:	0a1b      	lsrs	r3, r3, #8
 8017a86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	1c5a      	adds	r2, r3, #1
 8017a8c:	607a      	str	r2, [r7, #4]
 8017a8e:	887a      	ldrh	r2, [r7, #2]
 8017a90:	b2d2      	uxtb	r2, r2
 8017a92:	701a      	strb	r2, [r3, #0]
}
 8017a94:	bf00      	nop
 8017a96:	370c      	adds	r7, #12
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a9e:	4770      	bx	lr

08017aa0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8017aa0:	b480      	push	{r7}
 8017aa2:	b083      	sub	sp, #12
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
 8017aa8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	1c5a      	adds	r2, r3, #1
 8017aae:	607a      	str	r2, [r7, #4]
 8017ab0:	683a      	ldr	r2, [r7, #0]
 8017ab2:	b2d2      	uxtb	r2, r2
 8017ab4:	701a      	strb	r2, [r3, #0]
 8017ab6:	683b      	ldr	r3, [r7, #0]
 8017ab8:	0a1b      	lsrs	r3, r3, #8
 8017aba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	1c5a      	adds	r2, r3, #1
 8017ac0:	607a      	str	r2, [r7, #4]
 8017ac2:	683a      	ldr	r2, [r7, #0]
 8017ac4:	b2d2      	uxtb	r2, r2
 8017ac6:	701a      	strb	r2, [r3, #0]
 8017ac8:	683b      	ldr	r3, [r7, #0]
 8017aca:	0a1b      	lsrs	r3, r3, #8
 8017acc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	1c5a      	adds	r2, r3, #1
 8017ad2:	607a      	str	r2, [r7, #4]
 8017ad4:	683a      	ldr	r2, [r7, #0]
 8017ad6:	b2d2      	uxtb	r2, r2
 8017ad8:	701a      	strb	r2, [r3, #0]
 8017ada:	683b      	ldr	r3, [r7, #0]
 8017adc:	0a1b      	lsrs	r3, r3, #8
 8017ade:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	1c5a      	adds	r2, r3, #1
 8017ae4:	607a      	str	r2, [r7, #4]
 8017ae6:	683a      	ldr	r2, [r7, #0]
 8017ae8:	b2d2      	uxtb	r2, r2
 8017aea:	701a      	strb	r2, [r3, #0]
}
 8017aec:	bf00      	nop
 8017aee:	370c      	adds	r7, #12
 8017af0:	46bd      	mov	sp, r7
 8017af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af6:	4770      	bx	lr

08017af8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017af8:	b480      	push	{r7}
 8017afa:	b087      	sub	sp, #28
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	60f8      	str	r0, [r7, #12]
 8017b00:	60b9      	str	r1, [r7, #8]
 8017b02:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8017b08:	68bb      	ldr	r3, [r7, #8]
 8017b0a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d00d      	beq.n	8017b2e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8017b12:	693a      	ldr	r2, [r7, #16]
 8017b14:	1c53      	adds	r3, r2, #1
 8017b16:	613b      	str	r3, [r7, #16]
 8017b18:	697b      	ldr	r3, [r7, #20]
 8017b1a:	1c59      	adds	r1, r3, #1
 8017b1c:	6179      	str	r1, [r7, #20]
 8017b1e:	7812      	ldrb	r2, [r2, #0]
 8017b20:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	3b01      	subs	r3, #1
 8017b26:	607b      	str	r3, [r7, #4]
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d1f1      	bne.n	8017b12 <mem_cpy+0x1a>
	}
}
 8017b2e:	bf00      	nop
 8017b30:	371c      	adds	r7, #28
 8017b32:	46bd      	mov	sp, r7
 8017b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b38:	4770      	bx	lr

08017b3a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8017b3a:	b480      	push	{r7}
 8017b3c:	b087      	sub	sp, #28
 8017b3e:	af00      	add	r7, sp, #0
 8017b40:	60f8      	str	r0, [r7, #12]
 8017b42:	60b9      	str	r1, [r7, #8]
 8017b44:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8017b4a:	697b      	ldr	r3, [r7, #20]
 8017b4c:	1c5a      	adds	r2, r3, #1
 8017b4e:	617a      	str	r2, [r7, #20]
 8017b50:	68ba      	ldr	r2, [r7, #8]
 8017b52:	b2d2      	uxtb	r2, r2
 8017b54:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	3b01      	subs	r3, #1
 8017b5a:	607b      	str	r3, [r7, #4]
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d1f3      	bne.n	8017b4a <mem_set+0x10>
}
 8017b62:	bf00      	nop
 8017b64:	bf00      	nop
 8017b66:	371c      	adds	r7, #28
 8017b68:	46bd      	mov	sp, r7
 8017b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b6e:	4770      	bx	lr

08017b70 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8017b70:	b480      	push	{r7}
 8017b72:	b089      	sub	sp, #36	; 0x24
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	60f8      	str	r0, [r7, #12]
 8017b78:	60b9      	str	r1, [r7, #8]
 8017b7a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	61fb      	str	r3, [r7, #28]
 8017b80:	68bb      	ldr	r3, [r7, #8]
 8017b82:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8017b84:	2300      	movs	r3, #0
 8017b86:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8017b88:	69fb      	ldr	r3, [r7, #28]
 8017b8a:	1c5a      	adds	r2, r3, #1
 8017b8c:	61fa      	str	r2, [r7, #28]
 8017b8e:	781b      	ldrb	r3, [r3, #0]
 8017b90:	4619      	mov	r1, r3
 8017b92:	69bb      	ldr	r3, [r7, #24]
 8017b94:	1c5a      	adds	r2, r3, #1
 8017b96:	61ba      	str	r2, [r7, #24]
 8017b98:	781b      	ldrb	r3, [r3, #0]
 8017b9a:	1acb      	subs	r3, r1, r3
 8017b9c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	3b01      	subs	r3, #1
 8017ba2:	607b      	str	r3, [r7, #4]
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d002      	beq.n	8017bb0 <mem_cmp+0x40>
 8017baa:	697b      	ldr	r3, [r7, #20]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d0eb      	beq.n	8017b88 <mem_cmp+0x18>

	return r;
 8017bb0:	697b      	ldr	r3, [r7, #20]
}
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	3724      	adds	r7, #36	; 0x24
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bbc:	4770      	bx	lr

08017bbe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8017bbe:	b480      	push	{r7}
 8017bc0:	b083      	sub	sp, #12
 8017bc2:	af00      	add	r7, sp, #0
 8017bc4:	6078      	str	r0, [r7, #4]
 8017bc6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8017bc8:	e002      	b.n	8017bd0 <chk_chr+0x12>
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	3301      	adds	r3, #1
 8017bce:	607b      	str	r3, [r7, #4]
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	781b      	ldrb	r3, [r3, #0]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d005      	beq.n	8017be4 <chk_chr+0x26>
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	781b      	ldrb	r3, [r3, #0]
 8017bdc:	461a      	mov	r2, r3
 8017bde:	683b      	ldr	r3, [r7, #0]
 8017be0:	4293      	cmp	r3, r2
 8017be2:	d1f2      	bne.n	8017bca <chk_chr+0xc>
	return *str;
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	781b      	ldrb	r3, [r3, #0]
}
 8017be8:	4618      	mov	r0, r3
 8017bea:	370c      	adds	r7, #12
 8017bec:	46bd      	mov	sp, r7
 8017bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf2:	4770      	bx	lr

08017bf4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017bf4:	b480      	push	{r7}
 8017bf6:	b085      	sub	sp, #20
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
 8017bfc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017bfe:	2300      	movs	r3, #0
 8017c00:	60bb      	str	r3, [r7, #8]
 8017c02:	68bb      	ldr	r3, [r7, #8]
 8017c04:	60fb      	str	r3, [r7, #12]
 8017c06:	e029      	b.n	8017c5c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8017c08:	4a27      	ldr	r2, [pc, #156]	; (8017ca8 <chk_lock+0xb4>)
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	011b      	lsls	r3, r3, #4
 8017c0e:	4413      	add	r3, r2
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d01d      	beq.n	8017c52 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017c16:	4a24      	ldr	r2, [pc, #144]	; (8017ca8 <chk_lock+0xb4>)
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	011b      	lsls	r3, r3, #4
 8017c1c:	4413      	add	r3, r2
 8017c1e:	681a      	ldr	r2, [r3, #0]
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	429a      	cmp	r2, r3
 8017c26:	d116      	bne.n	8017c56 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8017c28:	4a1f      	ldr	r2, [pc, #124]	; (8017ca8 <chk_lock+0xb4>)
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	011b      	lsls	r3, r3, #4
 8017c2e:	4413      	add	r3, r2
 8017c30:	3304      	adds	r3, #4
 8017c32:	681a      	ldr	r2, [r3, #0]
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017c38:	429a      	cmp	r2, r3
 8017c3a:	d10c      	bne.n	8017c56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017c3c:	4a1a      	ldr	r2, [pc, #104]	; (8017ca8 <chk_lock+0xb4>)
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	011b      	lsls	r3, r3, #4
 8017c42:	4413      	add	r3, r2
 8017c44:	3308      	adds	r3, #8
 8017c46:	681a      	ldr	r2, [r3, #0]
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8017c4c:	429a      	cmp	r2, r3
 8017c4e:	d102      	bne.n	8017c56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017c50:	e007      	b.n	8017c62 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8017c52:	2301      	movs	r3, #1
 8017c54:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	3301      	adds	r3, #1
 8017c5a:	60fb      	str	r3, [r7, #12]
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	2b01      	cmp	r3, #1
 8017c60:	d9d2      	bls.n	8017c08 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	2b02      	cmp	r3, #2
 8017c66:	d109      	bne.n	8017c7c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017c68:	68bb      	ldr	r3, [r7, #8]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d102      	bne.n	8017c74 <chk_lock+0x80>
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	2b02      	cmp	r3, #2
 8017c72:	d101      	bne.n	8017c78 <chk_lock+0x84>
 8017c74:	2300      	movs	r3, #0
 8017c76:	e010      	b.n	8017c9a <chk_lock+0xa6>
 8017c78:	2312      	movs	r3, #18
 8017c7a:	e00e      	b.n	8017c9a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017c7c:	683b      	ldr	r3, [r7, #0]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d108      	bne.n	8017c94 <chk_lock+0xa0>
 8017c82:	4a09      	ldr	r2, [pc, #36]	; (8017ca8 <chk_lock+0xb4>)
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	011b      	lsls	r3, r3, #4
 8017c88:	4413      	add	r3, r2
 8017c8a:	330c      	adds	r3, #12
 8017c8c:	881b      	ldrh	r3, [r3, #0]
 8017c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017c92:	d101      	bne.n	8017c98 <chk_lock+0xa4>
 8017c94:	2310      	movs	r3, #16
 8017c96:	e000      	b.n	8017c9a <chk_lock+0xa6>
 8017c98:	2300      	movs	r3, #0
}
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	3714      	adds	r7, #20
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca4:	4770      	bx	lr
 8017ca6:	bf00      	nop
 8017ca8:	24003e7c 	.word	0x24003e7c

08017cac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8017cac:	b480      	push	{r7}
 8017cae:	b083      	sub	sp, #12
 8017cb0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	607b      	str	r3, [r7, #4]
 8017cb6:	e002      	b.n	8017cbe <enq_lock+0x12>
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	3301      	adds	r3, #1
 8017cbc:	607b      	str	r3, [r7, #4]
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	2b01      	cmp	r3, #1
 8017cc2:	d806      	bhi.n	8017cd2 <enq_lock+0x26>
 8017cc4:	4a09      	ldr	r2, [pc, #36]	; (8017cec <enq_lock+0x40>)
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	011b      	lsls	r3, r3, #4
 8017cca:	4413      	add	r3, r2
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d1f2      	bne.n	8017cb8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	2b02      	cmp	r3, #2
 8017cd6:	bf14      	ite	ne
 8017cd8:	2301      	movne	r3, #1
 8017cda:	2300      	moveq	r3, #0
 8017cdc:	b2db      	uxtb	r3, r3
}
 8017cde:	4618      	mov	r0, r3
 8017ce0:	370c      	adds	r7, #12
 8017ce2:	46bd      	mov	sp, r7
 8017ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce8:	4770      	bx	lr
 8017cea:	bf00      	nop
 8017cec:	24003e7c 	.word	0x24003e7c

08017cf0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017cf0:	b480      	push	{r7}
 8017cf2:	b085      	sub	sp, #20
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]
 8017cf8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	60fb      	str	r3, [r7, #12]
 8017cfe:	e01f      	b.n	8017d40 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017d00:	4a41      	ldr	r2, [pc, #260]	; (8017e08 <inc_lock+0x118>)
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	011b      	lsls	r3, r3, #4
 8017d06:	4413      	add	r3, r2
 8017d08:	681a      	ldr	r2, [r3, #0]
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	429a      	cmp	r2, r3
 8017d10:	d113      	bne.n	8017d3a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8017d12:	4a3d      	ldr	r2, [pc, #244]	; (8017e08 <inc_lock+0x118>)
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	011b      	lsls	r3, r3, #4
 8017d18:	4413      	add	r3, r2
 8017d1a:	3304      	adds	r3, #4
 8017d1c:	681a      	ldr	r2, [r3, #0]
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8017d22:	429a      	cmp	r2, r3
 8017d24:	d109      	bne.n	8017d3a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8017d26:	4a38      	ldr	r2, [pc, #224]	; (8017e08 <inc_lock+0x118>)
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	011b      	lsls	r3, r3, #4
 8017d2c:	4413      	add	r3, r2
 8017d2e:	3308      	adds	r3, #8
 8017d30:	681a      	ldr	r2, [r3, #0]
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8017d36:	429a      	cmp	r2, r3
 8017d38:	d006      	beq.n	8017d48 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	3301      	adds	r3, #1
 8017d3e:	60fb      	str	r3, [r7, #12]
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	2b01      	cmp	r3, #1
 8017d44:	d9dc      	bls.n	8017d00 <inc_lock+0x10>
 8017d46:	e000      	b.n	8017d4a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8017d48:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	2b02      	cmp	r3, #2
 8017d4e:	d132      	bne.n	8017db6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017d50:	2300      	movs	r3, #0
 8017d52:	60fb      	str	r3, [r7, #12]
 8017d54:	e002      	b.n	8017d5c <inc_lock+0x6c>
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	3301      	adds	r3, #1
 8017d5a:	60fb      	str	r3, [r7, #12]
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	2b01      	cmp	r3, #1
 8017d60:	d806      	bhi.n	8017d70 <inc_lock+0x80>
 8017d62:	4a29      	ldr	r2, [pc, #164]	; (8017e08 <inc_lock+0x118>)
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	011b      	lsls	r3, r3, #4
 8017d68:	4413      	add	r3, r2
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d1f2      	bne.n	8017d56 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	2b02      	cmp	r3, #2
 8017d74:	d101      	bne.n	8017d7a <inc_lock+0x8a>
 8017d76:	2300      	movs	r3, #0
 8017d78:	e040      	b.n	8017dfc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	681a      	ldr	r2, [r3, #0]
 8017d7e:	4922      	ldr	r1, [pc, #136]	; (8017e08 <inc_lock+0x118>)
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	011b      	lsls	r3, r3, #4
 8017d84:	440b      	add	r3, r1
 8017d86:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	689a      	ldr	r2, [r3, #8]
 8017d8c:	491e      	ldr	r1, [pc, #120]	; (8017e08 <inc_lock+0x118>)
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	011b      	lsls	r3, r3, #4
 8017d92:	440b      	add	r3, r1
 8017d94:	3304      	adds	r3, #4
 8017d96:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	695a      	ldr	r2, [r3, #20]
 8017d9c:	491a      	ldr	r1, [pc, #104]	; (8017e08 <inc_lock+0x118>)
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	011b      	lsls	r3, r3, #4
 8017da2:	440b      	add	r3, r1
 8017da4:	3308      	adds	r3, #8
 8017da6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017da8:	4a17      	ldr	r2, [pc, #92]	; (8017e08 <inc_lock+0x118>)
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	011b      	lsls	r3, r3, #4
 8017dae:	4413      	add	r3, r2
 8017db0:	330c      	adds	r3, #12
 8017db2:	2200      	movs	r2, #0
 8017db4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017db6:	683b      	ldr	r3, [r7, #0]
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d009      	beq.n	8017dd0 <inc_lock+0xe0>
 8017dbc:	4a12      	ldr	r2, [pc, #72]	; (8017e08 <inc_lock+0x118>)
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	011b      	lsls	r3, r3, #4
 8017dc2:	4413      	add	r3, r2
 8017dc4:	330c      	adds	r3, #12
 8017dc6:	881b      	ldrh	r3, [r3, #0]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d001      	beq.n	8017dd0 <inc_lock+0xe0>
 8017dcc:	2300      	movs	r3, #0
 8017dce:	e015      	b.n	8017dfc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017dd0:	683b      	ldr	r3, [r7, #0]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d108      	bne.n	8017de8 <inc_lock+0xf8>
 8017dd6:	4a0c      	ldr	r2, [pc, #48]	; (8017e08 <inc_lock+0x118>)
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	011b      	lsls	r3, r3, #4
 8017ddc:	4413      	add	r3, r2
 8017dde:	330c      	adds	r3, #12
 8017de0:	881b      	ldrh	r3, [r3, #0]
 8017de2:	3301      	adds	r3, #1
 8017de4:	b29a      	uxth	r2, r3
 8017de6:	e001      	b.n	8017dec <inc_lock+0xfc>
 8017de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017dec:	4906      	ldr	r1, [pc, #24]	; (8017e08 <inc_lock+0x118>)
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	011b      	lsls	r3, r3, #4
 8017df2:	440b      	add	r3, r1
 8017df4:	330c      	adds	r3, #12
 8017df6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	3301      	adds	r3, #1
}
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	3714      	adds	r7, #20
 8017e00:	46bd      	mov	sp, r7
 8017e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e06:	4770      	bx	lr
 8017e08:	24003e7c 	.word	0x24003e7c

08017e0c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017e0c:	b480      	push	{r7}
 8017e0e:	b085      	sub	sp, #20
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	3b01      	subs	r3, #1
 8017e18:	607b      	str	r3, [r7, #4]
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	2b01      	cmp	r3, #1
 8017e1e:	d825      	bhi.n	8017e6c <dec_lock+0x60>
		n = Files[i].ctr;
 8017e20:	4a17      	ldr	r2, [pc, #92]	; (8017e80 <dec_lock+0x74>)
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	011b      	lsls	r3, r3, #4
 8017e26:	4413      	add	r3, r2
 8017e28:	330c      	adds	r3, #12
 8017e2a:	881b      	ldrh	r3, [r3, #0]
 8017e2c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017e2e:	89fb      	ldrh	r3, [r7, #14]
 8017e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017e34:	d101      	bne.n	8017e3a <dec_lock+0x2e>
 8017e36:	2300      	movs	r3, #0
 8017e38:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8017e3a:	89fb      	ldrh	r3, [r7, #14]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d002      	beq.n	8017e46 <dec_lock+0x3a>
 8017e40:	89fb      	ldrh	r3, [r7, #14]
 8017e42:	3b01      	subs	r3, #1
 8017e44:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8017e46:	4a0e      	ldr	r2, [pc, #56]	; (8017e80 <dec_lock+0x74>)
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	011b      	lsls	r3, r3, #4
 8017e4c:	4413      	add	r3, r2
 8017e4e:	330c      	adds	r3, #12
 8017e50:	89fa      	ldrh	r2, [r7, #14]
 8017e52:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017e54:	89fb      	ldrh	r3, [r7, #14]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d105      	bne.n	8017e66 <dec_lock+0x5a>
 8017e5a:	4a09      	ldr	r2, [pc, #36]	; (8017e80 <dec_lock+0x74>)
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	011b      	lsls	r3, r3, #4
 8017e60:	4413      	add	r3, r2
 8017e62:	2200      	movs	r2, #0
 8017e64:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8017e66:	2300      	movs	r3, #0
 8017e68:	737b      	strb	r3, [r7, #13]
 8017e6a:	e001      	b.n	8017e70 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017e6c:	2302      	movs	r3, #2
 8017e6e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017e70:	7b7b      	ldrb	r3, [r7, #13]
}
 8017e72:	4618      	mov	r0, r3
 8017e74:	3714      	adds	r7, #20
 8017e76:	46bd      	mov	sp, r7
 8017e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7c:	4770      	bx	lr
 8017e7e:	bf00      	nop
 8017e80:	24003e7c 	.word	0x24003e7c

08017e84 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017e84:	b480      	push	{r7}
 8017e86:	b085      	sub	sp, #20
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	60fb      	str	r3, [r7, #12]
 8017e90:	e010      	b.n	8017eb4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017e92:	4a0d      	ldr	r2, [pc, #52]	; (8017ec8 <clear_lock+0x44>)
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	011b      	lsls	r3, r3, #4
 8017e98:	4413      	add	r3, r2
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	687a      	ldr	r2, [r7, #4]
 8017e9e:	429a      	cmp	r2, r3
 8017ea0:	d105      	bne.n	8017eae <clear_lock+0x2a>
 8017ea2:	4a09      	ldr	r2, [pc, #36]	; (8017ec8 <clear_lock+0x44>)
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	011b      	lsls	r3, r3, #4
 8017ea8:	4413      	add	r3, r2
 8017eaa:	2200      	movs	r2, #0
 8017eac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	3301      	adds	r3, #1
 8017eb2:	60fb      	str	r3, [r7, #12]
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	2b01      	cmp	r3, #1
 8017eb8:	d9eb      	bls.n	8017e92 <clear_lock+0xe>
	}
}
 8017eba:	bf00      	nop
 8017ebc:	bf00      	nop
 8017ebe:	3714      	adds	r7, #20
 8017ec0:	46bd      	mov	sp, r7
 8017ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec6:	4770      	bx	lr
 8017ec8:	24003e7c 	.word	0x24003e7c

08017ecc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b086      	sub	sp, #24
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	78db      	ldrb	r3, [r3, #3]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d034      	beq.n	8017f4a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ee4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	7858      	ldrb	r0, [r3, #1]
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017ef0:	2301      	movs	r3, #1
 8017ef2:	697a      	ldr	r2, [r7, #20]
 8017ef4:	f7ff fd40 	bl	8017978 <disk_write>
 8017ef8:	4603      	mov	r3, r0
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d002      	beq.n	8017f04 <sync_window+0x38>
			res = FR_DISK_ERR;
 8017efe:	2301      	movs	r3, #1
 8017f00:	73fb      	strb	r3, [r7, #15]
 8017f02:	e022      	b.n	8017f4a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	2200      	movs	r2, #0
 8017f08:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f0e:	697a      	ldr	r2, [r7, #20]
 8017f10:	1ad2      	subs	r2, r2, r3
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	6a1b      	ldr	r3, [r3, #32]
 8017f16:	429a      	cmp	r2, r3
 8017f18:	d217      	bcs.n	8017f4a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	789b      	ldrb	r3, [r3, #2]
 8017f1e:	613b      	str	r3, [r7, #16]
 8017f20:	e010      	b.n	8017f44 <sync_window+0x78>
					wsect += fs->fsize;
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	6a1b      	ldr	r3, [r3, #32]
 8017f26:	697a      	ldr	r2, [r7, #20]
 8017f28:	4413      	add	r3, r2
 8017f2a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	7858      	ldrb	r0, [r3, #1]
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017f36:	2301      	movs	r3, #1
 8017f38:	697a      	ldr	r2, [r7, #20]
 8017f3a:	f7ff fd1d 	bl	8017978 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017f3e:	693b      	ldr	r3, [r7, #16]
 8017f40:	3b01      	subs	r3, #1
 8017f42:	613b      	str	r3, [r7, #16]
 8017f44:	693b      	ldr	r3, [r7, #16]
 8017f46:	2b01      	cmp	r3, #1
 8017f48:	d8eb      	bhi.n	8017f22 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	3718      	adds	r7, #24
 8017f50:	46bd      	mov	sp, r7
 8017f52:	bd80      	pop	{r7, pc}

08017f54 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b084      	sub	sp, #16
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
 8017f5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017f5e:	2300      	movs	r3, #0
 8017f60:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f66:	683a      	ldr	r2, [r7, #0]
 8017f68:	429a      	cmp	r2, r3
 8017f6a:	d01b      	beq.n	8017fa4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017f6c:	6878      	ldr	r0, [r7, #4]
 8017f6e:	f7ff ffad 	bl	8017ecc <sync_window>
 8017f72:	4603      	mov	r3, r0
 8017f74:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017f76:	7bfb      	ldrb	r3, [r7, #15]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d113      	bne.n	8017fa4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	7858      	ldrb	r0, [r3, #1]
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017f86:	2301      	movs	r3, #1
 8017f88:	683a      	ldr	r2, [r7, #0]
 8017f8a:	f7ff fcd5 	bl	8017938 <disk_read>
 8017f8e:	4603      	mov	r3, r0
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d004      	beq.n	8017f9e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017f94:	f04f 33ff 	mov.w	r3, #4294967295
 8017f98:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017f9a:	2301      	movs	r3, #1
 8017f9c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	683a      	ldr	r2, [r7, #0]
 8017fa2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8017fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	3710      	adds	r7, #16
 8017faa:	46bd      	mov	sp, r7
 8017fac:	bd80      	pop	{r7, pc}
	...

08017fb0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b084      	sub	sp, #16
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017fb8:	6878      	ldr	r0, [r7, #4]
 8017fba:	f7ff ff87 	bl	8017ecc <sync_window>
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017fc2:	7bfb      	ldrb	r3, [r7, #15]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d159      	bne.n	801807c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	781b      	ldrb	r3, [r3, #0]
 8017fcc:	2b03      	cmp	r3, #3
 8017fce:	d149      	bne.n	8018064 <sync_fs+0xb4>
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	791b      	ldrb	r3, [r3, #4]
 8017fd4:	2b01      	cmp	r3, #1
 8017fd6:	d145      	bne.n	8018064 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	899b      	ldrh	r3, [r3, #12]
 8017fe2:	461a      	mov	r2, r3
 8017fe4:	2100      	movs	r1, #0
 8017fe6:	f7ff fda8 	bl	8017b3a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	3338      	adds	r3, #56	; 0x38
 8017fee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017ff2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7ff fd37 	bl	8017a6a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	3338      	adds	r3, #56	; 0x38
 8018000:	4921      	ldr	r1, [pc, #132]	; (8018088 <sync_fs+0xd8>)
 8018002:	4618      	mov	r0, r3
 8018004:	f7ff fd4c 	bl	8017aa0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	3338      	adds	r3, #56	; 0x38
 801800c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8018010:	491e      	ldr	r1, [pc, #120]	; (801808c <sync_fs+0xdc>)
 8018012:	4618      	mov	r0, r3
 8018014:	f7ff fd44 	bl	8017aa0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	3338      	adds	r3, #56	; 0x38
 801801c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	699b      	ldr	r3, [r3, #24]
 8018024:	4619      	mov	r1, r3
 8018026:	4610      	mov	r0, r2
 8018028:	f7ff fd3a 	bl	8017aa0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	3338      	adds	r3, #56	; 0x38
 8018030:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	695b      	ldr	r3, [r3, #20]
 8018038:	4619      	mov	r1, r3
 801803a:	4610      	mov	r0, r2
 801803c:	f7ff fd30 	bl	8017aa0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018044:	1c5a      	adds	r2, r3, #1
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	7858      	ldrb	r0, [r3, #1]
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018058:	2301      	movs	r3, #1
 801805a:	f7ff fc8d 	bl	8017978 <disk_write>
			fs->fsi_flag = 0;
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	2200      	movs	r2, #0
 8018062:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	785b      	ldrb	r3, [r3, #1]
 8018068:	2200      	movs	r2, #0
 801806a:	2100      	movs	r1, #0
 801806c:	4618      	mov	r0, r3
 801806e:	f7ff fca3 	bl	80179b8 <disk_ioctl>
 8018072:	4603      	mov	r3, r0
 8018074:	2b00      	cmp	r3, #0
 8018076:	d001      	beq.n	801807c <sync_fs+0xcc>
 8018078:	2301      	movs	r3, #1
 801807a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801807c:	7bfb      	ldrb	r3, [r7, #15]
}
 801807e:	4618      	mov	r0, r3
 8018080:	3710      	adds	r7, #16
 8018082:	46bd      	mov	sp, r7
 8018084:	bd80      	pop	{r7, pc}
 8018086:	bf00      	nop
 8018088:	41615252 	.word	0x41615252
 801808c:	61417272 	.word	0x61417272

08018090 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8018090:	b480      	push	{r7}
 8018092:	b083      	sub	sp, #12
 8018094:	af00      	add	r7, sp, #0
 8018096:	6078      	str	r0, [r7, #4]
 8018098:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801809a:	683b      	ldr	r3, [r7, #0]
 801809c:	3b02      	subs	r3, #2
 801809e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	69db      	ldr	r3, [r3, #28]
 80180a4:	3b02      	subs	r3, #2
 80180a6:	683a      	ldr	r2, [r7, #0]
 80180a8:	429a      	cmp	r2, r3
 80180aa:	d301      	bcc.n	80180b0 <clust2sect+0x20>
 80180ac:	2300      	movs	r3, #0
 80180ae:	e008      	b.n	80180c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	895b      	ldrh	r3, [r3, #10]
 80180b4:	461a      	mov	r2, r3
 80180b6:	683b      	ldr	r3, [r7, #0]
 80180b8:	fb03 f202 	mul.w	r2, r3, r2
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180c0:	4413      	add	r3, r2
}
 80180c2:	4618      	mov	r0, r3
 80180c4:	370c      	adds	r7, #12
 80180c6:	46bd      	mov	sp, r7
 80180c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180cc:	4770      	bx	lr

080180ce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80180ce:	b580      	push	{r7, lr}
 80180d0:	b086      	sub	sp, #24
 80180d2:	af00      	add	r7, sp, #0
 80180d4:	6078      	str	r0, [r7, #4]
 80180d6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80180de:	683b      	ldr	r3, [r7, #0]
 80180e0:	2b01      	cmp	r3, #1
 80180e2:	d904      	bls.n	80180ee <get_fat+0x20>
 80180e4:	693b      	ldr	r3, [r7, #16]
 80180e6:	69db      	ldr	r3, [r3, #28]
 80180e8:	683a      	ldr	r2, [r7, #0]
 80180ea:	429a      	cmp	r2, r3
 80180ec:	d302      	bcc.n	80180f4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80180ee:	2301      	movs	r3, #1
 80180f0:	617b      	str	r3, [r7, #20]
 80180f2:	e0bb      	b.n	801826c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80180f4:	f04f 33ff 	mov.w	r3, #4294967295
 80180f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80180fa:	693b      	ldr	r3, [r7, #16]
 80180fc:	781b      	ldrb	r3, [r3, #0]
 80180fe:	2b03      	cmp	r3, #3
 8018100:	f000 8083 	beq.w	801820a <get_fat+0x13c>
 8018104:	2b03      	cmp	r3, #3
 8018106:	f300 80a7 	bgt.w	8018258 <get_fat+0x18a>
 801810a:	2b01      	cmp	r3, #1
 801810c:	d002      	beq.n	8018114 <get_fat+0x46>
 801810e:	2b02      	cmp	r3, #2
 8018110:	d056      	beq.n	80181c0 <get_fat+0xf2>
 8018112:	e0a1      	b.n	8018258 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8018114:	683b      	ldr	r3, [r7, #0]
 8018116:	60fb      	str	r3, [r7, #12]
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	085b      	lsrs	r3, r3, #1
 801811c:	68fa      	ldr	r2, [r7, #12]
 801811e:	4413      	add	r3, r2
 8018120:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018122:	693b      	ldr	r3, [r7, #16]
 8018124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018126:	693b      	ldr	r3, [r7, #16]
 8018128:	899b      	ldrh	r3, [r3, #12]
 801812a:	4619      	mov	r1, r3
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018132:	4413      	add	r3, r2
 8018134:	4619      	mov	r1, r3
 8018136:	6938      	ldr	r0, [r7, #16]
 8018138:	f7ff ff0c 	bl	8017f54 <move_window>
 801813c:	4603      	mov	r3, r0
 801813e:	2b00      	cmp	r3, #0
 8018140:	f040 808d 	bne.w	801825e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	1c5a      	adds	r2, r3, #1
 8018148:	60fa      	str	r2, [r7, #12]
 801814a:	693a      	ldr	r2, [r7, #16]
 801814c:	8992      	ldrh	r2, [r2, #12]
 801814e:	fbb3 f1f2 	udiv	r1, r3, r2
 8018152:	fb01 f202 	mul.w	r2, r1, r2
 8018156:	1a9b      	subs	r3, r3, r2
 8018158:	693a      	ldr	r2, [r7, #16]
 801815a:	4413      	add	r3, r2
 801815c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8018160:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018162:	693b      	ldr	r3, [r7, #16]
 8018164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018166:	693b      	ldr	r3, [r7, #16]
 8018168:	899b      	ldrh	r3, [r3, #12]
 801816a:	4619      	mov	r1, r3
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018172:	4413      	add	r3, r2
 8018174:	4619      	mov	r1, r3
 8018176:	6938      	ldr	r0, [r7, #16]
 8018178:	f7ff feec 	bl	8017f54 <move_window>
 801817c:	4603      	mov	r3, r0
 801817e:	2b00      	cmp	r3, #0
 8018180:	d16f      	bne.n	8018262 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8018182:	693b      	ldr	r3, [r7, #16]
 8018184:	899b      	ldrh	r3, [r3, #12]
 8018186:	461a      	mov	r2, r3
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	fbb3 f1f2 	udiv	r1, r3, r2
 801818e:	fb01 f202 	mul.w	r2, r1, r2
 8018192:	1a9b      	subs	r3, r3, r2
 8018194:	693a      	ldr	r2, [r7, #16]
 8018196:	4413      	add	r3, r2
 8018198:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801819c:	021b      	lsls	r3, r3, #8
 801819e:	461a      	mov	r2, r3
 80181a0:	68bb      	ldr	r3, [r7, #8]
 80181a2:	4313      	orrs	r3, r2
 80181a4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80181a6:	683b      	ldr	r3, [r7, #0]
 80181a8:	f003 0301 	and.w	r3, r3, #1
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d002      	beq.n	80181b6 <get_fat+0xe8>
 80181b0:	68bb      	ldr	r3, [r7, #8]
 80181b2:	091b      	lsrs	r3, r3, #4
 80181b4:	e002      	b.n	80181bc <get_fat+0xee>
 80181b6:	68bb      	ldr	r3, [r7, #8]
 80181b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80181bc:	617b      	str	r3, [r7, #20]
			break;
 80181be:	e055      	b.n	801826c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80181c0:	693b      	ldr	r3, [r7, #16]
 80181c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80181c4:	693b      	ldr	r3, [r7, #16]
 80181c6:	899b      	ldrh	r3, [r3, #12]
 80181c8:	085b      	lsrs	r3, r3, #1
 80181ca:	b29b      	uxth	r3, r3
 80181cc:	4619      	mov	r1, r3
 80181ce:	683b      	ldr	r3, [r7, #0]
 80181d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80181d4:	4413      	add	r3, r2
 80181d6:	4619      	mov	r1, r3
 80181d8:	6938      	ldr	r0, [r7, #16]
 80181da:	f7ff febb 	bl	8017f54 <move_window>
 80181de:	4603      	mov	r3, r0
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d140      	bne.n	8018266 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80181e4:	693b      	ldr	r3, [r7, #16]
 80181e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80181ea:	683b      	ldr	r3, [r7, #0]
 80181ec:	005b      	lsls	r3, r3, #1
 80181ee:	693a      	ldr	r2, [r7, #16]
 80181f0:	8992      	ldrh	r2, [r2, #12]
 80181f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80181f6:	fb00 f202 	mul.w	r2, r0, r2
 80181fa:	1a9b      	subs	r3, r3, r2
 80181fc:	440b      	add	r3, r1
 80181fe:	4618      	mov	r0, r3
 8018200:	f7ff fbf8 	bl	80179f4 <ld_word>
 8018204:	4603      	mov	r3, r0
 8018206:	617b      	str	r3, [r7, #20]
			break;
 8018208:	e030      	b.n	801826c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801820a:	693b      	ldr	r3, [r7, #16]
 801820c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801820e:	693b      	ldr	r3, [r7, #16]
 8018210:	899b      	ldrh	r3, [r3, #12]
 8018212:	089b      	lsrs	r3, r3, #2
 8018214:	b29b      	uxth	r3, r3
 8018216:	4619      	mov	r1, r3
 8018218:	683b      	ldr	r3, [r7, #0]
 801821a:	fbb3 f3f1 	udiv	r3, r3, r1
 801821e:	4413      	add	r3, r2
 8018220:	4619      	mov	r1, r3
 8018222:	6938      	ldr	r0, [r7, #16]
 8018224:	f7ff fe96 	bl	8017f54 <move_window>
 8018228:	4603      	mov	r3, r0
 801822a:	2b00      	cmp	r3, #0
 801822c:	d11d      	bne.n	801826a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801822e:	693b      	ldr	r3, [r7, #16]
 8018230:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018234:	683b      	ldr	r3, [r7, #0]
 8018236:	009b      	lsls	r3, r3, #2
 8018238:	693a      	ldr	r2, [r7, #16]
 801823a:	8992      	ldrh	r2, [r2, #12]
 801823c:	fbb3 f0f2 	udiv	r0, r3, r2
 8018240:	fb00 f202 	mul.w	r2, r0, r2
 8018244:	1a9b      	subs	r3, r3, r2
 8018246:	440b      	add	r3, r1
 8018248:	4618      	mov	r0, r3
 801824a:	f7ff fbeb 	bl	8017a24 <ld_dword>
 801824e:	4603      	mov	r3, r0
 8018250:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8018254:	617b      	str	r3, [r7, #20]
			break;
 8018256:	e009      	b.n	801826c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8018258:	2301      	movs	r3, #1
 801825a:	617b      	str	r3, [r7, #20]
 801825c:	e006      	b.n	801826c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801825e:	bf00      	nop
 8018260:	e004      	b.n	801826c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018262:	bf00      	nop
 8018264:	e002      	b.n	801826c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018266:	bf00      	nop
 8018268:	e000      	b.n	801826c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801826a:	bf00      	nop
		}
	}

	return val;
 801826c:	697b      	ldr	r3, [r7, #20]
}
 801826e:	4618      	mov	r0, r3
 8018270:	3718      	adds	r7, #24
 8018272:	46bd      	mov	sp, r7
 8018274:	bd80      	pop	{r7, pc}

08018276 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8018276:	b590      	push	{r4, r7, lr}
 8018278:	b089      	sub	sp, #36	; 0x24
 801827a:	af00      	add	r7, sp, #0
 801827c:	60f8      	str	r0, [r7, #12]
 801827e:	60b9      	str	r1, [r7, #8]
 8018280:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8018282:	2302      	movs	r3, #2
 8018284:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8018286:	68bb      	ldr	r3, [r7, #8]
 8018288:	2b01      	cmp	r3, #1
 801828a:	f240 8109 	bls.w	80184a0 <put_fat+0x22a>
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	69db      	ldr	r3, [r3, #28]
 8018292:	68ba      	ldr	r2, [r7, #8]
 8018294:	429a      	cmp	r2, r3
 8018296:	f080 8103 	bcs.w	80184a0 <put_fat+0x22a>
		switch (fs->fs_type) {
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	781b      	ldrb	r3, [r3, #0]
 801829e:	2b03      	cmp	r3, #3
 80182a0:	f000 80b6 	beq.w	8018410 <put_fat+0x19a>
 80182a4:	2b03      	cmp	r3, #3
 80182a6:	f300 80fb 	bgt.w	80184a0 <put_fat+0x22a>
 80182aa:	2b01      	cmp	r3, #1
 80182ac:	d003      	beq.n	80182b6 <put_fat+0x40>
 80182ae:	2b02      	cmp	r3, #2
 80182b0:	f000 8083 	beq.w	80183ba <put_fat+0x144>
 80182b4:	e0f4      	b.n	80184a0 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80182b6:	68bb      	ldr	r3, [r7, #8]
 80182b8:	61bb      	str	r3, [r7, #24]
 80182ba:	69bb      	ldr	r3, [r7, #24]
 80182bc:	085b      	lsrs	r3, r3, #1
 80182be:	69ba      	ldr	r2, [r7, #24]
 80182c0:	4413      	add	r3, r2
 80182c2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	899b      	ldrh	r3, [r3, #12]
 80182cc:	4619      	mov	r1, r3
 80182ce:	69bb      	ldr	r3, [r7, #24]
 80182d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80182d4:	4413      	add	r3, r2
 80182d6:	4619      	mov	r1, r3
 80182d8:	68f8      	ldr	r0, [r7, #12]
 80182da:	f7ff fe3b 	bl	8017f54 <move_window>
 80182de:	4603      	mov	r3, r0
 80182e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80182e2:	7ffb      	ldrb	r3, [r7, #31]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	f040 80d4 	bne.w	8018492 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80182f0:	69bb      	ldr	r3, [r7, #24]
 80182f2:	1c5a      	adds	r2, r3, #1
 80182f4:	61ba      	str	r2, [r7, #24]
 80182f6:	68fa      	ldr	r2, [r7, #12]
 80182f8:	8992      	ldrh	r2, [r2, #12]
 80182fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80182fe:	fb00 f202 	mul.w	r2, r0, r2
 8018302:	1a9b      	subs	r3, r3, r2
 8018304:	440b      	add	r3, r1
 8018306:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8018308:	68bb      	ldr	r3, [r7, #8]
 801830a:	f003 0301 	and.w	r3, r3, #1
 801830e:	2b00      	cmp	r3, #0
 8018310:	d00d      	beq.n	801832e <put_fat+0xb8>
 8018312:	697b      	ldr	r3, [r7, #20]
 8018314:	781b      	ldrb	r3, [r3, #0]
 8018316:	b25b      	sxtb	r3, r3
 8018318:	f003 030f 	and.w	r3, r3, #15
 801831c:	b25a      	sxtb	r2, r3
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	b2db      	uxtb	r3, r3
 8018322:	011b      	lsls	r3, r3, #4
 8018324:	b25b      	sxtb	r3, r3
 8018326:	4313      	orrs	r3, r2
 8018328:	b25b      	sxtb	r3, r3
 801832a:	b2db      	uxtb	r3, r3
 801832c:	e001      	b.n	8018332 <put_fat+0xbc>
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	b2db      	uxtb	r3, r3
 8018332:	697a      	ldr	r2, [r7, #20]
 8018334:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	2201      	movs	r2, #1
 801833a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	899b      	ldrh	r3, [r3, #12]
 8018344:	4619      	mov	r1, r3
 8018346:	69bb      	ldr	r3, [r7, #24]
 8018348:	fbb3 f3f1 	udiv	r3, r3, r1
 801834c:	4413      	add	r3, r2
 801834e:	4619      	mov	r1, r3
 8018350:	68f8      	ldr	r0, [r7, #12]
 8018352:	f7ff fdff 	bl	8017f54 <move_window>
 8018356:	4603      	mov	r3, r0
 8018358:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801835a:	7ffb      	ldrb	r3, [r7, #31]
 801835c:	2b00      	cmp	r3, #0
 801835e:	f040 809a 	bne.w	8018496 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	899b      	ldrh	r3, [r3, #12]
 801836c:	461a      	mov	r2, r3
 801836e:	69bb      	ldr	r3, [r7, #24]
 8018370:	fbb3 f0f2 	udiv	r0, r3, r2
 8018374:	fb00 f202 	mul.w	r2, r0, r2
 8018378:	1a9b      	subs	r3, r3, r2
 801837a:	440b      	add	r3, r1
 801837c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801837e:	68bb      	ldr	r3, [r7, #8]
 8018380:	f003 0301 	and.w	r3, r3, #1
 8018384:	2b00      	cmp	r3, #0
 8018386:	d003      	beq.n	8018390 <put_fat+0x11a>
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	091b      	lsrs	r3, r3, #4
 801838c:	b2db      	uxtb	r3, r3
 801838e:	e00e      	b.n	80183ae <put_fat+0x138>
 8018390:	697b      	ldr	r3, [r7, #20]
 8018392:	781b      	ldrb	r3, [r3, #0]
 8018394:	b25b      	sxtb	r3, r3
 8018396:	f023 030f 	bic.w	r3, r3, #15
 801839a:	b25a      	sxtb	r2, r3
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	0a1b      	lsrs	r3, r3, #8
 80183a0:	b25b      	sxtb	r3, r3
 80183a2:	f003 030f 	and.w	r3, r3, #15
 80183a6:	b25b      	sxtb	r3, r3
 80183a8:	4313      	orrs	r3, r2
 80183aa:	b25b      	sxtb	r3, r3
 80183ac:	b2db      	uxtb	r3, r3
 80183ae:	697a      	ldr	r2, [r7, #20]
 80183b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	2201      	movs	r2, #1
 80183b6:	70da      	strb	r2, [r3, #3]
			break;
 80183b8:	e072      	b.n	80184a0 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	899b      	ldrh	r3, [r3, #12]
 80183c2:	085b      	lsrs	r3, r3, #1
 80183c4:	b29b      	uxth	r3, r3
 80183c6:	4619      	mov	r1, r3
 80183c8:	68bb      	ldr	r3, [r7, #8]
 80183ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80183ce:	4413      	add	r3, r2
 80183d0:	4619      	mov	r1, r3
 80183d2:	68f8      	ldr	r0, [r7, #12]
 80183d4:	f7ff fdbe 	bl	8017f54 <move_window>
 80183d8:	4603      	mov	r3, r0
 80183da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80183dc:	7ffb      	ldrb	r3, [r7, #31]
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d15b      	bne.n	801849a <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80183e8:	68bb      	ldr	r3, [r7, #8]
 80183ea:	005b      	lsls	r3, r3, #1
 80183ec:	68fa      	ldr	r2, [r7, #12]
 80183ee:	8992      	ldrh	r2, [r2, #12]
 80183f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80183f4:	fb00 f202 	mul.w	r2, r0, r2
 80183f8:	1a9b      	subs	r3, r3, r2
 80183fa:	440b      	add	r3, r1
 80183fc:	687a      	ldr	r2, [r7, #4]
 80183fe:	b292      	uxth	r2, r2
 8018400:	4611      	mov	r1, r2
 8018402:	4618      	mov	r0, r3
 8018404:	f7ff fb31 	bl	8017a6a <st_word>
			fs->wflag = 1;
 8018408:	68fb      	ldr	r3, [r7, #12]
 801840a:	2201      	movs	r2, #1
 801840c:	70da      	strb	r2, [r3, #3]
			break;
 801840e:	e047      	b.n	80184a0 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	899b      	ldrh	r3, [r3, #12]
 8018418:	089b      	lsrs	r3, r3, #2
 801841a:	b29b      	uxth	r3, r3
 801841c:	4619      	mov	r1, r3
 801841e:	68bb      	ldr	r3, [r7, #8]
 8018420:	fbb3 f3f1 	udiv	r3, r3, r1
 8018424:	4413      	add	r3, r2
 8018426:	4619      	mov	r1, r3
 8018428:	68f8      	ldr	r0, [r7, #12]
 801842a:	f7ff fd93 	bl	8017f54 <move_window>
 801842e:	4603      	mov	r3, r0
 8018430:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018432:	7ffb      	ldrb	r3, [r7, #31]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d132      	bne.n	801849e <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018444:	68bb      	ldr	r3, [r7, #8]
 8018446:	009b      	lsls	r3, r3, #2
 8018448:	68fa      	ldr	r2, [r7, #12]
 801844a:	8992      	ldrh	r2, [r2, #12]
 801844c:	fbb3 f0f2 	udiv	r0, r3, r2
 8018450:	fb00 f202 	mul.w	r2, r0, r2
 8018454:	1a9b      	subs	r3, r3, r2
 8018456:	440b      	add	r3, r1
 8018458:	4618      	mov	r0, r3
 801845a:	f7ff fae3 	bl	8017a24 <ld_dword>
 801845e:	4603      	mov	r3, r0
 8018460:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8018464:	4323      	orrs	r3, r4
 8018466:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801846e:	68bb      	ldr	r3, [r7, #8]
 8018470:	009b      	lsls	r3, r3, #2
 8018472:	68fa      	ldr	r2, [r7, #12]
 8018474:	8992      	ldrh	r2, [r2, #12]
 8018476:	fbb3 f0f2 	udiv	r0, r3, r2
 801847a:	fb00 f202 	mul.w	r2, r0, r2
 801847e:	1a9b      	subs	r3, r3, r2
 8018480:	440b      	add	r3, r1
 8018482:	6879      	ldr	r1, [r7, #4]
 8018484:	4618      	mov	r0, r3
 8018486:	f7ff fb0b 	bl	8017aa0 <st_dword>
			fs->wflag = 1;
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	2201      	movs	r2, #1
 801848e:	70da      	strb	r2, [r3, #3]
			break;
 8018490:	e006      	b.n	80184a0 <put_fat+0x22a>
			if (res != FR_OK) break;
 8018492:	bf00      	nop
 8018494:	e004      	b.n	80184a0 <put_fat+0x22a>
			if (res != FR_OK) break;
 8018496:	bf00      	nop
 8018498:	e002      	b.n	80184a0 <put_fat+0x22a>
			if (res != FR_OK) break;
 801849a:	bf00      	nop
 801849c:	e000      	b.n	80184a0 <put_fat+0x22a>
			if (res != FR_OK) break;
 801849e:	bf00      	nop
		}
	}
	return res;
 80184a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80184a2:	4618      	mov	r0, r3
 80184a4:	3724      	adds	r7, #36	; 0x24
 80184a6:	46bd      	mov	sp, r7
 80184a8:	bd90      	pop	{r4, r7, pc}

080184aa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80184aa:	b580      	push	{r7, lr}
 80184ac:	b088      	sub	sp, #32
 80184ae:	af00      	add	r7, sp, #0
 80184b0:	60f8      	str	r0, [r7, #12]
 80184b2:	60b9      	str	r1, [r7, #8]
 80184b4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80184b6:	2300      	movs	r3, #0
 80184b8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80184c0:	68bb      	ldr	r3, [r7, #8]
 80184c2:	2b01      	cmp	r3, #1
 80184c4:	d904      	bls.n	80184d0 <remove_chain+0x26>
 80184c6:	69bb      	ldr	r3, [r7, #24]
 80184c8:	69db      	ldr	r3, [r3, #28]
 80184ca:	68ba      	ldr	r2, [r7, #8]
 80184cc:	429a      	cmp	r2, r3
 80184ce:	d301      	bcc.n	80184d4 <remove_chain+0x2a>
 80184d0:	2302      	movs	r3, #2
 80184d2:	e04b      	b.n	801856c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d00c      	beq.n	80184f4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80184da:	f04f 32ff 	mov.w	r2, #4294967295
 80184de:	6879      	ldr	r1, [r7, #4]
 80184e0:	69b8      	ldr	r0, [r7, #24]
 80184e2:	f7ff fec8 	bl	8018276 <put_fat>
 80184e6:	4603      	mov	r3, r0
 80184e8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80184ea:	7ffb      	ldrb	r3, [r7, #31]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d001      	beq.n	80184f4 <remove_chain+0x4a>
 80184f0:	7ffb      	ldrb	r3, [r7, #31]
 80184f2:	e03b      	b.n	801856c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80184f4:	68b9      	ldr	r1, [r7, #8]
 80184f6:	68f8      	ldr	r0, [r7, #12]
 80184f8:	f7ff fde9 	bl	80180ce <get_fat>
 80184fc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80184fe:	697b      	ldr	r3, [r7, #20]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d031      	beq.n	8018568 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8018504:	697b      	ldr	r3, [r7, #20]
 8018506:	2b01      	cmp	r3, #1
 8018508:	d101      	bne.n	801850e <remove_chain+0x64>
 801850a:	2302      	movs	r3, #2
 801850c:	e02e      	b.n	801856c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801850e:	697b      	ldr	r3, [r7, #20]
 8018510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018514:	d101      	bne.n	801851a <remove_chain+0x70>
 8018516:	2301      	movs	r3, #1
 8018518:	e028      	b.n	801856c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801851a:	2200      	movs	r2, #0
 801851c:	68b9      	ldr	r1, [r7, #8]
 801851e:	69b8      	ldr	r0, [r7, #24]
 8018520:	f7ff fea9 	bl	8018276 <put_fat>
 8018524:	4603      	mov	r3, r0
 8018526:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8018528:	7ffb      	ldrb	r3, [r7, #31]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d001      	beq.n	8018532 <remove_chain+0x88>
 801852e:	7ffb      	ldrb	r3, [r7, #31]
 8018530:	e01c      	b.n	801856c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8018532:	69bb      	ldr	r3, [r7, #24]
 8018534:	699a      	ldr	r2, [r3, #24]
 8018536:	69bb      	ldr	r3, [r7, #24]
 8018538:	69db      	ldr	r3, [r3, #28]
 801853a:	3b02      	subs	r3, #2
 801853c:	429a      	cmp	r2, r3
 801853e:	d20b      	bcs.n	8018558 <remove_chain+0xae>
			fs->free_clst++;
 8018540:	69bb      	ldr	r3, [r7, #24]
 8018542:	699b      	ldr	r3, [r3, #24]
 8018544:	1c5a      	adds	r2, r3, #1
 8018546:	69bb      	ldr	r3, [r7, #24]
 8018548:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801854a:	69bb      	ldr	r3, [r7, #24]
 801854c:	791b      	ldrb	r3, [r3, #4]
 801854e:	f043 0301 	orr.w	r3, r3, #1
 8018552:	b2da      	uxtb	r2, r3
 8018554:	69bb      	ldr	r3, [r7, #24]
 8018556:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8018558:	697b      	ldr	r3, [r7, #20]
 801855a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801855c:	69bb      	ldr	r3, [r7, #24]
 801855e:	69db      	ldr	r3, [r3, #28]
 8018560:	68ba      	ldr	r2, [r7, #8]
 8018562:	429a      	cmp	r2, r3
 8018564:	d3c6      	bcc.n	80184f4 <remove_chain+0x4a>
 8018566:	e000      	b.n	801856a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8018568:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801856a:	2300      	movs	r3, #0
}
 801856c:	4618      	mov	r0, r3
 801856e:	3720      	adds	r7, #32
 8018570:	46bd      	mov	sp, r7
 8018572:	bd80      	pop	{r7, pc}

08018574 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8018574:	b580      	push	{r7, lr}
 8018576:	b088      	sub	sp, #32
 8018578:	af00      	add	r7, sp, #0
 801857a:	6078      	str	r0, [r7, #4]
 801857c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8018584:	683b      	ldr	r3, [r7, #0]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d10d      	bne.n	80185a6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801858a:	693b      	ldr	r3, [r7, #16]
 801858c:	695b      	ldr	r3, [r3, #20]
 801858e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8018590:	69bb      	ldr	r3, [r7, #24]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d004      	beq.n	80185a0 <create_chain+0x2c>
 8018596:	693b      	ldr	r3, [r7, #16]
 8018598:	69db      	ldr	r3, [r3, #28]
 801859a:	69ba      	ldr	r2, [r7, #24]
 801859c:	429a      	cmp	r2, r3
 801859e:	d31b      	bcc.n	80185d8 <create_chain+0x64>
 80185a0:	2301      	movs	r3, #1
 80185a2:	61bb      	str	r3, [r7, #24]
 80185a4:	e018      	b.n	80185d8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80185a6:	6839      	ldr	r1, [r7, #0]
 80185a8:	6878      	ldr	r0, [r7, #4]
 80185aa:	f7ff fd90 	bl	80180ce <get_fat>
 80185ae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	2b01      	cmp	r3, #1
 80185b4:	d801      	bhi.n	80185ba <create_chain+0x46>
 80185b6:	2301      	movs	r3, #1
 80185b8:	e070      	b.n	801869c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80185c0:	d101      	bne.n	80185c6 <create_chain+0x52>
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	e06a      	b.n	801869c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80185c6:	693b      	ldr	r3, [r7, #16]
 80185c8:	69db      	ldr	r3, [r3, #28]
 80185ca:	68fa      	ldr	r2, [r7, #12]
 80185cc:	429a      	cmp	r2, r3
 80185ce:	d201      	bcs.n	80185d4 <create_chain+0x60>
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	e063      	b.n	801869c <create_chain+0x128>
		scl = clst;
 80185d4:	683b      	ldr	r3, [r7, #0]
 80185d6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80185d8:	69bb      	ldr	r3, [r7, #24]
 80185da:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80185dc:	69fb      	ldr	r3, [r7, #28]
 80185de:	3301      	adds	r3, #1
 80185e0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80185e2:	693b      	ldr	r3, [r7, #16]
 80185e4:	69db      	ldr	r3, [r3, #28]
 80185e6:	69fa      	ldr	r2, [r7, #28]
 80185e8:	429a      	cmp	r2, r3
 80185ea:	d307      	bcc.n	80185fc <create_chain+0x88>
				ncl = 2;
 80185ec:	2302      	movs	r3, #2
 80185ee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80185f0:	69fa      	ldr	r2, [r7, #28]
 80185f2:	69bb      	ldr	r3, [r7, #24]
 80185f4:	429a      	cmp	r2, r3
 80185f6:	d901      	bls.n	80185fc <create_chain+0x88>
 80185f8:	2300      	movs	r3, #0
 80185fa:	e04f      	b.n	801869c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80185fc:	69f9      	ldr	r1, [r7, #28]
 80185fe:	6878      	ldr	r0, [r7, #4]
 8018600:	f7ff fd65 	bl	80180ce <get_fat>
 8018604:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d00e      	beq.n	801862a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	2b01      	cmp	r3, #1
 8018610:	d003      	beq.n	801861a <create_chain+0xa6>
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018618:	d101      	bne.n	801861e <create_chain+0xaa>
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	e03e      	b.n	801869c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801861e:	69fa      	ldr	r2, [r7, #28]
 8018620:	69bb      	ldr	r3, [r7, #24]
 8018622:	429a      	cmp	r2, r3
 8018624:	d1da      	bne.n	80185dc <create_chain+0x68>
 8018626:	2300      	movs	r3, #0
 8018628:	e038      	b.n	801869c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801862a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801862c:	f04f 32ff 	mov.w	r2, #4294967295
 8018630:	69f9      	ldr	r1, [r7, #28]
 8018632:	6938      	ldr	r0, [r7, #16]
 8018634:	f7ff fe1f 	bl	8018276 <put_fat>
 8018638:	4603      	mov	r3, r0
 801863a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801863c:	7dfb      	ldrb	r3, [r7, #23]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d109      	bne.n	8018656 <create_chain+0xe2>
 8018642:	683b      	ldr	r3, [r7, #0]
 8018644:	2b00      	cmp	r3, #0
 8018646:	d006      	beq.n	8018656 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8018648:	69fa      	ldr	r2, [r7, #28]
 801864a:	6839      	ldr	r1, [r7, #0]
 801864c:	6938      	ldr	r0, [r7, #16]
 801864e:	f7ff fe12 	bl	8018276 <put_fat>
 8018652:	4603      	mov	r3, r0
 8018654:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8018656:	7dfb      	ldrb	r3, [r7, #23]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d116      	bne.n	801868a <create_chain+0x116>
		fs->last_clst = ncl;
 801865c:	693b      	ldr	r3, [r7, #16]
 801865e:	69fa      	ldr	r2, [r7, #28]
 8018660:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8018662:	693b      	ldr	r3, [r7, #16]
 8018664:	699a      	ldr	r2, [r3, #24]
 8018666:	693b      	ldr	r3, [r7, #16]
 8018668:	69db      	ldr	r3, [r3, #28]
 801866a:	3b02      	subs	r3, #2
 801866c:	429a      	cmp	r2, r3
 801866e:	d804      	bhi.n	801867a <create_chain+0x106>
 8018670:	693b      	ldr	r3, [r7, #16]
 8018672:	699b      	ldr	r3, [r3, #24]
 8018674:	1e5a      	subs	r2, r3, #1
 8018676:	693b      	ldr	r3, [r7, #16]
 8018678:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801867a:	693b      	ldr	r3, [r7, #16]
 801867c:	791b      	ldrb	r3, [r3, #4]
 801867e:	f043 0301 	orr.w	r3, r3, #1
 8018682:	b2da      	uxtb	r2, r3
 8018684:	693b      	ldr	r3, [r7, #16]
 8018686:	711a      	strb	r2, [r3, #4]
 8018688:	e007      	b.n	801869a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801868a:	7dfb      	ldrb	r3, [r7, #23]
 801868c:	2b01      	cmp	r3, #1
 801868e:	d102      	bne.n	8018696 <create_chain+0x122>
 8018690:	f04f 33ff 	mov.w	r3, #4294967295
 8018694:	e000      	b.n	8018698 <create_chain+0x124>
 8018696:	2301      	movs	r3, #1
 8018698:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801869a:	69fb      	ldr	r3, [r7, #28]
}
 801869c:	4618      	mov	r0, r3
 801869e:	3720      	adds	r7, #32
 80186a0:	46bd      	mov	sp, r7
 80186a2:	bd80      	pop	{r7, pc}

080186a4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80186a4:	b480      	push	{r7}
 80186a6:	b087      	sub	sp, #28
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	6078      	str	r0, [r7, #4]
 80186ac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186b8:	3304      	adds	r3, #4
 80186ba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	899b      	ldrh	r3, [r3, #12]
 80186c0:	461a      	mov	r2, r3
 80186c2:	683b      	ldr	r3, [r7, #0]
 80186c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80186c8:	68fa      	ldr	r2, [r7, #12]
 80186ca:	8952      	ldrh	r2, [r2, #10]
 80186cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80186d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80186d2:	693b      	ldr	r3, [r7, #16]
 80186d4:	1d1a      	adds	r2, r3, #4
 80186d6:	613a      	str	r2, [r7, #16]
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80186dc:	68bb      	ldr	r3, [r7, #8]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d101      	bne.n	80186e6 <clmt_clust+0x42>
 80186e2:	2300      	movs	r3, #0
 80186e4:	e010      	b.n	8018708 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80186e6:	697a      	ldr	r2, [r7, #20]
 80186e8:	68bb      	ldr	r3, [r7, #8]
 80186ea:	429a      	cmp	r2, r3
 80186ec:	d307      	bcc.n	80186fe <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80186ee:	697a      	ldr	r2, [r7, #20]
 80186f0:	68bb      	ldr	r3, [r7, #8]
 80186f2:	1ad3      	subs	r3, r2, r3
 80186f4:	617b      	str	r3, [r7, #20]
 80186f6:	693b      	ldr	r3, [r7, #16]
 80186f8:	3304      	adds	r3, #4
 80186fa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80186fc:	e7e9      	b.n	80186d2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80186fe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8018700:	693b      	ldr	r3, [r7, #16]
 8018702:	681a      	ldr	r2, [r3, #0]
 8018704:	697b      	ldr	r3, [r7, #20]
 8018706:	4413      	add	r3, r2
}
 8018708:	4618      	mov	r0, r3
 801870a:	371c      	adds	r7, #28
 801870c:	46bd      	mov	sp, r7
 801870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018712:	4770      	bx	lr

08018714 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8018714:	b580      	push	{r7, lr}
 8018716:	b086      	sub	sp, #24
 8018718:	af00      	add	r7, sp, #0
 801871a:	6078      	str	r0, [r7, #4]
 801871c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8018724:	683b      	ldr	r3, [r7, #0]
 8018726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801872a:	d204      	bcs.n	8018736 <dir_sdi+0x22>
 801872c:	683b      	ldr	r3, [r7, #0]
 801872e:	f003 031f 	and.w	r3, r3, #31
 8018732:	2b00      	cmp	r3, #0
 8018734:	d001      	beq.n	801873a <dir_sdi+0x26>
		return FR_INT_ERR;
 8018736:	2302      	movs	r3, #2
 8018738:	e071      	b.n	801881e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	683a      	ldr	r2, [r7, #0]
 801873e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	689b      	ldr	r3, [r3, #8]
 8018744:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8018746:	697b      	ldr	r3, [r7, #20]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d106      	bne.n	801875a <dir_sdi+0x46>
 801874c:	693b      	ldr	r3, [r7, #16]
 801874e:	781b      	ldrb	r3, [r3, #0]
 8018750:	2b02      	cmp	r3, #2
 8018752:	d902      	bls.n	801875a <dir_sdi+0x46>
		clst = fs->dirbase;
 8018754:	693b      	ldr	r3, [r7, #16]
 8018756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018758:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801875a:	697b      	ldr	r3, [r7, #20]
 801875c:	2b00      	cmp	r3, #0
 801875e:	d10c      	bne.n	801877a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8018760:	683b      	ldr	r3, [r7, #0]
 8018762:	095b      	lsrs	r3, r3, #5
 8018764:	693a      	ldr	r2, [r7, #16]
 8018766:	8912      	ldrh	r2, [r2, #8]
 8018768:	4293      	cmp	r3, r2
 801876a:	d301      	bcc.n	8018770 <dir_sdi+0x5c>
 801876c:	2302      	movs	r3, #2
 801876e:	e056      	b.n	801881e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8018770:	693b      	ldr	r3, [r7, #16]
 8018772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	61da      	str	r2, [r3, #28]
 8018778:	e02d      	b.n	80187d6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801877a:	693b      	ldr	r3, [r7, #16]
 801877c:	895b      	ldrh	r3, [r3, #10]
 801877e:	461a      	mov	r2, r3
 8018780:	693b      	ldr	r3, [r7, #16]
 8018782:	899b      	ldrh	r3, [r3, #12]
 8018784:	fb02 f303 	mul.w	r3, r2, r3
 8018788:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801878a:	e019      	b.n	80187c0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	6979      	ldr	r1, [r7, #20]
 8018790:	4618      	mov	r0, r3
 8018792:	f7ff fc9c 	bl	80180ce <get_fat>
 8018796:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018798:	697b      	ldr	r3, [r7, #20]
 801879a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801879e:	d101      	bne.n	80187a4 <dir_sdi+0x90>
 80187a0:	2301      	movs	r3, #1
 80187a2:	e03c      	b.n	801881e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80187a4:	697b      	ldr	r3, [r7, #20]
 80187a6:	2b01      	cmp	r3, #1
 80187a8:	d904      	bls.n	80187b4 <dir_sdi+0xa0>
 80187aa:	693b      	ldr	r3, [r7, #16]
 80187ac:	69db      	ldr	r3, [r3, #28]
 80187ae:	697a      	ldr	r2, [r7, #20]
 80187b0:	429a      	cmp	r2, r3
 80187b2:	d301      	bcc.n	80187b8 <dir_sdi+0xa4>
 80187b4:	2302      	movs	r3, #2
 80187b6:	e032      	b.n	801881e <dir_sdi+0x10a>
			ofs -= csz;
 80187b8:	683a      	ldr	r2, [r7, #0]
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	1ad3      	subs	r3, r2, r3
 80187be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80187c0:	683a      	ldr	r2, [r7, #0]
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	429a      	cmp	r2, r3
 80187c6:	d2e1      	bcs.n	801878c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80187c8:	6979      	ldr	r1, [r7, #20]
 80187ca:	6938      	ldr	r0, [r7, #16]
 80187cc:	f7ff fc60 	bl	8018090 <clust2sect>
 80187d0:	4602      	mov	r2, r0
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	697a      	ldr	r2, [r7, #20]
 80187da:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	69db      	ldr	r3, [r3, #28]
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d101      	bne.n	80187e8 <dir_sdi+0xd4>
 80187e4:	2302      	movs	r3, #2
 80187e6:	e01a      	b.n	801881e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	69da      	ldr	r2, [r3, #28]
 80187ec:	693b      	ldr	r3, [r7, #16]
 80187ee:	899b      	ldrh	r3, [r3, #12]
 80187f0:	4619      	mov	r1, r3
 80187f2:	683b      	ldr	r3, [r7, #0]
 80187f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80187f8:	441a      	add	r2, r3
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80187fe:	693b      	ldr	r3, [r7, #16]
 8018800:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018804:	693b      	ldr	r3, [r7, #16]
 8018806:	899b      	ldrh	r3, [r3, #12]
 8018808:	461a      	mov	r2, r3
 801880a:	683b      	ldr	r3, [r7, #0]
 801880c:	fbb3 f0f2 	udiv	r0, r3, r2
 8018810:	fb00 f202 	mul.w	r2, r0, r2
 8018814:	1a9b      	subs	r3, r3, r2
 8018816:	18ca      	adds	r2, r1, r3
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801881c:	2300      	movs	r3, #0
}
 801881e:	4618      	mov	r0, r3
 8018820:	3718      	adds	r7, #24
 8018822:	46bd      	mov	sp, r7
 8018824:	bd80      	pop	{r7, pc}

08018826 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8018826:	b580      	push	{r7, lr}
 8018828:	b086      	sub	sp, #24
 801882a:	af00      	add	r7, sp, #0
 801882c:	6078      	str	r0, [r7, #4]
 801882e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	695b      	ldr	r3, [r3, #20]
 801883a:	3320      	adds	r3, #32
 801883c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	69db      	ldr	r3, [r3, #28]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d003      	beq.n	801884e <dir_next+0x28>
 8018846:	68bb      	ldr	r3, [r7, #8]
 8018848:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801884c:	d301      	bcc.n	8018852 <dir_next+0x2c>
 801884e:	2304      	movs	r3, #4
 8018850:	e0bb      	b.n	80189ca <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	899b      	ldrh	r3, [r3, #12]
 8018856:	461a      	mov	r2, r3
 8018858:	68bb      	ldr	r3, [r7, #8]
 801885a:	fbb3 f1f2 	udiv	r1, r3, r2
 801885e:	fb01 f202 	mul.w	r2, r1, r2
 8018862:	1a9b      	subs	r3, r3, r2
 8018864:	2b00      	cmp	r3, #0
 8018866:	f040 809d 	bne.w	80189a4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	69db      	ldr	r3, [r3, #28]
 801886e:	1c5a      	adds	r2, r3, #1
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	699b      	ldr	r3, [r3, #24]
 8018878:	2b00      	cmp	r3, #0
 801887a:	d10b      	bne.n	8018894 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801887c:	68bb      	ldr	r3, [r7, #8]
 801887e:	095b      	lsrs	r3, r3, #5
 8018880:	68fa      	ldr	r2, [r7, #12]
 8018882:	8912      	ldrh	r2, [r2, #8]
 8018884:	4293      	cmp	r3, r2
 8018886:	f0c0 808d 	bcc.w	80189a4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	2200      	movs	r2, #0
 801888e:	61da      	str	r2, [r3, #28]
 8018890:	2304      	movs	r3, #4
 8018892:	e09a      	b.n	80189ca <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	899b      	ldrh	r3, [r3, #12]
 8018898:	461a      	mov	r2, r3
 801889a:	68bb      	ldr	r3, [r7, #8]
 801889c:	fbb3 f3f2 	udiv	r3, r3, r2
 80188a0:	68fa      	ldr	r2, [r7, #12]
 80188a2:	8952      	ldrh	r2, [r2, #10]
 80188a4:	3a01      	subs	r2, #1
 80188a6:	4013      	ands	r3, r2
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d17b      	bne.n	80189a4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80188ac:	687a      	ldr	r2, [r7, #4]
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	699b      	ldr	r3, [r3, #24]
 80188b2:	4619      	mov	r1, r3
 80188b4:	4610      	mov	r0, r2
 80188b6:	f7ff fc0a 	bl	80180ce <get_fat>
 80188ba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80188bc:	697b      	ldr	r3, [r7, #20]
 80188be:	2b01      	cmp	r3, #1
 80188c0:	d801      	bhi.n	80188c6 <dir_next+0xa0>
 80188c2:	2302      	movs	r3, #2
 80188c4:	e081      	b.n	80189ca <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80188c6:	697b      	ldr	r3, [r7, #20]
 80188c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188cc:	d101      	bne.n	80188d2 <dir_next+0xac>
 80188ce:	2301      	movs	r3, #1
 80188d0:	e07b      	b.n	80189ca <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	69db      	ldr	r3, [r3, #28]
 80188d6:	697a      	ldr	r2, [r7, #20]
 80188d8:	429a      	cmp	r2, r3
 80188da:	d359      	bcc.n	8018990 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80188dc:	683b      	ldr	r3, [r7, #0]
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d104      	bne.n	80188ec <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	2200      	movs	r2, #0
 80188e6:	61da      	str	r2, [r3, #28]
 80188e8:	2304      	movs	r3, #4
 80188ea:	e06e      	b.n	80189ca <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80188ec:	687a      	ldr	r2, [r7, #4]
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	699b      	ldr	r3, [r3, #24]
 80188f2:	4619      	mov	r1, r3
 80188f4:	4610      	mov	r0, r2
 80188f6:	f7ff fe3d 	bl	8018574 <create_chain>
 80188fa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80188fc:	697b      	ldr	r3, [r7, #20]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d101      	bne.n	8018906 <dir_next+0xe0>
 8018902:	2307      	movs	r3, #7
 8018904:	e061      	b.n	80189ca <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8018906:	697b      	ldr	r3, [r7, #20]
 8018908:	2b01      	cmp	r3, #1
 801890a:	d101      	bne.n	8018910 <dir_next+0xea>
 801890c:	2302      	movs	r3, #2
 801890e:	e05c      	b.n	80189ca <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018910:	697b      	ldr	r3, [r7, #20]
 8018912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018916:	d101      	bne.n	801891c <dir_next+0xf6>
 8018918:	2301      	movs	r3, #1
 801891a:	e056      	b.n	80189ca <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801891c:	68f8      	ldr	r0, [r7, #12]
 801891e:	f7ff fad5 	bl	8017ecc <sync_window>
 8018922:	4603      	mov	r3, r0
 8018924:	2b00      	cmp	r3, #0
 8018926:	d001      	beq.n	801892c <dir_next+0x106>
 8018928:	2301      	movs	r3, #1
 801892a:	e04e      	b.n	80189ca <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	899b      	ldrh	r3, [r3, #12]
 8018936:	461a      	mov	r2, r3
 8018938:	2100      	movs	r1, #0
 801893a:	f7ff f8fe 	bl	8017b3a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801893e:	2300      	movs	r3, #0
 8018940:	613b      	str	r3, [r7, #16]
 8018942:	6979      	ldr	r1, [r7, #20]
 8018944:	68f8      	ldr	r0, [r7, #12]
 8018946:	f7ff fba3 	bl	8018090 <clust2sect>
 801894a:	4602      	mov	r2, r0
 801894c:	68fb      	ldr	r3, [r7, #12]
 801894e:	635a      	str	r2, [r3, #52]	; 0x34
 8018950:	e012      	b.n	8018978 <dir_next+0x152>
						fs->wflag = 1;
 8018952:	68fb      	ldr	r3, [r7, #12]
 8018954:	2201      	movs	r2, #1
 8018956:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8018958:	68f8      	ldr	r0, [r7, #12]
 801895a:	f7ff fab7 	bl	8017ecc <sync_window>
 801895e:	4603      	mov	r3, r0
 8018960:	2b00      	cmp	r3, #0
 8018962:	d001      	beq.n	8018968 <dir_next+0x142>
 8018964:	2301      	movs	r3, #1
 8018966:	e030      	b.n	80189ca <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018968:	693b      	ldr	r3, [r7, #16]
 801896a:	3301      	adds	r3, #1
 801896c:	613b      	str	r3, [r7, #16]
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018972:	1c5a      	adds	r2, r3, #1
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	635a      	str	r2, [r3, #52]	; 0x34
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	895b      	ldrh	r3, [r3, #10]
 801897c:	461a      	mov	r2, r3
 801897e:	693b      	ldr	r3, [r7, #16]
 8018980:	4293      	cmp	r3, r2
 8018982:	d3e6      	bcc.n	8018952 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018988:	693b      	ldr	r3, [r7, #16]
 801898a:	1ad2      	subs	r2, r2, r3
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	697a      	ldr	r2, [r7, #20]
 8018994:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8018996:	6979      	ldr	r1, [r7, #20]
 8018998:	68f8      	ldr	r0, [r7, #12]
 801899a:	f7ff fb79 	bl	8018090 <clust2sect>
 801899e:	4602      	mov	r2, r0
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	68ba      	ldr	r2, [r7, #8]
 80189a8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	899b      	ldrh	r3, [r3, #12]
 80189b4:	461a      	mov	r2, r3
 80189b6:	68bb      	ldr	r3, [r7, #8]
 80189b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80189bc:	fb00 f202 	mul.w	r2, r0, r2
 80189c0:	1a9b      	subs	r3, r3, r2
 80189c2:	18ca      	adds	r2, r1, r3
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80189c8:	2300      	movs	r3, #0
}
 80189ca:	4618      	mov	r0, r3
 80189cc:	3718      	adds	r7, #24
 80189ce:	46bd      	mov	sp, r7
 80189d0:	bd80      	pop	{r7, pc}

080189d2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80189d2:	b580      	push	{r7, lr}
 80189d4:	b086      	sub	sp, #24
 80189d6:	af00      	add	r7, sp, #0
 80189d8:	6078      	str	r0, [r7, #4]
 80189da:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80189e2:	2100      	movs	r1, #0
 80189e4:	6878      	ldr	r0, [r7, #4]
 80189e6:	f7ff fe95 	bl	8018714 <dir_sdi>
 80189ea:	4603      	mov	r3, r0
 80189ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80189ee:	7dfb      	ldrb	r3, [r7, #23]
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d12b      	bne.n	8018a4c <dir_alloc+0x7a>
		n = 0;
 80189f4:	2300      	movs	r3, #0
 80189f6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	69db      	ldr	r3, [r3, #28]
 80189fc:	4619      	mov	r1, r3
 80189fe:	68f8      	ldr	r0, [r7, #12]
 8018a00:	f7ff faa8 	bl	8017f54 <move_window>
 8018a04:	4603      	mov	r3, r0
 8018a06:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018a08:	7dfb      	ldrb	r3, [r7, #23]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d11d      	bne.n	8018a4a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	6a1b      	ldr	r3, [r3, #32]
 8018a12:	781b      	ldrb	r3, [r3, #0]
 8018a14:	2be5      	cmp	r3, #229	; 0xe5
 8018a16:	d004      	beq.n	8018a22 <dir_alloc+0x50>
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	6a1b      	ldr	r3, [r3, #32]
 8018a1c:	781b      	ldrb	r3, [r3, #0]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d107      	bne.n	8018a32 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8018a22:	693b      	ldr	r3, [r7, #16]
 8018a24:	3301      	adds	r3, #1
 8018a26:	613b      	str	r3, [r7, #16]
 8018a28:	693a      	ldr	r2, [r7, #16]
 8018a2a:	683b      	ldr	r3, [r7, #0]
 8018a2c:	429a      	cmp	r2, r3
 8018a2e:	d102      	bne.n	8018a36 <dir_alloc+0x64>
 8018a30:	e00c      	b.n	8018a4c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8018a32:	2300      	movs	r3, #0
 8018a34:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8018a36:	2101      	movs	r1, #1
 8018a38:	6878      	ldr	r0, [r7, #4]
 8018a3a:	f7ff fef4 	bl	8018826 <dir_next>
 8018a3e:	4603      	mov	r3, r0
 8018a40:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8018a42:	7dfb      	ldrb	r3, [r7, #23]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d0d7      	beq.n	80189f8 <dir_alloc+0x26>
 8018a48:	e000      	b.n	8018a4c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8018a4a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8018a4c:	7dfb      	ldrb	r3, [r7, #23]
 8018a4e:	2b04      	cmp	r3, #4
 8018a50:	d101      	bne.n	8018a56 <dir_alloc+0x84>
 8018a52:	2307      	movs	r3, #7
 8018a54:	75fb      	strb	r3, [r7, #23]
	return res;
 8018a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8018a58:	4618      	mov	r0, r3
 8018a5a:	3718      	adds	r7, #24
 8018a5c:	46bd      	mov	sp, r7
 8018a5e:	bd80      	pop	{r7, pc}

08018a60 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b084      	sub	sp, #16
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	6078      	str	r0, [r7, #4]
 8018a68:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8018a6a:	683b      	ldr	r3, [r7, #0]
 8018a6c:	331a      	adds	r3, #26
 8018a6e:	4618      	mov	r0, r3
 8018a70:	f7fe ffc0 	bl	80179f4 <ld_word>
 8018a74:	4603      	mov	r3, r0
 8018a76:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	781b      	ldrb	r3, [r3, #0]
 8018a7c:	2b03      	cmp	r3, #3
 8018a7e:	d109      	bne.n	8018a94 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8018a80:	683b      	ldr	r3, [r7, #0]
 8018a82:	3314      	adds	r3, #20
 8018a84:	4618      	mov	r0, r3
 8018a86:	f7fe ffb5 	bl	80179f4 <ld_word>
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	041b      	lsls	r3, r3, #16
 8018a8e:	68fa      	ldr	r2, [r7, #12]
 8018a90:	4313      	orrs	r3, r2
 8018a92:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8018a94:	68fb      	ldr	r3, [r7, #12]
}
 8018a96:	4618      	mov	r0, r3
 8018a98:	3710      	adds	r7, #16
 8018a9a:	46bd      	mov	sp, r7
 8018a9c:	bd80      	pop	{r7, pc}

08018a9e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8018a9e:	b580      	push	{r7, lr}
 8018aa0:	b084      	sub	sp, #16
 8018aa2:	af00      	add	r7, sp, #0
 8018aa4:	60f8      	str	r0, [r7, #12]
 8018aa6:	60b9      	str	r1, [r7, #8]
 8018aa8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8018aaa:	68bb      	ldr	r3, [r7, #8]
 8018aac:	331a      	adds	r3, #26
 8018aae:	687a      	ldr	r2, [r7, #4]
 8018ab0:	b292      	uxth	r2, r2
 8018ab2:	4611      	mov	r1, r2
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	f7fe ffd8 	bl	8017a6a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	781b      	ldrb	r3, [r3, #0]
 8018abe:	2b03      	cmp	r3, #3
 8018ac0:	d109      	bne.n	8018ad6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8018ac2:	68bb      	ldr	r3, [r7, #8]
 8018ac4:	f103 0214 	add.w	r2, r3, #20
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	0c1b      	lsrs	r3, r3, #16
 8018acc:	b29b      	uxth	r3, r3
 8018ace:	4619      	mov	r1, r3
 8018ad0:	4610      	mov	r0, r2
 8018ad2:	f7fe ffca 	bl	8017a6a <st_word>
	}
}
 8018ad6:	bf00      	nop
 8018ad8:	3710      	adds	r7, #16
 8018ada:	46bd      	mov	sp, r7
 8018adc:	bd80      	pop	{r7, pc}
	...

08018ae0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8018ae0:	b590      	push	{r4, r7, lr}
 8018ae2:	b087      	sub	sp, #28
 8018ae4:	af00      	add	r7, sp, #0
 8018ae6:	6078      	str	r0, [r7, #4]
 8018ae8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8018aea:	683b      	ldr	r3, [r7, #0]
 8018aec:	331a      	adds	r3, #26
 8018aee:	4618      	mov	r0, r3
 8018af0:	f7fe ff80 	bl	80179f4 <ld_word>
 8018af4:	4603      	mov	r3, r0
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d001      	beq.n	8018afe <cmp_lfn+0x1e>
 8018afa:	2300      	movs	r3, #0
 8018afc:	e059      	b.n	8018bb2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8018afe:	683b      	ldr	r3, [r7, #0]
 8018b00:	781b      	ldrb	r3, [r3, #0]
 8018b02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018b06:	1e5a      	subs	r2, r3, #1
 8018b08:	4613      	mov	r3, r2
 8018b0a:	005b      	lsls	r3, r3, #1
 8018b0c:	4413      	add	r3, r2
 8018b0e:	009b      	lsls	r3, r3, #2
 8018b10:	4413      	add	r3, r2
 8018b12:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018b14:	2301      	movs	r3, #1
 8018b16:	81fb      	strh	r3, [r7, #14]
 8018b18:	2300      	movs	r3, #0
 8018b1a:	613b      	str	r3, [r7, #16]
 8018b1c:	e033      	b.n	8018b86 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8018b1e:	4a27      	ldr	r2, [pc, #156]	; (8018bbc <cmp_lfn+0xdc>)
 8018b20:	693b      	ldr	r3, [r7, #16]
 8018b22:	4413      	add	r3, r2
 8018b24:	781b      	ldrb	r3, [r3, #0]
 8018b26:	461a      	mov	r2, r3
 8018b28:	683b      	ldr	r3, [r7, #0]
 8018b2a:	4413      	add	r3, r2
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	f7fe ff61 	bl	80179f4 <ld_word>
 8018b32:	4603      	mov	r3, r0
 8018b34:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8018b36:	89fb      	ldrh	r3, [r7, #14]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d01a      	beq.n	8018b72 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8018b3c:	697b      	ldr	r3, [r7, #20]
 8018b3e:	2bfe      	cmp	r3, #254	; 0xfe
 8018b40:	d812      	bhi.n	8018b68 <cmp_lfn+0x88>
 8018b42:	89bb      	ldrh	r3, [r7, #12]
 8018b44:	4618      	mov	r0, r3
 8018b46:	f001 fe11 	bl	801a76c <ff_wtoupper>
 8018b4a:	4603      	mov	r3, r0
 8018b4c:	461c      	mov	r4, r3
 8018b4e:	697b      	ldr	r3, [r7, #20]
 8018b50:	1c5a      	adds	r2, r3, #1
 8018b52:	617a      	str	r2, [r7, #20]
 8018b54:	005b      	lsls	r3, r3, #1
 8018b56:	687a      	ldr	r2, [r7, #4]
 8018b58:	4413      	add	r3, r2
 8018b5a:	881b      	ldrh	r3, [r3, #0]
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	f001 fe05 	bl	801a76c <ff_wtoupper>
 8018b62:	4603      	mov	r3, r0
 8018b64:	429c      	cmp	r4, r3
 8018b66:	d001      	beq.n	8018b6c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8018b68:	2300      	movs	r3, #0
 8018b6a:	e022      	b.n	8018bb2 <cmp_lfn+0xd2>
			}
			wc = uc;
 8018b6c:	89bb      	ldrh	r3, [r7, #12]
 8018b6e:	81fb      	strh	r3, [r7, #14]
 8018b70:	e006      	b.n	8018b80 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018b72:	89bb      	ldrh	r3, [r7, #12]
 8018b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018b78:	4293      	cmp	r3, r2
 8018b7a:	d001      	beq.n	8018b80 <cmp_lfn+0xa0>
 8018b7c:	2300      	movs	r3, #0
 8018b7e:	e018      	b.n	8018bb2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018b80:	693b      	ldr	r3, [r7, #16]
 8018b82:	3301      	adds	r3, #1
 8018b84:	613b      	str	r3, [r7, #16]
 8018b86:	693b      	ldr	r3, [r7, #16]
 8018b88:	2b0c      	cmp	r3, #12
 8018b8a:	d9c8      	bls.n	8018b1e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8018b8c:	683b      	ldr	r3, [r7, #0]
 8018b8e:	781b      	ldrb	r3, [r3, #0]
 8018b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d00b      	beq.n	8018bb0 <cmp_lfn+0xd0>
 8018b98:	89fb      	ldrh	r3, [r7, #14]
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d008      	beq.n	8018bb0 <cmp_lfn+0xd0>
 8018b9e:	697b      	ldr	r3, [r7, #20]
 8018ba0:	005b      	lsls	r3, r3, #1
 8018ba2:	687a      	ldr	r2, [r7, #4]
 8018ba4:	4413      	add	r3, r2
 8018ba6:	881b      	ldrh	r3, [r3, #0]
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d001      	beq.n	8018bb0 <cmp_lfn+0xd0>
 8018bac:	2300      	movs	r3, #0
 8018bae:	e000      	b.n	8018bb2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8018bb0:	2301      	movs	r3, #1
}
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	371c      	adds	r7, #28
 8018bb6:	46bd      	mov	sp, r7
 8018bb8:	bd90      	pop	{r4, r7, pc}
 8018bba:	bf00      	nop
 8018bbc:	080204c4 	.word	0x080204c4

08018bc0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8018bc0:	b580      	push	{r7, lr}
 8018bc2:	b088      	sub	sp, #32
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	60f8      	str	r0, [r7, #12]
 8018bc8:	60b9      	str	r1, [r7, #8]
 8018bca:	4611      	mov	r1, r2
 8018bcc:	461a      	mov	r2, r3
 8018bce:	460b      	mov	r3, r1
 8018bd0:	71fb      	strb	r3, [r7, #7]
 8018bd2:	4613      	mov	r3, r2
 8018bd4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8018bd6:	68bb      	ldr	r3, [r7, #8]
 8018bd8:	330d      	adds	r3, #13
 8018bda:	79ba      	ldrb	r2, [r7, #6]
 8018bdc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8018bde:	68bb      	ldr	r3, [r7, #8]
 8018be0:	330b      	adds	r3, #11
 8018be2:	220f      	movs	r2, #15
 8018be4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8018be6:	68bb      	ldr	r3, [r7, #8]
 8018be8:	330c      	adds	r3, #12
 8018bea:	2200      	movs	r2, #0
 8018bec:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8018bee:	68bb      	ldr	r3, [r7, #8]
 8018bf0:	331a      	adds	r3, #26
 8018bf2:	2100      	movs	r1, #0
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	f7fe ff38 	bl	8017a6a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8018bfa:	79fb      	ldrb	r3, [r7, #7]
 8018bfc:	1e5a      	subs	r2, r3, #1
 8018bfe:	4613      	mov	r3, r2
 8018c00:	005b      	lsls	r3, r3, #1
 8018c02:	4413      	add	r3, r2
 8018c04:	009b      	lsls	r3, r3, #2
 8018c06:	4413      	add	r3, r2
 8018c08:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	82fb      	strh	r3, [r7, #22]
 8018c0e:	2300      	movs	r3, #0
 8018c10:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8018c12:	8afb      	ldrh	r3, [r7, #22]
 8018c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018c18:	4293      	cmp	r3, r2
 8018c1a:	d007      	beq.n	8018c2c <put_lfn+0x6c>
 8018c1c:	69fb      	ldr	r3, [r7, #28]
 8018c1e:	1c5a      	adds	r2, r3, #1
 8018c20:	61fa      	str	r2, [r7, #28]
 8018c22:	005b      	lsls	r3, r3, #1
 8018c24:	68fa      	ldr	r2, [r7, #12]
 8018c26:	4413      	add	r3, r2
 8018c28:	881b      	ldrh	r3, [r3, #0]
 8018c2a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8018c2c:	4a17      	ldr	r2, [pc, #92]	; (8018c8c <put_lfn+0xcc>)
 8018c2e:	69bb      	ldr	r3, [r7, #24]
 8018c30:	4413      	add	r3, r2
 8018c32:	781b      	ldrb	r3, [r3, #0]
 8018c34:	461a      	mov	r2, r3
 8018c36:	68bb      	ldr	r3, [r7, #8]
 8018c38:	4413      	add	r3, r2
 8018c3a:	8afa      	ldrh	r2, [r7, #22]
 8018c3c:	4611      	mov	r1, r2
 8018c3e:	4618      	mov	r0, r3
 8018c40:	f7fe ff13 	bl	8017a6a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8018c44:	8afb      	ldrh	r3, [r7, #22]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d102      	bne.n	8018c50 <put_lfn+0x90>
 8018c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c4e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8018c50:	69bb      	ldr	r3, [r7, #24]
 8018c52:	3301      	adds	r3, #1
 8018c54:	61bb      	str	r3, [r7, #24]
 8018c56:	69bb      	ldr	r3, [r7, #24]
 8018c58:	2b0c      	cmp	r3, #12
 8018c5a:	d9da      	bls.n	8018c12 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8018c5c:	8afb      	ldrh	r3, [r7, #22]
 8018c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018c62:	4293      	cmp	r3, r2
 8018c64:	d006      	beq.n	8018c74 <put_lfn+0xb4>
 8018c66:	69fb      	ldr	r3, [r7, #28]
 8018c68:	005b      	lsls	r3, r3, #1
 8018c6a:	68fa      	ldr	r2, [r7, #12]
 8018c6c:	4413      	add	r3, r2
 8018c6e:	881b      	ldrh	r3, [r3, #0]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d103      	bne.n	8018c7c <put_lfn+0xbc>
 8018c74:	79fb      	ldrb	r3, [r7, #7]
 8018c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c7a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8018c7c:	68bb      	ldr	r3, [r7, #8]
 8018c7e:	79fa      	ldrb	r2, [r7, #7]
 8018c80:	701a      	strb	r2, [r3, #0]
}
 8018c82:	bf00      	nop
 8018c84:	3720      	adds	r7, #32
 8018c86:	46bd      	mov	sp, r7
 8018c88:	bd80      	pop	{r7, pc}
 8018c8a:	bf00      	nop
 8018c8c:	080204c4 	.word	0x080204c4

08018c90 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b08c      	sub	sp, #48	; 0x30
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	60f8      	str	r0, [r7, #12]
 8018c98:	60b9      	str	r1, [r7, #8]
 8018c9a:	607a      	str	r2, [r7, #4]
 8018c9c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8018c9e:	220b      	movs	r2, #11
 8018ca0:	68b9      	ldr	r1, [r7, #8]
 8018ca2:	68f8      	ldr	r0, [r7, #12]
 8018ca4:	f7fe ff28 	bl	8017af8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8018ca8:	683b      	ldr	r3, [r7, #0]
 8018caa:	2b05      	cmp	r3, #5
 8018cac:	d929      	bls.n	8018d02 <gen_numname+0x72>
		sr = seq;
 8018cae:	683b      	ldr	r3, [r7, #0]
 8018cb0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8018cb2:	e020      	b.n	8018cf6 <gen_numname+0x66>
			wc = *lfn++;
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	1c9a      	adds	r2, r3, #2
 8018cb8:	607a      	str	r2, [r7, #4]
 8018cba:	881b      	ldrh	r3, [r3, #0]
 8018cbc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8018cbe:	2300      	movs	r3, #0
 8018cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8018cc2:	e015      	b.n	8018cf0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8018cc4:	69fb      	ldr	r3, [r7, #28]
 8018cc6:	005a      	lsls	r2, r3, #1
 8018cc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018cca:	f003 0301 	and.w	r3, r3, #1
 8018cce:	4413      	add	r3, r2
 8018cd0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8018cd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018cd4:	085b      	lsrs	r3, r3, #1
 8018cd6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8018cd8:	69fb      	ldr	r3, [r7, #28]
 8018cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d003      	beq.n	8018cea <gen_numname+0x5a>
 8018ce2:	69fa      	ldr	r2, [r7, #28]
 8018ce4:	4b30      	ldr	r3, [pc, #192]	; (8018da8 <gen_numname+0x118>)
 8018ce6:	4053      	eors	r3, r2
 8018ce8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8018cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cec:	3301      	adds	r3, #1
 8018cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8018cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cf2:	2b0f      	cmp	r3, #15
 8018cf4:	d9e6      	bls.n	8018cc4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	881b      	ldrh	r3, [r3, #0]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d1da      	bne.n	8018cb4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8018cfe:	69fb      	ldr	r3, [r7, #28]
 8018d00:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8018d02:	2307      	movs	r3, #7
 8018d04:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8018d06:	683b      	ldr	r3, [r7, #0]
 8018d08:	b2db      	uxtb	r3, r3
 8018d0a:	f003 030f 	and.w	r3, r3, #15
 8018d0e:	b2db      	uxtb	r3, r3
 8018d10:	3330      	adds	r3, #48	; 0x30
 8018d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8018d16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d1a:	2b39      	cmp	r3, #57	; 0x39
 8018d1c:	d904      	bls.n	8018d28 <gen_numname+0x98>
 8018d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d22:	3307      	adds	r3, #7
 8018d24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8018d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d2a:	1e5a      	subs	r2, r3, #1
 8018d2c:	62ba      	str	r2, [r7, #40]	; 0x28
 8018d2e:	3330      	adds	r3, #48	; 0x30
 8018d30:	443b      	add	r3, r7
 8018d32:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8018d36:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8018d3a:	683b      	ldr	r3, [r7, #0]
 8018d3c:	091b      	lsrs	r3, r3, #4
 8018d3e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8018d40:	683b      	ldr	r3, [r7, #0]
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d1df      	bne.n	8018d06 <gen_numname+0x76>
	ns[i] = '~';
 8018d46:	f107 0214 	add.w	r2, r7, #20
 8018d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d4c:	4413      	add	r3, r2
 8018d4e:	227e      	movs	r2, #126	; 0x7e
 8018d50:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8018d52:	2300      	movs	r3, #0
 8018d54:	627b      	str	r3, [r7, #36]	; 0x24
 8018d56:	e002      	b.n	8018d5e <gen_numname+0xce>
 8018d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d5a:	3301      	adds	r3, #1
 8018d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8018d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d62:	429a      	cmp	r2, r3
 8018d64:	d205      	bcs.n	8018d72 <gen_numname+0xe2>
 8018d66:	68fa      	ldr	r2, [r7, #12]
 8018d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d6a:	4413      	add	r3, r2
 8018d6c:	781b      	ldrb	r3, [r3, #0]
 8018d6e:	2b20      	cmp	r3, #32
 8018d70:	d1f2      	bne.n	8018d58 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8018d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d74:	2b07      	cmp	r3, #7
 8018d76:	d807      	bhi.n	8018d88 <gen_numname+0xf8>
 8018d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d7a:	1c5a      	adds	r2, r3, #1
 8018d7c:	62ba      	str	r2, [r7, #40]	; 0x28
 8018d7e:	3330      	adds	r3, #48	; 0x30
 8018d80:	443b      	add	r3, r7
 8018d82:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8018d86:	e000      	b.n	8018d8a <gen_numname+0xfa>
 8018d88:	2120      	movs	r1, #32
 8018d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d8c:	1c5a      	adds	r2, r3, #1
 8018d8e:	627a      	str	r2, [r7, #36]	; 0x24
 8018d90:	68fa      	ldr	r2, [r7, #12]
 8018d92:	4413      	add	r3, r2
 8018d94:	460a      	mov	r2, r1
 8018d96:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8018d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d9a:	2b07      	cmp	r3, #7
 8018d9c:	d9e9      	bls.n	8018d72 <gen_numname+0xe2>
}
 8018d9e:	bf00      	nop
 8018da0:	bf00      	nop
 8018da2:	3730      	adds	r7, #48	; 0x30
 8018da4:	46bd      	mov	sp, r7
 8018da6:	bd80      	pop	{r7, pc}
 8018da8:	00011021 	.word	0x00011021

08018dac <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8018dac:	b480      	push	{r7}
 8018dae:	b085      	sub	sp, #20
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8018db4:	2300      	movs	r3, #0
 8018db6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8018db8:	230b      	movs	r3, #11
 8018dba:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018dbc:	7bfb      	ldrb	r3, [r7, #15]
 8018dbe:	b2da      	uxtb	r2, r3
 8018dc0:	0852      	lsrs	r2, r2, #1
 8018dc2:	01db      	lsls	r3, r3, #7
 8018dc4:	4313      	orrs	r3, r2
 8018dc6:	b2da      	uxtb	r2, r3
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	1c59      	adds	r1, r3, #1
 8018dcc:	6079      	str	r1, [r7, #4]
 8018dce:	781b      	ldrb	r3, [r3, #0]
 8018dd0:	4413      	add	r3, r2
 8018dd2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8018dd4:	68bb      	ldr	r3, [r7, #8]
 8018dd6:	3b01      	subs	r3, #1
 8018dd8:	60bb      	str	r3, [r7, #8]
 8018dda:	68bb      	ldr	r3, [r7, #8]
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d1ed      	bne.n	8018dbc <sum_sfn+0x10>
	return sum;
 8018de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8018de2:	4618      	mov	r0, r3
 8018de4:	3714      	adds	r7, #20
 8018de6:	46bd      	mov	sp, r7
 8018de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dec:	4770      	bx	lr

08018dee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8018dee:	b580      	push	{r7, lr}
 8018df0:	b086      	sub	sp, #24
 8018df2:	af00      	add	r7, sp, #0
 8018df4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8018dfc:	2100      	movs	r1, #0
 8018dfe:	6878      	ldr	r0, [r7, #4]
 8018e00:	f7ff fc88 	bl	8018714 <dir_sdi>
 8018e04:	4603      	mov	r3, r0
 8018e06:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8018e08:	7dfb      	ldrb	r3, [r7, #23]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d001      	beq.n	8018e12 <dir_find+0x24>
 8018e0e:	7dfb      	ldrb	r3, [r7, #23]
 8018e10:	e0a9      	b.n	8018f66 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018e12:	23ff      	movs	r3, #255	; 0xff
 8018e14:	753b      	strb	r3, [r7, #20]
 8018e16:	7d3b      	ldrb	r3, [r7, #20]
 8018e18:	757b      	strb	r3, [r7, #21]
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8018e20:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	69db      	ldr	r3, [r3, #28]
 8018e26:	4619      	mov	r1, r3
 8018e28:	6938      	ldr	r0, [r7, #16]
 8018e2a:	f7ff f893 	bl	8017f54 <move_window>
 8018e2e:	4603      	mov	r3, r0
 8018e30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8018e32:	7dfb      	ldrb	r3, [r7, #23]
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	f040 8090 	bne.w	8018f5a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	6a1b      	ldr	r3, [r3, #32]
 8018e3e:	781b      	ldrb	r3, [r3, #0]
 8018e40:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018e42:	7dbb      	ldrb	r3, [r7, #22]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d102      	bne.n	8018e4e <dir_find+0x60>
 8018e48:	2304      	movs	r3, #4
 8018e4a:	75fb      	strb	r3, [r7, #23]
 8018e4c:	e08a      	b.n	8018f64 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	6a1b      	ldr	r3, [r3, #32]
 8018e52:	330b      	adds	r3, #11
 8018e54:	781b      	ldrb	r3, [r3, #0]
 8018e56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018e5a:	73fb      	strb	r3, [r7, #15]
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	7bfa      	ldrb	r2, [r7, #15]
 8018e60:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8018e62:	7dbb      	ldrb	r3, [r7, #22]
 8018e64:	2be5      	cmp	r3, #229	; 0xe5
 8018e66:	d007      	beq.n	8018e78 <dir_find+0x8a>
 8018e68:	7bfb      	ldrb	r3, [r7, #15]
 8018e6a:	f003 0308 	and.w	r3, r3, #8
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d009      	beq.n	8018e86 <dir_find+0x98>
 8018e72:	7bfb      	ldrb	r3, [r7, #15]
 8018e74:	2b0f      	cmp	r3, #15
 8018e76:	d006      	beq.n	8018e86 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018e78:	23ff      	movs	r3, #255	; 0xff
 8018e7a:	757b      	strb	r3, [r7, #21]
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8018e82:	631a      	str	r2, [r3, #48]	; 0x30
 8018e84:	e05e      	b.n	8018f44 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8018e86:	7bfb      	ldrb	r3, [r7, #15]
 8018e88:	2b0f      	cmp	r3, #15
 8018e8a:	d136      	bne.n	8018efa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d154      	bne.n	8018f44 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8018e9a:	7dbb      	ldrb	r3, [r7, #22]
 8018e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d00d      	beq.n	8018ec0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	6a1b      	ldr	r3, [r3, #32]
 8018ea8:	7b5b      	ldrb	r3, [r3, #13]
 8018eaa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8018eac:	7dbb      	ldrb	r3, [r7, #22]
 8018eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018eb2:	75bb      	strb	r3, [r7, #22]
 8018eb4:	7dbb      	ldrb	r3, [r7, #22]
 8018eb6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	695a      	ldr	r2, [r3, #20]
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018ec0:	7dba      	ldrb	r2, [r7, #22]
 8018ec2:	7d7b      	ldrb	r3, [r7, #21]
 8018ec4:	429a      	cmp	r2, r3
 8018ec6:	d115      	bne.n	8018ef4 <dir_find+0x106>
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	6a1b      	ldr	r3, [r3, #32]
 8018ecc:	330d      	adds	r3, #13
 8018ece:	781b      	ldrb	r3, [r3, #0]
 8018ed0:	7d3a      	ldrb	r2, [r7, #20]
 8018ed2:	429a      	cmp	r2, r3
 8018ed4:	d10e      	bne.n	8018ef4 <dir_find+0x106>
 8018ed6:	693b      	ldr	r3, [r7, #16]
 8018ed8:	691a      	ldr	r2, [r3, #16]
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	6a1b      	ldr	r3, [r3, #32]
 8018ede:	4619      	mov	r1, r3
 8018ee0:	4610      	mov	r0, r2
 8018ee2:	f7ff fdfd 	bl	8018ae0 <cmp_lfn>
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d003      	beq.n	8018ef4 <dir_find+0x106>
 8018eec:	7d7b      	ldrb	r3, [r7, #21]
 8018eee:	3b01      	subs	r3, #1
 8018ef0:	b2db      	uxtb	r3, r3
 8018ef2:	e000      	b.n	8018ef6 <dir_find+0x108>
 8018ef4:	23ff      	movs	r3, #255	; 0xff
 8018ef6:	757b      	strb	r3, [r7, #21]
 8018ef8:	e024      	b.n	8018f44 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018efa:	7d7b      	ldrb	r3, [r7, #21]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d109      	bne.n	8018f14 <dir_find+0x126>
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	6a1b      	ldr	r3, [r3, #32]
 8018f04:	4618      	mov	r0, r3
 8018f06:	f7ff ff51 	bl	8018dac <sum_sfn>
 8018f0a:	4603      	mov	r3, r0
 8018f0c:	461a      	mov	r2, r3
 8018f0e:	7d3b      	ldrb	r3, [r7, #20]
 8018f10:	4293      	cmp	r3, r2
 8018f12:	d024      	beq.n	8018f5e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018f1a:	f003 0301 	and.w	r3, r3, #1
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d10a      	bne.n	8018f38 <dir_find+0x14a>
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	6a18      	ldr	r0, [r3, #32]
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	3324      	adds	r3, #36	; 0x24
 8018f2a:	220b      	movs	r2, #11
 8018f2c:	4619      	mov	r1, r3
 8018f2e:	f7fe fe1f 	bl	8017b70 <mem_cmp>
 8018f32:	4603      	mov	r3, r0
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d014      	beq.n	8018f62 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018f38:	23ff      	movs	r3, #255	; 0xff
 8018f3a:	757b      	strb	r3, [r7, #21]
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8018f42:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8018f44:	2100      	movs	r1, #0
 8018f46:	6878      	ldr	r0, [r7, #4]
 8018f48:	f7ff fc6d 	bl	8018826 <dir_next>
 8018f4c:	4603      	mov	r3, r0
 8018f4e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018f50:	7dfb      	ldrb	r3, [r7, #23]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	f43f af65 	beq.w	8018e22 <dir_find+0x34>
 8018f58:	e004      	b.n	8018f64 <dir_find+0x176>
		if (res != FR_OK) break;
 8018f5a:	bf00      	nop
 8018f5c:	e002      	b.n	8018f64 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018f5e:	bf00      	nop
 8018f60:	e000      	b.n	8018f64 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018f62:	bf00      	nop

	return res;
 8018f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8018f66:	4618      	mov	r0, r3
 8018f68:	3718      	adds	r7, #24
 8018f6a:	46bd      	mov	sp, r7
 8018f6c:	bd80      	pop	{r7, pc}
	...

08018f70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018f70:	b580      	push	{r7, lr}
 8018f72:	b08c      	sub	sp, #48	; 0x30
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018f84:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d001      	beq.n	8018f90 <dir_register+0x20>
 8018f8c:	2306      	movs	r3, #6
 8018f8e:	e0e0      	b.n	8019152 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018f90:	2300      	movs	r3, #0
 8018f92:	627b      	str	r3, [r7, #36]	; 0x24
 8018f94:	e002      	b.n	8018f9c <dir_register+0x2c>
 8018f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f98:	3301      	adds	r3, #1
 8018f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8018f9c:	69fb      	ldr	r3, [r7, #28]
 8018f9e:	691a      	ldr	r2, [r3, #16]
 8018fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fa2:	005b      	lsls	r3, r3, #1
 8018fa4:	4413      	add	r3, r2
 8018fa6:	881b      	ldrh	r3, [r3, #0]
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d1f4      	bne.n	8018f96 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8018fb2:	f107 030c 	add.w	r3, r7, #12
 8018fb6:	220c      	movs	r2, #12
 8018fb8:	4618      	mov	r0, r3
 8018fba:	f7fe fd9d 	bl	8017af8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8018fbe:	7dfb      	ldrb	r3, [r7, #23]
 8018fc0:	f003 0301 	and.w	r3, r3, #1
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d032      	beq.n	801902e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	2240      	movs	r2, #64	; 0x40
 8018fcc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8018fd0:	2301      	movs	r3, #1
 8018fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8018fd4:	e016      	b.n	8019004 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8018fdc:	69fb      	ldr	r3, [r7, #28]
 8018fde:	691a      	ldr	r2, [r3, #16]
 8018fe0:	f107 010c 	add.w	r1, r7, #12
 8018fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fe6:	f7ff fe53 	bl	8018c90 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8018fea:	6878      	ldr	r0, [r7, #4]
 8018fec:	f7ff feff 	bl	8018dee <dir_find>
 8018ff0:	4603      	mov	r3, r0
 8018ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8018ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d106      	bne.n	801900c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8018ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019000:	3301      	adds	r3, #1
 8019002:	62bb      	str	r3, [r7, #40]	; 0x28
 8019004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019006:	2b63      	cmp	r3, #99	; 0x63
 8019008:	d9e5      	bls.n	8018fd6 <dir_register+0x66>
 801900a:	e000      	b.n	801900e <dir_register+0x9e>
			if (res != FR_OK) break;
 801900c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801900e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019010:	2b64      	cmp	r3, #100	; 0x64
 8019012:	d101      	bne.n	8019018 <dir_register+0xa8>
 8019014:	2307      	movs	r3, #7
 8019016:	e09c      	b.n	8019152 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8019018:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801901c:	2b04      	cmp	r3, #4
 801901e:	d002      	beq.n	8019026 <dir_register+0xb6>
 8019020:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019024:	e095      	b.n	8019152 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8019026:	7dfa      	ldrb	r2, [r7, #23]
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801902e:	7dfb      	ldrb	r3, [r7, #23]
 8019030:	f003 0302 	and.w	r3, r3, #2
 8019034:	2b00      	cmp	r3, #0
 8019036:	d007      	beq.n	8019048 <dir_register+0xd8>
 8019038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801903a:	330c      	adds	r3, #12
 801903c:	4a47      	ldr	r2, [pc, #284]	; (801915c <dir_register+0x1ec>)
 801903e:	fba2 2303 	umull	r2, r3, r2, r3
 8019042:	089b      	lsrs	r3, r3, #2
 8019044:	3301      	adds	r3, #1
 8019046:	e000      	b.n	801904a <dir_register+0xda>
 8019048:	2301      	movs	r3, #1
 801904a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801904c:	6a39      	ldr	r1, [r7, #32]
 801904e:	6878      	ldr	r0, [r7, #4]
 8019050:	f7ff fcbf 	bl	80189d2 <dir_alloc>
 8019054:	4603      	mov	r3, r0
 8019056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801905a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801905e:	2b00      	cmp	r3, #0
 8019060:	d148      	bne.n	80190f4 <dir_register+0x184>
 8019062:	6a3b      	ldr	r3, [r7, #32]
 8019064:	3b01      	subs	r3, #1
 8019066:	623b      	str	r3, [r7, #32]
 8019068:	6a3b      	ldr	r3, [r7, #32]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d042      	beq.n	80190f4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	695a      	ldr	r2, [r3, #20]
 8019072:	6a3b      	ldr	r3, [r7, #32]
 8019074:	015b      	lsls	r3, r3, #5
 8019076:	1ad3      	subs	r3, r2, r3
 8019078:	4619      	mov	r1, r3
 801907a:	6878      	ldr	r0, [r7, #4]
 801907c:	f7ff fb4a 	bl	8018714 <dir_sdi>
 8019080:	4603      	mov	r3, r0
 8019082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8019086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801908a:	2b00      	cmp	r3, #0
 801908c:	d132      	bne.n	80190f4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	3324      	adds	r3, #36	; 0x24
 8019092:	4618      	mov	r0, r3
 8019094:	f7ff fe8a 	bl	8018dac <sum_sfn>
 8019098:	4603      	mov	r3, r0
 801909a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	69db      	ldr	r3, [r3, #28]
 80190a0:	4619      	mov	r1, r3
 80190a2:	69f8      	ldr	r0, [r7, #28]
 80190a4:	f7fe ff56 	bl	8017f54 <move_window>
 80190a8:	4603      	mov	r3, r0
 80190aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80190ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d11d      	bne.n	80190f2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80190b6:	69fb      	ldr	r3, [r7, #28]
 80190b8:	6918      	ldr	r0, [r3, #16]
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	6a19      	ldr	r1, [r3, #32]
 80190be:	6a3b      	ldr	r3, [r7, #32]
 80190c0:	b2da      	uxtb	r2, r3
 80190c2:	7efb      	ldrb	r3, [r7, #27]
 80190c4:	f7ff fd7c 	bl	8018bc0 <put_lfn>
				fs->wflag = 1;
 80190c8:	69fb      	ldr	r3, [r7, #28]
 80190ca:	2201      	movs	r2, #1
 80190cc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80190ce:	2100      	movs	r1, #0
 80190d0:	6878      	ldr	r0, [r7, #4]
 80190d2:	f7ff fba8 	bl	8018826 <dir_next>
 80190d6:	4603      	mov	r3, r0
 80190d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80190dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d107      	bne.n	80190f4 <dir_register+0x184>
 80190e4:	6a3b      	ldr	r3, [r7, #32]
 80190e6:	3b01      	subs	r3, #1
 80190e8:	623b      	str	r3, [r7, #32]
 80190ea:	6a3b      	ldr	r3, [r7, #32]
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d1d5      	bne.n	801909c <dir_register+0x12c>
 80190f0:	e000      	b.n	80190f4 <dir_register+0x184>
				if (res != FR_OK) break;
 80190f2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80190f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d128      	bne.n	801914e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	69db      	ldr	r3, [r3, #28]
 8019100:	4619      	mov	r1, r3
 8019102:	69f8      	ldr	r0, [r7, #28]
 8019104:	f7fe ff26 	bl	8017f54 <move_window>
 8019108:	4603      	mov	r3, r0
 801910a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801910e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019112:	2b00      	cmp	r3, #0
 8019114:	d11b      	bne.n	801914e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	6a1b      	ldr	r3, [r3, #32]
 801911a:	2220      	movs	r2, #32
 801911c:	2100      	movs	r1, #0
 801911e:	4618      	mov	r0, r3
 8019120:	f7fe fd0b 	bl	8017b3a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	6a18      	ldr	r0, [r3, #32]
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	3324      	adds	r3, #36	; 0x24
 801912c:	220b      	movs	r2, #11
 801912e:	4619      	mov	r1, r3
 8019130:	f7fe fce2 	bl	8017af8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	6a1b      	ldr	r3, [r3, #32]
 801913e:	330c      	adds	r3, #12
 8019140:	f002 0218 	and.w	r2, r2, #24
 8019144:	b2d2      	uxtb	r2, r2
 8019146:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8019148:	69fb      	ldr	r3, [r7, #28]
 801914a:	2201      	movs	r2, #1
 801914c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801914e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8019152:	4618      	mov	r0, r3
 8019154:	3730      	adds	r7, #48	; 0x30
 8019156:	46bd      	mov	sp, r7
 8019158:	bd80      	pop	{r7, pc}
 801915a:	bf00      	nop
 801915c:	4ec4ec4f 	.word	0x4ec4ec4f

08019160 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8019160:	b580      	push	{r7, lr}
 8019162:	b08a      	sub	sp, #40	; 0x28
 8019164:	af00      	add	r7, sp, #0
 8019166:	6078      	str	r0, [r7, #4]
 8019168:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801916a:	683b      	ldr	r3, [r7, #0]
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	613b      	str	r3, [r7, #16]
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	691b      	ldr	r3, [r3, #16]
 8019176:	60fb      	str	r3, [r7, #12]
 8019178:	2300      	movs	r3, #0
 801917a:	617b      	str	r3, [r7, #20]
 801917c:	697b      	ldr	r3, [r7, #20]
 801917e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8019180:	69bb      	ldr	r3, [r7, #24]
 8019182:	1c5a      	adds	r2, r3, #1
 8019184:	61ba      	str	r2, [r7, #24]
 8019186:	693a      	ldr	r2, [r7, #16]
 8019188:	4413      	add	r3, r2
 801918a:	781b      	ldrb	r3, [r3, #0]
 801918c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801918e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019190:	2b1f      	cmp	r3, #31
 8019192:	d940      	bls.n	8019216 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8019194:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019196:	2b2f      	cmp	r3, #47	; 0x2f
 8019198:	d006      	beq.n	80191a8 <create_name+0x48>
 801919a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801919c:	2b5c      	cmp	r3, #92	; 0x5c
 801919e:	d110      	bne.n	80191c2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80191a0:	e002      	b.n	80191a8 <create_name+0x48>
 80191a2:	69bb      	ldr	r3, [r7, #24]
 80191a4:	3301      	adds	r3, #1
 80191a6:	61bb      	str	r3, [r7, #24]
 80191a8:	693a      	ldr	r2, [r7, #16]
 80191aa:	69bb      	ldr	r3, [r7, #24]
 80191ac:	4413      	add	r3, r2
 80191ae:	781b      	ldrb	r3, [r3, #0]
 80191b0:	2b2f      	cmp	r3, #47	; 0x2f
 80191b2:	d0f6      	beq.n	80191a2 <create_name+0x42>
 80191b4:	693a      	ldr	r2, [r7, #16]
 80191b6:	69bb      	ldr	r3, [r7, #24]
 80191b8:	4413      	add	r3, r2
 80191ba:	781b      	ldrb	r3, [r3, #0]
 80191bc:	2b5c      	cmp	r3, #92	; 0x5c
 80191be:	d0f0      	beq.n	80191a2 <create_name+0x42>
			break;
 80191c0:	e02a      	b.n	8019218 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80191c2:	697b      	ldr	r3, [r7, #20]
 80191c4:	2bfe      	cmp	r3, #254	; 0xfe
 80191c6:	d901      	bls.n	80191cc <create_name+0x6c>
 80191c8:	2306      	movs	r3, #6
 80191ca:	e17d      	b.n	80194c8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80191cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80191ce:	b2db      	uxtb	r3, r3
 80191d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80191d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80191d4:	2101      	movs	r1, #1
 80191d6:	4618      	mov	r0, r3
 80191d8:	f001 fa8c 	bl	801a6f4 <ff_convert>
 80191dc:	4603      	mov	r3, r0
 80191de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80191e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d101      	bne.n	80191ea <create_name+0x8a>
 80191e6:	2306      	movs	r3, #6
 80191e8:	e16e      	b.n	80194c8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80191ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80191ec:	2b7f      	cmp	r3, #127	; 0x7f
 80191ee:	d809      	bhi.n	8019204 <create_name+0xa4>
 80191f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80191f2:	4619      	mov	r1, r3
 80191f4:	488d      	ldr	r0, [pc, #564]	; (801942c <create_name+0x2cc>)
 80191f6:	f7fe fce2 	bl	8017bbe <chk_chr>
 80191fa:	4603      	mov	r3, r0
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	d001      	beq.n	8019204 <create_name+0xa4>
 8019200:	2306      	movs	r3, #6
 8019202:	e161      	b.n	80194c8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8019204:	697b      	ldr	r3, [r7, #20]
 8019206:	1c5a      	adds	r2, r3, #1
 8019208:	617a      	str	r2, [r7, #20]
 801920a:	005b      	lsls	r3, r3, #1
 801920c:	68fa      	ldr	r2, [r7, #12]
 801920e:	4413      	add	r3, r2
 8019210:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019212:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8019214:	e7b4      	b.n	8019180 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8019216:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8019218:	693a      	ldr	r2, [r7, #16]
 801921a:	69bb      	ldr	r3, [r7, #24]
 801921c:	441a      	add	r2, r3
 801921e:	683b      	ldr	r3, [r7, #0]
 8019220:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8019222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019224:	2b1f      	cmp	r3, #31
 8019226:	d801      	bhi.n	801922c <create_name+0xcc>
 8019228:	2304      	movs	r3, #4
 801922a:	e000      	b.n	801922e <create_name+0xce>
 801922c:	2300      	movs	r3, #0
 801922e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8019232:	e011      	b.n	8019258 <create_name+0xf8>
		w = lfn[di - 1];
 8019234:	697a      	ldr	r2, [r7, #20]
 8019236:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801923a:	4413      	add	r3, r2
 801923c:	005b      	lsls	r3, r3, #1
 801923e:	68fa      	ldr	r2, [r7, #12]
 8019240:	4413      	add	r3, r2
 8019242:	881b      	ldrh	r3, [r3, #0]
 8019244:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8019246:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019248:	2b20      	cmp	r3, #32
 801924a:	d002      	beq.n	8019252 <create_name+0xf2>
 801924c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801924e:	2b2e      	cmp	r3, #46	; 0x2e
 8019250:	d106      	bne.n	8019260 <create_name+0x100>
		di--;
 8019252:	697b      	ldr	r3, [r7, #20]
 8019254:	3b01      	subs	r3, #1
 8019256:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8019258:	697b      	ldr	r3, [r7, #20]
 801925a:	2b00      	cmp	r3, #0
 801925c:	d1ea      	bne.n	8019234 <create_name+0xd4>
 801925e:	e000      	b.n	8019262 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8019260:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8019262:	697b      	ldr	r3, [r7, #20]
 8019264:	005b      	lsls	r3, r3, #1
 8019266:	68fa      	ldr	r2, [r7, #12]
 8019268:	4413      	add	r3, r2
 801926a:	2200      	movs	r2, #0
 801926c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801926e:	697b      	ldr	r3, [r7, #20]
 8019270:	2b00      	cmp	r3, #0
 8019272:	d101      	bne.n	8019278 <create_name+0x118>
 8019274:	2306      	movs	r3, #6
 8019276:	e127      	b.n	80194c8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	3324      	adds	r3, #36	; 0x24
 801927c:	220b      	movs	r2, #11
 801927e:	2120      	movs	r1, #32
 8019280:	4618      	mov	r0, r3
 8019282:	f7fe fc5a 	bl	8017b3a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8019286:	2300      	movs	r3, #0
 8019288:	61bb      	str	r3, [r7, #24]
 801928a:	e002      	b.n	8019292 <create_name+0x132>
 801928c:	69bb      	ldr	r3, [r7, #24]
 801928e:	3301      	adds	r3, #1
 8019290:	61bb      	str	r3, [r7, #24]
 8019292:	69bb      	ldr	r3, [r7, #24]
 8019294:	005b      	lsls	r3, r3, #1
 8019296:	68fa      	ldr	r2, [r7, #12]
 8019298:	4413      	add	r3, r2
 801929a:	881b      	ldrh	r3, [r3, #0]
 801929c:	2b20      	cmp	r3, #32
 801929e:	d0f5      	beq.n	801928c <create_name+0x12c>
 80192a0:	69bb      	ldr	r3, [r7, #24]
 80192a2:	005b      	lsls	r3, r3, #1
 80192a4:	68fa      	ldr	r2, [r7, #12]
 80192a6:	4413      	add	r3, r2
 80192a8:	881b      	ldrh	r3, [r3, #0]
 80192aa:	2b2e      	cmp	r3, #46	; 0x2e
 80192ac:	d0ee      	beq.n	801928c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80192ae:	69bb      	ldr	r3, [r7, #24]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d009      	beq.n	80192c8 <create_name+0x168>
 80192b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192b8:	f043 0303 	orr.w	r3, r3, #3
 80192bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80192c0:	e002      	b.n	80192c8 <create_name+0x168>
 80192c2:	697b      	ldr	r3, [r7, #20]
 80192c4:	3b01      	subs	r3, #1
 80192c6:	617b      	str	r3, [r7, #20]
 80192c8:	697b      	ldr	r3, [r7, #20]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d009      	beq.n	80192e2 <create_name+0x182>
 80192ce:	697a      	ldr	r2, [r7, #20]
 80192d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80192d4:	4413      	add	r3, r2
 80192d6:	005b      	lsls	r3, r3, #1
 80192d8:	68fa      	ldr	r2, [r7, #12]
 80192da:	4413      	add	r3, r2
 80192dc:	881b      	ldrh	r3, [r3, #0]
 80192de:	2b2e      	cmp	r3, #46	; 0x2e
 80192e0:	d1ef      	bne.n	80192c2 <create_name+0x162>

	i = b = 0; ni = 8;
 80192e2:	2300      	movs	r3, #0
 80192e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80192e8:	2300      	movs	r3, #0
 80192ea:	623b      	str	r3, [r7, #32]
 80192ec:	2308      	movs	r3, #8
 80192ee:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80192f0:	69bb      	ldr	r3, [r7, #24]
 80192f2:	1c5a      	adds	r2, r3, #1
 80192f4:	61ba      	str	r2, [r7, #24]
 80192f6:	005b      	lsls	r3, r3, #1
 80192f8:	68fa      	ldr	r2, [r7, #12]
 80192fa:	4413      	add	r3, r2
 80192fc:	881b      	ldrh	r3, [r3, #0]
 80192fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8019300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019302:	2b00      	cmp	r3, #0
 8019304:	f000 8090 	beq.w	8019428 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8019308:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801930a:	2b20      	cmp	r3, #32
 801930c:	d006      	beq.n	801931c <create_name+0x1bc>
 801930e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019310:	2b2e      	cmp	r3, #46	; 0x2e
 8019312:	d10a      	bne.n	801932a <create_name+0x1ca>
 8019314:	69ba      	ldr	r2, [r7, #24]
 8019316:	697b      	ldr	r3, [r7, #20]
 8019318:	429a      	cmp	r2, r3
 801931a:	d006      	beq.n	801932a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801931c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019320:	f043 0303 	orr.w	r3, r3, #3
 8019324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019328:	e07d      	b.n	8019426 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801932a:	6a3a      	ldr	r2, [r7, #32]
 801932c:	69fb      	ldr	r3, [r7, #28]
 801932e:	429a      	cmp	r2, r3
 8019330:	d203      	bcs.n	801933a <create_name+0x1da>
 8019332:	69ba      	ldr	r2, [r7, #24]
 8019334:	697b      	ldr	r3, [r7, #20]
 8019336:	429a      	cmp	r2, r3
 8019338:	d123      	bne.n	8019382 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801933a:	69fb      	ldr	r3, [r7, #28]
 801933c:	2b0b      	cmp	r3, #11
 801933e:	d106      	bne.n	801934e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8019340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019344:	f043 0303 	orr.w	r3, r3, #3
 8019348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801934c:	e075      	b.n	801943a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801934e:	69ba      	ldr	r2, [r7, #24]
 8019350:	697b      	ldr	r3, [r7, #20]
 8019352:	429a      	cmp	r2, r3
 8019354:	d005      	beq.n	8019362 <create_name+0x202>
 8019356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801935a:	f043 0303 	orr.w	r3, r3, #3
 801935e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8019362:	69ba      	ldr	r2, [r7, #24]
 8019364:	697b      	ldr	r3, [r7, #20]
 8019366:	429a      	cmp	r2, r3
 8019368:	d866      	bhi.n	8019438 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801936a:	697b      	ldr	r3, [r7, #20]
 801936c:	61bb      	str	r3, [r7, #24]
 801936e:	2308      	movs	r3, #8
 8019370:	623b      	str	r3, [r7, #32]
 8019372:	230b      	movs	r3, #11
 8019374:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8019376:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801937a:	009b      	lsls	r3, r3, #2
 801937c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019380:	e051      	b.n	8019426 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8019382:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019384:	2b7f      	cmp	r3, #127	; 0x7f
 8019386:	d914      	bls.n	80193b2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8019388:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801938a:	2100      	movs	r1, #0
 801938c:	4618      	mov	r0, r3
 801938e:	f001 f9b1 	bl	801a6f4 <ff_convert>
 8019392:	4603      	mov	r3, r0
 8019394:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8019396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019398:	2b00      	cmp	r3, #0
 801939a:	d004      	beq.n	80193a6 <create_name+0x246>
 801939c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801939e:	3b80      	subs	r3, #128	; 0x80
 80193a0:	4a23      	ldr	r2, [pc, #140]	; (8019430 <create_name+0x2d0>)
 80193a2:	5cd3      	ldrb	r3, [r2, r3]
 80193a4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80193a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193aa:	f043 0302 	orr.w	r3, r3, #2
 80193ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80193b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d007      	beq.n	80193c8 <create_name+0x268>
 80193b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80193ba:	4619      	mov	r1, r3
 80193bc:	481d      	ldr	r0, [pc, #116]	; (8019434 <create_name+0x2d4>)
 80193be:	f7fe fbfe 	bl	8017bbe <chk_chr>
 80193c2:	4603      	mov	r3, r0
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d008      	beq.n	80193da <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80193c8:	235f      	movs	r3, #95	; 0x5f
 80193ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80193cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193d0:	f043 0303 	orr.w	r3, r3, #3
 80193d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80193d8:	e01b      	b.n	8019412 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80193da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80193dc:	2b40      	cmp	r3, #64	; 0x40
 80193de:	d909      	bls.n	80193f4 <create_name+0x294>
 80193e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80193e2:	2b5a      	cmp	r3, #90	; 0x5a
 80193e4:	d806      	bhi.n	80193f4 <create_name+0x294>
					b |= 2;
 80193e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80193ea:	f043 0302 	orr.w	r3, r3, #2
 80193ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80193f2:	e00e      	b.n	8019412 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80193f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80193f6:	2b60      	cmp	r3, #96	; 0x60
 80193f8:	d90b      	bls.n	8019412 <create_name+0x2b2>
 80193fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80193fc:	2b7a      	cmp	r3, #122	; 0x7a
 80193fe:	d808      	bhi.n	8019412 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8019400:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019404:	f043 0301 	orr.w	r3, r3, #1
 8019408:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801940c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801940e:	3b20      	subs	r3, #32
 8019410:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8019412:	6a3b      	ldr	r3, [r7, #32]
 8019414:	1c5a      	adds	r2, r3, #1
 8019416:	623a      	str	r2, [r7, #32]
 8019418:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801941a:	b2d1      	uxtb	r1, r2
 801941c:	687a      	ldr	r2, [r7, #4]
 801941e:	4413      	add	r3, r2
 8019420:	460a      	mov	r2, r1
 8019422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8019426:	e763      	b.n	80192f0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8019428:	bf00      	nop
 801942a:	e006      	b.n	801943a <create_name+0x2da>
 801942c:	080202f0 	.word	0x080202f0
 8019430:	08020444 	.word	0x08020444
 8019434:	080202fc 	.word	0x080202fc
			if (si > di) break;			/* No extension */
 8019438:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019440:	2be5      	cmp	r3, #229	; 0xe5
 8019442:	d103      	bne.n	801944c <create_name+0x2ec>
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	2205      	movs	r2, #5
 8019448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 801944c:	69fb      	ldr	r3, [r7, #28]
 801944e:	2b08      	cmp	r3, #8
 8019450:	d104      	bne.n	801945c <create_name+0x2fc>
 8019452:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019456:	009b      	lsls	r3, r3, #2
 8019458:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801945c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019460:	f003 030c 	and.w	r3, r3, #12
 8019464:	2b0c      	cmp	r3, #12
 8019466:	d005      	beq.n	8019474 <create_name+0x314>
 8019468:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801946c:	f003 0303 	and.w	r3, r3, #3
 8019470:	2b03      	cmp	r3, #3
 8019472:	d105      	bne.n	8019480 <create_name+0x320>
 8019474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019478:	f043 0302 	orr.w	r3, r3, #2
 801947c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8019480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019484:	f003 0302 	and.w	r3, r3, #2
 8019488:	2b00      	cmp	r3, #0
 801948a:	d117      	bne.n	80194bc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801948c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019490:	f003 0303 	and.w	r3, r3, #3
 8019494:	2b01      	cmp	r3, #1
 8019496:	d105      	bne.n	80194a4 <create_name+0x344>
 8019498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801949c:	f043 0310 	orr.w	r3, r3, #16
 80194a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80194a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80194a8:	f003 030c 	and.w	r3, r3, #12
 80194ac:	2b04      	cmp	r3, #4
 80194ae:	d105      	bne.n	80194bc <create_name+0x35c>
 80194b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80194b4:	f043 0308 	orr.w	r3, r3, #8
 80194b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80194c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80194c6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80194c8:	4618      	mov	r0, r3
 80194ca:	3728      	adds	r7, #40	; 0x28
 80194cc:	46bd      	mov	sp, r7
 80194ce:	bd80      	pop	{r7, pc}

080194d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80194d0:	b580      	push	{r7, lr}
 80194d2:	b086      	sub	sp, #24
 80194d4:	af00      	add	r7, sp, #0
 80194d6:	6078      	str	r0, [r7, #4]
 80194d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80194de:	693b      	ldr	r3, [r7, #16]
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80194e4:	e002      	b.n	80194ec <follow_path+0x1c>
 80194e6:	683b      	ldr	r3, [r7, #0]
 80194e8:	3301      	adds	r3, #1
 80194ea:	603b      	str	r3, [r7, #0]
 80194ec:	683b      	ldr	r3, [r7, #0]
 80194ee:	781b      	ldrb	r3, [r3, #0]
 80194f0:	2b2f      	cmp	r3, #47	; 0x2f
 80194f2:	d0f8      	beq.n	80194e6 <follow_path+0x16>
 80194f4:	683b      	ldr	r3, [r7, #0]
 80194f6:	781b      	ldrb	r3, [r3, #0]
 80194f8:	2b5c      	cmp	r3, #92	; 0x5c
 80194fa:	d0f4      	beq.n	80194e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80194fc:	693b      	ldr	r3, [r7, #16]
 80194fe:	2200      	movs	r2, #0
 8019500:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8019502:	683b      	ldr	r3, [r7, #0]
 8019504:	781b      	ldrb	r3, [r3, #0]
 8019506:	2b1f      	cmp	r3, #31
 8019508:	d80a      	bhi.n	8019520 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	2280      	movs	r2, #128	; 0x80
 801950e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8019512:	2100      	movs	r1, #0
 8019514:	6878      	ldr	r0, [r7, #4]
 8019516:	f7ff f8fd 	bl	8018714 <dir_sdi>
 801951a:	4603      	mov	r3, r0
 801951c:	75fb      	strb	r3, [r7, #23]
 801951e:	e048      	b.n	80195b2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8019520:	463b      	mov	r3, r7
 8019522:	4619      	mov	r1, r3
 8019524:	6878      	ldr	r0, [r7, #4]
 8019526:	f7ff fe1b 	bl	8019160 <create_name>
 801952a:	4603      	mov	r3, r0
 801952c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801952e:	7dfb      	ldrb	r3, [r7, #23]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d139      	bne.n	80195a8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8019534:	6878      	ldr	r0, [r7, #4]
 8019536:	f7ff fc5a 	bl	8018dee <dir_find>
 801953a:	4603      	mov	r3, r0
 801953c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019544:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8019546:	7dfb      	ldrb	r3, [r7, #23]
 8019548:	2b00      	cmp	r3, #0
 801954a:	d00a      	beq.n	8019562 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801954c:	7dfb      	ldrb	r3, [r7, #23]
 801954e:	2b04      	cmp	r3, #4
 8019550:	d12c      	bne.n	80195ac <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8019552:	7afb      	ldrb	r3, [r7, #11]
 8019554:	f003 0304 	and.w	r3, r3, #4
 8019558:	2b00      	cmp	r3, #0
 801955a:	d127      	bne.n	80195ac <follow_path+0xdc>
 801955c:	2305      	movs	r3, #5
 801955e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8019560:	e024      	b.n	80195ac <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8019562:	7afb      	ldrb	r3, [r7, #11]
 8019564:	f003 0304 	and.w	r3, r3, #4
 8019568:	2b00      	cmp	r3, #0
 801956a:	d121      	bne.n	80195b0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801956c:	693b      	ldr	r3, [r7, #16]
 801956e:	799b      	ldrb	r3, [r3, #6]
 8019570:	f003 0310 	and.w	r3, r3, #16
 8019574:	2b00      	cmp	r3, #0
 8019576:	d102      	bne.n	801957e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8019578:	2305      	movs	r3, #5
 801957a:	75fb      	strb	r3, [r7, #23]
 801957c:	e019      	b.n	80195b2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801957e:	68fb      	ldr	r3, [r7, #12]
 8019580:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	695b      	ldr	r3, [r3, #20]
 8019588:	68fa      	ldr	r2, [r7, #12]
 801958a:	8992      	ldrh	r2, [r2, #12]
 801958c:	fbb3 f0f2 	udiv	r0, r3, r2
 8019590:	fb00 f202 	mul.w	r2, r0, r2
 8019594:	1a9b      	subs	r3, r3, r2
 8019596:	440b      	add	r3, r1
 8019598:	4619      	mov	r1, r3
 801959a:	68f8      	ldr	r0, [r7, #12]
 801959c:	f7ff fa60 	bl	8018a60 <ld_clust>
 80195a0:	4602      	mov	r2, r0
 80195a2:	693b      	ldr	r3, [r7, #16]
 80195a4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80195a6:	e7bb      	b.n	8019520 <follow_path+0x50>
			if (res != FR_OK) break;
 80195a8:	bf00      	nop
 80195aa:	e002      	b.n	80195b2 <follow_path+0xe2>
				break;
 80195ac:	bf00      	nop
 80195ae:	e000      	b.n	80195b2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80195b0:	bf00      	nop
			}
		}
	}

	return res;
 80195b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80195b4:	4618      	mov	r0, r3
 80195b6:	3718      	adds	r7, #24
 80195b8:	46bd      	mov	sp, r7
 80195ba:	bd80      	pop	{r7, pc}

080195bc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80195bc:	b480      	push	{r7}
 80195be:	b087      	sub	sp, #28
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80195c4:	f04f 33ff 	mov.w	r3, #4294967295
 80195c8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d031      	beq.n	8019636 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	617b      	str	r3, [r7, #20]
 80195d8:	e002      	b.n	80195e0 <get_ldnumber+0x24>
 80195da:	697b      	ldr	r3, [r7, #20]
 80195dc:	3301      	adds	r3, #1
 80195de:	617b      	str	r3, [r7, #20]
 80195e0:	697b      	ldr	r3, [r7, #20]
 80195e2:	781b      	ldrb	r3, [r3, #0]
 80195e4:	2b1f      	cmp	r3, #31
 80195e6:	d903      	bls.n	80195f0 <get_ldnumber+0x34>
 80195e8:	697b      	ldr	r3, [r7, #20]
 80195ea:	781b      	ldrb	r3, [r3, #0]
 80195ec:	2b3a      	cmp	r3, #58	; 0x3a
 80195ee:	d1f4      	bne.n	80195da <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80195f0:	697b      	ldr	r3, [r7, #20]
 80195f2:	781b      	ldrb	r3, [r3, #0]
 80195f4:	2b3a      	cmp	r3, #58	; 0x3a
 80195f6:	d11c      	bne.n	8019632 <get_ldnumber+0x76>
			tp = *path;
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	1c5a      	adds	r2, r3, #1
 8019602:	60fa      	str	r2, [r7, #12]
 8019604:	781b      	ldrb	r3, [r3, #0]
 8019606:	3b30      	subs	r3, #48	; 0x30
 8019608:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801960a:	68bb      	ldr	r3, [r7, #8]
 801960c:	2b09      	cmp	r3, #9
 801960e:	d80e      	bhi.n	801962e <get_ldnumber+0x72>
 8019610:	68fa      	ldr	r2, [r7, #12]
 8019612:	697b      	ldr	r3, [r7, #20]
 8019614:	429a      	cmp	r2, r3
 8019616:	d10a      	bne.n	801962e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8019618:	68bb      	ldr	r3, [r7, #8]
 801961a:	2b00      	cmp	r3, #0
 801961c:	d107      	bne.n	801962e <get_ldnumber+0x72>
					vol = (int)i;
 801961e:	68bb      	ldr	r3, [r7, #8]
 8019620:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8019622:	697b      	ldr	r3, [r7, #20]
 8019624:	3301      	adds	r3, #1
 8019626:	617b      	str	r3, [r7, #20]
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	697a      	ldr	r2, [r7, #20]
 801962c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801962e:	693b      	ldr	r3, [r7, #16]
 8019630:	e002      	b.n	8019638 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8019632:	2300      	movs	r3, #0
 8019634:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8019636:	693b      	ldr	r3, [r7, #16]
}
 8019638:	4618      	mov	r0, r3
 801963a:	371c      	adds	r7, #28
 801963c:	46bd      	mov	sp, r7
 801963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019642:	4770      	bx	lr

08019644 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8019644:	b580      	push	{r7, lr}
 8019646:	b082      	sub	sp, #8
 8019648:	af00      	add	r7, sp, #0
 801964a:	6078      	str	r0, [r7, #4]
 801964c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	2200      	movs	r2, #0
 8019652:	70da      	strb	r2, [r3, #3]
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	f04f 32ff 	mov.w	r2, #4294967295
 801965a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801965c:	6839      	ldr	r1, [r7, #0]
 801965e:	6878      	ldr	r0, [r7, #4]
 8019660:	f7fe fc78 	bl	8017f54 <move_window>
 8019664:	4603      	mov	r3, r0
 8019666:	2b00      	cmp	r3, #0
 8019668:	d001      	beq.n	801966e <check_fs+0x2a>
 801966a:	2304      	movs	r3, #4
 801966c:	e038      	b.n	80196e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	3338      	adds	r3, #56	; 0x38
 8019672:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019676:	4618      	mov	r0, r3
 8019678:	f7fe f9bc 	bl	80179f4 <ld_word>
 801967c:	4603      	mov	r3, r0
 801967e:	461a      	mov	r2, r3
 8019680:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8019684:	429a      	cmp	r2, r3
 8019686:	d001      	beq.n	801968c <check_fs+0x48>
 8019688:	2303      	movs	r3, #3
 801968a:	e029      	b.n	80196e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019692:	2be9      	cmp	r3, #233	; 0xe9
 8019694:	d009      	beq.n	80196aa <check_fs+0x66>
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801969c:	2beb      	cmp	r3, #235	; 0xeb
 801969e:	d11e      	bne.n	80196de <check_fs+0x9a>
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80196a6:	2b90      	cmp	r3, #144	; 0x90
 80196a8:	d119      	bne.n	80196de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	3338      	adds	r3, #56	; 0x38
 80196ae:	3336      	adds	r3, #54	; 0x36
 80196b0:	4618      	mov	r0, r3
 80196b2:	f7fe f9b7 	bl	8017a24 <ld_dword>
 80196b6:	4603      	mov	r3, r0
 80196b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80196bc:	4a0a      	ldr	r2, [pc, #40]	; (80196e8 <check_fs+0xa4>)
 80196be:	4293      	cmp	r3, r2
 80196c0:	d101      	bne.n	80196c6 <check_fs+0x82>
 80196c2:	2300      	movs	r3, #0
 80196c4:	e00c      	b.n	80196e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	3338      	adds	r3, #56	; 0x38
 80196ca:	3352      	adds	r3, #82	; 0x52
 80196cc:	4618      	mov	r0, r3
 80196ce:	f7fe f9a9 	bl	8017a24 <ld_dword>
 80196d2:	4603      	mov	r3, r0
 80196d4:	4a05      	ldr	r2, [pc, #20]	; (80196ec <check_fs+0xa8>)
 80196d6:	4293      	cmp	r3, r2
 80196d8:	d101      	bne.n	80196de <check_fs+0x9a>
 80196da:	2300      	movs	r3, #0
 80196dc:	e000      	b.n	80196e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80196de:	2302      	movs	r3, #2
}
 80196e0:	4618      	mov	r0, r3
 80196e2:	3708      	adds	r7, #8
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bd80      	pop	{r7, pc}
 80196e8:	00544146 	.word	0x00544146
 80196ec:	33544146 	.word	0x33544146

080196f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80196f0:	b580      	push	{r7, lr}
 80196f2:	b096      	sub	sp, #88	; 0x58
 80196f4:	af00      	add	r7, sp, #0
 80196f6:	60f8      	str	r0, [r7, #12]
 80196f8:	60b9      	str	r1, [r7, #8]
 80196fa:	4613      	mov	r3, r2
 80196fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80196fe:	68bb      	ldr	r3, [r7, #8]
 8019700:	2200      	movs	r2, #0
 8019702:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8019704:	68f8      	ldr	r0, [r7, #12]
 8019706:	f7ff ff59 	bl	80195bc <get_ldnumber>
 801970a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801970c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801970e:	2b00      	cmp	r3, #0
 8019710:	da01      	bge.n	8019716 <find_volume+0x26>
 8019712:	230b      	movs	r3, #11
 8019714:	e265      	b.n	8019be2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8019716:	4a9f      	ldr	r2, [pc, #636]	; (8019994 <find_volume+0x2a4>)
 8019718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801971a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801971e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8019720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019722:	2b00      	cmp	r3, #0
 8019724:	d101      	bne.n	801972a <find_volume+0x3a>
 8019726:	230c      	movs	r3, #12
 8019728:	e25b      	b.n	8019be2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801972a:	68bb      	ldr	r3, [r7, #8]
 801972c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801972e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8019730:	79fb      	ldrb	r3, [r7, #7]
 8019732:	f023 0301 	bic.w	r3, r3, #1
 8019736:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8019738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801973a:	781b      	ldrb	r3, [r3, #0]
 801973c:	2b00      	cmp	r3, #0
 801973e:	d01a      	beq.n	8019776 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8019740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019742:	785b      	ldrb	r3, [r3, #1]
 8019744:	4618      	mov	r0, r3
 8019746:	f7fe f8b7 	bl	80178b8 <disk_status>
 801974a:	4603      	mov	r3, r0
 801974c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8019750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019754:	f003 0301 	and.w	r3, r3, #1
 8019758:	2b00      	cmp	r3, #0
 801975a:	d10c      	bne.n	8019776 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801975c:	79fb      	ldrb	r3, [r7, #7]
 801975e:	2b00      	cmp	r3, #0
 8019760:	d007      	beq.n	8019772 <find_volume+0x82>
 8019762:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019766:	f003 0304 	and.w	r3, r3, #4
 801976a:	2b00      	cmp	r3, #0
 801976c:	d001      	beq.n	8019772 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801976e:	230a      	movs	r3, #10
 8019770:	e237      	b.n	8019be2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8019772:	2300      	movs	r3, #0
 8019774:	e235      	b.n	8019be2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8019776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019778:	2200      	movs	r2, #0
 801977a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801977c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801977e:	b2da      	uxtb	r2, r3
 8019780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019782:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8019784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019786:	785b      	ldrb	r3, [r3, #1]
 8019788:	4618      	mov	r0, r3
 801978a:	f7fe f8af 	bl	80178ec <disk_initialize>
 801978e:	4603      	mov	r3, r0
 8019790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8019794:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019798:	f003 0301 	and.w	r3, r3, #1
 801979c:	2b00      	cmp	r3, #0
 801979e:	d001      	beq.n	80197a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80197a0:	2303      	movs	r3, #3
 80197a2:	e21e      	b.n	8019be2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80197a4:	79fb      	ldrb	r3, [r7, #7]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d007      	beq.n	80197ba <find_volume+0xca>
 80197aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80197ae:	f003 0304 	and.w	r3, r3, #4
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d001      	beq.n	80197ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80197b6:	230a      	movs	r3, #10
 80197b8:	e213      	b.n	8019be2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80197ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197bc:	7858      	ldrb	r0, [r3, #1]
 80197be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197c0:	330c      	adds	r3, #12
 80197c2:	461a      	mov	r2, r3
 80197c4:	2102      	movs	r1, #2
 80197c6:	f7fe f8f7 	bl	80179b8 <disk_ioctl>
 80197ca:	4603      	mov	r3, r0
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d001      	beq.n	80197d4 <find_volume+0xe4>
 80197d0:	2301      	movs	r3, #1
 80197d2:	e206      	b.n	8019be2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80197d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197d6:	899b      	ldrh	r3, [r3, #12]
 80197d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80197dc:	d80d      	bhi.n	80197fa <find_volume+0x10a>
 80197de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197e0:	899b      	ldrh	r3, [r3, #12]
 80197e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80197e6:	d308      	bcc.n	80197fa <find_volume+0x10a>
 80197e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197ea:	899b      	ldrh	r3, [r3, #12]
 80197ec:	461a      	mov	r2, r3
 80197ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197f0:	899b      	ldrh	r3, [r3, #12]
 80197f2:	3b01      	subs	r3, #1
 80197f4:	4013      	ands	r3, r2
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d001      	beq.n	80197fe <find_volume+0x10e>
 80197fa:	2301      	movs	r3, #1
 80197fc:	e1f1      	b.n	8019be2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80197fe:	2300      	movs	r3, #0
 8019800:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8019802:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8019804:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019806:	f7ff ff1d 	bl	8019644 <check_fs>
 801980a:	4603      	mov	r3, r0
 801980c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8019810:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019814:	2b02      	cmp	r3, #2
 8019816:	d149      	bne.n	80198ac <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019818:	2300      	movs	r3, #0
 801981a:	643b      	str	r3, [r7, #64]	; 0x40
 801981c:	e01e      	b.n	801985c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801981e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019820:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8019824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019826:	011b      	lsls	r3, r3, #4
 8019828:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801982c:	4413      	add	r3, r2
 801982e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8019830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019832:	3304      	adds	r3, #4
 8019834:	781b      	ldrb	r3, [r3, #0]
 8019836:	2b00      	cmp	r3, #0
 8019838:	d006      	beq.n	8019848 <find_volume+0x158>
 801983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801983c:	3308      	adds	r3, #8
 801983e:	4618      	mov	r0, r3
 8019840:	f7fe f8f0 	bl	8017a24 <ld_dword>
 8019844:	4602      	mov	r2, r0
 8019846:	e000      	b.n	801984a <find_volume+0x15a>
 8019848:	2200      	movs	r2, #0
 801984a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801984c:	009b      	lsls	r3, r3, #2
 801984e:	3358      	adds	r3, #88	; 0x58
 8019850:	443b      	add	r3, r7
 8019852:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019858:	3301      	adds	r3, #1
 801985a:	643b      	str	r3, [r7, #64]	; 0x40
 801985c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801985e:	2b03      	cmp	r3, #3
 8019860:	d9dd      	bls.n	801981e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8019862:	2300      	movs	r3, #0
 8019864:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8019866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019868:	2b00      	cmp	r3, #0
 801986a:	d002      	beq.n	8019872 <find_volume+0x182>
 801986c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801986e:	3b01      	subs	r3, #1
 8019870:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8019872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019874:	009b      	lsls	r3, r3, #2
 8019876:	3358      	adds	r3, #88	; 0x58
 8019878:	443b      	add	r3, r7
 801987a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801987e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8019880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019882:	2b00      	cmp	r3, #0
 8019884:	d005      	beq.n	8019892 <find_volume+0x1a2>
 8019886:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8019888:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801988a:	f7ff fedb 	bl	8019644 <check_fs>
 801988e:	4603      	mov	r3, r0
 8019890:	e000      	b.n	8019894 <find_volume+0x1a4>
 8019892:	2303      	movs	r3, #3
 8019894:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8019898:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801989c:	2b01      	cmp	r3, #1
 801989e:	d905      	bls.n	80198ac <find_volume+0x1bc>
 80198a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80198a2:	3301      	adds	r3, #1
 80198a4:	643b      	str	r3, [r7, #64]	; 0x40
 80198a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80198a8:	2b03      	cmp	r3, #3
 80198aa:	d9e2      	bls.n	8019872 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80198ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80198b0:	2b04      	cmp	r3, #4
 80198b2:	d101      	bne.n	80198b8 <find_volume+0x1c8>
 80198b4:	2301      	movs	r3, #1
 80198b6:	e194      	b.n	8019be2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80198b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80198bc:	2b01      	cmp	r3, #1
 80198be:	d901      	bls.n	80198c4 <find_volume+0x1d4>
 80198c0:	230d      	movs	r3, #13
 80198c2:	e18e      	b.n	8019be2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80198c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198c6:	3338      	adds	r3, #56	; 0x38
 80198c8:	330b      	adds	r3, #11
 80198ca:	4618      	mov	r0, r3
 80198cc:	f7fe f892 	bl	80179f4 <ld_word>
 80198d0:	4603      	mov	r3, r0
 80198d2:	461a      	mov	r2, r3
 80198d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198d6:	899b      	ldrh	r3, [r3, #12]
 80198d8:	429a      	cmp	r2, r3
 80198da:	d001      	beq.n	80198e0 <find_volume+0x1f0>
 80198dc:	230d      	movs	r3, #13
 80198de:	e180      	b.n	8019be2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80198e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198e2:	3338      	adds	r3, #56	; 0x38
 80198e4:	3316      	adds	r3, #22
 80198e6:	4618      	mov	r0, r3
 80198e8:	f7fe f884 	bl	80179f4 <ld_word>
 80198ec:	4603      	mov	r3, r0
 80198ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80198f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d106      	bne.n	8019904 <find_volume+0x214>
 80198f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198f8:	3338      	adds	r3, #56	; 0x38
 80198fa:	3324      	adds	r3, #36	; 0x24
 80198fc:	4618      	mov	r0, r3
 80198fe:	f7fe f891 	bl	8017a24 <ld_dword>
 8019902:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8019904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019906:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019908:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801990a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801990c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8019910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019912:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8019914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019916:	789b      	ldrb	r3, [r3, #2]
 8019918:	2b01      	cmp	r3, #1
 801991a:	d005      	beq.n	8019928 <find_volume+0x238>
 801991c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801991e:	789b      	ldrb	r3, [r3, #2]
 8019920:	2b02      	cmp	r3, #2
 8019922:	d001      	beq.n	8019928 <find_volume+0x238>
 8019924:	230d      	movs	r3, #13
 8019926:	e15c      	b.n	8019be2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8019928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801992a:	789b      	ldrb	r3, [r3, #2]
 801992c:	461a      	mov	r2, r3
 801992e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019930:	fb02 f303 	mul.w	r3, r2, r3
 8019934:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8019936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801993c:	b29a      	uxth	r2, r3
 801993e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019940:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8019942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019944:	895b      	ldrh	r3, [r3, #10]
 8019946:	2b00      	cmp	r3, #0
 8019948:	d008      	beq.n	801995c <find_volume+0x26c>
 801994a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801994c:	895b      	ldrh	r3, [r3, #10]
 801994e:	461a      	mov	r2, r3
 8019950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019952:	895b      	ldrh	r3, [r3, #10]
 8019954:	3b01      	subs	r3, #1
 8019956:	4013      	ands	r3, r2
 8019958:	2b00      	cmp	r3, #0
 801995a:	d001      	beq.n	8019960 <find_volume+0x270>
 801995c:	230d      	movs	r3, #13
 801995e:	e140      	b.n	8019be2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8019960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019962:	3338      	adds	r3, #56	; 0x38
 8019964:	3311      	adds	r3, #17
 8019966:	4618      	mov	r0, r3
 8019968:	f7fe f844 	bl	80179f4 <ld_word>
 801996c:	4603      	mov	r3, r0
 801996e:	461a      	mov	r2, r3
 8019970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019972:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8019974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019976:	891b      	ldrh	r3, [r3, #8]
 8019978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801997a:	8992      	ldrh	r2, [r2, #12]
 801997c:	0952      	lsrs	r2, r2, #5
 801997e:	b292      	uxth	r2, r2
 8019980:	fbb3 f1f2 	udiv	r1, r3, r2
 8019984:	fb01 f202 	mul.w	r2, r1, r2
 8019988:	1a9b      	subs	r3, r3, r2
 801998a:	b29b      	uxth	r3, r3
 801998c:	2b00      	cmp	r3, #0
 801998e:	d003      	beq.n	8019998 <find_volume+0x2a8>
 8019990:	230d      	movs	r3, #13
 8019992:	e126      	b.n	8019be2 <find_volume+0x4f2>
 8019994:	24003e74 	.word	0x24003e74

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8019998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801999a:	3338      	adds	r3, #56	; 0x38
 801999c:	3313      	adds	r3, #19
 801999e:	4618      	mov	r0, r3
 80199a0:	f7fe f828 	bl	80179f4 <ld_word>
 80199a4:	4603      	mov	r3, r0
 80199a6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80199a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d106      	bne.n	80199bc <find_volume+0x2cc>
 80199ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199b0:	3338      	adds	r3, #56	; 0x38
 80199b2:	3320      	adds	r3, #32
 80199b4:	4618      	mov	r0, r3
 80199b6:	f7fe f835 	bl	8017a24 <ld_dword>
 80199ba:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80199bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199be:	3338      	adds	r3, #56	; 0x38
 80199c0:	330e      	adds	r3, #14
 80199c2:	4618      	mov	r0, r3
 80199c4:	f7fe f816 	bl	80179f4 <ld_word>
 80199c8:	4603      	mov	r3, r0
 80199ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80199cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d101      	bne.n	80199d6 <find_volume+0x2e6>
 80199d2:	230d      	movs	r3, #13
 80199d4:	e105      	b.n	8019be2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80199d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80199d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199da:	4413      	add	r3, r2
 80199dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80199de:	8911      	ldrh	r1, [r2, #8]
 80199e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80199e2:	8992      	ldrh	r2, [r2, #12]
 80199e4:	0952      	lsrs	r2, r2, #5
 80199e6:	b292      	uxth	r2, r2
 80199e8:	fbb1 f2f2 	udiv	r2, r1, r2
 80199ec:	b292      	uxth	r2, r2
 80199ee:	4413      	add	r3, r2
 80199f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80199f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80199f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199f6:	429a      	cmp	r2, r3
 80199f8:	d201      	bcs.n	80199fe <find_volume+0x30e>
 80199fa:	230d      	movs	r3, #13
 80199fc:	e0f1      	b.n	8019be2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80199fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a02:	1ad3      	subs	r3, r2, r3
 8019a04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a06:	8952      	ldrh	r2, [r2, #10]
 8019a08:	fbb3 f3f2 	udiv	r3, r3, r2
 8019a0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8019a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d101      	bne.n	8019a18 <find_volume+0x328>
 8019a14:	230d      	movs	r3, #13
 8019a16:	e0e4      	b.n	8019be2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8019a18:	2303      	movs	r3, #3
 8019a1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8019a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a20:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8019a24:	4293      	cmp	r3, r2
 8019a26:	d802      	bhi.n	8019a2e <find_volume+0x33e>
 8019a28:	2302      	movs	r3, #2
 8019a2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8019a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a30:	f640 72f5 	movw	r2, #4085	; 0xff5
 8019a34:	4293      	cmp	r3, r2
 8019a36:	d802      	bhi.n	8019a3e <find_volume+0x34e>
 8019a38:	2301      	movs	r3, #1
 8019a3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8019a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a40:	1c9a      	adds	r2, r3, #2
 8019a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a44:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8019a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019a4a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8019a4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a50:	441a      	add	r2, r3
 8019a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a54:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8019a56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a5a:	441a      	add	r2, r3
 8019a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a5e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8019a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019a64:	2b03      	cmp	r3, #3
 8019a66:	d11e      	bne.n	8019aa6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8019a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a6a:	3338      	adds	r3, #56	; 0x38
 8019a6c:	332a      	adds	r3, #42	; 0x2a
 8019a6e:	4618      	mov	r0, r3
 8019a70:	f7fd ffc0 	bl	80179f4 <ld_word>
 8019a74:	4603      	mov	r3, r0
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d001      	beq.n	8019a7e <find_volume+0x38e>
 8019a7a:	230d      	movs	r3, #13
 8019a7c:	e0b1      	b.n	8019be2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8019a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a80:	891b      	ldrh	r3, [r3, #8]
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d001      	beq.n	8019a8a <find_volume+0x39a>
 8019a86:	230d      	movs	r3, #13
 8019a88:	e0ab      	b.n	8019be2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8019a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a8c:	3338      	adds	r3, #56	; 0x38
 8019a8e:	332c      	adds	r3, #44	; 0x2c
 8019a90:	4618      	mov	r0, r3
 8019a92:	f7fd ffc7 	bl	8017a24 <ld_dword>
 8019a96:	4602      	mov	r2, r0
 8019a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a9a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8019a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a9e:	69db      	ldr	r3, [r3, #28]
 8019aa0:	009b      	lsls	r3, r3, #2
 8019aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8019aa4:	e01f      	b.n	8019ae6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8019aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019aa8:	891b      	ldrh	r3, [r3, #8]
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d101      	bne.n	8019ab2 <find_volume+0x3c2>
 8019aae:	230d      	movs	r3, #13
 8019ab0:	e097      	b.n	8019be2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8019ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019ab8:	441a      	add	r2, r3
 8019aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019abc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8019abe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019ac2:	2b02      	cmp	r3, #2
 8019ac4:	d103      	bne.n	8019ace <find_volume+0x3de>
 8019ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ac8:	69db      	ldr	r3, [r3, #28]
 8019aca:	005b      	lsls	r3, r3, #1
 8019acc:	e00a      	b.n	8019ae4 <find_volume+0x3f4>
 8019ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ad0:	69da      	ldr	r2, [r3, #28]
 8019ad2:	4613      	mov	r3, r2
 8019ad4:	005b      	lsls	r3, r3, #1
 8019ad6:	4413      	add	r3, r2
 8019ad8:	085a      	lsrs	r2, r3, #1
 8019ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019adc:	69db      	ldr	r3, [r3, #28]
 8019ade:	f003 0301 	and.w	r3, r3, #1
 8019ae2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8019ae4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8019ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ae8:	6a1a      	ldr	r2, [r3, #32]
 8019aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019aec:	899b      	ldrh	r3, [r3, #12]
 8019aee:	4619      	mov	r1, r3
 8019af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019af2:	440b      	add	r3, r1
 8019af4:	3b01      	subs	r3, #1
 8019af6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019af8:	8989      	ldrh	r1, [r1, #12]
 8019afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8019afe:	429a      	cmp	r2, r3
 8019b00:	d201      	bcs.n	8019b06 <find_volume+0x416>
 8019b02:	230d      	movs	r3, #13
 8019b04:	e06d      	b.n	8019be2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8019b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b08:	f04f 32ff 	mov.w	r2, #4294967295
 8019b0c:	619a      	str	r2, [r3, #24]
 8019b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b10:	699a      	ldr	r2, [r3, #24]
 8019b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b14:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8019b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b18:	2280      	movs	r2, #128	; 0x80
 8019b1a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8019b1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019b20:	2b03      	cmp	r3, #3
 8019b22:	d149      	bne.n	8019bb8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8019b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b26:	3338      	adds	r3, #56	; 0x38
 8019b28:	3330      	adds	r3, #48	; 0x30
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	f7fd ff62 	bl	80179f4 <ld_word>
 8019b30:	4603      	mov	r3, r0
 8019b32:	2b01      	cmp	r3, #1
 8019b34:	d140      	bne.n	8019bb8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8019b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019b38:	3301      	adds	r3, #1
 8019b3a:	4619      	mov	r1, r3
 8019b3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019b3e:	f7fe fa09 	bl	8017f54 <move_window>
 8019b42:	4603      	mov	r3, r0
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d137      	bne.n	8019bb8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8019b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b50:	3338      	adds	r3, #56	; 0x38
 8019b52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019b56:	4618      	mov	r0, r3
 8019b58:	f7fd ff4c 	bl	80179f4 <ld_word>
 8019b5c:	4603      	mov	r3, r0
 8019b5e:	461a      	mov	r2, r3
 8019b60:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8019b64:	429a      	cmp	r2, r3
 8019b66:	d127      	bne.n	8019bb8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8019b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b6a:	3338      	adds	r3, #56	; 0x38
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	f7fd ff59 	bl	8017a24 <ld_dword>
 8019b72:	4603      	mov	r3, r0
 8019b74:	4a1d      	ldr	r2, [pc, #116]	; (8019bec <find_volume+0x4fc>)
 8019b76:	4293      	cmp	r3, r2
 8019b78:	d11e      	bne.n	8019bb8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8019b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b7c:	3338      	adds	r3, #56	; 0x38
 8019b7e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8019b82:	4618      	mov	r0, r3
 8019b84:	f7fd ff4e 	bl	8017a24 <ld_dword>
 8019b88:	4603      	mov	r3, r0
 8019b8a:	4a19      	ldr	r2, [pc, #100]	; (8019bf0 <find_volume+0x500>)
 8019b8c:	4293      	cmp	r3, r2
 8019b8e:	d113      	bne.n	8019bb8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b92:	3338      	adds	r3, #56	; 0x38
 8019b94:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8019b98:	4618      	mov	r0, r3
 8019b9a:	f7fd ff43 	bl	8017a24 <ld_dword>
 8019b9e:	4602      	mov	r2, r0
 8019ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ba2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8019ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ba6:	3338      	adds	r3, #56	; 0x38
 8019ba8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8019bac:	4618      	mov	r0, r3
 8019bae:	f7fd ff39 	bl	8017a24 <ld_dword>
 8019bb2:	4602      	mov	r2, r0
 8019bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bb6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8019bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8019bbe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8019bc0:	4b0c      	ldr	r3, [pc, #48]	; (8019bf4 <find_volume+0x504>)
 8019bc2:	881b      	ldrh	r3, [r3, #0]
 8019bc4:	3301      	adds	r3, #1
 8019bc6:	b29a      	uxth	r2, r3
 8019bc8:	4b0a      	ldr	r3, [pc, #40]	; (8019bf4 <find_volume+0x504>)
 8019bca:	801a      	strh	r2, [r3, #0]
 8019bcc:	4b09      	ldr	r3, [pc, #36]	; (8019bf4 <find_volume+0x504>)
 8019bce:	881a      	ldrh	r2, [r3, #0]
 8019bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bd2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8019bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bd6:	4a08      	ldr	r2, [pc, #32]	; (8019bf8 <find_volume+0x508>)
 8019bd8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8019bda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019bdc:	f7fe f952 	bl	8017e84 <clear_lock>
#endif
	return FR_OK;
 8019be0:	2300      	movs	r3, #0
}
 8019be2:	4618      	mov	r0, r3
 8019be4:	3758      	adds	r7, #88	; 0x58
 8019be6:	46bd      	mov	sp, r7
 8019be8:	bd80      	pop	{r7, pc}
 8019bea:	bf00      	nop
 8019bec:	41615252 	.word	0x41615252
 8019bf0:	61417272 	.word	0x61417272
 8019bf4:	24003e78 	.word	0x24003e78
 8019bf8:	24003e9c 	.word	0x24003e9c

08019bfc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8019bfc:	b580      	push	{r7, lr}
 8019bfe:	b084      	sub	sp, #16
 8019c00:	af00      	add	r7, sp, #0
 8019c02:	6078      	str	r0, [r7, #4]
 8019c04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8019c06:	2309      	movs	r3, #9
 8019c08:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d01c      	beq.n	8019c4a <validate+0x4e>
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d018      	beq.n	8019c4a <validate+0x4e>
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	781b      	ldrb	r3, [r3, #0]
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d013      	beq.n	8019c4a <validate+0x4e>
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	889a      	ldrh	r2, [r3, #4]
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	88db      	ldrh	r3, [r3, #6]
 8019c2c:	429a      	cmp	r2, r3
 8019c2e:	d10c      	bne.n	8019c4a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	785b      	ldrb	r3, [r3, #1]
 8019c36:	4618      	mov	r0, r3
 8019c38:	f7fd fe3e 	bl	80178b8 <disk_status>
 8019c3c:	4603      	mov	r3, r0
 8019c3e:	f003 0301 	and.w	r3, r3, #1
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d101      	bne.n	8019c4a <validate+0x4e>
			res = FR_OK;
 8019c46:	2300      	movs	r3, #0
 8019c48:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8019c4a:	7bfb      	ldrb	r3, [r7, #15]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d102      	bne.n	8019c56 <validate+0x5a>
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	e000      	b.n	8019c58 <validate+0x5c>
 8019c56:	2300      	movs	r3, #0
 8019c58:	683a      	ldr	r2, [r7, #0]
 8019c5a:	6013      	str	r3, [r2, #0]
	return res;
 8019c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c5e:	4618      	mov	r0, r3
 8019c60:	3710      	adds	r7, #16
 8019c62:	46bd      	mov	sp, r7
 8019c64:	bd80      	pop	{r7, pc}
	...

08019c68 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019c68:	b580      	push	{r7, lr}
 8019c6a:	b088      	sub	sp, #32
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	60f8      	str	r0, [r7, #12]
 8019c70:	60b9      	str	r1, [r7, #8]
 8019c72:	4613      	mov	r3, r2
 8019c74:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8019c76:	68bb      	ldr	r3, [r7, #8]
 8019c78:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8019c7a:	f107 0310 	add.w	r3, r7, #16
 8019c7e:	4618      	mov	r0, r3
 8019c80:	f7ff fc9c 	bl	80195bc <get_ldnumber>
 8019c84:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8019c86:	69fb      	ldr	r3, [r7, #28]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	da01      	bge.n	8019c90 <f_mount+0x28>
 8019c8c:	230b      	movs	r3, #11
 8019c8e:	e02b      	b.n	8019ce8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8019c90:	4a17      	ldr	r2, [pc, #92]	; (8019cf0 <f_mount+0x88>)
 8019c92:	69fb      	ldr	r3, [r7, #28]
 8019c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019c98:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8019c9a:	69bb      	ldr	r3, [r7, #24]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d005      	beq.n	8019cac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8019ca0:	69b8      	ldr	r0, [r7, #24]
 8019ca2:	f7fe f8ef 	bl	8017e84 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8019ca6:	69bb      	ldr	r3, [r7, #24]
 8019ca8:	2200      	movs	r2, #0
 8019caa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d002      	beq.n	8019cb8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	2200      	movs	r2, #0
 8019cb6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8019cb8:	68fa      	ldr	r2, [r7, #12]
 8019cba:	490d      	ldr	r1, [pc, #52]	; (8019cf0 <f_mount+0x88>)
 8019cbc:	69fb      	ldr	r3, [r7, #28]
 8019cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	d002      	beq.n	8019cce <f_mount+0x66>
 8019cc8:	79fb      	ldrb	r3, [r7, #7]
 8019cca:	2b01      	cmp	r3, #1
 8019ccc:	d001      	beq.n	8019cd2 <f_mount+0x6a>
 8019cce:	2300      	movs	r3, #0
 8019cd0:	e00a      	b.n	8019ce8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8019cd2:	f107 010c 	add.w	r1, r7, #12
 8019cd6:	f107 0308 	add.w	r3, r7, #8
 8019cda:	2200      	movs	r2, #0
 8019cdc:	4618      	mov	r0, r3
 8019cde:	f7ff fd07 	bl	80196f0 <find_volume>
 8019ce2:	4603      	mov	r3, r0
 8019ce4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8019ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8019ce8:	4618      	mov	r0, r3
 8019cea:	3720      	adds	r7, #32
 8019cec:	46bd      	mov	sp, r7
 8019cee:	bd80      	pop	{r7, pc}
 8019cf0:	24003e74 	.word	0x24003e74

08019cf4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8019cf4:	b580      	push	{r7, lr}
 8019cf6:	b09a      	sub	sp, #104	; 0x68
 8019cf8:	af00      	add	r7, sp, #0
 8019cfa:	60f8      	str	r0, [r7, #12]
 8019cfc:	60b9      	str	r1, [r7, #8]
 8019cfe:	4613      	mov	r3, r2
 8019d00:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d101      	bne.n	8019d0c <f_open+0x18>
 8019d08:	2309      	movs	r3, #9
 8019d0a:	e1bb      	b.n	801a084 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8019d0c:	79fb      	ldrb	r3, [r7, #7]
 8019d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019d12:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8019d14:	79fa      	ldrb	r2, [r7, #7]
 8019d16:	f107 0114 	add.w	r1, r7, #20
 8019d1a:	f107 0308 	add.w	r3, r7, #8
 8019d1e:	4618      	mov	r0, r3
 8019d20:	f7ff fce6 	bl	80196f0 <find_volume>
 8019d24:	4603      	mov	r3, r0
 8019d26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8019d2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	f040 819f 	bne.w	801a072 <f_open+0x37e>
		dj.obj.fs = fs;
 8019d34:	697b      	ldr	r3, [r7, #20]
 8019d36:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019d38:	68ba      	ldr	r2, [r7, #8]
 8019d3a:	f107 0318 	add.w	r3, r7, #24
 8019d3e:	4611      	mov	r1, r2
 8019d40:	4618      	mov	r0, r3
 8019d42:	f7ff fbc5 	bl	80194d0 <follow_path>
 8019d46:	4603      	mov	r3, r0
 8019d48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019d4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d11a      	bne.n	8019d8a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8019d54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019d58:	b25b      	sxtb	r3, r3
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	da03      	bge.n	8019d66 <f_open+0x72>
				res = FR_INVALID_NAME;
 8019d5e:	2306      	movs	r3, #6
 8019d60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019d64:	e011      	b.n	8019d8a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019d66:	79fb      	ldrb	r3, [r7, #7]
 8019d68:	f023 0301 	bic.w	r3, r3, #1
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	bf14      	ite	ne
 8019d70:	2301      	movne	r3, #1
 8019d72:	2300      	moveq	r3, #0
 8019d74:	b2db      	uxtb	r3, r3
 8019d76:	461a      	mov	r2, r3
 8019d78:	f107 0318 	add.w	r3, r7, #24
 8019d7c:	4611      	mov	r1, r2
 8019d7e:	4618      	mov	r0, r3
 8019d80:	f7fd ff38 	bl	8017bf4 <chk_lock>
 8019d84:	4603      	mov	r3, r0
 8019d86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019d8a:	79fb      	ldrb	r3, [r7, #7]
 8019d8c:	f003 031c 	and.w	r3, r3, #28
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d07f      	beq.n	8019e94 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8019d94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d017      	beq.n	8019dcc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8019d9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019da0:	2b04      	cmp	r3, #4
 8019da2:	d10e      	bne.n	8019dc2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8019da4:	f7fd ff82 	bl	8017cac <enq_lock>
 8019da8:	4603      	mov	r3, r0
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d006      	beq.n	8019dbc <f_open+0xc8>
 8019dae:	f107 0318 	add.w	r3, r7, #24
 8019db2:	4618      	mov	r0, r3
 8019db4:	f7ff f8dc 	bl	8018f70 <dir_register>
 8019db8:	4603      	mov	r3, r0
 8019dba:	e000      	b.n	8019dbe <f_open+0xca>
 8019dbc:	2312      	movs	r3, #18
 8019dbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8019dc2:	79fb      	ldrb	r3, [r7, #7]
 8019dc4:	f043 0308 	orr.w	r3, r3, #8
 8019dc8:	71fb      	strb	r3, [r7, #7]
 8019dca:	e010      	b.n	8019dee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8019dcc:	7fbb      	ldrb	r3, [r7, #30]
 8019dce:	f003 0311 	and.w	r3, r3, #17
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d003      	beq.n	8019dde <f_open+0xea>
					res = FR_DENIED;
 8019dd6:	2307      	movs	r3, #7
 8019dd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019ddc:	e007      	b.n	8019dee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8019dde:	79fb      	ldrb	r3, [r7, #7]
 8019de0:	f003 0304 	and.w	r3, r3, #4
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d002      	beq.n	8019dee <f_open+0xfa>
 8019de8:	2308      	movs	r3, #8
 8019dea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8019dee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d168      	bne.n	8019ec8 <f_open+0x1d4>
 8019df6:	79fb      	ldrb	r3, [r7, #7]
 8019df8:	f003 0308 	and.w	r3, r3, #8
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d063      	beq.n	8019ec8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8019e00:	f7fb fb70 	bl	80154e4 <get_fattime>
 8019e04:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8019e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e08:	330e      	adds	r3, #14
 8019e0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	f7fd fe47 	bl	8017aa0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8019e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e14:	3316      	adds	r3, #22
 8019e16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019e18:	4618      	mov	r0, r3
 8019e1a:	f7fd fe41 	bl	8017aa0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8019e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e20:	330b      	adds	r3, #11
 8019e22:	2220      	movs	r2, #32
 8019e24:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8019e26:	697b      	ldr	r3, [r7, #20]
 8019e28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019e2a:	4611      	mov	r1, r2
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	f7fe fe17 	bl	8018a60 <ld_clust>
 8019e32:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8019e34:	697b      	ldr	r3, [r7, #20]
 8019e36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019e38:	2200      	movs	r2, #0
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	f7fe fe2f 	bl	8018a9e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e42:	331c      	adds	r3, #28
 8019e44:	2100      	movs	r1, #0
 8019e46:	4618      	mov	r0, r3
 8019e48:	f7fd fe2a 	bl	8017aa0 <st_dword>
					fs->wflag = 1;
 8019e4c:	697b      	ldr	r3, [r7, #20]
 8019e4e:	2201      	movs	r2, #1
 8019e50:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8019e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d037      	beq.n	8019ec8 <f_open+0x1d4>
						dw = fs->winsect;
 8019e58:	697b      	ldr	r3, [r7, #20]
 8019e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e5c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8019e5e:	f107 0318 	add.w	r3, r7, #24
 8019e62:	2200      	movs	r2, #0
 8019e64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8019e66:	4618      	mov	r0, r3
 8019e68:	f7fe fb1f 	bl	80184aa <remove_chain>
 8019e6c:	4603      	mov	r3, r0
 8019e6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8019e72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d126      	bne.n	8019ec8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8019e7a:	697b      	ldr	r3, [r7, #20]
 8019e7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019e7e:	4618      	mov	r0, r3
 8019e80:	f7fe f868 	bl	8017f54 <move_window>
 8019e84:	4603      	mov	r3, r0
 8019e86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019e8a:	697b      	ldr	r3, [r7, #20]
 8019e8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019e8e:	3a01      	subs	r2, #1
 8019e90:	615a      	str	r2, [r3, #20]
 8019e92:	e019      	b.n	8019ec8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8019e94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d115      	bne.n	8019ec8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8019e9c:	7fbb      	ldrb	r3, [r7, #30]
 8019e9e:	f003 0310 	and.w	r3, r3, #16
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d003      	beq.n	8019eae <f_open+0x1ba>
					res = FR_NO_FILE;
 8019ea6:	2304      	movs	r3, #4
 8019ea8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019eac:	e00c      	b.n	8019ec8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8019eae:	79fb      	ldrb	r3, [r7, #7]
 8019eb0:	f003 0302 	and.w	r3, r3, #2
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d007      	beq.n	8019ec8 <f_open+0x1d4>
 8019eb8:	7fbb      	ldrb	r3, [r7, #30]
 8019eba:	f003 0301 	and.w	r3, r3, #1
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d002      	beq.n	8019ec8 <f_open+0x1d4>
						res = FR_DENIED;
 8019ec2:	2307      	movs	r3, #7
 8019ec4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8019ec8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d128      	bne.n	8019f22 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8019ed0:	79fb      	ldrb	r3, [r7, #7]
 8019ed2:	f003 0308 	and.w	r3, r3, #8
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d003      	beq.n	8019ee2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8019eda:	79fb      	ldrb	r3, [r7, #7]
 8019edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ee0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8019ee2:	697b      	ldr	r3, [r7, #20]
 8019ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019ee6:	68fb      	ldr	r3, [r7, #12]
 8019ee8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8019eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019eec:	68fb      	ldr	r3, [r7, #12]
 8019eee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019ef0:	79fb      	ldrb	r3, [r7, #7]
 8019ef2:	f023 0301 	bic.w	r3, r3, #1
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	bf14      	ite	ne
 8019efa:	2301      	movne	r3, #1
 8019efc:	2300      	moveq	r3, #0
 8019efe:	b2db      	uxtb	r3, r3
 8019f00:	461a      	mov	r2, r3
 8019f02:	f107 0318 	add.w	r3, r7, #24
 8019f06:	4611      	mov	r1, r2
 8019f08:	4618      	mov	r0, r3
 8019f0a:	f7fd fef1 	bl	8017cf0 <inc_lock>
 8019f0e:	4602      	mov	r2, r0
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	691b      	ldr	r3, [r3, #16]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d102      	bne.n	8019f22 <f_open+0x22e>
 8019f1c:	2302      	movs	r3, #2
 8019f1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8019f22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	f040 80a3 	bne.w	801a072 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8019f2c:	697b      	ldr	r3, [r7, #20]
 8019f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019f30:	4611      	mov	r1, r2
 8019f32:	4618      	mov	r0, r3
 8019f34:	f7fe fd94 	bl	8018a60 <ld_clust>
 8019f38:	4602      	mov	r2, r0
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f40:	331c      	adds	r3, #28
 8019f42:	4618      	mov	r0, r3
 8019f44:	f7fd fd6e 	bl	8017a24 <ld_dword>
 8019f48:	4602      	mov	r2, r0
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	2200      	movs	r2, #0
 8019f52:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8019f54:	697a      	ldr	r2, [r7, #20]
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019f5a:	697b      	ldr	r3, [r7, #20]
 8019f5c:	88da      	ldrh	r2, [r3, #6]
 8019f5e:	68fb      	ldr	r3, [r7, #12]
 8019f60:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8019f62:	68fb      	ldr	r3, [r7, #12]
 8019f64:	79fa      	ldrb	r2, [r7, #7]
 8019f66:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	2200      	movs	r2, #0
 8019f6c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	2200      	movs	r2, #0
 8019f72:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	2200      	movs	r2, #0
 8019f78:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019f7a:	68fb      	ldr	r3, [r7, #12]
 8019f7c:	3330      	adds	r3, #48	; 0x30
 8019f7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019f82:	2100      	movs	r1, #0
 8019f84:	4618      	mov	r0, r3
 8019f86:	f7fd fdd8 	bl	8017b3a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019f8a:	79fb      	ldrb	r3, [r7, #7]
 8019f8c:	f003 0320 	and.w	r3, r3, #32
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d06e      	beq.n	801a072 <f_open+0x37e>
 8019f94:	68fb      	ldr	r3, [r7, #12]
 8019f96:	68db      	ldr	r3, [r3, #12]
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d06a      	beq.n	801a072 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	68da      	ldr	r2, [r3, #12]
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8019fa4:	697b      	ldr	r3, [r7, #20]
 8019fa6:	895b      	ldrh	r3, [r3, #10]
 8019fa8:	461a      	mov	r2, r3
 8019faa:	697b      	ldr	r3, [r7, #20]
 8019fac:	899b      	ldrh	r3, [r3, #12]
 8019fae:	fb02 f303 	mul.w	r3, r2, r3
 8019fb2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	689b      	ldr	r3, [r3, #8]
 8019fb8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	68db      	ldr	r3, [r3, #12]
 8019fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019fc0:	e016      	b.n	8019ff0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	f7fe f881 	bl	80180ce <get_fat>
 8019fcc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8019fce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019fd0:	2b01      	cmp	r3, #1
 8019fd2:	d802      	bhi.n	8019fda <f_open+0x2e6>
 8019fd4:	2302      	movs	r3, #2
 8019fd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8019fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fe0:	d102      	bne.n	8019fe8 <f_open+0x2f4>
 8019fe2:	2301      	movs	r3, #1
 8019fe4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019fe8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fec:	1ad3      	subs	r3, r2, r3
 8019fee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019ff0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	d103      	bne.n	801a000 <f_open+0x30c>
 8019ff8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ffc:	429a      	cmp	r2, r3
 8019ffe:	d8e0      	bhi.n	8019fc2 <f_open+0x2ce>
				}
				fp->clust = clst;
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801a004:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801a006:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d131      	bne.n	801a072 <f_open+0x37e>
 801a00e:	697b      	ldr	r3, [r7, #20]
 801a010:	899b      	ldrh	r3, [r3, #12]
 801a012:	461a      	mov	r2, r3
 801a014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a016:	fbb3 f1f2 	udiv	r1, r3, r2
 801a01a:	fb01 f202 	mul.w	r2, r1, r2
 801a01e:	1a9b      	subs	r3, r3, r2
 801a020:	2b00      	cmp	r3, #0
 801a022:	d026      	beq.n	801a072 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801a024:	697b      	ldr	r3, [r7, #20]
 801a026:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801a028:	4618      	mov	r0, r3
 801a02a:	f7fe f831 	bl	8018090 <clust2sect>
 801a02e:	64f8      	str	r0, [r7, #76]	; 0x4c
 801a030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a032:	2b00      	cmp	r3, #0
 801a034:	d103      	bne.n	801a03e <f_open+0x34a>
						res = FR_INT_ERR;
 801a036:	2302      	movs	r3, #2
 801a038:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801a03c:	e019      	b.n	801a072 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801a03e:	697b      	ldr	r3, [r7, #20]
 801a040:	899b      	ldrh	r3, [r3, #12]
 801a042:	461a      	mov	r2, r3
 801a044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a046:	fbb3 f2f2 	udiv	r2, r3, r2
 801a04a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a04c:	441a      	add	r2, r3
 801a04e:	68fb      	ldr	r3, [r7, #12]
 801a050:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801a052:	697b      	ldr	r3, [r7, #20]
 801a054:	7858      	ldrb	r0, [r3, #1]
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801a05c:	68fb      	ldr	r3, [r7, #12]
 801a05e:	6a1a      	ldr	r2, [r3, #32]
 801a060:	2301      	movs	r3, #1
 801a062:	f7fd fc69 	bl	8017938 <disk_read>
 801a066:	4603      	mov	r3, r0
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d002      	beq.n	801a072 <f_open+0x37e>
 801a06c:	2301      	movs	r3, #1
 801a06e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801a072:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801a076:	2b00      	cmp	r3, #0
 801a078:	d002      	beq.n	801a080 <f_open+0x38c>
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	2200      	movs	r2, #0
 801a07e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801a080:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801a084:	4618      	mov	r0, r3
 801a086:	3768      	adds	r7, #104	; 0x68
 801a088:	46bd      	mov	sp, r7
 801a08a:	bd80      	pop	{r7, pc}

0801a08c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801a08c:	b580      	push	{r7, lr}
 801a08e:	b08c      	sub	sp, #48	; 0x30
 801a090:	af00      	add	r7, sp, #0
 801a092:	60f8      	str	r0, [r7, #12]
 801a094:	60b9      	str	r1, [r7, #8]
 801a096:	607a      	str	r2, [r7, #4]
 801a098:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801a09a:	68bb      	ldr	r3, [r7, #8]
 801a09c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801a09e:	683b      	ldr	r3, [r7, #0]
 801a0a0:	2200      	movs	r2, #0
 801a0a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801a0a4:	68fb      	ldr	r3, [r7, #12]
 801a0a6:	f107 0210 	add.w	r2, r7, #16
 801a0aa:	4611      	mov	r1, r2
 801a0ac:	4618      	mov	r0, r3
 801a0ae:	f7ff fda5 	bl	8019bfc <validate>
 801a0b2:	4603      	mov	r3, r0
 801a0b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801a0b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d107      	bne.n	801a0d0 <f_write+0x44>
 801a0c0:	68fb      	ldr	r3, [r7, #12]
 801a0c2:	7d5b      	ldrb	r3, [r3, #21]
 801a0c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801a0c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d002      	beq.n	801a0d6 <f_write+0x4a>
 801a0d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a0d4:	e16a      	b.n	801a3ac <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	7d1b      	ldrb	r3, [r3, #20]
 801a0da:	f003 0302 	and.w	r3, r3, #2
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d101      	bne.n	801a0e6 <f_write+0x5a>
 801a0e2:	2307      	movs	r3, #7
 801a0e4:	e162      	b.n	801a3ac <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	699a      	ldr	r2, [r3, #24]
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	441a      	add	r2, r3
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	699b      	ldr	r3, [r3, #24]
 801a0f2:	429a      	cmp	r2, r3
 801a0f4:	f080 814c 	bcs.w	801a390 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	699b      	ldr	r3, [r3, #24]
 801a0fc:	43db      	mvns	r3, r3
 801a0fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801a100:	e146      	b.n	801a390 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801a102:	68fb      	ldr	r3, [r7, #12]
 801a104:	699b      	ldr	r3, [r3, #24]
 801a106:	693a      	ldr	r2, [r7, #16]
 801a108:	8992      	ldrh	r2, [r2, #12]
 801a10a:	fbb3 f1f2 	udiv	r1, r3, r2
 801a10e:	fb01 f202 	mul.w	r2, r1, r2
 801a112:	1a9b      	subs	r3, r3, r2
 801a114:	2b00      	cmp	r3, #0
 801a116:	f040 80f1 	bne.w	801a2fc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801a11a:	68fb      	ldr	r3, [r7, #12]
 801a11c:	699b      	ldr	r3, [r3, #24]
 801a11e:	693a      	ldr	r2, [r7, #16]
 801a120:	8992      	ldrh	r2, [r2, #12]
 801a122:	fbb3 f3f2 	udiv	r3, r3, r2
 801a126:	693a      	ldr	r2, [r7, #16]
 801a128:	8952      	ldrh	r2, [r2, #10]
 801a12a:	3a01      	subs	r2, #1
 801a12c:	4013      	ands	r3, r2
 801a12e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801a130:	69bb      	ldr	r3, [r7, #24]
 801a132:	2b00      	cmp	r3, #0
 801a134:	d143      	bne.n	801a1be <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801a136:	68fb      	ldr	r3, [r7, #12]
 801a138:	699b      	ldr	r3, [r3, #24]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d10c      	bne.n	801a158 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801a13e:	68fb      	ldr	r3, [r7, #12]
 801a140:	689b      	ldr	r3, [r3, #8]
 801a142:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801a144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a146:	2b00      	cmp	r3, #0
 801a148:	d11a      	bne.n	801a180 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801a14a:	68fb      	ldr	r3, [r7, #12]
 801a14c:	2100      	movs	r1, #0
 801a14e:	4618      	mov	r0, r3
 801a150:	f7fe fa10 	bl	8018574 <create_chain>
 801a154:	62b8      	str	r0, [r7, #40]	; 0x28
 801a156:	e013      	b.n	801a180 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d007      	beq.n	801a170 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	699b      	ldr	r3, [r3, #24]
 801a164:	4619      	mov	r1, r3
 801a166:	68f8      	ldr	r0, [r7, #12]
 801a168:	f7fe fa9c 	bl	80186a4 <clmt_clust>
 801a16c:	62b8      	str	r0, [r7, #40]	; 0x28
 801a16e:	e007      	b.n	801a180 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801a170:	68fa      	ldr	r2, [r7, #12]
 801a172:	68fb      	ldr	r3, [r7, #12]
 801a174:	69db      	ldr	r3, [r3, #28]
 801a176:	4619      	mov	r1, r3
 801a178:	4610      	mov	r0, r2
 801a17a:	f7fe f9fb 	bl	8018574 <create_chain>
 801a17e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a182:	2b00      	cmp	r3, #0
 801a184:	f000 8109 	beq.w	801a39a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801a188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a18a:	2b01      	cmp	r3, #1
 801a18c:	d104      	bne.n	801a198 <f_write+0x10c>
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	2202      	movs	r2, #2
 801a192:	755a      	strb	r2, [r3, #21]
 801a194:	2302      	movs	r3, #2
 801a196:	e109      	b.n	801a3ac <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a19e:	d104      	bne.n	801a1aa <f_write+0x11e>
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	2201      	movs	r2, #1
 801a1a4:	755a      	strb	r2, [r3, #21]
 801a1a6:	2301      	movs	r3, #1
 801a1a8:	e100      	b.n	801a3ac <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a1ae:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	689b      	ldr	r3, [r3, #8]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d102      	bne.n	801a1be <f_write+0x132>
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a1bc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	7d1b      	ldrb	r3, [r3, #20]
 801a1c2:	b25b      	sxtb	r3, r3
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	da18      	bge.n	801a1fa <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a1c8:	693b      	ldr	r3, [r7, #16]
 801a1ca:	7858      	ldrb	r0, [r3, #1]
 801a1cc:	68fb      	ldr	r3, [r7, #12]
 801a1ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801a1d2:	68fb      	ldr	r3, [r7, #12]
 801a1d4:	6a1a      	ldr	r2, [r3, #32]
 801a1d6:	2301      	movs	r3, #1
 801a1d8:	f7fd fbce 	bl	8017978 <disk_write>
 801a1dc:	4603      	mov	r3, r0
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	d004      	beq.n	801a1ec <f_write+0x160>
 801a1e2:	68fb      	ldr	r3, [r7, #12]
 801a1e4:	2201      	movs	r2, #1
 801a1e6:	755a      	strb	r2, [r3, #21]
 801a1e8:	2301      	movs	r3, #1
 801a1ea:	e0df      	b.n	801a3ac <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	7d1b      	ldrb	r3, [r3, #20]
 801a1f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a1f4:	b2da      	uxtb	r2, r3
 801a1f6:	68fb      	ldr	r3, [r7, #12]
 801a1f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801a1fa:	693a      	ldr	r2, [r7, #16]
 801a1fc:	68fb      	ldr	r3, [r7, #12]
 801a1fe:	69db      	ldr	r3, [r3, #28]
 801a200:	4619      	mov	r1, r3
 801a202:	4610      	mov	r0, r2
 801a204:	f7fd ff44 	bl	8018090 <clust2sect>
 801a208:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801a20a:	697b      	ldr	r3, [r7, #20]
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d104      	bne.n	801a21a <f_write+0x18e>
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	2202      	movs	r2, #2
 801a214:	755a      	strb	r2, [r3, #21]
 801a216:	2302      	movs	r3, #2
 801a218:	e0c8      	b.n	801a3ac <f_write+0x320>
			sect += csect;
 801a21a:	697a      	ldr	r2, [r7, #20]
 801a21c:	69bb      	ldr	r3, [r7, #24]
 801a21e:	4413      	add	r3, r2
 801a220:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801a222:	693b      	ldr	r3, [r7, #16]
 801a224:	899b      	ldrh	r3, [r3, #12]
 801a226:	461a      	mov	r2, r3
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	fbb3 f3f2 	udiv	r3, r3, r2
 801a22e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801a230:	6a3b      	ldr	r3, [r7, #32]
 801a232:	2b00      	cmp	r3, #0
 801a234:	d043      	beq.n	801a2be <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801a236:	69ba      	ldr	r2, [r7, #24]
 801a238:	6a3b      	ldr	r3, [r7, #32]
 801a23a:	4413      	add	r3, r2
 801a23c:	693a      	ldr	r2, [r7, #16]
 801a23e:	8952      	ldrh	r2, [r2, #10]
 801a240:	4293      	cmp	r3, r2
 801a242:	d905      	bls.n	801a250 <f_write+0x1c4>
					cc = fs->csize - csect;
 801a244:	693b      	ldr	r3, [r7, #16]
 801a246:	895b      	ldrh	r3, [r3, #10]
 801a248:	461a      	mov	r2, r3
 801a24a:	69bb      	ldr	r3, [r7, #24]
 801a24c:	1ad3      	subs	r3, r2, r3
 801a24e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a250:	693b      	ldr	r3, [r7, #16]
 801a252:	7858      	ldrb	r0, [r3, #1]
 801a254:	6a3b      	ldr	r3, [r7, #32]
 801a256:	697a      	ldr	r2, [r7, #20]
 801a258:	69f9      	ldr	r1, [r7, #28]
 801a25a:	f7fd fb8d 	bl	8017978 <disk_write>
 801a25e:	4603      	mov	r3, r0
 801a260:	2b00      	cmp	r3, #0
 801a262:	d004      	beq.n	801a26e <f_write+0x1e2>
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	2201      	movs	r2, #1
 801a268:	755a      	strb	r2, [r3, #21]
 801a26a:	2301      	movs	r3, #1
 801a26c:	e09e      	b.n	801a3ac <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	6a1a      	ldr	r2, [r3, #32]
 801a272:	697b      	ldr	r3, [r7, #20]
 801a274:	1ad3      	subs	r3, r2, r3
 801a276:	6a3a      	ldr	r2, [r7, #32]
 801a278:	429a      	cmp	r2, r3
 801a27a:	d918      	bls.n	801a2ae <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	6a1a      	ldr	r2, [r3, #32]
 801a286:	697b      	ldr	r3, [r7, #20]
 801a288:	1ad3      	subs	r3, r2, r3
 801a28a:	693a      	ldr	r2, [r7, #16]
 801a28c:	8992      	ldrh	r2, [r2, #12]
 801a28e:	fb02 f303 	mul.w	r3, r2, r3
 801a292:	69fa      	ldr	r2, [r7, #28]
 801a294:	18d1      	adds	r1, r2, r3
 801a296:	693b      	ldr	r3, [r7, #16]
 801a298:	899b      	ldrh	r3, [r3, #12]
 801a29a:	461a      	mov	r2, r3
 801a29c:	f7fd fc2c 	bl	8017af8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801a2a0:	68fb      	ldr	r3, [r7, #12]
 801a2a2:	7d1b      	ldrb	r3, [r3, #20]
 801a2a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a2a8:	b2da      	uxtb	r2, r3
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801a2ae:	693b      	ldr	r3, [r7, #16]
 801a2b0:	899b      	ldrh	r3, [r3, #12]
 801a2b2:	461a      	mov	r2, r3
 801a2b4:	6a3b      	ldr	r3, [r7, #32]
 801a2b6:	fb02 f303 	mul.w	r3, r2, r3
 801a2ba:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801a2bc:	e04b      	b.n	801a356 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a2be:	68fb      	ldr	r3, [r7, #12]
 801a2c0:	6a1b      	ldr	r3, [r3, #32]
 801a2c2:	697a      	ldr	r2, [r7, #20]
 801a2c4:	429a      	cmp	r2, r3
 801a2c6:	d016      	beq.n	801a2f6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	699a      	ldr	r2, [r3, #24]
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a2d0:	429a      	cmp	r2, r3
 801a2d2:	d210      	bcs.n	801a2f6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801a2d4:	693b      	ldr	r3, [r7, #16]
 801a2d6:	7858      	ldrb	r0, [r3, #1]
 801a2d8:	68fb      	ldr	r3, [r7, #12]
 801a2da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801a2de:	2301      	movs	r3, #1
 801a2e0:	697a      	ldr	r2, [r7, #20]
 801a2e2:	f7fd fb29 	bl	8017938 <disk_read>
 801a2e6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d004      	beq.n	801a2f6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	2201      	movs	r2, #1
 801a2f0:	755a      	strb	r2, [r3, #21]
 801a2f2:	2301      	movs	r3, #1
 801a2f4:	e05a      	b.n	801a3ac <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801a2f6:	68fb      	ldr	r3, [r7, #12]
 801a2f8:	697a      	ldr	r2, [r7, #20]
 801a2fa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801a2fc:	693b      	ldr	r3, [r7, #16]
 801a2fe:	899b      	ldrh	r3, [r3, #12]
 801a300:	4618      	mov	r0, r3
 801a302:	68fb      	ldr	r3, [r7, #12]
 801a304:	699b      	ldr	r3, [r3, #24]
 801a306:	693a      	ldr	r2, [r7, #16]
 801a308:	8992      	ldrh	r2, [r2, #12]
 801a30a:	fbb3 f1f2 	udiv	r1, r3, r2
 801a30e:	fb01 f202 	mul.w	r2, r1, r2
 801a312:	1a9b      	subs	r3, r3, r2
 801a314:	1ac3      	subs	r3, r0, r3
 801a316:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801a318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	429a      	cmp	r2, r3
 801a31e:	d901      	bls.n	801a324 <f_write+0x298>
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801a32a:	68fb      	ldr	r3, [r7, #12]
 801a32c:	699b      	ldr	r3, [r3, #24]
 801a32e:	693a      	ldr	r2, [r7, #16]
 801a330:	8992      	ldrh	r2, [r2, #12]
 801a332:	fbb3 f0f2 	udiv	r0, r3, r2
 801a336:	fb00 f202 	mul.w	r2, r0, r2
 801a33a:	1a9b      	subs	r3, r3, r2
 801a33c:	440b      	add	r3, r1
 801a33e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a340:	69f9      	ldr	r1, [r7, #28]
 801a342:	4618      	mov	r0, r3
 801a344:	f7fd fbd8 	bl	8017af8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	7d1b      	ldrb	r3, [r3, #20]
 801a34c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a350:	b2da      	uxtb	r2, r3
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801a356:	69fa      	ldr	r2, [r7, #28]
 801a358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a35a:	4413      	add	r3, r2
 801a35c:	61fb      	str	r3, [r7, #28]
 801a35e:	68fb      	ldr	r3, [r7, #12]
 801a360:	699a      	ldr	r2, [r3, #24]
 801a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a364:	441a      	add	r2, r3
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	619a      	str	r2, [r3, #24]
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	68da      	ldr	r2, [r3, #12]
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	699b      	ldr	r3, [r3, #24]
 801a372:	429a      	cmp	r2, r3
 801a374:	bf38      	it	cc
 801a376:	461a      	movcc	r2, r3
 801a378:	68fb      	ldr	r3, [r7, #12]
 801a37a:	60da      	str	r2, [r3, #12]
 801a37c:	683b      	ldr	r3, [r7, #0]
 801a37e:	681a      	ldr	r2, [r3, #0]
 801a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a382:	441a      	add	r2, r3
 801a384:	683b      	ldr	r3, [r7, #0]
 801a386:	601a      	str	r2, [r3, #0]
 801a388:	687a      	ldr	r2, [r7, #4]
 801a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a38c:	1ad3      	subs	r3, r2, r3
 801a38e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	2b00      	cmp	r3, #0
 801a394:	f47f aeb5 	bne.w	801a102 <f_write+0x76>
 801a398:	e000      	b.n	801a39c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a39a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	7d1b      	ldrb	r3, [r3, #20]
 801a3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3a4:	b2da      	uxtb	r2, r3
 801a3a6:	68fb      	ldr	r3, [r7, #12]
 801a3a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801a3aa:	2300      	movs	r3, #0
}
 801a3ac:	4618      	mov	r0, r3
 801a3ae:	3730      	adds	r7, #48	; 0x30
 801a3b0:	46bd      	mov	sp, r7
 801a3b2:	bd80      	pop	{r7, pc}

0801a3b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801a3b4:	b580      	push	{r7, lr}
 801a3b6:	b086      	sub	sp, #24
 801a3b8:	af00      	add	r7, sp, #0
 801a3ba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	f107 0208 	add.w	r2, r7, #8
 801a3c2:	4611      	mov	r1, r2
 801a3c4:	4618      	mov	r0, r3
 801a3c6:	f7ff fc19 	bl	8019bfc <validate>
 801a3ca:	4603      	mov	r3, r0
 801a3cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a3ce:	7dfb      	ldrb	r3, [r7, #23]
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d168      	bne.n	801a4a6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	7d1b      	ldrb	r3, [r3, #20]
 801a3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d062      	beq.n	801a4a6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	7d1b      	ldrb	r3, [r3, #20]
 801a3e4:	b25b      	sxtb	r3, r3
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	da15      	bge.n	801a416 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801a3ea:	68bb      	ldr	r3, [r7, #8]
 801a3ec:	7858      	ldrb	r0, [r3, #1]
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	6a1a      	ldr	r2, [r3, #32]
 801a3f8:	2301      	movs	r3, #1
 801a3fa:	f7fd fabd 	bl	8017978 <disk_write>
 801a3fe:	4603      	mov	r3, r0
 801a400:	2b00      	cmp	r3, #0
 801a402:	d001      	beq.n	801a408 <f_sync+0x54>
 801a404:	2301      	movs	r3, #1
 801a406:	e04f      	b.n	801a4a8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	7d1b      	ldrb	r3, [r3, #20]
 801a40c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a410:	b2da      	uxtb	r2, r3
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801a416:	f7fb f865 	bl	80154e4 <get_fattime>
 801a41a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801a41c:	68ba      	ldr	r2, [r7, #8]
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a422:	4619      	mov	r1, r3
 801a424:	4610      	mov	r0, r2
 801a426:	f7fd fd95 	bl	8017f54 <move_window>
 801a42a:	4603      	mov	r3, r0
 801a42c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801a42e:	7dfb      	ldrb	r3, [r7, #23]
 801a430:	2b00      	cmp	r3, #0
 801a432:	d138      	bne.n	801a4a6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a438:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	330b      	adds	r3, #11
 801a43e:	781a      	ldrb	r2, [r3, #0]
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	330b      	adds	r3, #11
 801a444:	f042 0220 	orr.w	r2, r2, #32
 801a448:	b2d2      	uxtb	r2, r2
 801a44a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	6818      	ldr	r0, [r3, #0]
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	689b      	ldr	r3, [r3, #8]
 801a454:	461a      	mov	r2, r3
 801a456:	68f9      	ldr	r1, [r7, #12]
 801a458:	f7fe fb21 	bl	8018a9e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801a45c:	68fb      	ldr	r3, [r7, #12]
 801a45e:	f103 021c 	add.w	r2, r3, #28
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	68db      	ldr	r3, [r3, #12]
 801a466:	4619      	mov	r1, r3
 801a468:	4610      	mov	r0, r2
 801a46a:	f7fd fb19 	bl	8017aa0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801a46e:	68fb      	ldr	r3, [r7, #12]
 801a470:	3316      	adds	r3, #22
 801a472:	6939      	ldr	r1, [r7, #16]
 801a474:	4618      	mov	r0, r3
 801a476:	f7fd fb13 	bl	8017aa0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801a47a:	68fb      	ldr	r3, [r7, #12]
 801a47c:	3312      	adds	r3, #18
 801a47e:	2100      	movs	r1, #0
 801a480:	4618      	mov	r0, r3
 801a482:	f7fd faf2 	bl	8017a6a <st_word>
					fs->wflag = 1;
 801a486:	68bb      	ldr	r3, [r7, #8]
 801a488:	2201      	movs	r2, #1
 801a48a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801a48c:	68bb      	ldr	r3, [r7, #8]
 801a48e:	4618      	mov	r0, r3
 801a490:	f7fd fd8e 	bl	8017fb0 <sync_fs>
 801a494:	4603      	mov	r3, r0
 801a496:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	7d1b      	ldrb	r3, [r3, #20]
 801a49c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a4a0:	b2da      	uxtb	r2, r3
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801a4a6:	7dfb      	ldrb	r3, [r7, #23]
}
 801a4a8:	4618      	mov	r0, r3
 801a4aa:	3718      	adds	r7, #24
 801a4ac:	46bd      	mov	sp, r7
 801a4ae:	bd80      	pop	{r7, pc}

0801a4b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801a4b0:	b580      	push	{r7, lr}
 801a4b2:	b084      	sub	sp, #16
 801a4b4:	af00      	add	r7, sp, #0
 801a4b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801a4b8:	6878      	ldr	r0, [r7, #4]
 801a4ba:	f7ff ff7b 	bl	801a3b4 <f_sync>
 801a4be:	4603      	mov	r3, r0
 801a4c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801a4c2:	7bfb      	ldrb	r3, [r7, #15]
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d118      	bne.n	801a4fa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	f107 0208 	add.w	r2, r7, #8
 801a4ce:	4611      	mov	r1, r2
 801a4d0:	4618      	mov	r0, r3
 801a4d2:	f7ff fb93 	bl	8019bfc <validate>
 801a4d6:	4603      	mov	r3, r0
 801a4d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801a4da:	7bfb      	ldrb	r3, [r7, #15]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d10c      	bne.n	801a4fa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	691b      	ldr	r3, [r3, #16]
 801a4e4:	4618      	mov	r0, r3
 801a4e6:	f7fd fc91 	bl	8017e0c <dec_lock>
 801a4ea:	4603      	mov	r3, r0
 801a4ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801a4ee:	7bfb      	ldrb	r3, [r7, #15]
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d102      	bne.n	801a4fa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	2200      	movs	r2, #0
 801a4f8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801a4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 801a4fc:	4618      	mov	r0, r3
 801a4fe:	3710      	adds	r7, #16
 801a500:	46bd      	mov	sp, r7
 801a502:	bd80      	pop	{r7, pc}

0801a504 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801a504:	b580      	push	{r7, lr}
 801a506:	b084      	sub	sp, #16
 801a508:	af00      	add	r7, sp, #0
 801a50a:	6078      	str	r0, [r7, #4]
 801a50c:	460b      	mov	r3, r1
 801a50e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801a510:	78fb      	ldrb	r3, [r7, #3]
 801a512:	2b0a      	cmp	r3, #10
 801a514:	d103      	bne.n	801a51e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801a516:	210d      	movs	r1, #13
 801a518:	6878      	ldr	r0, [r7, #4]
 801a51a:	f7ff fff3 	bl	801a504 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	685b      	ldr	r3, [r3, #4]
 801a522:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	2b00      	cmp	r3, #0
 801a528:	db25      	blt.n	801a576 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	1c5a      	adds	r2, r3, #1
 801a52e:	60fa      	str	r2, [r7, #12]
 801a530:	687a      	ldr	r2, [r7, #4]
 801a532:	4413      	add	r3, r2
 801a534:	78fa      	ldrb	r2, [r7, #3]
 801a536:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801a538:	68fb      	ldr	r3, [r7, #12]
 801a53a:	2b3c      	cmp	r3, #60	; 0x3c
 801a53c:	dd12      	ble.n	801a564 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	6818      	ldr	r0, [r3, #0]
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	f103 010c 	add.w	r1, r3, #12
 801a548:	68fa      	ldr	r2, [r7, #12]
 801a54a:	f107 0308 	add.w	r3, r7, #8
 801a54e:	f7ff fd9d 	bl	801a08c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801a552:	68ba      	ldr	r2, [r7, #8]
 801a554:	68fb      	ldr	r3, [r7, #12]
 801a556:	429a      	cmp	r2, r3
 801a558:	d101      	bne.n	801a55e <putc_bfd+0x5a>
 801a55a:	2300      	movs	r3, #0
 801a55c:	e001      	b.n	801a562 <putc_bfd+0x5e>
 801a55e:	f04f 33ff 	mov.w	r3, #4294967295
 801a562:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	68fa      	ldr	r2, [r7, #12]
 801a568:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	689b      	ldr	r3, [r3, #8]
 801a56e:	1c5a      	adds	r2, r3, #1
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	609a      	str	r2, [r3, #8]
 801a574:	e000      	b.n	801a578 <putc_bfd+0x74>
	if (i < 0) return;
 801a576:	bf00      	nop
}
 801a578:	3710      	adds	r7, #16
 801a57a:	46bd      	mov	sp, r7
 801a57c:	bd80      	pop	{r7, pc}

0801a57e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801a57e:	b580      	push	{r7, lr}
 801a580:	b084      	sub	sp, #16
 801a582:	af00      	add	r7, sp, #0
 801a584:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	685b      	ldr	r3, [r3, #4]
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	db16      	blt.n	801a5bc <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	6818      	ldr	r0, [r3, #0]
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	f103 010c 	add.w	r1, r3, #12
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	685b      	ldr	r3, [r3, #4]
 801a59c:	461a      	mov	r2, r3
 801a59e:	f107 030c 	add.w	r3, r7, #12
 801a5a2:	f7ff fd73 	bl	801a08c <f_write>
 801a5a6:	4603      	mov	r3, r0
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d107      	bne.n	801a5bc <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	685b      	ldr	r3, [r3, #4]
 801a5b0:	68fa      	ldr	r2, [r7, #12]
 801a5b2:	4293      	cmp	r3, r2
 801a5b4:	d102      	bne.n	801a5bc <putc_flush+0x3e>
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	689b      	ldr	r3, [r3, #8]
 801a5ba:	e001      	b.n	801a5c0 <putc_flush+0x42>
	return EOF;
 801a5bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	3710      	adds	r7, #16
 801a5c4:	46bd      	mov	sp, r7
 801a5c6:	bd80      	pop	{r7, pc}

0801a5c8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801a5c8:	b480      	push	{r7}
 801a5ca:	b083      	sub	sp, #12
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	6078      	str	r0, [r7, #4]
 801a5d0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	683a      	ldr	r2, [r7, #0]
 801a5d6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	2200      	movs	r2, #0
 801a5dc:	605a      	str	r2, [r3, #4]
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	685a      	ldr	r2, [r3, #4]
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	609a      	str	r2, [r3, #8]
}
 801a5e6:	bf00      	nop
 801a5e8:	370c      	adds	r7, #12
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5f0:	4770      	bx	lr

0801a5f2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801a5f2:	b580      	push	{r7, lr}
 801a5f4:	b096      	sub	sp, #88	; 0x58
 801a5f6:	af00      	add	r7, sp, #0
 801a5f8:	6078      	str	r0, [r7, #4]
 801a5fa:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801a5fc:	f107 030c 	add.w	r3, r7, #12
 801a600:	6839      	ldr	r1, [r7, #0]
 801a602:	4618      	mov	r0, r3
 801a604:	f7ff ffe0 	bl	801a5c8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801a608:	e009      	b.n	801a61e <f_puts+0x2c>
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	1c5a      	adds	r2, r3, #1
 801a60e:	607a      	str	r2, [r7, #4]
 801a610:	781a      	ldrb	r2, [r3, #0]
 801a612:	f107 030c 	add.w	r3, r7, #12
 801a616:	4611      	mov	r1, r2
 801a618:	4618      	mov	r0, r3
 801a61a:	f7ff ff73 	bl	801a504 <putc_bfd>
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	781b      	ldrb	r3, [r3, #0]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d1f1      	bne.n	801a60a <f_puts+0x18>
	return putc_flush(&pb);
 801a626:	f107 030c 	add.w	r3, r7, #12
 801a62a:	4618      	mov	r0, r3
 801a62c:	f7ff ffa7 	bl	801a57e <putc_flush>
 801a630:	4603      	mov	r3, r0
}
 801a632:	4618      	mov	r0, r3
 801a634:	3758      	adds	r7, #88	; 0x58
 801a636:	46bd      	mov	sp, r7
 801a638:	bd80      	pop	{r7, pc}
	...

0801a63c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a63c:	b480      	push	{r7}
 801a63e:	b087      	sub	sp, #28
 801a640:	af00      	add	r7, sp, #0
 801a642:	60f8      	str	r0, [r7, #12]
 801a644:	60b9      	str	r1, [r7, #8]
 801a646:	4613      	mov	r3, r2
 801a648:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a64a:	2301      	movs	r3, #1
 801a64c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a64e:	2300      	movs	r3, #0
 801a650:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a652:	4b1f      	ldr	r3, [pc, #124]	; (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a654:	7a5b      	ldrb	r3, [r3, #9]
 801a656:	b2db      	uxtb	r3, r3
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d131      	bne.n	801a6c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a65c:	4b1c      	ldr	r3, [pc, #112]	; (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a65e:	7a5b      	ldrb	r3, [r3, #9]
 801a660:	b2db      	uxtb	r3, r3
 801a662:	461a      	mov	r2, r3
 801a664:	4b1a      	ldr	r3, [pc, #104]	; (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a666:	2100      	movs	r1, #0
 801a668:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a66a:	4b19      	ldr	r3, [pc, #100]	; (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a66c:	7a5b      	ldrb	r3, [r3, #9]
 801a66e:	b2db      	uxtb	r3, r3
 801a670:	4a17      	ldr	r2, [pc, #92]	; (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a672:	009b      	lsls	r3, r3, #2
 801a674:	4413      	add	r3, r2
 801a676:	68fa      	ldr	r2, [r7, #12]
 801a678:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a67a:	4b15      	ldr	r3, [pc, #84]	; (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a67c:	7a5b      	ldrb	r3, [r3, #9]
 801a67e:	b2db      	uxtb	r3, r3
 801a680:	461a      	mov	r2, r3
 801a682:	4b13      	ldr	r3, [pc, #76]	; (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a684:	4413      	add	r3, r2
 801a686:	79fa      	ldrb	r2, [r7, #7]
 801a688:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801a68a:	4b11      	ldr	r3, [pc, #68]	; (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a68c:	7a5b      	ldrb	r3, [r3, #9]
 801a68e:	b2db      	uxtb	r3, r3
 801a690:	1c5a      	adds	r2, r3, #1
 801a692:	b2d1      	uxtb	r1, r2
 801a694:	4a0e      	ldr	r2, [pc, #56]	; (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a696:	7251      	strb	r1, [r2, #9]
 801a698:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a69a:	7dbb      	ldrb	r3, [r7, #22]
 801a69c:	3330      	adds	r3, #48	; 0x30
 801a69e:	b2da      	uxtb	r2, r3
 801a6a0:	68bb      	ldr	r3, [r7, #8]
 801a6a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a6a4:	68bb      	ldr	r3, [r7, #8]
 801a6a6:	3301      	adds	r3, #1
 801a6a8:	223a      	movs	r2, #58	; 0x3a
 801a6aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a6ac:	68bb      	ldr	r3, [r7, #8]
 801a6ae:	3302      	adds	r3, #2
 801a6b0:	222f      	movs	r2, #47	; 0x2f
 801a6b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a6b4:	68bb      	ldr	r3, [r7, #8]
 801a6b6:	3303      	adds	r3, #3
 801a6b8:	2200      	movs	r2, #0
 801a6ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a6bc:	2300      	movs	r3, #0
 801a6be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a6c0:	7dfb      	ldrb	r3, [r7, #23]
}
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	371c      	adds	r7, #28
 801a6c6:	46bd      	mov	sp, r7
 801a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6cc:	4770      	bx	lr
 801a6ce:	bf00      	nop
 801a6d0:	2400409c 	.word	0x2400409c

0801a6d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a6d4:	b580      	push	{r7, lr}
 801a6d6:	b082      	sub	sp, #8
 801a6d8:	af00      	add	r7, sp, #0
 801a6da:	6078      	str	r0, [r7, #4]
 801a6dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a6de:	2200      	movs	r2, #0
 801a6e0:	6839      	ldr	r1, [r7, #0]
 801a6e2:	6878      	ldr	r0, [r7, #4]
 801a6e4:	f7ff ffaa 	bl	801a63c <FATFS_LinkDriverEx>
 801a6e8:	4603      	mov	r3, r0
}
 801a6ea:	4618      	mov	r0, r3
 801a6ec:	3708      	adds	r7, #8
 801a6ee:	46bd      	mov	sp, r7
 801a6f0:	bd80      	pop	{r7, pc}
	...

0801a6f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801a6f4:	b480      	push	{r7}
 801a6f6:	b085      	sub	sp, #20
 801a6f8:	af00      	add	r7, sp, #0
 801a6fa:	4603      	mov	r3, r0
 801a6fc:	6039      	str	r1, [r7, #0]
 801a6fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801a700:	88fb      	ldrh	r3, [r7, #6]
 801a702:	2b7f      	cmp	r3, #127	; 0x7f
 801a704:	d802      	bhi.n	801a70c <ff_convert+0x18>
		c = chr;
 801a706:	88fb      	ldrh	r3, [r7, #6]
 801a708:	81fb      	strh	r3, [r7, #14]
 801a70a:	e025      	b.n	801a758 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801a70c:	683b      	ldr	r3, [r7, #0]
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d00b      	beq.n	801a72a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801a712:	88fb      	ldrh	r3, [r7, #6]
 801a714:	2bff      	cmp	r3, #255	; 0xff
 801a716:	d805      	bhi.n	801a724 <ff_convert+0x30>
 801a718:	88fb      	ldrh	r3, [r7, #6]
 801a71a:	3b80      	subs	r3, #128	; 0x80
 801a71c:	4a12      	ldr	r2, [pc, #72]	; (801a768 <ff_convert+0x74>)
 801a71e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a722:	e000      	b.n	801a726 <ff_convert+0x32>
 801a724:	2300      	movs	r3, #0
 801a726:	81fb      	strh	r3, [r7, #14]
 801a728:	e016      	b.n	801a758 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801a72a:	2300      	movs	r3, #0
 801a72c:	81fb      	strh	r3, [r7, #14]
 801a72e:	e009      	b.n	801a744 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801a730:	89fb      	ldrh	r3, [r7, #14]
 801a732:	4a0d      	ldr	r2, [pc, #52]	; (801a768 <ff_convert+0x74>)
 801a734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a738:	88fa      	ldrh	r2, [r7, #6]
 801a73a:	429a      	cmp	r2, r3
 801a73c:	d006      	beq.n	801a74c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801a73e:	89fb      	ldrh	r3, [r7, #14]
 801a740:	3301      	adds	r3, #1
 801a742:	81fb      	strh	r3, [r7, #14]
 801a744:	89fb      	ldrh	r3, [r7, #14]
 801a746:	2b7f      	cmp	r3, #127	; 0x7f
 801a748:	d9f2      	bls.n	801a730 <ff_convert+0x3c>
 801a74a:	e000      	b.n	801a74e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801a74c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801a74e:	89fb      	ldrh	r3, [r7, #14]
 801a750:	3380      	adds	r3, #128	; 0x80
 801a752:	b29b      	uxth	r3, r3
 801a754:	b2db      	uxtb	r3, r3
 801a756:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801a758:	89fb      	ldrh	r3, [r7, #14]
}
 801a75a:	4618      	mov	r0, r3
 801a75c:	3714      	adds	r7, #20
 801a75e:	46bd      	mov	sp, r7
 801a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a764:	4770      	bx	lr
 801a766:	bf00      	nop
 801a768:	080204d4 	.word	0x080204d4

0801a76c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801a76c:	b480      	push	{r7}
 801a76e:	b087      	sub	sp, #28
 801a770:	af00      	add	r7, sp, #0
 801a772:	4603      	mov	r3, r0
 801a774:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801a776:	88fb      	ldrh	r3, [r7, #6]
 801a778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a77c:	d201      	bcs.n	801a782 <ff_wtoupper+0x16>
 801a77e:	4b3e      	ldr	r3, [pc, #248]	; (801a878 <ff_wtoupper+0x10c>)
 801a780:	e000      	b.n	801a784 <ff_wtoupper+0x18>
 801a782:	4b3e      	ldr	r3, [pc, #248]	; (801a87c <ff_wtoupper+0x110>)
 801a784:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801a786:	697b      	ldr	r3, [r7, #20]
 801a788:	1c9a      	adds	r2, r3, #2
 801a78a:	617a      	str	r2, [r7, #20]
 801a78c:	881b      	ldrh	r3, [r3, #0]
 801a78e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801a790:	8a7b      	ldrh	r3, [r7, #18]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d068      	beq.n	801a868 <ff_wtoupper+0xfc>
 801a796:	88fa      	ldrh	r2, [r7, #6]
 801a798:	8a7b      	ldrh	r3, [r7, #18]
 801a79a:	429a      	cmp	r2, r3
 801a79c:	d364      	bcc.n	801a868 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801a79e:	697b      	ldr	r3, [r7, #20]
 801a7a0:	1c9a      	adds	r2, r3, #2
 801a7a2:	617a      	str	r2, [r7, #20]
 801a7a4:	881b      	ldrh	r3, [r3, #0]
 801a7a6:	823b      	strh	r3, [r7, #16]
 801a7a8:	8a3b      	ldrh	r3, [r7, #16]
 801a7aa:	0a1b      	lsrs	r3, r3, #8
 801a7ac:	81fb      	strh	r3, [r7, #14]
 801a7ae:	8a3b      	ldrh	r3, [r7, #16]
 801a7b0:	b2db      	uxtb	r3, r3
 801a7b2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801a7b4:	88fa      	ldrh	r2, [r7, #6]
 801a7b6:	8a79      	ldrh	r1, [r7, #18]
 801a7b8:	8a3b      	ldrh	r3, [r7, #16]
 801a7ba:	440b      	add	r3, r1
 801a7bc:	429a      	cmp	r2, r3
 801a7be:	da49      	bge.n	801a854 <ff_wtoupper+0xe8>
			switch (cmd) {
 801a7c0:	89fb      	ldrh	r3, [r7, #14]
 801a7c2:	2b08      	cmp	r3, #8
 801a7c4:	d84f      	bhi.n	801a866 <ff_wtoupper+0xfa>
 801a7c6:	a201      	add	r2, pc, #4	; (adr r2, 801a7cc <ff_wtoupper+0x60>)
 801a7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a7cc:	0801a7f1 	.word	0x0801a7f1
 801a7d0:	0801a803 	.word	0x0801a803
 801a7d4:	0801a819 	.word	0x0801a819
 801a7d8:	0801a821 	.word	0x0801a821
 801a7dc:	0801a829 	.word	0x0801a829
 801a7e0:	0801a831 	.word	0x0801a831
 801a7e4:	0801a839 	.word	0x0801a839
 801a7e8:	0801a841 	.word	0x0801a841
 801a7ec:	0801a849 	.word	0x0801a849
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801a7f0:	88fa      	ldrh	r2, [r7, #6]
 801a7f2:	8a7b      	ldrh	r3, [r7, #18]
 801a7f4:	1ad3      	subs	r3, r2, r3
 801a7f6:	005b      	lsls	r3, r3, #1
 801a7f8:	697a      	ldr	r2, [r7, #20]
 801a7fa:	4413      	add	r3, r2
 801a7fc:	881b      	ldrh	r3, [r3, #0]
 801a7fe:	80fb      	strh	r3, [r7, #6]
 801a800:	e027      	b.n	801a852 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801a802:	88fa      	ldrh	r2, [r7, #6]
 801a804:	8a7b      	ldrh	r3, [r7, #18]
 801a806:	1ad3      	subs	r3, r2, r3
 801a808:	b29b      	uxth	r3, r3
 801a80a:	f003 0301 	and.w	r3, r3, #1
 801a80e:	b29b      	uxth	r3, r3
 801a810:	88fa      	ldrh	r2, [r7, #6]
 801a812:	1ad3      	subs	r3, r2, r3
 801a814:	80fb      	strh	r3, [r7, #6]
 801a816:	e01c      	b.n	801a852 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801a818:	88fb      	ldrh	r3, [r7, #6]
 801a81a:	3b10      	subs	r3, #16
 801a81c:	80fb      	strh	r3, [r7, #6]
 801a81e:	e018      	b.n	801a852 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801a820:	88fb      	ldrh	r3, [r7, #6]
 801a822:	3b20      	subs	r3, #32
 801a824:	80fb      	strh	r3, [r7, #6]
 801a826:	e014      	b.n	801a852 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801a828:	88fb      	ldrh	r3, [r7, #6]
 801a82a:	3b30      	subs	r3, #48	; 0x30
 801a82c:	80fb      	strh	r3, [r7, #6]
 801a82e:	e010      	b.n	801a852 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801a830:	88fb      	ldrh	r3, [r7, #6]
 801a832:	3b1a      	subs	r3, #26
 801a834:	80fb      	strh	r3, [r7, #6]
 801a836:	e00c      	b.n	801a852 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801a838:	88fb      	ldrh	r3, [r7, #6]
 801a83a:	3308      	adds	r3, #8
 801a83c:	80fb      	strh	r3, [r7, #6]
 801a83e:	e008      	b.n	801a852 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801a840:	88fb      	ldrh	r3, [r7, #6]
 801a842:	3b50      	subs	r3, #80	; 0x50
 801a844:	80fb      	strh	r3, [r7, #6]
 801a846:	e004      	b.n	801a852 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801a848:	88fb      	ldrh	r3, [r7, #6]
 801a84a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801a84e:	80fb      	strh	r3, [r7, #6]
 801a850:	bf00      	nop
			}
			break;
 801a852:	e008      	b.n	801a866 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801a854:	89fb      	ldrh	r3, [r7, #14]
 801a856:	2b00      	cmp	r3, #0
 801a858:	d195      	bne.n	801a786 <ff_wtoupper+0x1a>
 801a85a:	8a3b      	ldrh	r3, [r7, #16]
 801a85c:	005b      	lsls	r3, r3, #1
 801a85e:	697a      	ldr	r2, [r7, #20]
 801a860:	4413      	add	r3, r2
 801a862:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801a864:	e78f      	b.n	801a786 <ff_wtoupper+0x1a>
			break;
 801a866:	bf00      	nop
	}

	return chr;
 801a868:	88fb      	ldrh	r3, [r7, #6]
}
 801a86a:	4618      	mov	r0, r3
 801a86c:	371c      	adds	r7, #28
 801a86e:	46bd      	mov	sp, r7
 801a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a874:	4770      	bx	lr
 801a876:	bf00      	nop
 801a878:	080205d4 	.word	0x080205d4
 801a87c:	080207c8 	.word	0x080207c8

0801a880 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a880:	b580      	push	{r7, lr}
 801a882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801a884:	2201      	movs	r2, #1
 801a886:	4913      	ldr	r1, [pc, #76]	; (801a8d4 <MX_USB_DEVICE_Init+0x54>)
 801a888:	4813      	ldr	r0, [pc, #76]	; (801a8d8 <MX_USB_DEVICE_Init+0x58>)
 801a88a:	f7fb fd1d 	bl	80162c8 <USBD_Init>
 801a88e:	4603      	mov	r3, r0
 801a890:	2b00      	cmp	r3, #0
 801a892:	d001      	beq.n	801a898 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a894:	f7e8 f830 	bl	80028f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801a898:	4910      	ldr	r1, [pc, #64]	; (801a8dc <MX_USB_DEVICE_Init+0x5c>)
 801a89a:	480f      	ldr	r0, [pc, #60]	; (801a8d8 <MX_USB_DEVICE_Init+0x58>)
 801a89c:	f7fb fd44 	bl	8016328 <USBD_RegisterClass>
 801a8a0:	4603      	mov	r3, r0
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d001      	beq.n	801a8aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a8a6:	f7e8 f827 	bl	80028f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801a8aa:	490d      	ldr	r1, [pc, #52]	; (801a8e0 <MX_USB_DEVICE_Init+0x60>)
 801a8ac:	480a      	ldr	r0, [pc, #40]	; (801a8d8 <MX_USB_DEVICE_Init+0x58>)
 801a8ae:	f7fb fc3b 	bl	8016128 <USBD_CDC_RegisterInterface>
 801a8b2:	4603      	mov	r3, r0
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d001      	beq.n	801a8bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a8b8:	f7e8 f81e 	bl	80028f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801a8bc:	4806      	ldr	r0, [pc, #24]	; (801a8d8 <MX_USB_DEVICE_Init+0x58>)
 801a8be:	f7fb fd69 	bl	8016394 <USBD_Start>
 801a8c2:	4603      	mov	r3, r0
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d001      	beq.n	801a8cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a8c8:	f7e8 f816 	bl	80028f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801a8cc:	f7ef ffe6 	bl	800a89c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a8d0:	bf00      	nop
 801a8d2:	bd80      	pop	{r7, pc}
 801a8d4:	240001b0 	.word	0x240001b0
 801a8d8:	240040a8 	.word	0x240040a8
 801a8dc:	2400011c 	.word	0x2400011c
 801a8e0:	2400019c 	.word	0x2400019c

0801a8e4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801a8e4:	b580      	push	{r7, lr}
 801a8e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801a8e8:	2200      	movs	r2, #0
 801a8ea:	4905      	ldr	r1, [pc, #20]	; (801a900 <CDC_Init_HS+0x1c>)
 801a8ec:	4805      	ldr	r0, [pc, #20]	; (801a904 <CDC_Init_HS+0x20>)
 801a8ee:	f7fb fc35 	bl	801615c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801a8f2:	4905      	ldr	r1, [pc, #20]	; (801a908 <CDC_Init_HS+0x24>)
 801a8f4:	4803      	ldr	r0, [pc, #12]	; (801a904 <CDC_Init_HS+0x20>)
 801a8f6:	f7fb fc53 	bl	80161a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a8fa:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	bd80      	pop	{r7, pc}
 801a900:	24004b84 	.word	0x24004b84
 801a904:	240040a8 	.word	0x240040a8
 801a908:	24004384 	.word	0x24004384

0801a90c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801a90c:	b480      	push	{r7}
 801a90e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801a910:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801a912:	4618      	mov	r0, r3
 801a914:	46bd      	mov	sp, r7
 801a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a91a:	4770      	bx	lr

0801a91c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a91c:	b480      	push	{r7}
 801a91e:	b083      	sub	sp, #12
 801a920:	af00      	add	r7, sp, #0
 801a922:	4603      	mov	r3, r0
 801a924:	6039      	str	r1, [r7, #0]
 801a926:	71fb      	strb	r3, [r7, #7]
 801a928:	4613      	mov	r3, r2
 801a92a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801a92c:	79fb      	ldrb	r3, [r7, #7]
 801a92e:	2b23      	cmp	r3, #35	; 0x23
 801a930:	d84a      	bhi.n	801a9c8 <CDC_Control_HS+0xac>
 801a932:	a201      	add	r2, pc, #4	; (adr r2, 801a938 <CDC_Control_HS+0x1c>)
 801a934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a938:	0801a9c9 	.word	0x0801a9c9
 801a93c:	0801a9c9 	.word	0x0801a9c9
 801a940:	0801a9c9 	.word	0x0801a9c9
 801a944:	0801a9c9 	.word	0x0801a9c9
 801a948:	0801a9c9 	.word	0x0801a9c9
 801a94c:	0801a9c9 	.word	0x0801a9c9
 801a950:	0801a9c9 	.word	0x0801a9c9
 801a954:	0801a9c9 	.word	0x0801a9c9
 801a958:	0801a9c9 	.word	0x0801a9c9
 801a95c:	0801a9c9 	.word	0x0801a9c9
 801a960:	0801a9c9 	.word	0x0801a9c9
 801a964:	0801a9c9 	.word	0x0801a9c9
 801a968:	0801a9c9 	.word	0x0801a9c9
 801a96c:	0801a9c9 	.word	0x0801a9c9
 801a970:	0801a9c9 	.word	0x0801a9c9
 801a974:	0801a9c9 	.word	0x0801a9c9
 801a978:	0801a9c9 	.word	0x0801a9c9
 801a97c:	0801a9c9 	.word	0x0801a9c9
 801a980:	0801a9c9 	.word	0x0801a9c9
 801a984:	0801a9c9 	.word	0x0801a9c9
 801a988:	0801a9c9 	.word	0x0801a9c9
 801a98c:	0801a9c9 	.word	0x0801a9c9
 801a990:	0801a9c9 	.word	0x0801a9c9
 801a994:	0801a9c9 	.word	0x0801a9c9
 801a998:	0801a9c9 	.word	0x0801a9c9
 801a99c:	0801a9c9 	.word	0x0801a9c9
 801a9a0:	0801a9c9 	.word	0x0801a9c9
 801a9a4:	0801a9c9 	.word	0x0801a9c9
 801a9a8:	0801a9c9 	.word	0x0801a9c9
 801a9ac:	0801a9c9 	.word	0x0801a9c9
 801a9b0:	0801a9c9 	.word	0x0801a9c9
 801a9b4:	0801a9c9 	.word	0x0801a9c9
 801a9b8:	0801a9c9 	.word	0x0801a9c9
 801a9bc:	0801a9c9 	.word	0x0801a9c9
 801a9c0:	0801a9c9 	.word	0x0801a9c9
 801a9c4:	0801a9c9 	.word	0x0801a9c9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a9c8:	bf00      	nop
  }

  return (USBD_OK);
 801a9ca:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801a9cc:	4618      	mov	r0, r3
 801a9ce:	370c      	adds	r7, #12
 801a9d0:	46bd      	mov	sp, r7
 801a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9d6:	4770      	bx	lr

0801a9d8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	b082      	sub	sp, #8
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	6078      	str	r0, [r7, #4]
 801a9e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801a9e2:	6879      	ldr	r1, [r7, #4]
 801a9e4:	4805      	ldr	r0, [pc, #20]	; (801a9fc <CDC_Receive_HS+0x24>)
 801a9e6:	f7fb fbdb 	bl	80161a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801a9ea:	4804      	ldr	r0, [pc, #16]	; (801a9fc <CDC_Receive_HS+0x24>)
 801a9ec:	f7fb fc36 	bl	801625c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a9f0:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801a9f2:	4618      	mov	r0, r3
 801a9f4:	3708      	adds	r7, #8
 801a9f6:	46bd      	mov	sp, r7
 801a9f8:	bd80      	pop	{r7, pc}
 801a9fa:	bf00      	nop
 801a9fc:	240040a8 	.word	0x240040a8

0801aa00 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801aa00:	b580      	push	{r7, lr}
 801aa02:	b084      	sub	sp, #16
 801aa04:	af00      	add	r7, sp, #0
 801aa06:	6078      	str	r0, [r7, #4]
 801aa08:	460b      	mov	r3, r1
 801aa0a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801aa10:	4b0d      	ldr	r3, [pc, #52]	; (801aa48 <CDC_Transmit_HS+0x48>)
 801aa12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801aa16:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801aa18:	68bb      	ldr	r3, [r7, #8]
 801aa1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d001      	beq.n	801aa26 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801aa22:	2301      	movs	r3, #1
 801aa24:	e00b      	b.n	801aa3e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801aa26:	887b      	ldrh	r3, [r7, #2]
 801aa28:	461a      	mov	r2, r3
 801aa2a:	6879      	ldr	r1, [r7, #4]
 801aa2c:	4806      	ldr	r0, [pc, #24]	; (801aa48 <CDC_Transmit_HS+0x48>)
 801aa2e:	f7fb fb95 	bl	801615c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801aa32:	4805      	ldr	r0, [pc, #20]	; (801aa48 <CDC_Transmit_HS+0x48>)
 801aa34:	f7fb fbd2 	bl	80161dc <USBD_CDC_TransmitPacket>
 801aa38:	4603      	mov	r3, r0
 801aa3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801aa3c:	7bfb      	ldrb	r3, [r7, #15]
}
 801aa3e:	4618      	mov	r0, r3
 801aa40:	3710      	adds	r7, #16
 801aa42:	46bd      	mov	sp, r7
 801aa44:	bd80      	pop	{r7, pc}
 801aa46:	bf00      	nop
 801aa48:	240040a8 	.word	0x240040a8

0801aa4c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801aa4c:	b480      	push	{r7}
 801aa4e:	b087      	sub	sp, #28
 801aa50:	af00      	add	r7, sp, #0
 801aa52:	60f8      	str	r0, [r7, #12]
 801aa54:	60b9      	str	r1, [r7, #8]
 801aa56:	4613      	mov	r3, r2
 801aa58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801aa5a:	2300      	movs	r3, #0
 801aa5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801aa5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801aa62:	4618      	mov	r0, r3
 801aa64:	371c      	adds	r7, #28
 801aa66:	46bd      	mov	sp, r7
 801aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa6c:	4770      	bx	lr
	...

0801aa70 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aa70:	b480      	push	{r7}
 801aa72:	b083      	sub	sp, #12
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	4603      	mov	r3, r0
 801aa78:	6039      	str	r1, [r7, #0]
 801aa7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801aa7c:	683b      	ldr	r3, [r7, #0]
 801aa7e:	2212      	movs	r2, #18
 801aa80:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801aa82:	4b03      	ldr	r3, [pc, #12]	; (801aa90 <USBD_HS_DeviceDescriptor+0x20>)
}
 801aa84:	4618      	mov	r0, r3
 801aa86:	370c      	adds	r7, #12
 801aa88:	46bd      	mov	sp, r7
 801aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa8e:	4770      	bx	lr
 801aa90:	240001cc 	.word	0x240001cc

0801aa94 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aa94:	b480      	push	{r7}
 801aa96:	b083      	sub	sp, #12
 801aa98:	af00      	add	r7, sp, #0
 801aa9a:	4603      	mov	r3, r0
 801aa9c:	6039      	str	r1, [r7, #0]
 801aa9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801aaa0:	683b      	ldr	r3, [r7, #0]
 801aaa2:	2204      	movs	r2, #4
 801aaa4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801aaa6:	4b03      	ldr	r3, [pc, #12]	; (801aab4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	370c      	adds	r7, #12
 801aaac:	46bd      	mov	sp, r7
 801aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aab2:	4770      	bx	lr
 801aab4:	240001e0 	.word	0x240001e0

0801aab8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aab8:	b580      	push	{r7, lr}
 801aaba:	b082      	sub	sp, #8
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	4603      	mov	r3, r0
 801aac0:	6039      	str	r1, [r7, #0]
 801aac2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801aac4:	79fb      	ldrb	r3, [r7, #7]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d105      	bne.n	801aad6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801aaca:	683a      	ldr	r2, [r7, #0]
 801aacc:	4907      	ldr	r1, [pc, #28]	; (801aaec <USBD_HS_ProductStrDescriptor+0x34>)
 801aace:	4808      	ldr	r0, [pc, #32]	; (801aaf0 <USBD_HS_ProductStrDescriptor+0x38>)
 801aad0:	f7fc fe12 	bl	80176f8 <USBD_GetString>
 801aad4:	e004      	b.n	801aae0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801aad6:	683a      	ldr	r2, [r7, #0]
 801aad8:	4904      	ldr	r1, [pc, #16]	; (801aaec <USBD_HS_ProductStrDescriptor+0x34>)
 801aada:	4805      	ldr	r0, [pc, #20]	; (801aaf0 <USBD_HS_ProductStrDescriptor+0x38>)
 801aadc:	f7fc fe0c 	bl	80176f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801aae0:	4b02      	ldr	r3, [pc, #8]	; (801aaec <USBD_HS_ProductStrDescriptor+0x34>)
}
 801aae2:	4618      	mov	r0, r3
 801aae4:	3708      	adds	r7, #8
 801aae6:	46bd      	mov	sp, r7
 801aae8:	bd80      	pop	{r7, pc}
 801aaea:	bf00      	nop
 801aaec:	24005384 	.word	0x24005384
 801aaf0:	08020338 	.word	0x08020338

0801aaf4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aaf4:	b580      	push	{r7, lr}
 801aaf6:	b082      	sub	sp, #8
 801aaf8:	af00      	add	r7, sp, #0
 801aafa:	4603      	mov	r3, r0
 801aafc:	6039      	str	r1, [r7, #0]
 801aafe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ab00:	683a      	ldr	r2, [r7, #0]
 801ab02:	4904      	ldr	r1, [pc, #16]	; (801ab14 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801ab04:	4804      	ldr	r0, [pc, #16]	; (801ab18 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801ab06:	f7fc fdf7 	bl	80176f8 <USBD_GetString>
  return USBD_StrDesc;
 801ab0a:	4b02      	ldr	r3, [pc, #8]	; (801ab14 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801ab0c:	4618      	mov	r0, r3
 801ab0e:	3708      	adds	r7, #8
 801ab10:	46bd      	mov	sp, r7
 801ab12:	bd80      	pop	{r7, pc}
 801ab14:	24005384 	.word	0x24005384
 801ab18:	08020354 	.word	0x08020354

0801ab1c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab1c:	b580      	push	{r7, lr}
 801ab1e:	b082      	sub	sp, #8
 801ab20:	af00      	add	r7, sp, #0
 801ab22:	4603      	mov	r3, r0
 801ab24:	6039      	str	r1, [r7, #0]
 801ab26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801ab28:	683b      	ldr	r3, [r7, #0]
 801ab2a:	221a      	movs	r2, #26
 801ab2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801ab2e:	f000 f843 	bl	801abb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801ab32:	4b02      	ldr	r3, [pc, #8]	; (801ab3c <USBD_HS_SerialStrDescriptor+0x20>)
}
 801ab34:	4618      	mov	r0, r3
 801ab36:	3708      	adds	r7, #8
 801ab38:	46bd      	mov	sp, r7
 801ab3a:	bd80      	pop	{r7, pc}
 801ab3c:	240001e4 	.word	0x240001e4

0801ab40 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab40:	b580      	push	{r7, lr}
 801ab42:	b082      	sub	sp, #8
 801ab44:	af00      	add	r7, sp, #0
 801ab46:	4603      	mov	r3, r0
 801ab48:	6039      	str	r1, [r7, #0]
 801ab4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801ab4c:	79fb      	ldrb	r3, [r7, #7]
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d105      	bne.n	801ab5e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801ab52:	683a      	ldr	r2, [r7, #0]
 801ab54:	4907      	ldr	r1, [pc, #28]	; (801ab74 <USBD_HS_ConfigStrDescriptor+0x34>)
 801ab56:	4808      	ldr	r0, [pc, #32]	; (801ab78 <USBD_HS_ConfigStrDescriptor+0x38>)
 801ab58:	f7fc fdce 	bl	80176f8 <USBD_GetString>
 801ab5c:	e004      	b.n	801ab68 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801ab5e:	683a      	ldr	r2, [r7, #0]
 801ab60:	4904      	ldr	r1, [pc, #16]	; (801ab74 <USBD_HS_ConfigStrDescriptor+0x34>)
 801ab62:	4805      	ldr	r0, [pc, #20]	; (801ab78 <USBD_HS_ConfigStrDescriptor+0x38>)
 801ab64:	f7fc fdc8 	bl	80176f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ab68:	4b02      	ldr	r3, [pc, #8]	; (801ab74 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	3708      	adds	r7, #8
 801ab6e:	46bd      	mov	sp, r7
 801ab70:	bd80      	pop	{r7, pc}
 801ab72:	bf00      	nop
 801ab74:	24005384 	.word	0x24005384
 801ab78:	08020358 	.word	0x08020358

0801ab7c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab7c:	b580      	push	{r7, lr}
 801ab7e:	b082      	sub	sp, #8
 801ab80:	af00      	add	r7, sp, #0
 801ab82:	4603      	mov	r3, r0
 801ab84:	6039      	str	r1, [r7, #0]
 801ab86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ab88:	79fb      	ldrb	r3, [r7, #7]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d105      	bne.n	801ab9a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801ab8e:	683a      	ldr	r2, [r7, #0]
 801ab90:	4907      	ldr	r1, [pc, #28]	; (801abb0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801ab92:	4808      	ldr	r0, [pc, #32]	; (801abb4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801ab94:	f7fc fdb0 	bl	80176f8 <USBD_GetString>
 801ab98:	e004      	b.n	801aba4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801ab9a:	683a      	ldr	r2, [r7, #0]
 801ab9c:	4904      	ldr	r1, [pc, #16]	; (801abb0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801ab9e:	4805      	ldr	r0, [pc, #20]	; (801abb4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801aba0:	f7fc fdaa 	bl	80176f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801aba4:	4b02      	ldr	r3, [pc, #8]	; (801abb0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801aba6:	4618      	mov	r0, r3
 801aba8:	3708      	adds	r7, #8
 801abaa:	46bd      	mov	sp, r7
 801abac:	bd80      	pop	{r7, pc}
 801abae:	bf00      	nop
 801abb0:	24005384 	.word	0x24005384
 801abb4:	08020364 	.word	0x08020364

0801abb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801abb8:	b580      	push	{r7, lr}
 801abba:	b084      	sub	sp, #16
 801abbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801abbe:	4b0f      	ldr	r3, [pc, #60]	; (801abfc <Get_SerialNum+0x44>)
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801abc4:	4b0e      	ldr	r3, [pc, #56]	; (801ac00 <Get_SerialNum+0x48>)
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801abca:	4b0e      	ldr	r3, [pc, #56]	; (801ac04 <Get_SerialNum+0x4c>)
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801abd0:	68fa      	ldr	r2, [r7, #12]
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	4413      	add	r3, r2
 801abd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d009      	beq.n	801abf2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801abde:	2208      	movs	r2, #8
 801abe0:	4909      	ldr	r1, [pc, #36]	; (801ac08 <Get_SerialNum+0x50>)
 801abe2:	68f8      	ldr	r0, [r7, #12]
 801abe4:	f000 f814 	bl	801ac10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801abe8:	2204      	movs	r2, #4
 801abea:	4908      	ldr	r1, [pc, #32]	; (801ac0c <Get_SerialNum+0x54>)
 801abec:	68b8      	ldr	r0, [r7, #8]
 801abee:	f000 f80f 	bl	801ac10 <IntToUnicode>
  }
}
 801abf2:	bf00      	nop
 801abf4:	3710      	adds	r7, #16
 801abf6:	46bd      	mov	sp, r7
 801abf8:	bd80      	pop	{r7, pc}
 801abfa:	bf00      	nop
 801abfc:	1ff1e800 	.word	0x1ff1e800
 801ac00:	1ff1e804 	.word	0x1ff1e804
 801ac04:	1ff1e808 	.word	0x1ff1e808
 801ac08:	240001e6 	.word	0x240001e6
 801ac0c:	240001f6 	.word	0x240001f6

0801ac10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801ac10:	b480      	push	{r7}
 801ac12:	b087      	sub	sp, #28
 801ac14:	af00      	add	r7, sp, #0
 801ac16:	60f8      	str	r0, [r7, #12]
 801ac18:	60b9      	str	r1, [r7, #8]
 801ac1a:	4613      	mov	r3, r2
 801ac1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801ac1e:	2300      	movs	r3, #0
 801ac20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801ac22:	2300      	movs	r3, #0
 801ac24:	75fb      	strb	r3, [r7, #23]
 801ac26:	e027      	b.n	801ac78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	0f1b      	lsrs	r3, r3, #28
 801ac2c:	2b09      	cmp	r3, #9
 801ac2e:	d80b      	bhi.n	801ac48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	0f1b      	lsrs	r3, r3, #28
 801ac34:	b2da      	uxtb	r2, r3
 801ac36:	7dfb      	ldrb	r3, [r7, #23]
 801ac38:	005b      	lsls	r3, r3, #1
 801ac3a:	4619      	mov	r1, r3
 801ac3c:	68bb      	ldr	r3, [r7, #8]
 801ac3e:	440b      	add	r3, r1
 801ac40:	3230      	adds	r2, #48	; 0x30
 801ac42:	b2d2      	uxtb	r2, r2
 801ac44:	701a      	strb	r2, [r3, #0]
 801ac46:	e00a      	b.n	801ac5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	0f1b      	lsrs	r3, r3, #28
 801ac4c:	b2da      	uxtb	r2, r3
 801ac4e:	7dfb      	ldrb	r3, [r7, #23]
 801ac50:	005b      	lsls	r3, r3, #1
 801ac52:	4619      	mov	r1, r3
 801ac54:	68bb      	ldr	r3, [r7, #8]
 801ac56:	440b      	add	r3, r1
 801ac58:	3237      	adds	r2, #55	; 0x37
 801ac5a:	b2d2      	uxtb	r2, r2
 801ac5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801ac5e:	68fb      	ldr	r3, [r7, #12]
 801ac60:	011b      	lsls	r3, r3, #4
 801ac62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801ac64:	7dfb      	ldrb	r3, [r7, #23]
 801ac66:	005b      	lsls	r3, r3, #1
 801ac68:	3301      	adds	r3, #1
 801ac6a:	68ba      	ldr	r2, [r7, #8]
 801ac6c:	4413      	add	r3, r2
 801ac6e:	2200      	movs	r2, #0
 801ac70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801ac72:	7dfb      	ldrb	r3, [r7, #23]
 801ac74:	3301      	adds	r3, #1
 801ac76:	75fb      	strb	r3, [r7, #23]
 801ac78:	7dfa      	ldrb	r2, [r7, #23]
 801ac7a:	79fb      	ldrb	r3, [r7, #7]
 801ac7c:	429a      	cmp	r2, r3
 801ac7e:	d3d3      	bcc.n	801ac28 <IntToUnicode+0x18>
  }
}
 801ac80:	bf00      	nop
 801ac82:	bf00      	nop
 801ac84:	371c      	adds	r7, #28
 801ac86:	46bd      	mov	sp, r7
 801ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac8c:	4770      	bx	lr
	...

0801ac90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801ac90:	b580      	push	{r7, lr}
 801ac92:	b0b2      	sub	sp, #200	; 0xc8
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801ac98:	f107 0310 	add.w	r3, r7, #16
 801ac9c:	22b8      	movs	r2, #184	; 0xb8
 801ac9e:	2100      	movs	r1, #0
 801aca0:	4618      	mov	r0, r3
 801aca2:	f001 fa92 	bl	801c1ca <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	4a1a      	ldr	r2, [pc, #104]	; (801ad14 <HAL_PCD_MspInit+0x84>)
 801acac:	4293      	cmp	r3, r2
 801acae:	d12c      	bne.n	801ad0a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801acb0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801acb4:	f04f 0300 	mov.w	r3, #0
 801acb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801acbc:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801acc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801acc4:	f107 0310 	add.w	r3, r7, #16
 801acc8:	4618      	mov	r0, r3
 801acca:	f7f0 fdc7 	bl	800b85c <HAL_RCCEx_PeriphCLKConfig>
 801acce:	4603      	mov	r3, r0
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d001      	beq.n	801acd8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801acd4:	f7e7 fe10 	bl	80028f8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801acd8:	f7ef fde0 	bl	800a89c <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801acdc:	4b0e      	ldr	r3, [pc, #56]	; (801ad18 <HAL_PCD_MspInit+0x88>)
 801acde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801ace2:	4a0d      	ldr	r2, [pc, #52]	; (801ad18 <HAL_PCD_MspInit+0x88>)
 801ace4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801ace8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801acec:	4b0a      	ldr	r3, [pc, #40]	; (801ad18 <HAL_PCD_MspInit+0x88>)
 801acee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801acf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801acf6:	60fb      	str	r3, [r7, #12]
 801acf8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801acfa:	2200      	movs	r2, #0
 801acfc:	2100      	movs	r1, #0
 801acfe:	204d      	movs	r0, #77	; 0x4d
 801ad00:	f7eb fb51 	bl	80063a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801ad04:	204d      	movs	r0, #77	; 0x4d
 801ad06:	f7eb fb68 	bl	80063da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801ad0a:	bf00      	nop
 801ad0c:	37c8      	adds	r7, #200	; 0xc8
 801ad0e:	46bd      	mov	sp, r7
 801ad10:	bd80      	pop	{r7, pc}
 801ad12:	bf00      	nop
 801ad14:	40040000 	.word	0x40040000
 801ad18:	58024400 	.word	0x58024400

0801ad1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ad1c:	b580      	push	{r7, lr}
 801ad1e:	b082      	sub	sp, #8
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801ad30:	4619      	mov	r1, r3
 801ad32:	4610      	mov	r0, r2
 801ad34:	f7fb fb7b 	bl	801642e <USBD_LL_SetupStage>
}
 801ad38:	bf00      	nop
 801ad3a:	3708      	adds	r7, #8
 801ad3c:	46bd      	mov	sp, r7
 801ad3e:	bd80      	pop	{r7, pc}

0801ad40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ad40:	b580      	push	{r7, lr}
 801ad42:	b082      	sub	sp, #8
 801ad44:	af00      	add	r7, sp, #0
 801ad46:	6078      	str	r0, [r7, #4]
 801ad48:	460b      	mov	r3, r1
 801ad4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801ad52:	78fa      	ldrb	r2, [r7, #3]
 801ad54:	6879      	ldr	r1, [r7, #4]
 801ad56:	4613      	mov	r3, r2
 801ad58:	00db      	lsls	r3, r3, #3
 801ad5a:	4413      	add	r3, r2
 801ad5c:	009b      	lsls	r3, r3, #2
 801ad5e:	440b      	add	r3, r1
 801ad60:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801ad64:	681a      	ldr	r2, [r3, #0]
 801ad66:	78fb      	ldrb	r3, [r7, #3]
 801ad68:	4619      	mov	r1, r3
 801ad6a:	f7fb fbb5 	bl	80164d8 <USBD_LL_DataOutStage>
}
 801ad6e:	bf00      	nop
 801ad70:	3708      	adds	r7, #8
 801ad72:	46bd      	mov	sp, r7
 801ad74:	bd80      	pop	{r7, pc}

0801ad76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ad76:	b580      	push	{r7, lr}
 801ad78:	b082      	sub	sp, #8
 801ad7a:	af00      	add	r7, sp, #0
 801ad7c:	6078      	str	r0, [r7, #4]
 801ad7e:	460b      	mov	r3, r1
 801ad80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801ad88:	78fa      	ldrb	r2, [r7, #3]
 801ad8a:	6879      	ldr	r1, [r7, #4]
 801ad8c:	4613      	mov	r3, r2
 801ad8e:	00db      	lsls	r3, r3, #3
 801ad90:	4413      	add	r3, r2
 801ad92:	009b      	lsls	r3, r3, #2
 801ad94:	440b      	add	r3, r1
 801ad96:	3348      	adds	r3, #72	; 0x48
 801ad98:	681a      	ldr	r2, [r3, #0]
 801ad9a:	78fb      	ldrb	r3, [r7, #3]
 801ad9c:	4619      	mov	r1, r3
 801ad9e:	f7fb fc4e 	bl	801663e <USBD_LL_DataInStage>
}
 801ada2:	bf00      	nop
 801ada4:	3708      	adds	r7, #8
 801ada6:	46bd      	mov	sp, r7
 801ada8:	bd80      	pop	{r7, pc}

0801adaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801adaa:	b580      	push	{r7, lr}
 801adac:	b082      	sub	sp, #8
 801adae:	af00      	add	r7, sp, #0
 801adb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801adb8:	4618      	mov	r0, r3
 801adba:	f7fb fd88 	bl	80168ce <USBD_LL_SOF>
}
 801adbe:	bf00      	nop
 801adc0:	3708      	adds	r7, #8
 801adc2:	46bd      	mov	sp, r7
 801adc4:	bd80      	pop	{r7, pc}

0801adc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801adc6:	b580      	push	{r7, lr}
 801adc8:	b084      	sub	sp, #16
 801adca:	af00      	add	r7, sp, #0
 801adcc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801adce:	2301      	movs	r3, #1
 801add0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	691b      	ldr	r3, [r3, #16]
 801add6:	2b00      	cmp	r3, #0
 801add8:	d102      	bne.n	801ade0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801adda:	2300      	movs	r3, #0
 801addc:	73fb      	strb	r3, [r7, #15]
 801adde:	e008      	b.n	801adf2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	691b      	ldr	r3, [r3, #16]
 801ade4:	2b02      	cmp	r3, #2
 801ade6:	d102      	bne.n	801adee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801ade8:	2301      	movs	r3, #1
 801adea:	73fb      	strb	r3, [r7, #15]
 801adec:	e001      	b.n	801adf2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801adee:	f7e7 fd83 	bl	80028f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801adf8:	7bfa      	ldrb	r2, [r7, #15]
 801adfa:	4611      	mov	r1, r2
 801adfc:	4618      	mov	r0, r3
 801adfe:	f7fb fd22 	bl	8016846 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ae08:	4618      	mov	r0, r3
 801ae0a:	f7fb fcca 	bl	80167a2 <USBD_LL_Reset>
}
 801ae0e:	bf00      	nop
 801ae10:	3710      	adds	r7, #16
 801ae12:	46bd      	mov	sp, r7
 801ae14:	bd80      	pop	{r7, pc}
	...

0801ae18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b082      	sub	sp, #8
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ae26:	4618      	mov	r0, r3
 801ae28:	f7fb fd1d 	bl	8016866 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ae34:	681b      	ldr	r3, [r3, #0]
 801ae36:	687a      	ldr	r2, [r7, #4]
 801ae38:	6812      	ldr	r2, [r2, #0]
 801ae3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801ae3e:	f043 0301 	orr.w	r3, r3, #1
 801ae42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	6a1b      	ldr	r3, [r3, #32]
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d005      	beq.n	801ae58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ae4c:	4b04      	ldr	r3, [pc, #16]	; (801ae60 <HAL_PCD_SuspendCallback+0x48>)
 801ae4e:	691b      	ldr	r3, [r3, #16]
 801ae50:	4a03      	ldr	r2, [pc, #12]	; (801ae60 <HAL_PCD_SuspendCallback+0x48>)
 801ae52:	f043 0306 	orr.w	r3, r3, #6
 801ae56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801ae58:	bf00      	nop
 801ae5a:	3708      	adds	r7, #8
 801ae5c:	46bd      	mov	sp, r7
 801ae5e:	bd80      	pop	{r7, pc}
 801ae60:	e000ed00 	.word	0xe000ed00

0801ae64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae64:	b580      	push	{r7, lr}
 801ae66:	b082      	sub	sp, #8
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ae72:	4618      	mov	r0, r3
 801ae74:	f7fb fd13 	bl	801689e <USBD_LL_Resume>
}
 801ae78:	bf00      	nop
 801ae7a:	3708      	adds	r7, #8
 801ae7c:	46bd      	mov	sp, r7
 801ae7e:	bd80      	pop	{r7, pc}

0801ae80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae80:	b580      	push	{r7, lr}
 801ae82:	b082      	sub	sp, #8
 801ae84:	af00      	add	r7, sp, #0
 801ae86:	6078      	str	r0, [r7, #4]
 801ae88:	460b      	mov	r3, r1
 801ae8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ae92:	78fa      	ldrb	r2, [r7, #3]
 801ae94:	4611      	mov	r1, r2
 801ae96:	4618      	mov	r0, r3
 801ae98:	f7fb fd6b 	bl	8016972 <USBD_LL_IsoOUTIncomplete>
}
 801ae9c:	bf00      	nop
 801ae9e:	3708      	adds	r7, #8
 801aea0:	46bd      	mov	sp, r7
 801aea2:	bd80      	pop	{r7, pc}

0801aea4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aea4:	b580      	push	{r7, lr}
 801aea6:	b082      	sub	sp, #8
 801aea8:	af00      	add	r7, sp, #0
 801aeaa:	6078      	str	r0, [r7, #4]
 801aeac:	460b      	mov	r3, r1
 801aeae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aeb6:	78fa      	ldrb	r2, [r7, #3]
 801aeb8:	4611      	mov	r1, r2
 801aeba:	4618      	mov	r0, r3
 801aebc:	f7fb fd27 	bl	801690e <USBD_LL_IsoINIncomplete>
}
 801aec0:	bf00      	nop
 801aec2:	3708      	adds	r7, #8
 801aec4:	46bd      	mov	sp, r7
 801aec6:	bd80      	pop	{r7, pc}

0801aec8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aec8:	b580      	push	{r7, lr}
 801aeca:	b082      	sub	sp, #8
 801aecc:	af00      	add	r7, sp, #0
 801aece:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aed6:	4618      	mov	r0, r3
 801aed8:	f7fb fd7d 	bl	80169d6 <USBD_LL_DevConnected>
}
 801aedc:	bf00      	nop
 801aede:	3708      	adds	r7, #8
 801aee0:	46bd      	mov	sp, r7
 801aee2:	bd80      	pop	{r7, pc}

0801aee4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aee4:	b580      	push	{r7, lr}
 801aee6:	b082      	sub	sp, #8
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aef2:	4618      	mov	r0, r3
 801aef4:	f7fb fd7a 	bl	80169ec <USBD_LL_DevDisconnected>
}
 801aef8:	bf00      	nop
 801aefa:	3708      	adds	r7, #8
 801aefc:	46bd      	mov	sp, r7
 801aefe:	bd80      	pop	{r7, pc}

0801af00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801af00:	b580      	push	{r7, lr}
 801af02:	b082      	sub	sp, #8
 801af04:	af00      	add	r7, sp, #0
 801af06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	781b      	ldrb	r3, [r3, #0]
 801af0c:	2b01      	cmp	r3, #1
 801af0e:	d140      	bne.n	801af92 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801af10:	4a22      	ldr	r2, [pc, #136]	; (801af9c <USBD_LL_Init+0x9c>)
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	4a20      	ldr	r2, [pc, #128]	; (801af9c <USBD_LL_Init+0x9c>)
 801af1c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801af20:	4b1e      	ldr	r3, [pc, #120]	; (801af9c <USBD_LL_Init+0x9c>)
 801af22:	4a1f      	ldr	r2, [pc, #124]	; (801afa0 <USBD_LL_Init+0xa0>)
 801af24:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801af26:	4b1d      	ldr	r3, [pc, #116]	; (801af9c <USBD_LL_Init+0x9c>)
 801af28:	2209      	movs	r2, #9
 801af2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801af2c:	4b1b      	ldr	r3, [pc, #108]	; (801af9c <USBD_LL_Init+0x9c>)
 801af2e:	2202      	movs	r2, #2
 801af30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801af32:	4b1a      	ldr	r3, [pc, #104]	; (801af9c <USBD_LL_Init+0x9c>)
 801af34:	2200      	movs	r2, #0
 801af36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801af38:	4b18      	ldr	r3, [pc, #96]	; (801af9c <USBD_LL_Init+0x9c>)
 801af3a:	2202      	movs	r2, #2
 801af3c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801af3e:	4b17      	ldr	r3, [pc, #92]	; (801af9c <USBD_LL_Init+0x9c>)
 801af40:	2200      	movs	r2, #0
 801af42:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801af44:	4b15      	ldr	r3, [pc, #84]	; (801af9c <USBD_LL_Init+0x9c>)
 801af46:	2200      	movs	r2, #0
 801af48:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801af4a:	4b14      	ldr	r3, [pc, #80]	; (801af9c <USBD_LL_Init+0x9c>)
 801af4c:	2200      	movs	r2, #0
 801af4e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801af50:	4b12      	ldr	r3, [pc, #72]	; (801af9c <USBD_LL_Init+0x9c>)
 801af52:	2200      	movs	r2, #0
 801af54:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801af56:	4b11      	ldr	r3, [pc, #68]	; (801af9c <USBD_LL_Init+0x9c>)
 801af58:	2200      	movs	r2, #0
 801af5a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801af5c:	4b0f      	ldr	r3, [pc, #60]	; (801af9c <USBD_LL_Init+0x9c>)
 801af5e:	2200      	movs	r2, #0
 801af60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801af62:	480e      	ldr	r0, [pc, #56]	; (801af9c <USBD_LL_Init+0x9c>)
 801af64:	f7ee f9a7 	bl	80092b6 <HAL_PCD_Init>
 801af68:	4603      	mov	r3, r0
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d001      	beq.n	801af72 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801af6e:	f7e7 fcc3 	bl	80028f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801af72:	f44f 7100 	mov.w	r1, #512	; 0x200
 801af76:	4809      	ldr	r0, [pc, #36]	; (801af9c <USBD_LL_Init+0x9c>)
 801af78:	f7ef fc15 	bl	800a7a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801af7c:	2280      	movs	r2, #128	; 0x80
 801af7e:	2100      	movs	r1, #0
 801af80:	4806      	ldr	r0, [pc, #24]	; (801af9c <USBD_LL_Init+0x9c>)
 801af82:	f7ef fbc9 	bl	800a718 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801af86:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801af8a:	2101      	movs	r1, #1
 801af8c:	4803      	ldr	r0, [pc, #12]	; (801af9c <USBD_LL_Init+0x9c>)
 801af8e:	f7ef fbc3 	bl	800a718 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801af92:	2300      	movs	r3, #0
}
 801af94:	4618      	mov	r0, r3
 801af96:	3708      	adds	r7, #8
 801af98:	46bd      	mov	sp, r7
 801af9a:	bd80      	pop	{r7, pc}
 801af9c:	24005584 	.word	0x24005584
 801afa0:	40040000 	.word	0x40040000

0801afa4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801afa4:	b580      	push	{r7, lr}
 801afa6:	b084      	sub	sp, #16
 801afa8:	af00      	add	r7, sp, #0
 801afaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801afac:	2300      	movs	r3, #0
 801afae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801afb0:	2300      	movs	r3, #0
 801afb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801afba:	4618      	mov	r0, r3
 801afbc:	f7ee fa9f 	bl	80094fe <HAL_PCD_Start>
 801afc0:	4603      	mov	r3, r0
 801afc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801afc4:	7bfb      	ldrb	r3, [r7, #15]
 801afc6:	4618      	mov	r0, r3
 801afc8:	f000 f942 	bl	801b250 <USBD_Get_USB_Status>
 801afcc:	4603      	mov	r3, r0
 801afce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801afd0:	7bbb      	ldrb	r3, [r7, #14]
}
 801afd2:	4618      	mov	r0, r3
 801afd4:	3710      	adds	r7, #16
 801afd6:	46bd      	mov	sp, r7
 801afd8:	bd80      	pop	{r7, pc}

0801afda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801afda:	b580      	push	{r7, lr}
 801afdc:	b084      	sub	sp, #16
 801afde:	af00      	add	r7, sp, #0
 801afe0:	6078      	str	r0, [r7, #4]
 801afe2:	4608      	mov	r0, r1
 801afe4:	4611      	mov	r1, r2
 801afe6:	461a      	mov	r2, r3
 801afe8:	4603      	mov	r3, r0
 801afea:	70fb      	strb	r3, [r7, #3]
 801afec:	460b      	mov	r3, r1
 801afee:	70bb      	strb	r3, [r7, #2]
 801aff0:	4613      	mov	r3, r2
 801aff2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aff4:	2300      	movs	r3, #0
 801aff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aff8:	2300      	movs	r3, #0
 801affa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b002:	78bb      	ldrb	r3, [r7, #2]
 801b004:	883a      	ldrh	r2, [r7, #0]
 801b006:	78f9      	ldrb	r1, [r7, #3]
 801b008:	f7ee ff9f 	bl	8009f4a <HAL_PCD_EP_Open>
 801b00c:	4603      	mov	r3, r0
 801b00e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b010:	7bfb      	ldrb	r3, [r7, #15]
 801b012:	4618      	mov	r0, r3
 801b014:	f000 f91c 	bl	801b250 <USBD_Get_USB_Status>
 801b018:	4603      	mov	r3, r0
 801b01a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b01c:	7bbb      	ldrb	r3, [r7, #14]
}
 801b01e:	4618      	mov	r0, r3
 801b020:	3710      	adds	r7, #16
 801b022:	46bd      	mov	sp, r7
 801b024:	bd80      	pop	{r7, pc}

0801b026 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b026:	b580      	push	{r7, lr}
 801b028:	b084      	sub	sp, #16
 801b02a:	af00      	add	r7, sp, #0
 801b02c:	6078      	str	r0, [r7, #4]
 801b02e:	460b      	mov	r3, r1
 801b030:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b032:	2300      	movs	r3, #0
 801b034:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b036:	2300      	movs	r3, #0
 801b038:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b040:	78fa      	ldrb	r2, [r7, #3]
 801b042:	4611      	mov	r1, r2
 801b044:	4618      	mov	r0, r3
 801b046:	f7ee ffe8 	bl	800a01a <HAL_PCD_EP_Close>
 801b04a:	4603      	mov	r3, r0
 801b04c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b04e:	7bfb      	ldrb	r3, [r7, #15]
 801b050:	4618      	mov	r0, r3
 801b052:	f000 f8fd 	bl	801b250 <USBD_Get_USB_Status>
 801b056:	4603      	mov	r3, r0
 801b058:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b05a:	7bbb      	ldrb	r3, [r7, #14]
}
 801b05c:	4618      	mov	r0, r3
 801b05e:	3710      	adds	r7, #16
 801b060:	46bd      	mov	sp, r7
 801b062:	bd80      	pop	{r7, pc}

0801b064 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b064:	b580      	push	{r7, lr}
 801b066:	b084      	sub	sp, #16
 801b068:	af00      	add	r7, sp, #0
 801b06a:	6078      	str	r0, [r7, #4]
 801b06c:	460b      	mov	r3, r1
 801b06e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b070:	2300      	movs	r3, #0
 801b072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b074:	2300      	movs	r3, #0
 801b076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b07e:	78fa      	ldrb	r2, [r7, #3]
 801b080:	4611      	mov	r1, r2
 801b082:	4618      	mov	r0, r3
 801b084:	f7ef f8a2 	bl	800a1cc <HAL_PCD_EP_SetStall>
 801b088:	4603      	mov	r3, r0
 801b08a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b08c:	7bfb      	ldrb	r3, [r7, #15]
 801b08e:	4618      	mov	r0, r3
 801b090:	f000 f8de 	bl	801b250 <USBD_Get_USB_Status>
 801b094:	4603      	mov	r3, r0
 801b096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b098:	7bbb      	ldrb	r3, [r7, #14]
}
 801b09a:	4618      	mov	r0, r3
 801b09c:	3710      	adds	r7, #16
 801b09e:	46bd      	mov	sp, r7
 801b0a0:	bd80      	pop	{r7, pc}

0801b0a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b0a2:	b580      	push	{r7, lr}
 801b0a4:	b084      	sub	sp, #16
 801b0a6:	af00      	add	r7, sp, #0
 801b0a8:	6078      	str	r0, [r7, #4]
 801b0aa:	460b      	mov	r3, r1
 801b0ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b0b2:	2300      	movs	r3, #0
 801b0b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b0bc:	78fa      	ldrb	r2, [r7, #3]
 801b0be:	4611      	mov	r1, r2
 801b0c0:	4618      	mov	r0, r3
 801b0c2:	f7ef f8e7 	bl	800a294 <HAL_PCD_EP_ClrStall>
 801b0c6:	4603      	mov	r3, r0
 801b0c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b0ca:	7bfb      	ldrb	r3, [r7, #15]
 801b0cc:	4618      	mov	r0, r3
 801b0ce:	f000 f8bf 	bl	801b250 <USBD_Get_USB_Status>
 801b0d2:	4603      	mov	r3, r0
 801b0d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b0d6:	7bbb      	ldrb	r3, [r7, #14]
}
 801b0d8:	4618      	mov	r0, r3
 801b0da:	3710      	adds	r7, #16
 801b0dc:	46bd      	mov	sp, r7
 801b0de:	bd80      	pop	{r7, pc}

0801b0e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b0e0:	b480      	push	{r7}
 801b0e2:	b085      	sub	sp, #20
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	6078      	str	r0, [r7, #4]
 801b0e8:	460b      	mov	r3, r1
 801b0ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b0f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801b0f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	da0b      	bge.n	801b114 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801b0fc:	78fb      	ldrb	r3, [r7, #3]
 801b0fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b102:	68f9      	ldr	r1, [r7, #12]
 801b104:	4613      	mov	r3, r2
 801b106:	00db      	lsls	r3, r3, #3
 801b108:	4413      	add	r3, r2
 801b10a:	009b      	lsls	r3, r3, #2
 801b10c:	440b      	add	r3, r1
 801b10e:	333e      	adds	r3, #62	; 0x3e
 801b110:	781b      	ldrb	r3, [r3, #0]
 801b112:	e00b      	b.n	801b12c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801b114:	78fb      	ldrb	r3, [r7, #3]
 801b116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b11a:	68f9      	ldr	r1, [r7, #12]
 801b11c:	4613      	mov	r3, r2
 801b11e:	00db      	lsls	r3, r3, #3
 801b120:	4413      	add	r3, r2
 801b122:	009b      	lsls	r3, r3, #2
 801b124:	440b      	add	r3, r1
 801b126:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801b12a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b12c:	4618      	mov	r0, r3
 801b12e:	3714      	adds	r7, #20
 801b130:	46bd      	mov	sp, r7
 801b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b136:	4770      	bx	lr

0801b138 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801b138:	b580      	push	{r7, lr}
 801b13a:	b084      	sub	sp, #16
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	6078      	str	r0, [r7, #4]
 801b140:	460b      	mov	r3, r1
 801b142:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b144:	2300      	movs	r3, #0
 801b146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b148:	2300      	movs	r3, #0
 801b14a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b152:	78fa      	ldrb	r2, [r7, #3]
 801b154:	4611      	mov	r1, r2
 801b156:	4618      	mov	r0, r3
 801b158:	f7ee fed2 	bl	8009f00 <HAL_PCD_SetAddress>
 801b15c:	4603      	mov	r3, r0
 801b15e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b160:	7bfb      	ldrb	r3, [r7, #15]
 801b162:	4618      	mov	r0, r3
 801b164:	f000 f874 	bl	801b250 <USBD_Get_USB_Status>
 801b168:	4603      	mov	r3, r0
 801b16a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b16c:	7bbb      	ldrb	r3, [r7, #14]
}
 801b16e:	4618      	mov	r0, r3
 801b170:	3710      	adds	r7, #16
 801b172:	46bd      	mov	sp, r7
 801b174:	bd80      	pop	{r7, pc}

0801b176 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b176:	b580      	push	{r7, lr}
 801b178:	b086      	sub	sp, #24
 801b17a:	af00      	add	r7, sp, #0
 801b17c:	60f8      	str	r0, [r7, #12]
 801b17e:	607a      	str	r2, [r7, #4]
 801b180:	603b      	str	r3, [r7, #0]
 801b182:	460b      	mov	r3, r1
 801b184:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b186:	2300      	movs	r3, #0
 801b188:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b18a:	2300      	movs	r3, #0
 801b18c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801b18e:	68fb      	ldr	r3, [r7, #12]
 801b190:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b194:	7af9      	ldrb	r1, [r7, #11]
 801b196:	683b      	ldr	r3, [r7, #0]
 801b198:	687a      	ldr	r2, [r7, #4]
 801b19a:	f7ee ffdc 	bl	800a156 <HAL_PCD_EP_Transmit>
 801b19e:	4603      	mov	r3, r0
 801b1a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b1a2:	7dfb      	ldrb	r3, [r7, #23]
 801b1a4:	4618      	mov	r0, r3
 801b1a6:	f000 f853 	bl	801b250 <USBD_Get_USB_Status>
 801b1aa:	4603      	mov	r3, r0
 801b1ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b1ae:	7dbb      	ldrb	r3, [r7, #22]
}
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	3718      	adds	r7, #24
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	bd80      	pop	{r7, pc}

0801b1b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b1b8:	b580      	push	{r7, lr}
 801b1ba:	b086      	sub	sp, #24
 801b1bc:	af00      	add	r7, sp, #0
 801b1be:	60f8      	str	r0, [r7, #12]
 801b1c0:	607a      	str	r2, [r7, #4]
 801b1c2:	603b      	str	r3, [r7, #0]
 801b1c4:	460b      	mov	r3, r1
 801b1c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b1c8:	2300      	movs	r3, #0
 801b1ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b1cc:	2300      	movs	r3, #0
 801b1ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801b1d0:	68fb      	ldr	r3, [r7, #12]
 801b1d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b1d6:	7af9      	ldrb	r1, [r7, #11]
 801b1d8:	683b      	ldr	r3, [r7, #0]
 801b1da:	687a      	ldr	r2, [r7, #4]
 801b1dc:	f7ee ff67 	bl	800a0ae <HAL_PCD_EP_Receive>
 801b1e0:	4603      	mov	r3, r0
 801b1e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b1e4:	7dfb      	ldrb	r3, [r7, #23]
 801b1e6:	4618      	mov	r0, r3
 801b1e8:	f000 f832 	bl	801b250 <USBD_Get_USB_Status>
 801b1ec:	4603      	mov	r3, r0
 801b1ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b1f0:	7dbb      	ldrb	r3, [r7, #22]
}
 801b1f2:	4618      	mov	r0, r3
 801b1f4:	3718      	adds	r7, #24
 801b1f6:	46bd      	mov	sp, r7
 801b1f8:	bd80      	pop	{r7, pc}

0801b1fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b1fa:	b580      	push	{r7, lr}
 801b1fc:	b082      	sub	sp, #8
 801b1fe:	af00      	add	r7, sp, #0
 801b200:	6078      	str	r0, [r7, #4]
 801b202:	460b      	mov	r3, r1
 801b204:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b20c:	78fa      	ldrb	r2, [r7, #3]
 801b20e:	4611      	mov	r1, r2
 801b210:	4618      	mov	r0, r3
 801b212:	f7ee ff88 	bl	800a126 <HAL_PCD_EP_GetRxCount>
 801b216:	4603      	mov	r3, r0
}
 801b218:	4618      	mov	r0, r3
 801b21a:	3708      	adds	r7, #8
 801b21c:	46bd      	mov	sp, r7
 801b21e:	bd80      	pop	{r7, pc}

0801b220 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801b220:	b480      	push	{r7}
 801b222:	b083      	sub	sp, #12
 801b224:	af00      	add	r7, sp, #0
 801b226:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801b228:	4b03      	ldr	r3, [pc, #12]	; (801b238 <USBD_static_malloc+0x18>)
}
 801b22a:	4618      	mov	r0, r3
 801b22c:	370c      	adds	r7, #12
 801b22e:	46bd      	mov	sp, r7
 801b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b234:	4770      	bx	lr
 801b236:	bf00      	nop
 801b238:	24005a90 	.word	0x24005a90

0801b23c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801b23c:	b480      	push	{r7}
 801b23e:	b083      	sub	sp, #12
 801b240:	af00      	add	r7, sp, #0
 801b242:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801b244:	bf00      	nop
 801b246:	370c      	adds	r7, #12
 801b248:	46bd      	mov	sp, r7
 801b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b24e:	4770      	bx	lr

0801b250 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b250:	b480      	push	{r7}
 801b252:	b085      	sub	sp, #20
 801b254:	af00      	add	r7, sp, #0
 801b256:	4603      	mov	r3, r0
 801b258:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b25a:	2300      	movs	r3, #0
 801b25c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b25e:	79fb      	ldrb	r3, [r7, #7]
 801b260:	2b03      	cmp	r3, #3
 801b262:	d817      	bhi.n	801b294 <USBD_Get_USB_Status+0x44>
 801b264:	a201      	add	r2, pc, #4	; (adr r2, 801b26c <USBD_Get_USB_Status+0x1c>)
 801b266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b26a:	bf00      	nop
 801b26c:	0801b27d 	.word	0x0801b27d
 801b270:	0801b283 	.word	0x0801b283
 801b274:	0801b289 	.word	0x0801b289
 801b278:	0801b28f 	.word	0x0801b28f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801b27c:	2300      	movs	r3, #0
 801b27e:	73fb      	strb	r3, [r7, #15]
    break;
 801b280:	e00b      	b.n	801b29a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801b282:	2303      	movs	r3, #3
 801b284:	73fb      	strb	r3, [r7, #15]
    break;
 801b286:	e008      	b.n	801b29a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801b288:	2301      	movs	r3, #1
 801b28a:	73fb      	strb	r3, [r7, #15]
    break;
 801b28c:	e005      	b.n	801b29a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801b28e:	2303      	movs	r3, #3
 801b290:	73fb      	strb	r3, [r7, #15]
    break;
 801b292:	e002      	b.n	801b29a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801b294:	2303      	movs	r3, #3
 801b296:	73fb      	strb	r3, [r7, #15]
    break;
 801b298:	bf00      	nop
  }
  return usb_status;
 801b29a:	7bfb      	ldrb	r3, [r7, #15]
}
 801b29c:	4618      	mov	r0, r3
 801b29e:	3714      	adds	r7, #20
 801b2a0:	46bd      	mov	sp, r7
 801b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2a6:	4770      	bx	lr

0801b2a8 <__cvt>:
 801b2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b2aa:	ed2d 8b02 	vpush	{d8}
 801b2ae:	eeb0 8b40 	vmov.f64	d8, d0
 801b2b2:	b085      	sub	sp, #20
 801b2b4:	4617      	mov	r7, r2
 801b2b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b2b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b2ba:	ee18 2a90 	vmov	r2, s17
 801b2be:	f025 0520 	bic.w	r5, r5, #32
 801b2c2:	2a00      	cmp	r2, #0
 801b2c4:	bfb6      	itet	lt
 801b2c6:	222d      	movlt	r2, #45	; 0x2d
 801b2c8:	2200      	movge	r2, #0
 801b2ca:	eeb1 8b40 	vneglt.f64	d8, d0
 801b2ce:	2d46      	cmp	r5, #70	; 0x46
 801b2d0:	460c      	mov	r4, r1
 801b2d2:	701a      	strb	r2, [r3, #0]
 801b2d4:	d004      	beq.n	801b2e0 <__cvt+0x38>
 801b2d6:	2d45      	cmp	r5, #69	; 0x45
 801b2d8:	d100      	bne.n	801b2dc <__cvt+0x34>
 801b2da:	3401      	adds	r4, #1
 801b2dc:	2102      	movs	r1, #2
 801b2de:	e000      	b.n	801b2e2 <__cvt+0x3a>
 801b2e0:	2103      	movs	r1, #3
 801b2e2:	ab03      	add	r3, sp, #12
 801b2e4:	9301      	str	r3, [sp, #4]
 801b2e6:	ab02      	add	r3, sp, #8
 801b2e8:	9300      	str	r3, [sp, #0]
 801b2ea:	4622      	mov	r2, r4
 801b2ec:	4633      	mov	r3, r6
 801b2ee:	eeb0 0b48 	vmov.f64	d0, d8
 801b2f2:	f001 f891 	bl	801c418 <_dtoa_r>
 801b2f6:	2d47      	cmp	r5, #71	; 0x47
 801b2f8:	d101      	bne.n	801b2fe <__cvt+0x56>
 801b2fa:	07fb      	lsls	r3, r7, #31
 801b2fc:	d51a      	bpl.n	801b334 <__cvt+0x8c>
 801b2fe:	2d46      	cmp	r5, #70	; 0x46
 801b300:	eb00 0204 	add.w	r2, r0, r4
 801b304:	d10c      	bne.n	801b320 <__cvt+0x78>
 801b306:	7803      	ldrb	r3, [r0, #0]
 801b308:	2b30      	cmp	r3, #48	; 0x30
 801b30a:	d107      	bne.n	801b31c <__cvt+0x74>
 801b30c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b314:	bf1c      	itt	ne
 801b316:	f1c4 0401 	rsbne	r4, r4, #1
 801b31a:	6034      	strne	r4, [r6, #0]
 801b31c:	6833      	ldr	r3, [r6, #0]
 801b31e:	441a      	add	r2, r3
 801b320:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b328:	bf08      	it	eq
 801b32a:	9203      	streq	r2, [sp, #12]
 801b32c:	2130      	movs	r1, #48	; 0x30
 801b32e:	9b03      	ldr	r3, [sp, #12]
 801b330:	4293      	cmp	r3, r2
 801b332:	d307      	bcc.n	801b344 <__cvt+0x9c>
 801b334:	9b03      	ldr	r3, [sp, #12]
 801b336:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b338:	1a1b      	subs	r3, r3, r0
 801b33a:	6013      	str	r3, [r2, #0]
 801b33c:	b005      	add	sp, #20
 801b33e:	ecbd 8b02 	vpop	{d8}
 801b342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b344:	1c5c      	adds	r4, r3, #1
 801b346:	9403      	str	r4, [sp, #12]
 801b348:	7019      	strb	r1, [r3, #0]
 801b34a:	e7f0      	b.n	801b32e <__cvt+0x86>

0801b34c <__exponent>:
 801b34c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b34e:	4603      	mov	r3, r0
 801b350:	2900      	cmp	r1, #0
 801b352:	bfb8      	it	lt
 801b354:	4249      	neglt	r1, r1
 801b356:	f803 2b02 	strb.w	r2, [r3], #2
 801b35a:	bfb4      	ite	lt
 801b35c:	222d      	movlt	r2, #45	; 0x2d
 801b35e:	222b      	movge	r2, #43	; 0x2b
 801b360:	2909      	cmp	r1, #9
 801b362:	7042      	strb	r2, [r0, #1]
 801b364:	dd2a      	ble.n	801b3bc <__exponent+0x70>
 801b366:	f10d 0207 	add.w	r2, sp, #7
 801b36a:	4617      	mov	r7, r2
 801b36c:	260a      	movs	r6, #10
 801b36e:	4694      	mov	ip, r2
 801b370:	fb91 f5f6 	sdiv	r5, r1, r6
 801b374:	fb06 1415 	mls	r4, r6, r5, r1
 801b378:	3430      	adds	r4, #48	; 0x30
 801b37a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801b37e:	460c      	mov	r4, r1
 801b380:	2c63      	cmp	r4, #99	; 0x63
 801b382:	f102 32ff 	add.w	r2, r2, #4294967295
 801b386:	4629      	mov	r1, r5
 801b388:	dcf1      	bgt.n	801b36e <__exponent+0x22>
 801b38a:	3130      	adds	r1, #48	; 0x30
 801b38c:	f1ac 0402 	sub.w	r4, ip, #2
 801b390:	f802 1c01 	strb.w	r1, [r2, #-1]
 801b394:	1c41      	adds	r1, r0, #1
 801b396:	4622      	mov	r2, r4
 801b398:	42ba      	cmp	r2, r7
 801b39a:	d30a      	bcc.n	801b3b2 <__exponent+0x66>
 801b39c:	f10d 0209 	add.w	r2, sp, #9
 801b3a0:	eba2 020c 	sub.w	r2, r2, ip
 801b3a4:	42bc      	cmp	r4, r7
 801b3a6:	bf88      	it	hi
 801b3a8:	2200      	movhi	r2, #0
 801b3aa:	4413      	add	r3, r2
 801b3ac:	1a18      	subs	r0, r3, r0
 801b3ae:	b003      	add	sp, #12
 801b3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3b2:	f812 5b01 	ldrb.w	r5, [r2], #1
 801b3b6:	f801 5f01 	strb.w	r5, [r1, #1]!
 801b3ba:	e7ed      	b.n	801b398 <__exponent+0x4c>
 801b3bc:	2330      	movs	r3, #48	; 0x30
 801b3be:	3130      	adds	r1, #48	; 0x30
 801b3c0:	7083      	strb	r3, [r0, #2]
 801b3c2:	70c1      	strb	r1, [r0, #3]
 801b3c4:	1d03      	adds	r3, r0, #4
 801b3c6:	e7f1      	b.n	801b3ac <__exponent+0x60>

0801b3c8 <_printf_float>:
 801b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3cc:	b08b      	sub	sp, #44	; 0x2c
 801b3ce:	460c      	mov	r4, r1
 801b3d0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801b3d4:	4616      	mov	r6, r2
 801b3d6:	461f      	mov	r7, r3
 801b3d8:	4605      	mov	r5, r0
 801b3da:	f000 feff 	bl	801c1dc <_localeconv_r>
 801b3de:	f8d0 b000 	ldr.w	fp, [r0]
 801b3e2:	4658      	mov	r0, fp
 801b3e4:	f7e4 fff4 	bl	80003d0 <strlen>
 801b3e8:	2300      	movs	r3, #0
 801b3ea:	9308      	str	r3, [sp, #32]
 801b3ec:	f8d8 3000 	ldr.w	r3, [r8]
 801b3f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 801b3f4:	6822      	ldr	r2, [r4, #0]
 801b3f6:	3307      	adds	r3, #7
 801b3f8:	f023 0307 	bic.w	r3, r3, #7
 801b3fc:	f103 0108 	add.w	r1, r3, #8
 801b400:	f8c8 1000 	str.w	r1, [r8]
 801b404:	ed93 0b00 	vldr	d0, [r3]
 801b408:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801b668 <_printf_float+0x2a0>
 801b40c:	eeb0 7bc0 	vabs.f64	d7, d0
 801b410:	eeb4 7b46 	vcmp.f64	d7, d6
 801b414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b418:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801b41c:	4682      	mov	sl, r0
 801b41e:	dd24      	ble.n	801b46a <_printf_float+0xa2>
 801b420:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b428:	d502      	bpl.n	801b430 <_printf_float+0x68>
 801b42a:	232d      	movs	r3, #45	; 0x2d
 801b42c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b430:	498f      	ldr	r1, [pc, #572]	; (801b670 <_printf_float+0x2a8>)
 801b432:	4b90      	ldr	r3, [pc, #576]	; (801b674 <_printf_float+0x2ac>)
 801b434:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801b438:	bf94      	ite	ls
 801b43a:	4688      	movls	r8, r1
 801b43c:	4698      	movhi	r8, r3
 801b43e:	2303      	movs	r3, #3
 801b440:	6123      	str	r3, [r4, #16]
 801b442:	f022 0204 	bic.w	r2, r2, #4
 801b446:	2300      	movs	r3, #0
 801b448:	6022      	str	r2, [r4, #0]
 801b44a:	9304      	str	r3, [sp, #16]
 801b44c:	9700      	str	r7, [sp, #0]
 801b44e:	4633      	mov	r3, r6
 801b450:	aa09      	add	r2, sp, #36	; 0x24
 801b452:	4621      	mov	r1, r4
 801b454:	4628      	mov	r0, r5
 801b456:	f000 f9d1 	bl	801b7fc <_printf_common>
 801b45a:	3001      	adds	r0, #1
 801b45c:	f040 808a 	bne.w	801b574 <_printf_float+0x1ac>
 801b460:	f04f 30ff 	mov.w	r0, #4294967295
 801b464:	b00b      	add	sp, #44	; 0x2c
 801b466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b46a:	eeb4 0b40 	vcmp.f64	d0, d0
 801b46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b472:	d709      	bvc.n	801b488 <_printf_float+0xc0>
 801b474:	ee10 3a90 	vmov	r3, s1
 801b478:	2b00      	cmp	r3, #0
 801b47a:	bfbc      	itt	lt
 801b47c:	232d      	movlt	r3, #45	; 0x2d
 801b47e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b482:	497d      	ldr	r1, [pc, #500]	; (801b678 <_printf_float+0x2b0>)
 801b484:	4b7d      	ldr	r3, [pc, #500]	; (801b67c <_printf_float+0x2b4>)
 801b486:	e7d5      	b.n	801b434 <_printf_float+0x6c>
 801b488:	6863      	ldr	r3, [r4, #4]
 801b48a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801b48e:	9104      	str	r1, [sp, #16]
 801b490:	1c59      	adds	r1, r3, #1
 801b492:	d13c      	bne.n	801b50e <_printf_float+0x146>
 801b494:	2306      	movs	r3, #6
 801b496:	6063      	str	r3, [r4, #4]
 801b498:	2300      	movs	r3, #0
 801b49a:	9303      	str	r3, [sp, #12]
 801b49c:	ab08      	add	r3, sp, #32
 801b49e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801b4a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b4a6:	ab07      	add	r3, sp, #28
 801b4a8:	6861      	ldr	r1, [r4, #4]
 801b4aa:	9300      	str	r3, [sp, #0]
 801b4ac:	6022      	str	r2, [r4, #0]
 801b4ae:	f10d 031b 	add.w	r3, sp, #27
 801b4b2:	4628      	mov	r0, r5
 801b4b4:	f7ff fef8 	bl	801b2a8 <__cvt>
 801b4b8:	9b04      	ldr	r3, [sp, #16]
 801b4ba:	9907      	ldr	r1, [sp, #28]
 801b4bc:	2b47      	cmp	r3, #71	; 0x47
 801b4be:	4680      	mov	r8, r0
 801b4c0:	d108      	bne.n	801b4d4 <_printf_float+0x10c>
 801b4c2:	1cc8      	adds	r0, r1, #3
 801b4c4:	db02      	blt.n	801b4cc <_printf_float+0x104>
 801b4c6:	6863      	ldr	r3, [r4, #4]
 801b4c8:	4299      	cmp	r1, r3
 801b4ca:	dd41      	ble.n	801b550 <_printf_float+0x188>
 801b4cc:	f1a9 0902 	sub.w	r9, r9, #2
 801b4d0:	fa5f f989 	uxtb.w	r9, r9
 801b4d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b4d8:	d820      	bhi.n	801b51c <_printf_float+0x154>
 801b4da:	3901      	subs	r1, #1
 801b4dc:	464a      	mov	r2, r9
 801b4de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b4e2:	9107      	str	r1, [sp, #28]
 801b4e4:	f7ff ff32 	bl	801b34c <__exponent>
 801b4e8:	9a08      	ldr	r2, [sp, #32]
 801b4ea:	9004      	str	r0, [sp, #16]
 801b4ec:	1813      	adds	r3, r2, r0
 801b4ee:	2a01      	cmp	r2, #1
 801b4f0:	6123      	str	r3, [r4, #16]
 801b4f2:	dc02      	bgt.n	801b4fa <_printf_float+0x132>
 801b4f4:	6822      	ldr	r2, [r4, #0]
 801b4f6:	07d2      	lsls	r2, r2, #31
 801b4f8:	d501      	bpl.n	801b4fe <_printf_float+0x136>
 801b4fa:	3301      	adds	r3, #1
 801b4fc:	6123      	str	r3, [r4, #16]
 801b4fe:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801b502:	2b00      	cmp	r3, #0
 801b504:	d0a2      	beq.n	801b44c <_printf_float+0x84>
 801b506:	232d      	movs	r3, #45	; 0x2d
 801b508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b50c:	e79e      	b.n	801b44c <_printf_float+0x84>
 801b50e:	9904      	ldr	r1, [sp, #16]
 801b510:	2947      	cmp	r1, #71	; 0x47
 801b512:	d1c1      	bne.n	801b498 <_printf_float+0xd0>
 801b514:	2b00      	cmp	r3, #0
 801b516:	d1bf      	bne.n	801b498 <_printf_float+0xd0>
 801b518:	2301      	movs	r3, #1
 801b51a:	e7bc      	b.n	801b496 <_printf_float+0xce>
 801b51c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801b520:	d118      	bne.n	801b554 <_printf_float+0x18c>
 801b522:	2900      	cmp	r1, #0
 801b524:	6863      	ldr	r3, [r4, #4]
 801b526:	dd0b      	ble.n	801b540 <_printf_float+0x178>
 801b528:	6121      	str	r1, [r4, #16]
 801b52a:	b913      	cbnz	r3, 801b532 <_printf_float+0x16a>
 801b52c:	6822      	ldr	r2, [r4, #0]
 801b52e:	07d0      	lsls	r0, r2, #31
 801b530:	d502      	bpl.n	801b538 <_printf_float+0x170>
 801b532:	3301      	adds	r3, #1
 801b534:	440b      	add	r3, r1
 801b536:	6123      	str	r3, [r4, #16]
 801b538:	2300      	movs	r3, #0
 801b53a:	65a1      	str	r1, [r4, #88]	; 0x58
 801b53c:	9304      	str	r3, [sp, #16]
 801b53e:	e7de      	b.n	801b4fe <_printf_float+0x136>
 801b540:	b913      	cbnz	r3, 801b548 <_printf_float+0x180>
 801b542:	6822      	ldr	r2, [r4, #0]
 801b544:	07d2      	lsls	r2, r2, #31
 801b546:	d501      	bpl.n	801b54c <_printf_float+0x184>
 801b548:	3302      	adds	r3, #2
 801b54a:	e7f4      	b.n	801b536 <_printf_float+0x16e>
 801b54c:	2301      	movs	r3, #1
 801b54e:	e7f2      	b.n	801b536 <_printf_float+0x16e>
 801b550:	f04f 0967 	mov.w	r9, #103	; 0x67
 801b554:	9b08      	ldr	r3, [sp, #32]
 801b556:	4299      	cmp	r1, r3
 801b558:	db05      	blt.n	801b566 <_printf_float+0x19e>
 801b55a:	6823      	ldr	r3, [r4, #0]
 801b55c:	6121      	str	r1, [r4, #16]
 801b55e:	07d8      	lsls	r0, r3, #31
 801b560:	d5ea      	bpl.n	801b538 <_printf_float+0x170>
 801b562:	1c4b      	adds	r3, r1, #1
 801b564:	e7e7      	b.n	801b536 <_printf_float+0x16e>
 801b566:	2900      	cmp	r1, #0
 801b568:	bfd4      	ite	le
 801b56a:	f1c1 0202 	rsble	r2, r1, #2
 801b56e:	2201      	movgt	r2, #1
 801b570:	4413      	add	r3, r2
 801b572:	e7e0      	b.n	801b536 <_printf_float+0x16e>
 801b574:	6823      	ldr	r3, [r4, #0]
 801b576:	055a      	lsls	r2, r3, #21
 801b578:	d407      	bmi.n	801b58a <_printf_float+0x1c2>
 801b57a:	6923      	ldr	r3, [r4, #16]
 801b57c:	4642      	mov	r2, r8
 801b57e:	4631      	mov	r1, r6
 801b580:	4628      	mov	r0, r5
 801b582:	47b8      	blx	r7
 801b584:	3001      	adds	r0, #1
 801b586:	d12a      	bne.n	801b5de <_printf_float+0x216>
 801b588:	e76a      	b.n	801b460 <_printf_float+0x98>
 801b58a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b58e:	f240 80e0 	bls.w	801b752 <_printf_float+0x38a>
 801b592:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b596:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b59e:	d133      	bne.n	801b608 <_printf_float+0x240>
 801b5a0:	4a37      	ldr	r2, [pc, #220]	; (801b680 <_printf_float+0x2b8>)
 801b5a2:	2301      	movs	r3, #1
 801b5a4:	4631      	mov	r1, r6
 801b5a6:	4628      	mov	r0, r5
 801b5a8:	47b8      	blx	r7
 801b5aa:	3001      	adds	r0, #1
 801b5ac:	f43f af58 	beq.w	801b460 <_printf_float+0x98>
 801b5b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b5b4:	429a      	cmp	r2, r3
 801b5b6:	db02      	blt.n	801b5be <_printf_float+0x1f6>
 801b5b8:	6823      	ldr	r3, [r4, #0]
 801b5ba:	07d8      	lsls	r0, r3, #31
 801b5bc:	d50f      	bpl.n	801b5de <_printf_float+0x216>
 801b5be:	4653      	mov	r3, sl
 801b5c0:	465a      	mov	r2, fp
 801b5c2:	4631      	mov	r1, r6
 801b5c4:	4628      	mov	r0, r5
 801b5c6:	47b8      	blx	r7
 801b5c8:	3001      	adds	r0, #1
 801b5ca:	f43f af49 	beq.w	801b460 <_printf_float+0x98>
 801b5ce:	f04f 0800 	mov.w	r8, #0
 801b5d2:	f104 091a 	add.w	r9, r4, #26
 801b5d6:	9b08      	ldr	r3, [sp, #32]
 801b5d8:	3b01      	subs	r3, #1
 801b5da:	4543      	cmp	r3, r8
 801b5dc:	dc09      	bgt.n	801b5f2 <_printf_float+0x22a>
 801b5de:	6823      	ldr	r3, [r4, #0]
 801b5e0:	079b      	lsls	r3, r3, #30
 801b5e2:	f100 8106 	bmi.w	801b7f2 <_printf_float+0x42a>
 801b5e6:	68e0      	ldr	r0, [r4, #12]
 801b5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5ea:	4298      	cmp	r0, r3
 801b5ec:	bfb8      	it	lt
 801b5ee:	4618      	movlt	r0, r3
 801b5f0:	e738      	b.n	801b464 <_printf_float+0x9c>
 801b5f2:	2301      	movs	r3, #1
 801b5f4:	464a      	mov	r2, r9
 801b5f6:	4631      	mov	r1, r6
 801b5f8:	4628      	mov	r0, r5
 801b5fa:	47b8      	blx	r7
 801b5fc:	3001      	adds	r0, #1
 801b5fe:	f43f af2f 	beq.w	801b460 <_printf_float+0x98>
 801b602:	f108 0801 	add.w	r8, r8, #1
 801b606:	e7e6      	b.n	801b5d6 <_printf_float+0x20e>
 801b608:	9b07      	ldr	r3, [sp, #28]
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	dc3a      	bgt.n	801b684 <_printf_float+0x2bc>
 801b60e:	4a1c      	ldr	r2, [pc, #112]	; (801b680 <_printf_float+0x2b8>)
 801b610:	2301      	movs	r3, #1
 801b612:	4631      	mov	r1, r6
 801b614:	4628      	mov	r0, r5
 801b616:	47b8      	blx	r7
 801b618:	3001      	adds	r0, #1
 801b61a:	f43f af21 	beq.w	801b460 <_printf_float+0x98>
 801b61e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801b622:	4313      	orrs	r3, r2
 801b624:	d102      	bne.n	801b62c <_printf_float+0x264>
 801b626:	6823      	ldr	r3, [r4, #0]
 801b628:	07d9      	lsls	r1, r3, #31
 801b62a:	d5d8      	bpl.n	801b5de <_printf_float+0x216>
 801b62c:	4653      	mov	r3, sl
 801b62e:	465a      	mov	r2, fp
 801b630:	4631      	mov	r1, r6
 801b632:	4628      	mov	r0, r5
 801b634:	47b8      	blx	r7
 801b636:	3001      	adds	r0, #1
 801b638:	f43f af12 	beq.w	801b460 <_printf_float+0x98>
 801b63c:	f04f 0900 	mov.w	r9, #0
 801b640:	f104 0a1a 	add.w	sl, r4, #26
 801b644:	9b07      	ldr	r3, [sp, #28]
 801b646:	425b      	negs	r3, r3
 801b648:	454b      	cmp	r3, r9
 801b64a:	dc01      	bgt.n	801b650 <_printf_float+0x288>
 801b64c:	9b08      	ldr	r3, [sp, #32]
 801b64e:	e795      	b.n	801b57c <_printf_float+0x1b4>
 801b650:	2301      	movs	r3, #1
 801b652:	4652      	mov	r2, sl
 801b654:	4631      	mov	r1, r6
 801b656:	4628      	mov	r0, r5
 801b658:	47b8      	blx	r7
 801b65a:	3001      	adds	r0, #1
 801b65c:	f43f af00 	beq.w	801b460 <_printf_float+0x98>
 801b660:	f109 0901 	add.w	r9, r9, #1
 801b664:	e7ee      	b.n	801b644 <_printf_float+0x27c>
 801b666:	bf00      	nop
 801b668:	ffffffff 	.word	0xffffffff
 801b66c:	7fefffff 	.word	0x7fefffff
 801b670:	08020884 	.word	0x08020884
 801b674:	08020888 	.word	0x08020888
 801b678:	0802088c 	.word	0x0802088c
 801b67c:	08020890 	.word	0x08020890
 801b680:	08020c20 	.word	0x08020c20
 801b684:	9a08      	ldr	r2, [sp, #32]
 801b686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b688:	429a      	cmp	r2, r3
 801b68a:	bfa8      	it	ge
 801b68c:	461a      	movge	r2, r3
 801b68e:	2a00      	cmp	r2, #0
 801b690:	4691      	mov	r9, r2
 801b692:	dc38      	bgt.n	801b706 <_printf_float+0x33e>
 801b694:	2300      	movs	r3, #0
 801b696:	9305      	str	r3, [sp, #20]
 801b698:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b69c:	f104 021a 	add.w	r2, r4, #26
 801b6a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b6a2:	9905      	ldr	r1, [sp, #20]
 801b6a4:	9304      	str	r3, [sp, #16]
 801b6a6:	eba3 0309 	sub.w	r3, r3, r9
 801b6aa:	428b      	cmp	r3, r1
 801b6ac:	dc33      	bgt.n	801b716 <_printf_float+0x34e>
 801b6ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b6b2:	429a      	cmp	r2, r3
 801b6b4:	db3c      	blt.n	801b730 <_printf_float+0x368>
 801b6b6:	6823      	ldr	r3, [r4, #0]
 801b6b8:	07da      	lsls	r2, r3, #31
 801b6ba:	d439      	bmi.n	801b730 <_printf_float+0x368>
 801b6bc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801b6c0:	eba2 0903 	sub.w	r9, r2, r3
 801b6c4:	9b04      	ldr	r3, [sp, #16]
 801b6c6:	1ad2      	subs	r2, r2, r3
 801b6c8:	4591      	cmp	r9, r2
 801b6ca:	bfa8      	it	ge
 801b6cc:	4691      	movge	r9, r2
 801b6ce:	f1b9 0f00 	cmp.w	r9, #0
 801b6d2:	dc35      	bgt.n	801b740 <_printf_float+0x378>
 801b6d4:	f04f 0800 	mov.w	r8, #0
 801b6d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b6dc:	f104 0a1a 	add.w	sl, r4, #26
 801b6e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b6e4:	1a9b      	subs	r3, r3, r2
 801b6e6:	eba3 0309 	sub.w	r3, r3, r9
 801b6ea:	4543      	cmp	r3, r8
 801b6ec:	f77f af77 	ble.w	801b5de <_printf_float+0x216>
 801b6f0:	2301      	movs	r3, #1
 801b6f2:	4652      	mov	r2, sl
 801b6f4:	4631      	mov	r1, r6
 801b6f6:	4628      	mov	r0, r5
 801b6f8:	47b8      	blx	r7
 801b6fa:	3001      	adds	r0, #1
 801b6fc:	f43f aeb0 	beq.w	801b460 <_printf_float+0x98>
 801b700:	f108 0801 	add.w	r8, r8, #1
 801b704:	e7ec      	b.n	801b6e0 <_printf_float+0x318>
 801b706:	4613      	mov	r3, r2
 801b708:	4631      	mov	r1, r6
 801b70a:	4642      	mov	r2, r8
 801b70c:	4628      	mov	r0, r5
 801b70e:	47b8      	blx	r7
 801b710:	3001      	adds	r0, #1
 801b712:	d1bf      	bne.n	801b694 <_printf_float+0x2cc>
 801b714:	e6a4      	b.n	801b460 <_printf_float+0x98>
 801b716:	2301      	movs	r3, #1
 801b718:	4631      	mov	r1, r6
 801b71a:	4628      	mov	r0, r5
 801b71c:	9204      	str	r2, [sp, #16]
 801b71e:	47b8      	blx	r7
 801b720:	3001      	adds	r0, #1
 801b722:	f43f ae9d 	beq.w	801b460 <_printf_float+0x98>
 801b726:	9b05      	ldr	r3, [sp, #20]
 801b728:	9a04      	ldr	r2, [sp, #16]
 801b72a:	3301      	adds	r3, #1
 801b72c:	9305      	str	r3, [sp, #20]
 801b72e:	e7b7      	b.n	801b6a0 <_printf_float+0x2d8>
 801b730:	4653      	mov	r3, sl
 801b732:	465a      	mov	r2, fp
 801b734:	4631      	mov	r1, r6
 801b736:	4628      	mov	r0, r5
 801b738:	47b8      	blx	r7
 801b73a:	3001      	adds	r0, #1
 801b73c:	d1be      	bne.n	801b6bc <_printf_float+0x2f4>
 801b73e:	e68f      	b.n	801b460 <_printf_float+0x98>
 801b740:	9a04      	ldr	r2, [sp, #16]
 801b742:	464b      	mov	r3, r9
 801b744:	4442      	add	r2, r8
 801b746:	4631      	mov	r1, r6
 801b748:	4628      	mov	r0, r5
 801b74a:	47b8      	blx	r7
 801b74c:	3001      	adds	r0, #1
 801b74e:	d1c1      	bne.n	801b6d4 <_printf_float+0x30c>
 801b750:	e686      	b.n	801b460 <_printf_float+0x98>
 801b752:	9a08      	ldr	r2, [sp, #32]
 801b754:	2a01      	cmp	r2, #1
 801b756:	dc01      	bgt.n	801b75c <_printf_float+0x394>
 801b758:	07db      	lsls	r3, r3, #31
 801b75a:	d537      	bpl.n	801b7cc <_printf_float+0x404>
 801b75c:	2301      	movs	r3, #1
 801b75e:	4642      	mov	r2, r8
 801b760:	4631      	mov	r1, r6
 801b762:	4628      	mov	r0, r5
 801b764:	47b8      	blx	r7
 801b766:	3001      	adds	r0, #1
 801b768:	f43f ae7a 	beq.w	801b460 <_printf_float+0x98>
 801b76c:	4653      	mov	r3, sl
 801b76e:	465a      	mov	r2, fp
 801b770:	4631      	mov	r1, r6
 801b772:	4628      	mov	r0, r5
 801b774:	47b8      	blx	r7
 801b776:	3001      	adds	r0, #1
 801b778:	f43f ae72 	beq.w	801b460 <_printf_float+0x98>
 801b77c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b780:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b788:	9b08      	ldr	r3, [sp, #32]
 801b78a:	d01a      	beq.n	801b7c2 <_printf_float+0x3fa>
 801b78c:	3b01      	subs	r3, #1
 801b78e:	f108 0201 	add.w	r2, r8, #1
 801b792:	4631      	mov	r1, r6
 801b794:	4628      	mov	r0, r5
 801b796:	47b8      	blx	r7
 801b798:	3001      	adds	r0, #1
 801b79a:	d10e      	bne.n	801b7ba <_printf_float+0x3f2>
 801b79c:	e660      	b.n	801b460 <_printf_float+0x98>
 801b79e:	2301      	movs	r3, #1
 801b7a0:	464a      	mov	r2, r9
 801b7a2:	4631      	mov	r1, r6
 801b7a4:	4628      	mov	r0, r5
 801b7a6:	47b8      	blx	r7
 801b7a8:	3001      	adds	r0, #1
 801b7aa:	f43f ae59 	beq.w	801b460 <_printf_float+0x98>
 801b7ae:	f108 0801 	add.w	r8, r8, #1
 801b7b2:	9b08      	ldr	r3, [sp, #32]
 801b7b4:	3b01      	subs	r3, #1
 801b7b6:	4543      	cmp	r3, r8
 801b7b8:	dcf1      	bgt.n	801b79e <_printf_float+0x3d6>
 801b7ba:	9b04      	ldr	r3, [sp, #16]
 801b7bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b7c0:	e6dd      	b.n	801b57e <_printf_float+0x1b6>
 801b7c2:	f04f 0800 	mov.w	r8, #0
 801b7c6:	f104 091a 	add.w	r9, r4, #26
 801b7ca:	e7f2      	b.n	801b7b2 <_printf_float+0x3ea>
 801b7cc:	2301      	movs	r3, #1
 801b7ce:	4642      	mov	r2, r8
 801b7d0:	e7df      	b.n	801b792 <_printf_float+0x3ca>
 801b7d2:	2301      	movs	r3, #1
 801b7d4:	464a      	mov	r2, r9
 801b7d6:	4631      	mov	r1, r6
 801b7d8:	4628      	mov	r0, r5
 801b7da:	47b8      	blx	r7
 801b7dc:	3001      	adds	r0, #1
 801b7de:	f43f ae3f 	beq.w	801b460 <_printf_float+0x98>
 801b7e2:	f108 0801 	add.w	r8, r8, #1
 801b7e6:	68e3      	ldr	r3, [r4, #12]
 801b7e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b7ea:	1a5b      	subs	r3, r3, r1
 801b7ec:	4543      	cmp	r3, r8
 801b7ee:	dcf0      	bgt.n	801b7d2 <_printf_float+0x40a>
 801b7f0:	e6f9      	b.n	801b5e6 <_printf_float+0x21e>
 801b7f2:	f04f 0800 	mov.w	r8, #0
 801b7f6:	f104 0919 	add.w	r9, r4, #25
 801b7fa:	e7f4      	b.n	801b7e6 <_printf_float+0x41e>

0801b7fc <_printf_common>:
 801b7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b800:	4616      	mov	r6, r2
 801b802:	4699      	mov	r9, r3
 801b804:	688a      	ldr	r2, [r1, #8]
 801b806:	690b      	ldr	r3, [r1, #16]
 801b808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b80c:	4293      	cmp	r3, r2
 801b80e:	bfb8      	it	lt
 801b810:	4613      	movlt	r3, r2
 801b812:	6033      	str	r3, [r6, #0]
 801b814:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b818:	4607      	mov	r7, r0
 801b81a:	460c      	mov	r4, r1
 801b81c:	b10a      	cbz	r2, 801b822 <_printf_common+0x26>
 801b81e:	3301      	adds	r3, #1
 801b820:	6033      	str	r3, [r6, #0]
 801b822:	6823      	ldr	r3, [r4, #0]
 801b824:	0699      	lsls	r1, r3, #26
 801b826:	bf42      	ittt	mi
 801b828:	6833      	ldrmi	r3, [r6, #0]
 801b82a:	3302      	addmi	r3, #2
 801b82c:	6033      	strmi	r3, [r6, #0]
 801b82e:	6825      	ldr	r5, [r4, #0]
 801b830:	f015 0506 	ands.w	r5, r5, #6
 801b834:	d106      	bne.n	801b844 <_printf_common+0x48>
 801b836:	f104 0a19 	add.w	sl, r4, #25
 801b83a:	68e3      	ldr	r3, [r4, #12]
 801b83c:	6832      	ldr	r2, [r6, #0]
 801b83e:	1a9b      	subs	r3, r3, r2
 801b840:	42ab      	cmp	r3, r5
 801b842:	dc26      	bgt.n	801b892 <_printf_common+0x96>
 801b844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b848:	1e13      	subs	r3, r2, #0
 801b84a:	6822      	ldr	r2, [r4, #0]
 801b84c:	bf18      	it	ne
 801b84e:	2301      	movne	r3, #1
 801b850:	0692      	lsls	r2, r2, #26
 801b852:	d42b      	bmi.n	801b8ac <_printf_common+0xb0>
 801b854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b858:	4649      	mov	r1, r9
 801b85a:	4638      	mov	r0, r7
 801b85c:	47c0      	blx	r8
 801b85e:	3001      	adds	r0, #1
 801b860:	d01e      	beq.n	801b8a0 <_printf_common+0xa4>
 801b862:	6823      	ldr	r3, [r4, #0]
 801b864:	6922      	ldr	r2, [r4, #16]
 801b866:	f003 0306 	and.w	r3, r3, #6
 801b86a:	2b04      	cmp	r3, #4
 801b86c:	bf02      	ittt	eq
 801b86e:	68e5      	ldreq	r5, [r4, #12]
 801b870:	6833      	ldreq	r3, [r6, #0]
 801b872:	1aed      	subeq	r5, r5, r3
 801b874:	68a3      	ldr	r3, [r4, #8]
 801b876:	bf0c      	ite	eq
 801b878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b87c:	2500      	movne	r5, #0
 801b87e:	4293      	cmp	r3, r2
 801b880:	bfc4      	itt	gt
 801b882:	1a9b      	subgt	r3, r3, r2
 801b884:	18ed      	addgt	r5, r5, r3
 801b886:	2600      	movs	r6, #0
 801b888:	341a      	adds	r4, #26
 801b88a:	42b5      	cmp	r5, r6
 801b88c:	d11a      	bne.n	801b8c4 <_printf_common+0xc8>
 801b88e:	2000      	movs	r0, #0
 801b890:	e008      	b.n	801b8a4 <_printf_common+0xa8>
 801b892:	2301      	movs	r3, #1
 801b894:	4652      	mov	r2, sl
 801b896:	4649      	mov	r1, r9
 801b898:	4638      	mov	r0, r7
 801b89a:	47c0      	blx	r8
 801b89c:	3001      	adds	r0, #1
 801b89e:	d103      	bne.n	801b8a8 <_printf_common+0xac>
 801b8a0:	f04f 30ff 	mov.w	r0, #4294967295
 801b8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8a8:	3501      	adds	r5, #1
 801b8aa:	e7c6      	b.n	801b83a <_printf_common+0x3e>
 801b8ac:	18e1      	adds	r1, r4, r3
 801b8ae:	1c5a      	adds	r2, r3, #1
 801b8b0:	2030      	movs	r0, #48	; 0x30
 801b8b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b8b6:	4422      	add	r2, r4
 801b8b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b8bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b8c0:	3302      	adds	r3, #2
 801b8c2:	e7c7      	b.n	801b854 <_printf_common+0x58>
 801b8c4:	2301      	movs	r3, #1
 801b8c6:	4622      	mov	r2, r4
 801b8c8:	4649      	mov	r1, r9
 801b8ca:	4638      	mov	r0, r7
 801b8cc:	47c0      	blx	r8
 801b8ce:	3001      	adds	r0, #1
 801b8d0:	d0e6      	beq.n	801b8a0 <_printf_common+0xa4>
 801b8d2:	3601      	adds	r6, #1
 801b8d4:	e7d9      	b.n	801b88a <_printf_common+0x8e>
	...

0801b8d8 <_printf_i>:
 801b8d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b8dc:	7e0f      	ldrb	r7, [r1, #24]
 801b8de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b8e0:	2f78      	cmp	r7, #120	; 0x78
 801b8e2:	4691      	mov	r9, r2
 801b8e4:	4680      	mov	r8, r0
 801b8e6:	460c      	mov	r4, r1
 801b8e8:	469a      	mov	sl, r3
 801b8ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b8ee:	d807      	bhi.n	801b900 <_printf_i+0x28>
 801b8f0:	2f62      	cmp	r7, #98	; 0x62
 801b8f2:	d80a      	bhi.n	801b90a <_printf_i+0x32>
 801b8f4:	2f00      	cmp	r7, #0
 801b8f6:	f000 80d4 	beq.w	801baa2 <_printf_i+0x1ca>
 801b8fa:	2f58      	cmp	r7, #88	; 0x58
 801b8fc:	f000 80c0 	beq.w	801ba80 <_printf_i+0x1a8>
 801b900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b908:	e03a      	b.n	801b980 <_printf_i+0xa8>
 801b90a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b90e:	2b15      	cmp	r3, #21
 801b910:	d8f6      	bhi.n	801b900 <_printf_i+0x28>
 801b912:	a101      	add	r1, pc, #4	; (adr r1, 801b918 <_printf_i+0x40>)
 801b914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b918:	0801b971 	.word	0x0801b971
 801b91c:	0801b985 	.word	0x0801b985
 801b920:	0801b901 	.word	0x0801b901
 801b924:	0801b901 	.word	0x0801b901
 801b928:	0801b901 	.word	0x0801b901
 801b92c:	0801b901 	.word	0x0801b901
 801b930:	0801b985 	.word	0x0801b985
 801b934:	0801b901 	.word	0x0801b901
 801b938:	0801b901 	.word	0x0801b901
 801b93c:	0801b901 	.word	0x0801b901
 801b940:	0801b901 	.word	0x0801b901
 801b944:	0801ba89 	.word	0x0801ba89
 801b948:	0801b9b1 	.word	0x0801b9b1
 801b94c:	0801ba43 	.word	0x0801ba43
 801b950:	0801b901 	.word	0x0801b901
 801b954:	0801b901 	.word	0x0801b901
 801b958:	0801baab 	.word	0x0801baab
 801b95c:	0801b901 	.word	0x0801b901
 801b960:	0801b9b1 	.word	0x0801b9b1
 801b964:	0801b901 	.word	0x0801b901
 801b968:	0801b901 	.word	0x0801b901
 801b96c:	0801ba4b 	.word	0x0801ba4b
 801b970:	682b      	ldr	r3, [r5, #0]
 801b972:	1d1a      	adds	r2, r3, #4
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	602a      	str	r2, [r5, #0]
 801b978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b97c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b980:	2301      	movs	r3, #1
 801b982:	e09f      	b.n	801bac4 <_printf_i+0x1ec>
 801b984:	6820      	ldr	r0, [r4, #0]
 801b986:	682b      	ldr	r3, [r5, #0]
 801b988:	0607      	lsls	r7, r0, #24
 801b98a:	f103 0104 	add.w	r1, r3, #4
 801b98e:	6029      	str	r1, [r5, #0]
 801b990:	d501      	bpl.n	801b996 <_printf_i+0xbe>
 801b992:	681e      	ldr	r6, [r3, #0]
 801b994:	e003      	b.n	801b99e <_printf_i+0xc6>
 801b996:	0646      	lsls	r6, r0, #25
 801b998:	d5fb      	bpl.n	801b992 <_printf_i+0xba>
 801b99a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b99e:	2e00      	cmp	r6, #0
 801b9a0:	da03      	bge.n	801b9aa <_printf_i+0xd2>
 801b9a2:	232d      	movs	r3, #45	; 0x2d
 801b9a4:	4276      	negs	r6, r6
 801b9a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b9aa:	485a      	ldr	r0, [pc, #360]	; (801bb14 <_printf_i+0x23c>)
 801b9ac:	230a      	movs	r3, #10
 801b9ae:	e012      	b.n	801b9d6 <_printf_i+0xfe>
 801b9b0:	682b      	ldr	r3, [r5, #0]
 801b9b2:	6820      	ldr	r0, [r4, #0]
 801b9b4:	1d19      	adds	r1, r3, #4
 801b9b6:	6029      	str	r1, [r5, #0]
 801b9b8:	0605      	lsls	r5, r0, #24
 801b9ba:	d501      	bpl.n	801b9c0 <_printf_i+0xe8>
 801b9bc:	681e      	ldr	r6, [r3, #0]
 801b9be:	e002      	b.n	801b9c6 <_printf_i+0xee>
 801b9c0:	0641      	lsls	r1, r0, #25
 801b9c2:	d5fb      	bpl.n	801b9bc <_printf_i+0xe4>
 801b9c4:	881e      	ldrh	r6, [r3, #0]
 801b9c6:	4853      	ldr	r0, [pc, #332]	; (801bb14 <_printf_i+0x23c>)
 801b9c8:	2f6f      	cmp	r7, #111	; 0x6f
 801b9ca:	bf0c      	ite	eq
 801b9cc:	2308      	moveq	r3, #8
 801b9ce:	230a      	movne	r3, #10
 801b9d0:	2100      	movs	r1, #0
 801b9d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b9d6:	6865      	ldr	r5, [r4, #4]
 801b9d8:	60a5      	str	r5, [r4, #8]
 801b9da:	2d00      	cmp	r5, #0
 801b9dc:	bfa2      	ittt	ge
 801b9de:	6821      	ldrge	r1, [r4, #0]
 801b9e0:	f021 0104 	bicge.w	r1, r1, #4
 801b9e4:	6021      	strge	r1, [r4, #0]
 801b9e6:	b90e      	cbnz	r6, 801b9ec <_printf_i+0x114>
 801b9e8:	2d00      	cmp	r5, #0
 801b9ea:	d04b      	beq.n	801ba84 <_printf_i+0x1ac>
 801b9ec:	4615      	mov	r5, r2
 801b9ee:	fbb6 f1f3 	udiv	r1, r6, r3
 801b9f2:	fb03 6711 	mls	r7, r3, r1, r6
 801b9f6:	5dc7      	ldrb	r7, [r0, r7]
 801b9f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b9fc:	4637      	mov	r7, r6
 801b9fe:	42bb      	cmp	r3, r7
 801ba00:	460e      	mov	r6, r1
 801ba02:	d9f4      	bls.n	801b9ee <_printf_i+0x116>
 801ba04:	2b08      	cmp	r3, #8
 801ba06:	d10b      	bne.n	801ba20 <_printf_i+0x148>
 801ba08:	6823      	ldr	r3, [r4, #0]
 801ba0a:	07de      	lsls	r6, r3, #31
 801ba0c:	d508      	bpl.n	801ba20 <_printf_i+0x148>
 801ba0e:	6923      	ldr	r3, [r4, #16]
 801ba10:	6861      	ldr	r1, [r4, #4]
 801ba12:	4299      	cmp	r1, r3
 801ba14:	bfde      	ittt	le
 801ba16:	2330      	movle	r3, #48	; 0x30
 801ba18:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ba1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ba20:	1b52      	subs	r2, r2, r5
 801ba22:	6122      	str	r2, [r4, #16]
 801ba24:	f8cd a000 	str.w	sl, [sp]
 801ba28:	464b      	mov	r3, r9
 801ba2a:	aa03      	add	r2, sp, #12
 801ba2c:	4621      	mov	r1, r4
 801ba2e:	4640      	mov	r0, r8
 801ba30:	f7ff fee4 	bl	801b7fc <_printf_common>
 801ba34:	3001      	adds	r0, #1
 801ba36:	d14a      	bne.n	801bace <_printf_i+0x1f6>
 801ba38:	f04f 30ff 	mov.w	r0, #4294967295
 801ba3c:	b004      	add	sp, #16
 801ba3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba42:	6823      	ldr	r3, [r4, #0]
 801ba44:	f043 0320 	orr.w	r3, r3, #32
 801ba48:	6023      	str	r3, [r4, #0]
 801ba4a:	4833      	ldr	r0, [pc, #204]	; (801bb18 <_printf_i+0x240>)
 801ba4c:	2778      	movs	r7, #120	; 0x78
 801ba4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ba52:	6823      	ldr	r3, [r4, #0]
 801ba54:	6829      	ldr	r1, [r5, #0]
 801ba56:	061f      	lsls	r7, r3, #24
 801ba58:	f851 6b04 	ldr.w	r6, [r1], #4
 801ba5c:	d402      	bmi.n	801ba64 <_printf_i+0x18c>
 801ba5e:	065f      	lsls	r7, r3, #25
 801ba60:	bf48      	it	mi
 801ba62:	b2b6      	uxthmi	r6, r6
 801ba64:	07df      	lsls	r7, r3, #31
 801ba66:	bf48      	it	mi
 801ba68:	f043 0320 	orrmi.w	r3, r3, #32
 801ba6c:	6029      	str	r1, [r5, #0]
 801ba6e:	bf48      	it	mi
 801ba70:	6023      	strmi	r3, [r4, #0]
 801ba72:	b91e      	cbnz	r6, 801ba7c <_printf_i+0x1a4>
 801ba74:	6823      	ldr	r3, [r4, #0]
 801ba76:	f023 0320 	bic.w	r3, r3, #32
 801ba7a:	6023      	str	r3, [r4, #0]
 801ba7c:	2310      	movs	r3, #16
 801ba7e:	e7a7      	b.n	801b9d0 <_printf_i+0xf8>
 801ba80:	4824      	ldr	r0, [pc, #144]	; (801bb14 <_printf_i+0x23c>)
 801ba82:	e7e4      	b.n	801ba4e <_printf_i+0x176>
 801ba84:	4615      	mov	r5, r2
 801ba86:	e7bd      	b.n	801ba04 <_printf_i+0x12c>
 801ba88:	682b      	ldr	r3, [r5, #0]
 801ba8a:	6826      	ldr	r6, [r4, #0]
 801ba8c:	6961      	ldr	r1, [r4, #20]
 801ba8e:	1d18      	adds	r0, r3, #4
 801ba90:	6028      	str	r0, [r5, #0]
 801ba92:	0635      	lsls	r5, r6, #24
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	d501      	bpl.n	801ba9c <_printf_i+0x1c4>
 801ba98:	6019      	str	r1, [r3, #0]
 801ba9a:	e002      	b.n	801baa2 <_printf_i+0x1ca>
 801ba9c:	0670      	lsls	r0, r6, #25
 801ba9e:	d5fb      	bpl.n	801ba98 <_printf_i+0x1c0>
 801baa0:	8019      	strh	r1, [r3, #0]
 801baa2:	2300      	movs	r3, #0
 801baa4:	6123      	str	r3, [r4, #16]
 801baa6:	4615      	mov	r5, r2
 801baa8:	e7bc      	b.n	801ba24 <_printf_i+0x14c>
 801baaa:	682b      	ldr	r3, [r5, #0]
 801baac:	1d1a      	adds	r2, r3, #4
 801baae:	602a      	str	r2, [r5, #0]
 801bab0:	681d      	ldr	r5, [r3, #0]
 801bab2:	6862      	ldr	r2, [r4, #4]
 801bab4:	2100      	movs	r1, #0
 801bab6:	4628      	mov	r0, r5
 801bab8:	f7e4 fc3a 	bl	8000330 <memchr>
 801babc:	b108      	cbz	r0, 801bac2 <_printf_i+0x1ea>
 801babe:	1b40      	subs	r0, r0, r5
 801bac0:	6060      	str	r0, [r4, #4]
 801bac2:	6863      	ldr	r3, [r4, #4]
 801bac4:	6123      	str	r3, [r4, #16]
 801bac6:	2300      	movs	r3, #0
 801bac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bacc:	e7aa      	b.n	801ba24 <_printf_i+0x14c>
 801bace:	6923      	ldr	r3, [r4, #16]
 801bad0:	462a      	mov	r2, r5
 801bad2:	4649      	mov	r1, r9
 801bad4:	4640      	mov	r0, r8
 801bad6:	47d0      	blx	sl
 801bad8:	3001      	adds	r0, #1
 801bada:	d0ad      	beq.n	801ba38 <_printf_i+0x160>
 801badc:	6823      	ldr	r3, [r4, #0]
 801bade:	079b      	lsls	r3, r3, #30
 801bae0:	d413      	bmi.n	801bb0a <_printf_i+0x232>
 801bae2:	68e0      	ldr	r0, [r4, #12]
 801bae4:	9b03      	ldr	r3, [sp, #12]
 801bae6:	4298      	cmp	r0, r3
 801bae8:	bfb8      	it	lt
 801baea:	4618      	movlt	r0, r3
 801baec:	e7a6      	b.n	801ba3c <_printf_i+0x164>
 801baee:	2301      	movs	r3, #1
 801baf0:	4632      	mov	r2, r6
 801baf2:	4649      	mov	r1, r9
 801baf4:	4640      	mov	r0, r8
 801baf6:	47d0      	blx	sl
 801baf8:	3001      	adds	r0, #1
 801bafa:	d09d      	beq.n	801ba38 <_printf_i+0x160>
 801bafc:	3501      	adds	r5, #1
 801bafe:	68e3      	ldr	r3, [r4, #12]
 801bb00:	9903      	ldr	r1, [sp, #12]
 801bb02:	1a5b      	subs	r3, r3, r1
 801bb04:	42ab      	cmp	r3, r5
 801bb06:	dcf2      	bgt.n	801baee <_printf_i+0x216>
 801bb08:	e7eb      	b.n	801bae2 <_printf_i+0x20a>
 801bb0a:	2500      	movs	r5, #0
 801bb0c:	f104 0619 	add.w	r6, r4, #25
 801bb10:	e7f5      	b.n	801bafe <_printf_i+0x226>
 801bb12:	bf00      	nop
 801bb14:	08020894 	.word	0x08020894
 801bb18:	080208a5 	.word	0x080208a5

0801bb1c <_scanf_float>:
 801bb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb20:	b087      	sub	sp, #28
 801bb22:	4617      	mov	r7, r2
 801bb24:	9303      	str	r3, [sp, #12]
 801bb26:	688b      	ldr	r3, [r1, #8]
 801bb28:	1e5a      	subs	r2, r3, #1
 801bb2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801bb2e:	bf83      	ittte	hi
 801bb30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801bb34:	195b      	addhi	r3, r3, r5
 801bb36:	9302      	strhi	r3, [sp, #8]
 801bb38:	2300      	movls	r3, #0
 801bb3a:	bf86      	itte	hi
 801bb3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801bb40:	608b      	strhi	r3, [r1, #8]
 801bb42:	9302      	strls	r3, [sp, #8]
 801bb44:	680b      	ldr	r3, [r1, #0]
 801bb46:	468b      	mov	fp, r1
 801bb48:	2500      	movs	r5, #0
 801bb4a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801bb4e:	f84b 3b1c 	str.w	r3, [fp], #28
 801bb52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801bb56:	4680      	mov	r8, r0
 801bb58:	460c      	mov	r4, r1
 801bb5a:	465e      	mov	r6, fp
 801bb5c:	46aa      	mov	sl, r5
 801bb5e:	46a9      	mov	r9, r5
 801bb60:	9501      	str	r5, [sp, #4]
 801bb62:	68a2      	ldr	r2, [r4, #8]
 801bb64:	b152      	cbz	r2, 801bb7c <_scanf_float+0x60>
 801bb66:	683b      	ldr	r3, [r7, #0]
 801bb68:	781b      	ldrb	r3, [r3, #0]
 801bb6a:	2b4e      	cmp	r3, #78	; 0x4e
 801bb6c:	d864      	bhi.n	801bc38 <_scanf_float+0x11c>
 801bb6e:	2b40      	cmp	r3, #64	; 0x40
 801bb70:	d83c      	bhi.n	801bbec <_scanf_float+0xd0>
 801bb72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801bb76:	b2c8      	uxtb	r0, r1
 801bb78:	280e      	cmp	r0, #14
 801bb7a:	d93a      	bls.n	801bbf2 <_scanf_float+0xd6>
 801bb7c:	f1b9 0f00 	cmp.w	r9, #0
 801bb80:	d003      	beq.n	801bb8a <_scanf_float+0x6e>
 801bb82:	6823      	ldr	r3, [r4, #0]
 801bb84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bb88:	6023      	str	r3, [r4, #0]
 801bb8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bb8e:	f1ba 0f01 	cmp.w	sl, #1
 801bb92:	f200 8113 	bhi.w	801bdbc <_scanf_float+0x2a0>
 801bb96:	455e      	cmp	r6, fp
 801bb98:	f200 8105 	bhi.w	801bda6 <_scanf_float+0x28a>
 801bb9c:	2501      	movs	r5, #1
 801bb9e:	4628      	mov	r0, r5
 801bba0:	b007      	add	sp, #28
 801bba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bba6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801bbaa:	2a0d      	cmp	r2, #13
 801bbac:	d8e6      	bhi.n	801bb7c <_scanf_float+0x60>
 801bbae:	a101      	add	r1, pc, #4	; (adr r1, 801bbb4 <_scanf_float+0x98>)
 801bbb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801bbb4:	0801bcf3 	.word	0x0801bcf3
 801bbb8:	0801bb7d 	.word	0x0801bb7d
 801bbbc:	0801bb7d 	.word	0x0801bb7d
 801bbc0:	0801bb7d 	.word	0x0801bb7d
 801bbc4:	0801bd53 	.word	0x0801bd53
 801bbc8:	0801bd2b 	.word	0x0801bd2b
 801bbcc:	0801bb7d 	.word	0x0801bb7d
 801bbd0:	0801bb7d 	.word	0x0801bb7d
 801bbd4:	0801bd01 	.word	0x0801bd01
 801bbd8:	0801bb7d 	.word	0x0801bb7d
 801bbdc:	0801bb7d 	.word	0x0801bb7d
 801bbe0:	0801bb7d 	.word	0x0801bb7d
 801bbe4:	0801bb7d 	.word	0x0801bb7d
 801bbe8:	0801bcb9 	.word	0x0801bcb9
 801bbec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801bbf0:	e7db      	b.n	801bbaa <_scanf_float+0x8e>
 801bbf2:	290e      	cmp	r1, #14
 801bbf4:	d8c2      	bhi.n	801bb7c <_scanf_float+0x60>
 801bbf6:	a001      	add	r0, pc, #4	; (adr r0, 801bbfc <_scanf_float+0xe0>)
 801bbf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801bbfc:	0801bcab 	.word	0x0801bcab
 801bc00:	0801bb7d 	.word	0x0801bb7d
 801bc04:	0801bcab 	.word	0x0801bcab
 801bc08:	0801bd3f 	.word	0x0801bd3f
 801bc0c:	0801bb7d 	.word	0x0801bb7d
 801bc10:	0801bc59 	.word	0x0801bc59
 801bc14:	0801bc95 	.word	0x0801bc95
 801bc18:	0801bc95 	.word	0x0801bc95
 801bc1c:	0801bc95 	.word	0x0801bc95
 801bc20:	0801bc95 	.word	0x0801bc95
 801bc24:	0801bc95 	.word	0x0801bc95
 801bc28:	0801bc95 	.word	0x0801bc95
 801bc2c:	0801bc95 	.word	0x0801bc95
 801bc30:	0801bc95 	.word	0x0801bc95
 801bc34:	0801bc95 	.word	0x0801bc95
 801bc38:	2b6e      	cmp	r3, #110	; 0x6e
 801bc3a:	d809      	bhi.n	801bc50 <_scanf_float+0x134>
 801bc3c:	2b60      	cmp	r3, #96	; 0x60
 801bc3e:	d8b2      	bhi.n	801bba6 <_scanf_float+0x8a>
 801bc40:	2b54      	cmp	r3, #84	; 0x54
 801bc42:	d077      	beq.n	801bd34 <_scanf_float+0x218>
 801bc44:	2b59      	cmp	r3, #89	; 0x59
 801bc46:	d199      	bne.n	801bb7c <_scanf_float+0x60>
 801bc48:	2d07      	cmp	r5, #7
 801bc4a:	d197      	bne.n	801bb7c <_scanf_float+0x60>
 801bc4c:	2508      	movs	r5, #8
 801bc4e:	e029      	b.n	801bca4 <_scanf_float+0x188>
 801bc50:	2b74      	cmp	r3, #116	; 0x74
 801bc52:	d06f      	beq.n	801bd34 <_scanf_float+0x218>
 801bc54:	2b79      	cmp	r3, #121	; 0x79
 801bc56:	e7f6      	b.n	801bc46 <_scanf_float+0x12a>
 801bc58:	6821      	ldr	r1, [r4, #0]
 801bc5a:	05c8      	lsls	r0, r1, #23
 801bc5c:	d51a      	bpl.n	801bc94 <_scanf_float+0x178>
 801bc5e:	9b02      	ldr	r3, [sp, #8]
 801bc60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801bc64:	6021      	str	r1, [r4, #0]
 801bc66:	f109 0901 	add.w	r9, r9, #1
 801bc6a:	b11b      	cbz	r3, 801bc74 <_scanf_float+0x158>
 801bc6c:	3b01      	subs	r3, #1
 801bc6e:	3201      	adds	r2, #1
 801bc70:	9302      	str	r3, [sp, #8]
 801bc72:	60a2      	str	r2, [r4, #8]
 801bc74:	68a3      	ldr	r3, [r4, #8]
 801bc76:	3b01      	subs	r3, #1
 801bc78:	60a3      	str	r3, [r4, #8]
 801bc7a:	6923      	ldr	r3, [r4, #16]
 801bc7c:	3301      	adds	r3, #1
 801bc7e:	6123      	str	r3, [r4, #16]
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	3b01      	subs	r3, #1
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	607b      	str	r3, [r7, #4]
 801bc88:	f340 8084 	ble.w	801bd94 <_scanf_float+0x278>
 801bc8c:	683b      	ldr	r3, [r7, #0]
 801bc8e:	3301      	adds	r3, #1
 801bc90:	603b      	str	r3, [r7, #0]
 801bc92:	e766      	b.n	801bb62 <_scanf_float+0x46>
 801bc94:	eb1a 0f05 	cmn.w	sl, r5
 801bc98:	f47f af70 	bne.w	801bb7c <_scanf_float+0x60>
 801bc9c:	6822      	ldr	r2, [r4, #0]
 801bc9e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801bca2:	6022      	str	r2, [r4, #0]
 801bca4:	f806 3b01 	strb.w	r3, [r6], #1
 801bca8:	e7e4      	b.n	801bc74 <_scanf_float+0x158>
 801bcaa:	6822      	ldr	r2, [r4, #0]
 801bcac:	0610      	lsls	r0, r2, #24
 801bcae:	f57f af65 	bpl.w	801bb7c <_scanf_float+0x60>
 801bcb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801bcb6:	e7f4      	b.n	801bca2 <_scanf_float+0x186>
 801bcb8:	f1ba 0f00 	cmp.w	sl, #0
 801bcbc:	d10e      	bne.n	801bcdc <_scanf_float+0x1c0>
 801bcbe:	f1b9 0f00 	cmp.w	r9, #0
 801bcc2:	d10e      	bne.n	801bce2 <_scanf_float+0x1c6>
 801bcc4:	6822      	ldr	r2, [r4, #0]
 801bcc6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bcca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bcce:	d108      	bne.n	801bce2 <_scanf_float+0x1c6>
 801bcd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bcd4:	6022      	str	r2, [r4, #0]
 801bcd6:	f04f 0a01 	mov.w	sl, #1
 801bcda:	e7e3      	b.n	801bca4 <_scanf_float+0x188>
 801bcdc:	f1ba 0f02 	cmp.w	sl, #2
 801bce0:	d055      	beq.n	801bd8e <_scanf_float+0x272>
 801bce2:	2d01      	cmp	r5, #1
 801bce4:	d002      	beq.n	801bcec <_scanf_float+0x1d0>
 801bce6:	2d04      	cmp	r5, #4
 801bce8:	f47f af48 	bne.w	801bb7c <_scanf_float+0x60>
 801bcec:	3501      	adds	r5, #1
 801bcee:	b2ed      	uxtb	r5, r5
 801bcf0:	e7d8      	b.n	801bca4 <_scanf_float+0x188>
 801bcf2:	f1ba 0f01 	cmp.w	sl, #1
 801bcf6:	f47f af41 	bne.w	801bb7c <_scanf_float+0x60>
 801bcfa:	f04f 0a02 	mov.w	sl, #2
 801bcfe:	e7d1      	b.n	801bca4 <_scanf_float+0x188>
 801bd00:	b97d      	cbnz	r5, 801bd22 <_scanf_float+0x206>
 801bd02:	f1b9 0f00 	cmp.w	r9, #0
 801bd06:	f47f af3c 	bne.w	801bb82 <_scanf_float+0x66>
 801bd0a:	6822      	ldr	r2, [r4, #0]
 801bd0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bd10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bd14:	f47f af39 	bne.w	801bb8a <_scanf_float+0x6e>
 801bd18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bd1c:	6022      	str	r2, [r4, #0]
 801bd1e:	2501      	movs	r5, #1
 801bd20:	e7c0      	b.n	801bca4 <_scanf_float+0x188>
 801bd22:	2d03      	cmp	r5, #3
 801bd24:	d0e2      	beq.n	801bcec <_scanf_float+0x1d0>
 801bd26:	2d05      	cmp	r5, #5
 801bd28:	e7de      	b.n	801bce8 <_scanf_float+0x1cc>
 801bd2a:	2d02      	cmp	r5, #2
 801bd2c:	f47f af26 	bne.w	801bb7c <_scanf_float+0x60>
 801bd30:	2503      	movs	r5, #3
 801bd32:	e7b7      	b.n	801bca4 <_scanf_float+0x188>
 801bd34:	2d06      	cmp	r5, #6
 801bd36:	f47f af21 	bne.w	801bb7c <_scanf_float+0x60>
 801bd3a:	2507      	movs	r5, #7
 801bd3c:	e7b2      	b.n	801bca4 <_scanf_float+0x188>
 801bd3e:	6822      	ldr	r2, [r4, #0]
 801bd40:	0591      	lsls	r1, r2, #22
 801bd42:	f57f af1b 	bpl.w	801bb7c <_scanf_float+0x60>
 801bd46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801bd4a:	6022      	str	r2, [r4, #0]
 801bd4c:	f8cd 9004 	str.w	r9, [sp, #4]
 801bd50:	e7a8      	b.n	801bca4 <_scanf_float+0x188>
 801bd52:	6822      	ldr	r2, [r4, #0]
 801bd54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801bd58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801bd5c:	d006      	beq.n	801bd6c <_scanf_float+0x250>
 801bd5e:	0550      	lsls	r0, r2, #21
 801bd60:	f57f af0c 	bpl.w	801bb7c <_scanf_float+0x60>
 801bd64:	f1b9 0f00 	cmp.w	r9, #0
 801bd68:	f43f af0f 	beq.w	801bb8a <_scanf_float+0x6e>
 801bd6c:	0591      	lsls	r1, r2, #22
 801bd6e:	bf58      	it	pl
 801bd70:	9901      	ldrpl	r1, [sp, #4]
 801bd72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bd76:	bf58      	it	pl
 801bd78:	eba9 0101 	subpl.w	r1, r9, r1
 801bd7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801bd80:	bf58      	it	pl
 801bd82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801bd86:	6022      	str	r2, [r4, #0]
 801bd88:	f04f 0900 	mov.w	r9, #0
 801bd8c:	e78a      	b.n	801bca4 <_scanf_float+0x188>
 801bd8e:	f04f 0a03 	mov.w	sl, #3
 801bd92:	e787      	b.n	801bca4 <_scanf_float+0x188>
 801bd94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801bd98:	4639      	mov	r1, r7
 801bd9a:	4640      	mov	r0, r8
 801bd9c:	4798      	blx	r3
 801bd9e:	2800      	cmp	r0, #0
 801bda0:	f43f aedf 	beq.w	801bb62 <_scanf_float+0x46>
 801bda4:	e6ea      	b.n	801bb7c <_scanf_float+0x60>
 801bda6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bdaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bdae:	463a      	mov	r2, r7
 801bdb0:	4640      	mov	r0, r8
 801bdb2:	4798      	blx	r3
 801bdb4:	6923      	ldr	r3, [r4, #16]
 801bdb6:	3b01      	subs	r3, #1
 801bdb8:	6123      	str	r3, [r4, #16]
 801bdba:	e6ec      	b.n	801bb96 <_scanf_float+0x7a>
 801bdbc:	1e6b      	subs	r3, r5, #1
 801bdbe:	2b06      	cmp	r3, #6
 801bdc0:	d825      	bhi.n	801be0e <_scanf_float+0x2f2>
 801bdc2:	2d02      	cmp	r5, #2
 801bdc4:	d836      	bhi.n	801be34 <_scanf_float+0x318>
 801bdc6:	455e      	cmp	r6, fp
 801bdc8:	f67f aee8 	bls.w	801bb9c <_scanf_float+0x80>
 801bdcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bdd0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bdd4:	463a      	mov	r2, r7
 801bdd6:	4640      	mov	r0, r8
 801bdd8:	4798      	blx	r3
 801bdda:	6923      	ldr	r3, [r4, #16]
 801bddc:	3b01      	subs	r3, #1
 801bdde:	6123      	str	r3, [r4, #16]
 801bde0:	e7f1      	b.n	801bdc6 <_scanf_float+0x2aa>
 801bde2:	9802      	ldr	r0, [sp, #8]
 801bde4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bde8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801bdec:	9002      	str	r0, [sp, #8]
 801bdee:	463a      	mov	r2, r7
 801bdf0:	4640      	mov	r0, r8
 801bdf2:	4798      	blx	r3
 801bdf4:	6923      	ldr	r3, [r4, #16]
 801bdf6:	3b01      	subs	r3, #1
 801bdf8:	6123      	str	r3, [r4, #16]
 801bdfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bdfe:	fa5f fa8a 	uxtb.w	sl, sl
 801be02:	f1ba 0f02 	cmp.w	sl, #2
 801be06:	d1ec      	bne.n	801bde2 <_scanf_float+0x2c6>
 801be08:	3d03      	subs	r5, #3
 801be0a:	b2ed      	uxtb	r5, r5
 801be0c:	1b76      	subs	r6, r6, r5
 801be0e:	6823      	ldr	r3, [r4, #0]
 801be10:	05da      	lsls	r2, r3, #23
 801be12:	d52f      	bpl.n	801be74 <_scanf_float+0x358>
 801be14:	055b      	lsls	r3, r3, #21
 801be16:	d510      	bpl.n	801be3a <_scanf_float+0x31e>
 801be18:	455e      	cmp	r6, fp
 801be1a:	f67f aebf 	bls.w	801bb9c <_scanf_float+0x80>
 801be1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801be22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801be26:	463a      	mov	r2, r7
 801be28:	4640      	mov	r0, r8
 801be2a:	4798      	blx	r3
 801be2c:	6923      	ldr	r3, [r4, #16]
 801be2e:	3b01      	subs	r3, #1
 801be30:	6123      	str	r3, [r4, #16]
 801be32:	e7f1      	b.n	801be18 <_scanf_float+0x2fc>
 801be34:	46aa      	mov	sl, r5
 801be36:	9602      	str	r6, [sp, #8]
 801be38:	e7df      	b.n	801bdfa <_scanf_float+0x2de>
 801be3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801be3e:	6923      	ldr	r3, [r4, #16]
 801be40:	2965      	cmp	r1, #101	; 0x65
 801be42:	f103 33ff 	add.w	r3, r3, #4294967295
 801be46:	f106 35ff 	add.w	r5, r6, #4294967295
 801be4a:	6123      	str	r3, [r4, #16]
 801be4c:	d00c      	beq.n	801be68 <_scanf_float+0x34c>
 801be4e:	2945      	cmp	r1, #69	; 0x45
 801be50:	d00a      	beq.n	801be68 <_scanf_float+0x34c>
 801be52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801be56:	463a      	mov	r2, r7
 801be58:	4640      	mov	r0, r8
 801be5a:	4798      	blx	r3
 801be5c:	6923      	ldr	r3, [r4, #16]
 801be5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801be62:	3b01      	subs	r3, #1
 801be64:	1eb5      	subs	r5, r6, #2
 801be66:	6123      	str	r3, [r4, #16]
 801be68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801be6c:	463a      	mov	r2, r7
 801be6e:	4640      	mov	r0, r8
 801be70:	4798      	blx	r3
 801be72:	462e      	mov	r6, r5
 801be74:	6825      	ldr	r5, [r4, #0]
 801be76:	f015 0510 	ands.w	r5, r5, #16
 801be7a:	d14d      	bne.n	801bf18 <_scanf_float+0x3fc>
 801be7c:	7035      	strb	r5, [r6, #0]
 801be7e:	6823      	ldr	r3, [r4, #0]
 801be80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801be84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801be88:	d11a      	bne.n	801bec0 <_scanf_float+0x3a4>
 801be8a:	9b01      	ldr	r3, [sp, #4]
 801be8c:	454b      	cmp	r3, r9
 801be8e:	eba3 0209 	sub.w	r2, r3, r9
 801be92:	d122      	bne.n	801beda <_scanf_float+0x3be>
 801be94:	2200      	movs	r2, #0
 801be96:	4659      	mov	r1, fp
 801be98:	4640      	mov	r0, r8
 801be9a:	f002 fb9f 	bl	801e5dc <_strtod_r>
 801be9e:	9b03      	ldr	r3, [sp, #12]
 801bea0:	6821      	ldr	r1, [r4, #0]
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	f011 0f02 	tst.w	r1, #2
 801bea8:	f103 0204 	add.w	r2, r3, #4
 801beac:	d020      	beq.n	801bef0 <_scanf_float+0x3d4>
 801beae:	9903      	ldr	r1, [sp, #12]
 801beb0:	600a      	str	r2, [r1, #0]
 801beb2:	681b      	ldr	r3, [r3, #0]
 801beb4:	ed83 0b00 	vstr	d0, [r3]
 801beb8:	68e3      	ldr	r3, [r4, #12]
 801beba:	3301      	adds	r3, #1
 801bebc:	60e3      	str	r3, [r4, #12]
 801bebe:	e66e      	b.n	801bb9e <_scanf_float+0x82>
 801bec0:	9b04      	ldr	r3, [sp, #16]
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	d0e6      	beq.n	801be94 <_scanf_float+0x378>
 801bec6:	9905      	ldr	r1, [sp, #20]
 801bec8:	230a      	movs	r3, #10
 801beca:	462a      	mov	r2, r5
 801becc:	3101      	adds	r1, #1
 801bece:	4640      	mov	r0, r8
 801bed0:	f002 fc0c 	bl	801e6ec <_strtol_r>
 801bed4:	9b04      	ldr	r3, [sp, #16]
 801bed6:	9e05      	ldr	r6, [sp, #20]
 801bed8:	1ac2      	subs	r2, r0, r3
 801beda:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801bede:	429e      	cmp	r6, r3
 801bee0:	bf28      	it	cs
 801bee2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801bee6:	490d      	ldr	r1, [pc, #52]	; (801bf1c <_scanf_float+0x400>)
 801bee8:	4630      	mov	r0, r6
 801beea:	f000 f8dd 	bl	801c0a8 <siprintf>
 801beee:	e7d1      	b.n	801be94 <_scanf_float+0x378>
 801bef0:	f011 0f04 	tst.w	r1, #4
 801bef4:	9903      	ldr	r1, [sp, #12]
 801bef6:	600a      	str	r2, [r1, #0]
 801bef8:	d1db      	bne.n	801beb2 <_scanf_float+0x396>
 801befa:	eeb4 0b40 	vcmp.f64	d0, d0
 801befe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf02:	681e      	ldr	r6, [r3, #0]
 801bf04:	d705      	bvc.n	801bf12 <_scanf_float+0x3f6>
 801bf06:	4806      	ldr	r0, [pc, #24]	; (801bf20 <_scanf_float+0x404>)
 801bf08:	f000 f9f6 	bl	801c2f8 <nanf>
 801bf0c:	ed86 0a00 	vstr	s0, [r6]
 801bf10:	e7d2      	b.n	801beb8 <_scanf_float+0x39c>
 801bf12:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801bf16:	e7f9      	b.n	801bf0c <_scanf_float+0x3f0>
 801bf18:	2500      	movs	r5, #0
 801bf1a:	e640      	b.n	801bb9e <_scanf_float+0x82>
 801bf1c:	080208b6 	.word	0x080208b6
 801bf20:	08020c68 	.word	0x08020c68

0801bf24 <std>:
 801bf24:	2300      	movs	r3, #0
 801bf26:	b510      	push	{r4, lr}
 801bf28:	4604      	mov	r4, r0
 801bf2a:	e9c0 3300 	strd	r3, r3, [r0]
 801bf2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bf32:	6083      	str	r3, [r0, #8]
 801bf34:	8181      	strh	r1, [r0, #12]
 801bf36:	6643      	str	r3, [r0, #100]	; 0x64
 801bf38:	81c2      	strh	r2, [r0, #14]
 801bf3a:	6183      	str	r3, [r0, #24]
 801bf3c:	4619      	mov	r1, r3
 801bf3e:	2208      	movs	r2, #8
 801bf40:	305c      	adds	r0, #92	; 0x5c
 801bf42:	f000 f942 	bl	801c1ca <memset>
 801bf46:	4b0d      	ldr	r3, [pc, #52]	; (801bf7c <std+0x58>)
 801bf48:	6263      	str	r3, [r4, #36]	; 0x24
 801bf4a:	4b0d      	ldr	r3, [pc, #52]	; (801bf80 <std+0x5c>)
 801bf4c:	62a3      	str	r3, [r4, #40]	; 0x28
 801bf4e:	4b0d      	ldr	r3, [pc, #52]	; (801bf84 <std+0x60>)
 801bf50:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bf52:	4b0d      	ldr	r3, [pc, #52]	; (801bf88 <std+0x64>)
 801bf54:	6323      	str	r3, [r4, #48]	; 0x30
 801bf56:	4b0d      	ldr	r3, [pc, #52]	; (801bf8c <std+0x68>)
 801bf58:	6224      	str	r4, [r4, #32]
 801bf5a:	429c      	cmp	r4, r3
 801bf5c:	d006      	beq.n	801bf6c <std+0x48>
 801bf5e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801bf62:	4294      	cmp	r4, r2
 801bf64:	d002      	beq.n	801bf6c <std+0x48>
 801bf66:	33d0      	adds	r3, #208	; 0xd0
 801bf68:	429c      	cmp	r4, r3
 801bf6a:	d105      	bne.n	801bf78 <std+0x54>
 801bf6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bf70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf74:	f000 b9a6 	b.w	801c2c4 <__retarget_lock_init_recursive>
 801bf78:	bd10      	pop	{r4, pc}
 801bf7a:	bf00      	nop
 801bf7c:	0801c141 	.word	0x0801c141
 801bf80:	0801c167 	.word	0x0801c167
 801bf84:	0801c19f 	.word	0x0801c19f
 801bf88:	0801c1c3 	.word	0x0801c1c3
 801bf8c:	24005cb0 	.word	0x24005cb0

0801bf90 <stdio_exit_handler>:
 801bf90:	4a02      	ldr	r2, [pc, #8]	; (801bf9c <stdio_exit_handler+0xc>)
 801bf92:	4903      	ldr	r1, [pc, #12]	; (801bfa0 <stdio_exit_handler+0x10>)
 801bf94:	4803      	ldr	r0, [pc, #12]	; (801bfa4 <stdio_exit_handler+0x14>)
 801bf96:	f000 b869 	b.w	801c06c <_fwalk_sglue>
 801bf9a:	bf00      	nop
 801bf9c:	24000200 	.word	0x24000200
 801bfa0:	0801f0ed 	.word	0x0801f0ed
 801bfa4:	2400020c 	.word	0x2400020c

0801bfa8 <cleanup_stdio>:
 801bfa8:	6841      	ldr	r1, [r0, #4]
 801bfaa:	4b0c      	ldr	r3, [pc, #48]	; (801bfdc <cleanup_stdio+0x34>)
 801bfac:	4299      	cmp	r1, r3
 801bfae:	b510      	push	{r4, lr}
 801bfb0:	4604      	mov	r4, r0
 801bfb2:	d001      	beq.n	801bfb8 <cleanup_stdio+0x10>
 801bfb4:	f003 f89a 	bl	801f0ec <_fflush_r>
 801bfb8:	68a1      	ldr	r1, [r4, #8]
 801bfba:	4b09      	ldr	r3, [pc, #36]	; (801bfe0 <cleanup_stdio+0x38>)
 801bfbc:	4299      	cmp	r1, r3
 801bfbe:	d002      	beq.n	801bfc6 <cleanup_stdio+0x1e>
 801bfc0:	4620      	mov	r0, r4
 801bfc2:	f003 f893 	bl	801f0ec <_fflush_r>
 801bfc6:	68e1      	ldr	r1, [r4, #12]
 801bfc8:	4b06      	ldr	r3, [pc, #24]	; (801bfe4 <cleanup_stdio+0x3c>)
 801bfca:	4299      	cmp	r1, r3
 801bfcc:	d004      	beq.n	801bfd8 <cleanup_stdio+0x30>
 801bfce:	4620      	mov	r0, r4
 801bfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bfd4:	f003 b88a 	b.w	801f0ec <_fflush_r>
 801bfd8:	bd10      	pop	{r4, pc}
 801bfda:	bf00      	nop
 801bfdc:	24005cb0 	.word	0x24005cb0
 801bfe0:	24005d18 	.word	0x24005d18
 801bfe4:	24005d80 	.word	0x24005d80

0801bfe8 <global_stdio_init.part.0>:
 801bfe8:	b510      	push	{r4, lr}
 801bfea:	4b0b      	ldr	r3, [pc, #44]	; (801c018 <global_stdio_init.part.0+0x30>)
 801bfec:	4c0b      	ldr	r4, [pc, #44]	; (801c01c <global_stdio_init.part.0+0x34>)
 801bfee:	4a0c      	ldr	r2, [pc, #48]	; (801c020 <global_stdio_init.part.0+0x38>)
 801bff0:	601a      	str	r2, [r3, #0]
 801bff2:	4620      	mov	r0, r4
 801bff4:	2200      	movs	r2, #0
 801bff6:	2104      	movs	r1, #4
 801bff8:	f7ff ff94 	bl	801bf24 <std>
 801bffc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801c000:	2201      	movs	r2, #1
 801c002:	2109      	movs	r1, #9
 801c004:	f7ff ff8e 	bl	801bf24 <std>
 801c008:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801c00c:	2202      	movs	r2, #2
 801c00e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c012:	2112      	movs	r1, #18
 801c014:	f7ff bf86 	b.w	801bf24 <std>
 801c018:	24005de8 	.word	0x24005de8
 801c01c:	24005cb0 	.word	0x24005cb0
 801c020:	0801bf91 	.word	0x0801bf91

0801c024 <__sfp_lock_acquire>:
 801c024:	4801      	ldr	r0, [pc, #4]	; (801c02c <__sfp_lock_acquire+0x8>)
 801c026:	f000 b94e 	b.w	801c2c6 <__retarget_lock_acquire_recursive>
 801c02a:	bf00      	nop
 801c02c:	24005df1 	.word	0x24005df1

0801c030 <__sfp_lock_release>:
 801c030:	4801      	ldr	r0, [pc, #4]	; (801c038 <__sfp_lock_release+0x8>)
 801c032:	f000 b949 	b.w	801c2c8 <__retarget_lock_release_recursive>
 801c036:	bf00      	nop
 801c038:	24005df1 	.word	0x24005df1

0801c03c <__sinit>:
 801c03c:	b510      	push	{r4, lr}
 801c03e:	4604      	mov	r4, r0
 801c040:	f7ff fff0 	bl	801c024 <__sfp_lock_acquire>
 801c044:	6a23      	ldr	r3, [r4, #32]
 801c046:	b11b      	cbz	r3, 801c050 <__sinit+0x14>
 801c048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c04c:	f7ff bff0 	b.w	801c030 <__sfp_lock_release>
 801c050:	4b04      	ldr	r3, [pc, #16]	; (801c064 <__sinit+0x28>)
 801c052:	6223      	str	r3, [r4, #32]
 801c054:	4b04      	ldr	r3, [pc, #16]	; (801c068 <__sinit+0x2c>)
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d1f5      	bne.n	801c048 <__sinit+0xc>
 801c05c:	f7ff ffc4 	bl	801bfe8 <global_stdio_init.part.0>
 801c060:	e7f2      	b.n	801c048 <__sinit+0xc>
 801c062:	bf00      	nop
 801c064:	0801bfa9 	.word	0x0801bfa9
 801c068:	24005de8 	.word	0x24005de8

0801c06c <_fwalk_sglue>:
 801c06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c070:	4607      	mov	r7, r0
 801c072:	4688      	mov	r8, r1
 801c074:	4614      	mov	r4, r2
 801c076:	2600      	movs	r6, #0
 801c078:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c07c:	f1b9 0901 	subs.w	r9, r9, #1
 801c080:	d505      	bpl.n	801c08e <_fwalk_sglue+0x22>
 801c082:	6824      	ldr	r4, [r4, #0]
 801c084:	2c00      	cmp	r4, #0
 801c086:	d1f7      	bne.n	801c078 <_fwalk_sglue+0xc>
 801c088:	4630      	mov	r0, r6
 801c08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c08e:	89ab      	ldrh	r3, [r5, #12]
 801c090:	2b01      	cmp	r3, #1
 801c092:	d907      	bls.n	801c0a4 <_fwalk_sglue+0x38>
 801c094:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c098:	3301      	adds	r3, #1
 801c09a:	d003      	beq.n	801c0a4 <_fwalk_sglue+0x38>
 801c09c:	4629      	mov	r1, r5
 801c09e:	4638      	mov	r0, r7
 801c0a0:	47c0      	blx	r8
 801c0a2:	4306      	orrs	r6, r0
 801c0a4:	3568      	adds	r5, #104	; 0x68
 801c0a6:	e7e9      	b.n	801c07c <_fwalk_sglue+0x10>

0801c0a8 <siprintf>:
 801c0a8:	b40e      	push	{r1, r2, r3}
 801c0aa:	b500      	push	{lr}
 801c0ac:	b09c      	sub	sp, #112	; 0x70
 801c0ae:	ab1d      	add	r3, sp, #116	; 0x74
 801c0b0:	9002      	str	r0, [sp, #8]
 801c0b2:	9006      	str	r0, [sp, #24]
 801c0b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c0b8:	4809      	ldr	r0, [pc, #36]	; (801c0e0 <siprintf+0x38>)
 801c0ba:	9107      	str	r1, [sp, #28]
 801c0bc:	9104      	str	r1, [sp, #16]
 801c0be:	4909      	ldr	r1, [pc, #36]	; (801c0e4 <siprintf+0x3c>)
 801c0c0:	f853 2b04 	ldr.w	r2, [r3], #4
 801c0c4:	9105      	str	r1, [sp, #20]
 801c0c6:	6800      	ldr	r0, [r0, #0]
 801c0c8:	9301      	str	r3, [sp, #4]
 801c0ca:	a902      	add	r1, sp, #8
 801c0cc:	f002 fb6a 	bl	801e7a4 <_svfiprintf_r>
 801c0d0:	9b02      	ldr	r3, [sp, #8]
 801c0d2:	2200      	movs	r2, #0
 801c0d4:	701a      	strb	r2, [r3, #0]
 801c0d6:	b01c      	add	sp, #112	; 0x70
 801c0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 801c0dc:	b003      	add	sp, #12
 801c0de:	4770      	bx	lr
 801c0e0:	24000258 	.word	0x24000258
 801c0e4:	ffff0208 	.word	0xffff0208

0801c0e8 <siscanf>:
 801c0e8:	b40e      	push	{r1, r2, r3}
 801c0ea:	b510      	push	{r4, lr}
 801c0ec:	b09f      	sub	sp, #124	; 0x7c
 801c0ee:	ac21      	add	r4, sp, #132	; 0x84
 801c0f0:	f44f 7101 	mov.w	r1, #516	; 0x204
 801c0f4:	f854 2b04 	ldr.w	r2, [r4], #4
 801c0f8:	9201      	str	r2, [sp, #4]
 801c0fa:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c0fe:	9004      	str	r0, [sp, #16]
 801c100:	9008      	str	r0, [sp, #32]
 801c102:	f7e4 f965 	bl	80003d0 <strlen>
 801c106:	4b0c      	ldr	r3, [pc, #48]	; (801c138 <siscanf+0x50>)
 801c108:	9005      	str	r0, [sp, #20]
 801c10a:	9009      	str	r0, [sp, #36]	; 0x24
 801c10c:	930d      	str	r3, [sp, #52]	; 0x34
 801c10e:	480b      	ldr	r0, [pc, #44]	; (801c13c <siscanf+0x54>)
 801c110:	9a01      	ldr	r2, [sp, #4]
 801c112:	6800      	ldr	r0, [r0, #0]
 801c114:	9403      	str	r4, [sp, #12]
 801c116:	2300      	movs	r3, #0
 801c118:	9311      	str	r3, [sp, #68]	; 0x44
 801c11a:	9316      	str	r3, [sp, #88]	; 0x58
 801c11c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c120:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c124:	a904      	add	r1, sp, #16
 801c126:	4623      	mov	r3, r4
 801c128:	f002 fc94 	bl	801ea54 <__ssvfiscanf_r>
 801c12c:	b01f      	add	sp, #124	; 0x7c
 801c12e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c132:	b003      	add	sp, #12
 801c134:	4770      	bx	lr
 801c136:	bf00      	nop
 801c138:	0801c163 	.word	0x0801c163
 801c13c:	24000258 	.word	0x24000258

0801c140 <__sread>:
 801c140:	b510      	push	{r4, lr}
 801c142:	460c      	mov	r4, r1
 801c144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c148:	f000 f86e 	bl	801c228 <_read_r>
 801c14c:	2800      	cmp	r0, #0
 801c14e:	bfab      	itete	ge
 801c150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c152:	89a3      	ldrhlt	r3, [r4, #12]
 801c154:	181b      	addge	r3, r3, r0
 801c156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c15a:	bfac      	ite	ge
 801c15c:	6563      	strge	r3, [r4, #84]	; 0x54
 801c15e:	81a3      	strhlt	r3, [r4, #12]
 801c160:	bd10      	pop	{r4, pc}

0801c162 <__seofread>:
 801c162:	2000      	movs	r0, #0
 801c164:	4770      	bx	lr

0801c166 <__swrite>:
 801c166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c16a:	461f      	mov	r7, r3
 801c16c:	898b      	ldrh	r3, [r1, #12]
 801c16e:	05db      	lsls	r3, r3, #23
 801c170:	4605      	mov	r5, r0
 801c172:	460c      	mov	r4, r1
 801c174:	4616      	mov	r6, r2
 801c176:	d505      	bpl.n	801c184 <__swrite+0x1e>
 801c178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c17c:	2302      	movs	r3, #2
 801c17e:	2200      	movs	r2, #0
 801c180:	f000 f840 	bl	801c204 <_lseek_r>
 801c184:	89a3      	ldrh	r3, [r4, #12]
 801c186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c18a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c18e:	81a3      	strh	r3, [r4, #12]
 801c190:	4632      	mov	r2, r6
 801c192:	463b      	mov	r3, r7
 801c194:	4628      	mov	r0, r5
 801c196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c19a:	f000 b857 	b.w	801c24c <_write_r>

0801c19e <__sseek>:
 801c19e:	b510      	push	{r4, lr}
 801c1a0:	460c      	mov	r4, r1
 801c1a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c1a6:	f000 f82d 	bl	801c204 <_lseek_r>
 801c1aa:	1c43      	adds	r3, r0, #1
 801c1ac:	89a3      	ldrh	r3, [r4, #12]
 801c1ae:	bf15      	itete	ne
 801c1b0:	6560      	strne	r0, [r4, #84]	; 0x54
 801c1b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c1b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c1ba:	81a3      	strheq	r3, [r4, #12]
 801c1bc:	bf18      	it	ne
 801c1be:	81a3      	strhne	r3, [r4, #12]
 801c1c0:	bd10      	pop	{r4, pc}

0801c1c2 <__sclose>:
 801c1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c1c6:	f000 b80d 	b.w	801c1e4 <_close_r>

0801c1ca <memset>:
 801c1ca:	4402      	add	r2, r0
 801c1cc:	4603      	mov	r3, r0
 801c1ce:	4293      	cmp	r3, r2
 801c1d0:	d100      	bne.n	801c1d4 <memset+0xa>
 801c1d2:	4770      	bx	lr
 801c1d4:	f803 1b01 	strb.w	r1, [r3], #1
 801c1d8:	e7f9      	b.n	801c1ce <memset+0x4>
	...

0801c1dc <_localeconv_r>:
 801c1dc:	4800      	ldr	r0, [pc, #0]	; (801c1e0 <_localeconv_r+0x4>)
 801c1de:	4770      	bx	lr
 801c1e0:	2400034c 	.word	0x2400034c

0801c1e4 <_close_r>:
 801c1e4:	b538      	push	{r3, r4, r5, lr}
 801c1e6:	4d06      	ldr	r5, [pc, #24]	; (801c200 <_close_r+0x1c>)
 801c1e8:	2300      	movs	r3, #0
 801c1ea:	4604      	mov	r4, r0
 801c1ec:	4608      	mov	r0, r1
 801c1ee:	602b      	str	r3, [r5, #0]
 801c1f0:	f7e7 fe69 	bl	8003ec6 <_close>
 801c1f4:	1c43      	adds	r3, r0, #1
 801c1f6:	d102      	bne.n	801c1fe <_close_r+0x1a>
 801c1f8:	682b      	ldr	r3, [r5, #0]
 801c1fa:	b103      	cbz	r3, 801c1fe <_close_r+0x1a>
 801c1fc:	6023      	str	r3, [r4, #0]
 801c1fe:	bd38      	pop	{r3, r4, r5, pc}
 801c200:	24005dec 	.word	0x24005dec

0801c204 <_lseek_r>:
 801c204:	b538      	push	{r3, r4, r5, lr}
 801c206:	4d07      	ldr	r5, [pc, #28]	; (801c224 <_lseek_r+0x20>)
 801c208:	4604      	mov	r4, r0
 801c20a:	4608      	mov	r0, r1
 801c20c:	4611      	mov	r1, r2
 801c20e:	2200      	movs	r2, #0
 801c210:	602a      	str	r2, [r5, #0]
 801c212:	461a      	mov	r2, r3
 801c214:	f7e7 fe7e 	bl	8003f14 <_lseek>
 801c218:	1c43      	adds	r3, r0, #1
 801c21a:	d102      	bne.n	801c222 <_lseek_r+0x1e>
 801c21c:	682b      	ldr	r3, [r5, #0]
 801c21e:	b103      	cbz	r3, 801c222 <_lseek_r+0x1e>
 801c220:	6023      	str	r3, [r4, #0]
 801c222:	bd38      	pop	{r3, r4, r5, pc}
 801c224:	24005dec 	.word	0x24005dec

0801c228 <_read_r>:
 801c228:	b538      	push	{r3, r4, r5, lr}
 801c22a:	4d07      	ldr	r5, [pc, #28]	; (801c248 <_read_r+0x20>)
 801c22c:	4604      	mov	r4, r0
 801c22e:	4608      	mov	r0, r1
 801c230:	4611      	mov	r1, r2
 801c232:	2200      	movs	r2, #0
 801c234:	602a      	str	r2, [r5, #0]
 801c236:	461a      	mov	r2, r3
 801c238:	f7e7 fe0c 	bl	8003e54 <_read>
 801c23c:	1c43      	adds	r3, r0, #1
 801c23e:	d102      	bne.n	801c246 <_read_r+0x1e>
 801c240:	682b      	ldr	r3, [r5, #0]
 801c242:	b103      	cbz	r3, 801c246 <_read_r+0x1e>
 801c244:	6023      	str	r3, [r4, #0]
 801c246:	bd38      	pop	{r3, r4, r5, pc}
 801c248:	24005dec 	.word	0x24005dec

0801c24c <_write_r>:
 801c24c:	b538      	push	{r3, r4, r5, lr}
 801c24e:	4d07      	ldr	r5, [pc, #28]	; (801c26c <_write_r+0x20>)
 801c250:	4604      	mov	r4, r0
 801c252:	4608      	mov	r0, r1
 801c254:	4611      	mov	r1, r2
 801c256:	2200      	movs	r2, #0
 801c258:	602a      	str	r2, [r5, #0]
 801c25a:	461a      	mov	r2, r3
 801c25c:	f7e7 fe17 	bl	8003e8e <_write>
 801c260:	1c43      	adds	r3, r0, #1
 801c262:	d102      	bne.n	801c26a <_write_r+0x1e>
 801c264:	682b      	ldr	r3, [r5, #0]
 801c266:	b103      	cbz	r3, 801c26a <_write_r+0x1e>
 801c268:	6023      	str	r3, [r4, #0]
 801c26a:	bd38      	pop	{r3, r4, r5, pc}
 801c26c:	24005dec 	.word	0x24005dec

0801c270 <__errno>:
 801c270:	4b01      	ldr	r3, [pc, #4]	; (801c278 <__errno+0x8>)
 801c272:	6818      	ldr	r0, [r3, #0]
 801c274:	4770      	bx	lr
 801c276:	bf00      	nop
 801c278:	24000258 	.word	0x24000258

0801c27c <__libc_init_array>:
 801c27c:	b570      	push	{r4, r5, r6, lr}
 801c27e:	4d0d      	ldr	r5, [pc, #52]	; (801c2b4 <__libc_init_array+0x38>)
 801c280:	4c0d      	ldr	r4, [pc, #52]	; (801c2b8 <__libc_init_array+0x3c>)
 801c282:	1b64      	subs	r4, r4, r5
 801c284:	10a4      	asrs	r4, r4, #2
 801c286:	2600      	movs	r6, #0
 801c288:	42a6      	cmp	r6, r4
 801c28a:	d109      	bne.n	801c2a0 <__libc_init_array+0x24>
 801c28c:	4d0b      	ldr	r5, [pc, #44]	; (801c2bc <__libc_init_array+0x40>)
 801c28e:	4c0c      	ldr	r4, [pc, #48]	; (801c2c0 <__libc_init_array+0x44>)
 801c290:	f003 ff1e 	bl	80200d0 <_init>
 801c294:	1b64      	subs	r4, r4, r5
 801c296:	10a4      	asrs	r4, r4, #2
 801c298:	2600      	movs	r6, #0
 801c29a:	42a6      	cmp	r6, r4
 801c29c:	d105      	bne.n	801c2aa <__libc_init_array+0x2e>
 801c29e:	bd70      	pop	{r4, r5, r6, pc}
 801c2a0:	f855 3b04 	ldr.w	r3, [r5], #4
 801c2a4:	4798      	blx	r3
 801c2a6:	3601      	adds	r6, #1
 801c2a8:	e7ee      	b.n	801c288 <__libc_init_array+0xc>
 801c2aa:	f855 3b04 	ldr.w	r3, [r5], #4
 801c2ae:	4798      	blx	r3
 801c2b0:	3601      	adds	r6, #1
 801c2b2:	e7f2      	b.n	801c29a <__libc_init_array+0x1e>
 801c2b4:	08020cd4 	.word	0x08020cd4
 801c2b8:	08020cd4 	.word	0x08020cd4
 801c2bc:	08020cd4 	.word	0x08020cd4
 801c2c0:	08020cd8 	.word	0x08020cd8

0801c2c4 <__retarget_lock_init_recursive>:
 801c2c4:	4770      	bx	lr

0801c2c6 <__retarget_lock_acquire_recursive>:
 801c2c6:	4770      	bx	lr

0801c2c8 <__retarget_lock_release_recursive>:
 801c2c8:	4770      	bx	lr

0801c2ca <strcpy>:
 801c2ca:	4603      	mov	r3, r0
 801c2cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c2d0:	f803 2b01 	strb.w	r2, [r3], #1
 801c2d4:	2a00      	cmp	r2, #0
 801c2d6:	d1f9      	bne.n	801c2cc <strcpy+0x2>
 801c2d8:	4770      	bx	lr

0801c2da <memcpy>:
 801c2da:	440a      	add	r2, r1
 801c2dc:	4291      	cmp	r1, r2
 801c2de:	f100 33ff 	add.w	r3, r0, #4294967295
 801c2e2:	d100      	bne.n	801c2e6 <memcpy+0xc>
 801c2e4:	4770      	bx	lr
 801c2e6:	b510      	push	{r4, lr}
 801c2e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c2ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c2f0:	4291      	cmp	r1, r2
 801c2f2:	d1f9      	bne.n	801c2e8 <memcpy+0xe>
 801c2f4:	bd10      	pop	{r4, pc}
	...

0801c2f8 <nanf>:
 801c2f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c300 <nanf+0x8>
 801c2fc:	4770      	bx	lr
 801c2fe:	bf00      	nop
 801c300:	7fc00000 	.word	0x7fc00000

0801c304 <quorem>:
 801c304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c308:	6903      	ldr	r3, [r0, #16]
 801c30a:	690c      	ldr	r4, [r1, #16]
 801c30c:	42a3      	cmp	r3, r4
 801c30e:	4607      	mov	r7, r0
 801c310:	db7e      	blt.n	801c410 <quorem+0x10c>
 801c312:	3c01      	subs	r4, #1
 801c314:	f101 0814 	add.w	r8, r1, #20
 801c318:	f100 0514 	add.w	r5, r0, #20
 801c31c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c320:	9301      	str	r3, [sp, #4]
 801c322:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c326:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c32a:	3301      	adds	r3, #1
 801c32c:	429a      	cmp	r2, r3
 801c32e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c332:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c336:	fbb2 f6f3 	udiv	r6, r2, r3
 801c33a:	d331      	bcc.n	801c3a0 <quorem+0x9c>
 801c33c:	f04f 0e00 	mov.w	lr, #0
 801c340:	4640      	mov	r0, r8
 801c342:	46ac      	mov	ip, r5
 801c344:	46f2      	mov	sl, lr
 801c346:	f850 2b04 	ldr.w	r2, [r0], #4
 801c34a:	b293      	uxth	r3, r2
 801c34c:	fb06 e303 	mla	r3, r6, r3, lr
 801c350:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c354:	0c1a      	lsrs	r2, r3, #16
 801c356:	b29b      	uxth	r3, r3
 801c358:	ebaa 0303 	sub.w	r3, sl, r3
 801c35c:	f8dc a000 	ldr.w	sl, [ip]
 801c360:	fa13 f38a 	uxtah	r3, r3, sl
 801c364:	fb06 220e 	mla	r2, r6, lr, r2
 801c368:	9300      	str	r3, [sp, #0]
 801c36a:	9b00      	ldr	r3, [sp, #0]
 801c36c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c370:	b292      	uxth	r2, r2
 801c372:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801c376:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c37a:	f8bd 3000 	ldrh.w	r3, [sp]
 801c37e:	4581      	cmp	r9, r0
 801c380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c384:	f84c 3b04 	str.w	r3, [ip], #4
 801c388:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c38c:	d2db      	bcs.n	801c346 <quorem+0x42>
 801c38e:	f855 300b 	ldr.w	r3, [r5, fp]
 801c392:	b92b      	cbnz	r3, 801c3a0 <quorem+0x9c>
 801c394:	9b01      	ldr	r3, [sp, #4]
 801c396:	3b04      	subs	r3, #4
 801c398:	429d      	cmp	r5, r3
 801c39a:	461a      	mov	r2, r3
 801c39c:	d32c      	bcc.n	801c3f8 <quorem+0xf4>
 801c39e:	613c      	str	r4, [r7, #16]
 801c3a0:	4638      	mov	r0, r7
 801c3a2:	f001 f96b 	bl	801d67c <__mcmp>
 801c3a6:	2800      	cmp	r0, #0
 801c3a8:	db22      	blt.n	801c3f0 <quorem+0xec>
 801c3aa:	3601      	adds	r6, #1
 801c3ac:	4629      	mov	r1, r5
 801c3ae:	2000      	movs	r0, #0
 801c3b0:	f858 2b04 	ldr.w	r2, [r8], #4
 801c3b4:	f8d1 c000 	ldr.w	ip, [r1]
 801c3b8:	b293      	uxth	r3, r2
 801c3ba:	1ac3      	subs	r3, r0, r3
 801c3bc:	0c12      	lsrs	r2, r2, #16
 801c3be:	fa13 f38c 	uxtah	r3, r3, ip
 801c3c2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801c3c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c3ca:	b29b      	uxth	r3, r3
 801c3cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c3d0:	45c1      	cmp	r9, r8
 801c3d2:	f841 3b04 	str.w	r3, [r1], #4
 801c3d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c3da:	d2e9      	bcs.n	801c3b0 <quorem+0xac>
 801c3dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c3e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c3e4:	b922      	cbnz	r2, 801c3f0 <quorem+0xec>
 801c3e6:	3b04      	subs	r3, #4
 801c3e8:	429d      	cmp	r5, r3
 801c3ea:	461a      	mov	r2, r3
 801c3ec:	d30a      	bcc.n	801c404 <quorem+0x100>
 801c3ee:	613c      	str	r4, [r7, #16]
 801c3f0:	4630      	mov	r0, r6
 801c3f2:	b003      	add	sp, #12
 801c3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3f8:	6812      	ldr	r2, [r2, #0]
 801c3fa:	3b04      	subs	r3, #4
 801c3fc:	2a00      	cmp	r2, #0
 801c3fe:	d1ce      	bne.n	801c39e <quorem+0x9a>
 801c400:	3c01      	subs	r4, #1
 801c402:	e7c9      	b.n	801c398 <quorem+0x94>
 801c404:	6812      	ldr	r2, [r2, #0]
 801c406:	3b04      	subs	r3, #4
 801c408:	2a00      	cmp	r2, #0
 801c40a:	d1f0      	bne.n	801c3ee <quorem+0xea>
 801c40c:	3c01      	subs	r4, #1
 801c40e:	e7eb      	b.n	801c3e8 <quorem+0xe4>
 801c410:	2000      	movs	r0, #0
 801c412:	e7ee      	b.n	801c3f2 <quorem+0xee>
 801c414:	0000      	movs	r0, r0
	...

0801c418 <_dtoa_r>:
 801c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c41c:	ed2d 8b02 	vpush	{d8}
 801c420:	69c5      	ldr	r5, [r0, #28]
 801c422:	b091      	sub	sp, #68	; 0x44
 801c424:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c428:	ec59 8b10 	vmov	r8, r9, d0
 801c42c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801c42e:	9106      	str	r1, [sp, #24]
 801c430:	4606      	mov	r6, r0
 801c432:	9208      	str	r2, [sp, #32]
 801c434:	930c      	str	r3, [sp, #48]	; 0x30
 801c436:	b975      	cbnz	r5, 801c456 <_dtoa_r+0x3e>
 801c438:	2010      	movs	r0, #16
 801c43a:	f000 fda5 	bl	801cf88 <malloc>
 801c43e:	4602      	mov	r2, r0
 801c440:	61f0      	str	r0, [r6, #28]
 801c442:	b920      	cbnz	r0, 801c44e <_dtoa_r+0x36>
 801c444:	4ba6      	ldr	r3, [pc, #664]	; (801c6e0 <_dtoa_r+0x2c8>)
 801c446:	21ef      	movs	r1, #239	; 0xef
 801c448:	48a6      	ldr	r0, [pc, #664]	; (801c6e4 <_dtoa_r+0x2cc>)
 801c44a:	f002 ff31 	bl	801f2b0 <__assert_func>
 801c44e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c452:	6005      	str	r5, [r0, #0]
 801c454:	60c5      	str	r5, [r0, #12]
 801c456:	69f3      	ldr	r3, [r6, #28]
 801c458:	6819      	ldr	r1, [r3, #0]
 801c45a:	b151      	cbz	r1, 801c472 <_dtoa_r+0x5a>
 801c45c:	685a      	ldr	r2, [r3, #4]
 801c45e:	604a      	str	r2, [r1, #4]
 801c460:	2301      	movs	r3, #1
 801c462:	4093      	lsls	r3, r2
 801c464:	608b      	str	r3, [r1, #8]
 801c466:	4630      	mov	r0, r6
 801c468:	f000 fe82 	bl	801d170 <_Bfree>
 801c46c:	69f3      	ldr	r3, [r6, #28]
 801c46e:	2200      	movs	r2, #0
 801c470:	601a      	str	r2, [r3, #0]
 801c472:	f1b9 0300 	subs.w	r3, r9, #0
 801c476:	bfbb      	ittet	lt
 801c478:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c47c:	9303      	strlt	r3, [sp, #12]
 801c47e:	2300      	movge	r3, #0
 801c480:	2201      	movlt	r2, #1
 801c482:	bfac      	ite	ge
 801c484:	6023      	strge	r3, [r4, #0]
 801c486:	6022      	strlt	r2, [r4, #0]
 801c488:	4b97      	ldr	r3, [pc, #604]	; (801c6e8 <_dtoa_r+0x2d0>)
 801c48a:	9c03      	ldr	r4, [sp, #12]
 801c48c:	43a3      	bics	r3, r4
 801c48e:	d11c      	bne.n	801c4ca <_dtoa_r+0xb2>
 801c490:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c492:	f242 730f 	movw	r3, #9999	; 0x270f
 801c496:	6013      	str	r3, [r2, #0]
 801c498:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801c49c:	ea53 0308 	orrs.w	r3, r3, r8
 801c4a0:	f000 84fb 	beq.w	801ce9a <_dtoa_r+0xa82>
 801c4a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c4a6:	b963      	cbnz	r3, 801c4c2 <_dtoa_r+0xaa>
 801c4a8:	4b90      	ldr	r3, [pc, #576]	; (801c6ec <_dtoa_r+0x2d4>)
 801c4aa:	e020      	b.n	801c4ee <_dtoa_r+0xd6>
 801c4ac:	4b90      	ldr	r3, [pc, #576]	; (801c6f0 <_dtoa_r+0x2d8>)
 801c4ae:	9301      	str	r3, [sp, #4]
 801c4b0:	3308      	adds	r3, #8
 801c4b2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c4b4:	6013      	str	r3, [r2, #0]
 801c4b6:	9801      	ldr	r0, [sp, #4]
 801c4b8:	b011      	add	sp, #68	; 0x44
 801c4ba:	ecbd 8b02 	vpop	{d8}
 801c4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4c2:	4b8a      	ldr	r3, [pc, #552]	; (801c6ec <_dtoa_r+0x2d4>)
 801c4c4:	9301      	str	r3, [sp, #4]
 801c4c6:	3303      	adds	r3, #3
 801c4c8:	e7f3      	b.n	801c4b2 <_dtoa_r+0x9a>
 801c4ca:	ed9d 8b02 	vldr	d8, [sp, #8]
 801c4ce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801c4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4d6:	d10c      	bne.n	801c4f2 <_dtoa_r+0xda>
 801c4d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c4da:	2301      	movs	r3, #1
 801c4dc:	6013      	str	r3, [r2, #0]
 801c4de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	f000 84d7 	beq.w	801ce94 <_dtoa_r+0xa7c>
 801c4e6:	4b83      	ldr	r3, [pc, #524]	; (801c6f4 <_dtoa_r+0x2dc>)
 801c4e8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c4ea:	6013      	str	r3, [r2, #0]
 801c4ec:	3b01      	subs	r3, #1
 801c4ee:	9301      	str	r3, [sp, #4]
 801c4f0:	e7e1      	b.n	801c4b6 <_dtoa_r+0x9e>
 801c4f2:	aa0e      	add	r2, sp, #56	; 0x38
 801c4f4:	a90f      	add	r1, sp, #60	; 0x3c
 801c4f6:	4630      	mov	r0, r6
 801c4f8:	eeb0 0b48 	vmov.f64	d0, d8
 801c4fc:	f001 f9d4 	bl	801d8a8 <__d2b>
 801c500:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801c504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c506:	4605      	mov	r5, r0
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d046      	beq.n	801c59a <_dtoa_r+0x182>
 801c50c:	eeb0 7b48 	vmov.f64	d7, d8
 801c510:	ee18 1a90 	vmov	r1, s17
 801c514:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801c518:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801c51c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801c520:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c524:	2000      	movs	r0, #0
 801c526:	ee07 1a90 	vmov	s15, r1
 801c52a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801c52e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801c6c8 <_dtoa_r+0x2b0>
 801c532:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c536:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801c6d0 <_dtoa_r+0x2b8>
 801c53a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c53e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801c6d8 <_dtoa_r+0x2c0>
 801c542:	ee07 3a90 	vmov	s15, r3
 801c546:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801c54a:	eeb0 7b46 	vmov.f64	d7, d6
 801c54e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801c552:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801c556:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801c55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c55e:	ee16 ba90 	vmov	fp, s13
 801c562:	9009      	str	r0, [sp, #36]	; 0x24
 801c564:	d508      	bpl.n	801c578 <_dtoa_r+0x160>
 801c566:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801c56a:	eeb4 6b47 	vcmp.f64	d6, d7
 801c56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c572:	bf18      	it	ne
 801c574:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801c578:	f1bb 0f16 	cmp.w	fp, #22
 801c57c:	d82b      	bhi.n	801c5d6 <_dtoa_r+0x1be>
 801c57e:	495e      	ldr	r1, [pc, #376]	; (801c6f8 <_dtoa_r+0x2e0>)
 801c580:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801c584:	ed91 7b00 	vldr	d7, [r1]
 801c588:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801c58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c590:	d501      	bpl.n	801c596 <_dtoa_r+0x17e>
 801c592:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c596:	2100      	movs	r1, #0
 801c598:	e01e      	b.n	801c5d8 <_dtoa_r+0x1c0>
 801c59a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c59c:	4413      	add	r3, r2
 801c59e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801c5a2:	2920      	cmp	r1, #32
 801c5a4:	bfc1      	itttt	gt
 801c5a6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801c5aa:	408c      	lslgt	r4, r1
 801c5ac:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801c5b0:	fa28 f101 	lsrgt.w	r1, r8, r1
 801c5b4:	bfd6      	itet	le
 801c5b6:	f1c1 0120 	rsble	r1, r1, #32
 801c5ba:	4321      	orrgt	r1, r4
 801c5bc:	fa08 f101 	lslle.w	r1, r8, r1
 801c5c0:	ee07 1a90 	vmov	s15, r1
 801c5c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c5c8:	3b01      	subs	r3, #1
 801c5ca:	ee17 1a90 	vmov	r1, s15
 801c5ce:	2001      	movs	r0, #1
 801c5d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801c5d4:	e7a7      	b.n	801c526 <_dtoa_r+0x10e>
 801c5d6:	2101      	movs	r1, #1
 801c5d8:	1ad2      	subs	r2, r2, r3
 801c5da:	1e53      	subs	r3, r2, #1
 801c5dc:	9305      	str	r3, [sp, #20]
 801c5de:	bf45      	ittet	mi
 801c5e0:	f1c2 0301 	rsbmi	r3, r2, #1
 801c5e4:	9304      	strmi	r3, [sp, #16]
 801c5e6:	2300      	movpl	r3, #0
 801c5e8:	2300      	movmi	r3, #0
 801c5ea:	bf4c      	ite	mi
 801c5ec:	9305      	strmi	r3, [sp, #20]
 801c5ee:	9304      	strpl	r3, [sp, #16]
 801c5f0:	f1bb 0f00 	cmp.w	fp, #0
 801c5f4:	910b      	str	r1, [sp, #44]	; 0x2c
 801c5f6:	db18      	blt.n	801c62a <_dtoa_r+0x212>
 801c5f8:	9b05      	ldr	r3, [sp, #20]
 801c5fa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801c5fe:	445b      	add	r3, fp
 801c600:	9305      	str	r3, [sp, #20]
 801c602:	2300      	movs	r3, #0
 801c604:	9a06      	ldr	r2, [sp, #24]
 801c606:	2a09      	cmp	r2, #9
 801c608:	d848      	bhi.n	801c69c <_dtoa_r+0x284>
 801c60a:	2a05      	cmp	r2, #5
 801c60c:	bfc4      	itt	gt
 801c60e:	3a04      	subgt	r2, #4
 801c610:	9206      	strgt	r2, [sp, #24]
 801c612:	9a06      	ldr	r2, [sp, #24]
 801c614:	f1a2 0202 	sub.w	r2, r2, #2
 801c618:	bfcc      	ite	gt
 801c61a:	2400      	movgt	r4, #0
 801c61c:	2401      	movle	r4, #1
 801c61e:	2a03      	cmp	r2, #3
 801c620:	d847      	bhi.n	801c6b2 <_dtoa_r+0x29a>
 801c622:	e8df f002 	tbb	[pc, r2]
 801c626:	2d0b      	.short	0x2d0b
 801c628:	392b      	.short	0x392b
 801c62a:	9b04      	ldr	r3, [sp, #16]
 801c62c:	2200      	movs	r2, #0
 801c62e:	eba3 030b 	sub.w	r3, r3, fp
 801c632:	9304      	str	r3, [sp, #16]
 801c634:	920a      	str	r2, [sp, #40]	; 0x28
 801c636:	f1cb 0300 	rsb	r3, fp, #0
 801c63a:	e7e3      	b.n	801c604 <_dtoa_r+0x1ec>
 801c63c:	2200      	movs	r2, #0
 801c63e:	9207      	str	r2, [sp, #28]
 801c640:	9a08      	ldr	r2, [sp, #32]
 801c642:	2a00      	cmp	r2, #0
 801c644:	dc38      	bgt.n	801c6b8 <_dtoa_r+0x2a0>
 801c646:	f04f 0a01 	mov.w	sl, #1
 801c64a:	46d1      	mov	r9, sl
 801c64c:	4652      	mov	r2, sl
 801c64e:	f8cd a020 	str.w	sl, [sp, #32]
 801c652:	69f7      	ldr	r7, [r6, #28]
 801c654:	2100      	movs	r1, #0
 801c656:	2004      	movs	r0, #4
 801c658:	f100 0c14 	add.w	ip, r0, #20
 801c65c:	4594      	cmp	ip, r2
 801c65e:	d930      	bls.n	801c6c2 <_dtoa_r+0x2aa>
 801c660:	6079      	str	r1, [r7, #4]
 801c662:	4630      	mov	r0, r6
 801c664:	930d      	str	r3, [sp, #52]	; 0x34
 801c666:	f000 fd43 	bl	801d0f0 <_Balloc>
 801c66a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c66c:	9001      	str	r0, [sp, #4]
 801c66e:	4602      	mov	r2, r0
 801c670:	2800      	cmp	r0, #0
 801c672:	d145      	bne.n	801c700 <_dtoa_r+0x2e8>
 801c674:	4b21      	ldr	r3, [pc, #132]	; (801c6fc <_dtoa_r+0x2e4>)
 801c676:	f240 11af 	movw	r1, #431	; 0x1af
 801c67a:	e6e5      	b.n	801c448 <_dtoa_r+0x30>
 801c67c:	2201      	movs	r2, #1
 801c67e:	e7de      	b.n	801c63e <_dtoa_r+0x226>
 801c680:	2200      	movs	r2, #0
 801c682:	9207      	str	r2, [sp, #28]
 801c684:	9a08      	ldr	r2, [sp, #32]
 801c686:	eb0b 0a02 	add.w	sl, fp, r2
 801c68a:	f10a 0901 	add.w	r9, sl, #1
 801c68e:	464a      	mov	r2, r9
 801c690:	2a01      	cmp	r2, #1
 801c692:	bfb8      	it	lt
 801c694:	2201      	movlt	r2, #1
 801c696:	e7dc      	b.n	801c652 <_dtoa_r+0x23a>
 801c698:	2201      	movs	r2, #1
 801c69a:	e7f2      	b.n	801c682 <_dtoa_r+0x26a>
 801c69c:	2401      	movs	r4, #1
 801c69e:	2200      	movs	r2, #0
 801c6a0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801c6a4:	f04f 3aff 	mov.w	sl, #4294967295
 801c6a8:	2100      	movs	r1, #0
 801c6aa:	46d1      	mov	r9, sl
 801c6ac:	2212      	movs	r2, #18
 801c6ae:	9108      	str	r1, [sp, #32]
 801c6b0:	e7cf      	b.n	801c652 <_dtoa_r+0x23a>
 801c6b2:	2201      	movs	r2, #1
 801c6b4:	9207      	str	r2, [sp, #28]
 801c6b6:	e7f5      	b.n	801c6a4 <_dtoa_r+0x28c>
 801c6b8:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c6bc:	46d1      	mov	r9, sl
 801c6be:	4652      	mov	r2, sl
 801c6c0:	e7c7      	b.n	801c652 <_dtoa_r+0x23a>
 801c6c2:	3101      	adds	r1, #1
 801c6c4:	0040      	lsls	r0, r0, #1
 801c6c6:	e7c7      	b.n	801c658 <_dtoa_r+0x240>
 801c6c8:	636f4361 	.word	0x636f4361
 801c6cc:	3fd287a7 	.word	0x3fd287a7
 801c6d0:	8b60c8b3 	.word	0x8b60c8b3
 801c6d4:	3fc68a28 	.word	0x3fc68a28
 801c6d8:	509f79fb 	.word	0x509f79fb
 801c6dc:	3fd34413 	.word	0x3fd34413
 801c6e0:	080208c8 	.word	0x080208c8
 801c6e4:	080208df 	.word	0x080208df
 801c6e8:	7ff00000 	.word	0x7ff00000
 801c6ec:	080208c4 	.word	0x080208c4
 801c6f0:	080208bb 	.word	0x080208bb
 801c6f4:	08020c21 	.word	0x08020c21
 801c6f8:	080209d0 	.word	0x080209d0
 801c6fc:	08020937 	.word	0x08020937
 801c700:	69f2      	ldr	r2, [r6, #28]
 801c702:	9901      	ldr	r1, [sp, #4]
 801c704:	6011      	str	r1, [r2, #0]
 801c706:	f1b9 0f0e 	cmp.w	r9, #14
 801c70a:	d86c      	bhi.n	801c7e6 <_dtoa_r+0x3ce>
 801c70c:	2c00      	cmp	r4, #0
 801c70e:	d06a      	beq.n	801c7e6 <_dtoa_r+0x3ce>
 801c710:	f1bb 0f00 	cmp.w	fp, #0
 801c714:	f340 80a0 	ble.w	801c858 <_dtoa_r+0x440>
 801c718:	4ac1      	ldr	r2, [pc, #772]	; (801ca20 <_dtoa_r+0x608>)
 801c71a:	f00b 010f 	and.w	r1, fp, #15
 801c71e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801c722:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801c726:	ed92 7b00 	vldr	d7, [r2]
 801c72a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801c72e:	f000 8087 	beq.w	801c840 <_dtoa_r+0x428>
 801c732:	49bc      	ldr	r1, [pc, #752]	; (801ca24 <_dtoa_r+0x60c>)
 801c734:	ed91 6b08 	vldr	d6, [r1, #32]
 801c738:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801c73c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c740:	f002 020f 	and.w	r2, r2, #15
 801c744:	2103      	movs	r1, #3
 801c746:	48b7      	ldr	r0, [pc, #732]	; (801ca24 <_dtoa_r+0x60c>)
 801c748:	2a00      	cmp	r2, #0
 801c74a:	d17b      	bne.n	801c844 <_dtoa_r+0x42c>
 801c74c:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c750:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c754:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c758:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c75a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c75e:	2a00      	cmp	r2, #0
 801c760:	f000 80a0 	beq.w	801c8a4 <_dtoa_r+0x48c>
 801c764:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801c768:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c770:	f140 8098 	bpl.w	801c8a4 <_dtoa_r+0x48c>
 801c774:	f1b9 0f00 	cmp.w	r9, #0
 801c778:	f000 8094 	beq.w	801c8a4 <_dtoa_r+0x48c>
 801c77c:	f1ba 0f00 	cmp.w	sl, #0
 801c780:	dd2f      	ble.n	801c7e2 <_dtoa_r+0x3ca>
 801c782:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801c786:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c78a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c78e:	f10b 32ff 	add.w	r2, fp, #4294967295
 801c792:	3101      	adds	r1, #1
 801c794:	4654      	mov	r4, sl
 801c796:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c79a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801c79e:	ee07 1a90 	vmov	s15, r1
 801c7a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c7a6:	eea7 5b06 	vfma.f64	d5, d7, d6
 801c7aa:	ee15 7a90 	vmov	r7, s11
 801c7ae:	ec51 0b15 	vmov	r0, r1, d5
 801c7b2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801c7b6:	2c00      	cmp	r4, #0
 801c7b8:	d177      	bne.n	801c8aa <_dtoa_r+0x492>
 801c7ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c7be:	ee36 6b47 	vsub.f64	d6, d6, d7
 801c7c2:	ec41 0b17 	vmov	d7, r0, r1
 801c7c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7ce:	f300 826a 	bgt.w	801cca6 <_dtoa_r+0x88e>
 801c7d2:	eeb1 7b47 	vneg.f64	d7, d7
 801c7d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7de:	f100 8260 	bmi.w	801cca2 <_dtoa_r+0x88a>
 801c7e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801c7e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c7e8:	2a00      	cmp	r2, #0
 801c7ea:	f2c0 811d 	blt.w	801ca28 <_dtoa_r+0x610>
 801c7ee:	f1bb 0f0e 	cmp.w	fp, #14
 801c7f2:	f300 8119 	bgt.w	801ca28 <_dtoa_r+0x610>
 801c7f6:	4b8a      	ldr	r3, [pc, #552]	; (801ca20 <_dtoa_r+0x608>)
 801c7f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c7fc:	ed93 6b00 	vldr	d6, [r3]
 801c800:	9b08      	ldr	r3, [sp, #32]
 801c802:	2b00      	cmp	r3, #0
 801c804:	f280 80b7 	bge.w	801c976 <_dtoa_r+0x55e>
 801c808:	f1b9 0f00 	cmp.w	r9, #0
 801c80c:	f300 80b3 	bgt.w	801c976 <_dtoa_r+0x55e>
 801c810:	f040 8246 	bne.w	801cca0 <_dtoa_r+0x888>
 801c814:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c818:	ee26 6b07 	vmul.f64	d6, d6, d7
 801c81c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c820:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c828:	464c      	mov	r4, r9
 801c82a:	464f      	mov	r7, r9
 801c82c:	f280 821c 	bge.w	801cc68 <_dtoa_r+0x850>
 801c830:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c834:	2331      	movs	r3, #49	; 0x31
 801c836:	f808 3b01 	strb.w	r3, [r8], #1
 801c83a:	f10b 0b01 	add.w	fp, fp, #1
 801c83e:	e218      	b.n	801cc72 <_dtoa_r+0x85a>
 801c840:	2102      	movs	r1, #2
 801c842:	e780      	b.n	801c746 <_dtoa_r+0x32e>
 801c844:	07d4      	lsls	r4, r2, #31
 801c846:	d504      	bpl.n	801c852 <_dtoa_r+0x43a>
 801c848:	ed90 6b00 	vldr	d6, [r0]
 801c84c:	3101      	adds	r1, #1
 801c84e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c852:	1052      	asrs	r2, r2, #1
 801c854:	3008      	adds	r0, #8
 801c856:	e777      	b.n	801c748 <_dtoa_r+0x330>
 801c858:	d022      	beq.n	801c8a0 <_dtoa_r+0x488>
 801c85a:	f1cb 0200 	rsb	r2, fp, #0
 801c85e:	4970      	ldr	r1, [pc, #448]	; (801ca20 <_dtoa_r+0x608>)
 801c860:	f002 000f 	and.w	r0, r2, #15
 801c864:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c868:	ed91 7b00 	vldr	d7, [r1]
 801c86c:	ee28 7b07 	vmul.f64	d7, d8, d7
 801c870:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c874:	486b      	ldr	r0, [pc, #428]	; (801ca24 <_dtoa_r+0x60c>)
 801c876:	1112      	asrs	r2, r2, #4
 801c878:	2400      	movs	r4, #0
 801c87a:	2102      	movs	r1, #2
 801c87c:	b92a      	cbnz	r2, 801c88a <_dtoa_r+0x472>
 801c87e:	2c00      	cmp	r4, #0
 801c880:	f43f af6a 	beq.w	801c758 <_dtoa_r+0x340>
 801c884:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c888:	e766      	b.n	801c758 <_dtoa_r+0x340>
 801c88a:	07d7      	lsls	r7, r2, #31
 801c88c:	d505      	bpl.n	801c89a <_dtoa_r+0x482>
 801c88e:	ed90 6b00 	vldr	d6, [r0]
 801c892:	3101      	adds	r1, #1
 801c894:	2401      	movs	r4, #1
 801c896:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c89a:	1052      	asrs	r2, r2, #1
 801c89c:	3008      	adds	r0, #8
 801c89e:	e7ed      	b.n	801c87c <_dtoa_r+0x464>
 801c8a0:	2102      	movs	r1, #2
 801c8a2:	e759      	b.n	801c758 <_dtoa_r+0x340>
 801c8a4:	465a      	mov	r2, fp
 801c8a6:	464c      	mov	r4, r9
 801c8a8:	e775      	b.n	801c796 <_dtoa_r+0x37e>
 801c8aa:	ec41 0b17 	vmov	d7, r0, r1
 801c8ae:	495c      	ldr	r1, [pc, #368]	; (801ca20 <_dtoa_r+0x608>)
 801c8b0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801c8b4:	ed11 4b02 	vldr	d4, [r1, #-8]
 801c8b8:	9901      	ldr	r1, [sp, #4]
 801c8ba:	440c      	add	r4, r1
 801c8bc:	9907      	ldr	r1, [sp, #28]
 801c8be:	b351      	cbz	r1, 801c916 <_dtoa_r+0x4fe>
 801c8c0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801c8c4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801c8c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c8cc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801c8d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c8d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c8d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c8dc:	ee14 1a90 	vmov	r1, s9
 801c8e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c8e4:	3130      	adds	r1, #48	; 0x30
 801c8e6:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c8ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8f2:	f808 1b01 	strb.w	r1, [r8], #1
 801c8f6:	d439      	bmi.n	801c96c <_dtoa_r+0x554>
 801c8f8:	ee32 5b46 	vsub.f64	d5, d2, d6
 801c8fc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801c900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c904:	d472      	bmi.n	801c9ec <_dtoa_r+0x5d4>
 801c906:	45a0      	cmp	r8, r4
 801c908:	f43f af6b 	beq.w	801c7e2 <_dtoa_r+0x3ca>
 801c90c:	ee27 7b03 	vmul.f64	d7, d7, d3
 801c910:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c914:	e7e0      	b.n	801c8d8 <_dtoa_r+0x4c0>
 801c916:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c91a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c91e:	4620      	mov	r0, r4
 801c920:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c924:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c928:	ee14 1a90 	vmov	r1, s9
 801c92c:	3130      	adds	r1, #48	; 0x30
 801c92e:	f808 1b01 	strb.w	r1, [r8], #1
 801c932:	45a0      	cmp	r8, r4
 801c934:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c938:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c93c:	d118      	bne.n	801c970 <_dtoa_r+0x558>
 801c93e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801c942:	ee37 4b05 	vadd.f64	d4, d7, d5
 801c946:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801c94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c94e:	dc4d      	bgt.n	801c9ec <_dtoa_r+0x5d4>
 801c950:	ee35 5b47 	vsub.f64	d5, d5, d7
 801c954:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801c958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c95c:	f57f af41 	bpl.w	801c7e2 <_dtoa_r+0x3ca>
 801c960:	4680      	mov	r8, r0
 801c962:	3801      	subs	r0, #1
 801c964:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801c968:	2b30      	cmp	r3, #48	; 0x30
 801c96a:	d0f9      	beq.n	801c960 <_dtoa_r+0x548>
 801c96c:	4693      	mov	fp, r2
 801c96e:	e02a      	b.n	801c9c6 <_dtoa_r+0x5ae>
 801c970:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c974:	e7d6      	b.n	801c924 <_dtoa_r+0x50c>
 801c976:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c97a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801c97e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c982:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801c986:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801c98a:	ee15 3a10 	vmov	r3, s10
 801c98e:	3330      	adds	r3, #48	; 0x30
 801c990:	f808 3b01 	strb.w	r3, [r8], #1
 801c994:	9b01      	ldr	r3, [sp, #4]
 801c996:	eba8 0303 	sub.w	r3, r8, r3
 801c99a:	4599      	cmp	r9, r3
 801c99c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801c9a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 801c9a4:	d133      	bne.n	801ca0e <_dtoa_r+0x5f6>
 801c9a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 801c9aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c9ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9b2:	dc1a      	bgt.n	801c9ea <_dtoa_r+0x5d2>
 801c9b4:	eeb4 7b46 	vcmp.f64	d7, d6
 801c9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9bc:	d103      	bne.n	801c9c6 <_dtoa_r+0x5ae>
 801c9be:	ee15 3a10 	vmov	r3, s10
 801c9c2:	07d9      	lsls	r1, r3, #31
 801c9c4:	d411      	bmi.n	801c9ea <_dtoa_r+0x5d2>
 801c9c6:	4629      	mov	r1, r5
 801c9c8:	4630      	mov	r0, r6
 801c9ca:	f000 fbd1 	bl	801d170 <_Bfree>
 801c9ce:	2300      	movs	r3, #0
 801c9d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c9d2:	f888 3000 	strb.w	r3, [r8]
 801c9d6:	f10b 0301 	add.w	r3, fp, #1
 801c9da:	6013      	str	r3, [r2, #0]
 801c9dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	f43f ad69 	beq.w	801c4b6 <_dtoa_r+0x9e>
 801c9e4:	f8c3 8000 	str.w	r8, [r3]
 801c9e8:	e565      	b.n	801c4b6 <_dtoa_r+0x9e>
 801c9ea:	465a      	mov	r2, fp
 801c9ec:	4643      	mov	r3, r8
 801c9ee:	4698      	mov	r8, r3
 801c9f0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801c9f4:	2939      	cmp	r1, #57	; 0x39
 801c9f6:	d106      	bne.n	801ca06 <_dtoa_r+0x5ee>
 801c9f8:	9901      	ldr	r1, [sp, #4]
 801c9fa:	4299      	cmp	r1, r3
 801c9fc:	d1f7      	bne.n	801c9ee <_dtoa_r+0x5d6>
 801c9fe:	9801      	ldr	r0, [sp, #4]
 801ca00:	2130      	movs	r1, #48	; 0x30
 801ca02:	3201      	adds	r2, #1
 801ca04:	7001      	strb	r1, [r0, #0]
 801ca06:	7819      	ldrb	r1, [r3, #0]
 801ca08:	3101      	adds	r1, #1
 801ca0a:	7019      	strb	r1, [r3, #0]
 801ca0c:	e7ae      	b.n	801c96c <_dtoa_r+0x554>
 801ca0e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801ca12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ca16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca1a:	d1b2      	bne.n	801c982 <_dtoa_r+0x56a>
 801ca1c:	e7d3      	b.n	801c9c6 <_dtoa_r+0x5ae>
 801ca1e:	bf00      	nop
 801ca20:	080209d0 	.word	0x080209d0
 801ca24:	080209a8 	.word	0x080209a8
 801ca28:	9907      	ldr	r1, [sp, #28]
 801ca2a:	2900      	cmp	r1, #0
 801ca2c:	f000 80d0 	beq.w	801cbd0 <_dtoa_r+0x7b8>
 801ca30:	9906      	ldr	r1, [sp, #24]
 801ca32:	2901      	cmp	r1, #1
 801ca34:	f300 80b4 	bgt.w	801cba0 <_dtoa_r+0x788>
 801ca38:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ca3a:	2900      	cmp	r1, #0
 801ca3c:	f000 80ac 	beq.w	801cb98 <_dtoa_r+0x780>
 801ca40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ca44:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ca48:	461c      	mov	r4, r3
 801ca4a:	9309      	str	r3, [sp, #36]	; 0x24
 801ca4c:	9b04      	ldr	r3, [sp, #16]
 801ca4e:	4413      	add	r3, r2
 801ca50:	9304      	str	r3, [sp, #16]
 801ca52:	9b05      	ldr	r3, [sp, #20]
 801ca54:	2101      	movs	r1, #1
 801ca56:	4413      	add	r3, r2
 801ca58:	4630      	mov	r0, r6
 801ca5a:	9305      	str	r3, [sp, #20]
 801ca5c:	f000 fc88 	bl	801d370 <__i2b>
 801ca60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca62:	4607      	mov	r7, r0
 801ca64:	f1b8 0f00 	cmp.w	r8, #0
 801ca68:	d00d      	beq.n	801ca86 <_dtoa_r+0x66e>
 801ca6a:	9a05      	ldr	r2, [sp, #20]
 801ca6c:	2a00      	cmp	r2, #0
 801ca6e:	dd0a      	ble.n	801ca86 <_dtoa_r+0x66e>
 801ca70:	4542      	cmp	r2, r8
 801ca72:	9904      	ldr	r1, [sp, #16]
 801ca74:	bfa8      	it	ge
 801ca76:	4642      	movge	r2, r8
 801ca78:	1a89      	subs	r1, r1, r2
 801ca7a:	9104      	str	r1, [sp, #16]
 801ca7c:	9905      	ldr	r1, [sp, #20]
 801ca7e:	eba8 0802 	sub.w	r8, r8, r2
 801ca82:	1a8a      	subs	r2, r1, r2
 801ca84:	9205      	str	r2, [sp, #20]
 801ca86:	b303      	cbz	r3, 801caca <_dtoa_r+0x6b2>
 801ca88:	9a07      	ldr	r2, [sp, #28]
 801ca8a:	2a00      	cmp	r2, #0
 801ca8c:	f000 80a5 	beq.w	801cbda <_dtoa_r+0x7c2>
 801ca90:	2c00      	cmp	r4, #0
 801ca92:	dd13      	ble.n	801cabc <_dtoa_r+0x6a4>
 801ca94:	4639      	mov	r1, r7
 801ca96:	4622      	mov	r2, r4
 801ca98:	4630      	mov	r0, r6
 801ca9a:	930d      	str	r3, [sp, #52]	; 0x34
 801ca9c:	f000 fd28 	bl	801d4f0 <__pow5mult>
 801caa0:	462a      	mov	r2, r5
 801caa2:	4601      	mov	r1, r0
 801caa4:	4607      	mov	r7, r0
 801caa6:	4630      	mov	r0, r6
 801caa8:	f000 fc78 	bl	801d39c <__multiply>
 801caac:	4629      	mov	r1, r5
 801caae:	9009      	str	r0, [sp, #36]	; 0x24
 801cab0:	4630      	mov	r0, r6
 801cab2:	f000 fb5d 	bl	801d170 <_Bfree>
 801cab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801caba:	4615      	mov	r5, r2
 801cabc:	1b1a      	subs	r2, r3, r4
 801cabe:	d004      	beq.n	801caca <_dtoa_r+0x6b2>
 801cac0:	4629      	mov	r1, r5
 801cac2:	4630      	mov	r0, r6
 801cac4:	f000 fd14 	bl	801d4f0 <__pow5mult>
 801cac8:	4605      	mov	r5, r0
 801caca:	2101      	movs	r1, #1
 801cacc:	4630      	mov	r0, r6
 801cace:	f000 fc4f 	bl	801d370 <__i2b>
 801cad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	4604      	mov	r4, r0
 801cad8:	f340 8081 	ble.w	801cbde <_dtoa_r+0x7c6>
 801cadc:	461a      	mov	r2, r3
 801cade:	4601      	mov	r1, r0
 801cae0:	4630      	mov	r0, r6
 801cae2:	f000 fd05 	bl	801d4f0 <__pow5mult>
 801cae6:	9b06      	ldr	r3, [sp, #24]
 801cae8:	2b01      	cmp	r3, #1
 801caea:	4604      	mov	r4, r0
 801caec:	dd7a      	ble.n	801cbe4 <_dtoa_r+0x7cc>
 801caee:	2300      	movs	r3, #0
 801caf0:	9309      	str	r3, [sp, #36]	; 0x24
 801caf2:	6922      	ldr	r2, [r4, #16]
 801caf4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801caf8:	6910      	ldr	r0, [r2, #16]
 801cafa:	f000 fbeb 	bl	801d2d4 <__hi0bits>
 801cafe:	f1c0 0020 	rsb	r0, r0, #32
 801cb02:	9b05      	ldr	r3, [sp, #20]
 801cb04:	4418      	add	r0, r3
 801cb06:	f010 001f 	ands.w	r0, r0, #31
 801cb0a:	f000 8093 	beq.w	801cc34 <_dtoa_r+0x81c>
 801cb0e:	f1c0 0220 	rsb	r2, r0, #32
 801cb12:	2a04      	cmp	r2, #4
 801cb14:	f340 8085 	ble.w	801cc22 <_dtoa_r+0x80a>
 801cb18:	9b04      	ldr	r3, [sp, #16]
 801cb1a:	f1c0 001c 	rsb	r0, r0, #28
 801cb1e:	4403      	add	r3, r0
 801cb20:	9304      	str	r3, [sp, #16]
 801cb22:	9b05      	ldr	r3, [sp, #20]
 801cb24:	4480      	add	r8, r0
 801cb26:	4403      	add	r3, r0
 801cb28:	9305      	str	r3, [sp, #20]
 801cb2a:	9b04      	ldr	r3, [sp, #16]
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	dd05      	ble.n	801cb3c <_dtoa_r+0x724>
 801cb30:	4629      	mov	r1, r5
 801cb32:	461a      	mov	r2, r3
 801cb34:	4630      	mov	r0, r6
 801cb36:	f000 fd35 	bl	801d5a4 <__lshift>
 801cb3a:	4605      	mov	r5, r0
 801cb3c:	9b05      	ldr	r3, [sp, #20]
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	dd05      	ble.n	801cb4e <_dtoa_r+0x736>
 801cb42:	4621      	mov	r1, r4
 801cb44:	461a      	mov	r2, r3
 801cb46:	4630      	mov	r0, r6
 801cb48:	f000 fd2c 	bl	801d5a4 <__lshift>
 801cb4c:	4604      	mov	r4, r0
 801cb4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d071      	beq.n	801cc38 <_dtoa_r+0x820>
 801cb54:	4621      	mov	r1, r4
 801cb56:	4628      	mov	r0, r5
 801cb58:	f000 fd90 	bl	801d67c <__mcmp>
 801cb5c:	2800      	cmp	r0, #0
 801cb5e:	da6b      	bge.n	801cc38 <_dtoa_r+0x820>
 801cb60:	2300      	movs	r3, #0
 801cb62:	4629      	mov	r1, r5
 801cb64:	220a      	movs	r2, #10
 801cb66:	4630      	mov	r0, r6
 801cb68:	f000 fb24 	bl	801d1b4 <__multadd>
 801cb6c:	9b07      	ldr	r3, [sp, #28]
 801cb6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cb72:	4605      	mov	r5, r0
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	f000 8197 	beq.w	801cea8 <_dtoa_r+0xa90>
 801cb7a:	4639      	mov	r1, r7
 801cb7c:	2300      	movs	r3, #0
 801cb7e:	220a      	movs	r2, #10
 801cb80:	4630      	mov	r0, r6
 801cb82:	f000 fb17 	bl	801d1b4 <__multadd>
 801cb86:	f1ba 0f00 	cmp.w	sl, #0
 801cb8a:	4607      	mov	r7, r0
 801cb8c:	f300 8093 	bgt.w	801ccb6 <_dtoa_r+0x89e>
 801cb90:	9b06      	ldr	r3, [sp, #24]
 801cb92:	2b02      	cmp	r3, #2
 801cb94:	dc57      	bgt.n	801cc46 <_dtoa_r+0x82e>
 801cb96:	e08e      	b.n	801ccb6 <_dtoa_r+0x89e>
 801cb98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cb9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801cb9e:	e751      	b.n	801ca44 <_dtoa_r+0x62c>
 801cba0:	f109 34ff 	add.w	r4, r9, #4294967295
 801cba4:	42a3      	cmp	r3, r4
 801cba6:	bfbf      	itttt	lt
 801cba8:	1ae2      	sublt	r2, r4, r3
 801cbaa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801cbac:	189b      	addlt	r3, r3, r2
 801cbae:	930a      	strlt	r3, [sp, #40]	; 0x28
 801cbb0:	bfae      	itee	ge
 801cbb2:	1b1c      	subge	r4, r3, r4
 801cbb4:	4623      	movlt	r3, r4
 801cbb6:	2400      	movlt	r4, #0
 801cbb8:	f1b9 0f00 	cmp.w	r9, #0
 801cbbc:	bfb5      	itete	lt
 801cbbe:	9a04      	ldrlt	r2, [sp, #16]
 801cbc0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801cbc4:	eba2 0809 	sublt.w	r8, r2, r9
 801cbc8:	464a      	movge	r2, r9
 801cbca:	bfb8      	it	lt
 801cbcc:	2200      	movlt	r2, #0
 801cbce:	e73c      	b.n	801ca4a <_dtoa_r+0x632>
 801cbd0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801cbd4:	9f07      	ldr	r7, [sp, #28]
 801cbd6:	461c      	mov	r4, r3
 801cbd8:	e744      	b.n	801ca64 <_dtoa_r+0x64c>
 801cbda:	461a      	mov	r2, r3
 801cbdc:	e770      	b.n	801cac0 <_dtoa_r+0x6a8>
 801cbde:	9b06      	ldr	r3, [sp, #24]
 801cbe0:	2b01      	cmp	r3, #1
 801cbe2:	dc18      	bgt.n	801cc16 <_dtoa_r+0x7fe>
 801cbe4:	9b02      	ldr	r3, [sp, #8]
 801cbe6:	b9b3      	cbnz	r3, 801cc16 <_dtoa_r+0x7fe>
 801cbe8:	9b03      	ldr	r3, [sp, #12]
 801cbea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801cbee:	b9a2      	cbnz	r2, 801cc1a <_dtoa_r+0x802>
 801cbf0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801cbf4:	0d12      	lsrs	r2, r2, #20
 801cbf6:	0512      	lsls	r2, r2, #20
 801cbf8:	b18a      	cbz	r2, 801cc1e <_dtoa_r+0x806>
 801cbfa:	9b04      	ldr	r3, [sp, #16]
 801cbfc:	3301      	adds	r3, #1
 801cbfe:	9304      	str	r3, [sp, #16]
 801cc00:	9b05      	ldr	r3, [sp, #20]
 801cc02:	3301      	adds	r3, #1
 801cc04:	9305      	str	r3, [sp, #20]
 801cc06:	2301      	movs	r3, #1
 801cc08:	9309      	str	r3, [sp, #36]	; 0x24
 801cc0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	f47f af70 	bne.w	801caf2 <_dtoa_r+0x6da>
 801cc12:	2001      	movs	r0, #1
 801cc14:	e775      	b.n	801cb02 <_dtoa_r+0x6ea>
 801cc16:	2300      	movs	r3, #0
 801cc18:	e7f6      	b.n	801cc08 <_dtoa_r+0x7f0>
 801cc1a:	9b02      	ldr	r3, [sp, #8]
 801cc1c:	e7f4      	b.n	801cc08 <_dtoa_r+0x7f0>
 801cc1e:	9209      	str	r2, [sp, #36]	; 0x24
 801cc20:	e7f3      	b.n	801cc0a <_dtoa_r+0x7f2>
 801cc22:	d082      	beq.n	801cb2a <_dtoa_r+0x712>
 801cc24:	9b04      	ldr	r3, [sp, #16]
 801cc26:	321c      	adds	r2, #28
 801cc28:	4413      	add	r3, r2
 801cc2a:	9304      	str	r3, [sp, #16]
 801cc2c:	9b05      	ldr	r3, [sp, #20]
 801cc2e:	4490      	add	r8, r2
 801cc30:	4413      	add	r3, r2
 801cc32:	e779      	b.n	801cb28 <_dtoa_r+0x710>
 801cc34:	4602      	mov	r2, r0
 801cc36:	e7f5      	b.n	801cc24 <_dtoa_r+0x80c>
 801cc38:	f1b9 0f00 	cmp.w	r9, #0
 801cc3c:	dc36      	bgt.n	801ccac <_dtoa_r+0x894>
 801cc3e:	9b06      	ldr	r3, [sp, #24]
 801cc40:	2b02      	cmp	r3, #2
 801cc42:	dd33      	ble.n	801ccac <_dtoa_r+0x894>
 801cc44:	46ca      	mov	sl, r9
 801cc46:	f1ba 0f00 	cmp.w	sl, #0
 801cc4a:	d10d      	bne.n	801cc68 <_dtoa_r+0x850>
 801cc4c:	4621      	mov	r1, r4
 801cc4e:	4653      	mov	r3, sl
 801cc50:	2205      	movs	r2, #5
 801cc52:	4630      	mov	r0, r6
 801cc54:	f000 faae 	bl	801d1b4 <__multadd>
 801cc58:	4601      	mov	r1, r0
 801cc5a:	4604      	mov	r4, r0
 801cc5c:	4628      	mov	r0, r5
 801cc5e:	f000 fd0d 	bl	801d67c <__mcmp>
 801cc62:	2800      	cmp	r0, #0
 801cc64:	f73f ade4 	bgt.w	801c830 <_dtoa_r+0x418>
 801cc68:	9b08      	ldr	r3, [sp, #32]
 801cc6a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801cc6e:	ea6f 0b03 	mvn.w	fp, r3
 801cc72:	f04f 0900 	mov.w	r9, #0
 801cc76:	4621      	mov	r1, r4
 801cc78:	4630      	mov	r0, r6
 801cc7a:	f000 fa79 	bl	801d170 <_Bfree>
 801cc7e:	2f00      	cmp	r7, #0
 801cc80:	f43f aea1 	beq.w	801c9c6 <_dtoa_r+0x5ae>
 801cc84:	f1b9 0f00 	cmp.w	r9, #0
 801cc88:	d005      	beq.n	801cc96 <_dtoa_r+0x87e>
 801cc8a:	45b9      	cmp	r9, r7
 801cc8c:	d003      	beq.n	801cc96 <_dtoa_r+0x87e>
 801cc8e:	4649      	mov	r1, r9
 801cc90:	4630      	mov	r0, r6
 801cc92:	f000 fa6d 	bl	801d170 <_Bfree>
 801cc96:	4639      	mov	r1, r7
 801cc98:	4630      	mov	r0, r6
 801cc9a:	f000 fa69 	bl	801d170 <_Bfree>
 801cc9e:	e692      	b.n	801c9c6 <_dtoa_r+0x5ae>
 801cca0:	2400      	movs	r4, #0
 801cca2:	4627      	mov	r7, r4
 801cca4:	e7e0      	b.n	801cc68 <_dtoa_r+0x850>
 801cca6:	4693      	mov	fp, r2
 801cca8:	4627      	mov	r7, r4
 801ccaa:	e5c1      	b.n	801c830 <_dtoa_r+0x418>
 801ccac:	9b07      	ldr	r3, [sp, #28]
 801ccae:	46ca      	mov	sl, r9
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	f000 8100 	beq.w	801ceb6 <_dtoa_r+0xa9e>
 801ccb6:	f1b8 0f00 	cmp.w	r8, #0
 801ccba:	dd05      	ble.n	801ccc8 <_dtoa_r+0x8b0>
 801ccbc:	4639      	mov	r1, r7
 801ccbe:	4642      	mov	r2, r8
 801ccc0:	4630      	mov	r0, r6
 801ccc2:	f000 fc6f 	bl	801d5a4 <__lshift>
 801ccc6:	4607      	mov	r7, r0
 801ccc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	d05d      	beq.n	801cd8a <_dtoa_r+0x972>
 801ccce:	6879      	ldr	r1, [r7, #4]
 801ccd0:	4630      	mov	r0, r6
 801ccd2:	f000 fa0d 	bl	801d0f0 <_Balloc>
 801ccd6:	4680      	mov	r8, r0
 801ccd8:	b928      	cbnz	r0, 801cce6 <_dtoa_r+0x8ce>
 801ccda:	4b82      	ldr	r3, [pc, #520]	; (801cee4 <_dtoa_r+0xacc>)
 801ccdc:	4602      	mov	r2, r0
 801ccde:	f240 21ef 	movw	r1, #751	; 0x2ef
 801cce2:	f7ff bbb1 	b.w	801c448 <_dtoa_r+0x30>
 801cce6:	693a      	ldr	r2, [r7, #16]
 801cce8:	3202      	adds	r2, #2
 801ccea:	0092      	lsls	r2, r2, #2
 801ccec:	f107 010c 	add.w	r1, r7, #12
 801ccf0:	300c      	adds	r0, #12
 801ccf2:	f7ff faf2 	bl	801c2da <memcpy>
 801ccf6:	2201      	movs	r2, #1
 801ccf8:	4641      	mov	r1, r8
 801ccfa:	4630      	mov	r0, r6
 801ccfc:	f000 fc52 	bl	801d5a4 <__lshift>
 801cd00:	9b01      	ldr	r3, [sp, #4]
 801cd02:	3301      	adds	r3, #1
 801cd04:	9304      	str	r3, [sp, #16]
 801cd06:	9b01      	ldr	r3, [sp, #4]
 801cd08:	4453      	add	r3, sl
 801cd0a:	9308      	str	r3, [sp, #32]
 801cd0c:	9b02      	ldr	r3, [sp, #8]
 801cd0e:	f003 0301 	and.w	r3, r3, #1
 801cd12:	46b9      	mov	r9, r7
 801cd14:	9307      	str	r3, [sp, #28]
 801cd16:	4607      	mov	r7, r0
 801cd18:	9b04      	ldr	r3, [sp, #16]
 801cd1a:	4621      	mov	r1, r4
 801cd1c:	3b01      	subs	r3, #1
 801cd1e:	4628      	mov	r0, r5
 801cd20:	9302      	str	r3, [sp, #8]
 801cd22:	f7ff faef 	bl	801c304 <quorem>
 801cd26:	4603      	mov	r3, r0
 801cd28:	3330      	adds	r3, #48	; 0x30
 801cd2a:	9005      	str	r0, [sp, #20]
 801cd2c:	4649      	mov	r1, r9
 801cd2e:	4628      	mov	r0, r5
 801cd30:	9309      	str	r3, [sp, #36]	; 0x24
 801cd32:	f000 fca3 	bl	801d67c <__mcmp>
 801cd36:	463a      	mov	r2, r7
 801cd38:	4682      	mov	sl, r0
 801cd3a:	4621      	mov	r1, r4
 801cd3c:	4630      	mov	r0, r6
 801cd3e:	f000 fcb9 	bl	801d6b4 <__mdiff>
 801cd42:	68c2      	ldr	r2, [r0, #12]
 801cd44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd46:	4680      	mov	r8, r0
 801cd48:	bb0a      	cbnz	r2, 801cd8e <_dtoa_r+0x976>
 801cd4a:	4601      	mov	r1, r0
 801cd4c:	4628      	mov	r0, r5
 801cd4e:	f000 fc95 	bl	801d67c <__mcmp>
 801cd52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd54:	4602      	mov	r2, r0
 801cd56:	4641      	mov	r1, r8
 801cd58:	4630      	mov	r0, r6
 801cd5a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801cd5e:	f000 fa07 	bl	801d170 <_Bfree>
 801cd62:	9b06      	ldr	r3, [sp, #24]
 801cd64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cd66:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801cd6a:	ea43 0102 	orr.w	r1, r3, r2
 801cd6e:	9b07      	ldr	r3, [sp, #28]
 801cd70:	4319      	orrs	r1, r3
 801cd72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd74:	d10d      	bne.n	801cd92 <_dtoa_r+0x97a>
 801cd76:	2b39      	cmp	r3, #57	; 0x39
 801cd78:	d029      	beq.n	801cdce <_dtoa_r+0x9b6>
 801cd7a:	f1ba 0f00 	cmp.w	sl, #0
 801cd7e:	dd01      	ble.n	801cd84 <_dtoa_r+0x96c>
 801cd80:	9b05      	ldr	r3, [sp, #20]
 801cd82:	3331      	adds	r3, #49	; 0x31
 801cd84:	9a02      	ldr	r2, [sp, #8]
 801cd86:	7013      	strb	r3, [r2, #0]
 801cd88:	e775      	b.n	801cc76 <_dtoa_r+0x85e>
 801cd8a:	4638      	mov	r0, r7
 801cd8c:	e7b8      	b.n	801cd00 <_dtoa_r+0x8e8>
 801cd8e:	2201      	movs	r2, #1
 801cd90:	e7e1      	b.n	801cd56 <_dtoa_r+0x93e>
 801cd92:	f1ba 0f00 	cmp.w	sl, #0
 801cd96:	db06      	blt.n	801cda6 <_dtoa_r+0x98e>
 801cd98:	9906      	ldr	r1, [sp, #24]
 801cd9a:	ea41 0a0a 	orr.w	sl, r1, sl
 801cd9e:	9907      	ldr	r1, [sp, #28]
 801cda0:	ea5a 0a01 	orrs.w	sl, sl, r1
 801cda4:	d120      	bne.n	801cde8 <_dtoa_r+0x9d0>
 801cda6:	2a00      	cmp	r2, #0
 801cda8:	ddec      	ble.n	801cd84 <_dtoa_r+0x96c>
 801cdaa:	4629      	mov	r1, r5
 801cdac:	2201      	movs	r2, #1
 801cdae:	4630      	mov	r0, r6
 801cdb0:	9304      	str	r3, [sp, #16]
 801cdb2:	f000 fbf7 	bl	801d5a4 <__lshift>
 801cdb6:	4621      	mov	r1, r4
 801cdb8:	4605      	mov	r5, r0
 801cdba:	f000 fc5f 	bl	801d67c <__mcmp>
 801cdbe:	2800      	cmp	r0, #0
 801cdc0:	9b04      	ldr	r3, [sp, #16]
 801cdc2:	dc02      	bgt.n	801cdca <_dtoa_r+0x9b2>
 801cdc4:	d1de      	bne.n	801cd84 <_dtoa_r+0x96c>
 801cdc6:	07da      	lsls	r2, r3, #31
 801cdc8:	d5dc      	bpl.n	801cd84 <_dtoa_r+0x96c>
 801cdca:	2b39      	cmp	r3, #57	; 0x39
 801cdcc:	d1d8      	bne.n	801cd80 <_dtoa_r+0x968>
 801cdce:	9a02      	ldr	r2, [sp, #8]
 801cdd0:	2339      	movs	r3, #57	; 0x39
 801cdd2:	7013      	strb	r3, [r2, #0]
 801cdd4:	4643      	mov	r3, r8
 801cdd6:	4698      	mov	r8, r3
 801cdd8:	3b01      	subs	r3, #1
 801cdda:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801cdde:	2a39      	cmp	r2, #57	; 0x39
 801cde0:	d051      	beq.n	801ce86 <_dtoa_r+0xa6e>
 801cde2:	3201      	adds	r2, #1
 801cde4:	701a      	strb	r2, [r3, #0]
 801cde6:	e746      	b.n	801cc76 <_dtoa_r+0x85e>
 801cde8:	2a00      	cmp	r2, #0
 801cdea:	dd03      	ble.n	801cdf4 <_dtoa_r+0x9dc>
 801cdec:	2b39      	cmp	r3, #57	; 0x39
 801cdee:	d0ee      	beq.n	801cdce <_dtoa_r+0x9b6>
 801cdf0:	3301      	adds	r3, #1
 801cdf2:	e7c7      	b.n	801cd84 <_dtoa_r+0x96c>
 801cdf4:	9a04      	ldr	r2, [sp, #16]
 801cdf6:	9908      	ldr	r1, [sp, #32]
 801cdf8:	f802 3c01 	strb.w	r3, [r2, #-1]
 801cdfc:	428a      	cmp	r2, r1
 801cdfe:	d02b      	beq.n	801ce58 <_dtoa_r+0xa40>
 801ce00:	4629      	mov	r1, r5
 801ce02:	2300      	movs	r3, #0
 801ce04:	220a      	movs	r2, #10
 801ce06:	4630      	mov	r0, r6
 801ce08:	f000 f9d4 	bl	801d1b4 <__multadd>
 801ce0c:	45b9      	cmp	r9, r7
 801ce0e:	4605      	mov	r5, r0
 801ce10:	f04f 0300 	mov.w	r3, #0
 801ce14:	f04f 020a 	mov.w	r2, #10
 801ce18:	4649      	mov	r1, r9
 801ce1a:	4630      	mov	r0, r6
 801ce1c:	d107      	bne.n	801ce2e <_dtoa_r+0xa16>
 801ce1e:	f000 f9c9 	bl	801d1b4 <__multadd>
 801ce22:	4681      	mov	r9, r0
 801ce24:	4607      	mov	r7, r0
 801ce26:	9b04      	ldr	r3, [sp, #16]
 801ce28:	3301      	adds	r3, #1
 801ce2a:	9304      	str	r3, [sp, #16]
 801ce2c:	e774      	b.n	801cd18 <_dtoa_r+0x900>
 801ce2e:	f000 f9c1 	bl	801d1b4 <__multadd>
 801ce32:	4639      	mov	r1, r7
 801ce34:	4681      	mov	r9, r0
 801ce36:	2300      	movs	r3, #0
 801ce38:	220a      	movs	r2, #10
 801ce3a:	4630      	mov	r0, r6
 801ce3c:	f000 f9ba 	bl	801d1b4 <__multadd>
 801ce40:	4607      	mov	r7, r0
 801ce42:	e7f0      	b.n	801ce26 <_dtoa_r+0xa0e>
 801ce44:	f1ba 0f00 	cmp.w	sl, #0
 801ce48:	9a01      	ldr	r2, [sp, #4]
 801ce4a:	bfcc      	ite	gt
 801ce4c:	46d0      	movgt	r8, sl
 801ce4e:	f04f 0801 	movle.w	r8, #1
 801ce52:	4490      	add	r8, r2
 801ce54:	f04f 0900 	mov.w	r9, #0
 801ce58:	4629      	mov	r1, r5
 801ce5a:	2201      	movs	r2, #1
 801ce5c:	4630      	mov	r0, r6
 801ce5e:	9302      	str	r3, [sp, #8]
 801ce60:	f000 fba0 	bl	801d5a4 <__lshift>
 801ce64:	4621      	mov	r1, r4
 801ce66:	4605      	mov	r5, r0
 801ce68:	f000 fc08 	bl	801d67c <__mcmp>
 801ce6c:	2800      	cmp	r0, #0
 801ce6e:	dcb1      	bgt.n	801cdd4 <_dtoa_r+0x9bc>
 801ce70:	d102      	bne.n	801ce78 <_dtoa_r+0xa60>
 801ce72:	9b02      	ldr	r3, [sp, #8]
 801ce74:	07db      	lsls	r3, r3, #31
 801ce76:	d4ad      	bmi.n	801cdd4 <_dtoa_r+0x9bc>
 801ce78:	4643      	mov	r3, r8
 801ce7a:	4698      	mov	r8, r3
 801ce7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ce80:	2a30      	cmp	r2, #48	; 0x30
 801ce82:	d0fa      	beq.n	801ce7a <_dtoa_r+0xa62>
 801ce84:	e6f7      	b.n	801cc76 <_dtoa_r+0x85e>
 801ce86:	9a01      	ldr	r2, [sp, #4]
 801ce88:	429a      	cmp	r2, r3
 801ce8a:	d1a4      	bne.n	801cdd6 <_dtoa_r+0x9be>
 801ce8c:	f10b 0b01 	add.w	fp, fp, #1
 801ce90:	2331      	movs	r3, #49	; 0x31
 801ce92:	e778      	b.n	801cd86 <_dtoa_r+0x96e>
 801ce94:	4b14      	ldr	r3, [pc, #80]	; (801cee8 <_dtoa_r+0xad0>)
 801ce96:	f7ff bb2a 	b.w	801c4ee <_dtoa_r+0xd6>
 801ce9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ce9c:	2b00      	cmp	r3, #0
 801ce9e:	f47f ab05 	bne.w	801c4ac <_dtoa_r+0x94>
 801cea2:	4b12      	ldr	r3, [pc, #72]	; (801ceec <_dtoa_r+0xad4>)
 801cea4:	f7ff bb23 	b.w	801c4ee <_dtoa_r+0xd6>
 801cea8:	f1ba 0f00 	cmp.w	sl, #0
 801ceac:	dc03      	bgt.n	801ceb6 <_dtoa_r+0xa9e>
 801ceae:	9b06      	ldr	r3, [sp, #24]
 801ceb0:	2b02      	cmp	r3, #2
 801ceb2:	f73f aec8 	bgt.w	801cc46 <_dtoa_r+0x82e>
 801ceb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ceba:	4621      	mov	r1, r4
 801cebc:	4628      	mov	r0, r5
 801cebe:	f7ff fa21 	bl	801c304 <quorem>
 801cec2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801cec6:	f808 3b01 	strb.w	r3, [r8], #1
 801ceca:	9a01      	ldr	r2, [sp, #4]
 801cecc:	eba8 0202 	sub.w	r2, r8, r2
 801ced0:	4592      	cmp	sl, r2
 801ced2:	ddb7      	ble.n	801ce44 <_dtoa_r+0xa2c>
 801ced4:	4629      	mov	r1, r5
 801ced6:	2300      	movs	r3, #0
 801ced8:	220a      	movs	r2, #10
 801ceda:	4630      	mov	r0, r6
 801cedc:	f000 f96a 	bl	801d1b4 <__multadd>
 801cee0:	4605      	mov	r5, r0
 801cee2:	e7ea      	b.n	801ceba <_dtoa_r+0xaa2>
 801cee4:	08020937 	.word	0x08020937
 801cee8:	08020c20 	.word	0x08020c20
 801ceec:	080208bb 	.word	0x080208bb

0801cef0 <_free_r>:
 801cef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cef2:	2900      	cmp	r1, #0
 801cef4:	d044      	beq.n	801cf80 <_free_r+0x90>
 801cef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cefa:	9001      	str	r0, [sp, #4]
 801cefc:	2b00      	cmp	r3, #0
 801cefe:	f1a1 0404 	sub.w	r4, r1, #4
 801cf02:	bfb8      	it	lt
 801cf04:	18e4      	addlt	r4, r4, r3
 801cf06:	f000 f8e7 	bl	801d0d8 <__malloc_lock>
 801cf0a:	4a1e      	ldr	r2, [pc, #120]	; (801cf84 <_free_r+0x94>)
 801cf0c:	9801      	ldr	r0, [sp, #4]
 801cf0e:	6813      	ldr	r3, [r2, #0]
 801cf10:	b933      	cbnz	r3, 801cf20 <_free_r+0x30>
 801cf12:	6063      	str	r3, [r4, #4]
 801cf14:	6014      	str	r4, [r2, #0]
 801cf16:	b003      	add	sp, #12
 801cf18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cf1c:	f000 b8e2 	b.w	801d0e4 <__malloc_unlock>
 801cf20:	42a3      	cmp	r3, r4
 801cf22:	d908      	bls.n	801cf36 <_free_r+0x46>
 801cf24:	6825      	ldr	r5, [r4, #0]
 801cf26:	1961      	adds	r1, r4, r5
 801cf28:	428b      	cmp	r3, r1
 801cf2a:	bf01      	itttt	eq
 801cf2c:	6819      	ldreq	r1, [r3, #0]
 801cf2e:	685b      	ldreq	r3, [r3, #4]
 801cf30:	1949      	addeq	r1, r1, r5
 801cf32:	6021      	streq	r1, [r4, #0]
 801cf34:	e7ed      	b.n	801cf12 <_free_r+0x22>
 801cf36:	461a      	mov	r2, r3
 801cf38:	685b      	ldr	r3, [r3, #4]
 801cf3a:	b10b      	cbz	r3, 801cf40 <_free_r+0x50>
 801cf3c:	42a3      	cmp	r3, r4
 801cf3e:	d9fa      	bls.n	801cf36 <_free_r+0x46>
 801cf40:	6811      	ldr	r1, [r2, #0]
 801cf42:	1855      	adds	r5, r2, r1
 801cf44:	42a5      	cmp	r5, r4
 801cf46:	d10b      	bne.n	801cf60 <_free_r+0x70>
 801cf48:	6824      	ldr	r4, [r4, #0]
 801cf4a:	4421      	add	r1, r4
 801cf4c:	1854      	adds	r4, r2, r1
 801cf4e:	42a3      	cmp	r3, r4
 801cf50:	6011      	str	r1, [r2, #0]
 801cf52:	d1e0      	bne.n	801cf16 <_free_r+0x26>
 801cf54:	681c      	ldr	r4, [r3, #0]
 801cf56:	685b      	ldr	r3, [r3, #4]
 801cf58:	6053      	str	r3, [r2, #4]
 801cf5a:	440c      	add	r4, r1
 801cf5c:	6014      	str	r4, [r2, #0]
 801cf5e:	e7da      	b.n	801cf16 <_free_r+0x26>
 801cf60:	d902      	bls.n	801cf68 <_free_r+0x78>
 801cf62:	230c      	movs	r3, #12
 801cf64:	6003      	str	r3, [r0, #0]
 801cf66:	e7d6      	b.n	801cf16 <_free_r+0x26>
 801cf68:	6825      	ldr	r5, [r4, #0]
 801cf6a:	1961      	adds	r1, r4, r5
 801cf6c:	428b      	cmp	r3, r1
 801cf6e:	bf04      	itt	eq
 801cf70:	6819      	ldreq	r1, [r3, #0]
 801cf72:	685b      	ldreq	r3, [r3, #4]
 801cf74:	6063      	str	r3, [r4, #4]
 801cf76:	bf04      	itt	eq
 801cf78:	1949      	addeq	r1, r1, r5
 801cf7a:	6021      	streq	r1, [r4, #0]
 801cf7c:	6054      	str	r4, [r2, #4]
 801cf7e:	e7ca      	b.n	801cf16 <_free_r+0x26>
 801cf80:	b003      	add	sp, #12
 801cf82:	bd30      	pop	{r4, r5, pc}
 801cf84:	24005df4 	.word	0x24005df4

0801cf88 <malloc>:
 801cf88:	4b02      	ldr	r3, [pc, #8]	; (801cf94 <malloc+0xc>)
 801cf8a:	4601      	mov	r1, r0
 801cf8c:	6818      	ldr	r0, [r3, #0]
 801cf8e:	f000 b823 	b.w	801cfd8 <_malloc_r>
 801cf92:	bf00      	nop
 801cf94:	24000258 	.word	0x24000258

0801cf98 <sbrk_aligned>:
 801cf98:	b570      	push	{r4, r5, r6, lr}
 801cf9a:	4e0e      	ldr	r6, [pc, #56]	; (801cfd4 <sbrk_aligned+0x3c>)
 801cf9c:	460c      	mov	r4, r1
 801cf9e:	6831      	ldr	r1, [r6, #0]
 801cfa0:	4605      	mov	r5, r0
 801cfa2:	b911      	cbnz	r1, 801cfaa <sbrk_aligned+0x12>
 801cfa4:	f002 f96a 	bl	801f27c <_sbrk_r>
 801cfa8:	6030      	str	r0, [r6, #0]
 801cfaa:	4621      	mov	r1, r4
 801cfac:	4628      	mov	r0, r5
 801cfae:	f002 f965 	bl	801f27c <_sbrk_r>
 801cfb2:	1c43      	adds	r3, r0, #1
 801cfb4:	d00a      	beq.n	801cfcc <sbrk_aligned+0x34>
 801cfb6:	1cc4      	adds	r4, r0, #3
 801cfb8:	f024 0403 	bic.w	r4, r4, #3
 801cfbc:	42a0      	cmp	r0, r4
 801cfbe:	d007      	beq.n	801cfd0 <sbrk_aligned+0x38>
 801cfc0:	1a21      	subs	r1, r4, r0
 801cfc2:	4628      	mov	r0, r5
 801cfc4:	f002 f95a 	bl	801f27c <_sbrk_r>
 801cfc8:	3001      	adds	r0, #1
 801cfca:	d101      	bne.n	801cfd0 <sbrk_aligned+0x38>
 801cfcc:	f04f 34ff 	mov.w	r4, #4294967295
 801cfd0:	4620      	mov	r0, r4
 801cfd2:	bd70      	pop	{r4, r5, r6, pc}
 801cfd4:	24005df8 	.word	0x24005df8

0801cfd8 <_malloc_r>:
 801cfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cfdc:	1ccd      	adds	r5, r1, #3
 801cfde:	f025 0503 	bic.w	r5, r5, #3
 801cfe2:	3508      	adds	r5, #8
 801cfe4:	2d0c      	cmp	r5, #12
 801cfe6:	bf38      	it	cc
 801cfe8:	250c      	movcc	r5, #12
 801cfea:	2d00      	cmp	r5, #0
 801cfec:	4607      	mov	r7, r0
 801cfee:	db01      	blt.n	801cff4 <_malloc_r+0x1c>
 801cff0:	42a9      	cmp	r1, r5
 801cff2:	d905      	bls.n	801d000 <_malloc_r+0x28>
 801cff4:	230c      	movs	r3, #12
 801cff6:	603b      	str	r3, [r7, #0]
 801cff8:	2600      	movs	r6, #0
 801cffa:	4630      	mov	r0, r6
 801cffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d000:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801d0d4 <_malloc_r+0xfc>
 801d004:	f000 f868 	bl	801d0d8 <__malloc_lock>
 801d008:	f8d8 3000 	ldr.w	r3, [r8]
 801d00c:	461c      	mov	r4, r3
 801d00e:	bb5c      	cbnz	r4, 801d068 <_malloc_r+0x90>
 801d010:	4629      	mov	r1, r5
 801d012:	4638      	mov	r0, r7
 801d014:	f7ff ffc0 	bl	801cf98 <sbrk_aligned>
 801d018:	1c43      	adds	r3, r0, #1
 801d01a:	4604      	mov	r4, r0
 801d01c:	d155      	bne.n	801d0ca <_malloc_r+0xf2>
 801d01e:	f8d8 4000 	ldr.w	r4, [r8]
 801d022:	4626      	mov	r6, r4
 801d024:	2e00      	cmp	r6, #0
 801d026:	d145      	bne.n	801d0b4 <_malloc_r+0xdc>
 801d028:	2c00      	cmp	r4, #0
 801d02a:	d048      	beq.n	801d0be <_malloc_r+0xe6>
 801d02c:	6823      	ldr	r3, [r4, #0]
 801d02e:	4631      	mov	r1, r6
 801d030:	4638      	mov	r0, r7
 801d032:	eb04 0903 	add.w	r9, r4, r3
 801d036:	f002 f921 	bl	801f27c <_sbrk_r>
 801d03a:	4581      	cmp	r9, r0
 801d03c:	d13f      	bne.n	801d0be <_malloc_r+0xe6>
 801d03e:	6821      	ldr	r1, [r4, #0]
 801d040:	1a6d      	subs	r5, r5, r1
 801d042:	4629      	mov	r1, r5
 801d044:	4638      	mov	r0, r7
 801d046:	f7ff ffa7 	bl	801cf98 <sbrk_aligned>
 801d04a:	3001      	adds	r0, #1
 801d04c:	d037      	beq.n	801d0be <_malloc_r+0xe6>
 801d04e:	6823      	ldr	r3, [r4, #0]
 801d050:	442b      	add	r3, r5
 801d052:	6023      	str	r3, [r4, #0]
 801d054:	f8d8 3000 	ldr.w	r3, [r8]
 801d058:	2b00      	cmp	r3, #0
 801d05a:	d038      	beq.n	801d0ce <_malloc_r+0xf6>
 801d05c:	685a      	ldr	r2, [r3, #4]
 801d05e:	42a2      	cmp	r2, r4
 801d060:	d12b      	bne.n	801d0ba <_malloc_r+0xe2>
 801d062:	2200      	movs	r2, #0
 801d064:	605a      	str	r2, [r3, #4]
 801d066:	e00f      	b.n	801d088 <_malloc_r+0xb0>
 801d068:	6822      	ldr	r2, [r4, #0]
 801d06a:	1b52      	subs	r2, r2, r5
 801d06c:	d41f      	bmi.n	801d0ae <_malloc_r+0xd6>
 801d06e:	2a0b      	cmp	r2, #11
 801d070:	d917      	bls.n	801d0a2 <_malloc_r+0xca>
 801d072:	1961      	adds	r1, r4, r5
 801d074:	42a3      	cmp	r3, r4
 801d076:	6025      	str	r5, [r4, #0]
 801d078:	bf18      	it	ne
 801d07a:	6059      	strne	r1, [r3, #4]
 801d07c:	6863      	ldr	r3, [r4, #4]
 801d07e:	bf08      	it	eq
 801d080:	f8c8 1000 	streq.w	r1, [r8]
 801d084:	5162      	str	r2, [r4, r5]
 801d086:	604b      	str	r3, [r1, #4]
 801d088:	4638      	mov	r0, r7
 801d08a:	f104 060b 	add.w	r6, r4, #11
 801d08e:	f000 f829 	bl	801d0e4 <__malloc_unlock>
 801d092:	f026 0607 	bic.w	r6, r6, #7
 801d096:	1d23      	adds	r3, r4, #4
 801d098:	1af2      	subs	r2, r6, r3
 801d09a:	d0ae      	beq.n	801cffa <_malloc_r+0x22>
 801d09c:	1b9b      	subs	r3, r3, r6
 801d09e:	50a3      	str	r3, [r4, r2]
 801d0a0:	e7ab      	b.n	801cffa <_malloc_r+0x22>
 801d0a2:	42a3      	cmp	r3, r4
 801d0a4:	6862      	ldr	r2, [r4, #4]
 801d0a6:	d1dd      	bne.n	801d064 <_malloc_r+0x8c>
 801d0a8:	f8c8 2000 	str.w	r2, [r8]
 801d0ac:	e7ec      	b.n	801d088 <_malloc_r+0xb0>
 801d0ae:	4623      	mov	r3, r4
 801d0b0:	6864      	ldr	r4, [r4, #4]
 801d0b2:	e7ac      	b.n	801d00e <_malloc_r+0x36>
 801d0b4:	4634      	mov	r4, r6
 801d0b6:	6876      	ldr	r6, [r6, #4]
 801d0b8:	e7b4      	b.n	801d024 <_malloc_r+0x4c>
 801d0ba:	4613      	mov	r3, r2
 801d0bc:	e7cc      	b.n	801d058 <_malloc_r+0x80>
 801d0be:	230c      	movs	r3, #12
 801d0c0:	603b      	str	r3, [r7, #0]
 801d0c2:	4638      	mov	r0, r7
 801d0c4:	f000 f80e 	bl	801d0e4 <__malloc_unlock>
 801d0c8:	e797      	b.n	801cffa <_malloc_r+0x22>
 801d0ca:	6025      	str	r5, [r4, #0]
 801d0cc:	e7dc      	b.n	801d088 <_malloc_r+0xb0>
 801d0ce:	605b      	str	r3, [r3, #4]
 801d0d0:	deff      	udf	#255	; 0xff
 801d0d2:	bf00      	nop
 801d0d4:	24005df4 	.word	0x24005df4

0801d0d8 <__malloc_lock>:
 801d0d8:	4801      	ldr	r0, [pc, #4]	; (801d0e0 <__malloc_lock+0x8>)
 801d0da:	f7ff b8f4 	b.w	801c2c6 <__retarget_lock_acquire_recursive>
 801d0de:	bf00      	nop
 801d0e0:	24005df0 	.word	0x24005df0

0801d0e4 <__malloc_unlock>:
 801d0e4:	4801      	ldr	r0, [pc, #4]	; (801d0ec <__malloc_unlock+0x8>)
 801d0e6:	f7ff b8ef 	b.w	801c2c8 <__retarget_lock_release_recursive>
 801d0ea:	bf00      	nop
 801d0ec:	24005df0 	.word	0x24005df0

0801d0f0 <_Balloc>:
 801d0f0:	b570      	push	{r4, r5, r6, lr}
 801d0f2:	69c6      	ldr	r6, [r0, #28]
 801d0f4:	4604      	mov	r4, r0
 801d0f6:	460d      	mov	r5, r1
 801d0f8:	b976      	cbnz	r6, 801d118 <_Balloc+0x28>
 801d0fa:	2010      	movs	r0, #16
 801d0fc:	f7ff ff44 	bl	801cf88 <malloc>
 801d100:	4602      	mov	r2, r0
 801d102:	61e0      	str	r0, [r4, #28]
 801d104:	b920      	cbnz	r0, 801d110 <_Balloc+0x20>
 801d106:	4b18      	ldr	r3, [pc, #96]	; (801d168 <_Balloc+0x78>)
 801d108:	4818      	ldr	r0, [pc, #96]	; (801d16c <_Balloc+0x7c>)
 801d10a:	216b      	movs	r1, #107	; 0x6b
 801d10c:	f002 f8d0 	bl	801f2b0 <__assert_func>
 801d110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d114:	6006      	str	r6, [r0, #0]
 801d116:	60c6      	str	r6, [r0, #12]
 801d118:	69e6      	ldr	r6, [r4, #28]
 801d11a:	68f3      	ldr	r3, [r6, #12]
 801d11c:	b183      	cbz	r3, 801d140 <_Balloc+0x50>
 801d11e:	69e3      	ldr	r3, [r4, #28]
 801d120:	68db      	ldr	r3, [r3, #12]
 801d122:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d126:	b9b8      	cbnz	r0, 801d158 <_Balloc+0x68>
 801d128:	2101      	movs	r1, #1
 801d12a:	fa01 f605 	lsl.w	r6, r1, r5
 801d12e:	1d72      	adds	r2, r6, #5
 801d130:	0092      	lsls	r2, r2, #2
 801d132:	4620      	mov	r0, r4
 801d134:	f002 f8da 	bl	801f2ec <_calloc_r>
 801d138:	b160      	cbz	r0, 801d154 <_Balloc+0x64>
 801d13a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d13e:	e00e      	b.n	801d15e <_Balloc+0x6e>
 801d140:	2221      	movs	r2, #33	; 0x21
 801d142:	2104      	movs	r1, #4
 801d144:	4620      	mov	r0, r4
 801d146:	f002 f8d1 	bl	801f2ec <_calloc_r>
 801d14a:	69e3      	ldr	r3, [r4, #28]
 801d14c:	60f0      	str	r0, [r6, #12]
 801d14e:	68db      	ldr	r3, [r3, #12]
 801d150:	2b00      	cmp	r3, #0
 801d152:	d1e4      	bne.n	801d11e <_Balloc+0x2e>
 801d154:	2000      	movs	r0, #0
 801d156:	bd70      	pop	{r4, r5, r6, pc}
 801d158:	6802      	ldr	r2, [r0, #0]
 801d15a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d15e:	2300      	movs	r3, #0
 801d160:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d164:	e7f7      	b.n	801d156 <_Balloc+0x66>
 801d166:	bf00      	nop
 801d168:	080208c8 	.word	0x080208c8
 801d16c:	08020948 	.word	0x08020948

0801d170 <_Bfree>:
 801d170:	b570      	push	{r4, r5, r6, lr}
 801d172:	69c6      	ldr	r6, [r0, #28]
 801d174:	4605      	mov	r5, r0
 801d176:	460c      	mov	r4, r1
 801d178:	b976      	cbnz	r6, 801d198 <_Bfree+0x28>
 801d17a:	2010      	movs	r0, #16
 801d17c:	f7ff ff04 	bl	801cf88 <malloc>
 801d180:	4602      	mov	r2, r0
 801d182:	61e8      	str	r0, [r5, #28]
 801d184:	b920      	cbnz	r0, 801d190 <_Bfree+0x20>
 801d186:	4b09      	ldr	r3, [pc, #36]	; (801d1ac <_Bfree+0x3c>)
 801d188:	4809      	ldr	r0, [pc, #36]	; (801d1b0 <_Bfree+0x40>)
 801d18a:	218f      	movs	r1, #143	; 0x8f
 801d18c:	f002 f890 	bl	801f2b0 <__assert_func>
 801d190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d194:	6006      	str	r6, [r0, #0]
 801d196:	60c6      	str	r6, [r0, #12]
 801d198:	b13c      	cbz	r4, 801d1aa <_Bfree+0x3a>
 801d19a:	69eb      	ldr	r3, [r5, #28]
 801d19c:	6862      	ldr	r2, [r4, #4]
 801d19e:	68db      	ldr	r3, [r3, #12]
 801d1a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d1a4:	6021      	str	r1, [r4, #0]
 801d1a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d1aa:	bd70      	pop	{r4, r5, r6, pc}
 801d1ac:	080208c8 	.word	0x080208c8
 801d1b0:	08020948 	.word	0x08020948

0801d1b4 <__multadd>:
 801d1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1b8:	690d      	ldr	r5, [r1, #16]
 801d1ba:	4607      	mov	r7, r0
 801d1bc:	460c      	mov	r4, r1
 801d1be:	461e      	mov	r6, r3
 801d1c0:	f101 0c14 	add.w	ip, r1, #20
 801d1c4:	2000      	movs	r0, #0
 801d1c6:	f8dc 3000 	ldr.w	r3, [ip]
 801d1ca:	b299      	uxth	r1, r3
 801d1cc:	fb02 6101 	mla	r1, r2, r1, r6
 801d1d0:	0c1e      	lsrs	r6, r3, #16
 801d1d2:	0c0b      	lsrs	r3, r1, #16
 801d1d4:	fb02 3306 	mla	r3, r2, r6, r3
 801d1d8:	b289      	uxth	r1, r1
 801d1da:	3001      	adds	r0, #1
 801d1dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d1e0:	4285      	cmp	r5, r0
 801d1e2:	f84c 1b04 	str.w	r1, [ip], #4
 801d1e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d1ea:	dcec      	bgt.n	801d1c6 <__multadd+0x12>
 801d1ec:	b30e      	cbz	r6, 801d232 <__multadd+0x7e>
 801d1ee:	68a3      	ldr	r3, [r4, #8]
 801d1f0:	42ab      	cmp	r3, r5
 801d1f2:	dc19      	bgt.n	801d228 <__multadd+0x74>
 801d1f4:	6861      	ldr	r1, [r4, #4]
 801d1f6:	4638      	mov	r0, r7
 801d1f8:	3101      	adds	r1, #1
 801d1fa:	f7ff ff79 	bl	801d0f0 <_Balloc>
 801d1fe:	4680      	mov	r8, r0
 801d200:	b928      	cbnz	r0, 801d20e <__multadd+0x5a>
 801d202:	4602      	mov	r2, r0
 801d204:	4b0c      	ldr	r3, [pc, #48]	; (801d238 <__multadd+0x84>)
 801d206:	480d      	ldr	r0, [pc, #52]	; (801d23c <__multadd+0x88>)
 801d208:	21ba      	movs	r1, #186	; 0xba
 801d20a:	f002 f851 	bl	801f2b0 <__assert_func>
 801d20e:	6922      	ldr	r2, [r4, #16]
 801d210:	3202      	adds	r2, #2
 801d212:	f104 010c 	add.w	r1, r4, #12
 801d216:	0092      	lsls	r2, r2, #2
 801d218:	300c      	adds	r0, #12
 801d21a:	f7ff f85e 	bl	801c2da <memcpy>
 801d21e:	4621      	mov	r1, r4
 801d220:	4638      	mov	r0, r7
 801d222:	f7ff ffa5 	bl	801d170 <_Bfree>
 801d226:	4644      	mov	r4, r8
 801d228:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d22c:	3501      	adds	r5, #1
 801d22e:	615e      	str	r6, [r3, #20]
 801d230:	6125      	str	r5, [r4, #16]
 801d232:	4620      	mov	r0, r4
 801d234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d238:	08020937 	.word	0x08020937
 801d23c:	08020948 	.word	0x08020948

0801d240 <__s2b>:
 801d240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d244:	460c      	mov	r4, r1
 801d246:	4615      	mov	r5, r2
 801d248:	461f      	mov	r7, r3
 801d24a:	2209      	movs	r2, #9
 801d24c:	3308      	adds	r3, #8
 801d24e:	4606      	mov	r6, r0
 801d250:	fb93 f3f2 	sdiv	r3, r3, r2
 801d254:	2100      	movs	r1, #0
 801d256:	2201      	movs	r2, #1
 801d258:	429a      	cmp	r2, r3
 801d25a:	db09      	blt.n	801d270 <__s2b+0x30>
 801d25c:	4630      	mov	r0, r6
 801d25e:	f7ff ff47 	bl	801d0f0 <_Balloc>
 801d262:	b940      	cbnz	r0, 801d276 <__s2b+0x36>
 801d264:	4602      	mov	r2, r0
 801d266:	4b19      	ldr	r3, [pc, #100]	; (801d2cc <__s2b+0x8c>)
 801d268:	4819      	ldr	r0, [pc, #100]	; (801d2d0 <__s2b+0x90>)
 801d26a:	21d3      	movs	r1, #211	; 0xd3
 801d26c:	f002 f820 	bl	801f2b0 <__assert_func>
 801d270:	0052      	lsls	r2, r2, #1
 801d272:	3101      	adds	r1, #1
 801d274:	e7f0      	b.n	801d258 <__s2b+0x18>
 801d276:	9b08      	ldr	r3, [sp, #32]
 801d278:	6143      	str	r3, [r0, #20]
 801d27a:	2d09      	cmp	r5, #9
 801d27c:	f04f 0301 	mov.w	r3, #1
 801d280:	6103      	str	r3, [r0, #16]
 801d282:	dd16      	ble.n	801d2b2 <__s2b+0x72>
 801d284:	f104 0909 	add.w	r9, r4, #9
 801d288:	46c8      	mov	r8, r9
 801d28a:	442c      	add	r4, r5
 801d28c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d290:	4601      	mov	r1, r0
 801d292:	3b30      	subs	r3, #48	; 0x30
 801d294:	220a      	movs	r2, #10
 801d296:	4630      	mov	r0, r6
 801d298:	f7ff ff8c 	bl	801d1b4 <__multadd>
 801d29c:	45a0      	cmp	r8, r4
 801d29e:	d1f5      	bne.n	801d28c <__s2b+0x4c>
 801d2a0:	f1a5 0408 	sub.w	r4, r5, #8
 801d2a4:	444c      	add	r4, r9
 801d2a6:	1b2d      	subs	r5, r5, r4
 801d2a8:	1963      	adds	r3, r4, r5
 801d2aa:	42bb      	cmp	r3, r7
 801d2ac:	db04      	blt.n	801d2b8 <__s2b+0x78>
 801d2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d2b2:	340a      	adds	r4, #10
 801d2b4:	2509      	movs	r5, #9
 801d2b6:	e7f6      	b.n	801d2a6 <__s2b+0x66>
 801d2b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d2bc:	4601      	mov	r1, r0
 801d2be:	3b30      	subs	r3, #48	; 0x30
 801d2c0:	220a      	movs	r2, #10
 801d2c2:	4630      	mov	r0, r6
 801d2c4:	f7ff ff76 	bl	801d1b4 <__multadd>
 801d2c8:	e7ee      	b.n	801d2a8 <__s2b+0x68>
 801d2ca:	bf00      	nop
 801d2cc:	08020937 	.word	0x08020937
 801d2d0:	08020948 	.word	0x08020948

0801d2d4 <__hi0bits>:
 801d2d4:	0c03      	lsrs	r3, r0, #16
 801d2d6:	041b      	lsls	r3, r3, #16
 801d2d8:	b9d3      	cbnz	r3, 801d310 <__hi0bits+0x3c>
 801d2da:	0400      	lsls	r0, r0, #16
 801d2dc:	2310      	movs	r3, #16
 801d2de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d2e2:	bf04      	itt	eq
 801d2e4:	0200      	lsleq	r0, r0, #8
 801d2e6:	3308      	addeq	r3, #8
 801d2e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d2ec:	bf04      	itt	eq
 801d2ee:	0100      	lsleq	r0, r0, #4
 801d2f0:	3304      	addeq	r3, #4
 801d2f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d2f6:	bf04      	itt	eq
 801d2f8:	0080      	lsleq	r0, r0, #2
 801d2fa:	3302      	addeq	r3, #2
 801d2fc:	2800      	cmp	r0, #0
 801d2fe:	db05      	blt.n	801d30c <__hi0bits+0x38>
 801d300:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d304:	f103 0301 	add.w	r3, r3, #1
 801d308:	bf08      	it	eq
 801d30a:	2320      	moveq	r3, #32
 801d30c:	4618      	mov	r0, r3
 801d30e:	4770      	bx	lr
 801d310:	2300      	movs	r3, #0
 801d312:	e7e4      	b.n	801d2de <__hi0bits+0xa>

0801d314 <__lo0bits>:
 801d314:	6803      	ldr	r3, [r0, #0]
 801d316:	f013 0207 	ands.w	r2, r3, #7
 801d31a:	d00c      	beq.n	801d336 <__lo0bits+0x22>
 801d31c:	07d9      	lsls	r1, r3, #31
 801d31e:	d422      	bmi.n	801d366 <__lo0bits+0x52>
 801d320:	079a      	lsls	r2, r3, #30
 801d322:	bf49      	itett	mi
 801d324:	085b      	lsrmi	r3, r3, #1
 801d326:	089b      	lsrpl	r3, r3, #2
 801d328:	6003      	strmi	r3, [r0, #0]
 801d32a:	2201      	movmi	r2, #1
 801d32c:	bf5c      	itt	pl
 801d32e:	6003      	strpl	r3, [r0, #0]
 801d330:	2202      	movpl	r2, #2
 801d332:	4610      	mov	r0, r2
 801d334:	4770      	bx	lr
 801d336:	b299      	uxth	r1, r3
 801d338:	b909      	cbnz	r1, 801d33e <__lo0bits+0x2a>
 801d33a:	0c1b      	lsrs	r3, r3, #16
 801d33c:	2210      	movs	r2, #16
 801d33e:	b2d9      	uxtb	r1, r3
 801d340:	b909      	cbnz	r1, 801d346 <__lo0bits+0x32>
 801d342:	3208      	adds	r2, #8
 801d344:	0a1b      	lsrs	r3, r3, #8
 801d346:	0719      	lsls	r1, r3, #28
 801d348:	bf04      	itt	eq
 801d34a:	091b      	lsreq	r3, r3, #4
 801d34c:	3204      	addeq	r2, #4
 801d34e:	0799      	lsls	r1, r3, #30
 801d350:	bf04      	itt	eq
 801d352:	089b      	lsreq	r3, r3, #2
 801d354:	3202      	addeq	r2, #2
 801d356:	07d9      	lsls	r1, r3, #31
 801d358:	d403      	bmi.n	801d362 <__lo0bits+0x4e>
 801d35a:	085b      	lsrs	r3, r3, #1
 801d35c:	f102 0201 	add.w	r2, r2, #1
 801d360:	d003      	beq.n	801d36a <__lo0bits+0x56>
 801d362:	6003      	str	r3, [r0, #0]
 801d364:	e7e5      	b.n	801d332 <__lo0bits+0x1e>
 801d366:	2200      	movs	r2, #0
 801d368:	e7e3      	b.n	801d332 <__lo0bits+0x1e>
 801d36a:	2220      	movs	r2, #32
 801d36c:	e7e1      	b.n	801d332 <__lo0bits+0x1e>
	...

0801d370 <__i2b>:
 801d370:	b510      	push	{r4, lr}
 801d372:	460c      	mov	r4, r1
 801d374:	2101      	movs	r1, #1
 801d376:	f7ff febb 	bl	801d0f0 <_Balloc>
 801d37a:	4602      	mov	r2, r0
 801d37c:	b928      	cbnz	r0, 801d38a <__i2b+0x1a>
 801d37e:	4b05      	ldr	r3, [pc, #20]	; (801d394 <__i2b+0x24>)
 801d380:	4805      	ldr	r0, [pc, #20]	; (801d398 <__i2b+0x28>)
 801d382:	f240 1145 	movw	r1, #325	; 0x145
 801d386:	f001 ff93 	bl	801f2b0 <__assert_func>
 801d38a:	2301      	movs	r3, #1
 801d38c:	6144      	str	r4, [r0, #20]
 801d38e:	6103      	str	r3, [r0, #16]
 801d390:	bd10      	pop	{r4, pc}
 801d392:	bf00      	nop
 801d394:	08020937 	.word	0x08020937
 801d398:	08020948 	.word	0x08020948

0801d39c <__multiply>:
 801d39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3a0:	4691      	mov	r9, r2
 801d3a2:	690a      	ldr	r2, [r1, #16]
 801d3a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d3a8:	429a      	cmp	r2, r3
 801d3aa:	bfb8      	it	lt
 801d3ac:	460b      	movlt	r3, r1
 801d3ae:	460c      	mov	r4, r1
 801d3b0:	bfbc      	itt	lt
 801d3b2:	464c      	movlt	r4, r9
 801d3b4:	4699      	movlt	r9, r3
 801d3b6:	6927      	ldr	r7, [r4, #16]
 801d3b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d3bc:	68a3      	ldr	r3, [r4, #8]
 801d3be:	6861      	ldr	r1, [r4, #4]
 801d3c0:	eb07 060a 	add.w	r6, r7, sl
 801d3c4:	42b3      	cmp	r3, r6
 801d3c6:	b085      	sub	sp, #20
 801d3c8:	bfb8      	it	lt
 801d3ca:	3101      	addlt	r1, #1
 801d3cc:	f7ff fe90 	bl	801d0f0 <_Balloc>
 801d3d0:	b930      	cbnz	r0, 801d3e0 <__multiply+0x44>
 801d3d2:	4602      	mov	r2, r0
 801d3d4:	4b44      	ldr	r3, [pc, #272]	; (801d4e8 <__multiply+0x14c>)
 801d3d6:	4845      	ldr	r0, [pc, #276]	; (801d4ec <__multiply+0x150>)
 801d3d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801d3dc:	f001 ff68 	bl	801f2b0 <__assert_func>
 801d3e0:	f100 0514 	add.w	r5, r0, #20
 801d3e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d3e8:	462b      	mov	r3, r5
 801d3ea:	2200      	movs	r2, #0
 801d3ec:	4543      	cmp	r3, r8
 801d3ee:	d321      	bcc.n	801d434 <__multiply+0x98>
 801d3f0:	f104 0314 	add.w	r3, r4, #20
 801d3f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d3f8:	f109 0314 	add.w	r3, r9, #20
 801d3fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801d400:	9202      	str	r2, [sp, #8]
 801d402:	1b3a      	subs	r2, r7, r4
 801d404:	3a15      	subs	r2, #21
 801d406:	f022 0203 	bic.w	r2, r2, #3
 801d40a:	3204      	adds	r2, #4
 801d40c:	f104 0115 	add.w	r1, r4, #21
 801d410:	428f      	cmp	r7, r1
 801d412:	bf38      	it	cc
 801d414:	2204      	movcc	r2, #4
 801d416:	9201      	str	r2, [sp, #4]
 801d418:	9a02      	ldr	r2, [sp, #8]
 801d41a:	9303      	str	r3, [sp, #12]
 801d41c:	429a      	cmp	r2, r3
 801d41e:	d80c      	bhi.n	801d43a <__multiply+0x9e>
 801d420:	2e00      	cmp	r6, #0
 801d422:	dd03      	ble.n	801d42c <__multiply+0x90>
 801d424:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d428:	2b00      	cmp	r3, #0
 801d42a:	d05b      	beq.n	801d4e4 <__multiply+0x148>
 801d42c:	6106      	str	r6, [r0, #16]
 801d42e:	b005      	add	sp, #20
 801d430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d434:	f843 2b04 	str.w	r2, [r3], #4
 801d438:	e7d8      	b.n	801d3ec <__multiply+0x50>
 801d43a:	f8b3 a000 	ldrh.w	sl, [r3]
 801d43e:	f1ba 0f00 	cmp.w	sl, #0
 801d442:	d024      	beq.n	801d48e <__multiply+0xf2>
 801d444:	f104 0e14 	add.w	lr, r4, #20
 801d448:	46a9      	mov	r9, r5
 801d44a:	f04f 0c00 	mov.w	ip, #0
 801d44e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d452:	f8d9 1000 	ldr.w	r1, [r9]
 801d456:	fa1f fb82 	uxth.w	fp, r2
 801d45a:	b289      	uxth	r1, r1
 801d45c:	fb0a 110b 	mla	r1, sl, fp, r1
 801d460:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d464:	f8d9 2000 	ldr.w	r2, [r9]
 801d468:	4461      	add	r1, ip
 801d46a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d46e:	fb0a c20b 	mla	r2, sl, fp, ip
 801d472:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d476:	b289      	uxth	r1, r1
 801d478:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d47c:	4577      	cmp	r7, lr
 801d47e:	f849 1b04 	str.w	r1, [r9], #4
 801d482:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d486:	d8e2      	bhi.n	801d44e <__multiply+0xb2>
 801d488:	9a01      	ldr	r2, [sp, #4]
 801d48a:	f845 c002 	str.w	ip, [r5, r2]
 801d48e:	9a03      	ldr	r2, [sp, #12]
 801d490:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d494:	3304      	adds	r3, #4
 801d496:	f1b9 0f00 	cmp.w	r9, #0
 801d49a:	d021      	beq.n	801d4e0 <__multiply+0x144>
 801d49c:	6829      	ldr	r1, [r5, #0]
 801d49e:	f104 0c14 	add.w	ip, r4, #20
 801d4a2:	46ae      	mov	lr, r5
 801d4a4:	f04f 0a00 	mov.w	sl, #0
 801d4a8:	f8bc b000 	ldrh.w	fp, [ip]
 801d4ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d4b0:	fb09 220b 	mla	r2, r9, fp, r2
 801d4b4:	4452      	add	r2, sl
 801d4b6:	b289      	uxth	r1, r1
 801d4b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d4bc:	f84e 1b04 	str.w	r1, [lr], #4
 801d4c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 801d4c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d4c8:	f8be 1000 	ldrh.w	r1, [lr]
 801d4cc:	fb09 110a 	mla	r1, r9, sl, r1
 801d4d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801d4d4:	4567      	cmp	r7, ip
 801d4d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d4da:	d8e5      	bhi.n	801d4a8 <__multiply+0x10c>
 801d4dc:	9a01      	ldr	r2, [sp, #4]
 801d4de:	50a9      	str	r1, [r5, r2]
 801d4e0:	3504      	adds	r5, #4
 801d4e2:	e799      	b.n	801d418 <__multiply+0x7c>
 801d4e4:	3e01      	subs	r6, #1
 801d4e6:	e79b      	b.n	801d420 <__multiply+0x84>
 801d4e8:	08020937 	.word	0x08020937
 801d4ec:	08020948 	.word	0x08020948

0801d4f0 <__pow5mult>:
 801d4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d4f4:	4615      	mov	r5, r2
 801d4f6:	f012 0203 	ands.w	r2, r2, #3
 801d4fa:	4606      	mov	r6, r0
 801d4fc:	460f      	mov	r7, r1
 801d4fe:	d007      	beq.n	801d510 <__pow5mult+0x20>
 801d500:	4c25      	ldr	r4, [pc, #148]	; (801d598 <__pow5mult+0xa8>)
 801d502:	3a01      	subs	r2, #1
 801d504:	2300      	movs	r3, #0
 801d506:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d50a:	f7ff fe53 	bl	801d1b4 <__multadd>
 801d50e:	4607      	mov	r7, r0
 801d510:	10ad      	asrs	r5, r5, #2
 801d512:	d03d      	beq.n	801d590 <__pow5mult+0xa0>
 801d514:	69f4      	ldr	r4, [r6, #28]
 801d516:	b97c      	cbnz	r4, 801d538 <__pow5mult+0x48>
 801d518:	2010      	movs	r0, #16
 801d51a:	f7ff fd35 	bl	801cf88 <malloc>
 801d51e:	4602      	mov	r2, r0
 801d520:	61f0      	str	r0, [r6, #28]
 801d522:	b928      	cbnz	r0, 801d530 <__pow5mult+0x40>
 801d524:	4b1d      	ldr	r3, [pc, #116]	; (801d59c <__pow5mult+0xac>)
 801d526:	481e      	ldr	r0, [pc, #120]	; (801d5a0 <__pow5mult+0xb0>)
 801d528:	f240 11b3 	movw	r1, #435	; 0x1b3
 801d52c:	f001 fec0 	bl	801f2b0 <__assert_func>
 801d530:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d534:	6004      	str	r4, [r0, #0]
 801d536:	60c4      	str	r4, [r0, #12]
 801d538:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801d53c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d540:	b94c      	cbnz	r4, 801d556 <__pow5mult+0x66>
 801d542:	f240 2171 	movw	r1, #625	; 0x271
 801d546:	4630      	mov	r0, r6
 801d548:	f7ff ff12 	bl	801d370 <__i2b>
 801d54c:	2300      	movs	r3, #0
 801d54e:	f8c8 0008 	str.w	r0, [r8, #8]
 801d552:	4604      	mov	r4, r0
 801d554:	6003      	str	r3, [r0, #0]
 801d556:	f04f 0900 	mov.w	r9, #0
 801d55a:	07eb      	lsls	r3, r5, #31
 801d55c:	d50a      	bpl.n	801d574 <__pow5mult+0x84>
 801d55e:	4639      	mov	r1, r7
 801d560:	4622      	mov	r2, r4
 801d562:	4630      	mov	r0, r6
 801d564:	f7ff ff1a 	bl	801d39c <__multiply>
 801d568:	4639      	mov	r1, r7
 801d56a:	4680      	mov	r8, r0
 801d56c:	4630      	mov	r0, r6
 801d56e:	f7ff fdff 	bl	801d170 <_Bfree>
 801d572:	4647      	mov	r7, r8
 801d574:	106d      	asrs	r5, r5, #1
 801d576:	d00b      	beq.n	801d590 <__pow5mult+0xa0>
 801d578:	6820      	ldr	r0, [r4, #0]
 801d57a:	b938      	cbnz	r0, 801d58c <__pow5mult+0x9c>
 801d57c:	4622      	mov	r2, r4
 801d57e:	4621      	mov	r1, r4
 801d580:	4630      	mov	r0, r6
 801d582:	f7ff ff0b 	bl	801d39c <__multiply>
 801d586:	6020      	str	r0, [r4, #0]
 801d588:	f8c0 9000 	str.w	r9, [r0]
 801d58c:	4604      	mov	r4, r0
 801d58e:	e7e4      	b.n	801d55a <__pow5mult+0x6a>
 801d590:	4638      	mov	r0, r7
 801d592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d596:	bf00      	nop
 801d598:	08020a98 	.word	0x08020a98
 801d59c:	080208c8 	.word	0x080208c8
 801d5a0:	08020948 	.word	0x08020948

0801d5a4 <__lshift>:
 801d5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d5a8:	460c      	mov	r4, r1
 801d5aa:	6849      	ldr	r1, [r1, #4]
 801d5ac:	6923      	ldr	r3, [r4, #16]
 801d5ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d5b2:	68a3      	ldr	r3, [r4, #8]
 801d5b4:	4607      	mov	r7, r0
 801d5b6:	4691      	mov	r9, r2
 801d5b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d5bc:	f108 0601 	add.w	r6, r8, #1
 801d5c0:	42b3      	cmp	r3, r6
 801d5c2:	db0b      	blt.n	801d5dc <__lshift+0x38>
 801d5c4:	4638      	mov	r0, r7
 801d5c6:	f7ff fd93 	bl	801d0f0 <_Balloc>
 801d5ca:	4605      	mov	r5, r0
 801d5cc:	b948      	cbnz	r0, 801d5e2 <__lshift+0x3e>
 801d5ce:	4602      	mov	r2, r0
 801d5d0:	4b28      	ldr	r3, [pc, #160]	; (801d674 <__lshift+0xd0>)
 801d5d2:	4829      	ldr	r0, [pc, #164]	; (801d678 <__lshift+0xd4>)
 801d5d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801d5d8:	f001 fe6a 	bl	801f2b0 <__assert_func>
 801d5dc:	3101      	adds	r1, #1
 801d5de:	005b      	lsls	r3, r3, #1
 801d5e0:	e7ee      	b.n	801d5c0 <__lshift+0x1c>
 801d5e2:	2300      	movs	r3, #0
 801d5e4:	f100 0114 	add.w	r1, r0, #20
 801d5e8:	f100 0210 	add.w	r2, r0, #16
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	4553      	cmp	r3, sl
 801d5f0:	db33      	blt.n	801d65a <__lshift+0xb6>
 801d5f2:	6920      	ldr	r0, [r4, #16]
 801d5f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d5f8:	f104 0314 	add.w	r3, r4, #20
 801d5fc:	f019 091f 	ands.w	r9, r9, #31
 801d600:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d604:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d608:	d02b      	beq.n	801d662 <__lshift+0xbe>
 801d60a:	f1c9 0e20 	rsb	lr, r9, #32
 801d60e:	468a      	mov	sl, r1
 801d610:	2200      	movs	r2, #0
 801d612:	6818      	ldr	r0, [r3, #0]
 801d614:	fa00 f009 	lsl.w	r0, r0, r9
 801d618:	4310      	orrs	r0, r2
 801d61a:	f84a 0b04 	str.w	r0, [sl], #4
 801d61e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d622:	459c      	cmp	ip, r3
 801d624:	fa22 f20e 	lsr.w	r2, r2, lr
 801d628:	d8f3      	bhi.n	801d612 <__lshift+0x6e>
 801d62a:	ebac 0304 	sub.w	r3, ip, r4
 801d62e:	3b15      	subs	r3, #21
 801d630:	f023 0303 	bic.w	r3, r3, #3
 801d634:	3304      	adds	r3, #4
 801d636:	f104 0015 	add.w	r0, r4, #21
 801d63a:	4584      	cmp	ip, r0
 801d63c:	bf38      	it	cc
 801d63e:	2304      	movcc	r3, #4
 801d640:	50ca      	str	r2, [r1, r3]
 801d642:	b10a      	cbz	r2, 801d648 <__lshift+0xa4>
 801d644:	f108 0602 	add.w	r6, r8, #2
 801d648:	3e01      	subs	r6, #1
 801d64a:	4638      	mov	r0, r7
 801d64c:	612e      	str	r6, [r5, #16]
 801d64e:	4621      	mov	r1, r4
 801d650:	f7ff fd8e 	bl	801d170 <_Bfree>
 801d654:	4628      	mov	r0, r5
 801d656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d65a:	f842 0f04 	str.w	r0, [r2, #4]!
 801d65e:	3301      	adds	r3, #1
 801d660:	e7c5      	b.n	801d5ee <__lshift+0x4a>
 801d662:	3904      	subs	r1, #4
 801d664:	f853 2b04 	ldr.w	r2, [r3], #4
 801d668:	f841 2f04 	str.w	r2, [r1, #4]!
 801d66c:	459c      	cmp	ip, r3
 801d66e:	d8f9      	bhi.n	801d664 <__lshift+0xc0>
 801d670:	e7ea      	b.n	801d648 <__lshift+0xa4>
 801d672:	bf00      	nop
 801d674:	08020937 	.word	0x08020937
 801d678:	08020948 	.word	0x08020948

0801d67c <__mcmp>:
 801d67c:	b530      	push	{r4, r5, lr}
 801d67e:	6902      	ldr	r2, [r0, #16]
 801d680:	690c      	ldr	r4, [r1, #16]
 801d682:	1b12      	subs	r2, r2, r4
 801d684:	d10e      	bne.n	801d6a4 <__mcmp+0x28>
 801d686:	f100 0314 	add.w	r3, r0, #20
 801d68a:	3114      	adds	r1, #20
 801d68c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d690:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d694:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d698:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d69c:	42a5      	cmp	r5, r4
 801d69e:	d003      	beq.n	801d6a8 <__mcmp+0x2c>
 801d6a0:	d305      	bcc.n	801d6ae <__mcmp+0x32>
 801d6a2:	2201      	movs	r2, #1
 801d6a4:	4610      	mov	r0, r2
 801d6a6:	bd30      	pop	{r4, r5, pc}
 801d6a8:	4283      	cmp	r3, r0
 801d6aa:	d3f3      	bcc.n	801d694 <__mcmp+0x18>
 801d6ac:	e7fa      	b.n	801d6a4 <__mcmp+0x28>
 801d6ae:	f04f 32ff 	mov.w	r2, #4294967295
 801d6b2:	e7f7      	b.n	801d6a4 <__mcmp+0x28>

0801d6b4 <__mdiff>:
 801d6b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6b8:	460c      	mov	r4, r1
 801d6ba:	4606      	mov	r6, r0
 801d6bc:	4611      	mov	r1, r2
 801d6be:	4620      	mov	r0, r4
 801d6c0:	4690      	mov	r8, r2
 801d6c2:	f7ff ffdb 	bl	801d67c <__mcmp>
 801d6c6:	1e05      	subs	r5, r0, #0
 801d6c8:	d110      	bne.n	801d6ec <__mdiff+0x38>
 801d6ca:	4629      	mov	r1, r5
 801d6cc:	4630      	mov	r0, r6
 801d6ce:	f7ff fd0f 	bl	801d0f0 <_Balloc>
 801d6d2:	b930      	cbnz	r0, 801d6e2 <__mdiff+0x2e>
 801d6d4:	4b3a      	ldr	r3, [pc, #232]	; (801d7c0 <__mdiff+0x10c>)
 801d6d6:	4602      	mov	r2, r0
 801d6d8:	f240 2137 	movw	r1, #567	; 0x237
 801d6dc:	4839      	ldr	r0, [pc, #228]	; (801d7c4 <__mdiff+0x110>)
 801d6de:	f001 fde7 	bl	801f2b0 <__assert_func>
 801d6e2:	2301      	movs	r3, #1
 801d6e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d6e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6ec:	bfa4      	itt	ge
 801d6ee:	4643      	movge	r3, r8
 801d6f0:	46a0      	movge	r8, r4
 801d6f2:	4630      	mov	r0, r6
 801d6f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d6f8:	bfa6      	itte	ge
 801d6fa:	461c      	movge	r4, r3
 801d6fc:	2500      	movge	r5, #0
 801d6fe:	2501      	movlt	r5, #1
 801d700:	f7ff fcf6 	bl	801d0f0 <_Balloc>
 801d704:	b920      	cbnz	r0, 801d710 <__mdiff+0x5c>
 801d706:	4b2e      	ldr	r3, [pc, #184]	; (801d7c0 <__mdiff+0x10c>)
 801d708:	4602      	mov	r2, r0
 801d70a:	f240 2145 	movw	r1, #581	; 0x245
 801d70e:	e7e5      	b.n	801d6dc <__mdiff+0x28>
 801d710:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d714:	6926      	ldr	r6, [r4, #16]
 801d716:	60c5      	str	r5, [r0, #12]
 801d718:	f104 0914 	add.w	r9, r4, #20
 801d71c:	f108 0514 	add.w	r5, r8, #20
 801d720:	f100 0e14 	add.w	lr, r0, #20
 801d724:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d728:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d72c:	f108 0210 	add.w	r2, r8, #16
 801d730:	46f2      	mov	sl, lr
 801d732:	2100      	movs	r1, #0
 801d734:	f859 3b04 	ldr.w	r3, [r9], #4
 801d738:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d73c:	fa11 f88b 	uxtah	r8, r1, fp
 801d740:	b299      	uxth	r1, r3
 801d742:	0c1b      	lsrs	r3, r3, #16
 801d744:	eba8 0801 	sub.w	r8, r8, r1
 801d748:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d74c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d750:	fa1f f888 	uxth.w	r8, r8
 801d754:	1419      	asrs	r1, r3, #16
 801d756:	454e      	cmp	r6, r9
 801d758:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d75c:	f84a 3b04 	str.w	r3, [sl], #4
 801d760:	d8e8      	bhi.n	801d734 <__mdiff+0x80>
 801d762:	1b33      	subs	r3, r6, r4
 801d764:	3b15      	subs	r3, #21
 801d766:	f023 0303 	bic.w	r3, r3, #3
 801d76a:	3304      	adds	r3, #4
 801d76c:	3415      	adds	r4, #21
 801d76e:	42a6      	cmp	r6, r4
 801d770:	bf38      	it	cc
 801d772:	2304      	movcc	r3, #4
 801d774:	441d      	add	r5, r3
 801d776:	4473      	add	r3, lr
 801d778:	469e      	mov	lr, r3
 801d77a:	462e      	mov	r6, r5
 801d77c:	4566      	cmp	r6, ip
 801d77e:	d30e      	bcc.n	801d79e <__mdiff+0xea>
 801d780:	f10c 0203 	add.w	r2, ip, #3
 801d784:	1b52      	subs	r2, r2, r5
 801d786:	f022 0203 	bic.w	r2, r2, #3
 801d78a:	3d03      	subs	r5, #3
 801d78c:	45ac      	cmp	ip, r5
 801d78e:	bf38      	it	cc
 801d790:	2200      	movcc	r2, #0
 801d792:	4413      	add	r3, r2
 801d794:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801d798:	b17a      	cbz	r2, 801d7ba <__mdiff+0x106>
 801d79a:	6107      	str	r7, [r0, #16]
 801d79c:	e7a4      	b.n	801d6e8 <__mdiff+0x34>
 801d79e:	f856 8b04 	ldr.w	r8, [r6], #4
 801d7a2:	fa11 f288 	uxtah	r2, r1, r8
 801d7a6:	1414      	asrs	r4, r2, #16
 801d7a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d7ac:	b292      	uxth	r2, r2
 801d7ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d7b2:	f84e 2b04 	str.w	r2, [lr], #4
 801d7b6:	1421      	asrs	r1, r4, #16
 801d7b8:	e7e0      	b.n	801d77c <__mdiff+0xc8>
 801d7ba:	3f01      	subs	r7, #1
 801d7bc:	e7ea      	b.n	801d794 <__mdiff+0xe0>
 801d7be:	bf00      	nop
 801d7c0:	08020937 	.word	0x08020937
 801d7c4:	08020948 	.word	0x08020948

0801d7c8 <__ulp>:
 801d7c8:	b082      	sub	sp, #8
 801d7ca:	ed8d 0b00 	vstr	d0, [sp]
 801d7ce:	9a01      	ldr	r2, [sp, #4]
 801d7d0:	4b0f      	ldr	r3, [pc, #60]	; (801d810 <__ulp+0x48>)
 801d7d2:	4013      	ands	r3, r2
 801d7d4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801d7d8:	2b00      	cmp	r3, #0
 801d7da:	dc08      	bgt.n	801d7ee <__ulp+0x26>
 801d7dc:	425b      	negs	r3, r3
 801d7de:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801d7e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d7e6:	da04      	bge.n	801d7f2 <__ulp+0x2a>
 801d7e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801d7ec:	4113      	asrs	r3, r2
 801d7ee:	2200      	movs	r2, #0
 801d7f0:	e008      	b.n	801d804 <__ulp+0x3c>
 801d7f2:	f1a2 0314 	sub.w	r3, r2, #20
 801d7f6:	2b1e      	cmp	r3, #30
 801d7f8:	bfda      	itte	le
 801d7fa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801d7fe:	40da      	lsrle	r2, r3
 801d800:	2201      	movgt	r2, #1
 801d802:	2300      	movs	r3, #0
 801d804:	4619      	mov	r1, r3
 801d806:	4610      	mov	r0, r2
 801d808:	ec41 0b10 	vmov	d0, r0, r1
 801d80c:	b002      	add	sp, #8
 801d80e:	4770      	bx	lr
 801d810:	7ff00000 	.word	0x7ff00000

0801d814 <__b2d>:
 801d814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d818:	6906      	ldr	r6, [r0, #16]
 801d81a:	f100 0814 	add.w	r8, r0, #20
 801d81e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d822:	1f37      	subs	r7, r6, #4
 801d824:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d828:	4610      	mov	r0, r2
 801d82a:	f7ff fd53 	bl	801d2d4 <__hi0bits>
 801d82e:	f1c0 0320 	rsb	r3, r0, #32
 801d832:	280a      	cmp	r0, #10
 801d834:	600b      	str	r3, [r1, #0]
 801d836:	491b      	ldr	r1, [pc, #108]	; (801d8a4 <__b2d+0x90>)
 801d838:	dc15      	bgt.n	801d866 <__b2d+0x52>
 801d83a:	f1c0 0c0b 	rsb	ip, r0, #11
 801d83e:	fa22 f30c 	lsr.w	r3, r2, ip
 801d842:	45b8      	cmp	r8, r7
 801d844:	ea43 0501 	orr.w	r5, r3, r1
 801d848:	bf34      	ite	cc
 801d84a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d84e:	2300      	movcs	r3, #0
 801d850:	3015      	adds	r0, #21
 801d852:	fa02 f000 	lsl.w	r0, r2, r0
 801d856:	fa23 f30c 	lsr.w	r3, r3, ip
 801d85a:	4303      	orrs	r3, r0
 801d85c:	461c      	mov	r4, r3
 801d85e:	ec45 4b10 	vmov	d0, r4, r5
 801d862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d866:	45b8      	cmp	r8, r7
 801d868:	bf3a      	itte	cc
 801d86a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d86e:	f1a6 0708 	subcc.w	r7, r6, #8
 801d872:	2300      	movcs	r3, #0
 801d874:	380b      	subs	r0, #11
 801d876:	d012      	beq.n	801d89e <__b2d+0x8a>
 801d878:	f1c0 0120 	rsb	r1, r0, #32
 801d87c:	fa23 f401 	lsr.w	r4, r3, r1
 801d880:	4082      	lsls	r2, r0
 801d882:	4322      	orrs	r2, r4
 801d884:	4547      	cmp	r7, r8
 801d886:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801d88a:	bf8c      	ite	hi
 801d88c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d890:	2200      	movls	r2, #0
 801d892:	4083      	lsls	r3, r0
 801d894:	40ca      	lsrs	r2, r1
 801d896:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d89a:	4313      	orrs	r3, r2
 801d89c:	e7de      	b.n	801d85c <__b2d+0x48>
 801d89e:	ea42 0501 	orr.w	r5, r2, r1
 801d8a2:	e7db      	b.n	801d85c <__b2d+0x48>
 801d8a4:	3ff00000 	.word	0x3ff00000

0801d8a8 <__d2b>:
 801d8a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d8ac:	460f      	mov	r7, r1
 801d8ae:	2101      	movs	r1, #1
 801d8b0:	ec59 8b10 	vmov	r8, r9, d0
 801d8b4:	4616      	mov	r6, r2
 801d8b6:	f7ff fc1b 	bl	801d0f0 <_Balloc>
 801d8ba:	4604      	mov	r4, r0
 801d8bc:	b930      	cbnz	r0, 801d8cc <__d2b+0x24>
 801d8be:	4602      	mov	r2, r0
 801d8c0:	4b24      	ldr	r3, [pc, #144]	; (801d954 <__d2b+0xac>)
 801d8c2:	4825      	ldr	r0, [pc, #148]	; (801d958 <__d2b+0xb0>)
 801d8c4:	f240 310f 	movw	r1, #783	; 0x30f
 801d8c8:	f001 fcf2 	bl	801f2b0 <__assert_func>
 801d8cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d8d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d8d4:	bb2d      	cbnz	r5, 801d922 <__d2b+0x7a>
 801d8d6:	9301      	str	r3, [sp, #4]
 801d8d8:	f1b8 0300 	subs.w	r3, r8, #0
 801d8dc:	d026      	beq.n	801d92c <__d2b+0x84>
 801d8de:	4668      	mov	r0, sp
 801d8e0:	9300      	str	r3, [sp, #0]
 801d8e2:	f7ff fd17 	bl	801d314 <__lo0bits>
 801d8e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d8ea:	b1e8      	cbz	r0, 801d928 <__d2b+0x80>
 801d8ec:	f1c0 0320 	rsb	r3, r0, #32
 801d8f0:	fa02 f303 	lsl.w	r3, r2, r3
 801d8f4:	430b      	orrs	r3, r1
 801d8f6:	40c2      	lsrs	r2, r0
 801d8f8:	6163      	str	r3, [r4, #20]
 801d8fa:	9201      	str	r2, [sp, #4]
 801d8fc:	9b01      	ldr	r3, [sp, #4]
 801d8fe:	61a3      	str	r3, [r4, #24]
 801d900:	2b00      	cmp	r3, #0
 801d902:	bf14      	ite	ne
 801d904:	2202      	movne	r2, #2
 801d906:	2201      	moveq	r2, #1
 801d908:	6122      	str	r2, [r4, #16]
 801d90a:	b1bd      	cbz	r5, 801d93c <__d2b+0x94>
 801d90c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d910:	4405      	add	r5, r0
 801d912:	603d      	str	r5, [r7, #0]
 801d914:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d918:	6030      	str	r0, [r6, #0]
 801d91a:	4620      	mov	r0, r4
 801d91c:	b003      	add	sp, #12
 801d91e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d926:	e7d6      	b.n	801d8d6 <__d2b+0x2e>
 801d928:	6161      	str	r1, [r4, #20]
 801d92a:	e7e7      	b.n	801d8fc <__d2b+0x54>
 801d92c:	a801      	add	r0, sp, #4
 801d92e:	f7ff fcf1 	bl	801d314 <__lo0bits>
 801d932:	9b01      	ldr	r3, [sp, #4]
 801d934:	6163      	str	r3, [r4, #20]
 801d936:	3020      	adds	r0, #32
 801d938:	2201      	movs	r2, #1
 801d93a:	e7e5      	b.n	801d908 <__d2b+0x60>
 801d93c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d940:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d944:	6038      	str	r0, [r7, #0]
 801d946:	6918      	ldr	r0, [r3, #16]
 801d948:	f7ff fcc4 	bl	801d2d4 <__hi0bits>
 801d94c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d950:	e7e2      	b.n	801d918 <__d2b+0x70>
 801d952:	bf00      	nop
 801d954:	08020937 	.word	0x08020937
 801d958:	08020948 	.word	0x08020948

0801d95c <__ratio>:
 801d95c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d960:	4688      	mov	r8, r1
 801d962:	4669      	mov	r1, sp
 801d964:	4681      	mov	r9, r0
 801d966:	f7ff ff55 	bl	801d814 <__b2d>
 801d96a:	a901      	add	r1, sp, #4
 801d96c:	4640      	mov	r0, r8
 801d96e:	ec55 4b10 	vmov	r4, r5, d0
 801d972:	ee10 aa10 	vmov	sl, s0
 801d976:	f7ff ff4d 	bl	801d814 <__b2d>
 801d97a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801d97e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801d982:	1ad2      	subs	r2, r2, r3
 801d984:	e9dd 3100 	ldrd	r3, r1, [sp]
 801d988:	1a5b      	subs	r3, r3, r1
 801d98a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801d98e:	ec57 6b10 	vmov	r6, r7, d0
 801d992:	2b00      	cmp	r3, #0
 801d994:	bfd6      	itet	le
 801d996:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d99a:	462a      	movgt	r2, r5
 801d99c:	463a      	movle	r2, r7
 801d99e:	46ab      	mov	fp, r5
 801d9a0:	bfd6      	itet	le
 801d9a2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801d9a6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801d9aa:	ee00 3a90 	vmovle	s1, r3
 801d9ae:	ec4b ab17 	vmov	d7, sl, fp
 801d9b2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801d9b6:	b003      	add	sp, #12
 801d9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d9bc <__copybits>:
 801d9bc:	3901      	subs	r1, #1
 801d9be:	b570      	push	{r4, r5, r6, lr}
 801d9c0:	1149      	asrs	r1, r1, #5
 801d9c2:	6914      	ldr	r4, [r2, #16]
 801d9c4:	3101      	adds	r1, #1
 801d9c6:	f102 0314 	add.w	r3, r2, #20
 801d9ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d9ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d9d2:	1f05      	subs	r5, r0, #4
 801d9d4:	42a3      	cmp	r3, r4
 801d9d6:	d30c      	bcc.n	801d9f2 <__copybits+0x36>
 801d9d8:	1aa3      	subs	r3, r4, r2
 801d9da:	3b11      	subs	r3, #17
 801d9dc:	f023 0303 	bic.w	r3, r3, #3
 801d9e0:	3211      	adds	r2, #17
 801d9e2:	42a2      	cmp	r2, r4
 801d9e4:	bf88      	it	hi
 801d9e6:	2300      	movhi	r3, #0
 801d9e8:	4418      	add	r0, r3
 801d9ea:	2300      	movs	r3, #0
 801d9ec:	4288      	cmp	r0, r1
 801d9ee:	d305      	bcc.n	801d9fc <__copybits+0x40>
 801d9f0:	bd70      	pop	{r4, r5, r6, pc}
 801d9f2:	f853 6b04 	ldr.w	r6, [r3], #4
 801d9f6:	f845 6f04 	str.w	r6, [r5, #4]!
 801d9fa:	e7eb      	b.n	801d9d4 <__copybits+0x18>
 801d9fc:	f840 3b04 	str.w	r3, [r0], #4
 801da00:	e7f4      	b.n	801d9ec <__copybits+0x30>

0801da02 <__any_on>:
 801da02:	f100 0214 	add.w	r2, r0, #20
 801da06:	6900      	ldr	r0, [r0, #16]
 801da08:	114b      	asrs	r3, r1, #5
 801da0a:	4298      	cmp	r0, r3
 801da0c:	b510      	push	{r4, lr}
 801da0e:	db11      	blt.n	801da34 <__any_on+0x32>
 801da10:	dd0a      	ble.n	801da28 <__any_on+0x26>
 801da12:	f011 011f 	ands.w	r1, r1, #31
 801da16:	d007      	beq.n	801da28 <__any_on+0x26>
 801da18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801da1c:	fa24 f001 	lsr.w	r0, r4, r1
 801da20:	fa00 f101 	lsl.w	r1, r0, r1
 801da24:	428c      	cmp	r4, r1
 801da26:	d10b      	bne.n	801da40 <__any_on+0x3e>
 801da28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801da2c:	4293      	cmp	r3, r2
 801da2e:	d803      	bhi.n	801da38 <__any_on+0x36>
 801da30:	2000      	movs	r0, #0
 801da32:	bd10      	pop	{r4, pc}
 801da34:	4603      	mov	r3, r0
 801da36:	e7f7      	b.n	801da28 <__any_on+0x26>
 801da38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801da3c:	2900      	cmp	r1, #0
 801da3e:	d0f5      	beq.n	801da2c <__any_on+0x2a>
 801da40:	2001      	movs	r0, #1
 801da42:	e7f6      	b.n	801da32 <__any_on+0x30>

0801da44 <sulp>:
 801da44:	b570      	push	{r4, r5, r6, lr}
 801da46:	4604      	mov	r4, r0
 801da48:	460d      	mov	r5, r1
 801da4a:	4616      	mov	r6, r2
 801da4c:	ec45 4b10 	vmov	d0, r4, r5
 801da50:	f7ff feba 	bl	801d7c8 <__ulp>
 801da54:	b17e      	cbz	r6, 801da76 <sulp+0x32>
 801da56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801da5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801da5e:	2b00      	cmp	r3, #0
 801da60:	dd09      	ble.n	801da76 <sulp+0x32>
 801da62:	051b      	lsls	r3, r3, #20
 801da64:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801da68:	2000      	movs	r0, #0
 801da6a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801da6e:	ec41 0b17 	vmov	d7, r0, r1
 801da72:	ee20 0b07 	vmul.f64	d0, d0, d7
 801da76:	bd70      	pop	{r4, r5, r6, pc}

0801da78 <_strtod_l>:
 801da78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da7c:	ed2d 8b0e 	vpush	{d8-d14}
 801da80:	b097      	sub	sp, #92	; 0x5c
 801da82:	4604      	mov	r4, r0
 801da84:	920d      	str	r2, [sp, #52]	; 0x34
 801da86:	2200      	movs	r2, #0
 801da88:	9212      	str	r2, [sp, #72]	; 0x48
 801da8a:	468a      	mov	sl, r1
 801da8c:	f04f 0800 	mov.w	r8, #0
 801da90:	f04f 0900 	mov.w	r9, #0
 801da94:	460a      	mov	r2, r1
 801da96:	9211      	str	r2, [sp, #68]	; 0x44
 801da98:	7811      	ldrb	r1, [r2, #0]
 801da9a:	292b      	cmp	r1, #43	; 0x2b
 801da9c:	d04c      	beq.n	801db38 <_strtod_l+0xc0>
 801da9e:	d839      	bhi.n	801db14 <_strtod_l+0x9c>
 801daa0:	290d      	cmp	r1, #13
 801daa2:	d833      	bhi.n	801db0c <_strtod_l+0x94>
 801daa4:	2908      	cmp	r1, #8
 801daa6:	d833      	bhi.n	801db10 <_strtod_l+0x98>
 801daa8:	2900      	cmp	r1, #0
 801daaa:	d03c      	beq.n	801db26 <_strtod_l+0xae>
 801daac:	2200      	movs	r2, #0
 801daae:	9208      	str	r2, [sp, #32]
 801dab0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801dab2:	7832      	ldrb	r2, [r6, #0]
 801dab4:	2a30      	cmp	r2, #48	; 0x30
 801dab6:	f040 80b8 	bne.w	801dc2a <_strtod_l+0x1b2>
 801daba:	7872      	ldrb	r2, [r6, #1]
 801dabc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801dac0:	2a58      	cmp	r2, #88	; 0x58
 801dac2:	d170      	bne.n	801dba6 <_strtod_l+0x12e>
 801dac4:	9302      	str	r3, [sp, #8]
 801dac6:	9b08      	ldr	r3, [sp, #32]
 801dac8:	9301      	str	r3, [sp, #4]
 801daca:	ab12      	add	r3, sp, #72	; 0x48
 801dacc:	9300      	str	r3, [sp, #0]
 801dace:	4a91      	ldr	r2, [pc, #580]	; (801dd14 <_strtod_l+0x29c>)
 801dad0:	ab13      	add	r3, sp, #76	; 0x4c
 801dad2:	a911      	add	r1, sp, #68	; 0x44
 801dad4:	4620      	mov	r0, r4
 801dad6:	f001 fc87 	bl	801f3e8 <__gethex>
 801dada:	f010 070f 	ands.w	r7, r0, #15
 801dade:	4605      	mov	r5, r0
 801dae0:	d005      	beq.n	801daee <_strtod_l+0x76>
 801dae2:	2f06      	cmp	r7, #6
 801dae4:	d12a      	bne.n	801db3c <_strtod_l+0xc4>
 801dae6:	3601      	adds	r6, #1
 801dae8:	2300      	movs	r3, #0
 801daea:	9611      	str	r6, [sp, #68]	; 0x44
 801daec:	9308      	str	r3, [sp, #32]
 801daee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801daf0:	2b00      	cmp	r3, #0
 801daf2:	f040 8555 	bne.w	801e5a0 <_strtod_l+0xb28>
 801daf6:	9b08      	ldr	r3, [sp, #32]
 801daf8:	ec49 8b10 	vmov	d0, r8, r9
 801dafc:	b1cb      	cbz	r3, 801db32 <_strtod_l+0xba>
 801dafe:	eeb1 0b40 	vneg.f64	d0, d0
 801db02:	b017      	add	sp, #92	; 0x5c
 801db04:	ecbd 8b0e 	vpop	{d8-d14}
 801db08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db0c:	2920      	cmp	r1, #32
 801db0e:	d1cd      	bne.n	801daac <_strtod_l+0x34>
 801db10:	3201      	adds	r2, #1
 801db12:	e7c0      	b.n	801da96 <_strtod_l+0x1e>
 801db14:	292d      	cmp	r1, #45	; 0x2d
 801db16:	d1c9      	bne.n	801daac <_strtod_l+0x34>
 801db18:	2101      	movs	r1, #1
 801db1a:	9108      	str	r1, [sp, #32]
 801db1c:	1c51      	adds	r1, r2, #1
 801db1e:	9111      	str	r1, [sp, #68]	; 0x44
 801db20:	7852      	ldrb	r2, [r2, #1]
 801db22:	2a00      	cmp	r2, #0
 801db24:	d1c4      	bne.n	801dab0 <_strtod_l+0x38>
 801db26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801db28:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801db2c:	2b00      	cmp	r3, #0
 801db2e:	f040 8535 	bne.w	801e59c <_strtod_l+0xb24>
 801db32:	ec49 8b10 	vmov	d0, r8, r9
 801db36:	e7e4      	b.n	801db02 <_strtod_l+0x8a>
 801db38:	2100      	movs	r1, #0
 801db3a:	e7ee      	b.n	801db1a <_strtod_l+0xa2>
 801db3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801db3e:	b13a      	cbz	r2, 801db50 <_strtod_l+0xd8>
 801db40:	2135      	movs	r1, #53	; 0x35
 801db42:	a814      	add	r0, sp, #80	; 0x50
 801db44:	f7ff ff3a 	bl	801d9bc <__copybits>
 801db48:	9912      	ldr	r1, [sp, #72]	; 0x48
 801db4a:	4620      	mov	r0, r4
 801db4c:	f7ff fb10 	bl	801d170 <_Bfree>
 801db50:	1e7b      	subs	r3, r7, #1
 801db52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801db54:	2b04      	cmp	r3, #4
 801db56:	d806      	bhi.n	801db66 <_strtod_l+0xee>
 801db58:	e8df f003 	tbb	[pc, r3]
 801db5c:	201d0314 	.word	0x201d0314
 801db60:	14          	.byte	0x14
 801db61:	00          	.byte	0x00
 801db62:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801db66:	05eb      	lsls	r3, r5, #23
 801db68:	bf48      	it	mi
 801db6a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801db6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801db72:	0d1b      	lsrs	r3, r3, #20
 801db74:	051b      	lsls	r3, r3, #20
 801db76:	2b00      	cmp	r3, #0
 801db78:	d1b9      	bne.n	801daee <_strtod_l+0x76>
 801db7a:	f7fe fb79 	bl	801c270 <__errno>
 801db7e:	2322      	movs	r3, #34	; 0x22
 801db80:	6003      	str	r3, [r0, #0]
 801db82:	e7b4      	b.n	801daee <_strtod_l+0x76>
 801db84:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801db88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801db8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801db90:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801db94:	e7e7      	b.n	801db66 <_strtod_l+0xee>
 801db96:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801dd1c <_strtod_l+0x2a4>
 801db9a:	e7e4      	b.n	801db66 <_strtod_l+0xee>
 801db9c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801dba0:	f04f 38ff 	mov.w	r8, #4294967295
 801dba4:	e7df      	b.n	801db66 <_strtod_l+0xee>
 801dba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dba8:	1c5a      	adds	r2, r3, #1
 801dbaa:	9211      	str	r2, [sp, #68]	; 0x44
 801dbac:	785b      	ldrb	r3, [r3, #1]
 801dbae:	2b30      	cmp	r3, #48	; 0x30
 801dbb0:	d0f9      	beq.n	801dba6 <_strtod_l+0x12e>
 801dbb2:	2b00      	cmp	r3, #0
 801dbb4:	d09b      	beq.n	801daee <_strtod_l+0x76>
 801dbb6:	2301      	movs	r3, #1
 801dbb8:	9306      	str	r3, [sp, #24]
 801dbba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dbbc:	9309      	str	r3, [sp, #36]	; 0x24
 801dbbe:	2300      	movs	r3, #0
 801dbc0:	9305      	str	r3, [sp, #20]
 801dbc2:	9307      	str	r3, [sp, #28]
 801dbc4:	461e      	mov	r6, r3
 801dbc6:	220a      	movs	r2, #10
 801dbc8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801dbca:	7805      	ldrb	r5, [r0, #0]
 801dbcc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801dbd0:	b2d9      	uxtb	r1, r3
 801dbd2:	2909      	cmp	r1, #9
 801dbd4:	d92b      	bls.n	801dc2e <_strtod_l+0x1b6>
 801dbd6:	4950      	ldr	r1, [pc, #320]	; (801dd18 <_strtod_l+0x2a0>)
 801dbd8:	2201      	movs	r2, #1
 801dbda:	f001 fb3c 	bl	801f256 <strncmp>
 801dbde:	2800      	cmp	r0, #0
 801dbe0:	d035      	beq.n	801dc4e <_strtod_l+0x1d6>
 801dbe2:	2000      	movs	r0, #0
 801dbe4:	462a      	mov	r2, r5
 801dbe6:	4633      	mov	r3, r6
 801dbe8:	4683      	mov	fp, r0
 801dbea:	4601      	mov	r1, r0
 801dbec:	2a65      	cmp	r2, #101	; 0x65
 801dbee:	d001      	beq.n	801dbf4 <_strtod_l+0x17c>
 801dbf0:	2a45      	cmp	r2, #69	; 0x45
 801dbf2:	d118      	bne.n	801dc26 <_strtod_l+0x1ae>
 801dbf4:	b91b      	cbnz	r3, 801dbfe <_strtod_l+0x186>
 801dbf6:	9b06      	ldr	r3, [sp, #24]
 801dbf8:	4303      	orrs	r3, r0
 801dbfa:	d094      	beq.n	801db26 <_strtod_l+0xae>
 801dbfc:	2300      	movs	r3, #0
 801dbfe:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801dc02:	f10a 0201 	add.w	r2, sl, #1
 801dc06:	9211      	str	r2, [sp, #68]	; 0x44
 801dc08:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801dc0c:	2a2b      	cmp	r2, #43	; 0x2b
 801dc0e:	d075      	beq.n	801dcfc <_strtod_l+0x284>
 801dc10:	2a2d      	cmp	r2, #45	; 0x2d
 801dc12:	d07b      	beq.n	801dd0c <_strtod_l+0x294>
 801dc14:	f04f 0e00 	mov.w	lr, #0
 801dc18:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801dc1c:	2d09      	cmp	r5, #9
 801dc1e:	f240 8083 	bls.w	801dd28 <_strtod_l+0x2b0>
 801dc22:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801dc26:	2500      	movs	r5, #0
 801dc28:	e09e      	b.n	801dd68 <_strtod_l+0x2f0>
 801dc2a:	2300      	movs	r3, #0
 801dc2c:	e7c4      	b.n	801dbb8 <_strtod_l+0x140>
 801dc2e:	2e08      	cmp	r6, #8
 801dc30:	bfd5      	itete	le
 801dc32:	9907      	ldrle	r1, [sp, #28]
 801dc34:	9905      	ldrgt	r1, [sp, #20]
 801dc36:	fb02 3301 	mlale	r3, r2, r1, r3
 801dc3a:	fb02 3301 	mlagt	r3, r2, r1, r3
 801dc3e:	f100 0001 	add.w	r0, r0, #1
 801dc42:	bfd4      	ite	le
 801dc44:	9307      	strle	r3, [sp, #28]
 801dc46:	9305      	strgt	r3, [sp, #20]
 801dc48:	3601      	adds	r6, #1
 801dc4a:	9011      	str	r0, [sp, #68]	; 0x44
 801dc4c:	e7bc      	b.n	801dbc8 <_strtod_l+0x150>
 801dc4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dc50:	1c5a      	adds	r2, r3, #1
 801dc52:	9211      	str	r2, [sp, #68]	; 0x44
 801dc54:	785a      	ldrb	r2, [r3, #1]
 801dc56:	b3ae      	cbz	r6, 801dcc4 <_strtod_l+0x24c>
 801dc58:	4683      	mov	fp, r0
 801dc5a:	4633      	mov	r3, r6
 801dc5c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801dc60:	2909      	cmp	r1, #9
 801dc62:	d912      	bls.n	801dc8a <_strtod_l+0x212>
 801dc64:	2101      	movs	r1, #1
 801dc66:	e7c1      	b.n	801dbec <_strtod_l+0x174>
 801dc68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dc6a:	1c5a      	adds	r2, r3, #1
 801dc6c:	9211      	str	r2, [sp, #68]	; 0x44
 801dc6e:	785a      	ldrb	r2, [r3, #1]
 801dc70:	3001      	adds	r0, #1
 801dc72:	2a30      	cmp	r2, #48	; 0x30
 801dc74:	d0f8      	beq.n	801dc68 <_strtod_l+0x1f0>
 801dc76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801dc7a:	2b08      	cmp	r3, #8
 801dc7c:	f200 8495 	bhi.w	801e5aa <_strtod_l+0xb32>
 801dc80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dc82:	9309      	str	r3, [sp, #36]	; 0x24
 801dc84:	4683      	mov	fp, r0
 801dc86:	2000      	movs	r0, #0
 801dc88:	4603      	mov	r3, r0
 801dc8a:	3a30      	subs	r2, #48	; 0x30
 801dc8c:	f100 0101 	add.w	r1, r0, #1
 801dc90:	d012      	beq.n	801dcb8 <_strtod_l+0x240>
 801dc92:	448b      	add	fp, r1
 801dc94:	eb00 0c03 	add.w	ip, r0, r3
 801dc98:	4619      	mov	r1, r3
 801dc9a:	250a      	movs	r5, #10
 801dc9c:	4561      	cmp	r1, ip
 801dc9e:	d113      	bne.n	801dcc8 <_strtod_l+0x250>
 801dca0:	1819      	adds	r1, r3, r0
 801dca2:	2908      	cmp	r1, #8
 801dca4:	f103 0301 	add.w	r3, r3, #1
 801dca8:	4403      	add	r3, r0
 801dcaa:	dc1b      	bgt.n	801dce4 <_strtod_l+0x26c>
 801dcac:	9807      	ldr	r0, [sp, #28]
 801dcae:	210a      	movs	r1, #10
 801dcb0:	fb01 2200 	mla	r2, r1, r0, r2
 801dcb4:	9207      	str	r2, [sp, #28]
 801dcb6:	2100      	movs	r1, #0
 801dcb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dcba:	1c50      	adds	r0, r2, #1
 801dcbc:	9011      	str	r0, [sp, #68]	; 0x44
 801dcbe:	7852      	ldrb	r2, [r2, #1]
 801dcc0:	4608      	mov	r0, r1
 801dcc2:	e7cb      	b.n	801dc5c <_strtod_l+0x1e4>
 801dcc4:	4630      	mov	r0, r6
 801dcc6:	e7d4      	b.n	801dc72 <_strtod_l+0x1fa>
 801dcc8:	2908      	cmp	r1, #8
 801dcca:	f101 0101 	add.w	r1, r1, #1
 801dcce:	dc03      	bgt.n	801dcd8 <_strtod_l+0x260>
 801dcd0:	9f07      	ldr	r7, [sp, #28]
 801dcd2:	436f      	muls	r7, r5
 801dcd4:	9707      	str	r7, [sp, #28]
 801dcd6:	e7e1      	b.n	801dc9c <_strtod_l+0x224>
 801dcd8:	2910      	cmp	r1, #16
 801dcda:	bfde      	ittt	le
 801dcdc:	9f05      	ldrle	r7, [sp, #20]
 801dcde:	436f      	mulle	r7, r5
 801dce0:	9705      	strle	r7, [sp, #20]
 801dce2:	e7db      	b.n	801dc9c <_strtod_l+0x224>
 801dce4:	2b10      	cmp	r3, #16
 801dce6:	bfdf      	itttt	le
 801dce8:	9805      	ldrle	r0, [sp, #20]
 801dcea:	210a      	movle	r1, #10
 801dcec:	fb01 2200 	mlale	r2, r1, r0, r2
 801dcf0:	9205      	strle	r2, [sp, #20]
 801dcf2:	e7e0      	b.n	801dcb6 <_strtod_l+0x23e>
 801dcf4:	f04f 0b00 	mov.w	fp, #0
 801dcf8:	2101      	movs	r1, #1
 801dcfa:	e77c      	b.n	801dbf6 <_strtod_l+0x17e>
 801dcfc:	f04f 0e00 	mov.w	lr, #0
 801dd00:	f10a 0202 	add.w	r2, sl, #2
 801dd04:	9211      	str	r2, [sp, #68]	; 0x44
 801dd06:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801dd0a:	e785      	b.n	801dc18 <_strtod_l+0x1a0>
 801dd0c:	f04f 0e01 	mov.w	lr, #1
 801dd10:	e7f6      	b.n	801dd00 <_strtod_l+0x288>
 801dd12:	bf00      	nop
 801dd14:	08020aa8 	.word	0x08020aa8
 801dd18:	08020aa4 	.word	0x08020aa4
 801dd1c:	7ff00000 	.word	0x7ff00000
 801dd20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dd22:	1c55      	adds	r5, r2, #1
 801dd24:	9511      	str	r5, [sp, #68]	; 0x44
 801dd26:	7852      	ldrb	r2, [r2, #1]
 801dd28:	2a30      	cmp	r2, #48	; 0x30
 801dd2a:	d0f9      	beq.n	801dd20 <_strtod_l+0x2a8>
 801dd2c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801dd30:	2d08      	cmp	r5, #8
 801dd32:	f63f af78 	bhi.w	801dc26 <_strtod_l+0x1ae>
 801dd36:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801dd3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dd3c:	920a      	str	r2, [sp, #40]	; 0x28
 801dd3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dd40:	1c55      	adds	r5, r2, #1
 801dd42:	9511      	str	r5, [sp, #68]	; 0x44
 801dd44:	7852      	ldrb	r2, [r2, #1]
 801dd46:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801dd4a:	2f09      	cmp	r7, #9
 801dd4c:	d937      	bls.n	801ddbe <_strtod_l+0x346>
 801dd4e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801dd50:	1bed      	subs	r5, r5, r7
 801dd52:	2d08      	cmp	r5, #8
 801dd54:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801dd58:	dc02      	bgt.n	801dd60 <_strtod_l+0x2e8>
 801dd5a:	4565      	cmp	r5, ip
 801dd5c:	bfa8      	it	ge
 801dd5e:	4665      	movge	r5, ip
 801dd60:	f1be 0f00 	cmp.w	lr, #0
 801dd64:	d000      	beq.n	801dd68 <_strtod_l+0x2f0>
 801dd66:	426d      	negs	r5, r5
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	d14d      	bne.n	801de08 <_strtod_l+0x390>
 801dd6c:	9b06      	ldr	r3, [sp, #24]
 801dd6e:	4303      	orrs	r3, r0
 801dd70:	f47f aebd 	bne.w	801daee <_strtod_l+0x76>
 801dd74:	2900      	cmp	r1, #0
 801dd76:	f47f aed6 	bne.w	801db26 <_strtod_l+0xae>
 801dd7a:	2a69      	cmp	r2, #105	; 0x69
 801dd7c:	d027      	beq.n	801ddce <_strtod_l+0x356>
 801dd7e:	dc24      	bgt.n	801ddca <_strtod_l+0x352>
 801dd80:	2a49      	cmp	r2, #73	; 0x49
 801dd82:	d024      	beq.n	801ddce <_strtod_l+0x356>
 801dd84:	2a4e      	cmp	r2, #78	; 0x4e
 801dd86:	f47f aece 	bne.w	801db26 <_strtod_l+0xae>
 801dd8a:	4995      	ldr	r1, [pc, #596]	; (801dfe0 <_strtod_l+0x568>)
 801dd8c:	a811      	add	r0, sp, #68	; 0x44
 801dd8e:	f001 fd6b 	bl	801f868 <__match>
 801dd92:	2800      	cmp	r0, #0
 801dd94:	f43f aec7 	beq.w	801db26 <_strtod_l+0xae>
 801dd98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dd9a:	781b      	ldrb	r3, [r3, #0]
 801dd9c:	2b28      	cmp	r3, #40	; 0x28
 801dd9e:	d12d      	bne.n	801ddfc <_strtod_l+0x384>
 801dda0:	4990      	ldr	r1, [pc, #576]	; (801dfe4 <_strtod_l+0x56c>)
 801dda2:	aa14      	add	r2, sp, #80	; 0x50
 801dda4:	a811      	add	r0, sp, #68	; 0x44
 801dda6:	f001 fd73 	bl	801f890 <__hexnan>
 801ddaa:	2805      	cmp	r0, #5
 801ddac:	d126      	bne.n	801ddfc <_strtod_l+0x384>
 801ddae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ddb0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801ddb4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801ddb8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801ddbc:	e697      	b.n	801daee <_strtod_l+0x76>
 801ddbe:	250a      	movs	r5, #10
 801ddc0:	fb05 2c0c 	mla	ip, r5, ip, r2
 801ddc4:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801ddc8:	e7b9      	b.n	801dd3e <_strtod_l+0x2c6>
 801ddca:	2a6e      	cmp	r2, #110	; 0x6e
 801ddcc:	e7db      	b.n	801dd86 <_strtod_l+0x30e>
 801ddce:	4986      	ldr	r1, [pc, #536]	; (801dfe8 <_strtod_l+0x570>)
 801ddd0:	a811      	add	r0, sp, #68	; 0x44
 801ddd2:	f001 fd49 	bl	801f868 <__match>
 801ddd6:	2800      	cmp	r0, #0
 801ddd8:	f43f aea5 	beq.w	801db26 <_strtod_l+0xae>
 801dddc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ddde:	4983      	ldr	r1, [pc, #524]	; (801dfec <_strtod_l+0x574>)
 801dde0:	3b01      	subs	r3, #1
 801dde2:	a811      	add	r0, sp, #68	; 0x44
 801dde4:	9311      	str	r3, [sp, #68]	; 0x44
 801dde6:	f001 fd3f 	bl	801f868 <__match>
 801ddea:	b910      	cbnz	r0, 801ddf2 <_strtod_l+0x37a>
 801ddec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ddee:	3301      	adds	r3, #1
 801ddf0:	9311      	str	r3, [sp, #68]	; 0x44
 801ddf2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 801e000 <_strtod_l+0x588>
 801ddf6:	f04f 0800 	mov.w	r8, #0
 801ddfa:	e678      	b.n	801daee <_strtod_l+0x76>
 801ddfc:	487c      	ldr	r0, [pc, #496]	; (801dff0 <_strtod_l+0x578>)
 801ddfe:	f001 fa4f 	bl	801f2a0 <nan>
 801de02:	ec59 8b10 	vmov	r8, r9, d0
 801de06:	e672      	b.n	801daee <_strtod_l+0x76>
 801de08:	eddd 7a07 	vldr	s15, [sp, #28]
 801de0c:	eba5 020b 	sub.w	r2, r5, fp
 801de10:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801de14:	2e00      	cmp	r6, #0
 801de16:	bf08      	it	eq
 801de18:	461e      	moveq	r6, r3
 801de1a:	2b10      	cmp	r3, #16
 801de1c:	9206      	str	r2, [sp, #24]
 801de1e:	461a      	mov	r2, r3
 801de20:	bfa8      	it	ge
 801de22:	2210      	movge	r2, #16
 801de24:	2b09      	cmp	r3, #9
 801de26:	ec59 8b17 	vmov	r8, r9, d7
 801de2a:	dd0c      	ble.n	801de46 <_strtod_l+0x3ce>
 801de2c:	4971      	ldr	r1, [pc, #452]	; (801dff4 <_strtod_l+0x57c>)
 801de2e:	eddd 6a05 	vldr	s13, [sp, #20]
 801de32:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801de36:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801de3a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801de3e:	eea7 6b05 	vfma.f64	d6, d7, d5
 801de42:	ec59 8b16 	vmov	r8, r9, d6
 801de46:	2b0f      	cmp	r3, #15
 801de48:	dc37      	bgt.n	801deba <_strtod_l+0x442>
 801de4a:	9906      	ldr	r1, [sp, #24]
 801de4c:	2900      	cmp	r1, #0
 801de4e:	f43f ae4e 	beq.w	801daee <_strtod_l+0x76>
 801de52:	dd23      	ble.n	801de9c <_strtod_l+0x424>
 801de54:	2916      	cmp	r1, #22
 801de56:	dc0b      	bgt.n	801de70 <_strtod_l+0x3f8>
 801de58:	4b66      	ldr	r3, [pc, #408]	; (801dff4 <_strtod_l+0x57c>)
 801de5a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801de5e:	ed93 7b00 	vldr	d7, [r3]
 801de62:	ec49 8b16 	vmov	d6, r8, r9
 801de66:	ee27 7b06 	vmul.f64	d7, d7, d6
 801de6a:	ec59 8b17 	vmov	r8, r9, d7
 801de6e:	e63e      	b.n	801daee <_strtod_l+0x76>
 801de70:	9806      	ldr	r0, [sp, #24]
 801de72:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801de76:	4281      	cmp	r1, r0
 801de78:	db1f      	blt.n	801deba <_strtod_l+0x442>
 801de7a:	4a5e      	ldr	r2, [pc, #376]	; (801dff4 <_strtod_l+0x57c>)
 801de7c:	f1c3 030f 	rsb	r3, r3, #15
 801de80:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801de84:	ed91 7b00 	vldr	d7, [r1]
 801de88:	ec49 8b16 	vmov	d6, r8, r9
 801de8c:	1ac3      	subs	r3, r0, r3
 801de8e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801de92:	ee27 7b06 	vmul.f64	d7, d7, d6
 801de96:	ed92 6b00 	vldr	d6, [r2]
 801de9a:	e7e4      	b.n	801de66 <_strtod_l+0x3ee>
 801de9c:	9906      	ldr	r1, [sp, #24]
 801de9e:	3116      	adds	r1, #22
 801dea0:	db0b      	blt.n	801deba <_strtod_l+0x442>
 801dea2:	4b54      	ldr	r3, [pc, #336]	; (801dff4 <_strtod_l+0x57c>)
 801dea4:	ebab 0505 	sub.w	r5, fp, r5
 801dea8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801deac:	ed95 7b00 	vldr	d7, [r5]
 801deb0:	ec49 8b16 	vmov	d6, r8, r9
 801deb4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801deb8:	e7d7      	b.n	801de6a <_strtod_l+0x3f2>
 801deba:	9906      	ldr	r1, [sp, #24]
 801debc:	1a9a      	subs	r2, r3, r2
 801debe:	440a      	add	r2, r1
 801dec0:	2a00      	cmp	r2, #0
 801dec2:	dd6e      	ble.n	801dfa2 <_strtod_l+0x52a>
 801dec4:	f012 000f 	ands.w	r0, r2, #15
 801dec8:	d00a      	beq.n	801dee0 <_strtod_l+0x468>
 801deca:	494a      	ldr	r1, [pc, #296]	; (801dff4 <_strtod_l+0x57c>)
 801decc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801ded0:	ed91 7b00 	vldr	d7, [r1]
 801ded4:	ec49 8b16 	vmov	d6, r8, r9
 801ded8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dedc:	ec59 8b17 	vmov	r8, r9, d7
 801dee0:	f032 020f 	bics.w	r2, r2, #15
 801dee4:	d04e      	beq.n	801df84 <_strtod_l+0x50c>
 801dee6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801deea:	dd22      	ble.n	801df32 <_strtod_l+0x4ba>
 801deec:	2500      	movs	r5, #0
 801deee:	462e      	mov	r6, r5
 801def0:	9507      	str	r5, [sp, #28]
 801def2:	462f      	mov	r7, r5
 801def4:	2322      	movs	r3, #34	; 0x22
 801def6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801e000 <_strtod_l+0x588>
 801defa:	6023      	str	r3, [r4, #0]
 801defc:	f04f 0800 	mov.w	r8, #0
 801df00:	9b07      	ldr	r3, [sp, #28]
 801df02:	2b00      	cmp	r3, #0
 801df04:	f43f adf3 	beq.w	801daee <_strtod_l+0x76>
 801df08:	9912      	ldr	r1, [sp, #72]	; 0x48
 801df0a:	4620      	mov	r0, r4
 801df0c:	f7ff f930 	bl	801d170 <_Bfree>
 801df10:	4639      	mov	r1, r7
 801df12:	4620      	mov	r0, r4
 801df14:	f7ff f92c 	bl	801d170 <_Bfree>
 801df18:	4631      	mov	r1, r6
 801df1a:	4620      	mov	r0, r4
 801df1c:	f7ff f928 	bl	801d170 <_Bfree>
 801df20:	9907      	ldr	r1, [sp, #28]
 801df22:	4620      	mov	r0, r4
 801df24:	f7ff f924 	bl	801d170 <_Bfree>
 801df28:	4629      	mov	r1, r5
 801df2a:	4620      	mov	r0, r4
 801df2c:	f7ff f920 	bl	801d170 <_Bfree>
 801df30:	e5dd      	b.n	801daee <_strtod_l+0x76>
 801df32:	2000      	movs	r0, #0
 801df34:	ec49 8b17 	vmov	d7, r8, r9
 801df38:	4f2f      	ldr	r7, [pc, #188]	; (801dff8 <_strtod_l+0x580>)
 801df3a:	1112      	asrs	r2, r2, #4
 801df3c:	4601      	mov	r1, r0
 801df3e:	2a01      	cmp	r2, #1
 801df40:	dc23      	bgt.n	801df8a <_strtod_l+0x512>
 801df42:	b108      	cbz	r0, 801df48 <_strtod_l+0x4d0>
 801df44:	ec59 8b17 	vmov	r8, r9, d7
 801df48:	4a2b      	ldr	r2, [pc, #172]	; (801dff8 <_strtod_l+0x580>)
 801df4a:	482c      	ldr	r0, [pc, #176]	; (801dffc <_strtod_l+0x584>)
 801df4c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801df50:	ed92 7b00 	vldr	d7, [r2]
 801df54:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801df58:	ec49 8b16 	vmov	d6, r8, r9
 801df5c:	4a28      	ldr	r2, [pc, #160]	; (801e000 <_strtod_l+0x588>)
 801df5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801df62:	ee17 1a90 	vmov	r1, s15
 801df66:	400a      	ands	r2, r1
 801df68:	4282      	cmp	r2, r0
 801df6a:	ec59 8b17 	vmov	r8, r9, d7
 801df6e:	d8bd      	bhi.n	801deec <_strtod_l+0x474>
 801df70:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801df74:	4282      	cmp	r2, r0
 801df76:	bf86      	itte	hi
 801df78:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801e004 <_strtod_l+0x58c>
 801df7c:	f04f 38ff 	movhi.w	r8, #4294967295
 801df80:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801df84:	2200      	movs	r2, #0
 801df86:	9205      	str	r2, [sp, #20]
 801df88:	e076      	b.n	801e078 <_strtod_l+0x600>
 801df8a:	f012 0f01 	tst.w	r2, #1
 801df8e:	d004      	beq.n	801df9a <_strtod_l+0x522>
 801df90:	ed97 6b00 	vldr	d6, [r7]
 801df94:	2001      	movs	r0, #1
 801df96:	ee27 7b06 	vmul.f64	d7, d7, d6
 801df9a:	3101      	adds	r1, #1
 801df9c:	1052      	asrs	r2, r2, #1
 801df9e:	3708      	adds	r7, #8
 801dfa0:	e7cd      	b.n	801df3e <_strtod_l+0x4c6>
 801dfa2:	d0ef      	beq.n	801df84 <_strtod_l+0x50c>
 801dfa4:	4252      	negs	r2, r2
 801dfa6:	f012 000f 	ands.w	r0, r2, #15
 801dfaa:	d00a      	beq.n	801dfc2 <_strtod_l+0x54a>
 801dfac:	4911      	ldr	r1, [pc, #68]	; (801dff4 <_strtod_l+0x57c>)
 801dfae:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801dfb2:	ed91 7b00 	vldr	d7, [r1]
 801dfb6:	ec49 8b16 	vmov	d6, r8, r9
 801dfba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801dfbe:	ec59 8b17 	vmov	r8, r9, d7
 801dfc2:	1112      	asrs	r2, r2, #4
 801dfc4:	d0de      	beq.n	801df84 <_strtod_l+0x50c>
 801dfc6:	2a1f      	cmp	r2, #31
 801dfc8:	dd1e      	ble.n	801e008 <_strtod_l+0x590>
 801dfca:	2500      	movs	r5, #0
 801dfcc:	462e      	mov	r6, r5
 801dfce:	9507      	str	r5, [sp, #28]
 801dfd0:	462f      	mov	r7, r5
 801dfd2:	2322      	movs	r3, #34	; 0x22
 801dfd4:	f04f 0800 	mov.w	r8, #0
 801dfd8:	f04f 0900 	mov.w	r9, #0
 801dfdc:	6023      	str	r3, [r4, #0]
 801dfde:	e78f      	b.n	801df00 <_strtod_l+0x488>
 801dfe0:	08020891 	.word	0x08020891
 801dfe4:	08020abc 	.word	0x08020abc
 801dfe8:	08020889 	.word	0x08020889
 801dfec:	080208be 	.word	0x080208be
 801dff0:	08020c68 	.word	0x08020c68
 801dff4:	080209d0 	.word	0x080209d0
 801dff8:	080209a8 	.word	0x080209a8
 801dffc:	7ca00000 	.word	0x7ca00000
 801e000:	7ff00000 	.word	0x7ff00000
 801e004:	7fefffff 	.word	0x7fefffff
 801e008:	f012 0110 	ands.w	r1, r2, #16
 801e00c:	bf18      	it	ne
 801e00e:	216a      	movne	r1, #106	; 0x6a
 801e010:	9105      	str	r1, [sp, #20]
 801e012:	ec49 8b17 	vmov	d7, r8, r9
 801e016:	49be      	ldr	r1, [pc, #760]	; (801e310 <_strtod_l+0x898>)
 801e018:	2000      	movs	r0, #0
 801e01a:	07d7      	lsls	r7, r2, #31
 801e01c:	d504      	bpl.n	801e028 <_strtod_l+0x5b0>
 801e01e:	ed91 6b00 	vldr	d6, [r1]
 801e022:	2001      	movs	r0, #1
 801e024:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e028:	1052      	asrs	r2, r2, #1
 801e02a:	f101 0108 	add.w	r1, r1, #8
 801e02e:	d1f4      	bne.n	801e01a <_strtod_l+0x5a2>
 801e030:	b108      	cbz	r0, 801e036 <_strtod_l+0x5be>
 801e032:	ec59 8b17 	vmov	r8, r9, d7
 801e036:	9a05      	ldr	r2, [sp, #20]
 801e038:	b1ba      	cbz	r2, 801e06a <_strtod_l+0x5f2>
 801e03a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801e03e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801e042:	2a00      	cmp	r2, #0
 801e044:	4648      	mov	r0, r9
 801e046:	dd10      	ble.n	801e06a <_strtod_l+0x5f2>
 801e048:	2a1f      	cmp	r2, #31
 801e04a:	f340 812c 	ble.w	801e2a6 <_strtod_l+0x82e>
 801e04e:	2a34      	cmp	r2, #52	; 0x34
 801e050:	bfde      	ittt	le
 801e052:	f04f 32ff 	movle.w	r2, #4294967295
 801e056:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801e05a:	408a      	lslle	r2, r1
 801e05c:	f04f 0800 	mov.w	r8, #0
 801e060:	bfcc      	ite	gt
 801e062:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801e066:	ea02 0900 	andle.w	r9, r2, r0
 801e06a:	ec49 8b17 	vmov	d7, r8, r9
 801e06e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e076:	d0a8      	beq.n	801dfca <_strtod_l+0x552>
 801e078:	9a07      	ldr	r2, [sp, #28]
 801e07a:	9200      	str	r2, [sp, #0]
 801e07c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e07e:	4632      	mov	r2, r6
 801e080:	4620      	mov	r0, r4
 801e082:	f7ff f8dd 	bl	801d240 <__s2b>
 801e086:	9007      	str	r0, [sp, #28]
 801e088:	2800      	cmp	r0, #0
 801e08a:	f43f af2f 	beq.w	801deec <_strtod_l+0x474>
 801e08e:	9a06      	ldr	r2, [sp, #24]
 801e090:	2a00      	cmp	r2, #0
 801e092:	ebab 0305 	sub.w	r3, fp, r5
 801e096:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801e2f0 <_strtod_l+0x878>
 801e09a:	bfa8      	it	ge
 801e09c:	2300      	movge	r3, #0
 801e09e:	ed9f ab96 	vldr	d10, [pc, #600]	; 801e2f8 <_strtod_l+0x880>
 801e0a2:	ed9f bb97 	vldr	d11, [pc, #604]	; 801e300 <_strtod_l+0x888>
 801e0a6:	9309      	str	r3, [sp, #36]	; 0x24
 801e0a8:	2500      	movs	r5, #0
 801e0aa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801e0ae:	930c      	str	r3, [sp, #48]	; 0x30
 801e0b0:	462e      	mov	r6, r5
 801e0b2:	9b07      	ldr	r3, [sp, #28]
 801e0b4:	4620      	mov	r0, r4
 801e0b6:	6859      	ldr	r1, [r3, #4]
 801e0b8:	f7ff f81a 	bl	801d0f0 <_Balloc>
 801e0bc:	4607      	mov	r7, r0
 801e0be:	2800      	cmp	r0, #0
 801e0c0:	f43f af18 	beq.w	801def4 <_strtod_l+0x47c>
 801e0c4:	9b07      	ldr	r3, [sp, #28]
 801e0c6:	691a      	ldr	r2, [r3, #16]
 801e0c8:	3202      	adds	r2, #2
 801e0ca:	f103 010c 	add.w	r1, r3, #12
 801e0ce:	0092      	lsls	r2, r2, #2
 801e0d0:	300c      	adds	r0, #12
 801e0d2:	f7fe f902 	bl	801c2da <memcpy>
 801e0d6:	ec49 8b10 	vmov	d0, r8, r9
 801e0da:	aa14      	add	r2, sp, #80	; 0x50
 801e0dc:	a913      	add	r1, sp, #76	; 0x4c
 801e0de:	4620      	mov	r0, r4
 801e0e0:	f7ff fbe2 	bl	801d8a8 <__d2b>
 801e0e4:	ec49 8b18 	vmov	d8, r8, r9
 801e0e8:	9012      	str	r0, [sp, #72]	; 0x48
 801e0ea:	2800      	cmp	r0, #0
 801e0ec:	f43f af02 	beq.w	801def4 <_strtod_l+0x47c>
 801e0f0:	2101      	movs	r1, #1
 801e0f2:	4620      	mov	r0, r4
 801e0f4:	f7ff f93c 	bl	801d370 <__i2b>
 801e0f8:	4606      	mov	r6, r0
 801e0fa:	2800      	cmp	r0, #0
 801e0fc:	f43f aefa 	beq.w	801def4 <_strtod_l+0x47c>
 801e100:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e102:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e104:	2b00      	cmp	r3, #0
 801e106:	bfab      	itete	ge
 801e108:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801e10a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801e10c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801e110:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801e114:	bfac      	ite	ge
 801e116:	eb03 0b02 	addge.w	fp, r3, r2
 801e11a:	eba2 0a03 	sublt.w	sl, r2, r3
 801e11e:	9a05      	ldr	r2, [sp, #20]
 801e120:	1a9b      	subs	r3, r3, r2
 801e122:	440b      	add	r3, r1
 801e124:	4a7b      	ldr	r2, [pc, #492]	; (801e314 <_strtod_l+0x89c>)
 801e126:	3b01      	subs	r3, #1
 801e128:	4293      	cmp	r3, r2
 801e12a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801e12e:	f280 80cd 	bge.w	801e2cc <_strtod_l+0x854>
 801e132:	1ad2      	subs	r2, r2, r3
 801e134:	2a1f      	cmp	r2, #31
 801e136:	eba1 0102 	sub.w	r1, r1, r2
 801e13a:	f04f 0001 	mov.w	r0, #1
 801e13e:	f300 80b9 	bgt.w	801e2b4 <_strtod_l+0x83c>
 801e142:	fa00 f302 	lsl.w	r3, r0, r2
 801e146:	930b      	str	r3, [sp, #44]	; 0x2c
 801e148:	2300      	movs	r3, #0
 801e14a:	930a      	str	r3, [sp, #40]	; 0x28
 801e14c:	eb0b 0301 	add.w	r3, fp, r1
 801e150:	9a05      	ldr	r2, [sp, #20]
 801e152:	459b      	cmp	fp, r3
 801e154:	448a      	add	sl, r1
 801e156:	4492      	add	sl, r2
 801e158:	465a      	mov	r2, fp
 801e15a:	bfa8      	it	ge
 801e15c:	461a      	movge	r2, r3
 801e15e:	4552      	cmp	r2, sl
 801e160:	bfa8      	it	ge
 801e162:	4652      	movge	r2, sl
 801e164:	2a00      	cmp	r2, #0
 801e166:	bfc2      	ittt	gt
 801e168:	1a9b      	subgt	r3, r3, r2
 801e16a:	ebaa 0a02 	subgt.w	sl, sl, r2
 801e16e:	ebab 0b02 	subgt.w	fp, fp, r2
 801e172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e174:	2a00      	cmp	r2, #0
 801e176:	dd18      	ble.n	801e1aa <_strtod_l+0x732>
 801e178:	4631      	mov	r1, r6
 801e17a:	4620      	mov	r0, r4
 801e17c:	930f      	str	r3, [sp, #60]	; 0x3c
 801e17e:	f7ff f9b7 	bl	801d4f0 <__pow5mult>
 801e182:	4606      	mov	r6, r0
 801e184:	2800      	cmp	r0, #0
 801e186:	f43f aeb5 	beq.w	801def4 <_strtod_l+0x47c>
 801e18a:	4601      	mov	r1, r0
 801e18c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e18e:	4620      	mov	r0, r4
 801e190:	f7ff f904 	bl	801d39c <__multiply>
 801e194:	900e      	str	r0, [sp, #56]	; 0x38
 801e196:	2800      	cmp	r0, #0
 801e198:	f43f aeac 	beq.w	801def4 <_strtod_l+0x47c>
 801e19c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e19e:	4620      	mov	r0, r4
 801e1a0:	f7fe ffe6 	bl	801d170 <_Bfree>
 801e1a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e1a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e1a8:	9212      	str	r2, [sp, #72]	; 0x48
 801e1aa:	2b00      	cmp	r3, #0
 801e1ac:	f300 8093 	bgt.w	801e2d6 <_strtod_l+0x85e>
 801e1b0:	9b06      	ldr	r3, [sp, #24]
 801e1b2:	2b00      	cmp	r3, #0
 801e1b4:	dd08      	ble.n	801e1c8 <_strtod_l+0x750>
 801e1b6:	4639      	mov	r1, r7
 801e1b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e1ba:	4620      	mov	r0, r4
 801e1bc:	f7ff f998 	bl	801d4f0 <__pow5mult>
 801e1c0:	4607      	mov	r7, r0
 801e1c2:	2800      	cmp	r0, #0
 801e1c4:	f43f ae96 	beq.w	801def4 <_strtod_l+0x47c>
 801e1c8:	f1ba 0f00 	cmp.w	sl, #0
 801e1cc:	dd08      	ble.n	801e1e0 <_strtod_l+0x768>
 801e1ce:	4639      	mov	r1, r7
 801e1d0:	4652      	mov	r2, sl
 801e1d2:	4620      	mov	r0, r4
 801e1d4:	f7ff f9e6 	bl	801d5a4 <__lshift>
 801e1d8:	4607      	mov	r7, r0
 801e1da:	2800      	cmp	r0, #0
 801e1dc:	f43f ae8a 	beq.w	801def4 <_strtod_l+0x47c>
 801e1e0:	f1bb 0f00 	cmp.w	fp, #0
 801e1e4:	dd08      	ble.n	801e1f8 <_strtod_l+0x780>
 801e1e6:	4631      	mov	r1, r6
 801e1e8:	465a      	mov	r2, fp
 801e1ea:	4620      	mov	r0, r4
 801e1ec:	f7ff f9da 	bl	801d5a4 <__lshift>
 801e1f0:	4606      	mov	r6, r0
 801e1f2:	2800      	cmp	r0, #0
 801e1f4:	f43f ae7e 	beq.w	801def4 <_strtod_l+0x47c>
 801e1f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e1fa:	463a      	mov	r2, r7
 801e1fc:	4620      	mov	r0, r4
 801e1fe:	f7ff fa59 	bl	801d6b4 <__mdiff>
 801e202:	4605      	mov	r5, r0
 801e204:	2800      	cmp	r0, #0
 801e206:	f43f ae75 	beq.w	801def4 <_strtod_l+0x47c>
 801e20a:	2300      	movs	r3, #0
 801e20c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801e210:	60c3      	str	r3, [r0, #12]
 801e212:	4631      	mov	r1, r6
 801e214:	f7ff fa32 	bl	801d67c <__mcmp>
 801e218:	2800      	cmp	r0, #0
 801e21a:	da7f      	bge.n	801e31c <_strtod_l+0x8a4>
 801e21c:	ea5a 0a08 	orrs.w	sl, sl, r8
 801e220:	f040 80a5 	bne.w	801e36e <_strtod_l+0x8f6>
 801e224:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e228:	2b00      	cmp	r3, #0
 801e22a:	f040 80a0 	bne.w	801e36e <_strtod_l+0x8f6>
 801e22e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e232:	0d1b      	lsrs	r3, r3, #20
 801e234:	051b      	lsls	r3, r3, #20
 801e236:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e23a:	f240 8098 	bls.w	801e36e <_strtod_l+0x8f6>
 801e23e:	696b      	ldr	r3, [r5, #20]
 801e240:	b91b      	cbnz	r3, 801e24a <_strtod_l+0x7d2>
 801e242:	692b      	ldr	r3, [r5, #16]
 801e244:	2b01      	cmp	r3, #1
 801e246:	f340 8092 	ble.w	801e36e <_strtod_l+0x8f6>
 801e24a:	4629      	mov	r1, r5
 801e24c:	2201      	movs	r2, #1
 801e24e:	4620      	mov	r0, r4
 801e250:	f7ff f9a8 	bl	801d5a4 <__lshift>
 801e254:	4631      	mov	r1, r6
 801e256:	4605      	mov	r5, r0
 801e258:	f7ff fa10 	bl	801d67c <__mcmp>
 801e25c:	2800      	cmp	r0, #0
 801e25e:	f340 8086 	ble.w	801e36e <_strtod_l+0x8f6>
 801e262:	9905      	ldr	r1, [sp, #20]
 801e264:	4a2c      	ldr	r2, [pc, #176]	; (801e318 <_strtod_l+0x8a0>)
 801e266:	464b      	mov	r3, r9
 801e268:	2900      	cmp	r1, #0
 801e26a:	f000 809f 	beq.w	801e3ac <_strtod_l+0x934>
 801e26e:	ea02 0109 	and.w	r1, r2, r9
 801e272:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e276:	f300 8099 	bgt.w	801e3ac <_strtod_l+0x934>
 801e27a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e27e:	f77f aea8 	ble.w	801dfd2 <_strtod_l+0x55a>
 801e282:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801e308 <_strtod_l+0x890>
 801e286:	ec49 8b16 	vmov	d6, r8, r9
 801e28a:	4b23      	ldr	r3, [pc, #140]	; (801e318 <_strtod_l+0x8a0>)
 801e28c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e290:	ee17 2a90 	vmov	r2, s15
 801e294:	4013      	ands	r3, r2
 801e296:	ec59 8b17 	vmov	r8, r9, d7
 801e29a:	2b00      	cmp	r3, #0
 801e29c:	f47f ae34 	bne.w	801df08 <_strtod_l+0x490>
 801e2a0:	2322      	movs	r3, #34	; 0x22
 801e2a2:	6023      	str	r3, [r4, #0]
 801e2a4:	e630      	b.n	801df08 <_strtod_l+0x490>
 801e2a6:	f04f 31ff 	mov.w	r1, #4294967295
 801e2aa:	fa01 f202 	lsl.w	r2, r1, r2
 801e2ae:	ea02 0808 	and.w	r8, r2, r8
 801e2b2:	e6da      	b.n	801e06a <_strtod_l+0x5f2>
 801e2b4:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801e2b8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801e2bc:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801e2c0:	33e2      	adds	r3, #226	; 0xe2
 801e2c2:	fa00 f303 	lsl.w	r3, r0, r3
 801e2c6:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801e2ca:	e73f      	b.n	801e14c <_strtod_l+0x6d4>
 801e2cc:	2200      	movs	r2, #0
 801e2ce:	2301      	movs	r3, #1
 801e2d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801e2d4:	e73a      	b.n	801e14c <_strtod_l+0x6d4>
 801e2d6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e2d8:	461a      	mov	r2, r3
 801e2da:	4620      	mov	r0, r4
 801e2dc:	f7ff f962 	bl	801d5a4 <__lshift>
 801e2e0:	9012      	str	r0, [sp, #72]	; 0x48
 801e2e2:	2800      	cmp	r0, #0
 801e2e4:	f47f af64 	bne.w	801e1b0 <_strtod_l+0x738>
 801e2e8:	e604      	b.n	801def4 <_strtod_l+0x47c>
 801e2ea:	bf00      	nop
 801e2ec:	f3af 8000 	nop.w
 801e2f0:	94a03595 	.word	0x94a03595
 801e2f4:	3fcfffff 	.word	0x3fcfffff
 801e2f8:	94a03595 	.word	0x94a03595
 801e2fc:	3fdfffff 	.word	0x3fdfffff
 801e300:	35afe535 	.word	0x35afe535
 801e304:	3fe00000 	.word	0x3fe00000
 801e308:	00000000 	.word	0x00000000
 801e30c:	39500000 	.word	0x39500000
 801e310:	08020ad0 	.word	0x08020ad0
 801e314:	fffffc02 	.word	0xfffffc02
 801e318:	7ff00000 	.word	0x7ff00000
 801e31c:	46cb      	mov	fp, r9
 801e31e:	d15f      	bne.n	801e3e0 <_strtod_l+0x968>
 801e320:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e324:	f1ba 0f00 	cmp.w	sl, #0
 801e328:	d02a      	beq.n	801e380 <_strtod_l+0x908>
 801e32a:	4aa7      	ldr	r2, [pc, #668]	; (801e5c8 <_strtod_l+0xb50>)
 801e32c:	4293      	cmp	r3, r2
 801e32e:	d12b      	bne.n	801e388 <_strtod_l+0x910>
 801e330:	9b05      	ldr	r3, [sp, #20]
 801e332:	4642      	mov	r2, r8
 801e334:	b1fb      	cbz	r3, 801e376 <_strtod_l+0x8fe>
 801e336:	4ba5      	ldr	r3, [pc, #660]	; (801e5cc <_strtod_l+0xb54>)
 801e338:	ea09 0303 	and.w	r3, r9, r3
 801e33c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e340:	f04f 31ff 	mov.w	r1, #4294967295
 801e344:	d81a      	bhi.n	801e37c <_strtod_l+0x904>
 801e346:	0d1b      	lsrs	r3, r3, #20
 801e348:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e34c:	fa01 f303 	lsl.w	r3, r1, r3
 801e350:	429a      	cmp	r2, r3
 801e352:	d119      	bne.n	801e388 <_strtod_l+0x910>
 801e354:	4b9e      	ldr	r3, [pc, #632]	; (801e5d0 <_strtod_l+0xb58>)
 801e356:	459b      	cmp	fp, r3
 801e358:	d102      	bne.n	801e360 <_strtod_l+0x8e8>
 801e35a:	3201      	adds	r2, #1
 801e35c:	f43f adca 	beq.w	801def4 <_strtod_l+0x47c>
 801e360:	4b9a      	ldr	r3, [pc, #616]	; (801e5cc <_strtod_l+0xb54>)
 801e362:	ea0b 0303 	and.w	r3, fp, r3
 801e366:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801e36a:	f04f 0800 	mov.w	r8, #0
 801e36e:	9b05      	ldr	r3, [sp, #20]
 801e370:	2b00      	cmp	r3, #0
 801e372:	d186      	bne.n	801e282 <_strtod_l+0x80a>
 801e374:	e5c8      	b.n	801df08 <_strtod_l+0x490>
 801e376:	f04f 33ff 	mov.w	r3, #4294967295
 801e37a:	e7e9      	b.n	801e350 <_strtod_l+0x8d8>
 801e37c:	460b      	mov	r3, r1
 801e37e:	e7e7      	b.n	801e350 <_strtod_l+0x8d8>
 801e380:	ea53 0308 	orrs.w	r3, r3, r8
 801e384:	f43f af6d 	beq.w	801e262 <_strtod_l+0x7ea>
 801e388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e38a:	b1cb      	cbz	r3, 801e3c0 <_strtod_l+0x948>
 801e38c:	ea13 0f0b 	tst.w	r3, fp
 801e390:	d0ed      	beq.n	801e36e <_strtod_l+0x8f6>
 801e392:	9a05      	ldr	r2, [sp, #20]
 801e394:	4640      	mov	r0, r8
 801e396:	4649      	mov	r1, r9
 801e398:	f1ba 0f00 	cmp.w	sl, #0
 801e39c:	d014      	beq.n	801e3c8 <_strtod_l+0x950>
 801e39e:	f7ff fb51 	bl	801da44 <sulp>
 801e3a2:	ee38 7b00 	vadd.f64	d7, d8, d0
 801e3a6:	ec59 8b17 	vmov	r8, r9, d7
 801e3aa:	e7e0      	b.n	801e36e <_strtod_l+0x8f6>
 801e3ac:	4013      	ands	r3, r2
 801e3ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e3b2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801e3b6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801e3ba:	f04f 38ff 	mov.w	r8, #4294967295
 801e3be:	e7d6      	b.n	801e36e <_strtod_l+0x8f6>
 801e3c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e3c2:	ea13 0f08 	tst.w	r3, r8
 801e3c6:	e7e3      	b.n	801e390 <_strtod_l+0x918>
 801e3c8:	f7ff fb3c 	bl	801da44 <sulp>
 801e3cc:	ee38 0b40 	vsub.f64	d0, d8, d0
 801e3d0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3d8:	ec59 8b10 	vmov	r8, r9, d0
 801e3dc:	d1c7      	bne.n	801e36e <_strtod_l+0x8f6>
 801e3de:	e5f8      	b.n	801dfd2 <_strtod_l+0x55a>
 801e3e0:	4631      	mov	r1, r6
 801e3e2:	4628      	mov	r0, r5
 801e3e4:	f7ff faba 	bl	801d95c <__ratio>
 801e3e8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801e3ec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801e3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3f4:	d85f      	bhi.n	801e4b6 <_strtod_l+0xa3e>
 801e3f6:	f1ba 0f00 	cmp.w	sl, #0
 801e3fa:	d166      	bne.n	801e4ca <_strtod_l+0xa52>
 801e3fc:	f1b8 0f00 	cmp.w	r8, #0
 801e400:	d14d      	bne.n	801e49e <_strtod_l+0xa26>
 801e402:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e406:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801e40a:	2b00      	cmp	r3, #0
 801e40c:	d162      	bne.n	801e4d4 <_strtod_l+0xa5c>
 801e40e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801e412:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801e416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e41a:	d401      	bmi.n	801e420 <_strtod_l+0x9a8>
 801e41c:	ee20 db0d 	vmul.f64	d13, d0, d13
 801e420:	eeb1 cb4d 	vneg.f64	d12, d13
 801e424:	4869      	ldr	r0, [pc, #420]	; (801e5cc <_strtod_l+0xb54>)
 801e426:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 801e5d8 <_strtod_l+0xb60>
 801e42a:	ea0b 0100 	and.w	r1, fp, r0
 801e42e:	4561      	cmp	r1, ip
 801e430:	ec53 2b1c 	vmov	r2, r3, d12
 801e434:	d17a      	bne.n	801e52c <_strtod_l+0xab4>
 801e436:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801e43a:	ec49 8b10 	vmov	d0, r8, r9
 801e43e:	910a      	str	r1, [sp, #40]	; 0x28
 801e440:	f7ff f9c2 	bl	801d7c8 <__ulp>
 801e444:	ec49 8b1e 	vmov	d14, r8, r9
 801e448:	4860      	ldr	r0, [pc, #384]	; (801e5cc <_strtod_l+0xb54>)
 801e44a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 801e44e:	ee1e 3a90 	vmov	r3, s29
 801e452:	4a60      	ldr	r2, [pc, #384]	; (801e5d4 <_strtod_l+0xb5c>)
 801e454:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e456:	4018      	ands	r0, r3
 801e458:	4290      	cmp	r0, r2
 801e45a:	ec59 8b1e 	vmov	r8, r9, d14
 801e45e:	d93c      	bls.n	801e4da <_strtod_l+0xa62>
 801e460:	ee18 2a90 	vmov	r2, s17
 801e464:	4b5a      	ldr	r3, [pc, #360]	; (801e5d0 <_strtod_l+0xb58>)
 801e466:	429a      	cmp	r2, r3
 801e468:	d104      	bne.n	801e474 <_strtod_l+0x9fc>
 801e46a:	ee18 3a10 	vmov	r3, s16
 801e46e:	3301      	adds	r3, #1
 801e470:	f43f ad40 	beq.w	801def4 <_strtod_l+0x47c>
 801e474:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801e5d0 <_strtod_l+0xb58>
 801e478:	f04f 38ff 	mov.w	r8, #4294967295
 801e47c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e47e:	4620      	mov	r0, r4
 801e480:	f7fe fe76 	bl	801d170 <_Bfree>
 801e484:	4639      	mov	r1, r7
 801e486:	4620      	mov	r0, r4
 801e488:	f7fe fe72 	bl	801d170 <_Bfree>
 801e48c:	4631      	mov	r1, r6
 801e48e:	4620      	mov	r0, r4
 801e490:	f7fe fe6e 	bl	801d170 <_Bfree>
 801e494:	4629      	mov	r1, r5
 801e496:	4620      	mov	r0, r4
 801e498:	f7fe fe6a 	bl	801d170 <_Bfree>
 801e49c:	e609      	b.n	801e0b2 <_strtod_l+0x63a>
 801e49e:	f1b8 0f01 	cmp.w	r8, #1
 801e4a2:	d103      	bne.n	801e4ac <_strtod_l+0xa34>
 801e4a4:	f1b9 0f00 	cmp.w	r9, #0
 801e4a8:	f43f ad93 	beq.w	801dfd2 <_strtod_l+0x55a>
 801e4ac:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801e4b0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801e4b4:	e7b6      	b.n	801e424 <_strtod_l+0x9ac>
 801e4b6:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801e4ba:	ee20 db0d 	vmul.f64	d13, d0, d13
 801e4be:	f1ba 0f00 	cmp.w	sl, #0
 801e4c2:	d0ad      	beq.n	801e420 <_strtod_l+0x9a8>
 801e4c4:	eeb0 cb4d 	vmov.f64	d12, d13
 801e4c8:	e7ac      	b.n	801e424 <_strtod_l+0x9ac>
 801e4ca:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801e4ce:	eeb0 db4c 	vmov.f64	d13, d12
 801e4d2:	e7a7      	b.n	801e424 <_strtod_l+0x9ac>
 801e4d4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801e4d8:	e7a4      	b.n	801e424 <_strtod_l+0x9ac>
 801e4da:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801e4de:	9b05      	ldr	r3, [sp, #20]
 801e4e0:	46cb      	mov	fp, r9
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d1ca      	bne.n	801e47c <_strtod_l+0xa04>
 801e4e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e4ea:	0d1b      	lsrs	r3, r3, #20
 801e4ec:	051b      	lsls	r3, r3, #20
 801e4ee:	4299      	cmp	r1, r3
 801e4f0:	d1c4      	bne.n	801e47c <_strtod_l+0xa04>
 801e4f2:	ec51 0b1d 	vmov	r0, r1, d13
 801e4f6:	f7e2 f947 	bl	8000788 <__aeabi_d2lz>
 801e4fa:	f7e2 f8ff 	bl	80006fc <__aeabi_l2d>
 801e4fe:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801e502:	ec41 0b17 	vmov	d7, r0, r1
 801e506:	ea4b 0b08 	orr.w	fp, fp, r8
 801e50a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801e50e:	ee3d db47 	vsub.f64	d13, d13, d7
 801e512:	d03c      	beq.n	801e58e <_strtod_l+0xb16>
 801e514:	eeb4 dbca 	vcmpe.f64	d13, d10
 801e518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e51c:	f53f acf4 	bmi.w	801df08 <_strtod_l+0x490>
 801e520:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801e524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e528:	dda8      	ble.n	801e47c <_strtod_l+0xa04>
 801e52a:	e4ed      	b.n	801df08 <_strtod_l+0x490>
 801e52c:	9805      	ldr	r0, [sp, #20]
 801e52e:	b1f0      	cbz	r0, 801e56e <_strtod_l+0xaf6>
 801e530:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801e534:	d81b      	bhi.n	801e56e <_strtod_l+0xaf6>
 801e536:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801e5c0 <_strtod_l+0xb48>
 801e53a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801e53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e542:	d811      	bhi.n	801e568 <_strtod_l+0xaf0>
 801e544:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801e548:	ee1d 3a10 	vmov	r3, s26
 801e54c:	2b01      	cmp	r3, #1
 801e54e:	bf38      	it	cc
 801e550:	2301      	movcc	r3, #1
 801e552:	ee0d 3a10 	vmov	s26, r3
 801e556:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801e55a:	f1ba 0f00 	cmp.w	sl, #0
 801e55e:	d113      	bne.n	801e588 <_strtod_l+0xb10>
 801e560:	eeb1 7b4d 	vneg.f64	d7, d13
 801e564:	ec53 2b17 	vmov	r2, r3, d7
 801e568:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801e56c:	1a43      	subs	r3, r0, r1
 801e56e:	eeb0 0b48 	vmov.f64	d0, d8
 801e572:	ec43 2b1c 	vmov	d12, r2, r3
 801e576:	910a      	str	r1, [sp, #40]	; 0x28
 801e578:	f7ff f926 	bl	801d7c8 <__ulp>
 801e57c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e57e:	eeac 8b00 	vfma.f64	d8, d12, d0
 801e582:	ec59 8b18 	vmov	r8, r9, d8
 801e586:	e7aa      	b.n	801e4de <_strtod_l+0xa66>
 801e588:	eeb0 7b4d 	vmov.f64	d7, d13
 801e58c:	e7ea      	b.n	801e564 <_strtod_l+0xaec>
 801e58e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801e592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e596:	f57f af71 	bpl.w	801e47c <_strtod_l+0xa04>
 801e59a:	e4b5      	b.n	801df08 <_strtod_l+0x490>
 801e59c:	2300      	movs	r3, #0
 801e59e:	9308      	str	r3, [sp, #32]
 801e5a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e5a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e5a4:	6013      	str	r3, [r2, #0]
 801e5a6:	f7ff baa6 	b.w	801daf6 <_strtod_l+0x7e>
 801e5aa:	2a65      	cmp	r2, #101	; 0x65
 801e5ac:	f43f aba2 	beq.w	801dcf4 <_strtod_l+0x27c>
 801e5b0:	2a45      	cmp	r2, #69	; 0x45
 801e5b2:	f43f ab9f 	beq.w	801dcf4 <_strtod_l+0x27c>
 801e5b6:	2101      	movs	r1, #1
 801e5b8:	f7ff bbd8 	b.w	801dd6c <_strtod_l+0x2f4>
 801e5bc:	f3af 8000 	nop.w
 801e5c0:	ffc00000 	.word	0xffc00000
 801e5c4:	41dfffff 	.word	0x41dfffff
 801e5c8:	000fffff 	.word	0x000fffff
 801e5cc:	7ff00000 	.word	0x7ff00000
 801e5d0:	7fefffff 	.word	0x7fefffff
 801e5d4:	7c9fffff 	.word	0x7c9fffff
 801e5d8:	7fe00000 	.word	0x7fe00000

0801e5dc <_strtod_r>:
 801e5dc:	4b01      	ldr	r3, [pc, #4]	; (801e5e4 <_strtod_r+0x8>)
 801e5de:	f7ff ba4b 	b.w	801da78 <_strtod_l>
 801e5e2:	bf00      	nop
 801e5e4:	2400025c 	.word	0x2400025c

0801e5e8 <_strtol_l.constprop.0>:
 801e5e8:	2b01      	cmp	r3, #1
 801e5ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e5ee:	d001      	beq.n	801e5f4 <_strtol_l.constprop.0+0xc>
 801e5f0:	2b24      	cmp	r3, #36	; 0x24
 801e5f2:	d906      	bls.n	801e602 <_strtol_l.constprop.0+0x1a>
 801e5f4:	f7fd fe3c 	bl	801c270 <__errno>
 801e5f8:	2316      	movs	r3, #22
 801e5fa:	6003      	str	r3, [r0, #0]
 801e5fc:	2000      	movs	r0, #0
 801e5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e602:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801e6e8 <_strtol_l.constprop.0+0x100>
 801e606:	460d      	mov	r5, r1
 801e608:	462e      	mov	r6, r5
 801e60a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e60e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801e612:	f017 0708 	ands.w	r7, r7, #8
 801e616:	d1f7      	bne.n	801e608 <_strtol_l.constprop.0+0x20>
 801e618:	2c2d      	cmp	r4, #45	; 0x2d
 801e61a:	d132      	bne.n	801e682 <_strtol_l.constprop.0+0x9a>
 801e61c:	782c      	ldrb	r4, [r5, #0]
 801e61e:	2701      	movs	r7, #1
 801e620:	1cb5      	adds	r5, r6, #2
 801e622:	2b00      	cmp	r3, #0
 801e624:	d05b      	beq.n	801e6de <_strtol_l.constprop.0+0xf6>
 801e626:	2b10      	cmp	r3, #16
 801e628:	d109      	bne.n	801e63e <_strtol_l.constprop.0+0x56>
 801e62a:	2c30      	cmp	r4, #48	; 0x30
 801e62c:	d107      	bne.n	801e63e <_strtol_l.constprop.0+0x56>
 801e62e:	782c      	ldrb	r4, [r5, #0]
 801e630:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e634:	2c58      	cmp	r4, #88	; 0x58
 801e636:	d14d      	bne.n	801e6d4 <_strtol_l.constprop.0+0xec>
 801e638:	786c      	ldrb	r4, [r5, #1]
 801e63a:	2310      	movs	r3, #16
 801e63c:	3502      	adds	r5, #2
 801e63e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801e642:	f108 38ff 	add.w	r8, r8, #4294967295
 801e646:	f04f 0e00 	mov.w	lr, #0
 801e64a:	fbb8 f9f3 	udiv	r9, r8, r3
 801e64e:	4676      	mov	r6, lr
 801e650:	fb03 8a19 	mls	sl, r3, r9, r8
 801e654:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e658:	f1bc 0f09 	cmp.w	ip, #9
 801e65c:	d816      	bhi.n	801e68c <_strtol_l.constprop.0+0xa4>
 801e65e:	4664      	mov	r4, ip
 801e660:	42a3      	cmp	r3, r4
 801e662:	dd24      	ble.n	801e6ae <_strtol_l.constprop.0+0xc6>
 801e664:	f1be 3fff 	cmp.w	lr, #4294967295
 801e668:	d008      	beq.n	801e67c <_strtol_l.constprop.0+0x94>
 801e66a:	45b1      	cmp	r9, r6
 801e66c:	d31c      	bcc.n	801e6a8 <_strtol_l.constprop.0+0xc0>
 801e66e:	d101      	bne.n	801e674 <_strtol_l.constprop.0+0x8c>
 801e670:	45a2      	cmp	sl, r4
 801e672:	db19      	blt.n	801e6a8 <_strtol_l.constprop.0+0xc0>
 801e674:	fb06 4603 	mla	r6, r6, r3, r4
 801e678:	f04f 0e01 	mov.w	lr, #1
 801e67c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e680:	e7e8      	b.n	801e654 <_strtol_l.constprop.0+0x6c>
 801e682:	2c2b      	cmp	r4, #43	; 0x2b
 801e684:	bf04      	itt	eq
 801e686:	782c      	ldrbeq	r4, [r5, #0]
 801e688:	1cb5      	addeq	r5, r6, #2
 801e68a:	e7ca      	b.n	801e622 <_strtol_l.constprop.0+0x3a>
 801e68c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801e690:	f1bc 0f19 	cmp.w	ip, #25
 801e694:	d801      	bhi.n	801e69a <_strtol_l.constprop.0+0xb2>
 801e696:	3c37      	subs	r4, #55	; 0x37
 801e698:	e7e2      	b.n	801e660 <_strtol_l.constprop.0+0x78>
 801e69a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801e69e:	f1bc 0f19 	cmp.w	ip, #25
 801e6a2:	d804      	bhi.n	801e6ae <_strtol_l.constprop.0+0xc6>
 801e6a4:	3c57      	subs	r4, #87	; 0x57
 801e6a6:	e7db      	b.n	801e660 <_strtol_l.constprop.0+0x78>
 801e6a8:	f04f 3eff 	mov.w	lr, #4294967295
 801e6ac:	e7e6      	b.n	801e67c <_strtol_l.constprop.0+0x94>
 801e6ae:	f1be 3fff 	cmp.w	lr, #4294967295
 801e6b2:	d105      	bne.n	801e6c0 <_strtol_l.constprop.0+0xd8>
 801e6b4:	2322      	movs	r3, #34	; 0x22
 801e6b6:	6003      	str	r3, [r0, #0]
 801e6b8:	4646      	mov	r6, r8
 801e6ba:	b942      	cbnz	r2, 801e6ce <_strtol_l.constprop.0+0xe6>
 801e6bc:	4630      	mov	r0, r6
 801e6be:	e79e      	b.n	801e5fe <_strtol_l.constprop.0+0x16>
 801e6c0:	b107      	cbz	r7, 801e6c4 <_strtol_l.constprop.0+0xdc>
 801e6c2:	4276      	negs	r6, r6
 801e6c4:	2a00      	cmp	r2, #0
 801e6c6:	d0f9      	beq.n	801e6bc <_strtol_l.constprop.0+0xd4>
 801e6c8:	f1be 0f00 	cmp.w	lr, #0
 801e6cc:	d000      	beq.n	801e6d0 <_strtol_l.constprop.0+0xe8>
 801e6ce:	1e69      	subs	r1, r5, #1
 801e6d0:	6011      	str	r1, [r2, #0]
 801e6d2:	e7f3      	b.n	801e6bc <_strtol_l.constprop.0+0xd4>
 801e6d4:	2430      	movs	r4, #48	; 0x30
 801e6d6:	2b00      	cmp	r3, #0
 801e6d8:	d1b1      	bne.n	801e63e <_strtol_l.constprop.0+0x56>
 801e6da:	2308      	movs	r3, #8
 801e6dc:	e7af      	b.n	801e63e <_strtol_l.constprop.0+0x56>
 801e6de:	2c30      	cmp	r4, #48	; 0x30
 801e6e0:	d0a5      	beq.n	801e62e <_strtol_l.constprop.0+0x46>
 801e6e2:	230a      	movs	r3, #10
 801e6e4:	e7ab      	b.n	801e63e <_strtol_l.constprop.0+0x56>
 801e6e6:	bf00      	nop
 801e6e8:	08020af9 	.word	0x08020af9

0801e6ec <_strtol_r>:
 801e6ec:	f7ff bf7c 	b.w	801e5e8 <_strtol_l.constprop.0>

0801e6f0 <__ssputs_r>:
 801e6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e6f4:	688e      	ldr	r6, [r1, #8]
 801e6f6:	461f      	mov	r7, r3
 801e6f8:	42be      	cmp	r6, r7
 801e6fa:	680b      	ldr	r3, [r1, #0]
 801e6fc:	4682      	mov	sl, r0
 801e6fe:	460c      	mov	r4, r1
 801e700:	4690      	mov	r8, r2
 801e702:	d82c      	bhi.n	801e75e <__ssputs_r+0x6e>
 801e704:	898a      	ldrh	r2, [r1, #12]
 801e706:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e70a:	d026      	beq.n	801e75a <__ssputs_r+0x6a>
 801e70c:	6965      	ldr	r5, [r4, #20]
 801e70e:	6909      	ldr	r1, [r1, #16]
 801e710:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e714:	eba3 0901 	sub.w	r9, r3, r1
 801e718:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e71c:	1c7b      	adds	r3, r7, #1
 801e71e:	444b      	add	r3, r9
 801e720:	106d      	asrs	r5, r5, #1
 801e722:	429d      	cmp	r5, r3
 801e724:	bf38      	it	cc
 801e726:	461d      	movcc	r5, r3
 801e728:	0553      	lsls	r3, r2, #21
 801e72a:	d527      	bpl.n	801e77c <__ssputs_r+0x8c>
 801e72c:	4629      	mov	r1, r5
 801e72e:	f7fe fc53 	bl	801cfd8 <_malloc_r>
 801e732:	4606      	mov	r6, r0
 801e734:	b360      	cbz	r0, 801e790 <__ssputs_r+0xa0>
 801e736:	6921      	ldr	r1, [r4, #16]
 801e738:	464a      	mov	r2, r9
 801e73a:	f7fd fdce 	bl	801c2da <memcpy>
 801e73e:	89a3      	ldrh	r3, [r4, #12]
 801e740:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e748:	81a3      	strh	r3, [r4, #12]
 801e74a:	6126      	str	r6, [r4, #16]
 801e74c:	6165      	str	r5, [r4, #20]
 801e74e:	444e      	add	r6, r9
 801e750:	eba5 0509 	sub.w	r5, r5, r9
 801e754:	6026      	str	r6, [r4, #0]
 801e756:	60a5      	str	r5, [r4, #8]
 801e758:	463e      	mov	r6, r7
 801e75a:	42be      	cmp	r6, r7
 801e75c:	d900      	bls.n	801e760 <__ssputs_r+0x70>
 801e75e:	463e      	mov	r6, r7
 801e760:	6820      	ldr	r0, [r4, #0]
 801e762:	4632      	mov	r2, r6
 801e764:	4641      	mov	r1, r8
 801e766:	f000 fd5c 	bl	801f222 <memmove>
 801e76a:	68a3      	ldr	r3, [r4, #8]
 801e76c:	1b9b      	subs	r3, r3, r6
 801e76e:	60a3      	str	r3, [r4, #8]
 801e770:	6823      	ldr	r3, [r4, #0]
 801e772:	4433      	add	r3, r6
 801e774:	6023      	str	r3, [r4, #0]
 801e776:	2000      	movs	r0, #0
 801e778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e77c:	462a      	mov	r2, r5
 801e77e:	f001 f934 	bl	801f9ea <_realloc_r>
 801e782:	4606      	mov	r6, r0
 801e784:	2800      	cmp	r0, #0
 801e786:	d1e0      	bne.n	801e74a <__ssputs_r+0x5a>
 801e788:	6921      	ldr	r1, [r4, #16]
 801e78a:	4650      	mov	r0, sl
 801e78c:	f7fe fbb0 	bl	801cef0 <_free_r>
 801e790:	230c      	movs	r3, #12
 801e792:	f8ca 3000 	str.w	r3, [sl]
 801e796:	89a3      	ldrh	r3, [r4, #12]
 801e798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e79c:	81a3      	strh	r3, [r4, #12]
 801e79e:	f04f 30ff 	mov.w	r0, #4294967295
 801e7a2:	e7e9      	b.n	801e778 <__ssputs_r+0x88>

0801e7a4 <_svfiprintf_r>:
 801e7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7a8:	4698      	mov	r8, r3
 801e7aa:	898b      	ldrh	r3, [r1, #12]
 801e7ac:	061b      	lsls	r3, r3, #24
 801e7ae:	b09d      	sub	sp, #116	; 0x74
 801e7b0:	4607      	mov	r7, r0
 801e7b2:	460d      	mov	r5, r1
 801e7b4:	4614      	mov	r4, r2
 801e7b6:	d50e      	bpl.n	801e7d6 <_svfiprintf_r+0x32>
 801e7b8:	690b      	ldr	r3, [r1, #16]
 801e7ba:	b963      	cbnz	r3, 801e7d6 <_svfiprintf_r+0x32>
 801e7bc:	2140      	movs	r1, #64	; 0x40
 801e7be:	f7fe fc0b 	bl	801cfd8 <_malloc_r>
 801e7c2:	6028      	str	r0, [r5, #0]
 801e7c4:	6128      	str	r0, [r5, #16]
 801e7c6:	b920      	cbnz	r0, 801e7d2 <_svfiprintf_r+0x2e>
 801e7c8:	230c      	movs	r3, #12
 801e7ca:	603b      	str	r3, [r7, #0]
 801e7cc:	f04f 30ff 	mov.w	r0, #4294967295
 801e7d0:	e0d0      	b.n	801e974 <_svfiprintf_r+0x1d0>
 801e7d2:	2340      	movs	r3, #64	; 0x40
 801e7d4:	616b      	str	r3, [r5, #20]
 801e7d6:	2300      	movs	r3, #0
 801e7d8:	9309      	str	r3, [sp, #36]	; 0x24
 801e7da:	2320      	movs	r3, #32
 801e7dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e7e0:	f8cd 800c 	str.w	r8, [sp, #12]
 801e7e4:	2330      	movs	r3, #48	; 0x30
 801e7e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801e98c <_svfiprintf_r+0x1e8>
 801e7ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e7ee:	f04f 0901 	mov.w	r9, #1
 801e7f2:	4623      	mov	r3, r4
 801e7f4:	469a      	mov	sl, r3
 801e7f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e7fa:	b10a      	cbz	r2, 801e800 <_svfiprintf_r+0x5c>
 801e7fc:	2a25      	cmp	r2, #37	; 0x25
 801e7fe:	d1f9      	bne.n	801e7f4 <_svfiprintf_r+0x50>
 801e800:	ebba 0b04 	subs.w	fp, sl, r4
 801e804:	d00b      	beq.n	801e81e <_svfiprintf_r+0x7a>
 801e806:	465b      	mov	r3, fp
 801e808:	4622      	mov	r2, r4
 801e80a:	4629      	mov	r1, r5
 801e80c:	4638      	mov	r0, r7
 801e80e:	f7ff ff6f 	bl	801e6f0 <__ssputs_r>
 801e812:	3001      	adds	r0, #1
 801e814:	f000 80a9 	beq.w	801e96a <_svfiprintf_r+0x1c6>
 801e818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e81a:	445a      	add	r2, fp
 801e81c:	9209      	str	r2, [sp, #36]	; 0x24
 801e81e:	f89a 3000 	ldrb.w	r3, [sl]
 801e822:	2b00      	cmp	r3, #0
 801e824:	f000 80a1 	beq.w	801e96a <_svfiprintf_r+0x1c6>
 801e828:	2300      	movs	r3, #0
 801e82a:	f04f 32ff 	mov.w	r2, #4294967295
 801e82e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e832:	f10a 0a01 	add.w	sl, sl, #1
 801e836:	9304      	str	r3, [sp, #16]
 801e838:	9307      	str	r3, [sp, #28]
 801e83a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e83e:	931a      	str	r3, [sp, #104]	; 0x68
 801e840:	4654      	mov	r4, sl
 801e842:	2205      	movs	r2, #5
 801e844:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e848:	4850      	ldr	r0, [pc, #320]	; (801e98c <_svfiprintf_r+0x1e8>)
 801e84a:	f7e1 fd71 	bl	8000330 <memchr>
 801e84e:	9a04      	ldr	r2, [sp, #16]
 801e850:	b9d8      	cbnz	r0, 801e88a <_svfiprintf_r+0xe6>
 801e852:	06d0      	lsls	r0, r2, #27
 801e854:	bf44      	itt	mi
 801e856:	2320      	movmi	r3, #32
 801e858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e85c:	0711      	lsls	r1, r2, #28
 801e85e:	bf44      	itt	mi
 801e860:	232b      	movmi	r3, #43	; 0x2b
 801e862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e866:	f89a 3000 	ldrb.w	r3, [sl]
 801e86a:	2b2a      	cmp	r3, #42	; 0x2a
 801e86c:	d015      	beq.n	801e89a <_svfiprintf_r+0xf6>
 801e86e:	9a07      	ldr	r2, [sp, #28]
 801e870:	4654      	mov	r4, sl
 801e872:	2000      	movs	r0, #0
 801e874:	f04f 0c0a 	mov.w	ip, #10
 801e878:	4621      	mov	r1, r4
 801e87a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e87e:	3b30      	subs	r3, #48	; 0x30
 801e880:	2b09      	cmp	r3, #9
 801e882:	d94d      	bls.n	801e920 <_svfiprintf_r+0x17c>
 801e884:	b1b0      	cbz	r0, 801e8b4 <_svfiprintf_r+0x110>
 801e886:	9207      	str	r2, [sp, #28]
 801e888:	e014      	b.n	801e8b4 <_svfiprintf_r+0x110>
 801e88a:	eba0 0308 	sub.w	r3, r0, r8
 801e88e:	fa09 f303 	lsl.w	r3, r9, r3
 801e892:	4313      	orrs	r3, r2
 801e894:	9304      	str	r3, [sp, #16]
 801e896:	46a2      	mov	sl, r4
 801e898:	e7d2      	b.n	801e840 <_svfiprintf_r+0x9c>
 801e89a:	9b03      	ldr	r3, [sp, #12]
 801e89c:	1d19      	adds	r1, r3, #4
 801e89e:	681b      	ldr	r3, [r3, #0]
 801e8a0:	9103      	str	r1, [sp, #12]
 801e8a2:	2b00      	cmp	r3, #0
 801e8a4:	bfbb      	ittet	lt
 801e8a6:	425b      	neglt	r3, r3
 801e8a8:	f042 0202 	orrlt.w	r2, r2, #2
 801e8ac:	9307      	strge	r3, [sp, #28]
 801e8ae:	9307      	strlt	r3, [sp, #28]
 801e8b0:	bfb8      	it	lt
 801e8b2:	9204      	strlt	r2, [sp, #16]
 801e8b4:	7823      	ldrb	r3, [r4, #0]
 801e8b6:	2b2e      	cmp	r3, #46	; 0x2e
 801e8b8:	d10c      	bne.n	801e8d4 <_svfiprintf_r+0x130>
 801e8ba:	7863      	ldrb	r3, [r4, #1]
 801e8bc:	2b2a      	cmp	r3, #42	; 0x2a
 801e8be:	d134      	bne.n	801e92a <_svfiprintf_r+0x186>
 801e8c0:	9b03      	ldr	r3, [sp, #12]
 801e8c2:	1d1a      	adds	r2, r3, #4
 801e8c4:	681b      	ldr	r3, [r3, #0]
 801e8c6:	9203      	str	r2, [sp, #12]
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	bfb8      	it	lt
 801e8cc:	f04f 33ff 	movlt.w	r3, #4294967295
 801e8d0:	3402      	adds	r4, #2
 801e8d2:	9305      	str	r3, [sp, #20]
 801e8d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801e99c <_svfiprintf_r+0x1f8>
 801e8d8:	7821      	ldrb	r1, [r4, #0]
 801e8da:	2203      	movs	r2, #3
 801e8dc:	4650      	mov	r0, sl
 801e8de:	f7e1 fd27 	bl	8000330 <memchr>
 801e8e2:	b138      	cbz	r0, 801e8f4 <_svfiprintf_r+0x150>
 801e8e4:	9b04      	ldr	r3, [sp, #16]
 801e8e6:	eba0 000a 	sub.w	r0, r0, sl
 801e8ea:	2240      	movs	r2, #64	; 0x40
 801e8ec:	4082      	lsls	r2, r0
 801e8ee:	4313      	orrs	r3, r2
 801e8f0:	3401      	adds	r4, #1
 801e8f2:	9304      	str	r3, [sp, #16]
 801e8f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e8f8:	4825      	ldr	r0, [pc, #148]	; (801e990 <_svfiprintf_r+0x1ec>)
 801e8fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e8fe:	2206      	movs	r2, #6
 801e900:	f7e1 fd16 	bl	8000330 <memchr>
 801e904:	2800      	cmp	r0, #0
 801e906:	d038      	beq.n	801e97a <_svfiprintf_r+0x1d6>
 801e908:	4b22      	ldr	r3, [pc, #136]	; (801e994 <_svfiprintf_r+0x1f0>)
 801e90a:	bb1b      	cbnz	r3, 801e954 <_svfiprintf_r+0x1b0>
 801e90c:	9b03      	ldr	r3, [sp, #12]
 801e90e:	3307      	adds	r3, #7
 801e910:	f023 0307 	bic.w	r3, r3, #7
 801e914:	3308      	adds	r3, #8
 801e916:	9303      	str	r3, [sp, #12]
 801e918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e91a:	4433      	add	r3, r6
 801e91c:	9309      	str	r3, [sp, #36]	; 0x24
 801e91e:	e768      	b.n	801e7f2 <_svfiprintf_r+0x4e>
 801e920:	fb0c 3202 	mla	r2, ip, r2, r3
 801e924:	460c      	mov	r4, r1
 801e926:	2001      	movs	r0, #1
 801e928:	e7a6      	b.n	801e878 <_svfiprintf_r+0xd4>
 801e92a:	2300      	movs	r3, #0
 801e92c:	3401      	adds	r4, #1
 801e92e:	9305      	str	r3, [sp, #20]
 801e930:	4619      	mov	r1, r3
 801e932:	f04f 0c0a 	mov.w	ip, #10
 801e936:	4620      	mov	r0, r4
 801e938:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e93c:	3a30      	subs	r2, #48	; 0x30
 801e93e:	2a09      	cmp	r2, #9
 801e940:	d903      	bls.n	801e94a <_svfiprintf_r+0x1a6>
 801e942:	2b00      	cmp	r3, #0
 801e944:	d0c6      	beq.n	801e8d4 <_svfiprintf_r+0x130>
 801e946:	9105      	str	r1, [sp, #20]
 801e948:	e7c4      	b.n	801e8d4 <_svfiprintf_r+0x130>
 801e94a:	fb0c 2101 	mla	r1, ip, r1, r2
 801e94e:	4604      	mov	r4, r0
 801e950:	2301      	movs	r3, #1
 801e952:	e7f0      	b.n	801e936 <_svfiprintf_r+0x192>
 801e954:	ab03      	add	r3, sp, #12
 801e956:	9300      	str	r3, [sp, #0]
 801e958:	462a      	mov	r2, r5
 801e95a:	4b0f      	ldr	r3, [pc, #60]	; (801e998 <_svfiprintf_r+0x1f4>)
 801e95c:	a904      	add	r1, sp, #16
 801e95e:	4638      	mov	r0, r7
 801e960:	f7fc fd32 	bl	801b3c8 <_printf_float>
 801e964:	1c42      	adds	r2, r0, #1
 801e966:	4606      	mov	r6, r0
 801e968:	d1d6      	bne.n	801e918 <_svfiprintf_r+0x174>
 801e96a:	89ab      	ldrh	r3, [r5, #12]
 801e96c:	065b      	lsls	r3, r3, #25
 801e96e:	f53f af2d 	bmi.w	801e7cc <_svfiprintf_r+0x28>
 801e972:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e974:	b01d      	add	sp, #116	; 0x74
 801e976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e97a:	ab03      	add	r3, sp, #12
 801e97c:	9300      	str	r3, [sp, #0]
 801e97e:	462a      	mov	r2, r5
 801e980:	4b05      	ldr	r3, [pc, #20]	; (801e998 <_svfiprintf_r+0x1f4>)
 801e982:	a904      	add	r1, sp, #16
 801e984:	4638      	mov	r0, r7
 801e986:	f7fc ffa7 	bl	801b8d8 <_printf_i>
 801e98a:	e7eb      	b.n	801e964 <_svfiprintf_r+0x1c0>
 801e98c:	08020bf9 	.word	0x08020bf9
 801e990:	08020c03 	.word	0x08020c03
 801e994:	0801b3c9 	.word	0x0801b3c9
 801e998:	0801e6f1 	.word	0x0801e6f1
 801e99c:	08020bff 	.word	0x08020bff

0801e9a0 <_sungetc_r>:
 801e9a0:	b538      	push	{r3, r4, r5, lr}
 801e9a2:	1c4b      	adds	r3, r1, #1
 801e9a4:	4614      	mov	r4, r2
 801e9a6:	d103      	bne.n	801e9b0 <_sungetc_r+0x10>
 801e9a8:	f04f 35ff 	mov.w	r5, #4294967295
 801e9ac:	4628      	mov	r0, r5
 801e9ae:	bd38      	pop	{r3, r4, r5, pc}
 801e9b0:	8993      	ldrh	r3, [r2, #12]
 801e9b2:	f023 0320 	bic.w	r3, r3, #32
 801e9b6:	8193      	strh	r3, [r2, #12]
 801e9b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e9ba:	6852      	ldr	r2, [r2, #4]
 801e9bc:	b2cd      	uxtb	r5, r1
 801e9be:	b18b      	cbz	r3, 801e9e4 <_sungetc_r+0x44>
 801e9c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e9c2:	4293      	cmp	r3, r2
 801e9c4:	dd08      	ble.n	801e9d8 <_sungetc_r+0x38>
 801e9c6:	6823      	ldr	r3, [r4, #0]
 801e9c8:	1e5a      	subs	r2, r3, #1
 801e9ca:	6022      	str	r2, [r4, #0]
 801e9cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 801e9d0:	6863      	ldr	r3, [r4, #4]
 801e9d2:	3301      	adds	r3, #1
 801e9d4:	6063      	str	r3, [r4, #4]
 801e9d6:	e7e9      	b.n	801e9ac <_sungetc_r+0xc>
 801e9d8:	4621      	mov	r1, r4
 801e9da:	f000 fbe8 	bl	801f1ae <__submore>
 801e9de:	2800      	cmp	r0, #0
 801e9e0:	d0f1      	beq.n	801e9c6 <_sungetc_r+0x26>
 801e9e2:	e7e1      	b.n	801e9a8 <_sungetc_r+0x8>
 801e9e4:	6921      	ldr	r1, [r4, #16]
 801e9e6:	6823      	ldr	r3, [r4, #0]
 801e9e8:	b151      	cbz	r1, 801ea00 <_sungetc_r+0x60>
 801e9ea:	4299      	cmp	r1, r3
 801e9ec:	d208      	bcs.n	801ea00 <_sungetc_r+0x60>
 801e9ee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801e9f2:	42a9      	cmp	r1, r5
 801e9f4:	d104      	bne.n	801ea00 <_sungetc_r+0x60>
 801e9f6:	3b01      	subs	r3, #1
 801e9f8:	3201      	adds	r2, #1
 801e9fa:	6023      	str	r3, [r4, #0]
 801e9fc:	6062      	str	r2, [r4, #4]
 801e9fe:	e7d5      	b.n	801e9ac <_sungetc_r+0xc>
 801ea00:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801ea04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ea08:	6363      	str	r3, [r4, #52]	; 0x34
 801ea0a:	2303      	movs	r3, #3
 801ea0c:	63a3      	str	r3, [r4, #56]	; 0x38
 801ea0e:	4623      	mov	r3, r4
 801ea10:	f803 5f46 	strb.w	r5, [r3, #70]!
 801ea14:	6023      	str	r3, [r4, #0]
 801ea16:	2301      	movs	r3, #1
 801ea18:	e7dc      	b.n	801e9d4 <_sungetc_r+0x34>

0801ea1a <__ssrefill_r>:
 801ea1a:	b510      	push	{r4, lr}
 801ea1c:	460c      	mov	r4, r1
 801ea1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ea20:	b169      	cbz	r1, 801ea3e <__ssrefill_r+0x24>
 801ea22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ea26:	4299      	cmp	r1, r3
 801ea28:	d001      	beq.n	801ea2e <__ssrefill_r+0x14>
 801ea2a:	f7fe fa61 	bl	801cef0 <_free_r>
 801ea2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ea30:	6063      	str	r3, [r4, #4]
 801ea32:	2000      	movs	r0, #0
 801ea34:	6360      	str	r0, [r4, #52]	; 0x34
 801ea36:	b113      	cbz	r3, 801ea3e <__ssrefill_r+0x24>
 801ea38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ea3a:	6023      	str	r3, [r4, #0]
 801ea3c:	bd10      	pop	{r4, pc}
 801ea3e:	6923      	ldr	r3, [r4, #16]
 801ea40:	6023      	str	r3, [r4, #0]
 801ea42:	2300      	movs	r3, #0
 801ea44:	6063      	str	r3, [r4, #4]
 801ea46:	89a3      	ldrh	r3, [r4, #12]
 801ea48:	f043 0320 	orr.w	r3, r3, #32
 801ea4c:	81a3      	strh	r3, [r4, #12]
 801ea4e:	f04f 30ff 	mov.w	r0, #4294967295
 801ea52:	e7f3      	b.n	801ea3c <__ssrefill_r+0x22>

0801ea54 <__ssvfiscanf_r>:
 801ea54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea58:	460c      	mov	r4, r1
 801ea5a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801ea5e:	2100      	movs	r1, #0
 801ea60:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801ea64:	49a6      	ldr	r1, [pc, #664]	; (801ed00 <__ssvfiscanf_r+0x2ac>)
 801ea66:	91a0      	str	r1, [sp, #640]	; 0x280
 801ea68:	f10d 0804 	add.w	r8, sp, #4
 801ea6c:	49a5      	ldr	r1, [pc, #660]	; (801ed04 <__ssvfiscanf_r+0x2b0>)
 801ea6e:	4fa6      	ldr	r7, [pc, #664]	; (801ed08 <__ssvfiscanf_r+0x2b4>)
 801ea70:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801ed0c <__ssvfiscanf_r+0x2b8>
 801ea74:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801ea78:	4606      	mov	r6, r0
 801ea7a:	91a1      	str	r1, [sp, #644]	; 0x284
 801ea7c:	9300      	str	r3, [sp, #0]
 801ea7e:	7813      	ldrb	r3, [r2, #0]
 801ea80:	2b00      	cmp	r3, #0
 801ea82:	f000 815a 	beq.w	801ed3a <__ssvfiscanf_r+0x2e6>
 801ea86:	5cf9      	ldrb	r1, [r7, r3]
 801ea88:	f011 0108 	ands.w	r1, r1, #8
 801ea8c:	f102 0501 	add.w	r5, r2, #1
 801ea90:	d019      	beq.n	801eac6 <__ssvfiscanf_r+0x72>
 801ea92:	6863      	ldr	r3, [r4, #4]
 801ea94:	2b00      	cmp	r3, #0
 801ea96:	dd0f      	ble.n	801eab8 <__ssvfiscanf_r+0x64>
 801ea98:	6823      	ldr	r3, [r4, #0]
 801ea9a:	781a      	ldrb	r2, [r3, #0]
 801ea9c:	5cba      	ldrb	r2, [r7, r2]
 801ea9e:	0712      	lsls	r2, r2, #28
 801eaa0:	d401      	bmi.n	801eaa6 <__ssvfiscanf_r+0x52>
 801eaa2:	462a      	mov	r2, r5
 801eaa4:	e7eb      	b.n	801ea7e <__ssvfiscanf_r+0x2a>
 801eaa6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801eaa8:	3201      	adds	r2, #1
 801eaaa:	9245      	str	r2, [sp, #276]	; 0x114
 801eaac:	6862      	ldr	r2, [r4, #4]
 801eaae:	3301      	adds	r3, #1
 801eab0:	3a01      	subs	r2, #1
 801eab2:	6062      	str	r2, [r4, #4]
 801eab4:	6023      	str	r3, [r4, #0]
 801eab6:	e7ec      	b.n	801ea92 <__ssvfiscanf_r+0x3e>
 801eab8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801eaba:	4621      	mov	r1, r4
 801eabc:	4630      	mov	r0, r6
 801eabe:	4798      	blx	r3
 801eac0:	2800      	cmp	r0, #0
 801eac2:	d0e9      	beq.n	801ea98 <__ssvfiscanf_r+0x44>
 801eac4:	e7ed      	b.n	801eaa2 <__ssvfiscanf_r+0x4e>
 801eac6:	2b25      	cmp	r3, #37	; 0x25
 801eac8:	d012      	beq.n	801eaf0 <__ssvfiscanf_r+0x9c>
 801eaca:	469a      	mov	sl, r3
 801eacc:	6863      	ldr	r3, [r4, #4]
 801eace:	2b00      	cmp	r3, #0
 801ead0:	f340 8091 	ble.w	801ebf6 <__ssvfiscanf_r+0x1a2>
 801ead4:	6822      	ldr	r2, [r4, #0]
 801ead6:	7813      	ldrb	r3, [r2, #0]
 801ead8:	4553      	cmp	r3, sl
 801eada:	f040 812e 	bne.w	801ed3a <__ssvfiscanf_r+0x2e6>
 801eade:	6863      	ldr	r3, [r4, #4]
 801eae0:	3b01      	subs	r3, #1
 801eae2:	6063      	str	r3, [r4, #4]
 801eae4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801eae6:	3201      	adds	r2, #1
 801eae8:	3301      	adds	r3, #1
 801eaea:	6022      	str	r2, [r4, #0]
 801eaec:	9345      	str	r3, [sp, #276]	; 0x114
 801eaee:	e7d8      	b.n	801eaa2 <__ssvfiscanf_r+0x4e>
 801eaf0:	9141      	str	r1, [sp, #260]	; 0x104
 801eaf2:	9143      	str	r1, [sp, #268]	; 0x10c
 801eaf4:	7853      	ldrb	r3, [r2, #1]
 801eaf6:	2b2a      	cmp	r3, #42	; 0x2a
 801eaf8:	bf02      	ittt	eq
 801eafa:	2310      	moveq	r3, #16
 801eafc:	1c95      	addeq	r5, r2, #2
 801eafe:	9341      	streq	r3, [sp, #260]	; 0x104
 801eb00:	220a      	movs	r2, #10
 801eb02:	46aa      	mov	sl, r5
 801eb04:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801eb08:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801eb0c:	2b09      	cmp	r3, #9
 801eb0e:	d91c      	bls.n	801eb4a <__ssvfiscanf_r+0xf6>
 801eb10:	487e      	ldr	r0, [pc, #504]	; (801ed0c <__ssvfiscanf_r+0x2b8>)
 801eb12:	2203      	movs	r2, #3
 801eb14:	f7e1 fc0c 	bl	8000330 <memchr>
 801eb18:	b138      	cbz	r0, 801eb2a <__ssvfiscanf_r+0xd6>
 801eb1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801eb1c:	eba0 0009 	sub.w	r0, r0, r9
 801eb20:	2301      	movs	r3, #1
 801eb22:	4083      	lsls	r3, r0
 801eb24:	4313      	orrs	r3, r2
 801eb26:	9341      	str	r3, [sp, #260]	; 0x104
 801eb28:	4655      	mov	r5, sl
 801eb2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801eb2e:	2b78      	cmp	r3, #120	; 0x78
 801eb30:	d806      	bhi.n	801eb40 <__ssvfiscanf_r+0xec>
 801eb32:	2b57      	cmp	r3, #87	; 0x57
 801eb34:	d810      	bhi.n	801eb58 <__ssvfiscanf_r+0x104>
 801eb36:	2b25      	cmp	r3, #37	; 0x25
 801eb38:	d0c7      	beq.n	801eaca <__ssvfiscanf_r+0x76>
 801eb3a:	d857      	bhi.n	801ebec <__ssvfiscanf_r+0x198>
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	d065      	beq.n	801ec0c <__ssvfiscanf_r+0x1b8>
 801eb40:	2303      	movs	r3, #3
 801eb42:	9347      	str	r3, [sp, #284]	; 0x11c
 801eb44:	230a      	movs	r3, #10
 801eb46:	9342      	str	r3, [sp, #264]	; 0x108
 801eb48:	e076      	b.n	801ec38 <__ssvfiscanf_r+0x1e4>
 801eb4a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801eb4c:	fb02 1103 	mla	r1, r2, r3, r1
 801eb50:	3930      	subs	r1, #48	; 0x30
 801eb52:	9143      	str	r1, [sp, #268]	; 0x10c
 801eb54:	4655      	mov	r5, sl
 801eb56:	e7d4      	b.n	801eb02 <__ssvfiscanf_r+0xae>
 801eb58:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801eb5c:	2a20      	cmp	r2, #32
 801eb5e:	d8ef      	bhi.n	801eb40 <__ssvfiscanf_r+0xec>
 801eb60:	a101      	add	r1, pc, #4	; (adr r1, 801eb68 <__ssvfiscanf_r+0x114>)
 801eb62:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801eb66:	bf00      	nop
 801eb68:	0801ec1b 	.word	0x0801ec1b
 801eb6c:	0801eb41 	.word	0x0801eb41
 801eb70:	0801eb41 	.word	0x0801eb41
 801eb74:	0801ec79 	.word	0x0801ec79
 801eb78:	0801eb41 	.word	0x0801eb41
 801eb7c:	0801eb41 	.word	0x0801eb41
 801eb80:	0801eb41 	.word	0x0801eb41
 801eb84:	0801eb41 	.word	0x0801eb41
 801eb88:	0801eb41 	.word	0x0801eb41
 801eb8c:	0801eb41 	.word	0x0801eb41
 801eb90:	0801eb41 	.word	0x0801eb41
 801eb94:	0801ec8f 	.word	0x0801ec8f
 801eb98:	0801ec75 	.word	0x0801ec75
 801eb9c:	0801ebf3 	.word	0x0801ebf3
 801eba0:	0801ebf3 	.word	0x0801ebf3
 801eba4:	0801ebf3 	.word	0x0801ebf3
 801eba8:	0801eb41 	.word	0x0801eb41
 801ebac:	0801ec31 	.word	0x0801ec31
 801ebb0:	0801eb41 	.word	0x0801eb41
 801ebb4:	0801eb41 	.word	0x0801eb41
 801ebb8:	0801eb41 	.word	0x0801eb41
 801ebbc:	0801eb41 	.word	0x0801eb41
 801ebc0:	0801ec9f 	.word	0x0801ec9f
 801ebc4:	0801ec6d 	.word	0x0801ec6d
 801ebc8:	0801ec13 	.word	0x0801ec13
 801ebcc:	0801eb41 	.word	0x0801eb41
 801ebd0:	0801eb41 	.word	0x0801eb41
 801ebd4:	0801ec9b 	.word	0x0801ec9b
 801ebd8:	0801eb41 	.word	0x0801eb41
 801ebdc:	0801ec75 	.word	0x0801ec75
 801ebe0:	0801eb41 	.word	0x0801eb41
 801ebe4:	0801eb41 	.word	0x0801eb41
 801ebe8:	0801ec1b 	.word	0x0801ec1b
 801ebec:	3b45      	subs	r3, #69	; 0x45
 801ebee:	2b02      	cmp	r3, #2
 801ebf0:	d8a6      	bhi.n	801eb40 <__ssvfiscanf_r+0xec>
 801ebf2:	2305      	movs	r3, #5
 801ebf4:	e01f      	b.n	801ec36 <__ssvfiscanf_r+0x1e2>
 801ebf6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ebf8:	4621      	mov	r1, r4
 801ebfa:	4630      	mov	r0, r6
 801ebfc:	4798      	blx	r3
 801ebfe:	2800      	cmp	r0, #0
 801ec00:	f43f af68 	beq.w	801ead4 <__ssvfiscanf_r+0x80>
 801ec04:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ec06:	2800      	cmp	r0, #0
 801ec08:	f040 808d 	bne.w	801ed26 <__ssvfiscanf_r+0x2d2>
 801ec0c:	f04f 30ff 	mov.w	r0, #4294967295
 801ec10:	e08f      	b.n	801ed32 <__ssvfiscanf_r+0x2de>
 801ec12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ec14:	f042 0220 	orr.w	r2, r2, #32
 801ec18:	9241      	str	r2, [sp, #260]	; 0x104
 801ec1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ec1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ec20:	9241      	str	r2, [sp, #260]	; 0x104
 801ec22:	2210      	movs	r2, #16
 801ec24:	2b6f      	cmp	r3, #111	; 0x6f
 801ec26:	9242      	str	r2, [sp, #264]	; 0x108
 801ec28:	bf34      	ite	cc
 801ec2a:	2303      	movcc	r3, #3
 801ec2c:	2304      	movcs	r3, #4
 801ec2e:	e002      	b.n	801ec36 <__ssvfiscanf_r+0x1e2>
 801ec30:	2300      	movs	r3, #0
 801ec32:	9342      	str	r3, [sp, #264]	; 0x108
 801ec34:	2303      	movs	r3, #3
 801ec36:	9347      	str	r3, [sp, #284]	; 0x11c
 801ec38:	6863      	ldr	r3, [r4, #4]
 801ec3a:	2b00      	cmp	r3, #0
 801ec3c:	dd3d      	ble.n	801ecba <__ssvfiscanf_r+0x266>
 801ec3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ec40:	0659      	lsls	r1, r3, #25
 801ec42:	d404      	bmi.n	801ec4e <__ssvfiscanf_r+0x1fa>
 801ec44:	6823      	ldr	r3, [r4, #0]
 801ec46:	781a      	ldrb	r2, [r3, #0]
 801ec48:	5cba      	ldrb	r2, [r7, r2]
 801ec4a:	0712      	lsls	r2, r2, #28
 801ec4c:	d43c      	bmi.n	801ecc8 <__ssvfiscanf_r+0x274>
 801ec4e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801ec50:	2b02      	cmp	r3, #2
 801ec52:	dc4b      	bgt.n	801ecec <__ssvfiscanf_r+0x298>
 801ec54:	466b      	mov	r3, sp
 801ec56:	4622      	mov	r2, r4
 801ec58:	a941      	add	r1, sp, #260	; 0x104
 801ec5a:	4630      	mov	r0, r6
 801ec5c:	f000 f872 	bl	801ed44 <_scanf_chars>
 801ec60:	2801      	cmp	r0, #1
 801ec62:	d06a      	beq.n	801ed3a <__ssvfiscanf_r+0x2e6>
 801ec64:	2802      	cmp	r0, #2
 801ec66:	f47f af1c 	bne.w	801eaa2 <__ssvfiscanf_r+0x4e>
 801ec6a:	e7cb      	b.n	801ec04 <__ssvfiscanf_r+0x1b0>
 801ec6c:	2308      	movs	r3, #8
 801ec6e:	9342      	str	r3, [sp, #264]	; 0x108
 801ec70:	2304      	movs	r3, #4
 801ec72:	e7e0      	b.n	801ec36 <__ssvfiscanf_r+0x1e2>
 801ec74:	220a      	movs	r2, #10
 801ec76:	e7d5      	b.n	801ec24 <__ssvfiscanf_r+0x1d0>
 801ec78:	4629      	mov	r1, r5
 801ec7a:	4640      	mov	r0, r8
 801ec7c:	f000 fa5e 	bl	801f13c <__sccl>
 801ec80:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ec82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ec86:	9341      	str	r3, [sp, #260]	; 0x104
 801ec88:	4605      	mov	r5, r0
 801ec8a:	2301      	movs	r3, #1
 801ec8c:	e7d3      	b.n	801ec36 <__ssvfiscanf_r+0x1e2>
 801ec8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ec90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ec94:	9341      	str	r3, [sp, #260]	; 0x104
 801ec96:	2300      	movs	r3, #0
 801ec98:	e7cd      	b.n	801ec36 <__ssvfiscanf_r+0x1e2>
 801ec9a:	2302      	movs	r3, #2
 801ec9c:	e7cb      	b.n	801ec36 <__ssvfiscanf_r+0x1e2>
 801ec9e:	9841      	ldr	r0, [sp, #260]	; 0x104
 801eca0:	06c3      	lsls	r3, r0, #27
 801eca2:	f53f aefe 	bmi.w	801eaa2 <__ssvfiscanf_r+0x4e>
 801eca6:	9b00      	ldr	r3, [sp, #0]
 801eca8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ecaa:	1d19      	adds	r1, r3, #4
 801ecac:	9100      	str	r1, [sp, #0]
 801ecae:	681b      	ldr	r3, [r3, #0]
 801ecb0:	07c0      	lsls	r0, r0, #31
 801ecb2:	bf4c      	ite	mi
 801ecb4:	801a      	strhmi	r2, [r3, #0]
 801ecb6:	601a      	strpl	r2, [r3, #0]
 801ecb8:	e6f3      	b.n	801eaa2 <__ssvfiscanf_r+0x4e>
 801ecba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ecbc:	4621      	mov	r1, r4
 801ecbe:	4630      	mov	r0, r6
 801ecc0:	4798      	blx	r3
 801ecc2:	2800      	cmp	r0, #0
 801ecc4:	d0bb      	beq.n	801ec3e <__ssvfiscanf_r+0x1ea>
 801ecc6:	e79d      	b.n	801ec04 <__ssvfiscanf_r+0x1b0>
 801ecc8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ecca:	3201      	adds	r2, #1
 801eccc:	9245      	str	r2, [sp, #276]	; 0x114
 801ecce:	6862      	ldr	r2, [r4, #4]
 801ecd0:	3a01      	subs	r2, #1
 801ecd2:	2a00      	cmp	r2, #0
 801ecd4:	6062      	str	r2, [r4, #4]
 801ecd6:	dd02      	ble.n	801ecde <__ssvfiscanf_r+0x28a>
 801ecd8:	3301      	adds	r3, #1
 801ecda:	6023      	str	r3, [r4, #0]
 801ecdc:	e7b2      	b.n	801ec44 <__ssvfiscanf_r+0x1f0>
 801ecde:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ece0:	4621      	mov	r1, r4
 801ece2:	4630      	mov	r0, r6
 801ece4:	4798      	blx	r3
 801ece6:	2800      	cmp	r0, #0
 801ece8:	d0ac      	beq.n	801ec44 <__ssvfiscanf_r+0x1f0>
 801ecea:	e78b      	b.n	801ec04 <__ssvfiscanf_r+0x1b0>
 801ecec:	2b04      	cmp	r3, #4
 801ecee:	dc0f      	bgt.n	801ed10 <__ssvfiscanf_r+0x2bc>
 801ecf0:	466b      	mov	r3, sp
 801ecf2:	4622      	mov	r2, r4
 801ecf4:	a941      	add	r1, sp, #260	; 0x104
 801ecf6:	4630      	mov	r0, r6
 801ecf8:	f000 f87e 	bl	801edf8 <_scanf_i>
 801ecfc:	e7b0      	b.n	801ec60 <__ssvfiscanf_r+0x20c>
 801ecfe:	bf00      	nop
 801ed00:	0801e9a1 	.word	0x0801e9a1
 801ed04:	0801ea1b 	.word	0x0801ea1b
 801ed08:	08020af9 	.word	0x08020af9
 801ed0c:	08020bff 	.word	0x08020bff
 801ed10:	4b0b      	ldr	r3, [pc, #44]	; (801ed40 <__ssvfiscanf_r+0x2ec>)
 801ed12:	2b00      	cmp	r3, #0
 801ed14:	f43f aec5 	beq.w	801eaa2 <__ssvfiscanf_r+0x4e>
 801ed18:	466b      	mov	r3, sp
 801ed1a:	4622      	mov	r2, r4
 801ed1c:	a941      	add	r1, sp, #260	; 0x104
 801ed1e:	4630      	mov	r0, r6
 801ed20:	f7fc fefc 	bl	801bb1c <_scanf_float>
 801ed24:	e79c      	b.n	801ec60 <__ssvfiscanf_r+0x20c>
 801ed26:	89a3      	ldrh	r3, [r4, #12]
 801ed28:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ed2c:	bf18      	it	ne
 801ed2e:	f04f 30ff 	movne.w	r0, #4294967295
 801ed32:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801ed36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed3a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ed3c:	e7f9      	b.n	801ed32 <__ssvfiscanf_r+0x2de>
 801ed3e:	bf00      	nop
 801ed40:	0801bb1d 	.word	0x0801bb1d

0801ed44 <_scanf_chars>:
 801ed44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ed48:	4615      	mov	r5, r2
 801ed4a:	688a      	ldr	r2, [r1, #8]
 801ed4c:	4680      	mov	r8, r0
 801ed4e:	460c      	mov	r4, r1
 801ed50:	b932      	cbnz	r2, 801ed60 <_scanf_chars+0x1c>
 801ed52:	698a      	ldr	r2, [r1, #24]
 801ed54:	2a00      	cmp	r2, #0
 801ed56:	bf0c      	ite	eq
 801ed58:	2201      	moveq	r2, #1
 801ed5a:	f04f 32ff 	movne.w	r2, #4294967295
 801ed5e:	608a      	str	r2, [r1, #8]
 801ed60:	6822      	ldr	r2, [r4, #0]
 801ed62:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801edf4 <_scanf_chars+0xb0>
 801ed66:	06d1      	lsls	r1, r2, #27
 801ed68:	bf5f      	itttt	pl
 801ed6a:	681a      	ldrpl	r2, [r3, #0]
 801ed6c:	1d11      	addpl	r1, r2, #4
 801ed6e:	6019      	strpl	r1, [r3, #0]
 801ed70:	6816      	ldrpl	r6, [r2, #0]
 801ed72:	2700      	movs	r7, #0
 801ed74:	69a0      	ldr	r0, [r4, #24]
 801ed76:	b188      	cbz	r0, 801ed9c <_scanf_chars+0x58>
 801ed78:	2801      	cmp	r0, #1
 801ed7a:	d107      	bne.n	801ed8c <_scanf_chars+0x48>
 801ed7c:	682a      	ldr	r2, [r5, #0]
 801ed7e:	7811      	ldrb	r1, [r2, #0]
 801ed80:	6962      	ldr	r2, [r4, #20]
 801ed82:	5c52      	ldrb	r2, [r2, r1]
 801ed84:	b952      	cbnz	r2, 801ed9c <_scanf_chars+0x58>
 801ed86:	2f00      	cmp	r7, #0
 801ed88:	d031      	beq.n	801edee <_scanf_chars+0xaa>
 801ed8a:	e022      	b.n	801edd2 <_scanf_chars+0x8e>
 801ed8c:	2802      	cmp	r0, #2
 801ed8e:	d120      	bne.n	801edd2 <_scanf_chars+0x8e>
 801ed90:	682b      	ldr	r3, [r5, #0]
 801ed92:	781b      	ldrb	r3, [r3, #0]
 801ed94:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ed98:	071b      	lsls	r3, r3, #28
 801ed9a:	d41a      	bmi.n	801edd2 <_scanf_chars+0x8e>
 801ed9c:	6823      	ldr	r3, [r4, #0]
 801ed9e:	06da      	lsls	r2, r3, #27
 801eda0:	bf5e      	ittt	pl
 801eda2:	682b      	ldrpl	r3, [r5, #0]
 801eda4:	781b      	ldrbpl	r3, [r3, #0]
 801eda6:	f806 3b01 	strbpl.w	r3, [r6], #1
 801edaa:	682a      	ldr	r2, [r5, #0]
 801edac:	686b      	ldr	r3, [r5, #4]
 801edae:	3201      	adds	r2, #1
 801edb0:	602a      	str	r2, [r5, #0]
 801edb2:	68a2      	ldr	r2, [r4, #8]
 801edb4:	3b01      	subs	r3, #1
 801edb6:	3a01      	subs	r2, #1
 801edb8:	606b      	str	r3, [r5, #4]
 801edba:	3701      	adds	r7, #1
 801edbc:	60a2      	str	r2, [r4, #8]
 801edbe:	b142      	cbz	r2, 801edd2 <_scanf_chars+0x8e>
 801edc0:	2b00      	cmp	r3, #0
 801edc2:	dcd7      	bgt.n	801ed74 <_scanf_chars+0x30>
 801edc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801edc8:	4629      	mov	r1, r5
 801edca:	4640      	mov	r0, r8
 801edcc:	4798      	blx	r3
 801edce:	2800      	cmp	r0, #0
 801edd0:	d0d0      	beq.n	801ed74 <_scanf_chars+0x30>
 801edd2:	6823      	ldr	r3, [r4, #0]
 801edd4:	f013 0310 	ands.w	r3, r3, #16
 801edd8:	d105      	bne.n	801ede6 <_scanf_chars+0xa2>
 801edda:	68e2      	ldr	r2, [r4, #12]
 801eddc:	3201      	adds	r2, #1
 801edde:	60e2      	str	r2, [r4, #12]
 801ede0:	69a2      	ldr	r2, [r4, #24]
 801ede2:	b102      	cbz	r2, 801ede6 <_scanf_chars+0xa2>
 801ede4:	7033      	strb	r3, [r6, #0]
 801ede6:	6923      	ldr	r3, [r4, #16]
 801ede8:	443b      	add	r3, r7
 801edea:	6123      	str	r3, [r4, #16]
 801edec:	2000      	movs	r0, #0
 801edee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801edf2:	bf00      	nop
 801edf4:	08020af9 	.word	0x08020af9

0801edf8 <_scanf_i>:
 801edf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edfc:	4698      	mov	r8, r3
 801edfe:	4b74      	ldr	r3, [pc, #464]	; (801efd0 <_scanf_i+0x1d8>)
 801ee00:	460c      	mov	r4, r1
 801ee02:	4682      	mov	sl, r0
 801ee04:	4616      	mov	r6, r2
 801ee06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ee0a:	b087      	sub	sp, #28
 801ee0c:	ab03      	add	r3, sp, #12
 801ee0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ee12:	4b70      	ldr	r3, [pc, #448]	; (801efd4 <_scanf_i+0x1dc>)
 801ee14:	69a1      	ldr	r1, [r4, #24]
 801ee16:	4a70      	ldr	r2, [pc, #448]	; (801efd8 <_scanf_i+0x1e0>)
 801ee18:	2903      	cmp	r1, #3
 801ee1a:	bf18      	it	ne
 801ee1c:	461a      	movne	r2, r3
 801ee1e:	68a3      	ldr	r3, [r4, #8]
 801ee20:	9201      	str	r2, [sp, #4]
 801ee22:	1e5a      	subs	r2, r3, #1
 801ee24:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801ee28:	bf88      	it	hi
 801ee2a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801ee2e:	4627      	mov	r7, r4
 801ee30:	bf82      	ittt	hi
 801ee32:	eb03 0905 	addhi.w	r9, r3, r5
 801ee36:	f240 135d 	movwhi	r3, #349	; 0x15d
 801ee3a:	60a3      	strhi	r3, [r4, #8]
 801ee3c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801ee40:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801ee44:	bf98      	it	ls
 801ee46:	f04f 0900 	movls.w	r9, #0
 801ee4a:	6023      	str	r3, [r4, #0]
 801ee4c:	463d      	mov	r5, r7
 801ee4e:	f04f 0b00 	mov.w	fp, #0
 801ee52:	6831      	ldr	r1, [r6, #0]
 801ee54:	ab03      	add	r3, sp, #12
 801ee56:	7809      	ldrb	r1, [r1, #0]
 801ee58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801ee5c:	2202      	movs	r2, #2
 801ee5e:	f7e1 fa67 	bl	8000330 <memchr>
 801ee62:	b328      	cbz	r0, 801eeb0 <_scanf_i+0xb8>
 801ee64:	f1bb 0f01 	cmp.w	fp, #1
 801ee68:	d159      	bne.n	801ef1e <_scanf_i+0x126>
 801ee6a:	6862      	ldr	r2, [r4, #4]
 801ee6c:	b92a      	cbnz	r2, 801ee7a <_scanf_i+0x82>
 801ee6e:	6822      	ldr	r2, [r4, #0]
 801ee70:	2308      	movs	r3, #8
 801ee72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ee76:	6063      	str	r3, [r4, #4]
 801ee78:	6022      	str	r2, [r4, #0]
 801ee7a:	6822      	ldr	r2, [r4, #0]
 801ee7c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801ee80:	6022      	str	r2, [r4, #0]
 801ee82:	68a2      	ldr	r2, [r4, #8]
 801ee84:	1e51      	subs	r1, r2, #1
 801ee86:	60a1      	str	r1, [r4, #8]
 801ee88:	b192      	cbz	r2, 801eeb0 <_scanf_i+0xb8>
 801ee8a:	6832      	ldr	r2, [r6, #0]
 801ee8c:	1c51      	adds	r1, r2, #1
 801ee8e:	6031      	str	r1, [r6, #0]
 801ee90:	7812      	ldrb	r2, [r2, #0]
 801ee92:	f805 2b01 	strb.w	r2, [r5], #1
 801ee96:	6872      	ldr	r2, [r6, #4]
 801ee98:	3a01      	subs	r2, #1
 801ee9a:	2a00      	cmp	r2, #0
 801ee9c:	6072      	str	r2, [r6, #4]
 801ee9e:	dc07      	bgt.n	801eeb0 <_scanf_i+0xb8>
 801eea0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801eea4:	4631      	mov	r1, r6
 801eea6:	4650      	mov	r0, sl
 801eea8:	4790      	blx	r2
 801eeaa:	2800      	cmp	r0, #0
 801eeac:	f040 8085 	bne.w	801efba <_scanf_i+0x1c2>
 801eeb0:	f10b 0b01 	add.w	fp, fp, #1
 801eeb4:	f1bb 0f03 	cmp.w	fp, #3
 801eeb8:	d1cb      	bne.n	801ee52 <_scanf_i+0x5a>
 801eeba:	6863      	ldr	r3, [r4, #4]
 801eebc:	b90b      	cbnz	r3, 801eec2 <_scanf_i+0xca>
 801eebe:	230a      	movs	r3, #10
 801eec0:	6063      	str	r3, [r4, #4]
 801eec2:	6863      	ldr	r3, [r4, #4]
 801eec4:	4945      	ldr	r1, [pc, #276]	; (801efdc <_scanf_i+0x1e4>)
 801eec6:	6960      	ldr	r0, [r4, #20]
 801eec8:	1ac9      	subs	r1, r1, r3
 801eeca:	f000 f937 	bl	801f13c <__sccl>
 801eece:	f04f 0b00 	mov.w	fp, #0
 801eed2:	68a3      	ldr	r3, [r4, #8]
 801eed4:	6822      	ldr	r2, [r4, #0]
 801eed6:	2b00      	cmp	r3, #0
 801eed8:	d03d      	beq.n	801ef56 <_scanf_i+0x15e>
 801eeda:	6831      	ldr	r1, [r6, #0]
 801eedc:	6960      	ldr	r0, [r4, #20]
 801eede:	f891 c000 	ldrb.w	ip, [r1]
 801eee2:	f810 000c 	ldrb.w	r0, [r0, ip]
 801eee6:	2800      	cmp	r0, #0
 801eee8:	d035      	beq.n	801ef56 <_scanf_i+0x15e>
 801eeea:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801eeee:	d124      	bne.n	801ef3a <_scanf_i+0x142>
 801eef0:	0510      	lsls	r0, r2, #20
 801eef2:	d522      	bpl.n	801ef3a <_scanf_i+0x142>
 801eef4:	f10b 0b01 	add.w	fp, fp, #1
 801eef8:	f1b9 0f00 	cmp.w	r9, #0
 801eefc:	d003      	beq.n	801ef06 <_scanf_i+0x10e>
 801eefe:	3301      	adds	r3, #1
 801ef00:	f109 39ff 	add.w	r9, r9, #4294967295
 801ef04:	60a3      	str	r3, [r4, #8]
 801ef06:	6873      	ldr	r3, [r6, #4]
 801ef08:	3b01      	subs	r3, #1
 801ef0a:	2b00      	cmp	r3, #0
 801ef0c:	6073      	str	r3, [r6, #4]
 801ef0e:	dd1b      	ble.n	801ef48 <_scanf_i+0x150>
 801ef10:	6833      	ldr	r3, [r6, #0]
 801ef12:	3301      	adds	r3, #1
 801ef14:	6033      	str	r3, [r6, #0]
 801ef16:	68a3      	ldr	r3, [r4, #8]
 801ef18:	3b01      	subs	r3, #1
 801ef1a:	60a3      	str	r3, [r4, #8]
 801ef1c:	e7d9      	b.n	801eed2 <_scanf_i+0xda>
 801ef1e:	f1bb 0f02 	cmp.w	fp, #2
 801ef22:	d1ae      	bne.n	801ee82 <_scanf_i+0x8a>
 801ef24:	6822      	ldr	r2, [r4, #0]
 801ef26:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801ef2a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801ef2e:	d1bf      	bne.n	801eeb0 <_scanf_i+0xb8>
 801ef30:	2310      	movs	r3, #16
 801ef32:	6063      	str	r3, [r4, #4]
 801ef34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ef38:	e7a2      	b.n	801ee80 <_scanf_i+0x88>
 801ef3a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801ef3e:	6022      	str	r2, [r4, #0]
 801ef40:	780b      	ldrb	r3, [r1, #0]
 801ef42:	f805 3b01 	strb.w	r3, [r5], #1
 801ef46:	e7de      	b.n	801ef06 <_scanf_i+0x10e>
 801ef48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ef4c:	4631      	mov	r1, r6
 801ef4e:	4650      	mov	r0, sl
 801ef50:	4798      	blx	r3
 801ef52:	2800      	cmp	r0, #0
 801ef54:	d0df      	beq.n	801ef16 <_scanf_i+0x11e>
 801ef56:	6823      	ldr	r3, [r4, #0]
 801ef58:	05d9      	lsls	r1, r3, #23
 801ef5a:	d50d      	bpl.n	801ef78 <_scanf_i+0x180>
 801ef5c:	42bd      	cmp	r5, r7
 801ef5e:	d909      	bls.n	801ef74 <_scanf_i+0x17c>
 801ef60:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801ef64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ef68:	4632      	mov	r2, r6
 801ef6a:	4650      	mov	r0, sl
 801ef6c:	4798      	blx	r3
 801ef6e:	f105 39ff 	add.w	r9, r5, #4294967295
 801ef72:	464d      	mov	r5, r9
 801ef74:	42bd      	cmp	r5, r7
 801ef76:	d028      	beq.n	801efca <_scanf_i+0x1d2>
 801ef78:	6822      	ldr	r2, [r4, #0]
 801ef7a:	f012 0210 	ands.w	r2, r2, #16
 801ef7e:	d113      	bne.n	801efa8 <_scanf_i+0x1b0>
 801ef80:	702a      	strb	r2, [r5, #0]
 801ef82:	6863      	ldr	r3, [r4, #4]
 801ef84:	9e01      	ldr	r6, [sp, #4]
 801ef86:	4639      	mov	r1, r7
 801ef88:	4650      	mov	r0, sl
 801ef8a:	47b0      	blx	r6
 801ef8c:	f8d8 3000 	ldr.w	r3, [r8]
 801ef90:	6821      	ldr	r1, [r4, #0]
 801ef92:	1d1a      	adds	r2, r3, #4
 801ef94:	f8c8 2000 	str.w	r2, [r8]
 801ef98:	f011 0f20 	tst.w	r1, #32
 801ef9c:	681b      	ldr	r3, [r3, #0]
 801ef9e:	d00f      	beq.n	801efc0 <_scanf_i+0x1c8>
 801efa0:	6018      	str	r0, [r3, #0]
 801efa2:	68e3      	ldr	r3, [r4, #12]
 801efa4:	3301      	adds	r3, #1
 801efa6:	60e3      	str	r3, [r4, #12]
 801efa8:	6923      	ldr	r3, [r4, #16]
 801efaa:	1bed      	subs	r5, r5, r7
 801efac:	445d      	add	r5, fp
 801efae:	442b      	add	r3, r5
 801efb0:	6123      	str	r3, [r4, #16]
 801efb2:	2000      	movs	r0, #0
 801efb4:	b007      	add	sp, #28
 801efb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efba:	f04f 0b00 	mov.w	fp, #0
 801efbe:	e7ca      	b.n	801ef56 <_scanf_i+0x15e>
 801efc0:	07ca      	lsls	r2, r1, #31
 801efc2:	bf4c      	ite	mi
 801efc4:	8018      	strhmi	r0, [r3, #0]
 801efc6:	6018      	strpl	r0, [r3, #0]
 801efc8:	e7eb      	b.n	801efa2 <_scanf_i+0x1aa>
 801efca:	2001      	movs	r0, #1
 801efcc:	e7f2      	b.n	801efb4 <_scanf_i+0x1bc>
 801efce:	bf00      	nop
 801efd0:	08020374 	.word	0x08020374
 801efd4:	0801fb2d 	.word	0x0801fb2d
 801efd8:	0801e6ed 	.word	0x0801e6ed
 801efdc:	08020c1a 	.word	0x08020c1a

0801efe0 <__sflush_r>:
 801efe0:	898a      	ldrh	r2, [r1, #12]
 801efe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801efe6:	4605      	mov	r5, r0
 801efe8:	0710      	lsls	r0, r2, #28
 801efea:	460c      	mov	r4, r1
 801efec:	d458      	bmi.n	801f0a0 <__sflush_r+0xc0>
 801efee:	684b      	ldr	r3, [r1, #4]
 801eff0:	2b00      	cmp	r3, #0
 801eff2:	dc05      	bgt.n	801f000 <__sflush_r+0x20>
 801eff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801eff6:	2b00      	cmp	r3, #0
 801eff8:	dc02      	bgt.n	801f000 <__sflush_r+0x20>
 801effa:	2000      	movs	r0, #0
 801effc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f002:	2e00      	cmp	r6, #0
 801f004:	d0f9      	beq.n	801effa <__sflush_r+0x1a>
 801f006:	2300      	movs	r3, #0
 801f008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f00c:	682f      	ldr	r7, [r5, #0]
 801f00e:	6a21      	ldr	r1, [r4, #32]
 801f010:	602b      	str	r3, [r5, #0]
 801f012:	d032      	beq.n	801f07a <__sflush_r+0x9a>
 801f014:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f016:	89a3      	ldrh	r3, [r4, #12]
 801f018:	075a      	lsls	r2, r3, #29
 801f01a:	d505      	bpl.n	801f028 <__sflush_r+0x48>
 801f01c:	6863      	ldr	r3, [r4, #4]
 801f01e:	1ac0      	subs	r0, r0, r3
 801f020:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f022:	b10b      	cbz	r3, 801f028 <__sflush_r+0x48>
 801f024:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f026:	1ac0      	subs	r0, r0, r3
 801f028:	2300      	movs	r3, #0
 801f02a:	4602      	mov	r2, r0
 801f02c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f02e:	6a21      	ldr	r1, [r4, #32]
 801f030:	4628      	mov	r0, r5
 801f032:	47b0      	blx	r6
 801f034:	1c43      	adds	r3, r0, #1
 801f036:	89a3      	ldrh	r3, [r4, #12]
 801f038:	d106      	bne.n	801f048 <__sflush_r+0x68>
 801f03a:	6829      	ldr	r1, [r5, #0]
 801f03c:	291d      	cmp	r1, #29
 801f03e:	d82b      	bhi.n	801f098 <__sflush_r+0xb8>
 801f040:	4a29      	ldr	r2, [pc, #164]	; (801f0e8 <__sflush_r+0x108>)
 801f042:	410a      	asrs	r2, r1
 801f044:	07d6      	lsls	r6, r2, #31
 801f046:	d427      	bmi.n	801f098 <__sflush_r+0xb8>
 801f048:	2200      	movs	r2, #0
 801f04a:	6062      	str	r2, [r4, #4]
 801f04c:	04d9      	lsls	r1, r3, #19
 801f04e:	6922      	ldr	r2, [r4, #16]
 801f050:	6022      	str	r2, [r4, #0]
 801f052:	d504      	bpl.n	801f05e <__sflush_r+0x7e>
 801f054:	1c42      	adds	r2, r0, #1
 801f056:	d101      	bne.n	801f05c <__sflush_r+0x7c>
 801f058:	682b      	ldr	r3, [r5, #0]
 801f05a:	b903      	cbnz	r3, 801f05e <__sflush_r+0x7e>
 801f05c:	6560      	str	r0, [r4, #84]	; 0x54
 801f05e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f060:	602f      	str	r7, [r5, #0]
 801f062:	2900      	cmp	r1, #0
 801f064:	d0c9      	beq.n	801effa <__sflush_r+0x1a>
 801f066:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f06a:	4299      	cmp	r1, r3
 801f06c:	d002      	beq.n	801f074 <__sflush_r+0x94>
 801f06e:	4628      	mov	r0, r5
 801f070:	f7fd ff3e 	bl	801cef0 <_free_r>
 801f074:	2000      	movs	r0, #0
 801f076:	6360      	str	r0, [r4, #52]	; 0x34
 801f078:	e7c0      	b.n	801effc <__sflush_r+0x1c>
 801f07a:	2301      	movs	r3, #1
 801f07c:	4628      	mov	r0, r5
 801f07e:	47b0      	blx	r6
 801f080:	1c41      	adds	r1, r0, #1
 801f082:	d1c8      	bne.n	801f016 <__sflush_r+0x36>
 801f084:	682b      	ldr	r3, [r5, #0]
 801f086:	2b00      	cmp	r3, #0
 801f088:	d0c5      	beq.n	801f016 <__sflush_r+0x36>
 801f08a:	2b1d      	cmp	r3, #29
 801f08c:	d001      	beq.n	801f092 <__sflush_r+0xb2>
 801f08e:	2b16      	cmp	r3, #22
 801f090:	d101      	bne.n	801f096 <__sflush_r+0xb6>
 801f092:	602f      	str	r7, [r5, #0]
 801f094:	e7b1      	b.n	801effa <__sflush_r+0x1a>
 801f096:	89a3      	ldrh	r3, [r4, #12]
 801f098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f09c:	81a3      	strh	r3, [r4, #12]
 801f09e:	e7ad      	b.n	801effc <__sflush_r+0x1c>
 801f0a0:	690f      	ldr	r7, [r1, #16]
 801f0a2:	2f00      	cmp	r7, #0
 801f0a4:	d0a9      	beq.n	801effa <__sflush_r+0x1a>
 801f0a6:	0793      	lsls	r3, r2, #30
 801f0a8:	680e      	ldr	r6, [r1, #0]
 801f0aa:	bf08      	it	eq
 801f0ac:	694b      	ldreq	r3, [r1, #20]
 801f0ae:	600f      	str	r7, [r1, #0]
 801f0b0:	bf18      	it	ne
 801f0b2:	2300      	movne	r3, #0
 801f0b4:	eba6 0807 	sub.w	r8, r6, r7
 801f0b8:	608b      	str	r3, [r1, #8]
 801f0ba:	f1b8 0f00 	cmp.w	r8, #0
 801f0be:	dd9c      	ble.n	801effa <__sflush_r+0x1a>
 801f0c0:	6a21      	ldr	r1, [r4, #32]
 801f0c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f0c4:	4643      	mov	r3, r8
 801f0c6:	463a      	mov	r2, r7
 801f0c8:	4628      	mov	r0, r5
 801f0ca:	47b0      	blx	r6
 801f0cc:	2800      	cmp	r0, #0
 801f0ce:	dc06      	bgt.n	801f0de <__sflush_r+0xfe>
 801f0d0:	89a3      	ldrh	r3, [r4, #12]
 801f0d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f0d6:	81a3      	strh	r3, [r4, #12]
 801f0d8:	f04f 30ff 	mov.w	r0, #4294967295
 801f0dc:	e78e      	b.n	801effc <__sflush_r+0x1c>
 801f0de:	4407      	add	r7, r0
 801f0e0:	eba8 0800 	sub.w	r8, r8, r0
 801f0e4:	e7e9      	b.n	801f0ba <__sflush_r+0xda>
 801f0e6:	bf00      	nop
 801f0e8:	dfbffffe 	.word	0xdfbffffe

0801f0ec <_fflush_r>:
 801f0ec:	b538      	push	{r3, r4, r5, lr}
 801f0ee:	690b      	ldr	r3, [r1, #16]
 801f0f0:	4605      	mov	r5, r0
 801f0f2:	460c      	mov	r4, r1
 801f0f4:	b913      	cbnz	r3, 801f0fc <_fflush_r+0x10>
 801f0f6:	2500      	movs	r5, #0
 801f0f8:	4628      	mov	r0, r5
 801f0fa:	bd38      	pop	{r3, r4, r5, pc}
 801f0fc:	b118      	cbz	r0, 801f106 <_fflush_r+0x1a>
 801f0fe:	6a03      	ldr	r3, [r0, #32]
 801f100:	b90b      	cbnz	r3, 801f106 <_fflush_r+0x1a>
 801f102:	f7fc ff9b 	bl	801c03c <__sinit>
 801f106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	d0f3      	beq.n	801f0f6 <_fflush_r+0xa>
 801f10e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f110:	07d0      	lsls	r0, r2, #31
 801f112:	d404      	bmi.n	801f11e <_fflush_r+0x32>
 801f114:	0599      	lsls	r1, r3, #22
 801f116:	d402      	bmi.n	801f11e <_fflush_r+0x32>
 801f118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f11a:	f7fd f8d4 	bl	801c2c6 <__retarget_lock_acquire_recursive>
 801f11e:	4628      	mov	r0, r5
 801f120:	4621      	mov	r1, r4
 801f122:	f7ff ff5d 	bl	801efe0 <__sflush_r>
 801f126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f128:	07da      	lsls	r2, r3, #31
 801f12a:	4605      	mov	r5, r0
 801f12c:	d4e4      	bmi.n	801f0f8 <_fflush_r+0xc>
 801f12e:	89a3      	ldrh	r3, [r4, #12]
 801f130:	059b      	lsls	r3, r3, #22
 801f132:	d4e1      	bmi.n	801f0f8 <_fflush_r+0xc>
 801f134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f136:	f7fd f8c7 	bl	801c2c8 <__retarget_lock_release_recursive>
 801f13a:	e7dd      	b.n	801f0f8 <_fflush_r+0xc>

0801f13c <__sccl>:
 801f13c:	b570      	push	{r4, r5, r6, lr}
 801f13e:	780b      	ldrb	r3, [r1, #0]
 801f140:	4604      	mov	r4, r0
 801f142:	2b5e      	cmp	r3, #94	; 0x5e
 801f144:	bf0b      	itete	eq
 801f146:	784b      	ldrbeq	r3, [r1, #1]
 801f148:	1c4a      	addne	r2, r1, #1
 801f14a:	1c8a      	addeq	r2, r1, #2
 801f14c:	2100      	movne	r1, #0
 801f14e:	bf08      	it	eq
 801f150:	2101      	moveq	r1, #1
 801f152:	3801      	subs	r0, #1
 801f154:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801f158:	f800 1f01 	strb.w	r1, [r0, #1]!
 801f15c:	42a8      	cmp	r0, r5
 801f15e:	d1fb      	bne.n	801f158 <__sccl+0x1c>
 801f160:	b90b      	cbnz	r3, 801f166 <__sccl+0x2a>
 801f162:	1e50      	subs	r0, r2, #1
 801f164:	bd70      	pop	{r4, r5, r6, pc}
 801f166:	f081 0101 	eor.w	r1, r1, #1
 801f16a:	54e1      	strb	r1, [r4, r3]
 801f16c:	4610      	mov	r0, r2
 801f16e:	4602      	mov	r2, r0
 801f170:	f812 5b01 	ldrb.w	r5, [r2], #1
 801f174:	2d2d      	cmp	r5, #45	; 0x2d
 801f176:	d005      	beq.n	801f184 <__sccl+0x48>
 801f178:	2d5d      	cmp	r5, #93	; 0x5d
 801f17a:	d016      	beq.n	801f1aa <__sccl+0x6e>
 801f17c:	2d00      	cmp	r5, #0
 801f17e:	d0f1      	beq.n	801f164 <__sccl+0x28>
 801f180:	462b      	mov	r3, r5
 801f182:	e7f2      	b.n	801f16a <__sccl+0x2e>
 801f184:	7846      	ldrb	r6, [r0, #1]
 801f186:	2e5d      	cmp	r6, #93	; 0x5d
 801f188:	d0fa      	beq.n	801f180 <__sccl+0x44>
 801f18a:	42b3      	cmp	r3, r6
 801f18c:	dcf8      	bgt.n	801f180 <__sccl+0x44>
 801f18e:	3002      	adds	r0, #2
 801f190:	461a      	mov	r2, r3
 801f192:	3201      	adds	r2, #1
 801f194:	4296      	cmp	r6, r2
 801f196:	54a1      	strb	r1, [r4, r2]
 801f198:	dcfb      	bgt.n	801f192 <__sccl+0x56>
 801f19a:	1af2      	subs	r2, r6, r3
 801f19c:	3a01      	subs	r2, #1
 801f19e:	1c5d      	adds	r5, r3, #1
 801f1a0:	42b3      	cmp	r3, r6
 801f1a2:	bfa8      	it	ge
 801f1a4:	2200      	movge	r2, #0
 801f1a6:	18ab      	adds	r3, r5, r2
 801f1a8:	e7e1      	b.n	801f16e <__sccl+0x32>
 801f1aa:	4610      	mov	r0, r2
 801f1ac:	e7da      	b.n	801f164 <__sccl+0x28>

0801f1ae <__submore>:
 801f1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1b2:	460c      	mov	r4, r1
 801f1b4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801f1b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f1ba:	4299      	cmp	r1, r3
 801f1bc:	d11d      	bne.n	801f1fa <__submore+0x4c>
 801f1be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801f1c2:	f7fd ff09 	bl	801cfd8 <_malloc_r>
 801f1c6:	b918      	cbnz	r0, 801f1d0 <__submore+0x22>
 801f1c8:	f04f 30ff 	mov.w	r0, #4294967295
 801f1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f1d4:	63a3      	str	r3, [r4, #56]	; 0x38
 801f1d6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801f1da:	6360      	str	r0, [r4, #52]	; 0x34
 801f1dc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801f1e0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801f1e4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801f1e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801f1ec:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801f1f0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801f1f4:	6020      	str	r0, [r4, #0]
 801f1f6:	2000      	movs	r0, #0
 801f1f8:	e7e8      	b.n	801f1cc <__submore+0x1e>
 801f1fa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801f1fc:	0077      	lsls	r7, r6, #1
 801f1fe:	463a      	mov	r2, r7
 801f200:	f000 fbf3 	bl	801f9ea <_realloc_r>
 801f204:	4605      	mov	r5, r0
 801f206:	2800      	cmp	r0, #0
 801f208:	d0de      	beq.n	801f1c8 <__submore+0x1a>
 801f20a:	eb00 0806 	add.w	r8, r0, r6
 801f20e:	4601      	mov	r1, r0
 801f210:	4632      	mov	r2, r6
 801f212:	4640      	mov	r0, r8
 801f214:	f7fd f861 	bl	801c2da <memcpy>
 801f218:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801f21c:	f8c4 8000 	str.w	r8, [r4]
 801f220:	e7e9      	b.n	801f1f6 <__submore+0x48>

0801f222 <memmove>:
 801f222:	4288      	cmp	r0, r1
 801f224:	b510      	push	{r4, lr}
 801f226:	eb01 0402 	add.w	r4, r1, r2
 801f22a:	d902      	bls.n	801f232 <memmove+0x10>
 801f22c:	4284      	cmp	r4, r0
 801f22e:	4623      	mov	r3, r4
 801f230:	d807      	bhi.n	801f242 <memmove+0x20>
 801f232:	1e43      	subs	r3, r0, #1
 801f234:	42a1      	cmp	r1, r4
 801f236:	d008      	beq.n	801f24a <memmove+0x28>
 801f238:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f23c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f240:	e7f8      	b.n	801f234 <memmove+0x12>
 801f242:	4402      	add	r2, r0
 801f244:	4601      	mov	r1, r0
 801f246:	428a      	cmp	r2, r1
 801f248:	d100      	bne.n	801f24c <memmove+0x2a>
 801f24a:	bd10      	pop	{r4, pc}
 801f24c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f250:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f254:	e7f7      	b.n	801f246 <memmove+0x24>

0801f256 <strncmp>:
 801f256:	b510      	push	{r4, lr}
 801f258:	b16a      	cbz	r2, 801f276 <strncmp+0x20>
 801f25a:	3901      	subs	r1, #1
 801f25c:	1884      	adds	r4, r0, r2
 801f25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f262:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801f266:	429a      	cmp	r2, r3
 801f268:	d103      	bne.n	801f272 <strncmp+0x1c>
 801f26a:	42a0      	cmp	r0, r4
 801f26c:	d001      	beq.n	801f272 <strncmp+0x1c>
 801f26e:	2a00      	cmp	r2, #0
 801f270:	d1f5      	bne.n	801f25e <strncmp+0x8>
 801f272:	1ad0      	subs	r0, r2, r3
 801f274:	bd10      	pop	{r4, pc}
 801f276:	4610      	mov	r0, r2
 801f278:	e7fc      	b.n	801f274 <strncmp+0x1e>
	...

0801f27c <_sbrk_r>:
 801f27c:	b538      	push	{r3, r4, r5, lr}
 801f27e:	4d06      	ldr	r5, [pc, #24]	; (801f298 <_sbrk_r+0x1c>)
 801f280:	2300      	movs	r3, #0
 801f282:	4604      	mov	r4, r0
 801f284:	4608      	mov	r0, r1
 801f286:	602b      	str	r3, [r5, #0]
 801f288:	f7e4 fe52 	bl	8003f30 <_sbrk>
 801f28c:	1c43      	adds	r3, r0, #1
 801f28e:	d102      	bne.n	801f296 <_sbrk_r+0x1a>
 801f290:	682b      	ldr	r3, [r5, #0]
 801f292:	b103      	cbz	r3, 801f296 <_sbrk_r+0x1a>
 801f294:	6023      	str	r3, [r4, #0]
 801f296:	bd38      	pop	{r3, r4, r5, pc}
 801f298:	24005dec 	.word	0x24005dec
 801f29c:	00000000 	.word	0x00000000

0801f2a0 <nan>:
 801f2a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801f2a8 <nan+0x8>
 801f2a4:	4770      	bx	lr
 801f2a6:	bf00      	nop
 801f2a8:	00000000 	.word	0x00000000
 801f2ac:	7ff80000 	.word	0x7ff80000

0801f2b0 <__assert_func>:
 801f2b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f2b2:	4614      	mov	r4, r2
 801f2b4:	461a      	mov	r2, r3
 801f2b6:	4b09      	ldr	r3, [pc, #36]	; (801f2dc <__assert_func+0x2c>)
 801f2b8:	681b      	ldr	r3, [r3, #0]
 801f2ba:	4605      	mov	r5, r0
 801f2bc:	68d8      	ldr	r0, [r3, #12]
 801f2be:	b14c      	cbz	r4, 801f2d4 <__assert_func+0x24>
 801f2c0:	4b07      	ldr	r3, [pc, #28]	; (801f2e0 <__assert_func+0x30>)
 801f2c2:	9100      	str	r1, [sp, #0]
 801f2c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f2c8:	4906      	ldr	r1, [pc, #24]	; (801f2e4 <__assert_func+0x34>)
 801f2ca:	462b      	mov	r3, r5
 801f2cc:	f000 fc3e 	bl	801fb4c <fiprintf>
 801f2d0:	f000 fc4e 	bl	801fb70 <abort>
 801f2d4:	4b04      	ldr	r3, [pc, #16]	; (801f2e8 <__assert_func+0x38>)
 801f2d6:	461c      	mov	r4, r3
 801f2d8:	e7f3      	b.n	801f2c2 <__assert_func+0x12>
 801f2da:	bf00      	nop
 801f2dc:	24000258 	.word	0x24000258
 801f2e0:	08020c2d 	.word	0x08020c2d
 801f2e4:	08020c3a 	.word	0x08020c3a
 801f2e8:	08020c68 	.word	0x08020c68

0801f2ec <_calloc_r>:
 801f2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f2ee:	fba1 2402 	umull	r2, r4, r1, r2
 801f2f2:	b94c      	cbnz	r4, 801f308 <_calloc_r+0x1c>
 801f2f4:	4611      	mov	r1, r2
 801f2f6:	9201      	str	r2, [sp, #4]
 801f2f8:	f7fd fe6e 	bl	801cfd8 <_malloc_r>
 801f2fc:	9a01      	ldr	r2, [sp, #4]
 801f2fe:	4605      	mov	r5, r0
 801f300:	b930      	cbnz	r0, 801f310 <_calloc_r+0x24>
 801f302:	4628      	mov	r0, r5
 801f304:	b003      	add	sp, #12
 801f306:	bd30      	pop	{r4, r5, pc}
 801f308:	220c      	movs	r2, #12
 801f30a:	6002      	str	r2, [r0, #0]
 801f30c:	2500      	movs	r5, #0
 801f30e:	e7f8      	b.n	801f302 <_calloc_r+0x16>
 801f310:	4621      	mov	r1, r4
 801f312:	f7fc ff5a 	bl	801c1ca <memset>
 801f316:	e7f4      	b.n	801f302 <_calloc_r+0x16>

0801f318 <rshift>:
 801f318:	6903      	ldr	r3, [r0, #16]
 801f31a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f31e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f322:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f326:	f100 0414 	add.w	r4, r0, #20
 801f32a:	dd45      	ble.n	801f3b8 <rshift+0xa0>
 801f32c:	f011 011f 	ands.w	r1, r1, #31
 801f330:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f334:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f338:	d10c      	bne.n	801f354 <rshift+0x3c>
 801f33a:	f100 0710 	add.w	r7, r0, #16
 801f33e:	4629      	mov	r1, r5
 801f340:	42b1      	cmp	r1, r6
 801f342:	d334      	bcc.n	801f3ae <rshift+0x96>
 801f344:	1a9b      	subs	r3, r3, r2
 801f346:	009b      	lsls	r3, r3, #2
 801f348:	1eea      	subs	r2, r5, #3
 801f34a:	4296      	cmp	r6, r2
 801f34c:	bf38      	it	cc
 801f34e:	2300      	movcc	r3, #0
 801f350:	4423      	add	r3, r4
 801f352:	e015      	b.n	801f380 <rshift+0x68>
 801f354:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f358:	f1c1 0820 	rsb	r8, r1, #32
 801f35c:	40cf      	lsrs	r7, r1
 801f35e:	f105 0e04 	add.w	lr, r5, #4
 801f362:	46a1      	mov	r9, r4
 801f364:	4576      	cmp	r6, lr
 801f366:	46f4      	mov	ip, lr
 801f368:	d815      	bhi.n	801f396 <rshift+0x7e>
 801f36a:	1a9a      	subs	r2, r3, r2
 801f36c:	0092      	lsls	r2, r2, #2
 801f36e:	3a04      	subs	r2, #4
 801f370:	3501      	adds	r5, #1
 801f372:	42ae      	cmp	r6, r5
 801f374:	bf38      	it	cc
 801f376:	2200      	movcc	r2, #0
 801f378:	18a3      	adds	r3, r4, r2
 801f37a:	50a7      	str	r7, [r4, r2]
 801f37c:	b107      	cbz	r7, 801f380 <rshift+0x68>
 801f37e:	3304      	adds	r3, #4
 801f380:	1b1a      	subs	r2, r3, r4
 801f382:	42a3      	cmp	r3, r4
 801f384:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f388:	bf08      	it	eq
 801f38a:	2300      	moveq	r3, #0
 801f38c:	6102      	str	r2, [r0, #16]
 801f38e:	bf08      	it	eq
 801f390:	6143      	streq	r3, [r0, #20]
 801f392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f396:	f8dc c000 	ldr.w	ip, [ip]
 801f39a:	fa0c fc08 	lsl.w	ip, ip, r8
 801f39e:	ea4c 0707 	orr.w	r7, ip, r7
 801f3a2:	f849 7b04 	str.w	r7, [r9], #4
 801f3a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f3aa:	40cf      	lsrs	r7, r1
 801f3ac:	e7da      	b.n	801f364 <rshift+0x4c>
 801f3ae:	f851 cb04 	ldr.w	ip, [r1], #4
 801f3b2:	f847 cf04 	str.w	ip, [r7, #4]!
 801f3b6:	e7c3      	b.n	801f340 <rshift+0x28>
 801f3b8:	4623      	mov	r3, r4
 801f3ba:	e7e1      	b.n	801f380 <rshift+0x68>

0801f3bc <__hexdig_fun>:
 801f3bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801f3c0:	2b09      	cmp	r3, #9
 801f3c2:	d802      	bhi.n	801f3ca <__hexdig_fun+0xe>
 801f3c4:	3820      	subs	r0, #32
 801f3c6:	b2c0      	uxtb	r0, r0
 801f3c8:	4770      	bx	lr
 801f3ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801f3ce:	2b05      	cmp	r3, #5
 801f3d0:	d801      	bhi.n	801f3d6 <__hexdig_fun+0x1a>
 801f3d2:	3847      	subs	r0, #71	; 0x47
 801f3d4:	e7f7      	b.n	801f3c6 <__hexdig_fun+0xa>
 801f3d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801f3da:	2b05      	cmp	r3, #5
 801f3dc:	d801      	bhi.n	801f3e2 <__hexdig_fun+0x26>
 801f3de:	3827      	subs	r0, #39	; 0x27
 801f3e0:	e7f1      	b.n	801f3c6 <__hexdig_fun+0xa>
 801f3e2:	2000      	movs	r0, #0
 801f3e4:	4770      	bx	lr
	...

0801f3e8 <__gethex>:
 801f3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3ec:	4617      	mov	r7, r2
 801f3ee:	680a      	ldr	r2, [r1, #0]
 801f3f0:	b085      	sub	sp, #20
 801f3f2:	f102 0b02 	add.w	fp, r2, #2
 801f3f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801f3fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f3fe:	4681      	mov	r9, r0
 801f400:	468a      	mov	sl, r1
 801f402:	9302      	str	r3, [sp, #8]
 801f404:	32fe      	adds	r2, #254	; 0xfe
 801f406:	eb02 030b 	add.w	r3, r2, fp
 801f40a:	46d8      	mov	r8, fp
 801f40c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801f410:	9301      	str	r3, [sp, #4]
 801f412:	2830      	cmp	r0, #48	; 0x30
 801f414:	d0f7      	beq.n	801f406 <__gethex+0x1e>
 801f416:	f7ff ffd1 	bl	801f3bc <__hexdig_fun>
 801f41a:	4604      	mov	r4, r0
 801f41c:	2800      	cmp	r0, #0
 801f41e:	d138      	bne.n	801f492 <__gethex+0xaa>
 801f420:	49a7      	ldr	r1, [pc, #668]	; (801f6c0 <__gethex+0x2d8>)
 801f422:	2201      	movs	r2, #1
 801f424:	4640      	mov	r0, r8
 801f426:	f7ff ff16 	bl	801f256 <strncmp>
 801f42a:	4606      	mov	r6, r0
 801f42c:	2800      	cmp	r0, #0
 801f42e:	d169      	bne.n	801f504 <__gethex+0x11c>
 801f430:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f434:	465d      	mov	r5, fp
 801f436:	f7ff ffc1 	bl	801f3bc <__hexdig_fun>
 801f43a:	2800      	cmp	r0, #0
 801f43c:	d064      	beq.n	801f508 <__gethex+0x120>
 801f43e:	465a      	mov	r2, fp
 801f440:	7810      	ldrb	r0, [r2, #0]
 801f442:	2830      	cmp	r0, #48	; 0x30
 801f444:	4690      	mov	r8, r2
 801f446:	f102 0201 	add.w	r2, r2, #1
 801f44a:	d0f9      	beq.n	801f440 <__gethex+0x58>
 801f44c:	f7ff ffb6 	bl	801f3bc <__hexdig_fun>
 801f450:	2301      	movs	r3, #1
 801f452:	fab0 f480 	clz	r4, r0
 801f456:	0964      	lsrs	r4, r4, #5
 801f458:	465e      	mov	r6, fp
 801f45a:	9301      	str	r3, [sp, #4]
 801f45c:	4642      	mov	r2, r8
 801f45e:	4615      	mov	r5, r2
 801f460:	3201      	adds	r2, #1
 801f462:	7828      	ldrb	r0, [r5, #0]
 801f464:	f7ff ffaa 	bl	801f3bc <__hexdig_fun>
 801f468:	2800      	cmp	r0, #0
 801f46a:	d1f8      	bne.n	801f45e <__gethex+0x76>
 801f46c:	4994      	ldr	r1, [pc, #592]	; (801f6c0 <__gethex+0x2d8>)
 801f46e:	2201      	movs	r2, #1
 801f470:	4628      	mov	r0, r5
 801f472:	f7ff fef0 	bl	801f256 <strncmp>
 801f476:	b978      	cbnz	r0, 801f498 <__gethex+0xb0>
 801f478:	b946      	cbnz	r6, 801f48c <__gethex+0xa4>
 801f47a:	1c6e      	adds	r6, r5, #1
 801f47c:	4632      	mov	r2, r6
 801f47e:	4615      	mov	r5, r2
 801f480:	3201      	adds	r2, #1
 801f482:	7828      	ldrb	r0, [r5, #0]
 801f484:	f7ff ff9a 	bl	801f3bc <__hexdig_fun>
 801f488:	2800      	cmp	r0, #0
 801f48a:	d1f8      	bne.n	801f47e <__gethex+0x96>
 801f48c:	1b73      	subs	r3, r6, r5
 801f48e:	009e      	lsls	r6, r3, #2
 801f490:	e004      	b.n	801f49c <__gethex+0xb4>
 801f492:	2400      	movs	r4, #0
 801f494:	4626      	mov	r6, r4
 801f496:	e7e1      	b.n	801f45c <__gethex+0x74>
 801f498:	2e00      	cmp	r6, #0
 801f49a:	d1f7      	bne.n	801f48c <__gethex+0xa4>
 801f49c:	782b      	ldrb	r3, [r5, #0]
 801f49e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f4a2:	2b50      	cmp	r3, #80	; 0x50
 801f4a4:	d13d      	bne.n	801f522 <__gethex+0x13a>
 801f4a6:	786b      	ldrb	r3, [r5, #1]
 801f4a8:	2b2b      	cmp	r3, #43	; 0x2b
 801f4aa:	d02f      	beq.n	801f50c <__gethex+0x124>
 801f4ac:	2b2d      	cmp	r3, #45	; 0x2d
 801f4ae:	d031      	beq.n	801f514 <__gethex+0x12c>
 801f4b0:	1c69      	adds	r1, r5, #1
 801f4b2:	f04f 0b00 	mov.w	fp, #0
 801f4b6:	7808      	ldrb	r0, [r1, #0]
 801f4b8:	f7ff ff80 	bl	801f3bc <__hexdig_fun>
 801f4bc:	1e42      	subs	r2, r0, #1
 801f4be:	b2d2      	uxtb	r2, r2
 801f4c0:	2a18      	cmp	r2, #24
 801f4c2:	d82e      	bhi.n	801f522 <__gethex+0x13a>
 801f4c4:	f1a0 0210 	sub.w	r2, r0, #16
 801f4c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f4cc:	f7ff ff76 	bl	801f3bc <__hexdig_fun>
 801f4d0:	f100 3cff 	add.w	ip, r0, #4294967295
 801f4d4:	fa5f fc8c 	uxtb.w	ip, ip
 801f4d8:	f1bc 0f18 	cmp.w	ip, #24
 801f4dc:	d91d      	bls.n	801f51a <__gethex+0x132>
 801f4de:	f1bb 0f00 	cmp.w	fp, #0
 801f4e2:	d000      	beq.n	801f4e6 <__gethex+0xfe>
 801f4e4:	4252      	negs	r2, r2
 801f4e6:	4416      	add	r6, r2
 801f4e8:	f8ca 1000 	str.w	r1, [sl]
 801f4ec:	b1dc      	cbz	r4, 801f526 <__gethex+0x13e>
 801f4ee:	9b01      	ldr	r3, [sp, #4]
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	bf14      	ite	ne
 801f4f4:	f04f 0800 	movne.w	r8, #0
 801f4f8:	f04f 0806 	moveq.w	r8, #6
 801f4fc:	4640      	mov	r0, r8
 801f4fe:	b005      	add	sp, #20
 801f500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f504:	4645      	mov	r5, r8
 801f506:	4626      	mov	r6, r4
 801f508:	2401      	movs	r4, #1
 801f50a:	e7c7      	b.n	801f49c <__gethex+0xb4>
 801f50c:	f04f 0b00 	mov.w	fp, #0
 801f510:	1ca9      	adds	r1, r5, #2
 801f512:	e7d0      	b.n	801f4b6 <__gethex+0xce>
 801f514:	f04f 0b01 	mov.w	fp, #1
 801f518:	e7fa      	b.n	801f510 <__gethex+0x128>
 801f51a:	230a      	movs	r3, #10
 801f51c:	fb03 0002 	mla	r0, r3, r2, r0
 801f520:	e7d0      	b.n	801f4c4 <__gethex+0xdc>
 801f522:	4629      	mov	r1, r5
 801f524:	e7e0      	b.n	801f4e8 <__gethex+0x100>
 801f526:	eba5 0308 	sub.w	r3, r5, r8
 801f52a:	3b01      	subs	r3, #1
 801f52c:	4621      	mov	r1, r4
 801f52e:	2b07      	cmp	r3, #7
 801f530:	dc0a      	bgt.n	801f548 <__gethex+0x160>
 801f532:	4648      	mov	r0, r9
 801f534:	f7fd fddc 	bl	801d0f0 <_Balloc>
 801f538:	4604      	mov	r4, r0
 801f53a:	b940      	cbnz	r0, 801f54e <__gethex+0x166>
 801f53c:	4b61      	ldr	r3, [pc, #388]	; (801f6c4 <__gethex+0x2dc>)
 801f53e:	4602      	mov	r2, r0
 801f540:	21e4      	movs	r1, #228	; 0xe4
 801f542:	4861      	ldr	r0, [pc, #388]	; (801f6c8 <__gethex+0x2e0>)
 801f544:	f7ff feb4 	bl	801f2b0 <__assert_func>
 801f548:	3101      	adds	r1, #1
 801f54a:	105b      	asrs	r3, r3, #1
 801f54c:	e7ef      	b.n	801f52e <__gethex+0x146>
 801f54e:	f100 0a14 	add.w	sl, r0, #20
 801f552:	2300      	movs	r3, #0
 801f554:	495a      	ldr	r1, [pc, #360]	; (801f6c0 <__gethex+0x2d8>)
 801f556:	f8cd a004 	str.w	sl, [sp, #4]
 801f55a:	469b      	mov	fp, r3
 801f55c:	45a8      	cmp	r8, r5
 801f55e:	d342      	bcc.n	801f5e6 <__gethex+0x1fe>
 801f560:	9801      	ldr	r0, [sp, #4]
 801f562:	f840 bb04 	str.w	fp, [r0], #4
 801f566:	eba0 000a 	sub.w	r0, r0, sl
 801f56a:	1080      	asrs	r0, r0, #2
 801f56c:	6120      	str	r0, [r4, #16]
 801f56e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801f572:	4658      	mov	r0, fp
 801f574:	f7fd feae 	bl	801d2d4 <__hi0bits>
 801f578:	683d      	ldr	r5, [r7, #0]
 801f57a:	eba8 0000 	sub.w	r0, r8, r0
 801f57e:	42a8      	cmp	r0, r5
 801f580:	dd59      	ble.n	801f636 <__gethex+0x24e>
 801f582:	eba0 0805 	sub.w	r8, r0, r5
 801f586:	4641      	mov	r1, r8
 801f588:	4620      	mov	r0, r4
 801f58a:	f7fe fa3a 	bl	801da02 <__any_on>
 801f58e:	4683      	mov	fp, r0
 801f590:	b1b8      	cbz	r0, 801f5c2 <__gethex+0x1da>
 801f592:	f108 33ff 	add.w	r3, r8, #4294967295
 801f596:	1159      	asrs	r1, r3, #5
 801f598:	f003 021f 	and.w	r2, r3, #31
 801f59c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801f5a0:	f04f 0b01 	mov.w	fp, #1
 801f5a4:	fa0b f202 	lsl.w	r2, fp, r2
 801f5a8:	420a      	tst	r2, r1
 801f5aa:	d00a      	beq.n	801f5c2 <__gethex+0x1da>
 801f5ac:	455b      	cmp	r3, fp
 801f5ae:	dd06      	ble.n	801f5be <__gethex+0x1d6>
 801f5b0:	f1a8 0102 	sub.w	r1, r8, #2
 801f5b4:	4620      	mov	r0, r4
 801f5b6:	f7fe fa24 	bl	801da02 <__any_on>
 801f5ba:	2800      	cmp	r0, #0
 801f5bc:	d138      	bne.n	801f630 <__gethex+0x248>
 801f5be:	f04f 0b02 	mov.w	fp, #2
 801f5c2:	4641      	mov	r1, r8
 801f5c4:	4620      	mov	r0, r4
 801f5c6:	f7ff fea7 	bl	801f318 <rshift>
 801f5ca:	4446      	add	r6, r8
 801f5cc:	68bb      	ldr	r3, [r7, #8]
 801f5ce:	42b3      	cmp	r3, r6
 801f5d0:	da41      	bge.n	801f656 <__gethex+0x26e>
 801f5d2:	4621      	mov	r1, r4
 801f5d4:	4648      	mov	r0, r9
 801f5d6:	f7fd fdcb 	bl	801d170 <_Bfree>
 801f5da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f5dc:	2300      	movs	r3, #0
 801f5de:	6013      	str	r3, [r2, #0]
 801f5e0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801f5e4:	e78a      	b.n	801f4fc <__gethex+0x114>
 801f5e6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801f5ea:	2a2e      	cmp	r2, #46	; 0x2e
 801f5ec:	d014      	beq.n	801f618 <__gethex+0x230>
 801f5ee:	2b20      	cmp	r3, #32
 801f5f0:	d106      	bne.n	801f600 <__gethex+0x218>
 801f5f2:	9b01      	ldr	r3, [sp, #4]
 801f5f4:	f843 bb04 	str.w	fp, [r3], #4
 801f5f8:	f04f 0b00 	mov.w	fp, #0
 801f5fc:	9301      	str	r3, [sp, #4]
 801f5fe:	465b      	mov	r3, fp
 801f600:	7828      	ldrb	r0, [r5, #0]
 801f602:	9303      	str	r3, [sp, #12]
 801f604:	f7ff feda 	bl	801f3bc <__hexdig_fun>
 801f608:	9b03      	ldr	r3, [sp, #12]
 801f60a:	f000 000f 	and.w	r0, r0, #15
 801f60e:	4098      	lsls	r0, r3
 801f610:	ea4b 0b00 	orr.w	fp, fp, r0
 801f614:	3304      	adds	r3, #4
 801f616:	e7a1      	b.n	801f55c <__gethex+0x174>
 801f618:	45a8      	cmp	r8, r5
 801f61a:	d8e8      	bhi.n	801f5ee <__gethex+0x206>
 801f61c:	2201      	movs	r2, #1
 801f61e:	4628      	mov	r0, r5
 801f620:	9303      	str	r3, [sp, #12]
 801f622:	f7ff fe18 	bl	801f256 <strncmp>
 801f626:	4926      	ldr	r1, [pc, #152]	; (801f6c0 <__gethex+0x2d8>)
 801f628:	9b03      	ldr	r3, [sp, #12]
 801f62a:	2800      	cmp	r0, #0
 801f62c:	d1df      	bne.n	801f5ee <__gethex+0x206>
 801f62e:	e795      	b.n	801f55c <__gethex+0x174>
 801f630:	f04f 0b03 	mov.w	fp, #3
 801f634:	e7c5      	b.n	801f5c2 <__gethex+0x1da>
 801f636:	da0b      	bge.n	801f650 <__gethex+0x268>
 801f638:	eba5 0800 	sub.w	r8, r5, r0
 801f63c:	4621      	mov	r1, r4
 801f63e:	4642      	mov	r2, r8
 801f640:	4648      	mov	r0, r9
 801f642:	f7fd ffaf 	bl	801d5a4 <__lshift>
 801f646:	eba6 0608 	sub.w	r6, r6, r8
 801f64a:	4604      	mov	r4, r0
 801f64c:	f100 0a14 	add.w	sl, r0, #20
 801f650:	f04f 0b00 	mov.w	fp, #0
 801f654:	e7ba      	b.n	801f5cc <__gethex+0x1e4>
 801f656:	687b      	ldr	r3, [r7, #4]
 801f658:	42b3      	cmp	r3, r6
 801f65a:	dd73      	ble.n	801f744 <__gethex+0x35c>
 801f65c:	1b9e      	subs	r6, r3, r6
 801f65e:	42b5      	cmp	r5, r6
 801f660:	dc34      	bgt.n	801f6cc <__gethex+0x2e4>
 801f662:	68fb      	ldr	r3, [r7, #12]
 801f664:	2b02      	cmp	r3, #2
 801f666:	d023      	beq.n	801f6b0 <__gethex+0x2c8>
 801f668:	2b03      	cmp	r3, #3
 801f66a:	d025      	beq.n	801f6b8 <__gethex+0x2d0>
 801f66c:	2b01      	cmp	r3, #1
 801f66e:	d115      	bne.n	801f69c <__gethex+0x2b4>
 801f670:	42b5      	cmp	r5, r6
 801f672:	d113      	bne.n	801f69c <__gethex+0x2b4>
 801f674:	2d01      	cmp	r5, #1
 801f676:	d10b      	bne.n	801f690 <__gethex+0x2a8>
 801f678:	9a02      	ldr	r2, [sp, #8]
 801f67a:	687b      	ldr	r3, [r7, #4]
 801f67c:	6013      	str	r3, [r2, #0]
 801f67e:	2301      	movs	r3, #1
 801f680:	6123      	str	r3, [r4, #16]
 801f682:	f8ca 3000 	str.w	r3, [sl]
 801f686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f688:	f04f 0862 	mov.w	r8, #98	; 0x62
 801f68c:	601c      	str	r4, [r3, #0]
 801f68e:	e735      	b.n	801f4fc <__gethex+0x114>
 801f690:	1e69      	subs	r1, r5, #1
 801f692:	4620      	mov	r0, r4
 801f694:	f7fe f9b5 	bl	801da02 <__any_on>
 801f698:	2800      	cmp	r0, #0
 801f69a:	d1ed      	bne.n	801f678 <__gethex+0x290>
 801f69c:	4621      	mov	r1, r4
 801f69e:	4648      	mov	r0, r9
 801f6a0:	f7fd fd66 	bl	801d170 <_Bfree>
 801f6a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f6a6:	2300      	movs	r3, #0
 801f6a8:	6013      	str	r3, [r2, #0]
 801f6aa:	f04f 0850 	mov.w	r8, #80	; 0x50
 801f6ae:	e725      	b.n	801f4fc <__gethex+0x114>
 801f6b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f6b2:	2b00      	cmp	r3, #0
 801f6b4:	d1f2      	bne.n	801f69c <__gethex+0x2b4>
 801f6b6:	e7df      	b.n	801f678 <__gethex+0x290>
 801f6b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f6ba:	2b00      	cmp	r3, #0
 801f6bc:	d1dc      	bne.n	801f678 <__gethex+0x290>
 801f6be:	e7ed      	b.n	801f69c <__gethex+0x2b4>
 801f6c0:	08020aa4 	.word	0x08020aa4
 801f6c4:	08020937 	.word	0x08020937
 801f6c8:	08020c69 	.word	0x08020c69
 801f6cc:	f106 38ff 	add.w	r8, r6, #4294967295
 801f6d0:	f1bb 0f00 	cmp.w	fp, #0
 801f6d4:	d133      	bne.n	801f73e <__gethex+0x356>
 801f6d6:	f1b8 0f00 	cmp.w	r8, #0
 801f6da:	d004      	beq.n	801f6e6 <__gethex+0x2fe>
 801f6dc:	4641      	mov	r1, r8
 801f6de:	4620      	mov	r0, r4
 801f6e0:	f7fe f98f 	bl	801da02 <__any_on>
 801f6e4:	4683      	mov	fp, r0
 801f6e6:	ea4f 1268 	mov.w	r2, r8, asr #5
 801f6ea:	2301      	movs	r3, #1
 801f6ec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801f6f0:	f008 081f 	and.w	r8, r8, #31
 801f6f4:	fa03 f308 	lsl.w	r3, r3, r8
 801f6f8:	4213      	tst	r3, r2
 801f6fa:	4631      	mov	r1, r6
 801f6fc:	4620      	mov	r0, r4
 801f6fe:	bf18      	it	ne
 801f700:	f04b 0b02 	orrne.w	fp, fp, #2
 801f704:	1bad      	subs	r5, r5, r6
 801f706:	f7ff fe07 	bl	801f318 <rshift>
 801f70a:	687e      	ldr	r6, [r7, #4]
 801f70c:	f04f 0802 	mov.w	r8, #2
 801f710:	f1bb 0f00 	cmp.w	fp, #0
 801f714:	d04a      	beq.n	801f7ac <__gethex+0x3c4>
 801f716:	68fb      	ldr	r3, [r7, #12]
 801f718:	2b02      	cmp	r3, #2
 801f71a:	d016      	beq.n	801f74a <__gethex+0x362>
 801f71c:	2b03      	cmp	r3, #3
 801f71e:	d018      	beq.n	801f752 <__gethex+0x36a>
 801f720:	2b01      	cmp	r3, #1
 801f722:	d109      	bne.n	801f738 <__gethex+0x350>
 801f724:	f01b 0f02 	tst.w	fp, #2
 801f728:	d006      	beq.n	801f738 <__gethex+0x350>
 801f72a:	f8da 3000 	ldr.w	r3, [sl]
 801f72e:	ea4b 0b03 	orr.w	fp, fp, r3
 801f732:	f01b 0f01 	tst.w	fp, #1
 801f736:	d10f      	bne.n	801f758 <__gethex+0x370>
 801f738:	f048 0810 	orr.w	r8, r8, #16
 801f73c:	e036      	b.n	801f7ac <__gethex+0x3c4>
 801f73e:	f04f 0b01 	mov.w	fp, #1
 801f742:	e7d0      	b.n	801f6e6 <__gethex+0x2fe>
 801f744:	f04f 0801 	mov.w	r8, #1
 801f748:	e7e2      	b.n	801f710 <__gethex+0x328>
 801f74a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f74c:	f1c3 0301 	rsb	r3, r3, #1
 801f750:	930f      	str	r3, [sp, #60]	; 0x3c
 801f752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f754:	2b00      	cmp	r3, #0
 801f756:	d0ef      	beq.n	801f738 <__gethex+0x350>
 801f758:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f75c:	f104 0214 	add.w	r2, r4, #20
 801f760:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801f764:	9301      	str	r3, [sp, #4]
 801f766:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801f76a:	2300      	movs	r3, #0
 801f76c:	4694      	mov	ip, r2
 801f76e:	f852 1b04 	ldr.w	r1, [r2], #4
 801f772:	f1b1 3fff 	cmp.w	r1, #4294967295
 801f776:	d01e      	beq.n	801f7b6 <__gethex+0x3ce>
 801f778:	3101      	adds	r1, #1
 801f77a:	f8cc 1000 	str.w	r1, [ip]
 801f77e:	f1b8 0f02 	cmp.w	r8, #2
 801f782:	f104 0214 	add.w	r2, r4, #20
 801f786:	d13d      	bne.n	801f804 <__gethex+0x41c>
 801f788:	683b      	ldr	r3, [r7, #0]
 801f78a:	3b01      	subs	r3, #1
 801f78c:	42ab      	cmp	r3, r5
 801f78e:	d10b      	bne.n	801f7a8 <__gethex+0x3c0>
 801f790:	1169      	asrs	r1, r5, #5
 801f792:	2301      	movs	r3, #1
 801f794:	f005 051f 	and.w	r5, r5, #31
 801f798:	fa03 f505 	lsl.w	r5, r3, r5
 801f79c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f7a0:	421d      	tst	r5, r3
 801f7a2:	bf18      	it	ne
 801f7a4:	f04f 0801 	movne.w	r8, #1
 801f7a8:	f048 0820 	orr.w	r8, r8, #32
 801f7ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f7ae:	601c      	str	r4, [r3, #0]
 801f7b0:	9b02      	ldr	r3, [sp, #8]
 801f7b2:	601e      	str	r6, [r3, #0]
 801f7b4:	e6a2      	b.n	801f4fc <__gethex+0x114>
 801f7b6:	4290      	cmp	r0, r2
 801f7b8:	f842 3c04 	str.w	r3, [r2, #-4]
 801f7bc:	d8d6      	bhi.n	801f76c <__gethex+0x384>
 801f7be:	68a2      	ldr	r2, [r4, #8]
 801f7c0:	4593      	cmp	fp, r2
 801f7c2:	db17      	blt.n	801f7f4 <__gethex+0x40c>
 801f7c4:	6861      	ldr	r1, [r4, #4]
 801f7c6:	4648      	mov	r0, r9
 801f7c8:	3101      	adds	r1, #1
 801f7ca:	f7fd fc91 	bl	801d0f0 <_Balloc>
 801f7ce:	4682      	mov	sl, r0
 801f7d0:	b918      	cbnz	r0, 801f7da <__gethex+0x3f2>
 801f7d2:	4b1b      	ldr	r3, [pc, #108]	; (801f840 <__gethex+0x458>)
 801f7d4:	4602      	mov	r2, r0
 801f7d6:	2184      	movs	r1, #132	; 0x84
 801f7d8:	e6b3      	b.n	801f542 <__gethex+0x15a>
 801f7da:	6922      	ldr	r2, [r4, #16]
 801f7dc:	3202      	adds	r2, #2
 801f7de:	f104 010c 	add.w	r1, r4, #12
 801f7e2:	0092      	lsls	r2, r2, #2
 801f7e4:	300c      	adds	r0, #12
 801f7e6:	f7fc fd78 	bl	801c2da <memcpy>
 801f7ea:	4621      	mov	r1, r4
 801f7ec:	4648      	mov	r0, r9
 801f7ee:	f7fd fcbf 	bl	801d170 <_Bfree>
 801f7f2:	4654      	mov	r4, sl
 801f7f4:	6922      	ldr	r2, [r4, #16]
 801f7f6:	1c51      	adds	r1, r2, #1
 801f7f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f7fc:	6121      	str	r1, [r4, #16]
 801f7fe:	2101      	movs	r1, #1
 801f800:	6151      	str	r1, [r2, #20]
 801f802:	e7bc      	b.n	801f77e <__gethex+0x396>
 801f804:	6921      	ldr	r1, [r4, #16]
 801f806:	4559      	cmp	r1, fp
 801f808:	dd0b      	ble.n	801f822 <__gethex+0x43a>
 801f80a:	2101      	movs	r1, #1
 801f80c:	4620      	mov	r0, r4
 801f80e:	f7ff fd83 	bl	801f318 <rshift>
 801f812:	68bb      	ldr	r3, [r7, #8]
 801f814:	3601      	adds	r6, #1
 801f816:	42b3      	cmp	r3, r6
 801f818:	f6ff aedb 	blt.w	801f5d2 <__gethex+0x1ea>
 801f81c:	f04f 0801 	mov.w	r8, #1
 801f820:	e7c2      	b.n	801f7a8 <__gethex+0x3c0>
 801f822:	f015 051f 	ands.w	r5, r5, #31
 801f826:	d0f9      	beq.n	801f81c <__gethex+0x434>
 801f828:	9b01      	ldr	r3, [sp, #4]
 801f82a:	441a      	add	r2, r3
 801f82c:	f1c5 0520 	rsb	r5, r5, #32
 801f830:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801f834:	f7fd fd4e 	bl	801d2d4 <__hi0bits>
 801f838:	42a8      	cmp	r0, r5
 801f83a:	dbe6      	blt.n	801f80a <__gethex+0x422>
 801f83c:	e7ee      	b.n	801f81c <__gethex+0x434>
 801f83e:	bf00      	nop
 801f840:	08020937 	.word	0x08020937

0801f844 <L_shift>:
 801f844:	f1c2 0208 	rsb	r2, r2, #8
 801f848:	0092      	lsls	r2, r2, #2
 801f84a:	b570      	push	{r4, r5, r6, lr}
 801f84c:	f1c2 0620 	rsb	r6, r2, #32
 801f850:	6843      	ldr	r3, [r0, #4]
 801f852:	6804      	ldr	r4, [r0, #0]
 801f854:	fa03 f506 	lsl.w	r5, r3, r6
 801f858:	432c      	orrs	r4, r5
 801f85a:	40d3      	lsrs	r3, r2
 801f85c:	6004      	str	r4, [r0, #0]
 801f85e:	f840 3f04 	str.w	r3, [r0, #4]!
 801f862:	4288      	cmp	r0, r1
 801f864:	d3f4      	bcc.n	801f850 <L_shift+0xc>
 801f866:	bd70      	pop	{r4, r5, r6, pc}

0801f868 <__match>:
 801f868:	b530      	push	{r4, r5, lr}
 801f86a:	6803      	ldr	r3, [r0, #0]
 801f86c:	3301      	adds	r3, #1
 801f86e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f872:	b914      	cbnz	r4, 801f87a <__match+0x12>
 801f874:	6003      	str	r3, [r0, #0]
 801f876:	2001      	movs	r0, #1
 801f878:	bd30      	pop	{r4, r5, pc}
 801f87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f87e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801f882:	2d19      	cmp	r5, #25
 801f884:	bf98      	it	ls
 801f886:	3220      	addls	r2, #32
 801f888:	42a2      	cmp	r2, r4
 801f88a:	d0f0      	beq.n	801f86e <__match+0x6>
 801f88c:	2000      	movs	r0, #0
 801f88e:	e7f3      	b.n	801f878 <__match+0x10>

0801f890 <__hexnan>:
 801f890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f894:	680b      	ldr	r3, [r1, #0]
 801f896:	6801      	ldr	r1, [r0, #0]
 801f898:	115e      	asrs	r6, r3, #5
 801f89a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f89e:	f013 031f 	ands.w	r3, r3, #31
 801f8a2:	b087      	sub	sp, #28
 801f8a4:	bf18      	it	ne
 801f8a6:	3604      	addne	r6, #4
 801f8a8:	2500      	movs	r5, #0
 801f8aa:	1f37      	subs	r7, r6, #4
 801f8ac:	4682      	mov	sl, r0
 801f8ae:	4690      	mov	r8, r2
 801f8b0:	9301      	str	r3, [sp, #4]
 801f8b2:	f846 5c04 	str.w	r5, [r6, #-4]
 801f8b6:	46b9      	mov	r9, r7
 801f8b8:	463c      	mov	r4, r7
 801f8ba:	9502      	str	r5, [sp, #8]
 801f8bc:	46ab      	mov	fp, r5
 801f8be:	784a      	ldrb	r2, [r1, #1]
 801f8c0:	1c4b      	adds	r3, r1, #1
 801f8c2:	9303      	str	r3, [sp, #12]
 801f8c4:	b342      	cbz	r2, 801f918 <__hexnan+0x88>
 801f8c6:	4610      	mov	r0, r2
 801f8c8:	9105      	str	r1, [sp, #20]
 801f8ca:	9204      	str	r2, [sp, #16]
 801f8cc:	f7ff fd76 	bl	801f3bc <__hexdig_fun>
 801f8d0:	2800      	cmp	r0, #0
 801f8d2:	d14f      	bne.n	801f974 <__hexnan+0xe4>
 801f8d4:	9a04      	ldr	r2, [sp, #16]
 801f8d6:	9905      	ldr	r1, [sp, #20]
 801f8d8:	2a20      	cmp	r2, #32
 801f8da:	d818      	bhi.n	801f90e <__hexnan+0x7e>
 801f8dc:	9b02      	ldr	r3, [sp, #8]
 801f8de:	459b      	cmp	fp, r3
 801f8e0:	dd13      	ble.n	801f90a <__hexnan+0x7a>
 801f8e2:	454c      	cmp	r4, r9
 801f8e4:	d206      	bcs.n	801f8f4 <__hexnan+0x64>
 801f8e6:	2d07      	cmp	r5, #7
 801f8e8:	dc04      	bgt.n	801f8f4 <__hexnan+0x64>
 801f8ea:	462a      	mov	r2, r5
 801f8ec:	4649      	mov	r1, r9
 801f8ee:	4620      	mov	r0, r4
 801f8f0:	f7ff ffa8 	bl	801f844 <L_shift>
 801f8f4:	4544      	cmp	r4, r8
 801f8f6:	d950      	bls.n	801f99a <__hexnan+0x10a>
 801f8f8:	2300      	movs	r3, #0
 801f8fa:	f1a4 0904 	sub.w	r9, r4, #4
 801f8fe:	f844 3c04 	str.w	r3, [r4, #-4]
 801f902:	f8cd b008 	str.w	fp, [sp, #8]
 801f906:	464c      	mov	r4, r9
 801f908:	461d      	mov	r5, r3
 801f90a:	9903      	ldr	r1, [sp, #12]
 801f90c:	e7d7      	b.n	801f8be <__hexnan+0x2e>
 801f90e:	2a29      	cmp	r2, #41	; 0x29
 801f910:	d155      	bne.n	801f9be <__hexnan+0x12e>
 801f912:	3102      	adds	r1, #2
 801f914:	f8ca 1000 	str.w	r1, [sl]
 801f918:	f1bb 0f00 	cmp.w	fp, #0
 801f91c:	d04f      	beq.n	801f9be <__hexnan+0x12e>
 801f91e:	454c      	cmp	r4, r9
 801f920:	d206      	bcs.n	801f930 <__hexnan+0xa0>
 801f922:	2d07      	cmp	r5, #7
 801f924:	dc04      	bgt.n	801f930 <__hexnan+0xa0>
 801f926:	462a      	mov	r2, r5
 801f928:	4649      	mov	r1, r9
 801f92a:	4620      	mov	r0, r4
 801f92c:	f7ff ff8a 	bl	801f844 <L_shift>
 801f930:	4544      	cmp	r4, r8
 801f932:	d934      	bls.n	801f99e <__hexnan+0x10e>
 801f934:	f1a8 0204 	sub.w	r2, r8, #4
 801f938:	4623      	mov	r3, r4
 801f93a:	f853 1b04 	ldr.w	r1, [r3], #4
 801f93e:	f842 1f04 	str.w	r1, [r2, #4]!
 801f942:	429f      	cmp	r7, r3
 801f944:	d2f9      	bcs.n	801f93a <__hexnan+0xaa>
 801f946:	1b3b      	subs	r3, r7, r4
 801f948:	f023 0303 	bic.w	r3, r3, #3
 801f94c:	3304      	adds	r3, #4
 801f94e:	3e03      	subs	r6, #3
 801f950:	3401      	adds	r4, #1
 801f952:	42a6      	cmp	r6, r4
 801f954:	bf38      	it	cc
 801f956:	2304      	movcc	r3, #4
 801f958:	4443      	add	r3, r8
 801f95a:	2200      	movs	r2, #0
 801f95c:	f843 2b04 	str.w	r2, [r3], #4
 801f960:	429f      	cmp	r7, r3
 801f962:	d2fb      	bcs.n	801f95c <__hexnan+0xcc>
 801f964:	683b      	ldr	r3, [r7, #0]
 801f966:	b91b      	cbnz	r3, 801f970 <__hexnan+0xe0>
 801f968:	4547      	cmp	r7, r8
 801f96a:	d126      	bne.n	801f9ba <__hexnan+0x12a>
 801f96c:	2301      	movs	r3, #1
 801f96e:	603b      	str	r3, [r7, #0]
 801f970:	2005      	movs	r0, #5
 801f972:	e025      	b.n	801f9c0 <__hexnan+0x130>
 801f974:	3501      	adds	r5, #1
 801f976:	2d08      	cmp	r5, #8
 801f978:	f10b 0b01 	add.w	fp, fp, #1
 801f97c:	dd06      	ble.n	801f98c <__hexnan+0xfc>
 801f97e:	4544      	cmp	r4, r8
 801f980:	d9c3      	bls.n	801f90a <__hexnan+0x7a>
 801f982:	2300      	movs	r3, #0
 801f984:	f844 3c04 	str.w	r3, [r4, #-4]
 801f988:	2501      	movs	r5, #1
 801f98a:	3c04      	subs	r4, #4
 801f98c:	6822      	ldr	r2, [r4, #0]
 801f98e:	f000 000f 	and.w	r0, r0, #15
 801f992:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801f996:	6020      	str	r0, [r4, #0]
 801f998:	e7b7      	b.n	801f90a <__hexnan+0x7a>
 801f99a:	2508      	movs	r5, #8
 801f99c:	e7b5      	b.n	801f90a <__hexnan+0x7a>
 801f99e:	9b01      	ldr	r3, [sp, #4]
 801f9a0:	2b00      	cmp	r3, #0
 801f9a2:	d0df      	beq.n	801f964 <__hexnan+0xd4>
 801f9a4:	f1c3 0320 	rsb	r3, r3, #32
 801f9a8:	f04f 32ff 	mov.w	r2, #4294967295
 801f9ac:	40da      	lsrs	r2, r3
 801f9ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801f9b2:	4013      	ands	r3, r2
 801f9b4:	f846 3c04 	str.w	r3, [r6, #-4]
 801f9b8:	e7d4      	b.n	801f964 <__hexnan+0xd4>
 801f9ba:	3f04      	subs	r7, #4
 801f9bc:	e7d2      	b.n	801f964 <__hexnan+0xd4>
 801f9be:	2004      	movs	r0, #4
 801f9c0:	b007      	add	sp, #28
 801f9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f9c6 <__ascii_mbtowc>:
 801f9c6:	b082      	sub	sp, #8
 801f9c8:	b901      	cbnz	r1, 801f9cc <__ascii_mbtowc+0x6>
 801f9ca:	a901      	add	r1, sp, #4
 801f9cc:	b142      	cbz	r2, 801f9e0 <__ascii_mbtowc+0x1a>
 801f9ce:	b14b      	cbz	r3, 801f9e4 <__ascii_mbtowc+0x1e>
 801f9d0:	7813      	ldrb	r3, [r2, #0]
 801f9d2:	600b      	str	r3, [r1, #0]
 801f9d4:	7812      	ldrb	r2, [r2, #0]
 801f9d6:	1e10      	subs	r0, r2, #0
 801f9d8:	bf18      	it	ne
 801f9da:	2001      	movne	r0, #1
 801f9dc:	b002      	add	sp, #8
 801f9de:	4770      	bx	lr
 801f9e0:	4610      	mov	r0, r2
 801f9e2:	e7fb      	b.n	801f9dc <__ascii_mbtowc+0x16>
 801f9e4:	f06f 0001 	mvn.w	r0, #1
 801f9e8:	e7f8      	b.n	801f9dc <__ascii_mbtowc+0x16>

0801f9ea <_realloc_r>:
 801f9ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f9ee:	4680      	mov	r8, r0
 801f9f0:	4614      	mov	r4, r2
 801f9f2:	460e      	mov	r6, r1
 801f9f4:	b921      	cbnz	r1, 801fa00 <_realloc_r+0x16>
 801f9f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f9fa:	4611      	mov	r1, r2
 801f9fc:	f7fd baec 	b.w	801cfd8 <_malloc_r>
 801fa00:	b92a      	cbnz	r2, 801fa0e <_realloc_r+0x24>
 801fa02:	f7fd fa75 	bl	801cef0 <_free_r>
 801fa06:	4625      	mov	r5, r4
 801fa08:	4628      	mov	r0, r5
 801fa0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa0e:	f000 f8b6 	bl	801fb7e <_malloc_usable_size_r>
 801fa12:	4284      	cmp	r4, r0
 801fa14:	4607      	mov	r7, r0
 801fa16:	d802      	bhi.n	801fa1e <_realloc_r+0x34>
 801fa18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801fa1c:	d812      	bhi.n	801fa44 <_realloc_r+0x5a>
 801fa1e:	4621      	mov	r1, r4
 801fa20:	4640      	mov	r0, r8
 801fa22:	f7fd fad9 	bl	801cfd8 <_malloc_r>
 801fa26:	4605      	mov	r5, r0
 801fa28:	2800      	cmp	r0, #0
 801fa2a:	d0ed      	beq.n	801fa08 <_realloc_r+0x1e>
 801fa2c:	42bc      	cmp	r4, r7
 801fa2e:	4622      	mov	r2, r4
 801fa30:	4631      	mov	r1, r6
 801fa32:	bf28      	it	cs
 801fa34:	463a      	movcs	r2, r7
 801fa36:	f7fc fc50 	bl	801c2da <memcpy>
 801fa3a:	4631      	mov	r1, r6
 801fa3c:	4640      	mov	r0, r8
 801fa3e:	f7fd fa57 	bl	801cef0 <_free_r>
 801fa42:	e7e1      	b.n	801fa08 <_realloc_r+0x1e>
 801fa44:	4635      	mov	r5, r6
 801fa46:	e7df      	b.n	801fa08 <_realloc_r+0x1e>

0801fa48 <_strtoul_l.constprop.0>:
 801fa48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fa4c:	4f36      	ldr	r7, [pc, #216]	; (801fb28 <_strtoul_l.constprop.0+0xe0>)
 801fa4e:	4686      	mov	lr, r0
 801fa50:	460d      	mov	r5, r1
 801fa52:	4628      	mov	r0, r5
 801fa54:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fa58:	5d3e      	ldrb	r6, [r7, r4]
 801fa5a:	f016 0608 	ands.w	r6, r6, #8
 801fa5e:	d1f8      	bne.n	801fa52 <_strtoul_l.constprop.0+0xa>
 801fa60:	2c2d      	cmp	r4, #45	; 0x2d
 801fa62:	d130      	bne.n	801fac6 <_strtoul_l.constprop.0+0x7e>
 801fa64:	782c      	ldrb	r4, [r5, #0]
 801fa66:	2601      	movs	r6, #1
 801fa68:	1c85      	adds	r5, r0, #2
 801fa6a:	2b00      	cmp	r3, #0
 801fa6c:	d057      	beq.n	801fb1e <_strtoul_l.constprop.0+0xd6>
 801fa6e:	2b10      	cmp	r3, #16
 801fa70:	d109      	bne.n	801fa86 <_strtoul_l.constprop.0+0x3e>
 801fa72:	2c30      	cmp	r4, #48	; 0x30
 801fa74:	d107      	bne.n	801fa86 <_strtoul_l.constprop.0+0x3e>
 801fa76:	7828      	ldrb	r0, [r5, #0]
 801fa78:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801fa7c:	2858      	cmp	r0, #88	; 0x58
 801fa7e:	d149      	bne.n	801fb14 <_strtoul_l.constprop.0+0xcc>
 801fa80:	786c      	ldrb	r4, [r5, #1]
 801fa82:	2310      	movs	r3, #16
 801fa84:	3502      	adds	r5, #2
 801fa86:	f04f 38ff 	mov.w	r8, #4294967295
 801fa8a:	2700      	movs	r7, #0
 801fa8c:	fbb8 f8f3 	udiv	r8, r8, r3
 801fa90:	fb03 f908 	mul.w	r9, r3, r8
 801fa94:	ea6f 0909 	mvn.w	r9, r9
 801fa98:	4638      	mov	r0, r7
 801fa9a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801fa9e:	f1bc 0f09 	cmp.w	ip, #9
 801faa2:	d815      	bhi.n	801fad0 <_strtoul_l.constprop.0+0x88>
 801faa4:	4664      	mov	r4, ip
 801faa6:	42a3      	cmp	r3, r4
 801faa8:	dd23      	ble.n	801faf2 <_strtoul_l.constprop.0+0xaa>
 801faaa:	f1b7 3fff 	cmp.w	r7, #4294967295
 801faae:	d007      	beq.n	801fac0 <_strtoul_l.constprop.0+0x78>
 801fab0:	4580      	cmp	r8, r0
 801fab2:	d31b      	bcc.n	801faec <_strtoul_l.constprop.0+0xa4>
 801fab4:	d101      	bne.n	801faba <_strtoul_l.constprop.0+0x72>
 801fab6:	45a1      	cmp	r9, r4
 801fab8:	db18      	blt.n	801faec <_strtoul_l.constprop.0+0xa4>
 801faba:	fb00 4003 	mla	r0, r0, r3, r4
 801fabe:	2701      	movs	r7, #1
 801fac0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fac4:	e7e9      	b.n	801fa9a <_strtoul_l.constprop.0+0x52>
 801fac6:	2c2b      	cmp	r4, #43	; 0x2b
 801fac8:	bf04      	itt	eq
 801faca:	782c      	ldrbeq	r4, [r5, #0]
 801facc:	1c85      	addeq	r5, r0, #2
 801face:	e7cc      	b.n	801fa6a <_strtoul_l.constprop.0+0x22>
 801fad0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801fad4:	f1bc 0f19 	cmp.w	ip, #25
 801fad8:	d801      	bhi.n	801fade <_strtoul_l.constprop.0+0x96>
 801fada:	3c37      	subs	r4, #55	; 0x37
 801fadc:	e7e3      	b.n	801faa6 <_strtoul_l.constprop.0+0x5e>
 801fade:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801fae2:	f1bc 0f19 	cmp.w	ip, #25
 801fae6:	d804      	bhi.n	801faf2 <_strtoul_l.constprop.0+0xaa>
 801fae8:	3c57      	subs	r4, #87	; 0x57
 801faea:	e7dc      	b.n	801faa6 <_strtoul_l.constprop.0+0x5e>
 801faec:	f04f 37ff 	mov.w	r7, #4294967295
 801faf0:	e7e6      	b.n	801fac0 <_strtoul_l.constprop.0+0x78>
 801faf2:	1c7b      	adds	r3, r7, #1
 801faf4:	d106      	bne.n	801fb04 <_strtoul_l.constprop.0+0xbc>
 801faf6:	2322      	movs	r3, #34	; 0x22
 801faf8:	f8ce 3000 	str.w	r3, [lr]
 801fafc:	4638      	mov	r0, r7
 801fafe:	b932      	cbnz	r2, 801fb0e <_strtoul_l.constprop.0+0xc6>
 801fb00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fb04:	b106      	cbz	r6, 801fb08 <_strtoul_l.constprop.0+0xc0>
 801fb06:	4240      	negs	r0, r0
 801fb08:	2a00      	cmp	r2, #0
 801fb0a:	d0f9      	beq.n	801fb00 <_strtoul_l.constprop.0+0xb8>
 801fb0c:	b107      	cbz	r7, 801fb10 <_strtoul_l.constprop.0+0xc8>
 801fb0e:	1e69      	subs	r1, r5, #1
 801fb10:	6011      	str	r1, [r2, #0]
 801fb12:	e7f5      	b.n	801fb00 <_strtoul_l.constprop.0+0xb8>
 801fb14:	2430      	movs	r4, #48	; 0x30
 801fb16:	2b00      	cmp	r3, #0
 801fb18:	d1b5      	bne.n	801fa86 <_strtoul_l.constprop.0+0x3e>
 801fb1a:	2308      	movs	r3, #8
 801fb1c:	e7b3      	b.n	801fa86 <_strtoul_l.constprop.0+0x3e>
 801fb1e:	2c30      	cmp	r4, #48	; 0x30
 801fb20:	d0a9      	beq.n	801fa76 <_strtoul_l.constprop.0+0x2e>
 801fb22:	230a      	movs	r3, #10
 801fb24:	e7af      	b.n	801fa86 <_strtoul_l.constprop.0+0x3e>
 801fb26:	bf00      	nop
 801fb28:	08020af9 	.word	0x08020af9

0801fb2c <_strtoul_r>:
 801fb2c:	f7ff bf8c 	b.w	801fa48 <_strtoul_l.constprop.0>

0801fb30 <__ascii_wctomb>:
 801fb30:	b149      	cbz	r1, 801fb46 <__ascii_wctomb+0x16>
 801fb32:	2aff      	cmp	r2, #255	; 0xff
 801fb34:	bf85      	ittet	hi
 801fb36:	238a      	movhi	r3, #138	; 0x8a
 801fb38:	6003      	strhi	r3, [r0, #0]
 801fb3a:	700a      	strbls	r2, [r1, #0]
 801fb3c:	f04f 30ff 	movhi.w	r0, #4294967295
 801fb40:	bf98      	it	ls
 801fb42:	2001      	movls	r0, #1
 801fb44:	4770      	bx	lr
 801fb46:	4608      	mov	r0, r1
 801fb48:	4770      	bx	lr
	...

0801fb4c <fiprintf>:
 801fb4c:	b40e      	push	{r1, r2, r3}
 801fb4e:	b503      	push	{r0, r1, lr}
 801fb50:	4601      	mov	r1, r0
 801fb52:	ab03      	add	r3, sp, #12
 801fb54:	4805      	ldr	r0, [pc, #20]	; (801fb6c <fiprintf+0x20>)
 801fb56:	f853 2b04 	ldr.w	r2, [r3], #4
 801fb5a:	6800      	ldr	r0, [r0, #0]
 801fb5c:	9301      	str	r3, [sp, #4]
 801fb5e:	f000 f83f 	bl	801fbe0 <_vfiprintf_r>
 801fb62:	b002      	add	sp, #8
 801fb64:	f85d eb04 	ldr.w	lr, [sp], #4
 801fb68:	b003      	add	sp, #12
 801fb6a:	4770      	bx	lr
 801fb6c:	24000258 	.word	0x24000258

0801fb70 <abort>:
 801fb70:	b508      	push	{r3, lr}
 801fb72:	2006      	movs	r0, #6
 801fb74:	f000 fa0c 	bl	801ff90 <raise>
 801fb78:	2001      	movs	r0, #1
 801fb7a:	f7e4 f961 	bl	8003e40 <_exit>

0801fb7e <_malloc_usable_size_r>:
 801fb7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fb82:	1f18      	subs	r0, r3, #4
 801fb84:	2b00      	cmp	r3, #0
 801fb86:	bfbc      	itt	lt
 801fb88:	580b      	ldrlt	r3, [r1, r0]
 801fb8a:	18c0      	addlt	r0, r0, r3
 801fb8c:	4770      	bx	lr

0801fb8e <__sfputc_r>:
 801fb8e:	6893      	ldr	r3, [r2, #8]
 801fb90:	3b01      	subs	r3, #1
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	b410      	push	{r4}
 801fb96:	6093      	str	r3, [r2, #8]
 801fb98:	da08      	bge.n	801fbac <__sfputc_r+0x1e>
 801fb9a:	6994      	ldr	r4, [r2, #24]
 801fb9c:	42a3      	cmp	r3, r4
 801fb9e:	db01      	blt.n	801fba4 <__sfputc_r+0x16>
 801fba0:	290a      	cmp	r1, #10
 801fba2:	d103      	bne.n	801fbac <__sfputc_r+0x1e>
 801fba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fba8:	f000 b934 	b.w	801fe14 <__swbuf_r>
 801fbac:	6813      	ldr	r3, [r2, #0]
 801fbae:	1c58      	adds	r0, r3, #1
 801fbb0:	6010      	str	r0, [r2, #0]
 801fbb2:	7019      	strb	r1, [r3, #0]
 801fbb4:	4608      	mov	r0, r1
 801fbb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fbba:	4770      	bx	lr

0801fbbc <__sfputs_r>:
 801fbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fbbe:	4606      	mov	r6, r0
 801fbc0:	460f      	mov	r7, r1
 801fbc2:	4614      	mov	r4, r2
 801fbc4:	18d5      	adds	r5, r2, r3
 801fbc6:	42ac      	cmp	r4, r5
 801fbc8:	d101      	bne.n	801fbce <__sfputs_r+0x12>
 801fbca:	2000      	movs	r0, #0
 801fbcc:	e007      	b.n	801fbde <__sfputs_r+0x22>
 801fbce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fbd2:	463a      	mov	r2, r7
 801fbd4:	4630      	mov	r0, r6
 801fbd6:	f7ff ffda 	bl	801fb8e <__sfputc_r>
 801fbda:	1c43      	adds	r3, r0, #1
 801fbdc:	d1f3      	bne.n	801fbc6 <__sfputs_r+0xa>
 801fbde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801fbe0 <_vfiprintf_r>:
 801fbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbe4:	460d      	mov	r5, r1
 801fbe6:	b09d      	sub	sp, #116	; 0x74
 801fbe8:	4614      	mov	r4, r2
 801fbea:	4698      	mov	r8, r3
 801fbec:	4606      	mov	r6, r0
 801fbee:	b118      	cbz	r0, 801fbf8 <_vfiprintf_r+0x18>
 801fbf0:	6a03      	ldr	r3, [r0, #32]
 801fbf2:	b90b      	cbnz	r3, 801fbf8 <_vfiprintf_r+0x18>
 801fbf4:	f7fc fa22 	bl	801c03c <__sinit>
 801fbf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fbfa:	07d9      	lsls	r1, r3, #31
 801fbfc:	d405      	bmi.n	801fc0a <_vfiprintf_r+0x2a>
 801fbfe:	89ab      	ldrh	r3, [r5, #12]
 801fc00:	059a      	lsls	r2, r3, #22
 801fc02:	d402      	bmi.n	801fc0a <_vfiprintf_r+0x2a>
 801fc04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fc06:	f7fc fb5e 	bl	801c2c6 <__retarget_lock_acquire_recursive>
 801fc0a:	89ab      	ldrh	r3, [r5, #12]
 801fc0c:	071b      	lsls	r3, r3, #28
 801fc0e:	d501      	bpl.n	801fc14 <_vfiprintf_r+0x34>
 801fc10:	692b      	ldr	r3, [r5, #16]
 801fc12:	b99b      	cbnz	r3, 801fc3c <_vfiprintf_r+0x5c>
 801fc14:	4629      	mov	r1, r5
 801fc16:	4630      	mov	r0, r6
 801fc18:	f000 f93a 	bl	801fe90 <__swsetup_r>
 801fc1c:	b170      	cbz	r0, 801fc3c <_vfiprintf_r+0x5c>
 801fc1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fc20:	07dc      	lsls	r4, r3, #31
 801fc22:	d504      	bpl.n	801fc2e <_vfiprintf_r+0x4e>
 801fc24:	f04f 30ff 	mov.w	r0, #4294967295
 801fc28:	b01d      	add	sp, #116	; 0x74
 801fc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc2e:	89ab      	ldrh	r3, [r5, #12]
 801fc30:	0598      	lsls	r0, r3, #22
 801fc32:	d4f7      	bmi.n	801fc24 <_vfiprintf_r+0x44>
 801fc34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fc36:	f7fc fb47 	bl	801c2c8 <__retarget_lock_release_recursive>
 801fc3a:	e7f3      	b.n	801fc24 <_vfiprintf_r+0x44>
 801fc3c:	2300      	movs	r3, #0
 801fc3e:	9309      	str	r3, [sp, #36]	; 0x24
 801fc40:	2320      	movs	r3, #32
 801fc42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fc46:	f8cd 800c 	str.w	r8, [sp, #12]
 801fc4a:	2330      	movs	r3, #48	; 0x30
 801fc4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801fe00 <_vfiprintf_r+0x220>
 801fc50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fc54:	f04f 0901 	mov.w	r9, #1
 801fc58:	4623      	mov	r3, r4
 801fc5a:	469a      	mov	sl, r3
 801fc5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fc60:	b10a      	cbz	r2, 801fc66 <_vfiprintf_r+0x86>
 801fc62:	2a25      	cmp	r2, #37	; 0x25
 801fc64:	d1f9      	bne.n	801fc5a <_vfiprintf_r+0x7a>
 801fc66:	ebba 0b04 	subs.w	fp, sl, r4
 801fc6a:	d00b      	beq.n	801fc84 <_vfiprintf_r+0xa4>
 801fc6c:	465b      	mov	r3, fp
 801fc6e:	4622      	mov	r2, r4
 801fc70:	4629      	mov	r1, r5
 801fc72:	4630      	mov	r0, r6
 801fc74:	f7ff ffa2 	bl	801fbbc <__sfputs_r>
 801fc78:	3001      	adds	r0, #1
 801fc7a:	f000 80a9 	beq.w	801fdd0 <_vfiprintf_r+0x1f0>
 801fc7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fc80:	445a      	add	r2, fp
 801fc82:	9209      	str	r2, [sp, #36]	; 0x24
 801fc84:	f89a 3000 	ldrb.w	r3, [sl]
 801fc88:	2b00      	cmp	r3, #0
 801fc8a:	f000 80a1 	beq.w	801fdd0 <_vfiprintf_r+0x1f0>
 801fc8e:	2300      	movs	r3, #0
 801fc90:	f04f 32ff 	mov.w	r2, #4294967295
 801fc94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fc98:	f10a 0a01 	add.w	sl, sl, #1
 801fc9c:	9304      	str	r3, [sp, #16]
 801fc9e:	9307      	str	r3, [sp, #28]
 801fca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fca4:	931a      	str	r3, [sp, #104]	; 0x68
 801fca6:	4654      	mov	r4, sl
 801fca8:	2205      	movs	r2, #5
 801fcaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fcae:	4854      	ldr	r0, [pc, #336]	; (801fe00 <_vfiprintf_r+0x220>)
 801fcb0:	f7e0 fb3e 	bl	8000330 <memchr>
 801fcb4:	9a04      	ldr	r2, [sp, #16]
 801fcb6:	b9d8      	cbnz	r0, 801fcf0 <_vfiprintf_r+0x110>
 801fcb8:	06d1      	lsls	r1, r2, #27
 801fcba:	bf44      	itt	mi
 801fcbc:	2320      	movmi	r3, #32
 801fcbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fcc2:	0713      	lsls	r3, r2, #28
 801fcc4:	bf44      	itt	mi
 801fcc6:	232b      	movmi	r3, #43	; 0x2b
 801fcc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fccc:	f89a 3000 	ldrb.w	r3, [sl]
 801fcd0:	2b2a      	cmp	r3, #42	; 0x2a
 801fcd2:	d015      	beq.n	801fd00 <_vfiprintf_r+0x120>
 801fcd4:	9a07      	ldr	r2, [sp, #28]
 801fcd6:	4654      	mov	r4, sl
 801fcd8:	2000      	movs	r0, #0
 801fcda:	f04f 0c0a 	mov.w	ip, #10
 801fcde:	4621      	mov	r1, r4
 801fce0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fce4:	3b30      	subs	r3, #48	; 0x30
 801fce6:	2b09      	cmp	r3, #9
 801fce8:	d94d      	bls.n	801fd86 <_vfiprintf_r+0x1a6>
 801fcea:	b1b0      	cbz	r0, 801fd1a <_vfiprintf_r+0x13a>
 801fcec:	9207      	str	r2, [sp, #28]
 801fcee:	e014      	b.n	801fd1a <_vfiprintf_r+0x13a>
 801fcf0:	eba0 0308 	sub.w	r3, r0, r8
 801fcf4:	fa09 f303 	lsl.w	r3, r9, r3
 801fcf8:	4313      	orrs	r3, r2
 801fcfa:	9304      	str	r3, [sp, #16]
 801fcfc:	46a2      	mov	sl, r4
 801fcfe:	e7d2      	b.n	801fca6 <_vfiprintf_r+0xc6>
 801fd00:	9b03      	ldr	r3, [sp, #12]
 801fd02:	1d19      	adds	r1, r3, #4
 801fd04:	681b      	ldr	r3, [r3, #0]
 801fd06:	9103      	str	r1, [sp, #12]
 801fd08:	2b00      	cmp	r3, #0
 801fd0a:	bfbb      	ittet	lt
 801fd0c:	425b      	neglt	r3, r3
 801fd0e:	f042 0202 	orrlt.w	r2, r2, #2
 801fd12:	9307      	strge	r3, [sp, #28]
 801fd14:	9307      	strlt	r3, [sp, #28]
 801fd16:	bfb8      	it	lt
 801fd18:	9204      	strlt	r2, [sp, #16]
 801fd1a:	7823      	ldrb	r3, [r4, #0]
 801fd1c:	2b2e      	cmp	r3, #46	; 0x2e
 801fd1e:	d10c      	bne.n	801fd3a <_vfiprintf_r+0x15a>
 801fd20:	7863      	ldrb	r3, [r4, #1]
 801fd22:	2b2a      	cmp	r3, #42	; 0x2a
 801fd24:	d134      	bne.n	801fd90 <_vfiprintf_r+0x1b0>
 801fd26:	9b03      	ldr	r3, [sp, #12]
 801fd28:	1d1a      	adds	r2, r3, #4
 801fd2a:	681b      	ldr	r3, [r3, #0]
 801fd2c:	9203      	str	r2, [sp, #12]
 801fd2e:	2b00      	cmp	r3, #0
 801fd30:	bfb8      	it	lt
 801fd32:	f04f 33ff 	movlt.w	r3, #4294967295
 801fd36:	3402      	adds	r4, #2
 801fd38:	9305      	str	r3, [sp, #20]
 801fd3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801fe10 <_vfiprintf_r+0x230>
 801fd3e:	7821      	ldrb	r1, [r4, #0]
 801fd40:	2203      	movs	r2, #3
 801fd42:	4650      	mov	r0, sl
 801fd44:	f7e0 faf4 	bl	8000330 <memchr>
 801fd48:	b138      	cbz	r0, 801fd5a <_vfiprintf_r+0x17a>
 801fd4a:	9b04      	ldr	r3, [sp, #16]
 801fd4c:	eba0 000a 	sub.w	r0, r0, sl
 801fd50:	2240      	movs	r2, #64	; 0x40
 801fd52:	4082      	lsls	r2, r0
 801fd54:	4313      	orrs	r3, r2
 801fd56:	3401      	adds	r4, #1
 801fd58:	9304      	str	r3, [sp, #16]
 801fd5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fd5e:	4829      	ldr	r0, [pc, #164]	; (801fe04 <_vfiprintf_r+0x224>)
 801fd60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fd64:	2206      	movs	r2, #6
 801fd66:	f7e0 fae3 	bl	8000330 <memchr>
 801fd6a:	2800      	cmp	r0, #0
 801fd6c:	d03f      	beq.n	801fdee <_vfiprintf_r+0x20e>
 801fd6e:	4b26      	ldr	r3, [pc, #152]	; (801fe08 <_vfiprintf_r+0x228>)
 801fd70:	bb1b      	cbnz	r3, 801fdba <_vfiprintf_r+0x1da>
 801fd72:	9b03      	ldr	r3, [sp, #12]
 801fd74:	3307      	adds	r3, #7
 801fd76:	f023 0307 	bic.w	r3, r3, #7
 801fd7a:	3308      	adds	r3, #8
 801fd7c:	9303      	str	r3, [sp, #12]
 801fd7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd80:	443b      	add	r3, r7
 801fd82:	9309      	str	r3, [sp, #36]	; 0x24
 801fd84:	e768      	b.n	801fc58 <_vfiprintf_r+0x78>
 801fd86:	fb0c 3202 	mla	r2, ip, r2, r3
 801fd8a:	460c      	mov	r4, r1
 801fd8c:	2001      	movs	r0, #1
 801fd8e:	e7a6      	b.n	801fcde <_vfiprintf_r+0xfe>
 801fd90:	2300      	movs	r3, #0
 801fd92:	3401      	adds	r4, #1
 801fd94:	9305      	str	r3, [sp, #20]
 801fd96:	4619      	mov	r1, r3
 801fd98:	f04f 0c0a 	mov.w	ip, #10
 801fd9c:	4620      	mov	r0, r4
 801fd9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fda2:	3a30      	subs	r2, #48	; 0x30
 801fda4:	2a09      	cmp	r2, #9
 801fda6:	d903      	bls.n	801fdb0 <_vfiprintf_r+0x1d0>
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	d0c6      	beq.n	801fd3a <_vfiprintf_r+0x15a>
 801fdac:	9105      	str	r1, [sp, #20]
 801fdae:	e7c4      	b.n	801fd3a <_vfiprintf_r+0x15a>
 801fdb0:	fb0c 2101 	mla	r1, ip, r1, r2
 801fdb4:	4604      	mov	r4, r0
 801fdb6:	2301      	movs	r3, #1
 801fdb8:	e7f0      	b.n	801fd9c <_vfiprintf_r+0x1bc>
 801fdba:	ab03      	add	r3, sp, #12
 801fdbc:	9300      	str	r3, [sp, #0]
 801fdbe:	462a      	mov	r2, r5
 801fdc0:	4b12      	ldr	r3, [pc, #72]	; (801fe0c <_vfiprintf_r+0x22c>)
 801fdc2:	a904      	add	r1, sp, #16
 801fdc4:	4630      	mov	r0, r6
 801fdc6:	f7fb faff 	bl	801b3c8 <_printf_float>
 801fdca:	4607      	mov	r7, r0
 801fdcc:	1c78      	adds	r0, r7, #1
 801fdce:	d1d6      	bne.n	801fd7e <_vfiprintf_r+0x19e>
 801fdd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fdd2:	07d9      	lsls	r1, r3, #31
 801fdd4:	d405      	bmi.n	801fde2 <_vfiprintf_r+0x202>
 801fdd6:	89ab      	ldrh	r3, [r5, #12]
 801fdd8:	059a      	lsls	r2, r3, #22
 801fdda:	d402      	bmi.n	801fde2 <_vfiprintf_r+0x202>
 801fddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fdde:	f7fc fa73 	bl	801c2c8 <__retarget_lock_release_recursive>
 801fde2:	89ab      	ldrh	r3, [r5, #12]
 801fde4:	065b      	lsls	r3, r3, #25
 801fde6:	f53f af1d 	bmi.w	801fc24 <_vfiprintf_r+0x44>
 801fdea:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fdec:	e71c      	b.n	801fc28 <_vfiprintf_r+0x48>
 801fdee:	ab03      	add	r3, sp, #12
 801fdf0:	9300      	str	r3, [sp, #0]
 801fdf2:	462a      	mov	r2, r5
 801fdf4:	4b05      	ldr	r3, [pc, #20]	; (801fe0c <_vfiprintf_r+0x22c>)
 801fdf6:	a904      	add	r1, sp, #16
 801fdf8:	4630      	mov	r0, r6
 801fdfa:	f7fb fd6d 	bl	801b8d8 <_printf_i>
 801fdfe:	e7e4      	b.n	801fdca <_vfiprintf_r+0x1ea>
 801fe00:	08020bf9 	.word	0x08020bf9
 801fe04:	08020c03 	.word	0x08020c03
 801fe08:	0801b3c9 	.word	0x0801b3c9
 801fe0c:	0801fbbd 	.word	0x0801fbbd
 801fe10:	08020bff 	.word	0x08020bff

0801fe14 <__swbuf_r>:
 801fe14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe16:	460e      	mov	r6, r1
 801fe18:	4614      	mov	r4, r2
 801fe1a:	4605      	mov	r5, r0
 801fe1c:	b118      	cbz	r0, 801fe26 <__swbuf_r+0x12>
 801fe1e:	6a03      	ldr	r3, [r0, #32]
 801fe20:	b90b      	cbnz	r3, 801fe26 <__swbuf_r+0x12>
 801fe22:	f7fc f90b 	bl	801c03c <__sinit>
 801fe26:	69a3      	ldr	r3, [r4, #24]
 801fe28:	60a3      	str	r3, [r4, #8]
 801fe2a:	89a3      	ldrh	r3, [r4, #12]
 801fe2c:	071a      	lsls	r2, r3, #28
 801fe2e:	d525      	bpl.n	801fe7c <__swbuf_r+0x68>
 801fe30:	6923      	ldr	r3, [r4, #16]
 801fe32:	b31b      	cbz	r3, 801fe7c <__swbuf_r+0x68>
 801fe34:	6823      	ldr	r3, [r4, #0]
 801fe36:	6922      	ldr	r2, [r4, #16]
 801fe38:	1a98      	subs	r0, r3, r2
 801fe3a:	6963      	ldr	r3, [r4, #20]
 801fe3c:	b2f6      	uxtb	r6, r6
 801fe3e:	4283      	cmp	r3, r0
 801fe40:	4637      	mov	r7, r6
 801fe42:	dc04      	bgt.n	801fe4e <__swbuf_r+0x3a>
 801fe44:	4621      	mov	r1, r4
 801fe46:	4628      	mov	r0, r5
 801fe48:	f7ff f950 	bl	801f0ec <_fflush_r>
 801fe4c:	b9e0      	cbnz	r0, 801fe88 <__swbuf_r+0x74>
 801fe4e:	68a3      	ldr	r3, [r4, #8]
 801fe50:	3b01      	subs	r3, #1
 801fe52:	60a3      	str	r3, [r4, #8]
 801fe54:	6823      	ldr	r3, [r4, #0]
 801fe56:	1c5a      	adds	r2, r3, #1
 801fe58:	6022      	str	r2, [r4, #0]
 801fe5a:	701e      	strb	r6, [r3, #0]
 801fe5c:	6962      	ldr	r2, [r4, #20]
 801fe5e:	1c43      	adds	r3, r0, #1
 801fe60:	429a      	cmp	r2, r3
 801fe62:	d004      	beq.n	801fe6e <__swbuf_r+0x5a>
 801fe64:	89a3      	ldrh	r3, [r4, #12]
 801fe66:	07db      	lsls	r3, r3, #31
 801fe68:	d506      	bpl.n	801fe78 <__swbuf_r+0x64>
 801fe6a:	2e0a      	cmp	r6, #10
 801fe6c:	d104      	bne.n	801fe78 <__swbuf_r+0x64>
 801fe6e:	4621      	mov	r1, r4
 801fe70:	4628      	mov	r0, r5
 801fe72:	f7ff f93b 	bl	801f0ec <_fflush_r>
 801fe76:	b938      	cbnz	r0, 801fe88 <__swbuf_r+0x74>
 801fe78:	4638      	mov	r0, r7
 801fe7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fe7c:	4621      	mov	r1, r4
 801fe7e:	4628      	mov	r0, r5
 801fe80:	f000 f806 	bl	801fe90 <__swsetup_r>
 801fe84:	2800      	cmp	r0, #0
 801fe86:	d0d5      	beq.n	801fe34 <__swbuf_r+0x20>
 801fe88:	f04f 37ff 	mov.w	r7, #4294967295
 801fe8c:	e7f4      	b.n	801fe78 <__swbuf_r+0x64>
	...

0801fe90 <__swsetup_r>:
 801fe90:	b538      	push	{r3, r4, r5, lr}
 801fe92:	4b2a      	ldr	r3, [pc, #168]	; (801ff3c <__swsetup_r+0xac>)
 801fe94:	4605      	mov	r5, r0
 801fe96:	6818      	ldr	r0, [r3, #0]
 801fe98:	460c      	mov	r4, r1
 801fe9a:	b118      	cbz	r0, 801fea4 <__swsetup_r+0x14>
 801fe9c:	6a03      	ldr	r3, [r0, #32]
 801fe9e:	b90b      	cbnz	r3, 801fea4 <__swsetup_r+0x14>
 801fea0:	f7fc f8cc 	bl	801c03c <__sinit>
 801fea4:	89a3      	ldrh	r3, [r4, #12]
 801fea6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801feaa:	0718      	lsls	r0, r3, #28
 801feac:	d422      	bmi.n	801fef4 <__swsetup_r+0x64>
 801feae:	06d9      	lsls	r1, r3, #27
 801feb0:	d407      	bmi.n	801fec2 <__swsetup_r+0x32>
 801feb2:	2309      	movs	r3, #9
 801feb4:	602b      	str	r3, [r5, #0]
 801feb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801feba:	81a3      	strh	r3, [r4, #12]
 801febc:	f04f 30ff 	mov.w	r0, #4294967295
 801fec0:	e034      	b.n	801ff2c <__swsetup_r+0x9c>
 801fec2:	0758      	lsls	r0, r3, #29
 801fec4:	d512      	bpl.n	801feec <__swsetup_r+0x5c>
 801fec6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fec8:	b141      	cbz	r1, 801fedc <__swsetup_r+0x4c>
 801feca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fece:	4299      	cmp	r1, r3
 801fed0:	d002      	beq.n	801fed8 <__swsetup_r+0x48>
 801fed2:	4628      	mov	r0, r5
 801fed4:	f7fd f80c 	bl	801cef0 <_free_r>
 801fed8:	2300      	movs	r3, #0
 801feda:	6363      	str	r3, [r4, #52]	; 0x34
 801fedc:	89a3      	ldrh	r3, [r4, #12]
 801fede:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fee2:	81a3      	strh	r3, [r4, #12]
 801fee4:	2300      	movs	r3, #0
 801fee6:	6063      	str	r3, [r4, #4]
 801fee8:	6923      	ldr	r3, [r4, #16]
 801feea:	6023      	str	r3, [r4, #0]
 801feec:	89a3      	ldrh	r3, [r4, #12]
 801feee:	f043 0308 	orr.w	r3, r3, #8
 801fef2:	81a3      	strh	r3, [r4, #12]
 801fef4:	6923      	ldr	r3, [r4, #16]
 801fef6:	b94b      	cbnz	r3, 801ff0c <__swsetup_r+0x7c>
 801fef8:	89a3      	ldrh	r3, [r4, #12]
 801fefa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fefe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ff02:	d003      	beq.n	801ff0c <__swsetup_r+0x7c>
 801ff04:	4621      	mov	r1, r4
 801ff06:	4628      	mov	r0, r5
 801ff08:	f000 f884 	bl	8020014 <__smakebuf_r>
 801ff0c:	89a0      	ldrh	r0, [r4, #12]
 801ff0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ff12:	f010 0301 	ands.w	r3, r0, #1
 801ff16:	d00a      	beq.n	801ff2e <__swsetup_r+0x9e>
 801ff18:	2300      	movs	r3, #0
 801ff1a:	60a3      	str	r3, [r4, #8]
 801ff1c:	6963      	ldr	r3, [r4, #20]
 801ff1e:	425b      	negs	r3, r3
 801ff20:	61a3      	str	r3, [r4, #24]
 801ff22:	6923      	ldr	r3, [r4, #16]
 801ff24:	b943      	cbnz	r3, 801ff38 <__swsetup_r+0xa8>
 801ff26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ff2a:	d1c4      	bne.n	801feb6 <__swsetup_r+0x26>
 801ff2c:	bd38      	pop	{r3, r4, r5, pc}
 801ff2e:	0781      	lsls	r1, r0, #30
 801ff30:	bf58      	it	pl
 801ff32:	6963      	ldrpl	r3, [r4, #20]
 801ff34:	60a3      	str	r3, [r4, #8]
 801ff36:	e7f4      	b.n	801ff22 <__swsetup_r+0x92>
 801ff38:	2000      	movs	r0, #0
 801ff3a:	e7f7      	b.n	801ff2c <__swsetup_r+0x9c>
 801ff3c:	24000258 	.word	0x24000258

0801ff40 <_raise_r>:
 801ff40:	291f      	cmp	r1, #31
 801ff42:	b538      	push	{r3, r4, r5, lr}
 801ff44:	4604      	mov	r4, r0
 801ff46:	460d      	mov	r5, r1
 801ff48:	d904      	bls.n	801ff54 <_raise_r+0x14>
 801ff4a:	2316      	movs	r3, #22
 801ff4c:	6003      	str	r3, [r0, #0]
 801ff4e:	f04f 30ff 	mov.w	r0, #4294967295
 801ff52:	bd38      	pop	{r3, r4, r5, pc}
 801ff54:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801ff56:	b112      	cbz	r2, 801ff5e <_raise_r+0x1e>
 801ff58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ff5c:	b94b      	cbnz	r3, 801ff72 <_raise_r+0x32>
 801ff5e:	4620      	mov	r0, r4
 801ff60:	f000 f830 	bl	801ffc4 <_getpid_r>
 801ff64:	462a      	mov	r2, r5
 801ff66:	4601      	mov	r1, r0
 801ff68:	4620      	mov	r0, r4
 801ff6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ff6e:	f000 b817 	b.w	801ffa0 <_kill_r>
 801ff72:	2b01      	cmp	r3, #1
 801ff74:	d00a      	beq.n	801ff8c <_raise_r+0x4c>
 801ff76:	1c59      	adds	r1, r3, #1
 801ff78:	d103      	bne.n	801ff82 <_raise_r+0x42>
 801ff7a:	2316      	movs	r3, #22
 801ff7c:	6003      	str	r3, [r0, #0]
 801ff7e:	2001      	movs	r0, #1
 801ff80:	e7e7      	b.n	801ff52 <_raise_r+0x12>
 801ff82:	2400      	movs	r4, #0
 801ff84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ff88:	4628      	mov	r0, r5
 801ff8a:	4798      	blx	r3
 801ff8c:	2000      	movs	r0, #0
 801ff8e:	e7e0      	b.n	801ff52 <_raise_r+0x12>

0801ff90 <raise>:
 801ff90:	4b02      	ldr	r3, [pc, #8]	; (801ff9c <raise+0xc>)
 801ff92:	4601      	mov	r1, r0
 801ff94:	6818      	ldr	r0, [r3, #0]
 801ff96:	f7ff bfd3 	b.w	801ff40 <_raise_r>
 801ff9a:	bf00      	nop
 801ff9c:	24000258 	.word	0x24000258

0801ffa0 <_kill_r>:
 801ffa0:	b538      	push	{r3, r4, r5, lr}
 801ffa2:	4d07      	ldr	r5, [pc, #28]	; (801ffc0 <_kill_r+0x20>)
 801ffa4:	2300      	movs	r3, #0
 801ffa6:	4604      	mov	r4, r0
 801ffa8:	4608      	mov	r0, r1
 801ffaa:	4611      	mov	r1, r2
 801ffac:	602b      	str	r3, [r5, #0]
 801ffae:	f7e3 ff37 	bl	8003e20 <_kill>
 801ffb2:	1c43      	adds	r3, r0, #1
 801ffb4:	d102      	bne.n	801ffbc <_kill_r+0x1c>
 801ffb6:	682b      	ldr	r3, [r5, #0]
 801ffb8:	b103      	cbz	r3, 801ffbc <_kill_r+0x1c>
 801ffba:	6023      	str	r3, [r4, #0]
 801ffbc:	bd38      	pop	{r3, r4, r5, pc}
 801ffbe:	bf00      	nop
 801ffc0:	24005dec 	.word	0x24005dec

0801ffc4 <_getpid_r>:
 801ffc4:	f7e3 bf24 	b.w	8003e10 <_getpid>

0801ffc8 <__swhatbuf_r>:
 801ffc8:	b570      	push	{r4, r5, r6, lr}
 801ffca:	460c      	mov	r4, r1
 801ffcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ffd0:	2900      	cmp	r1, #0
 801ffd2:	b096      	sub	sp, #88	; 0x58
 801ffd4:	4615      	mov	r5, r2
 801ffd6:	461e      	mov	r6, r3
 801ffd8:	da0d      	bge.n	801fff6 <__swhatbuf_r+0x2e>
 801ffda:	89a3      	ldrh	r3, [r4, #12]
 801ffdc:	f013 0f80 	tst.w	r3, #128	; 0x80
 801ffe0:	f04f 0100 	mov.w	r1, #0
 801ffe4:	bf0c      	ite	eq
 801ffe6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801ffea:	2340      	movne	r3, #64	; 0x40
 801ffec:	2000      	movs	r0, #0
 801ffee:	6031      	str	r1, [r6, #0]
 801fff0:	602b      	str	r3, [r5, #0]
 801fff2:	b016      	add	sp, #88	; 0x58
 801fff4:	bd70      	pop	{r4, r5, r6, pc}
 801fff6:	466a      	mov	r2, sp
 801fff8:	f000 f848 	bl	802008c <_fstat_r>
 801fffc:	2800      	cmp	r0, #0
 801fffe:	dbec      	blt.n	801ffda <__swhatbuf_r+0x12>
 8020000:	9901      	ldr	r1, [sp, #4]
 8020002:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8020006:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802000a:	4259      	negs	r1, r3
 802000c:	4159      	adcs	r1, r3
 802000e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020012:	e7eb      	b.n	801ffec <__swhatbuf_r+0x24>

08020014 <__smakebuf_r>:
 8020014:	898b      	ldrh	r3, [r1, #12]
 8020016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020018:	079d      	lsls	r5, r3, #30
 802001a:	4606      	mov	r6, r0
 802001c:	460c      	mov	r4, r1
 802001e:	d507      	bpl.n	8020030 <__smakebuf_r+0x1c>
 8020020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020024:	6023      	str	r3, [r4, #0]
 8020026:	6123      	str	r3, [r4, #16]
 8020028:	2301      	movs	r3, #1
 802002a:	6163      	str	r3, [r4, #20]
 802002c:	b002      	add	sp, #8
 802002e:	bd70      	pop	{r4, r5, r6, pc}
 8020030:	ab01      	add	r3, sp, #4
 8020032:	466a      	mov	r2, sp
 8020034:	f7ff ffc8 	bl	801ffc8 <__swhatbuf_r>
 8020038:	9900      	ldr	r1, [sp, #0]
 802003a:	4605      	mov	r5, r0
 802003c:	4630      	mov	r0, r6
 802003e:	f7fc ffcb 	bl	801cfd8 <_malloc_r>
 8020042:	b948      	cbnz	r0, 8020058 <__smakebuf_r+0x44>
 8020044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020048:	059a      	lsls	r2, r3, #22
 802004a:	d4ef      	bmi.n	802002c <__smakebuf_r+0x18>
 802004c:	f023 0303 	bic.w	r3, r3, #3
 8020050:	f043 0302 	orr.w	r3, r3, #2
 8020054:	81a3      	strh	r3, [r4, #12]
 8020056:	e7e3      	b.n	8020020 <__smakebuf_r+0xc>
 8020058:	89a3      	ldrh	r3, [r4, #12]
 802005a:	6020      	str	r0, [r4, #0]
 802005c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020060:	81a3      	strh	r3, [r4, #12]
 8020062:	9b00      	ldr	r3, [sp, #0]
 8020064:	6163      	str	r3, [r4, #20]
 8020066:	9b01      	ldr	r3, [sp, #4]
 8020068:	6120      	str	r0, [r4, #16]
 802006a:	b15b      	cbz	r3, 8020084 <__smakebuf_r+0x70>
 802006c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020070:	4630      	mov	r0, r6
 8020072:	f000 f81d 	bl	80200b0 <_isatty_r>
 8020076:	b128      	cbz	r0, 8020084 <__smakebuf_r+0x70>
 8020078:	89a3      	ldrh	r3, [r4, #12]
 802007a:	f023 0303 	bic.w	r3, r3, #3
 802007e:	f043 0301 	orr.w	r3, r3, #1
 8020082:	81a3      	strh	r3, [r4, #12]
 8020084:	89a3      	ldrh	r3, [r4, #12]
 8020086:	431d      	orrs	r5, r3
 8020088:	81a5      	strh	r5, [r4, #12]
 802008a:	e7cf      	b.n	802002c <__smakebuf_r+0x18>

0802008c <_fstat_r>:
 802008c:	b538      	push	{r3, r4, r5, lr}
 802008e:	4d07      	ldr	r5, [pc, #28]	; (80200ac <_fstat_r+0x20>)
 8020090:	2300      	movs	r3, #0
 8020092:	4604      	mov	r4, r0
 8020094:	4608      	mov	r0, r1
 8020096:	4611      	mov	r1, r2
 8020098:	602b      	str	r3, [r5, #0]
 802009a:	f7e3 ff20 	bl	8003ede <_fstat>
 802009e:	1c43      	adds	r3, r0, #1
 80200a0:	d102      	bne.n	80200a8 <_fstat_r+0x1c>
 80200a2:	682b      	ldr	r3, [r5, #0]
 80200a4:	b103      	cbz	r3, 80200a8 <_fstat_r+0x1c>
 80200a6:	6023      	str	r3, [r4, #0]
 80200a8:	bd38      	pop	{r3, r4, r5, pc}
 80200aa:	bf00      	nop
 80200ac:	24005dec 	.word	0x24005dec

080200b0 <_isatty_r>:
 80200b0:	b538      	push	{r3, r4, r5, lr}
 80200b2:	4d06      	ldr	r5, [pc, #24]	; (80200cc <_isatty_r+0x1c>)
 80200b4:	2300      	movs	r3, #0
 80200b6:	4604      	mov	r4, r0
 80200b8:	4608      	mov	r0, r1
 80200ba:	602b      	str	r3, [r5, #0]
 80200bc:	f7e3 ff1f 	bl	8003efe <_isatty>
 80200c0:	1c43      	adds	r3, r0, #1
 80200c2:	d102      	bne.n	80200ca <_isatty_r+0x1a>
 80200c4:	682b      	ldr	r3, [r5, #0]
 80200c6:	b103      	cbz	r3, 80200ca <_isatty_r+0x1a>
 80200c8:	6023      	str	r3, [r4, #0]
 80200ca:	bd38      	pop	{r3, r4, r5, pc}
 80200cc:	24005dec 	.word	0x24005dec

080200d0 <_init>:
 80200d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200d2:	bf00      	nop
 80200d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80200d6:	bc08      	pop	{r3}
 80200d8:	469e      	mov	lr, r3
 80200da:	4770      	bx	lr

080200dc <_fini>:
 80200dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200de:	bf00      	nop
 80200e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80200e2:	bc08      	pop	{r3}
 80200e4:	469e      	mov	lr, r3
 80200e6:	4770      	bx	lr
