
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f9f0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bcc  0801fcc0  0801fcc0  0002fcc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802088c  0802088c  0003088c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020894  08020894  00030894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020898  08020898  00030898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  24000000  0802089c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003368  240002c8  08020b64  000402c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24003630  08020b64  00043630  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000402c8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000402f6  2**0
                  CONTENTS, READONLY
 11 .debug_info   00037d1e  00000000  00000000  00040339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000659f  00000000  00000000  00078057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002db0  00000000  00000000  0007e5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000237c  00000000  00000000  000813a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000b5c0  00000000  00000000  00083724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003f2e8  00000000  00000000  0008ece4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017fe6e  00000000  00000000  000cdfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000dc94  00000000  00000000  0024de3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0025bad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002c8 	.word	0x240002c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801fca8 	.word	0x0801fca8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002cc 	.word	0x240002cc
 800030c:	0801fca8 	.word	0x0801fca8

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a8 	b.w	8000ac0 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9e08      	ldr	r6, [sp, #32]
 80007fe:	460d      	mov	r5, r1
 8000800:	4604      	mov	r4, r0
 8000802:	460f      	mov	r7, r1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d14a      	bne.n	800089e <__udivmoddi4+0xa6>
 8000808:	428a      	cmp	r2, r1
 800080a:	4694      	mov	ip, r2
 800080c:	d965      	bls.n	80008da <__udivmoddi4+0xe2>
 800080e:	fab2 f382 	clz	r3, r2
 8000812:	b143      	cbz	r3, 8000826 <__udivmoddi4+0x2e>
 8000814:	fa02 fc03 	lsl.w	ip, r2, r3
 8000818:	f1c3 0220 	rsb	r2, r3, #32
 800081c:	409f      	lsls	r7, r3
 800081e:	fa20 f202 	lsr.w	r2, r0, r2
 8000822:	4317      	orrs	r7, r2
 8000824:	409c      	lsls	r4, r3
 8000826:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800082a:	fa1f f58c 	uxth.w	r5, ip
 800082e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000832:	0c22      	lsrs	r2, r4, #16
 8000834:	fb0e 7711 	mls	r7, lr, r1, r7
 8000838:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800083c:	fb01 f005 	mul.w	r0, r1, r5
 8000840:	4290      	cmp	r0, r2
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x62>
 8000844:	eb1c 0202 	adds.w	r2, ip, r2
 8000848:	f101 37ff 	add.w	r7, r1, #4294967295
 800084c:	f080 811c 	bcs.w	8000a88 <__udivmoddi4+0x290>
 8000850:	4290      	cmp	r0, r2
 8000852:	f240 8119 	bls.w	8000a88 <__udivmoddi4+0x290>
 8000856:	3902      	subs	r1, #2
 8000858:	4462      	add	r2, ip
 800085a:	1a12      	subs	r2, r2, r0
 800085c:	b2a4      	uxth	r4, r4
 800085e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000862:	fb0e 2210 	mls	r2, lr, r0, r2
 8000866:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800086a:	fb00 f505 	mul.w	r5, r0, r5
 800086e:	42a5      	cmp	r5, r4
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x90>
 8000872:	eb1c 0404 	adds.w	r4, ip, r4
 8000876:	f100 32ff 	add.w	r2, r0, #4294967295
 800087a:	f080 8107 	bcs.w	8000a8c <__udivmoddi4+0x294>
 800087e:	42a5      	cmp	r5, r4
 8000880:	f240 8104 	bls.w	8000a8c <__udivmoddi4+0x294>
 8000884:	4464      	add	r4, ip
 8000886:	3802      	subs	r0, #2
 8000888:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800088c:	1b64      	subs	r4, r4, r5
 800088e:	2100      	movs	r1, #0
 8000890:	b11e      	cbz	r6, 800089a <__udivmoddi4+0xa2>
 8000892:	40dc      	lsrs	r4, r3
 8000894:	2300      	movs	r3, #0
 8000896:	e9c6 4300 	strd	r4, r3, [r6]
 800089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089e:	428b      	cmp	r3, r1
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0xbc>
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	f000 80ed 	beq.w	8000a82 <__udivmoddi4+0x28a>
 80008a8:	2100      	movs	r1, #0
 80008aa:	e9c6 0500 	strd	r0, r5, [r6]
 80008ae:	4608      	mov	r0, r1
 80008b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b4:	fab3 f183 	clz	r1, r3
 80008b8:	2900      	cmp	r1, #0
 80008ba:	d149      	bne.n	8000950 <__udivmoddi4+0x158>
 80008bc:	42ab      	cmp	r3, r5
 80008be:	d302      	bcc.n	80008c6 <__udivmoddi4+0xce>
 80008c0:	4282      	cmp	r2, r0
 80008c2:	f200 80f8 	bhi.w	8000ab6 <__udivmoddi4+0x2be>
 80008c6:	1a84      	subs	r4, r0, r2
 80008c8:	eb65 0203 	sbc.w	r2, r5, r3
 80008cc:	2001      	movs	r0, #1
 80008ce:	4617      	mov	r7, r2
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d0e2      	beq.n	800089a <__udivmoddi4+0xa2>
 80008d4:	e9c6 4700 	strd	r4, r7, [r6]
 80008d8:	e7df      	b.n	800089a <__udivmoddi4+0xa2>
 80008da:	b902      	cbnz	r2, 80008de <__udivmoddi4+0xe6>
 80008dc:	deff      	udf	#255	; 0xff
 80008de:	fab2 f382 	clz	r3, r2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 8090 	bne.w	8000a08 <__udivmoddi4+0x210>
 80008e8:	1a8a      	subs	r2, r1, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f fe8c 	uxth.w	lr, ip
 80008f2:	2101      	movs	r1, #1
 80008f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008f8:	fb07 2015 	mls	r0, r7, r5, r2
 80008fc:	0c22      	lsrs	r2, r4, #16
 80008fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000902:	fb0e f005 	mul.w	r0, lr, r5
 8000906:	4290      	cmp	r0, r2
 8000908:	d908      	bls.n	800091c <__udivmoddi4+0x124>
 800090a:	eb1c 0202 	adds.w	r2, ip, r2
 800090e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000912:	d202      	bcs.n	800091a <__udivmoddi4+0x122>
 8000914:	4290      	cmp	r0, r2
 8000916:	f200 80cb 	bhi.w	8000ab0 <__udivmoddi4+0x2b8>
 800091a:	4645      	mov	r5, r8
 800091c:	1a12      	subs	r2, r2, r0
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb2 f0f7 	udiv	r0, r2, r7
 8000924:	fb07 2210 	mls	r2, r7, r0, r2
 8000928:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092c:	fb0e fe00 	mul.w	lr, lr, r0
 8000930:	45a6      	cmp	lr, r4
 8000932:	d908      	bls.n	8000946 <__udivmoddi4+0x14e>
 8000934:	eb1c 0404 	adds.w	r4, ip, r4
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	d202      	bcs.n	8000944 <__udivmoddi4+0x14c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f200 80bb 	bhi.w	8000aba <__udivmoddi4+0x2c2>
 8000944:	4610      	mov	r0, r2
 8000946:	eba4 040e 	sub.w	r4, r4, lr
 800094a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800094e:	e79f      	b.n	8000890 <__udivmoddi4+0x98>
 8000950:	f1c1 0720 	rsb	r7, r1, #32
 8000954:	408b      	lsls	r3, r1
 8000956:	fa22 fc07 	lsr.w	ip, r2, r7
 800095a:	ea4c 0c03 	orr.w	ip, ip, r3
 800095e:	fa05 f401 	lsl.w	r4, r5, r1
 8000962:	fa20 f307 	lsr.w	r3, r0, r7
 8000966:	40fd      	lsrs	r5, r7
 8000968:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800096c:	4323      	orrs	r3, r4
 800096e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	fb09 5518 	mls	r5, r9, r8, r5
 800097a:	0c1c      	lsrs	r4, r3, #16
 800097c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000980:	fb08 f50e 	mul.w	r5, r8, lr
 8000984:	42a5      	cmp	r5, r4
 8000986:	fa02 f201 	lsl.w	r2, r2, r1
 800098a:	fa00 f001 	lsl.w	r0, r0, r1
 800098e:	d90b      	bls.n	80009a8 <__udivmoddi4+0x1b0>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f108 3aff 	add.w	sl, r8, #4294967295
 8000998:	f080 8088 	bcs.w	8000aac <__udivmoddi4+0x2b4>
 800099c:	42a5      	cmp	r5, r4
 800099e:	f240 8085 	bls.w	8000aac <__udivmoddi4+0x2b4>
 80009a2:	f1a8 0802 	sub.w	r8, r8, #2
 80009a6:	4464      	add	r4, ip
 80009a8:	1b64      	subs	r4, r4, r5
 80009aa:	b29d      	uxth	r5, r3
 80009ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80009b0:	fb09 4413 	mls	r4, r9, r3, r4
 80009b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80009bc:	45a6      	cmp	lr, r4
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x1da>
 80009c0:	eb1c 0404 	adds.w	r4, ip, r4
 80009c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009c8:	d26c      	bcs.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ca:	45a6      	cmp	lr, r4
 80009cc:	d96a      	bls.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ce:	3b02      	subs	r3, #2
 80009d0:	4464      	add	r4, ip
 80009d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009d6:	fba3 9502 	umull	r9, r5, r3, r2
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	42ac      	cmp	r4, r5
 80009e0:	46c8      	mov	r8, r9
 80009e2:	46ae      	mov	lr, r5
 80009e4:	d356      	bcc.n	8000a94 <__udivmoddi4+0x29c>
 80009e6:	d053      	beq.n	8000a90 <__udivmoddi4+0x298>
 80009e8:	b156      	cbz	r6, 8000a00 <__udivmoddi4+0x208>
 80009ea:	ebb0 0208 	subs.w	r2, r0, r8
 80009ee:	eb64 040e 	sbc.w	r4, r4, lr
 80009f2:	fa04 f707 	lsl.w	r7, r4, r7
 80009f6:	40ca      	lsrs	r2, r1
 80009f8:	40cc      	lsrs	r4, r1
 80009fa:	4317      	orrs	r7, r2
 80009fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000a00:	4618      	mov	r0, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	f1c3 0120 	rsb	r1, r3, #32
 8000a0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a10:	fa20 f201 	lsr.w	r2, r0, r1
 8000a14:	fa25 f101 	lsr.w	r1, r5, r1
 8000a18:	409d      	lsls	r5, r3
 8000a1a:	432a      	orrs	r2, r5
 8000a1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a20:	fa1f fe8c 	uxth.w	lr, ip
 8000a24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a28:	fb07 1510 	mls	r5, r7, r0, r1
 8000a2c:	0c11      	lsrs	r1, r2, #16
 8000a2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a32:	fb00 f50e 	mul.w	r5, r0, lr
 8000a36:	428d      	cmp	r5, r1
 8000a38:	fa04 f403 	lsl.w	r4, r4, r3
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x258>
 8000a3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a46:	d22f      	bcs.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a48:	428d      	cmp	r5, r1
 8000a4a:	d92d      	bls.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	4461      	add	r1, ip
 8000a50:	1b49      	subs	r1, r1, r5
 8000a52:	b292      	uxth	r2, r2
 8000a54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a58:	fb07 1115 	mls	r1, r7, r5, r1
 8000a5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a60:	fb05 f10e 	mul.w	r1, r5, lr
 8000a64:	4291      	cmp	r1, r2
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x282>
 8000a68:	eb1c 0202 	adds.w	r2, ip, r2
 8000a6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a70:	d216      	bcs.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a72:	4291      	cmp	r1, r2
 8000a74:	d914      	bls.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a76:	3d02      	subs	r5, #2
 8000a78:	4462      	add	r2, ip
 8000a7a:	1a52      	subs	r2, r2, r1
 8000a7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a80:	e738      	b.n	80008f4 <__udivmoddi4+0xfc>
 8000a82:	4631      	mov	r1, r6
 8000a84:	4630      	mov	r0, r6
 8000a86:	e708      	b.n	800089a <__udivmoddi4+0xa2>
 8000a88:	4639      	mov	r1, r7
 8000a8a:	e6e6      	b.n	800085a <__udivmoddi4+0x62>
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	e6fb      	b.n	8000888 <__udivmoddi4+0x90>
 8000a90:	4548      	cmp	r0, r9
 8000a92:	d2a9      	bcs.n	80009e8 <__udivmoddi4+0x1f0>
 8000a94:	ebb9 0802 	subs.w	r8, r9, r2
 8000a98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	e7a3      	b.n	80009e8 <__udivmoddi4+0x1f0>
 8000aa0:	4645      	mov	r5, r8
 8000aa2:	e7ea      	b.n	8000a7a <__udivmoddi4+0x282>
 8000aa4:	462b      	mov	r3, r5
 8000aa6:	e794      	b.n	80009d2 <__udivmoddi4+0x1da>
 8000aa8:	4640      	mov	r0, r8
 8000aaa:	e7d1      	b.n	8000a50 <__udivmoddi4+0x258>
 8000aac:	46d0      	mov	r8, sl
 8000aae:	e77b      	b.n	80009a8 <__udivmoddi4+0x1b0>
 8000ab0:	3d02      	subs	r5, #2
 8000ab2:	4462      	add	r2, ip
 8000ab4:	e732      	b.n	800091c <__udivmoddi4+0x124>
 8000ab6:	4608      	mov	r0, r1
 8000ab8:	e70a      	b.n	80008d0 <__udivmoddi4+0xd8>
 8000aba:	4464      	add	r4, ip
 8000abc:	3802      	subs	r0, #2
 8000abe:	e742      	b.n	8000946 <__udivmoddi4+0x14e>

08000ac0 <__aeabi_idiv0>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <setServo>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;

void setServo(int servoNum, float angle) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal = (int) (3000 + (4000 * (angle / 100)));
 8000ad0:	ed97 7a00 	vldr	s14, [r7]
 8000ad4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000b44 <setServo+0x80>
 8000ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000adc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000b48 <setServo+0x84>
 8000ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ae4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000b4c <setServo+0x88>
 8000ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000af0:	ee17 3a90 	vmov	r3, s15
 8000af4:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d81a      	bhi.n	8000b34 <setServo+0x70>
 8000afe:	a201      	add	r2, pc, #4	; (adr r2, 8000b04 <setServo+0x40>)
 8000b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b04:	08000b15 	.word	0x08000b15
 8000b08:	08000b1d 	.word	0x08000b1d
 8000b0c:	08000b25 	.word	0x08000b25
 8000b10:	08000b2d 	.word	0x08000b2d
	case 1:
		TIM4->CCR4 = timerVal;
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <setServo+0x8c>)
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000b1a:	e00c      	b.n	8000b36 <setServo+0x72>
	case 2:
		TIM4->CCR3 = timerVal;
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <setServo+0x8c>)
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000b22:	e008      	b.n	8000b36 <setServo+0x72>
	case 3:
		TIM4->CCR2 = timerVal;
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <setServo+0x8c>)
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000b2a:	e004      	b.n	8000b36 <setServo+0x72>
	case 4:
		TIM4->CCR1 = timerVal;
 8000b2c:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <setServo+0x8c>)
 8000b2e:	89fb      	ldrh	r3, [r7, #14]
 8000b30:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8000b32:	e000      	b.n	8000b36 <setServo+0x72>

	default:
		break;
 8000b34:	bf00      	nop
	}
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	42c80000 	.word	0x42c80000
 8000b48:	457a0000 	.word	0x457a0000
 8000b4c:	453b8000 	.word	0x453b8000
 8000b50:	40000800 	.word	0x40000800

08000b54 <setLEDs>:

void setLEDs(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8000b5e:	e181      	b.n	8000e64 <setLEDs+0x310>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000b60:	4aa1      	ldr	r2, [pc, #644]	; (8000de8 <setLEDs+0x294>)
 8000b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	f200 8177 	bhi.w	8000e5c <setLEDs+0x308>
 8000b6e:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <setLEDs+0x20>)
 8000b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b74:	08000b85 	.word	0x08000b85
 8000b78:	08000c35 	.word	0x08000c35
 8000b7c:	08000ce5 	.word	0x08000ce5
 8000b80:	08000d95 	.word	0x08000d95
		case 0:
			for (int j = 0; j < 3; j++) {
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
 8000b88:	e042      	b.n	8000c10 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b8e:	e039      	b.n	8000c04 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b90:	4996      	ldr	r1, [pc, #600]	; (8000dec <setLEDs+0x298>)
 8000b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b9c:	4413      	add	r3, r2
 8000b9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ba6:	fa41 f202 	asr.w	r2, r1, r2
 8000baa:	4013      	ands	r3, r2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d013      	beq.n	8000bd8 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb2:	00da      	lsls	r2, r3, #3
 8000bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb6:	18d1      	adds	r1, r2, r3
 8000bb8:	4a8b      	ldr	r2, [pc, #556]	; (8000de8 <setLEDs+0x294>)
 8000bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	440b      	add	r3, r1
								+ 8] = 60;
 8000bcc:	3308      	adds	r3, #8
 8000bce:	4a88      	ldr	r2, [pc, #544]	; (8000df0 <setLEDs+0x29c>)
 8000bd0:	213c      	movs	r1, #60	; 0x3c
 8000bd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bd6:	e012      	b.n	8000bfe <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bda:	00da      	lsls	r2, r3, #3
 8000bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bde:	18d1      	adds	r1, r2, r3
 8000be0:	4a81      	ldr	r2, [pc, #516]	; (8000de8 <setLEDs+0x294>)
 8000be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	4413      	add	r3, r2
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	440b      	add	r3, r1
								+ 8] = 30;
 8000bf4:	3308      	adds	r3, #8
 8000bf6:	4a7e      	ldr	r2, [pc, #504]	; (8000df0 <setLEDs+0x29c>)
 8000bf8:	211e      	movs	r1, #30
 8000bfa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c00:	3301      	adds	r3, #1
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c06:	2b07      	cmp	r3, #7
 8000c08:	ddc2      	ble.n	8000b90 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8000c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	ddb9      	ble.n	8000b8a <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c1a:	e007      	b.n	8000c2c <setLEDs+0xd8>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8000c1c:	4a74      	ldr	r2, [pc, #464]	; (8000df0 <setLEDs+0x29c>)
 8000c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c20:	2100      	movs	r1, #0
 8000c22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c28:	3301      	adds	r3, #1
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2e:	2bb1      	cmp	r3, #177	; 0xb1
 8000c30:	ddf4      	ble.n	8000c1c <setLEDs+0xc8>
			}
			break;
 8000c32:	e114      	b.n	8000e5e <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
 8000c38:	e042      	b.n	8000cc0 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
 8000c3e:	e039      	b.n	8000cb4 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000c40:	496a      	ldr	r1, [pc, #424]	; (8000dec <setLEDs+0x298>)
 8000c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c4c:	4413      	add	r3, r2
 8000c4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	6a3a      	ldr	r2, [r7, #32]
 8000c56:	fa41 f202 	asr.w	r2, r1, r2
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d013      	beq.n	8000c88 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	00da      	lsls	r2, r3, #3
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	18d1      	adds	r1, r2, r3
 8000c68:	4a5f      	ldr	r2, [pc, #380]	; (8000de8 <setLEDs+0x294>)
 8000c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	4413      	add	r3, r2
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	4413      	add	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	440b      	add	r3, r1
								+ 8] = 60;
 8000c7c:	3308      	adds	r3, #8
 8000c7e:	4a5d      	ldr	r2, [pc, #372]	; (8000df4 <setLEDs+0x2a0>)
 8000c80:	213c      	movs	r1, #60	; 0x3c
 8000c82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c86:	e012      	b.n	8000cae <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	00da      	lsls	r2, r3, #3
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	18d1      	adds	r1, r2, r3
 8000c90:	4a55      	ldr	r2, [pc, #340]	; (8000de8 <setLEDs+0x294>)
 8000c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	4413      	add	r3, r2
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	440b      	add	r3, r1
								+ 8] = 30;
 8000ca4:	3308      	adds	r3, #8
 8000ca6:	4a53      	ldr	r2, [pc, #332]	; (8000df4 <setLEDs+0x2a0>)
 8000ca8:	211e      	movs	r1, #30
 8000caa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	623b      	str	r3, [r7, #32]
 8000cb4:	6a3b      	ldr	r3, [r7, #32]
 8000cb6:	2b07      	cmp	r3, #7
 8000cb8:	ddc2      	ble.n	8000c40 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	ddb9      	ble.n	8000c3a <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	e007      	b.n	8000cdc <setLEDs+0x188>
					i++) {
				LED_PWM_Data_1[i] = 0;
 8000ccc:	4a49      	ldr	r2, [pc, #292]	; (8000df4 <setLEDs+0x2a0>)
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	61fb      	str	r3, [r7, #28]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	2bb1      	cmp	r3, #177	; 0xb1
 8000ce0:	ddf4      	ble.n	8000ccc <setLEDs+0x178>
			}
			break;
 8000ce2:	e0bc      	b.n	8000e5e <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	e042      	b.n	8000d70 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e039      	b.n	8000d64 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000cf0:	493e      	ldr	r1, [pc, #248]	; (8000dec <setLEDs+0x298>)
 8000cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	fa41 f202 	asr.w	r2, r1, r2
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d013      	beq.n	8000d38 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	00da      	lsls	r2, r3, #3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	18d1      	adds	r1, r2, r3
 8000d18:	4a33      	ldr	r2, [pc, #204]	; (8000de8 <setLEDs+0x294>)
 8000d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	4413      	add	r3, r2
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	440b      	add	r3, r1
								+ 8] = 60;
 8000d2c:	3308      	adds	r3, #8
 8000d2e:	4a32      	ldr	r2, [pc, #200]	; (8000df8 <setLEDs+0x2a4>)
 8000d30:	213c      	movs	r1, #60	; 0x3c
 8000d32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d36:	e012      	b.n	8000d5e <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	00da      	lsls	r2, r3, #3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	18d1      	adds	r1, r2, r3
 8000d40:	4a29      	ldr	r2, [pc, #164]	; (8000de8 <setLEDs+0x294>)
 8000d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4413      	add	r3, r2
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4413      	add	r3, r2
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	440b      	add	r3, r1
								+ 8] = 30;
 8000d54:	3308      	adds	r3, #8
 8000d56:	4a28      	ldr	r2, [pc, #160]	; (8000df8 <setLEDs+0x2a4>)
 8000d58:	211e      	movs	r1, #30
 8000d5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	ddc2      	ble.n	8000cf0 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	ddb9      	ble.n	8000cea <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d76:	2338      	movs	r3, #56	; 0x38
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	e007      	b.n	8000d8c <setLEDs+0x238>
					i++) {
				LED_PWM_Data_2[i] = 0;
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <setLEDs+0x2a4>)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	2100      	movs	r1, #0
 8000d82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	2b69      	cmp	r3, #105	; 0x69
 8000d90:	ddf4      	ble.n	8000d7c <setLEDs+0x228>
			}
			break;
 8000d92:	e064      	b.n	8000e5e <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	e04e      	b.n	8000e38 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	e045      	b.n	8000e2c <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000da0:	4912      	ldr	r1, [pc, #72]	; (8000dec <setLEDs+0x298>)
 8000da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4413      	add	r3, r2
 8000dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000db2:	2180      	movs	r1, #128	; 0x80
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	fa41 f202 	asr.w	r2, r1, r2
 8000dba:	4013      	ands	r3, r2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d01f      	beq.n	8000e00 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	00da      	lsls	r2, r3, #3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	18d1      	adds	r1, r2, r3
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <setLEDs+0x294>)
 8000dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4413      	add	r3, r2
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	440b      	add	r3, r1
								+ 8] = 60;
 8000ddc:	3308      	adds	r3, #8
 8000dde:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <setLEDs+0x2a8>)
 8000de0:	213c      	movs	r1, #60	; 0x3c
 8000de2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000de6:	e01e      	b.n	8000e26 <setLEDs+0x2d2>
 8000de8:	0801ff40 	.word	0x0801ff40
 8000dec:	24000bc4 	.word	0x24000bc4
 8000df0:	240002e4 	.word	0x240002e4
 8000df4:	240005ac 	.word	0x240005ac
 8000df8:	24000874 	.word	0x24000874
 8000dfc:	24000a1c 	.word	0x24000a1c
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	00da      	lsls	r2, r3, #3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	18d1      	adds	r1, r2, r3
 8000e08:	4a26      	ldr	r2, [pc, #152]	; (8000ea4 <setLEDs+0x350>)
 8000e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	4413      	add	r3, r2
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	440b      	add	r3, r1
								+ 8] = 30;
 8000e1c:	3308      	adds	r3, #8
 8000e1e:	4a22      	ldr	r2, [pc, #136]	; (8000ea8 <setLEDs+0x354>)
 8000e20:	211e      	movs	r1, #30
 8000e22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	2b07      	cmp	r3, #7
 8000e30:	ddb6      	ble.n	8000da0 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	3301      	adds	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	ddad      	ble.n	8000d9a <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e3e:	2338      	movs	r3, #56	; 0x38
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	e007      	b.n	8000e54 <setLEDs+0x300>
					i++) {
				LED_PWM_Data_3[i] = 0;
 8000e44:	4a18      	ldr	r2, [pc, #96]	; (8000ea8 <setLEDs+0x354>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3301      	adds	r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b69      	cmp	r3, #105	; 0x69
 8000e58:	ddf4      	ble.n	8000e44 <setLEDs+0x2f0>
			}
			break;
 8000e5a:	e000      	b.n	8000e5e <setLEDs+0x30a>
		default:
			break;
 8000e5c:	bf00      	nop
			i++) {
 8000e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e60:	3301      	adds	r3, #1
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e66:	2b0d      	cmp	r3, #13
 8000e68:	f77f ae7a 	ble.w	8000b60 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 8000e6c:	23b2      	movs	r3, #178	; 0xb2
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <setLEDs+0x358>)
 8000e70:	210c      	movs	r1, #12
 8000e72:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <setLEDs+0x35c>)
 8000e74:	f00f fc3a 	bl	80106ec <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 8000e78:	23b2      	movs	r3, #178	; 0xb2
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <setLEDs+0x360>)
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <setLEDs+0x364>)
 8000e80:	f00f fc34 	bl	80106ec <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 8000e84:	236a      	movs	r3, #106	; 0x6a
 8000e86:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <setLEDs+0x368>)
 8000e88:	2104      	movs	r1, #4
 8000e8a:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <setLEDs+0x36c>)
 8000e8c:	f00f fc2e 	bl	80106ec <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 8000e90:	236a      	movs	r3, #106	; 0x6a
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <setLEDs+0x354>)
 8000e94:	2100      	movs	r1, #0
 8000e96:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <setLEDs+0x36c>)
 8000e98:	f00f fc28 	bl	80106ec <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 8000e9c:	bf00      	nop
 8000e9e:	3738      	adds	r7, #56	; 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	0801ff40 	.word	0x0801ff40
 8000ea8:	24000a1c 	.word	0x24000a1c
 8000eac:	240002e4 	.word	0x240002e4
 8000eb0:	24001228 	.word	0x24001228
 8000eb4:	240005ac 	.word	0x240005ac
 8000eb8:	24001144 	.word	0x24001144
 8000ebc:	24000874 	.word	0x24000874
 8000ec0:	24001190 	.word	0x24001190

08000ec4 <LoRA_Read_Register>:
	} else {
		return normalized - LENGTH * 2 / 3;
	}
}

uint8_t LoRA_Read_Register(uint8_t addr) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <LoRA_Read_Register+0x48>)
 8000ed6:	f008 f82d 	bl	8008f34 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000eda:	1df9      	adds	r1, r7, #7
 8000edc:	2364      	movs	r3, #100	; 0x64
 8000ede:	2201      	movs	r2, #1
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <LoRA_Read_Register+0x4c>)
 8000ee2:	f00e fdc3 	bl	800fa6c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000ee6:	f107 010f 	add.w	r1, r7, #15
 8000eea:	2364      	movs	r3, #100	; 0x64
 8000eec:	2201      	movs	r2, #1
 8000eee:	4808      	ldr	r0, [pc, #32]	; (8000f10 <LoRA_Read_Register+0x4c>)
 8000ef0:	f00e ffb8 	bl	800fe64 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000efa:	4804      	ldr	r0, [pc, #16]	; (8000f0c <LoRA_Read_Register+0x48>)
 8000efc:	f008 f81a 	bl	8008f34 <HAL_GPIO_WritePin>

	return reg_value;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	58020000 	.word	0x58020000
 8000f10:	240010bc 	.word	0x240010bc

08000f14 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	71bb      	strb	r3, [r7, #6]
	addr |= (1 << 7);
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f34:	480c      	ldr	r0, [pc, #48]	; (8000f68 <LoRA_Write_Register+0x54>)
 8000f36:	f007 fffd 	bl	8008f34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000f3a:	1df9      	adds	r1, r7, #7
 8000f3c:	2364      	movs	r3, #100	; 0x64
 8000f3e:	2201      	movs	r2, #1
 8000f40:	480a      	ldr	r0, [pc, #40]	; (8000f6c <LoRA_Write_Register+0x58>)
 8000f42:	f00e fd93 	bl	800fa6c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000f46:	1db9      	adds	r1, r7, #6
 8000f48:	2364      	movs	r3, #100	; 0x64
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <LoRA_Write_Register+0x58>)
 8000f4e:	f00e fd8d 	bl	800fa6c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <LoRA_Write_Register+0x54>)
 8000f5a:	f007 ffeb 	bl	8008f34 <HAL_GPIO_WritePin>

}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	58020000 	.word	0x58020000
 8000f6c:	240010bc 	.word	0x240010bc

08000f70 <LoRA_sleep>:

void LoRA_sleep(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff ffcc 	bl	8000f14 <LoRA_Write_Register>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency) {
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t) frequency << 19) / 32000000;
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	17c8      	asrs	r0, r1, #31
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	4603      	mov	r3, r0
 8000f90:	1355      	asrs	r5, r2, #13
 8000f92:	04d4      	lsls	r4, r2, #19
 8000f94:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <LoRA_set_frequency+0x78>)
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	f7ff fbdb 	bl	8000758 <__aeabi_uldivmod>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t) (frf >> 16));
 8000faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	0c02      	lsrs	r2, r0, #16
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	0c0b      	lsrs	r3, r1, #16
 8000fbe:	b2d3      	uxtb	r3, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	2006      	movs	r0, #6
 8000fc4:	f7ff ffa6 	bl	8000f14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t) (frf >> 8));
 8000fc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	0a02      	lsrs	r2, r0, #8
 8000fd6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000fda:	0a0b      	lsrs	r3, r1, #8
 8000fdc:	b2d3      	uxtb	r3, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	2007      	movs	r0, #7
 8000fe2:	f7ff ff97 	bl	8000f14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t) (frf >> 0));
 8000fe6:	7a3b      	ldrb	r3, [r7, #8]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2008      	movs	r0, #8
 8000fec:	f7ff ff92 	bl	8000f14 <LoRA_Write_Register>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff8:	01e84800 	.word	0x01e84800

08000ffc <LoRA_setOCP>:

void LoRA_idle() {
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
}

void LoRA_setOCP(uint8_t mA) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	uint8_t ocpTrim = 27;
 8001006:	231b      	movs	r3, #27
 8001008:	73fb      	strb	r3, [r7, #15]

	if (mA <= 120) {
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b78      	cmp	r3, #120	; 0x78
 800100e:	d809      	bhi.n	8001024 <LoRA_setOCP+0x28>
		ocpTrim = (mA - 45) / 5;
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	3b2d      	subs	r3, #45	; 0x2d
 8001014:	4a11      	ldr	r2, [pc, #68]	; (800105c <LoRA_setOCP+0x60>)
 8001016:	fb82 1203 	smull	r1, r2, r2, r3
 800101a:	1052      	asrs	r2, r2, #1
 800101c:	17db      	asrs	r3, r3, #31
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e00b      	b.n	800103c <LoRA_setOCP+0x40>
	} else if (mA <= 240) {
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2bf0      	cmp	r3, #240	; 0xf0
 8001028:	d808      	bhi.n	800103c <LoRA_setOCP+0x40>
		ocpTrim = (mA + 30) / 10;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	331e      	adds	r3, #30
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <LoRA_setOCP+0x60>)
 8001030:	fb82 1203 	smull	r1, r2, r2, r3
 8001034:	1092      	asrs	r2, r2, #2
 8001036:	17db      	asrs	r3, r3, #31
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	73fb      	strb	r3, [r7, #15]
	}

	LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	b2db      	uxtb	r3, r3
 8001044:	f043 0320 	orr.w	r3, r3, #32
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4619      	mov	r1, r3
 800104c:	200b      	movs	r0, #11
 800104e:	f7ff ff61 	bl	8000f14 <LoRA_Write_Register>
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	66666667 	.word	0x66666667

08001060 <LoRA_setTxPower>:

void LoRA_setTxPower(int level) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	// PA BOOST
	if (level > 17) {
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b11      	cmp	r3, #17
 800106c:	dd0f      	ble.n	800108e <LoRA_setTxPower+0x2e>
		if (level > 20) {
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b14      	cmp	r3, #20
 8001072:	dd01      	ble.n	8001078 <LoRA_setTxPower+0x18>
			level = 20;
 8001074:	2314      	movs	r3, #20
 8001076:	607b      	str	r3, [r7, #4]
		}

		// subtract 3 from level, so 18 - 20 maps to 15 - 17
		level -= 3;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b03      	subs	r3, #3
 800107c:	607b      	str	r3, [r7, #4]

		// High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
		LoRA_Write_Register(REG_PA_DAC, 0x87);
 800107e:	2187      	movs	r1, #135	; 0x87
 8001080:	204d      	movs	r0, #77	; 0x4d
 8001082:	f7ff ff47 	bl	8000f14 <LoRA_Write_Register>
		LoRA_setOCP(140);
 8001086:	208c      	movs	r0, #140	; 0x8c
 8001088:	f7ff ffb8 	bl	8000ffc <LoRA_setOCP>
 800108c:	e00b      	b.n	80010a6 <LoRA_setTxPower+0x46>
	} else {
		if (level < 2) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b01      	cmp	r3, #1
 8001092:	dc01      	bgt.n	8001098 <LoRA_setTxPower+0x38>
			level = 2;
 8001094:	2302      	movs	r3, #2
 8001096:	607b      	str	r3, [r7, #4]
		}
		//Default value PA_HF/LF or +17dBm
		LoRA_Write_Register(REG_PA_DAC, 0x84);
 8001098:	2184      	movs	r1, #132	; 0x84
 800109a:	204d      	movs	r0, #77	; 0x4d
 800109c:	f7ff ff3a 	bl	8000f14 <LoRA_Write_Register>
		LoRA_setOCP(100);
 80010a0:	2064      	movs	r0, #100	; 0x64
 80010a2:	f7ff ffab 	bl	8000ffc <LoRA_setOCP>
	}

	LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	3b02      	subs	r3, #2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4619      	mov	r1, r3
 80010ba:	2009      	movs	r0, #9
 80010bc:	f7ff ff2a 	bl	8000f14 <LoRA_Write_Register>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode() {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
			LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 80010cc:	201d      	movs	r0, #29
 80010ce:	f7ff fef9 	bl	8000ec4 <LoRA_Read_Register>
 80010d2:	4603      	mov	r3, r0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
 80010d4:	f023 0301 	bic.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	201d      	movs	r0, #29
 80010de:	f7ff ff19 	bl	8000f14 <LoRA_Write_Register>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <LoRA_begin>:

void LoRA_begin(long frequency) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2101      	movs	r1, #1
 80010f4:	4818      	ldr	r0, [pc, #96]	; (8001158 <LoRA_begin+0x70>)
 80010f6:	f007 ff1d 	bl	8008f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80010fa:	2201      	movs	r2, #1
 80010fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001100:	4816      	ldr	r0, [pc, #88]	; (800115c <LoRA_begin+0x74>)
 8001102:	f007 ff17 	bl	8008f34 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8001106:	2042      	movs	r0, #66	; 0x42
 8001108:	f7ff fedc 	bl	8000ec4 <LoRA_Read_Register>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]

	LoRA_sleep();
 8001110:	f7ff ff2e 	bl	8000f70 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8001114:	4812      	ldr	r0, [pc, #72]	; (8001160 <LoRA_begin+0x78>)
 8001116:	f7ff ff33 	bl	8000f80 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 800111a:	2100      	movs	r1, #0
 800111c:	200f      	movs	r0, #15
 800111e:	f7ff fef9 	bl	8000f14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8001122:	2100      	movs	r1, #0
 8001124:	200e      	movs	r0, #14
 8001126:	f7ff fef5 	bl	8000f14 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 800112a:	200c      	movs	r0, #12
 800112c:	f7ff feca 	bl	8000ec4 <LoRA_Read_Register>
 8001130:	4603      	mov	r3, r0
 8001132:	f043 0303 	orr.w	r3, r3, #3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4619      	mov	r1, r3
 800113a:	200c      	movs	r0, #12
 800113c:	f7ff feea 	bl	8000f14 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8001140:	2104      	movs	r1, #4
 8001142:	2026      	movs	r0, #38	; 0x26
 8001144:	f7ff fee6 	bl	8000f14 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8001148:	2011      	movs	r0, #17
 800114a:	f7ff ff89 	bl	8001060 <LoRA_setTxPower>

}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	58020c00 	.word	0x58020c00
 800115c:	58020000 	.word	0x58020000
 8001160:	33bca100 	.word	0x33bca100

08001164 <LoRA_beginPacket>:

void LoRA_beginPacket() {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8001168:	f7ff ffae 	bl	80010c8 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800116c:	2100      	movs	r1, #0
 800116e:	200d      	movs	r0, #13
 8001170:	f7ff fed0 	bl	8000f14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8001174:	2100      	movs	r1, #0
 8001176:	2022      	movs	r0, #34	; 0x22
 8001178:	f7ff fecc 	bl	8000f14 <LoRA_Write_Register>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001184:	2183      	movs	r1, #131	; 0x83
 8001186:	2001      	movs	r0, #1
 8001188:	f7ff fec4 	bl	8000f14 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 800118c:	bf00      	nop
 800118e:	2012      	movs	r0, #18
 8001190:	f7ff fe98 	bl	8000ec4 <LoRA_Read_Register>
 8001194:	4603      	mov	r3, r0
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f7      	beq.n	800118e <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800119e:	2185      	movs	r1, #133	; 0x85
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff feb7 	bl	8000f14 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80011a6:	2108      	movs	r1, #8
 80011a8:	2012      	movs	r0, #18
 80011aa:	f7ff feb3 	bl	8000f14 <LoRA_Write_Register>

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80011bc:	2012      	movs	r0, #18
 80011be:	f7ff fe81 	bl	8000ec4 <LoRA_Read_Register>
 80011c2:	4603      	mov	r3, r0
 80011c4:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 80011c6:	f7ff ff7f 	bl	80010c8 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	2012      	movs	r0, #18
 80011d2:	f7ff fe9f 	bl	8000f14 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d016      	beq.n	800120e <LoRA_parsePacket+0x5c>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f003 0320 	and.w	r3, r3, #32
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d111      	bne.n	800120e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 80011ea:	2013      	movs	r0, #19
 80011ec:	f7ff fe6a 	bl	8000ec4 <LoRA_Read_Register>
 80011f0:	4603      	mov	r3, r0
 80011f2:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 80011f4:	2010      	movs	r0, #16
 80011f6:	f7ff fe65 	bl	8000ec4 <LoRA_Read_Register>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4619      	mov	r1, r3
 80011fe:	200d      	movs	r0, #13
 8001200:	f7ff fe88 	bl	8000f14 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001204:	2185      	movs	r1, #133	; 0x85
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff fe84 	bl	8000f14 <LoRA_Write_Register>
 800120c:	e00d      	b.n	800122a <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff fe58 	bl	8000ec4 <LoRA_Read_Register>
 8001214:	4603      	mov	r3, r0
 8001216:	2b85      	cmp	r3, #133	; 0x85
 8001218:	d007      	beq.n	800122a <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800121a:	2100      	movs	r1, #0
 800121c:	200d      	movs	r0, #13
 800121e:	f7ff fe79 	bl	8000f14 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001222:	2185      	movs	r1, #133	; 0x85
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff fe75 	bl	8000f14 <LoRA_Write_Register>
	}
	return packetLenght;
 800122a:	687b      	ldr	r3, [r7, #4]

}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <LoRA_sendPacket>:

void LoRA_sendPacket(char *data) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	LoRA_beginPacket();
 800123c:	f7ff ff92 	bl	8001164 <LoRA_beginPacket>
	for (int i = 0; i < strlen(data); i++) {
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	e00a      	b.n	800125c <LoRA_sendPacket+0x28>
		LoRA_Write_Register(REG_FIFO, data[i]);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4619      	mov	r1, r3
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff fe5f 	bl	8000f14 <LoRA_Write_Register>
	for (int i = 0; i < strlen(data); i++) {
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	3301      	adds	r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff f8b7 	bl	80003d0 <strlen>
 8001262:	4602      	mov	r2, r0
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	429a      	cmp	r2, r3
 8001268:	d8ed      	bhi.n	8001246 <LoRA_sendPacket+0x12>
	}
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff f8b0 	bl	80003d0 <strlen>
 8001270:	4603      	mov	r3, r0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4619      	mov	r1, r3
 8001276:	2022      	movs	r0, #34	; 0x22
 8001278:	f7ff fe4c 	bl	8000f14 <LoRA_Write_Register>
	LoRA_endPacket();
 800127c:	f7ff ff80 	bl	8001180 <LoRA_endPacket>
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <disarm>:
int mount_SD() {
	int status = f_mount(&SDFatFS, (TCHAR const*) SDPath, 0);
	return status;
}

int disarm(char *state) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2102      	movs	r1, #2
 8001294:	482d      	ldr	r0, [pc, #180]	; (800134c <disarm+0xc4>)
 8001296:	f007 fe4d 	bl	8008f34 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);

	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2102      	movs	r1, #2
 800129e:	482c      	ldr	r0, [pc, #176]	; (8001350 <disarm+0xc8>)
 80012a0:	f007 fe48 	bl	8008f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012aa:	482a      	ldr	r0, [pc, #168]	; (8001354 <disarm+0xcc>)
 80012ac:	f007 fe42 	bl	8008f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b6:	4827      	ldr	r0, [pc, #156]	; (8001354 <disarm+0xcc>)
 80012b8:	f007 fe3c 	bl	8008f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c2:	4824      	ldr	r0, [pc, #144]	; (8001354 <disarm+0xcc>)
 80012c4:	f007 fe36 	bl	8008f34 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2102      	movs	r1, #2
 80012cc:	4822      	ldr	r0, [pc, #136]	; (8001358 <disarm+0xd0>)
 80012ce:	f007 fe31 	bl	8008f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d8:	4820      	ldr	r0, [pc, #128]	; (800135c <disarm+0xd4>)
 80012da:	f007 fe2b 	bl	8008f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e4:	481d      	ldr	r0, [pc, #116]	; (800135c <disarm+0xd4>)
 80012e6:	f007 fe25 	bl	8008f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	481a      	ldr	r0, [pc, #104]	; (800135c <disarm+0xd4>)
 80012f2:	f007 fe1f 	bl	8008f34 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80012f6:	210c      	movs	r1, #12
 80012f8:	4819      	ldr	r0, [pc, #100]	; (8001360 <disarm+0xd8>)
 80012fa:	f00f f8db 	bl	80104b4 <HAL_TIM_PWM_Start>
	setServo(1, 0);
 80012fe:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001364 <disarm+0xdc>
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff fbde 	bl	8000ac4 <setServo>

	LED_Color_Data[7][0] = 255;
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <disarm+0xe0>)
 800130a:	22ff      	movs	r2, #255	; 0xff
 800130c:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 0;
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <disarm+0xe0>)
 8001310:	2200      	movs	r2, #0
 8001312:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <disarm+0xe0>)
 8001316:	2200      	movs	r2, #0
 8001318:	65da      	str	r2, [r3, #92]	; 0x5c

	LED_Color_Data[2][0] = 255;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <disarm+0xe0>)
 800131c:	22ff      	movs	r2, #255	; 0xff
 800131e:	619a      	str	r2, [r3, #24]
	LED_Color_Data[2][1] = 0;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <disarm+0xe0>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
	LED_Color_Data[2][2] = 0;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <disarm+0xe0>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
	setLEDs();
 800132c:	f7ff fc12 	bl	8000b54 <setLEDs>

	strcpy(state, "DISARMED");
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	490e      	ldr	r1, [pc, #56]	; (800136c <disarm+0xe4>)
 8001334:	461a      	mov	r2, r3
 8001336:	460b      	mov	r3, r1
 8001338:	cb03      	ldmia	r3!, {r0, r1}
 800133a:	6010      	str	r0, [r2, #0]
 800133c:	6051      	str	r1, [r2, #4]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	7213      	strb	r3, [r2, #8]
	return 0;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	58020000 	.word	0x58020000
 8001350:	58020400 	.word	0x58020400
 8001354:	58021400 	.word	0x58021400
 8001358:	58021800 	.word	0x58021800
 800135c:	58021000 	.word	0x58021000
 8001360:	240011dc 	.word	0x240011dc
 8001364:	00000000 	.word	0x00000000
 8001368:	24000bc4 	.word	0x24000bc4
 800136c:	0801fcc0 	.word	0x0801fcc0

08001370 <arm>:

int arm(char *state) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 8001378:	2201      	movs	r2, #1
 800137a:	2102      	movs	r1, #2
 800137c:	4810      	ldr	r0, [pc, #64]	; (80013c0 <arm+0x50>)
 800137e:	f007 fdd9 	bl	8008f34 <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001382:	210c      	movs	r1, #12
 8001384:	480f      	ldr	r0, [pc, #60]	; (80013c4 <arm+0x54>)
 8001386:	f00f f895 	bl	80104b4 <HAL_TIM_PWM_Start>
	setServo(1, 100);
 800138a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80013c8 <arm+0x58>
 800138e:	2001      	movs	r0, #1
 8001390:	f7ff fb98 	bl	8000ac4 <setServo>

	strcpy(state, "ARMED");
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <arm+0x5c>)
 8001398:	6810      	ldr	r0, [r2, #0]
 800139a:	6018      	str	r0, [r3, #0]
 800139c:	8892      	ldrh	r2, [r2, #4]
 800139e:	809a      	strh	r2, [r3, #4]
	LED_Color_Data[7][0] = 0;
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <arm+0x60>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 255;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <arm+0x60>)
 80013a8:	22ff      	movs	r2, #255	; 0xff
 80013aa:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <arm+0x60>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	65da      	str	r2, [r3, #92]	; 0x5c
	setLEDs();
 80013b2:	f7ff fbcf 	bl	8000b54 <setLEDs>
	return 0;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	58020000 	.word	0x58020000
 80013c4:	240011dc 	.word	0x240011dc
 80013c8:	42c80000 	.word	0x42c80000
 80013cc:	0801fccc 	.word	0x0801fccc
 80013d0:	24000bc4 	.word	0x24000bc4

080013d4 <recv_packet>:

int recv_packet(char *LoRA_data, int max_length) {
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	int packet_length = LoRA_parsePacket();
 80013de:	f7ff fee8 	bl	80011b2 <LoRA_parsePacket>
 80013e2:	60b8      	str	r0, [r7, #8]
	if (max_length - 1 < packet_length) //-1 for the null terminator
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	dc01      	bgt.n	80013f0 <recv_packet+0x1c>
			{
		return 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e01c      	b.n	800142a <recv_packet+0x56>
	}
	if (packet_length) {
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d018      	beq.n	8001428 <recv_packet+0x54>
		for (int i = 0; i < packet_length; i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	e00a      	b.n	8001412 <recv_packet+0x3e>
			LoRA_data[i] = LoRA_Read_Register(0x00);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	18d4      	adds	r4, r2, r3
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff fd5e 	bl	8000ec4 <LoRA_Read_Register>
 8001408:	4603      	mov	r3, r0
 800140a:	7023      	strb	r3, [r4, #0]
		for (int i = 0; i < packet_length; i++) {
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	429a      	cmp	r2, r3
 8001418:	dbf0      	blt.n	80013fc <recv_packet+0x28>
		}
		LoRA_data[packet_length] = '\0';
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
		return packet_length;
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	e000      	b.n	800142a <recv_packet+0x56>
	} else {
		return 0;
 8001428:	2300      	movs	r3, #0
	}
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	bd90      	pop	{r4, r7, pc}

08001432 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 8001432:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	466b      	mov	r3, sp
 800143e:	461e      	mov	r6, r3
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7fe ffc5 	bl	80003d0 <strlen>
 8001446:	4603      	mov	r3, r0
 8001448:	b29b      	uxth	r3, r3
 800144a:	3301      	adds	r3, #1
 800144c:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 800144e:	8a79      	ldrh	r1, [r7, #18]
 8001450:	460b      	mov	r3, r1
 8001452:	3b01      	subs	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	b28b      	uxth	r3, r1
 8001458:	2200      	movs	r2, #0
 800145a:	4698      	mov	r8, r3
 800145c:	4691      	mov	r9, r2
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800146a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800146e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001472:	b28b      	uxth	r3, r1
 8001474:	2200      	movs	r2, #0
 8001476:	461c      	mov	r4, r3
 8001478:	4615      	mov	r5, r2
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	00eb      	lsls	r3, r5, #3
 8001484:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001488:	00e2      	lsls	r2, r4, #3
 800148a:	460b      	mov	r3, r1
 800148c:	3307      	adds	r3, #7
 800148e:	08db      	lsrs	r3, r3, #3
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	ebad 0d03 	sub.w	sp, sp, r3
 8001496:	466b      	mov	r3, sp
 8001498:	3300      	adds	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 800149c:	f002 fe40 	bl	8004120 <HAL_GetTick>
 80014a0:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff fec6 	bl	8001234 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 80014a8:	8a7b      	ldrh	r3, [r7, #18]
 80014aa:	4619      	mov	r1, r3
 80014ac:	68b8      	ldr	r0, [r7, #8]
 80014ae:	f7ff ff91 	bl	80013d4 <recv_packet>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d009      	beq.n	80014cc <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	68b8      	ldr	r0, [r7, #8]
 80014bc:	f7fe ff28 	bl	8000310 <strcmp>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d011      	beq.n	80014ea <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff feb4 	bl	8001234 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 2000) {
 80014cc:	f002 fe28 	bl	8004120 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014da:	d9e5      	bls.n	80014a8 <reliable_send_packet+0x76>
			LoRA_sendPacket(LoRA_data);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fea9 	bl	8001234 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 80014e2:	f002 fe1d 	bl	8004120 <HAL_GetTick>
 80014e6:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 80014e8:	e7de      	b.n	80014a8 <reliable_send_packet+0x76>
				break;
 80014ea:	bf00      	nop
 80014ec:	46b5      	mov	sp, r6
		}
	}
}
 80014ee:	bf00      	nop
 80014f0:	371c      	adds	r7, #28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080014f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fa:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
 80014fe:	b087      	sub	sp, #28
 8001500:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001502:	f002 fd87 	bl	8004014 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001506:	f000 fd47 	bl	8001f98 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800150a:	f000 fdbd 	bl	8002088 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800150e:	f001 fb69 	bl	8002be4 <MX_GPIO_Init>
	MX_DMA_Init();
 8001512:	f001 fb07 	bl	8002b24 <MX_DMA_Init>
	MX_SPI3_Init();
 8001516:	f001 f83d 	bl	8002594 <MX_SPI3_Init>
	MX_FDCAN3_Init();
 800151a:	f000 fecd 	bl	80022b8 <MX_FDCAN3_Init>
	MX_USART6_UART_Init();
 800151e:	f001 fab5 	bl	8002a8c <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001522:	f000 fde3 	bl	80020ec <MX_ADC1_Init>
	MX_TIM4_Init();
 8001526:	f001 f947 	bl	80027b8 <MX_TIM4_Init>
	MX_ADC3_Init();
 800152a:	f000 fe57 	bl	80021dc <MX_ADC3_Init>
	MX_SPI2_Init();
 800152e:	f000 ffdb 	bl	80024e8 <MX_SPI2_Init>
	MX_I2C2_Init();
 8001532:	f000 ff25 	bl	8002380 <MX_I2C2_Init>
	MX_TIM2_Init();
 8001536:	f001 f883 	bl	8002640 <MX_TIM2_Init>
	MX_TIM5_Init();
 800153a:	f001 f9b9 	bl	80028b0 <MX_TIM5_Init>
	MX_TIM3_Init();
 800153e:	f001 f8d7 	bl	80026f0 <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 8001542:	f018 ff89 	bl	801a458 <MX_USB_DEVICE_Init>
	MX_SPI1_Init();
 8001546:	f000 ff79 	bl	800243c <MX_SPI1_Init>
	MX_UART4_Init();
 800154a:	f001 fa53 	bl	80029f4 <MX_UART4_Init>
	MX_FATFS_Init();
 800154e:	f013 fda3 	bl	8015098 <MX_FATFS_Init>
	MX_SDMMC2_SD_Init();
 8001552:	f000 ff55 	bl	8002400 <MX_SDMMC2_SD_Init>
	MX_TIM13_Init();
 8001556:	f001 fa05 	bl	8002964 <MX_TIM13_Init>
	MX_TIM14_Init();
 800155a:	f001 fa27 	bl	80029ac <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	char dummy[50];
	disarm(dummy);
 800155e:	f242 73bc 	movw	r3, #10172	; 0x27bc
 8001562:	443b      	add	r3, r7
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fe8f 	bl	8001288 <disarm>

	FATFS FatFs;
	FIL Fil;
	FRESULT FR_Status;
	FR_Status = f_mount(&FatFs, SDPath, 1);
 800156a:	4bb9      	ldr	r3, [pc, #740]	; (8001850 <main+0x358>)
 800156c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001570:	f103 0310 	add.w	r3, r3, #16
 8001574:	443b      	add	r3, r7
 8001576:	2201      	movs	r2, #1
 8001578:	49b6      	ldr	r1, [pc, #728]	; (8001854 <main+0x35c>)
 800157a:	4618      	mov	r0, r3
 800157c:	f018 f960 	bl	8019840 <f_mount>
 8001580:	4603      	mov	r3, r0
 8001582:	f242 72ff 	movw	r2, #10239	; 0x27ff
 8001586:	443a      	add	r2, r7
 8001588:	7013      	strb	r3, [r2, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800158a:	210c      	movs	r1, #12
 800158c:	48b2      	ldr	r0, [pc, #712]	; (8001858 <main+0x360>)
 800158e:	f00e ff91 	bl	80104b4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001592:	2201      	movs	r2, #1
 8001594:	2104      	movs	r1, #4
 8001596:	48b1      	ldr	r0, [pc, #708]	; (800185c <main+0x364>)
 8001598:	f007 fccc 	bl	8008f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 800159c:	2201      	movs	r2, #1
 800159e:	2108      	movs	r1, #8
 80015a0:	48ae      	ldr	r0, [pc, #696]	; (800185c <main+0x364>)
 80015a2:	f007 fcc7 	bl	8008f34 <HAL_GPIO_WritePin>

	FR_Status = f_open(&Fil, "MyTextFile.txt", FA_CREATE_NEW);
 80015a6:	4bae      	ldr	r3, [pc, #696]	; (8001860 <main+0x368>)
 80015a8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80015ac:	f103 0310 	add.w	r3, r3, #16
 80015b0:	443b      	add	r3, r7
 80015b2:	2204      	movs	r2, #4
 80015b4:	49ab      	ldr	r1, [pc, #684]	; (8001864 <main+0x36c>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f018 f988 	bl	80198cc <f_open>
 80015bc:	4603      	mov	r3, r0
 80015be:	f242 72ff 	movw	r2, #10239	; 0x27ff
 80015c2:	443a      	add	r2, r7
 80015c4:	7013      	strb	r3, [r2, #0]
	f_close(&Fil);
 80015c6:	4ba6      	ldr	r3, [pc, #664]	; (8001860 <main+0x368>)
 80015c8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80015cc:	f103 0310 	add.w	r3, r3, #16
 80015d0:	443b      	add	r3, r7
 80015d2:	4618      	mov	r0, r3
 80015d4:	f018 fd58 	bl	801a088 <f_close>

	LoRA_begin(868000000);
 80015d8:	48a3      	ldr	r0, [pc, #652]	; (8001868 <main+0x370>)
 80015da:	f7ff fd85 	bl	80010e8 <LoRA_begin>
		}
		HAL_Delay(1000);
		LoRA_sendPacket("SENDIT");
	}*/

	int connected = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	f242 72f8 	movw	r2, #10232	; 0x27f8
 80015e4:	443a      	add	r2, r7
 80015e6:	6013      	str	r3, [r2, #0]
	long last_packet = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f242 72f4 	movw	r2, #10228	; 0x27f4
 80015ee:	443a      	add	r2, r7
 80015f0:	6013      	str	r3, [r2, #0]
	int ARMED = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f242 72f0 	movw	r2, #10224	; 0x27f0
 80015f8:	443a      	add	r2, r7
 80015fa:	6013      	str	r3, [r2, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);
	//char buffered_debug_data[MAX_PACKET_LENGTH];
	char state[MAX_PACKET_LENGTH] = "DISARMED";
 80015fc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001600:	f5a3 74dc 	sub.w	r4, r3, #440	; 0x1b8
 8001604:	4a99      	ldr	r2, [pc, #612]	; (800186c <main+0x374>)
 8001606:	4623      	mov	r3, r4
 8001608:	6810      	ldr	r0, [r2, #0]
 800160a:	6851      	ldr	r1, [r2, #4]
 800160c:	c303      	stmia	r3!, {r0, r1}
 800160e:	7a12      	ldrb	r2, [r2, #8]
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	f104 0309 	add.w	r3, r4, #9
 8001616:	22f1      	movs	r2, #241	; 0xf1
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f01a fbc1 	bl	801bda2 <memset>
	char command[MAX_PACKET_LENGTH];
	char recieved_packet[MAX_PACKET_LENGTH];
	char previous_packet[MAX_PACKET_LENGTH];
	char response_packet[MAX_PACKET_LENGTH];
	char packets_streamed[MAX_PACKET_LENGTH];
	int max_packet_count = 0;
 8001620:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001624:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
	int have_recieved_anything = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	f642 020c 	movw	r2, #10252	; 0x280c
 8001632:	443a      	add	r2, r7
 8001634:	6013      	str	r3, [r2, #0]
	int packetId;
	char communication_state[MAX_PACKET_LENGTH] = "RECEIVING RELIABLE";
 8001636:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800163a:	f2a3 76a4 	subw	r6, r3, #1956	; 0x7a4
 800163e:	4b8c      	ldr	r3, [pc, #560]	; (8001870 <main+0x378>)
 8001640:	4634      	mov	r4, r6
 8001642:	461d      	mov	r5, r3
 8001644:	6828      	ldr	r0, [r5, #0]
 8001646:	6869      	ldr	r1, [r5, #4]
 8001648:	68aa      	ldr	r2, [r5, #8]
 800164a:	68eb      	ldr	r3, [r5, #12]
 800164c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800164e:	8a2b      	ldrh	r3, [r5, #16]
 8001650:	7caa      	ldrb	r2, [r5, #18]
 8001652:	8023      	strh	r3, [r4, #0]
 8001654:	4613      	mov	r3, r2
 8001656:	70a3      	strb	r3, [r4, #2]
 8001658:	f106 0313 	add.w	r3, r6, #19
 800165c:	22e7      	movs	r2, #231	; 0xe7
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f01a fb9e 	bl	801bda2 <memset>
		//sprintf(data, "%x", version);
		//CDC_Transmit_HS(data, strlen(data));
		LoRA_sendPacket("hello\n");
		HAL_Delay(1000);
	}*/
	uint32_t previousTime = HAL_GetTick();
 8001666:	f002 fd5b 	bl	8004120 <HAL_GetTick>
 800166a:	f642 0308 	movw	r3, #10248	; 0x2808
 800166e:	443b      	add	r3, r7
 8001670:	6018      	str	r0, [r3, #0]
	uint32_t debugTime = HAL_GetTick();
 8001672:	f002 fd55 	bl	8004120 <HAL_GetTick>
 8001676:	f642 0304 	movw	r3, #10244	; 0x2804
 800167a:	443b      	add	r3, r7
 800167c:	6018      	str	r0, [r3, #0]

	while (1) {
		if(HAL_GetTick()- debugTime > 1000) {
 800167e:	f002 fd4f 	bl	8004120 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	f642 0304 	movw	r3, #10244	; 0x2804
 8001688:	443b      	add	r3, r7
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001692:	d934      	bls.n	80016fe <main+0x206>
			debugTime = HAL_GetTick();
 8001694:	f002 fd44 	bl	8004120 <HAL_GetTick>
 8001698:	f642 0304 	movw	r3, #10244	; 0x2804
 800169c:	443b      	add	r3, r7
 800169e:	6018      	str	r0, [r3, #0]
			sprintf(response_packet, "Lora: %d, Sate: %s, Comms: %s\n", LoRA_Read_Register(REG_MODEM_CONFIG_1), state, communication_state);
 80016a0:	201d      	movs	r0, #29
 80016a2:	f7ff fc0f 	bl	8000ec4 <LoRA_Read_Register>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4619      	mov	r1, r3
 80016aa:	4a72      	ldr	r2, [pc, #456]	; (8001874 <main+0x37c>)
 80016ac:	f642 0310 	movw	r3, #10256	; 0x2810
 80016b0:	4413      	add	r3, r2
 80016b2:	19da      	adds	r2, r3, r7
 80016b4:	4870      	ldr	r0, [pc, #448]	; (8001878 <main+0x380>)
 80016b6:	f642 0310 	movw	r3, #10256	; 0x2810
 80016ba:	4403      	add	r3, r0
 80016bc:	19d8      	adds	r0, r3, r7
 80016be:	4b6f      	ldr	r3, [pc, #444]	; (800187c <main+0x384>)
 80016c0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80016c4:	f103 0310 	add.w	r3, r3, #16
 80016c8:	443b      	add	r3, r7
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	460a      	mov	r2, r1
 80016d0:	496b      	ldr	r1, [pc, #428]	; (8001880 <main+0x388>)
 80016d2:	f01a fad5 	bl	801bc80 <siprintf>
			CDC_Transmit_HS(response_packet, strlen(response_packet));
 80016d6:	4b68      	ldr	r3, [pc, #416]	; (8001878 <main+0x380>)
 80016d8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80016dc:	f103 0310 	add.w	r3, r3, #16
 80016e0:	443b      	add	r3, r7
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fe74 	bl	80003d0 <strlen>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4b63      	ldr	r3, [pc, #396]	; (8001878 <main+0x380>)
 80016ec:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80016f0:	f103 0310 	add.w	r3, r3, #16
 80016f4:	443b      	add	r3, r7
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f018 ff6d 	bl	801a5d8 <CDC_Transmit_HS>
		}

		if (strcmp(communication_state, "RECEIVING RELIABLE") == 0) {
 80016fe:	4b5f      	ldr	r3, [pc, #380]	; (800187c <main+0x384>)
 8001700:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001704:	f103 0310 	add.w	r3, r3, #16
 8001708:	443b      	add	r3, r7
 800170a:	4959      	ldr	r1, [pc, #356]	; (8001870 <main+0x378>)
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fdff 	bl	8000310 <strcmp>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	f040 810d 	bne.w	8001934 <main+0x43c>


			//CDC_Transmit_HS("hi4\n", strlen("hi4\n"));
			if (recv_packet(recieved_packet, MAX_PACKET_LENGTH)) {
 800171a:	4b5a      	ldr	r3, [pc, #360]	; (8001884 <main+0x38c>)
 800171c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001720:	f103 0310 	add.w	r3, r3, #16
 8001724:	443b      	add	r3, r7
 8001726:	21fa      	movs	r1, #250	; 0xfa
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fe53 	bl	80013d4 <recv_packet>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80b7 	beq.w	80018a4 <main+0x3ac>
				have_recieved_anything = 1;
 8001736:	2301      	movs	r3, #1
 8001738:	f642 020c 	movw	r2, #10252	; 0x280c
 800173c:	443a      	add	r2, r7
 800173e:	6013      	str	r3, [r2, #0]
				//CDC_Transmit_HS("hi3", strlen("hi3"));
				previousTime = HAL_GetTick();
 8001740:	f002 fcee 	bl	8004120 <HAL_GetTick>
 8001744:	f642 0308 	movw	r3, #10248	; 0x2808
 8001748:	443b      	add	r3, r7
 800174a:	6018      	str	r0, [r3, #0]
				if (strcmp(recieved_packet, "$") == 0) {
 800174c:	4b4d      	ldr	r3, [pc, #308]	; (8001884 <main+0x38c>)
 800174e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001752:	f103 0310 	add.w	r3, r3, #16
 8001756:	443b      	add	r3, r7
 8001758:	494b      	ldr	r1, [pc, #300]	; (8001888 <main+0x390>)
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fdd8 	bl	8000310 <strcmp>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10d      	bne.n	8001782 <main+0x28a>
					//CDC_Transmit_HS("hi2", strlen("hi2"));
					strcpy(communication_state, "SENDING RELIABLE");
 8001766:	4b45      	ldr	r3, [pc, #276]	; (800187c <main+0x384>)
 8001768:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800176c:	f103 0310 	add.w	r3, r3, #16
 8001770:	443b      	add	r3, r7
 8001772:	4a46      	ldr	r2, [pc, #280]	; (800188c <main+0x394>)
 8001774:	461c      	mov	r4, r3
 8001776:	4615      	mov	r5, r2
 8001778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800177a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800177c:	682b      	ldr	r3, [r5, #0]
 800177e:	7023      	strb	r3, [r4, #0]
 8001780:	e77d      	b.n	800167e <main+0x186>
				} else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1) {
 8001782:	4a43      	ldr	r2, [pc, #268]	; (8001890 <main+0x398>)
 8001784:	f642 0310 	movw	r3, #10256	; 0x2810
 8001788:	4413      	add	r3, r2
 800178a:	19da      	adds	r2, r3, r7
 800178c:	4b3d      	ldr	r3, [pc, #244]	; (8001884 <main+0x38c>)
 800178e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001792:	f103 0310 	add.w	r3, r3, #16
 8001796:	443b      	add	r3, r7
 8001798:	493e      	ldr	r1, [pc, #248]	; (8001894 <main+0x39c>)
 800179a:	4618      	mov	r0, r3
 800179c:	f01a fa90 	bl	801bcc0 <siscanf>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d10f      	bne.n	80017c6 <main+0x2ce>
					strcpy(communication_state,"SENDING STREAM");
 80017a6:	4b35      	ldr	r3, [pc, #212]	; (800187c <main+0x384>)
 80017a8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017ac:	f103 0310 	add.w	r3, r3, #16
 80017b0:	443b      	add	r3, r7
 80017b2:	4a39      	ldr	r2, [pc, #228]	; (8001898 <main+0x3a0>)
 80017b4:	461c      	mov	r4, r3
 80017b6:	4613      	mov	r3, r2
 80017b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ba:	c407      	stmia	r4!, {r0, r1, r2}
 80017bc:	8023      	strh	r3, [r4, #0]
 80017be:	3402      	adds	r4, #2
 80017c0:	0c1b      	lsrs	r3, r3, #16
 80017c2:	7023      	strb	r3, [r4, #0]
 80017c4:	e75b      	b.n	800167e <main+0x186>
				} else if (strcmp(recieved_packet, previous_packet) == 0) {
 80017c6:	4a35      	ldr	r2, [pc, #212]	; (800189c <main+0x3a4>)
 80017c8:	f642 0310 	movw	r3, #10256	; 0x2810
 80017cc:	4413      	add	r3, r2
 80017ce:	19da      	adds	r2, r3, r7
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <main+0x38c>)
 80017d2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017d6:	f103 0310 	add.w	r3, r3, #16
 80017da:	443b      	add	r3, r7
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fd96 	bl	8000310 <strcmp>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <main+0x306>
					//send acknowledge again
					LoRA_sendPacket(recieved_packet);
 80017ea:	4b26      	ldr	r3, [pc, #152]	; (8001884 <main+0x38c>)
 80017ec:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017f0:	f103 0310 	add.w	r3, r3, #16
 80017f4:	443b      	add	r3, r7
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fd1c 	bl	8001234 <LoRA_sendPacket>
 80017fc:	e73f      	b.n	800167e <main+0x186>
				} else {
					//CDC_Transmit_HS("hi1", strlen("hi1"));
					strcpy(previous_packet, recieved_packet);
 80017fe:	4a21      	ldr	r2, [pc, #132]	; (8001884 <main+0x38c>)
 8001800:	f642 0310 	movw	r3, #10256	; 0x2810
 8001804:	4413      	add	r3, r2
 8001806:	19da      	adds	r2, r3, r7
 8001808:	4b24      	ldr	r3, [pc, #144]	; (800189c <main+0x3a4>)
 800180a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800180e:	f103 0310 	add.w	r3, r3, #16
 8001812:	443b      	add	r3, r7
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f01a fb43 	bl	801bea2 <strcpy>
					LoRA_sendPacket(recieved_packet);
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <main+0x38c>)
 800181e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001822:	f103 0310 	add.w	r3, r3, #16
 8001826:	443b      	add	r3, r7
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fd03 	bl	8001234 <LoRA_sendPacket>
					strcpy(command, recieved_packet);
 800182e:	4a15      	ldr	r2, [pc, #84]	; (8001884 <main+0x38c>)
 8001830:	f642 0310 	movw	r3, #10256	; 0x2810
 8001834:	4413      	add	r3, r2
 8001836:	19da      	adds	r2, r3, r7
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <main+0x3a8>)
 800183a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800183e:	f103 0310 	add.w	r3, r3, #16
 8001842:	443b      	add	r3, r7
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f01a fb2b 	bl	801bea2 <strcpy>
 800184c:	e717      	b.n	800167e <main+0x186>
 800184e:	bf00      	nop
 8001850:	ffffef74 	.word	0xffffef74
 8001854:	24001698 	.word	0x24001698
 8001858:	240011dc 	.word	0x240011dc
 800185c:	58021800 	.word	0x58021800
 8001860:	ffffdf44 	.word	0xffffdf44
 8001864:	0801fcd4 	.word	0x0801fcd4
 8001868:	33bca100 	.word	0x33bca100
 800186c:	0801fcc0 	.word	0x0801fcc0
 8001870:	0801fd04 	.word	0x0801fd04
 8001874:	ffffde48 	.word	0xffffde48
 8001878:	ffffda58 	.word	0xffffda58
 800187c:	ffffd85c 	.word	0xffffd85c
 8001880:	0801fce4 	.word	0x0801fce4
 8001884:	ffffdc50 	.word	0xffffdc50
 8001888:	0801fd18 	.word	0x0801fd18
 800188c:	0801fd1c 	.word	0x0801fd1c
 8001890:	ffffd958 	.word	0xffffd958
 8001894:	0801fd30 	.word	0x0801fd30
 8001898:	0801fd38 	.word	0x0801fd38
 800189c:	ffffdb54 	.word	0xffffdb54
 80018a0:	ffffdd4c 	.word	0xffffdd4c
					//CDC_Transmit_HS(command, strlen(command));
				}
			} else if ((!have_recieved_anything && HAL_GetTick() - previousTime > 1000) ||
 80018a4:	f642 030c 	movw	r3, #10252	; 0x280c
 80018a8:	443b      	add	r3, r7
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10a      	bne.n	80018c6 <main+0x3ce>
 80018b0:	f002 fc36 	bl	8004120 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f642 0308 	movw	r3, #10248	; 0x2808
 80018ba:	443b      	add	r3, r7
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018c4:	d813      	bhi.n	80018ee <main+0x3f6>
 80018c6:	f642 030c 	movw	r3, #10252	; 0x280c
 80018ca:	443b      	add	r3, r7
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f43f aed5 	beq.w	800167e <main+0x186>
					(have_recieved_anything && HAL_GetTick() - previousTime > 5000)) {
 80018d4:	f002 fc24 	bl	8004120 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	f642 0308 	movw	r3, #10248	; 0x2808
 80018de:	443b      	add	r3, r7
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e8:	4293      	cmp	r3, r2
 80018ea:	f67f aec8 	bls.w	800167e <main+0x186>
				//CDC_Transmit_HS("hi5", strlen("hi5"));
				CDC_Transmit_HS("reset\n", strlen("reset\n"));
 80018ee:	2106      	movs	r1, #6
 80018f0:	48ae      	ldr	r0, [pc, #696]	; (8001bac <main+0x6b4>)
 80018f2:	f018 fe71 	bl	801a5d8 <CDC_Transmit_HS>
				previousTime = HAL_GetTick();
 80018f6:	f002 fc13 	bl	8004120 <HAL_GetTick>
 80018fa:	f642 0308 	movw	r3, #10248	; 0x2808
 80018fe:	443b      	add	r3, r7
 8001900:	6018      	str	r0, [r3, #0]
				//give up MASTER
				sprintf(response_packet, "$ %s", state);
 8001902:	4aab      	ldr	r2, [pc, #684]	; (8001bb0 <main+0x6b8>)
 8001904:	f642 0310 	movw	r3, #10256	; 0x2810
 8001908:	4413      	add	r3, r2
 800190a:	19da      	adds	r2, r3, r7
 800190c:	4ba9      	ldr	r3, [pc, #676]	; (8001bb4 <main+0x6bc>)
 800190e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001912:	f103 0310 	add.w	r3, r3, #16
 8001916:	443b      	add	r3, r7
 8001918:	49a7      	ldr	r1, [pc, #668]	; (8001bb8 <main+0x6c0>)
 800191a:	4618      	mov	r0, r3
 800191c:	f01a f9b0 	bl	801bc80 <siprintf>
				LoRA_sendPacket(response_packet);
 8001920:	4ba4      	ldr	r3, [pc, #656]	; (8001bb4 <main+0x6bc>)
 8001922:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001926:	f103 0310 	add.w	r3, r3, #16
 800192a:	443b      	add	r3, r7
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fc81 	bl	8001234 <LoRA_sendPacket>
 8001932:	e6a4      	b.n	800167e <main+0x186>
			}
		} else if (strcmp(communication_state, "RECEIVING STREAM") == 0){
 8001934:	4ba1      	ldr	r3, [pc, #644]	; (8001bbc <main+0x6c4>)
 8001936:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800193a:	f103 0310 	add.w	r3, r3, #16
 800193e:	443b      	add	r3, r7
 8001940:	499f      	ldr	r1, [pc, #636]	; (8001bc0 <main+0x6c8>)
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fce4 	bl	8000310 <strcmp>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d172      	bne.n	8001a34 <main+0x53c>
			if(recv_packet(recieved_packet, MAX_PACKET_LENGTH))
 800194e:	4b9d      	ldr	r3, [pc, #628]	; (8001bc4 <main+0x6cc>)
 8001950:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001954:	f103 0310 	add.w	r3, r3, #16
 8001958:	443b      	add	r3, r7
 800195a:	21fa      	movs	r1, #250	; 0xfa
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fd39 	bl	80013d4 <recv_packet>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d03a      	beq.n	80019de <main+0x4e6>
			{
				previousTime = HAL_GetTick();
 8001968:	f002 fbda 	bl	8004120 <HAL_GetTick>
 800196c:	f642 0308 	movw	r3, #10248	; 0x2808
 8001970:	443b      	add	r3, r7
 8001972:	6018      	str	r0, [r3, #0]
				if(sscanf(recieved_packet, "$ %s", state) == 1)
 8001974:	4a8e      	ldr	r2, [pc, #568]	; (8001bb0 <main+0x6b8>)
 8001976:	f642 0310 	movw	r3, #10256	; 0x2810
 800197a:	4413      	add	r3, r2
 800197c:	19da      	adds	r2, r3, r7
 800197e:	4b91      	ldr	r3, [pc, #580]	; (8001bc4 <main+0x6cc>)
 8001980:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001984:	f103 0310 	add.w	r3, r3, #16
 8001988:	443b      	add	r3, r7
 800198a:	498b      	ldr	r1, [pc, #556]	; (8001bb8 <main+0x6c0>)
 800198c:	4618      	mov	r0, r3
 800198e:	f01a f997 	bl	801bcc0 <siscanf>
 8001992:	4603      	mov	r3, r0
 8001994:	2b01      	cmp	r3, #1
 8001996:	d10d      	bne.n	80019b4 <main+0x4bc>
				{
					strcpy(communication_state,"SENDING RELIABLE");
 8001998:	4b88      	ldr	r3, [pc, #544]	; (8001bbc <main+0x6c4>)
 800199a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800199e:	f103 0310 	add.w	r3, r3, #16
 80019a2:	443b      	add	r3, r7
 80019a4:	4a88      	ldr	r2, [pc, #544]	; (8001bc8 <main+0x6d0>)
 80019a6:	461c      	mov	r4, r3
 80019a8:	4615      	mov	r5, r2
 80019aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ae:	682b      	ldr	r3, [r5, #0]
 80019b0:	7023      	strb	r3, [r4, #0]
 80019b2:	e664      	b.n	800167e <main+0x186>
				}
				else
				{
					CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 80019b4:	4b83      	ldr	r3, [pc, #524]	; (8001bc4 <main+0x6cc>)
 80019b6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019ba:	f103 0310 	add.w	r3, r3, #16
 80019be:	443b      	add	r3, r7
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd05 	bl	80003d0 <strlen>
 80019c6:	4602      	mov	r2, r0
 80019c8:	4b7e      	ldr	r3, [pc, #504]	; (8001bc4 <main+0x6cc>)
 80019ca:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019ce:	f103 0310 	add.w	r3, r3, #16
 80019d2:	443b      	add	r3, r7
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f018 fdfe 	bl	801a5d8 <CDC_Transmit_HS>
 80019dc:	e64f      	b.n	800167e <main+0x186>
				}
			}
			else if(HAL_GetTick()-previousTime > 1000)
 80019de:	f002 fb9f 	bl	8004120 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	f642 0308 	movw	r3, #10248	; 0x2808
 80019e8:	443b      	add	r3, r7
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019f2:	f67f ae44 	bls.w	800167e <main+0x186>
			{
			  previousTime = HAL_GetTick();
 80019f6:	f002 fb93 	bl	8004120 <HAL_GetTick>
 80019fa:	f642 0308 	movw	r3, #10248	; 0x2808
 80019fe:	443b      	add	r3, r7
 8001a00:	6018      	str	r0, [r3, #0]
			  //give up SENDING
			  sprintf(response_packet, "! %d", packets_streamed);
 8001a02:	4a72      	ldr	r2, [pc, #456]	; (8001bcc <main+0x6d4>)
 8001a04:	f642 0310 	movw	r3, #10256	; 0x2810
 8001a08:	4413      	add	r3, r2
 8001a0a:	19da      	adds	r2, r3, r7
 8001a0c:	4b69      	ldr	r3, [pc, #420]	; (8001bb4 <main+0x6bc>)
 8001a0e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a12:	f103 0310 	add.w	r3, r3, #16
 8001a16:	443b      	add	r3, r7
 8001a18:	496d      	ldr	r1, [pc, #436]	; (8001bd0 <main+0x6d8>)
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f01a f930 	bl	801bc80 <siprintf>
			  LoRA_sendPacket(response_packet);
 8001a20:	4b64      	ldr	r3, [pc, #400]	; (8001bb4 <main+0x6bc>)
 8001a22:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a26:	f103 0310 	add.w	r3, r3, #16
 8001a2a:	443b      	add	r3, r7
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fc01 	bl	8001234 <LoRA_sendPacket>
 8001a32:	e624      	b.n	800167e <main+0x186>
			}
		} else if(strcmp(communication_state,"SENDING STREAM") == 0) {
 8001a34:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <main+0x6c4>)
 8001a36:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a3a:	f103 0310 	add.w	r3, r3, #16
 8001a3e:	443b      	add	r3, r7
 8001a40:	4964      	ldr	r1, [pc, #400]	; (8001bd4 <main+0x6dc>)
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fc64 	bl	8000310 <strcmp>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 80d6 	bne.w	8001bfc <main+0x704>
			if(max_packet_count == 0)
 8001a50:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001a54:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d12e      	bne.n	8001abc <main+0x5c4>
			{
				strcpy(communication_state,"RECEIVING RELIABLE");
 8001a5e:	4b57      	ldr	r3, [pc, #348]	; (8001bbc <main+0x6c4>)
 8001a60:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a64:	f103 0310 	add.w	r3, r3, #16
 8001a68:	443b      	add	r3, r7
 8001a6a:	4a5b      	ldr	r2, [pc, #364]	; (8001bd8 <main+0x6e0>)
 8001a6c:	461c      	mov	r4, r3
 8001a6e:	4615      	mov	r5, r2
 8001a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a74:	682b      	ldr	r3, [r5, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	8022      	strh	r2, [r4, #0]
 8001a7a:	3402      	adds	r4, #2
 8001a7c:	0c1b      	lsrs	r3, r3, #16
 8001a7e:	7023      	strb	r3, [r4, #0]
				have_recieved_anything = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f642 020c 	movw	r2, #10252	; 0x280c
 8001a86:	443a      	add	r2, r7
 8001a88:	6013      	str	r3, [r2, #0]
				sprintf(response_packet, "$ %s", state);
 8001a8a:	4a49      	ldr	r2, [pc, #292]	; (8001bb0 <main+0x6b8>)
 8001a8c:	f642 0310 	movw	r3, #10256	; 0x2810
 8001a90:	4413      	add	r3, r2
 8001a92:	19da      	adds	r2, r3, r7
 8001a94:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <main+0x6bc>)
 8001a96:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a9a:	f103 0310 	add.w	r3, r3, #16
 8001a9e:	443b      	add	r3, r7
 8001aa0:	4945      	ldr	r1, [pc, #276]	; (8001bb8 <main+0x6c0>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f01a f8ec 	bl	801bc80 <siprintf>
				LoRA_sendPacket(response_packet);
 8001aa8:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <main+0x6bc>)
 8001aaa:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001aae:	f103 0310 	add.w	r3, r3, #16
 8001ab2:	443b      	add	r3, r7
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fbbd 	bl	8001234 <LoRA_sendPacket>
 8001aba:	e5e0      	b.n	800167e <main+0x186>
			}
			else
			{
				//send whatever
				if (strcmp(state, "ARMED") == 0) {
 8001abc:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <main+0x6b8>)
 8001abe:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ac2:	f103 0310 	add.w	r3, r3, #16
 8001ac6:	443b      	add	r3, r7
 8001ac8:	4944      	ldr	r1, [pc, #272]	; (8001bdc <main+0x6e4>)
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fc20 	bl	8000310 <strcmp>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d15e      	bne.n	8001b94 <main+0x69c>
					if (strcmp(command, "FIRE") == 0) {
 8001ad6:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <main+0x6e8>)
 8001ad8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001adc:	f103 0310 	add.w	r3, r3, #16
 8001ae0:	443b      	add	r3, r7
 8001ae2:	4940      	ldr	r1, [pc, #256]	; (8001be4 <main+0x6ec>)
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fc13 	bl	8000310 <strcmp>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d151      	bne.n	8001b94 <main+0x69c>
						HAL_ADC_Start(&hadc1); // start the adc
 8001af0:	483d      	ldr	r0, [pc, #244]	; (8001be8 <main+0x6f0>)
 8001af2:	f003 f84f 	bl	8004b94 <HAL_ADC_Start>
						HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8001af6:	2164      	movs	r1, #100	; 0x64
 8001af8:	483b      	ldr	r0, [pc, #236]	; (8001be8 <main+0x6f0>)
 8001afa:	f003 f949 	bl	8004d90 <HAL_ADC_PollForConversion>
						char debug_data[100];
						uint16_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 8001afe:	483a      	ldr	r0, [pc, #232]	; (8001be8 <main+0x6f0>)
 8001b00:	f003 fa3a 	bl	8004f78 <HAL_ADC_GetValue>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f242 72ee 	movw	r2, #10222	; 0x27ee
 8001b0a:	443a      	add	r2, r7
 8001b0c:	8013      	strh	r3, [r2, #0]
						sprintf(debug_data, "%d, %d\n", HAL_GetTick(), adc_val);
 8001b0e:	f002 fb07 	bl	8004120 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	f242 73ee 	movw	r3, #10222	; 0x27ee
 8001b18:	443b      	add	r3, r7
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	4833      	ldr	r0, [pc, #204]	; (8001bec <main+0x6f4>)
 8001b1e:	f642 0110 	movw	r1, #10256	; 0x2810
 8001b22:	4401      	add	r1, r0
 8001b24:	19c8      	adds	r0, r1, r7
 8001b26:	4932      	ldr	r1, [pc, #200]	; (8001bf0 <main+0x6f8>)
 8001b28:	f01a f8aa 	bl	801bc80 <siprintf>
						FR_Status = f_open(&Fil, "MyTextFile.txt",
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <main+0x6fc>)
 8001b2e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b32:	f103 0310 	add.w	r3, r3, #16
 8001b36:	443b      	add	r3, r7
 8001b38:	2232      	movs	r2, #50	; 0x32
 8001b3a:	492f      	ldr	r1, [pc, #188]	; (8001bf8 <main+0x700>)
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f017 fec5 	bl	80198cc <f_open>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f242 72ff 	movw	r2, #10239	; 0x27ff
 8001b48:	443a      	add	r2, r7
 8001b4a:	7013      	strb	r3, [r2, #0]
								FA_OPEN_APPEND | FA_WRITE);
						f_puts(debug_data, &Fil);
 8001b4c:	4a29      	ldr	r2, [pc, #164]	; (8001bf4 <main+0x6fc>)
 8001b4e:	f642 0310 	movw	r3, #10256	; 0x2810
 8001b52:	4413      	add	r3, r2
 8001b54:	19da      	adds	r2, r3, r7
 8001b56:	4b25      	ldr	r3, [pc, #148]	; (8001bec <main+0x6f4>)
 8001b58:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b5c:	f103 0310 	add.w	r3, r3, #16
 8001b60:	443b      	add	r3, r7
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f018 fb30 	bl	801a1ca <f_puts>
						f_close(&Fil);
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <main+0x6fc>)
 8001b6c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b70:	f103 0310 	add.w	r3, r3, #16
 8001b74:	443b      	add	r3, r7
 8001b76:	4618      	mov	r0, r3
 8001b78:	f018 fa86 	bl	801a088 <f_close>
						HAL_ADC_Stop(&hadc1); // stop adc
 8001b7c:	481a      	ldr	r0, [pc, #104]	; (8001be8 <main+0x6f0>)
 8001b7e:	f003 f8d3 	bl	8004d28 <HAL_ADC_Stop>
						LoRA_sendPacket(debug_data);
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <main+0x6f4>)
 8001b84:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b88:	f103 0310 	add.w	r3, r3, #16
 8001b8c:	443b      	add	r3, r7
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fb50 	bl	8001234 <LoRA_sendPacket>
					}
				}
				max_packet_count--;
 8001b94:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001b98:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	1e5a      	subs	r2, r3, #1
 8001ba0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001ba4:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e568      	b.n	800167e <main+0x186>
 8001bac:	0801fd48 	.word	0x0801fd48
 8001bb0:	ffffde48 	.word	0xffffde48
 8001bb4:	ffffda58 	.word	0xffffda58
 8001bb8:	0801fd50 	.word	0x0801fd50
 8001bbc:	ffffd85c 	.word	0xffffd85c
 8001bc0:	0801fd58 	.word	0x0801fd58
 8001bc4:	ffffdc50 	.word	0xffffdc50
 8001bc8:	0801fd1c 	.word	0x0801fd1c
 8001bcc:	ffffd95c 	.word	0xffffd95c
 8001bd0:	0801fd30 	.word	0x0801fd30
 8001bd4:	0801fd38 	.word	0x0801fd38
 8001bd8:	0801fd04 	.word	0x0801fd04
 8001bdc:	0801fccc 	.word	0x0801fccc
 8001be0:	ffffdd4c 	.word	0xffffdd4c
 8001be4:	0801fd6c 	.word	0x0801fd6c
 8001be8:	24000c6c 	.word	0x24000c6c
 8001bec:	ffffd7f0 	.word	0xffffd7f0
 8001bf0:	0801fd74 	.word	0x0801fd74
 8001bf4:	ffffdf44 	.word	0xffffdf44
 8001bf8:	0801fcd4 	.word	0x0801fcd4
			}
			
		}
		else if (strcmp(communication_state, "SENDING RELIABLE") == 0) {
 8001bfc:	4bc8      	ldr	r3, [pc, #800]	; (8001f20 <main+0xa28>)
 8001bfe:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c02:	f103 0310 	add.w	r3, r3, #16
 8001c06:	443b      	add	r3, r7
 8001c08:	49c6      	ldr	r1, [pc, #792]	; (8001f24 <main+0xa2c>)
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fb80 	bl	8000310 <strcmp>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f47f ad33 	bne.w	800167e <main+0x186>
			if (strcmp(state, "DISARMED") == 0) {
 8001c18:	4bc3      	ldr	r3, [pc, #780]	; (8001f28 <main+0xa30>)
 8001c1a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c1e:	f103 0310 	add.w	r3, r3, #16
 8001c22:	443b      	add	r3, r7
 8001c24:	49c1      	ldr	r1, [pc, #772]	; (8001f2c <main+0xa34>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fb72 	bl	8000310 <strcmp>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 80e4 	bne.w	8001dfc <main+0x904>
				if (strcmp(command, "ARM") == 0) {
 8001c34:	4bbe      	ldr	r3, [pc, #760]	; (8001f30 <main+0xa38>)
 8001c36:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c3a:	f103 0310 	add.w	r3, r3, #16
 8001c3e:	443b      	add	r3, r7
 8001c40:	49bc      	ldr	r1, [pc, #752]	; (8001f34 <main+0xa3c>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fb64 	bl	8000310 <strcmp>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d117      	bne.n	8001c7e <main+0x786>
					CDC_Transmit_HS("HELLO 2", strlen("HELLO 2"));
 8001c4e:	2107      	movs	r1, #7
 8001c50:	48b9      	ldr	r0, [pc, #740]	; (8001f38 <main+0xa40>)
 8001c52:	f018 fcc1 	bl	801a5d8 <CDC_Transmit_HS>
					if (!arm(state)) {
 8001c56:	4bb4      	ldr	r3, [pc, #720]	; (8001f28 <main+0xa30>)
 8001c58:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c5c:	f103 0310 	add.w	r3, r3, #16
 8001c60:	443b      	add	r3, r7
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fb84 	bl	8001370 <arm>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d103      	bne.n	8001c76 <main+0x77e>
						reliable_send_packet("ARM SUCCESS");
 8001c6e:	48b3      	ldr	r0, [pc, #716]	; (8001f3c <main+0xa44>)
 8001c70:	f7ff fbdf 	bl	8001432 <reliable_send_packet>
 8001c74:	e11f      	b.n	8001eb6 <main+0x9be>
					} else {
						reliable_send_packet("ARM UNSUCCESSFUL");
 8001c76:	48b2      	ldr	r0, [pc, #712]	; (8001f40 <main+0xa48>)
 8001c78:	f7ff fbdb 	bl	8001432 <reliable_send_packet>
 8001c7c:	e11b      	b.n	8001eb6 <main+0x9be>
					}
				} else if (strcmp(command, "DISARM") == 0) {
 8001c7e:	4bac      	ldr	r3, [pc, #688]	; (8001f30 <main+0xa38>)
 8001c80:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c84:	f103 0310 	add.w	r3, r3, #16
 8001c88:	443b      	add	r3, r7
 8001c8a:	49ae      	ldr	r1, [pc, #696]	; (8001f44 <main+0xa4c>)
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fb3f 	bl	8000310 <strcmp>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d103      	bne.n	8001ca0 <main+0x7a8>
					reliable_send_packet("ALREADY DISARMED");
 8001c98:	48ab      	ldr	r0, [pc, #684]	; (8001f48 <main+0xa50>)
 8001c9a:	f7ff fbca 	bl	8001432 <reliable_send_packet>
 8001c9e:	e10a      	b.n	8001eb6 <main+0x9be>
				} else if (strcmp(command, "CONT") == 0) {
 8001ca0:	4ba3      	ldr	r3, [pc, #652]	; (8001f30 <main+0xa38>)
 8001ca2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ca6:	f103 0310 	add.w	r3, r3, #16
 8001caa:	443b      	add	r3, r7
 8001cac:	49a7      	ldr	r1, [pc, #668]	; (8001f4c <main+0xa54>)
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fb2e 	bl	8000310 <strcmp>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f040 80fd 	bne.w	8001eb6 <main+0x9be>
					uint8_t CONTS[8];
					CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 8001cbc:	2104      	movs	r1, #4
 8001cbe:	48a4      	ldr	r0, [pc, #656]	; (8001f50 <main+0xa58>)
 8001cc0:	f007 f920 	bl	8008f04 <HAL_GPIO_ReadPin>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001ccc:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8001cd0:	701a      	strb	r2, [r3, #0]
					CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 8001cd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd6:	489f      	ldr	r0, [pc, #636]	; (8001f54 <main+0xa5c>)
 8001cd8:	f007 f914 	bl	8008f04 <HAL_GPIO_ReadPin>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001ce4:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8001ce8:	705a      	strb	r2, [r3, #1]
					CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 8001cea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cee:	4899      	ldr	r0, [pc, #612]	; (8001f54 <main+0xa5c>)
 8001cf0:	f007 f908 	bl	8008f04 <HAL_GPIO_ReadPin>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001cfc:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8001d00:	709a      	strb	r2, [r3, #2]
					CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 8001d02:	2101      	movs	r1, #1
 8001d04:	4894      	ldr	r0, [pc, #592]	; (8001f58 <main+0xa60>)
 8001d06:	f007 f8fd 	bl	8008f04 <HAL_GPIO_ReadPin>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d12:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8001d16:	70da      	strb	r2, [r3, #3]
					CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	4890      	ldr	r0, [pc, #576]	; (8001f5c <main+0xa64>)
 8001d1c:	f007 f8f2 	bl	8008f04 <HAL_GPIO_ReadPin>
 8001d20:	4603      	mov	r3, r0
 8001d22:	461a      	mov	r2, r3
 8001d24:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d28:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8001d2c:	711a      	strb	r2, [r3, #4]
					CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 8001d2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d32:	488a      	ldr	r0, [pc, #552]	; (8001f5c <main+0xa64>)
 8001d34:	f007 f8e6 	bl	8008f04 <HAL_GPIO_ReadPin>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d40:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8001d44:	715a      	strb	r2, [r3, #5]
					CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 8001d46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d4a:	4884      	ldr	r0, [pc, #528]	; (8001f5c <main+0xa64>)
 8001d4c:	f007 f8da 	bl	8008f04 <HAL_GPIO_ReadPin>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d58:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8001d5c:	719a      	strb	r2, [r3, #6]
					CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 8001d5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d62:	487e      	ldr	r0, [pc, #504]	; (8001f5c <main+0xa64>)
 8001d64:	f007 f8ce 	bl	8008f04 <HAL_GPIO_ReadPin>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d70:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8001d74:	71da      	strb	r2, [r3, #7]

					char message[100];
					for (int i = 0; i < 8; i++) {
 8001d76:	2300      	movs	r3, #0
 8001d78:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e037      	b.n	8001df0 <main+0x8f8>
						if (CONTS[i]) {
 8001d80:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d84:	f2a3 72ac 	subw	r2, r3, #1964	; 0x7ac
 8001d88:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00e      	beq.n	8001db4 <main+0x8bc>
							sprintf(message, "PYRO %d DOESN'T HAVE CONTINUITY",
 8001d96:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	4b70      	ldr	r3, [pc, #448]	; (8001f60 <main+0xa68>)
 8001da0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001da4:	f103 0310 	add.w	r3, r3, #16
 8001da8:	443b      	add	r3, r7
 8001daa:	496e      	ldr	r1, [pc, #440]	; (8001f64 <main+0xa6c>)
 8001dac:	4618      	mov	r0, r3
 8001dae:	f019 ff67 	bl	801bc80 <siprintf>
 8001db2:	e00d      	b.n	8001dd0 <main+0x8d8>
									i + 1);
						} else {
							sprintf(message, "PYRO %d HAS CONTINUITY", i + 1);
 8001db4:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <main+0xa68>)
 8001dbe:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001dc2:	f103 0310 	add.w	r3, r3, #16
 8001dc6:	443b      	add	r3, r7
 8001dc8:	4967      	ldr	r1, [pc, #412]	; (8001f68 <main+0xa70>)
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f019 ff58 	bl	801bc80 <siprintf>
						}

						reliable_send_packet(message);
 8001dd0:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <main+0xa68>)
 8001dd2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001dd6:	f103 0310 	add.w	r3, r3, #16
 8001dda:	443b      	add	r3, r7
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fb28 	bl	8001432 <reliable_send_packet>
					for (int i = 0; i < 8; i++) {
 8001de2:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b07      	cmp	r3, #7
 8001df8:	ddc2      	ble.n	8001d80 <main+0x888>
 8001dfa:	e05c      	b.n	8001eb6 <main+0x9be>
					}
				}
			} else if (strcmp(state, "ARMED") == 0) {
 8001dfc:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <main+0xa30>)
 8001dfe:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e02:	f103 0310 	add.w	r3, r3, #16
 8001e06:	443b      	add	r3, r7
 8001e08:	4958      	ldr	r1, [pc, #352]	; (8001f6c <main+0xa74>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fa80 	bl	8000310 <strcmp>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d140      	bne.n	8001e98 <main+0x9a0>
				if (strcmp(command, "DISARM") == 0) {
 8001e16:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <main+0xa38>)
 8001e18:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e1c:	f103 0310 	add.w	r3, r3, #16
 8001e20:	443b      	add	r3, r7
 8001e22:	4948      	ldr	r1, [pc, #288]	; (8001f44 <main+0xa4c>)
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fa73 	bl	8000310 <strcmp>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d113      	bne.n	8001e58 <main+0x960>
					if (!disarm(state)) {
 8001e30:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <main+0xa30>)
 8001e32:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e36:	f103 0310 	add.w	r3, r3, #16
 8001e3a:	443b      	add	r3, r7
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fa23 	bl	8001288 <disarm>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d103      	bne.n	8001e50 <main+0x958>
						reliable_send_packet("DISARM SUCCESS");
 8001e48:	4849      	ldr	r0, [pc, #292]	; (8001f70 <main+0xa78>)
 8001e4a:	f7ff faf2 	bl	8001432 <reliable_send_packet>
 8001e4e:	e01e      	b.n	8001e8e <main+0x996>
					} else {
						reliable_send_packet("DISARM UNSUCCESS");
 8001e50:	4848      	ldr	r0, [pc, #288]	; (8001f74 <main+0xa7c>)
 8001e52:	f7ff faee 	bl	8001432 <reliable_send_packet>
 8001e56:	e01a      	b.n	8001e8e <main+0x996>
					}
				} else if (strcmp(command, "ARM") == 0) {
 8001e58:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <main+0xa38>)
 8001e5a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e5e:	f103 0310 	add.w	r3, r3, #16
 8001e62:	443b      	add	r3, r7
 8001e64:	4933      	ldr	r1, [pc, #204]	; (8001f34 <main+0xa3c>)
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fa52 	bl	8000310 <strcmp>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d103      	bne.n	8001e7a <main+0x982>
					reliable_send_packet("ALREADY ARMED");
 8001e72:	4841      	ldr	r0, [pc, #260]	; (8001f78 <main+0xa80>)
 8001e74:	f7ff fadd 	bl	8001432 <reliable_send_packet>
 8001e78:	e009      	b.n	8001e8e <main+0x996>
				} else if (strcmp(command, "FIRE") == 0) {
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <main+0xa38>)
 8001e7c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e80:	f103 0310 	add.w	r3, r3, #16
 8001e84:	443b      	add	r3, r7
 8001e86:	493d      	ldr	r1, [pc, #244]	; (8001f7c <main+0xa84>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fa41 	bl	8000310 <strcmp>
					//strcpy(state, "STATIC_FIRE_LOGGING");
				}
				CDC_Transmit_HS("\nIamhere\n", strlen("\nIamhere\n"));
 8001e8e:	2109      	movs	r1, #9
 8001e90:	483b      	ldr	r0, [pc, #236]	; (8001f80 <main+0xa88>)
 8001e92:	f018 fba1 	bl	801a5d8 <CDC_Transmit_HS>
 8001e96:	e00e      	b.n	8001eb6 <main+0x9be>
			} else {
				LoRA_sendPacket("state wrong!");
 8001e98:	483a      	ldr	r0, [pc, #232]	; (8001f84 <main+0xa8c>)
 8001e9a:	f7ff f9cb 	bl	8001234 <LoRA_sendPacket>
				HAL_Delay(100);
 8001e9e:	2064      	movs	r0, #100	; 0x64
 8001ea0:	f002 f94a 	bl	8004138 <HAL_Delay>
				LoRA_sendPacket(state);
 8001ea4:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <main+0xa30>)
 8001ea6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001eaa:	f103 0310 	add.w	r3, r3, #16
 8001eae:	443b      	add	r3, r7
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff f9bf 	bl	8001234 <LoRA_sendPacket>
			}
			//HAL_Delay(100);
			sprintf(response_packet, "$ %s", state);
 8001eb6:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <main+0xa30>)
 8001eb8:	f642 0310 	movw	r3, #10256	; 0x2810
 8001ebc:	4413      	add	r3, r2
 8001ebe:	19da      	adds	r2, r3, r7
 8001ec0:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <main+0xa90>)
 8001ec2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ec6:	f103 0310 	add.w	r3, r3, #16
 8001eca:	443b      	add	r3, r7
 8001ecc:	492f      	ldr	r1, [pc, #188]	; (8001f8c <main+0xa94>)
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f019 fed6 	bl	801bc80 <siprintf>
			LoRA_sendPacket(response_packet);
 8001ed4:	4b2c      	ldr	r3, [pc, #176]	; (8001f88 <main+0xa90>)
 8001ed6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001eda:	f103 0310 	add.w	r3, r3, #16
 8001ede:	443b      	add	r3, r7
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff f9a7 	bl	8001234 <LoRA_sendPacket>
			CDC_Transmit_HS("\nIamhere2\n", strlen("\nIamhere2\n"));
 8001ee6:	210a      	movs	r1, #10
 8001ee8:	4829      	ldr	r0, [pc, #164]	; (8001f90 <main+0xa98>)
 8001eea:	f018 fb75 	bl	801a5d8 <CDC_Transmit_HS>
			strcpy(communication_state, "RECEIVING RELIABLE");
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <main+0xa28>)
 8001ef0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ef4:	f103 0310 	add.w	r3, r3, #16
 8001ef8:	443b      	add	r3, r7
 8001efa:	4a26      	ldr	r2, [pc, #152]	; (8001f94 <main+0xa9c>)
 8001efc:	461c      	mov	r4, r3
 8001efe:	4615      	mov	r5, r2
 8001f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f04:	682b      	ldr	r3, [r5, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	8022      	strh	r2, [r4, #0]
 8001f0a:	3402      	adds	r4, #2
 8001f0c:	0c1b      	lsrs	r3, r3, #16
 8001f0e:	7023      	strb	r3, [r4, #0]
			have_recieved_anything = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f642 020c 	movw	r2, #10252	; 0x280c
 8001f16:	443a      	add	r2, r7
 8001f18:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick()- debugTime > 1000) {
 8001f1a:	f7ff bbb0 	b.w	800167e <main+0x186>
 8001f1e:	bf00      	nop
 8001f20:	ffffd85c 	.word	0xffffd85c
 8001f24:	0801fd1c 	.word	0x0801fd1c
 8001f28:	ffffde48 	.word	0xffffde48
 8001f2c:	0801fcc0 	.word	0x0801fcc0
 8001f30:	ffffdd4c 	.word	0xffffdd4c
 8001f34:	0801fd7c 	.word	0x0801fd7c
 8001f38:	0801fd80 	.word	0x0801fd80
 8001f3c:	0801fd88 	.word	0x0801fd88
 8001f40:	0801fd94 	.word	0x0801fd94
 8001f44:	0801fda8 	.word	0x0801fda8
 8001f48:	0801fdb0 	.word	0x0801fdb0
 8001f4c:	0801fdc4 	.word	0x0801fdc4
 8001f50:	58020400 	.word	0x58020400
 8001f54:	58021400 	.word	0x58021400
 8001f58:	58021800 	.word	0x58021800
 8001f5c:	58021000 	.word	0x58021000
 8001f60:	ffffd7f0 	.word	0xffffd7f0
 8001f64:	0801fdcc 	.word	0x0801fdcc
 8001f68:	0801fdec 	.word	0x0801fdec
 8001f6c:	0801fccc 	.word	0x0801fccc
 8001f70:	0801fe04 	.word	0x0801fe04
 8001f74:	0801fe14 	.word	0x0801fe14
 8001f78:	0801fe28 	.word	0x0801fe28
 8001f7c:	0801fd6c 	.word	0x0801fd6c
 8001f80:	0801fe38 	.word	0x0801fe38
 8001f84:	0801fe44 	.word	0x0801fe44
 8001f88:	ffffda58 	.word	0xffffda58
 8001f8c:	0801fd50 	.word	0x0801fd50
 8001f90:	0801fe54 	.word	0x0801fe54
 8001f94:	0801fd04 	.word	0x0801fd04

08001f98 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b09c      	sub	sp, #112	; 0x70
 8001f9c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa2:	224c      	movs	r2, #76	; 0x4c
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f019 fefb 	bl	801bda2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	2220      	movs	r2, #32
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f019 fef5 	bl	801bda2 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001fb8:	2002      	movs	r0, #2
 8001fba:	f008 fbcf 	bl	800a75c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	603b      	str	r3, [r7, #0]
 8001fc2:	4b30      	ldr	r3, [pc, #192]	; (8002084 <SystemClock_Config+0xec>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fca:	4a2e      	ldr	r2, [pc, #184]	; (8002084 <SystemClock_Config+0xec>)
 8001fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd0:	6193      	str	r3, [r2, #24]
 8001fd2:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <SystemClock_Config+0xec>)
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001fde:	bf00      	nop
 8001fe0:	4b28      	ldr	r3, [pc, #160]	; (8002084 <SystemClock_Config+0xec>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fec:	d1f8      	bne.n	8001fe0 <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8001fee:	2322      	movs	r3, #34	; 0x22
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8001ff6:	2340      	movs	r3, #64	; 0x40
 8001ff8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ffe:	2302      	movs	r3, #2
 8002000:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002002:	2300      	movs	r3, #0
 8002004:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002006:	2304      	movs	r3, #4
 8002008:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 800200a:	230c      	movs	r3, #12
 800200c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 800200e:	2301      	movs	r3, #1
 8002010:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8002012:	2303      	movs	r3, #3
 8002014:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002016:	2302      	movs	r3, #2
 8002018:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800201a:	230c      	movs	r3, #12
 800201c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800201e:	2300      	movs	r3, #0
 8002020:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202a:	4618      	mov	r0, r3
 800202c:	f008 fbe0 	bl	800a7f0 <HAL_RCC_OscConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <SystemClock_Config+0xa2>
		Error_Handler();
 8002036:	f000 ff39 	bl	8002eac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800203a:	233f      	movs	r3, #63	; 0x3f
 800203c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800203e:	2303      	movs	r3, #3
 8002040:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002046:	2308      	movs	r3, #8
 8002048:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800204a:	2340      	movs	r3, #64	; 0x40
 800204c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800204e:	2340      	movs	r3, #64	; 0x40
 8002050:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002056:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002058:	2340      	movs	r3, #64	; 0x40
 800205a:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	2101      	movs	r1, #1
 8002060:	4618      	mov	r0, r3
 8002062:	f008 ff9f 	bl	800afa4 <HAL_RCC_ClockConfig>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <SystemClock_Config+0xd8>
		Error_Handler();
 800206c:	f000 ff1e 	bl	8002eac <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8002070:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002074:	2100      	movs	r1, #0
 8002076:	2000      	movs	r0, #0
 8002078:	f009 f94a 	bl	800b310 <HAL_RCC_MCOConfig>
}
 800207c:	bf00      	nop
 800207e:	3770      	adds	r7, #112	; 0x70
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	58024800 	.word	0x58024800

08002088 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b0ae      	sub	sp, #184	; 0xb8
 800208c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800208e:	463b      	mov	r3, r7
 8002090:	22b8      	movs	r2, #184	; 0xb8
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f019 fe84 	bl	801bda2 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
 800209a:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	e9c7 2300 	strd	r2, r3, [r7]
			| RCC_PERIPHCLK_SPI3 | RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 80020a6:	2304      	movs	r3, #4
 80020a8:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 80020aa:	230c      	movs	r3, #12
 80020ac:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 4;
 80020ae:	2304      	movs	r3, #4
 80020b0:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80020b2:	2302      	movs	r3, #2
 80020b4:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 80020b6:	2302      	movs	r3, #2
 80020b8:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80020ba:	23c0      	movs	r3, #192	; 0xc0
 80020bc:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80020c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ca:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80020d2:	463b      	mov	r3, r7
 80020d4:	4618      	mov	r0, r3
 80020d6:	f009 fb5b 	bl	800b790 <HAL_RCCEx_PeriphCLKConfig>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <PeriphCommonClock_Config+0x5c>
		Error_Handler();
 80020e0:	f000 fee4 	bl	8002eac <Error_Handler>
	}
}
 80020e4:	bf00      	nop
 80020e6:	37b8      	adds	r7, #184	; 0xb8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08c      	sub	sp, #48	; 0x30
 80020f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80020f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80020fe:	463b      	mov	r3, r7
 8002100:	2224      	movs	r2, #36	; 0x24
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f019 fe4c 	bl	801bda2 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800210a:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <MX_ADC1_Init+0xe4>)
 800210c:	4a31      	ldr	r2, [pc, #196]	; (80021d4 <MX_ADC1_Init+0xe8>)
 800210e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8002110:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <MX_ADC1_Init+0xe4>)
 8002112:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8002116:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8002118:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <MX_ADC1_Init+0xe4>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800211e:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <MX_ADC1_Init+0xe4>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <MX_ADC1_Init+0xe4>)
 8002126:	2204      	movs	r2, #4
 8002128:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800212a:	4b29      	ldr	r3, [pc, #164]	; (80021d0 <MX_ADC1_Init+0xe4>)
 800212c:	2200      	movs	r2, #0
 800212e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <MX_ADC1_Init+0xe4>)
 8002132:	2200      	movs	r2, #0
 8002134:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8002136:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <MX_ADC1_Init+0xe4>)
 8002138:	2201      	movs	r2, #1
 800213a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800213c:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <MX_ADC1_Init+0xe4>)
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002144:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <MX_ADC1_Init+0xe4>)
 8002146:	2200      	movs	r2, #0
 8002148:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800214a:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <MX_ADC1_Init+0xe4>)
 800214c:	2200      	movs	r2, #0
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <MX_ADC1_Init+0xe4>)
 8002152:	2200      	movs	r2, #0
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <MX_ADC1_Init+0xe4>)
 8002158:	2200      	movs	r2, #0
 800215a:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <MX_ADC1_Init+0xe4>)
 800215e:	2200      	movs	r2, #0
 8002160:	641a      	str	r2, [r3, #64]	; 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <MX_ADC1_Init+0xe4>)
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800216a:	4819      	ldr	r0, [pc, #100]	; (80021d0 <MX_ADC1_Init+0xe4>)
 800216c:	f002 fb0a 	bl	8004784 <HAL_ADC_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_ADC1_Init+0x8e>
		Error_Handler();
 8002176:	f000 fe99 	bl	8002eac <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 800217e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002182:	4619      	mov	r1, r3
 8002184:	4812      	ldr	r0, [pc, #72]	; (80021d0 <MX_ADC1_Init+0xe4>)
 8002186:	f003 feeb 	bl	8005f60 <HAL_ADCEx_MultiModeConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_ADC1_Init+0xa8>
		Error_Handler();
 8002190:	f000 fe8c 	bl	8002eac <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8002194:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <MX_ADC1_Init+0xec>)
 8002196:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002198:	2306      	movs	r3, #6
 800219a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 800219c:	2303      	movs	r3, #3
 800219e:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80021a4:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021a6:	2304      	movs	r3, #4
 80021a8:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80021b4:	463b      	mov	r3, r7
 80021b6:	4619      	mov	r1, r3
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_ADC1_Init+0xe4>)
 80021ba:	f002 feeb 	bl	8004f94 <HAL_ADC_ConfigChannel>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_ADC1_Init+0xdc>
		Error_Handler();
 80021c4:	f000 fe72 	bl	8002eac <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	3730      	adds	r7, #48	; 0x30
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	24000c6c 	.word	0x24000c6c
 80021d4:	40022000 	.word	0x40022000
 80021d8:	3ac04000 	.word	0x3ac04000

080021dc <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	2224      	movs	r2, #36	; 0x24
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f019 fdda 	bl	801bda2 <memset>

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 80021ee:	4b2f      	ldr	r3, [pc, #188]	; (80022ac <MX_ADC3_Init+0xd0>)
 80021f0:	4a2f      	ldr	r2, [pc, #188]	; (80022b0 <MX_ADC3_Init+0xd4>)
 80021f2:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <MX_ADC3_Init+0xd0>)
 80021f6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80021fa:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80021fc:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <MX_ADC3_Init+0xd0>)
 80021fe:	2208      	movs	r2, #8
 8002200:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8002202:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <MX_ADC3_Init+0xd0>)
 8002204:	2200      	movs	r2, #0
 8002206:	60da      	str	r2, [r3, #12]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002208:	4b28      	ldr	r3, [pc, #160]	; (80022ac <MX_ADC3_Init+0xd0>)
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800220e:	4b27      	ldr	r3, [pc, #156]	; (80022ac <MX_ADC3_Init+0xd0>)
 8002210:	2204      	movs	r2, #4
 8002212:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8002214:	4b25      	ldr	r3, [pc, #148]	; (80022ac <MX_ADC3_Init+0xd0>)
 8002216:	2200      	movs	r2, #0
 8002218:	761a      	strb	r2, [r3, #24]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <MX_ADC3_Init+0xd0>)
 800221c:	2200      	movs	r2, #0
 800221e:	765a      	strb	r2, [r3, #25]
	hadc3.Init.NbrOfConversion = 1;
 8002220:	4b22      	ldr	r3, [pc, #136]	; (80022ac <MX_ADC3_Init+0xd0>)
 8002222:	2201      	movs	r2, #1
 8002224:	61da      	str	r2, [r3, #28]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002226:	4b21      	ldr	r3, [pc, #132]	; (80022ac <MX_ADC3_Init+0xd0>)
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800222e:	4b1f      	ldr	r3, [pc, #124]	; (80022ac <MX_ADC3_Init+0xd0>)
 8002230:	2200      	movs	r2, #0
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <MX_ADC3_Init+0xd0>)
 8002236:	2200      	movs	r2, #0
 8002238:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.DMAContinuousRequests = ENABLE;
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <MX_ADC3_Init+0xd0>)
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8002242:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <MX_ADC3_Init+0xd0>)
 8002244:	2200      	movs	r2, #0
 8002246:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002248:	4b18      	ldr	r3, [pc, #96]	; (80022ac <MX_ADC3_Init+0xd0>)
 800224a:	2200      	movs	r2, #0
 800224c:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800224e:	4b17      	ldr	r3, [pc, #92]	; (80022ac <MX_ADC3_Init+0xd0>)
 8002250:	2200      	movs	r2, #0
 8002252:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <MX_ADC3_Init+0xd0>)
 8002256:	2200      	movs	r2, #0
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
	hadc3.Init.OversamplingMode = DISABLE;
 800225a:	4b14      	ldr	r3, [pc, #80]	; (80022ac <MX_ADC3_Init+0xd0>)
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8002262:	4812      	ldr	r0, [pc, #72]	; (80022ac <MX_ADC3_Init+0xd0>)
 8002264:	f002 fa8e 	bl	8004784 <HAL_ADC_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_ADC3_Init+0x96>
		Error_Handler();
 800226e:	f000 fe1d 	bl	8002eac <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <MX_ADC3_Init+0xd8>)
 8002274:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002276:	2306      	movs	r3, #6
 8002278:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800227e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002282:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002284:	2304      	movs	r3, #4
 8002286:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	4619      	mov	r1, r3
 8002294:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_ADC3_Init+0xd0>)
 8002296:	f002 fe7d 	bl	8004f94 <HAL_ADC_ConfigChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_ADC3_Init+0xc8>
		Error_Handler();
 80022a0:	f000 fe04 	bl	8002eac <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80022a4:	bf00      	nop
 80022a6:	3728      	adds	r7, #40	; 0x28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	24000cdc 	.word	0x24000cdc
 80022b0:	58026000 	.word	0x58026000
 80022b4:	04300002 	.word	0x04300002

080022b8 <MX_FDCAN3_Init>:
/**
 * @brief FDCAN3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN3_Init(void) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN3_Init 0 */

	/* USER CODE BEGIN FDCAN3_Init 1 */

	/* USER CODE END FDCAN3_Init 1 */
	hfdcan3.Instance = FDCAN3;
 80022bc:	4b2e      	ldr	r3, [pc, #184]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 80022be:	4a2f      	ldr	r2, [pc, #188]	; (800237c <MX_FDCAN3_Init+0xc4>)
 80022c0:	601a      	str	r2, [r3, #0]
	hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80022c2:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
	hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80022c8:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
	hfdcan3.Init.AutoRetransmission = DISABLE;
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	741a      	strb	r2, [r3, #16]
	hfdcan3.Init.TransmitPause = DISABLE;
 80022d4:	4b28      	ldr	r3, [pc, #160]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	745a      	strb	r2, [r3, #17]
	hfdcan3.Init.ProtocolException = DISABLE;
 80022da:	4b27      	ldr	r3, [pc, #156]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 80022dc:	2200      	movs	r2, #0
 80022de:	749a      	strb	r2, [r3, #18]
	hfdcan3.Init.NominalPrescaler = 16;
 80022e0:	4b25      	ldr	r3, [pc, #148]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 80022e2:	2210      	movs	r2, #16
 80022e4:	615a      	str	r2, [r3, #20]
	hfdcan3.Init.NominalSyncJumpWidth = 1;
 80022e6:	4b24      	ldr	r3, [pc, #144]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	619a      	str	r2, [r3, #24]
	hfdcan3.Init.NominalTimeSeg1 = 2;
 80022ec:	4b22      	ldr	r3, [pc, #136]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 80022ee:	2202      	movs	r2, #2
 80022f0:	61da      	str	r2, [r3, #28]
	hfdcan3.Init.NominalTimeSeg2 = 2;
 80022f2:	4b21      	ldr	r3, [pc, #132]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 80022f4:	2202      	movs	r2, #2
 80022f6:	621a      	str	r2, [r3, #32]
	hfdcan3.Init.DataPrescaler = 1;
 80022f8:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan3.Init.DataSyncJumpWidth = 1;
 80022fe:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 8002300:	2201      	movs	r2, #1
 8002302:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan3.Init.DataTimeSeg1 = 1;
 8002304:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 8002306:	2201      	movs	r2, #1
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan3.Init.DataTimeSeg2 = 1;
 800230a:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 800230c:	2201      	movs	r2, #1
 800230e:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan3.Init.MessageRAMOffset = 0;
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 8002312:	2200      	movs	r2, #0
 8002314:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan3.Init.StdFiltersNbr = 0;
 8002316:	4b18      	ldr	r3, [pc, #96]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 8002318:	2200      	movs	r2, #0
 800231a:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan3.Init.ExtFiltersNbr = 0;
 800231c:	4b16      	ldr	r3, [pc, #88]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 800231e:	2200      	movs	r2, #0
 8002320:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 8002324:	2200      	movs	r2, #0
 8002326:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002328:	4b13      	ldr	r3, [pc, #76]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 800232a:	2204      	movs	r2, #4
 800232c:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 800232e:	4b12      	ldr	r3, [pc, #72]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 8002330:	2200      	movs	r2, #0
 8002332:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 8002336:	2204      	movs	r2, #4
 8002338:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan3.Init.RxBuffersNbr = 0;
 800233a:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 800233c:	2200      	movs	r2, #0
 800233e:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 8002342:	2204      	movs	r2, #4
 8002344:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan3.Init.TxEventsNbr = 0;
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 8002348:	2200      	movs	r2, #0
 800234a:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan3.Init.TxBuffersNbr = 0;
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 800234e:	2200      	movs	r2, #0
 8002350:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 8002354:	2200      	movs	r2, #0
 8002356:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 800235a:	2200      	movs	r2, #0
 800235c:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 8002360:	2204      	movs	r2, #4
 8002362:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK) {
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <MX_FDCAN3_Init+0xc0>)
 8002366:	f006 f8c1 	bl	80084ec <HAL_FDCAN_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_FDCAN3_Init+0xbc>
		Error_Handler();
 8002370:	f000 fd9c 	bl	8002eac <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN3_Init 2 */

	/* USER CODE END FDCAN3_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	24000e3c 	.word	0x24000e3c
 800237c:	4000d400 	.word	0x4000d400

08002380 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <MX_I2C2_Init+0x74>)
 8002386:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <MX_I2C2_Init+0x78>)
 8002388:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <MX_I2C2_Init+0x74>)
 800238c:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <MX_I2C2_Init+0x7c>)
 800238e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <MX_I2C2_Init+0x74>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <MX_I2C2_Init+0x74>)
 8002398:	2201      	movs	r2, #1
 800239a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800239c:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <MX_I2C2_Init+0x74>)
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <MX_I2C2_Init+0x74>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <MX_I2C2_Init+0x74>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <MX_I2C2_Init+0x74>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <MX_I2C2_Init+0x74>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80023ba:	480e      	ldr	r0, [pc, #56]	; (80023f4 <MX_I2C2_Init+0x74>)
 80023bc:	f006 fdd4 	bl	8008f68 <HAL_I2C_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_I2C2_Init+0x4a>
		Error_Handler();
 80023c6:	f000 fd71 	bl	8002eac <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 80023ca:	2100      	movs	r1, #0
 80023cc:	4809      	ldr	r0, [pc, #36]	; (80023f4 <MX_I2C2_Init+0x74>)
 80023ce:	f006 fe75 	bl	80090bc <HAL_I2CEx_ConfigAnalogFilter>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80023d8:	f000 fd68 	bl	8002eac <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80023dc:	2100      	movs	r1, #0
 80023de:	4805      	ldr	r0, [pc, #20]	; (80023f4 <MX_I2C2_Init+0x74>)
 80023e0:	f006 feb7 	bl	8009152 <HAL_I2CEx_ConfigDigitalFilter>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_I2C2_Init+0x6e>
		Error_Handler();
 80023ea:	f000 fd5f 	bl	8002eac <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	24000edc 	.word	0x24000edc
 80023f8:	40005800 	.word	0x40005800
 80023fc:	20303e5d 	.word	0x20303e5d

08002400 <MX_SDMMC2_SD_Init>:
/**
 * @brief SDMMC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC2_SD_Init(void) {
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC2_Init 0 */

	/* USER CODE BEGIN SDMMC2_Init 1 */

	/* USER CODE END SDMMC2_Init 1 */
	hsd2.Instance = SDMMC2;
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <MX_SDMMC2_SD_Init+0x34>)
 8002406:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <MX_SDMMC2_SD_Init+0x38>)
 8002408:	601a      	str	r2, [r3, #0]
	hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <MX_SDMMC2_SD_Init+0x34>)
 800240c:	2200      	movs	r2, #0
 800240e:	605a      	str	r2, [r3, #4]
	hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <MX_SDMMC2_SD_Init+0x34>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
	hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <MX_SDMMC2_SD_Init+0x34>)
 8002418:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800241c:	60da      	str	r2, [r3, #12]
	hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <MX_SDMMC2_SD_Init+0x34>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
	hsd2.Init.ClockDiv = 8;
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <MX_SDMMC2_SD_Init+0x34>)
 8002426:	2208      	movs	r2, #8
 8002428:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN SDMMC2_Init 2 */

	/* USER CODE END SDMMC2_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	24000f30 	.word	0x24000f30
 8002438:	48022400 	.word	0x48022400

0800243c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <MX_SPI1_Init+0xa4>)
 8002442:	4a28      	ldr	r2, [pc, #160]	; (80024e4 <MX_SPI1_Init+0xa8>)
 8002444:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <MX_SPI1_Init+0xa4>)
 8002448:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800244c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800244e:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <MX_SPI1_Init+0xa4>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002454:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <MX_SPI1_Init+0xa4>)
 8002456:	2207      	movs	r2, #7
 8002458:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <MX_SPI1_Init+0xa4>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002460:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <MX_SPI1_Init+0xa4>)
 8002462:	2200      	movs	r2, #0
 8002464:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002466:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <MX_SPI1_Init+0xa4>)
 8002468:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800246c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800246e:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <MX_SPI1_Init+0xa4>)
 8002470:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002474:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002476:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <MX_SPI1_Init+0xa4>)
 8002478:	2200      	movs	r2, #0
 800247a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <MX_SPI1_Init+0xa4>)
 800247e:	2200      	movs	r2, #0
 8002480:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002482:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <MX_SPI1_Init+0xa4>)
 8002484:	2200      	movs	r2, #0
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <MX_SPI1_Init+0xa4>)
 800248a:	2200      	movs	r2, #0
 800248c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800248e:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <MX_SPI1_Init+0xa4>)
 8002490:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002494:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <MX_SPI1_Init+0xa4>)
 8002498:	2200      	movs	r2, #0
 800249a:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800249c:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <MX_SPI1_Init+0xa4>)
 800249e:	2200      	movs	r2, #0
 80024a0:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <MX_SPI1_Init+0xa4>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 80024a8:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <MX_SPI1_Init+0xa4>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <MX_SPI1_Init+0xa4>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <MX_SPI1_Init+0xa4>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <MX_SPI1_Init+0xa4>)
 80024bc:	2200      	movs	r2, #0
 80024be:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <MX_SPI1_Init+0xa4>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <MX_SPI1_Init+0xa4>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80024cc:	4804      	ldr	r0, [pc, #16]	; (80024e0 <MX_SPI1_Init+0xa4>)
 80024ce:	f00d f9a9 	bl	800f824 <HAL_SPI_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_SPI1_Init+0xa0>
		Error_Handler();
 80024d8:	f000 fce8 	bl	8002eac <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	24000fac 	.word	0x24000fac
 80024e4:	40013000 	.word	0x40013000

080024e8 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80024ec:	4b27      	ldr	r3, [pc, #156]	; (800258c <MX_SPI2_Init+0xa4>)
 80024ee:	4a28      	ldr	r2, [pc, #160]	; (8002590 <MX_SPI2_Init+0xa8>)
 80024f0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <MX_SPI2_Init+0xa4>)
 80024f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80024f8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024fa:	4b24      	ldr	r3, [pc, #144]	; (800258c <MX_SPI2_Init+0xa4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <MX_SPI2_Init+0xa4>)
 8002502:	2207      	movs	r2, #7
 8002504:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002506:	4b21      	ldr	r3, [pc, #132]	; (800258c <MX_SPI2_Init+0xa4>)
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <MX_SPI2_Init+0xa4>)
 800250e:	2200      	movs	r2, #0
 8002510:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <MX_SPI2_Init+0xa4>)
 8002514:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002518:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800251a:	4b1c      	ldr	r3, [pc, #112]	; (800258c <MX_SPI2_Init+0xa4>)
 800251c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002520:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002522:	4b1a      	ldr	r3, [pc, #104]	; (800258c <MX_SPI2_Init+0xa4>)
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002528:	4b18      	ldr	r3, [pc, #96]	; (800258c <MX_SPI2_Init+0xa4>)
 800252a:	2200      	movs	r2, #0
 800252c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800252e:	4b17      	ldr	r3, [pc, #92]	; (800258c <MX_SPI2_Init+0xa4>)
 8002530:	2200      	movs	r2, #0
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <MX_SPI2_Init+0xa4>)
 8002536:	2200      	movs	r2, #0
 8002538:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <MX_SPI2_Init+0xa4>)
 800253c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002540:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <MX_SPI2_Init+0xa4>)
 8002544:	2200      	movs	r2, #0
 8002546:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002548:	4b10      	ldr	r3, [pc, #64]	; (800258c <MX_SPI2_Init+0xa4>)
 800254a:	2200      	movs	r2, #0
 800254c:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <MX_SPI2_Init+0xa4>)
 8002550:	2200      	movs	r2, #0
 8002552:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <MX_SPI2_Init+0xa4>)
 8002556:	2200      	movs	r2, #0
 8002558:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <MX_SPI2_Init+0xa4>)
 800255c:	2200      	movs	r2, #0
 800255e:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <MX_SPI2_Init+0xa4>)
 8002562:	2200      	movs	r2, #0
 8002564:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <MX_SPI2_Init+0xa4>)
 8002568:	2200      	movs	r2, #0
 800256a:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800256c:	4b07      	ldr	r3, [pc, #28]	; (800258c <MX_SPI2_Init+0xa4>)
 800256e:	2200      	movs	r2, #0
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <MX_SPI2_Init+0xa4>)
 8002574:	2200      	movs	r2, #0
 8002576:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8002578:	4804      	ldr	r0, [pc, #16]	; (800258c <MX_SPI2_Init+0xa4>)
 800257a:	f00d f953 	bl	800f824 <HAL_SPI_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_SPI2_Init+0xa0>
		Error_Handler();
 8002584:	f000 fc92 	bl	8002eac <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}
 800258c:	24001034 	.word	0x24001034
 8002590:	40003800 	.word	0x40003800

08002594 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8002598:	4b27      	ldr	r3, [pc, #156]	; (8002638 <MX_SPI3_Init+0xa4>)
 800259a:	4a28      	ldr	r2, [pc, #160]	; (800263c <MX_SPI3_Init+0xa8>)
 800259c:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 800259e:	4b26      	ldr	r3, [pc, #152]	; (8002638 <MX_SPI3_Init+0xa4>)
 80025a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80025a4:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <MX_SPI3_Init+0xa4>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <MX_SPI3_Init+0xa4>)
 80025ae:	2207      	movs	r2, #7
 80025b0:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025b2:	4b21      	ldr	r3, [pc, #132]	; (8002638 <MX_SPI3_Init+0xa4>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025b8:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <MX_SPI3_Init+0xa4>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80025be:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <MX_SPI3_Init+0xa4>)
 80025c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025c4:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80025c6:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <MX_SPI3_Init+0xa4>)
 80025c8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80025cc:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ce:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <MX_SPI3_Init+0xa4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80025d4:	4b18      	ldr	r3, [pc, #96]	; (8002638 <MX_SPI3_Init+0xa4>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025da:	4b17      	ldr	r3, [pc, #92]	; (8002638 <MX_SPI3_Init+0xa4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 0x0;
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <MX_SPI3_Init+0xa4>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <MX_SPI3_Init+0xa4>)
 80025e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <MX_SPI3_Init+0xa4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	639a      	str	r2, [r3, #56]	; 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80025f4:	4b10      	ldr	r3, [pc, #64]	; (8002638 <MX_SPI3_Init+0xa4>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi3.Init.TxCRCInitializationPattern =
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <MX_SPI3_Init+0xa4>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.RxCRCInitializationPattern =
 8002600:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <MX_SPI3_Init+0xa4>)
 8002602:	2200      	movs	r2, #0
 8002604:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <MX_SPI3_Init+0xa4>)
 8002608:	2200      	movs	r2, #0
 800260a:	649a      	str	r2, [r3, #72]	; 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <MX_SPI3_Init+0xa4>)
 800260e:	2200      	movs	r2, #0
 8002610:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <MX_SPI3_Init+0xa4>)
 8002614:	2200      	movs	r2, #0
 8002616:	651a      	str	r2, [r3, #80]	; 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <MX_SPI3_Init+0xa4>)
 800261a:	2200      	movs	r2, #0
 800261c:	655a      	str	r2, [r3, #84]	; 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <MX_SPI3_Init+0xa4>)
 8002620:	2200      	movs	r2, #0
 8002622:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8002624:	4804      	ldr	r0, [pc, #16]	; (8002638 <MX_SPI3_Init+0xa4>)
 8002626:	f00d f8fd 	bl	800f824 <HAL_SPI_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_SPI3_Init+0xa0>
		Error_Handler();
 8002630:	f000 fc3c 	bl	8002eac <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	240010bc 	.word	0x240010bc
 800263c:	40003c00 	.word	0x40003c00

08002640 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002646:	f107 031c 	add.w	r3, r7, #28
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002652:	463b      	mov	r3, r7
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
 8002660:	615a      	str	r2, [r3, #20]
 8002662:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002664:	4b21      	ldr	r3, [pc, #132]	; (80026ec <MX_TIM2_Init+0xac>)
 8002666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800266a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800266c:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <MX_TIM2_Init+0xac>)
 800266e:	2200      	movs	r2, #0
 8002670:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002672:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <MX_TIM2_Init+0xac>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 90;
 8002678:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <MX_TIM2_Init+0xac>)
 800267a:	225a      	movs	r2, #90	; 0x5a
 800267c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <MX_TIM2_Init+0xac>)
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <MX_TIM2_Init+0xac>)
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800268a:	4818      	ldr	r0, [pc, #96]	; (80026ec <MX_TIM2_Init+0xac>)
 800268c:	f00d feba 	bl	8010404 <HAL_TIM_PWM_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_TIM2_Init+0x5a>
		Error_Handler();
 8002696:	f000 fc09 	bl	8002eac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80026a2:	f107 031c 	add.w	r3, r7, #28
 80026a6:	4619      	mov	r1, r3
 80026a8:	4810      	ldr	r0, [pc, #64]	; (80026ec <MX_TIM2_Init+0xac>)
 80026aa:	f00f f941 	bl	8011930 <HAL_TIMEx_MasterConfigSynchronization>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80026b4:	f000 fbfa 	bl	8002eac <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026b8:	2360      	movs	r3, #96	; 0x60
 80026ba:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80026c8:	463b      	mov	r3, r7
 80026ca:	2208      	movs	r2, #8
 80026cc:	4619      	mov	r1, r3
 80026ce:	4807      	ldr	r0, [pc, #28]	; (80026ec <MX_TIM2_Init+0xac>)
 80026d0:	f00e fb60 	bl	8010d94 <HAL_TIM_PWM_ConfigChannel>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80026da:	f000 fbe7 	bl	8002eac <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80026de:	4803      	ldr	r0, [pc, #12]	; (80026ec <MX_TIM2_Init+0xac>)
 80026e0:	f001 f91a 	bl	8003918 <HAL_TIM_MspPostInit>

}
 80026e4:	bf00      	nop
 80026e6:	3728      	adds	r7, #40	; 0x28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	24001144 	.word	0x24001144

080026f0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026f6:	f107 031c 	add.w	r3, r7, #28
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002702:	463b      	mov	r3, r7
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
 8002710:	615a      	str	r2, [r3, #20]
 8002712:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002714:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <MX_TIM3_Init+0xc0>)
 8002716:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <MX_TIM3_Init+0xc4>)
 8002718:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800271a:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <MX_TIM3_Init+0xc0>)
 800271c:	2200      	movs	r2, #0
 800271e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002720:	4b23      	ldr	r3, [pc, #140]	; (80027b0 <MX_TIM3_Init+0xc0>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 90;
 8002726:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <MX_TIM3_Init+0xc0>)
 8002728:	225a      	movs	r2, #90	; 0x5a
 800272a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272c:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <MX_TIM3_Init+0xc0>)
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002732:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <MX_TIM3_Init+0xc0>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002738:	481d      	ldr	r0, [pc, #116]	; (80027b0 <MX_TIM3_Init+0xc0>)
 800273a:	f00d fe63 	bl	8010404 <HAL_TIM_PWM_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_TIM3_Init+0x58>
		Error_Handler();
 8002744:	f000 fbb2 	bl	8002eac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002750:	f107 031c 	add.w	r3, r7, #28
 8002754:	4619      	mov	r1, r3
 8002756:	4816      	ldr	r0, [pc, #88]	; (80027b0 <MX_TIM3_Init+0xc0>)
 8002758:	f00f f8ea 	bl	8011930 <HAL_TIMEx_MasterConfigSynchronization>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8002762:	f000 fba3 	bl	8002eac <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002766:	2360      	movs	r3, #96	; 0x60
 8002768:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8002776:	463b      	mov	r3, r7
 8002778:	2200      	movs	r2, #0
 800277a:	4619      	mov	r1, r3
 800277c:	480c      	ldr	r0, [pc, #48]	; (80027b0 <MX_TIM3_Init+0xc0>)
 800277e:	f00e fb09 	bl	8010d94 <HAL_TIM_PWM_ConfigChannel>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8002788:	f000 fb90 	bl	8002eac <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 800278c:	463b      	mov	r3, r7
 800278e:	2204      	movs	r2, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4807      	ldr	r0, [pc, #28]	; (80027b0 <MX_TIM3_Init+0xc0>)
 8002794:	f00e fafe 	bl	8010d94 <HAL_TIM_PWM_ConfigChannel>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800279e:	f000 fb85 	bl	8002eac <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80027a2:	4803      	ldr	r0, [pc, #12]	; (80027b0 <MX_TIM3_Init+0xc0>)
 80027a4:	f001 f8b8 	bl	8003918 <HAL_TIM_MspPostInit>

}
 80027a8:	bf00      	nop
 80027aa:	3728      	adds	r7, #40	; 0x28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	24001190 	.word	0x24001190
 80027b4:	40000400 	.word	0x40000400

080027b8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	; 0x28
 80027bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80027be:	f107 031c 	add.w	r3, r7, #28
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80027ca:	463b      	mov	r3, r7
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
 80027d8:	615a      	str	r2, [r3, #20]
 80027da:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80027dc:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <MX_TIM4_Init+0xf0>)
 80027de:	4a33      	ldr	r2, [pc, #204]	; (80028ac <MX_TIM4_Init+0xf4>)
 80027e0:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 29;
 80027e2:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <MX_TIM4_Init+0xf0>)
 80027e4:	221d      	movs	r2, #29
 80027e6:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e8:	4b2f      	ldr	r3, [pc, #188]	; (80028a8 <MX_TIM4_Init+0xf0>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 80027ee:	4b2e      	ldr	r3, [pc, #184]	; (80028a8 <MX_TIM4_Init+0xf0>)
 80027f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80027f4:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f6:	4b2c      	ldr	r3, [pc, #176]	; (80028a8 <MX_TIM4_Init+0xf0>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fc:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <MX_TIM4_Init+0xf0>)
 80027fe:	2200      	movs	r2, #0
 8002800:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8002802:	4829      	ldr	r0, [pc, #164]	; (80028a8 <MX_TIM4_Init+0xf0>)
 8002804:	f00d fdfe 	bl	8010404 <HAL_TIM_PWM_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM4_Init+0x5a>
		Error_Handler();
 800280e:	f000 fb4d 	bl	8002eac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800281a:	f107 031c 	add.w	r3, r7, #28
 800281e:	4619      	mov	r1, r3
 8002820:	4821      	ldr	r0, [pc, #132]	; (80028a8 <MX_TIM4_Init+0xf0>)
 8002822:	f00f f885 	bl	8011930 <HAL_TIMEx_MasterConfigSynchronization>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM4_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 800282c:	f000 fb3e 	bl	8002eac <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002830:	2360      	movs	r3, #96	; 0x60
 8002832:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8002840:	463b      	mov	r3, r7
 8002842:	2200      	movs	r2, #0
 8002844:	4619      	mov	r1, r3
 8002846:	4818      	ldr	r0, [pc, #96]	; (80028a8 <MX_TIM4_Init+0xf0>)
 8002848:	f00e faa4 	bl	8010d94 <HAL_TIM_PWM_ConfigChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8002852:	f000 fb2b 	bl	8002eac <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8002856:	463b      	mov	r3, r7
 8002858:	2204      	movs	r2, #4
 800285a:	4619      	mov	r1, r3
 800285c:	4812      	ldr	r0, [pc, #72]	; (80028a8 <MX_TIM4_Init+0xf0>)
 800285e:	f00e fa99 	bl	8010d94 <HAL_TIM_PWM_ConfigChannel>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_TIM4_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8002868:	f000 fb20 	bl	8002eac <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 800286c:	463b      	mov	r3, r7
 800286e:	2208      	movs	r2, #8
 8002870:	4619      	mov	r1, r3
 8002872:	480d      	ldr	r0, [pc, #52]	; (80028a8 <MX_TIM4_Init+0xf0>)
 8002874:	f00e fa8e 	bl	8010d94 <HAL_TIM_PWM_ConfigChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM4_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 800287e:	f000 fb15 	bl	8002eac <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8002882:	463b      	mov	r3, r7
 8002884:	220c      	movs	r2, #12
 8002886:	4619      	mov	r1, r3
 8002888:	4807      	ldr	r0, [pc, #28]	; (80028a8 <MX_TIM4_Init+0xf0>)
 800288a:	f00e fa83 	bl	8010d94 <HAL_TIM_PWM_ConfigChannel>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM4_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8002894:	f000 fb0a 	bl	8002eac <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8002898:	4803      	ldr	r0, [pc, #12]	; (80028a8 <MX_TIM4_Init+0xf0>)
 800289a:	f001 f83d 	bl	8003918 <HAL_TIM_MspPostInit>

}
 800289e:	bf00      	nop
 80028a0:	3728      	adds	r7, #40	; 0x28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	240011dc 	.word	0x240011dc
 80028ac:	40000800 	.word	0x40000800

080028b0 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80028b6:	f107 031c 	add.w	r3, r7, #28
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80028c2:	463b      	mov	r3, r7
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
 80028d0:	615a      	str	r2, [r3, #20]
 80028d2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80028d4:	4b21      	ldr	r3, [pc, #132]	; (800295c <MX_TIM5_Init+0xac>)
 80028d6:	4a22      	ldr	r2, [pc, #136]	; (8002960 <MX_TIM5_Init+0xb0>)
 80028d8:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80028da:	4b20      	ldr	r3, [pc, #128]	; (800295c <MX_TIM5_Init+0xac>)
 80028dc:	2200      	movs	r2, #0
 80028de:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e0:	4b1e      	ldr	r3, [pc, #120]	; (800295c <MX_TIM5_Init+0xac>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 90;
 80028e6:	4b1d      	ldr	r3, [pc, #116]	; (800295c <MX_TIM5_Init+0xac>)
 80028e8:	225a      	movs	r2, #90	; 0x5a
 80028ea:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <MX_TIM5_Init+0xac>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <MX_TIM5_Init+0xac>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 80028f8:	4818      	ldr	r0, [pc, #96]	; (800295c <MX_TIM5_Init+0xac>)
 80028fa:	f00d fd83 	bl	8010404 <HAL_TIM_PWM_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM5_Init+0x58>
		Error_Handler();
 8002904:	f000 fad2 	bl	8002eac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	4619      	mov	r1, r3
 8002916:	4811      	ldr	r0, [pc, #68]	; (800295c <MX_TIM5_Init+0xac>)
 8002918:	f00f f80a 	bl	8011930 <HAL_TIMEx_MasterConfigSynchronization>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_TIM5_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8002922:	f000 fac3 	bl	8002eac <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002926:	2360      	movs	r3, #96	; 0x60
 8002928:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 8002936:	463b      	mov	r3, r7
 8002938:	220c      	movs	r2, #12
 800293a:	4619      	mov	r1, r3
 800293c:	4807      	ldr	r0, [pc, #28]	; (800295c <MX_TIM5_Init+0xac>)
 800293e:	f00e fa29 	bl	8010d94 <HAL_TIM_PWM_ConfigChannel>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_TIM5_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8002948:	f000 fab0 	bl	8002eac <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 800294c:	4803      	ldr	r0, [pc, #12]	; (800295c <MX_TIM5_Init+0xac>)
 800294e:	f000 ffe3 	bl	8003918 <HAL_TIM_MspPostInit>

}
 8002952:	bf00      	nop
 8002954:	3728      	adds	r7, #40	; 0x28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	24001228 	.word	0x24001228
 8002960:	40000c00 	.word	0x40000c00

08002964 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <MX_TIM13_Init+0x40>)
 800296a:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <MX_TIM13_Init+0x44>)
 800296c:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 99;
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <MX_TIM13_Init+0x40>)
 8002970:	2263      	movs	r2, #99	; 0x63
 8002972:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <MX_TIM13_Init+0x40>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 65535;
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <MX_TIM13_Init+0x40>)
 800297c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002980:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <MX_TIM13_Init+0x40>)
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <MX_TIM13_Init+0x40>)
 800298a:	2200      	movs	r2, #0
 800298c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 800298e:	4805      	ldr	r0, [pc, #20]	; (80029a4 <MX_TIM13_Init+0x40>)
 8002990:	f00d fce1 	bl	8010356 <HAL_TIM_Base_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_TIM13_Init+0x3a>
		Error_Handler();
 800299a:	f000 fa87 	bl	8002eac <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	24001274 	.word	0x24001274
 80029a8:	40001c00 	.word	0x40001c00

080029ac <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 80029b0:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <MX_TIM14_Init+0x40>)
 80029b2:	4a0f      	ldr	r2, [pc, #60]	; (80029f0 <MX_TIM14_Init+0x44>)
 80029b4:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 99;
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <MX_TIM14_Init+0x40>)
 80029b8:	2263      	movs	r2, #99	; 0x63
 80029ba:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <MX_TIM14_Init+0x40>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 65535;
 80029c2:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <MX_TIM14_Init+0x40>)
 80029c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029c8:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <MX_TIM14_Init+0x40>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <MX_TIM14_Init+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 80029d6:	4805      	ldr	r0, [pc, #20]	; (80029ec <MX_TIM14_Init+0x40>)
 80029d8:	f00d fcbd 	bl	8010356 <HAL_TIM_Base_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM14_Init+0x3a>
		Error_Handler();
 80029e2:	f000 fa63 	bl	8002eac <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	240012c0 	.word	0x240012c0
 80029f0:	40002000 	.word	0x40002000

080029f4 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <MX_UART4_Init+0x90>)
 80029fa:	4a23      	ldr	r2, [pc, #140]	; (8002a88 <MX_UART4_Init+0x94>)
 80029fc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80029fe:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <MX_UART4_Init+0x90>)
 8002a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a04:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002a06:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <MX_UART4_Init+0x90>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <MX_UART4_Init+0x90>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002a12:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <MX_UART4_Init+0x90>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002a18:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <MX_UART4_Init+0x90>)
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a1e:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <MX_UART4_Init+0x90>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a24:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <MX_UART4_Init+0x90>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a2a:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <MX_UART4_Init+0x90>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a30:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <MX_UART4_Init+0x90>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a36:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <MX_UART4_Init+0x90>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002a3c:	4811      	ldr	r0, [pc, #68]	; (8002a84 <MX_UART4_Init+0x90>)
 8002a3e:	f00f f831 	bl	8011aa4 <HAL_UART_Init>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_UART4_Init+0x58>
		Error_Handler();
 8002a48:	f000 fa30 	bl	8002eac <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	480d      	ldr	r0, [pc, #52]	; (8002a84 <MX_UART4_Init+0x90>)
 8002a50:	f010 f937 	bl	8012cc2 <HAL_UARTEx_SetTxFifoThreshold>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8002a5a:	f000 fa27 	bl	8002eac <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4808      	ldr	r0, [pc, #32]	; (8002a84 <MX_UART4_Init+0x90>)
 8002a62:	f010 f96c 	bl	8012d3e <HAL_UARTEx_SetRxFifoThreshold>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002a6c:	f000 fa1e 	bl	8002eac <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8002a70:	4804      	ldr	r0, [pc, #16]	; (8002a84 <MX_UART4_Init+0x90>)
 8002a72:	f010 f8ed 	bl	8012c50 <HAL_UARTEx_DisableFifoMode>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_UART4_Init+0x8c>
		Error_Handler();
 8002a7c:	f000 fa16 	bl	8002eac <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8002a80:	bf00      	nop
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	24001564 	.word	0x24001564
 8002a88:	40004c00 	.word	0x40004c00

08002a8c <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002a90:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <MX_USART6_UART_Init+0x90>)
 8002a92:	4a23      	ldr	r2, [pc, #140]	; (8002b20 <MX_USART6_UART_Init+0x94>)
 8002a94:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8002a96:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <MX_USART6_UART_Init+0x90>)
 8002a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a9c:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <MX_USART6_UART_Init+0x90>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <MX_USART6_UART_Init+0x90>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002aaa:	4b1c      	ldr	r3, [pc, #112]	; (8002b1c <MX_USART6_UART_Init+0x90>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002ab0:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <MX_USART6_UART_Init+0x90>)
 8002ab2:	220c      	movs	r2, #12
 8002ab4:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ab6:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <MX_USART6_UART_Init+0x90>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002abc:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <MX_USART6_UART_Init+0x90>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ac2:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <MX_USART6_UART_Init+0x90>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	621a      	str	r2, [r3, #32]
	huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ac8:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <MX_USART6_UART_Init+0x90>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	625a      	str	r2, [r3, #36]	; 0x24
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <MX_USART6_UART_Init+0x90>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8002ad4:	4811      	ldr	r0, [pc, #68]	; (8002b1c <MX_USART6_UART_Init+0x90>)
 8002ad6:	f00e ffe5 	bl	8011aa4 <HAL_UART_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_USART6_UART_Init+0x58>
		Error_Handler();
 8002ae0:	f000 f9e4 	bl	8002eac <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8)
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	480d      	ldr	r0, [pc, #52]	; (8002b1c <MX_USART6_UART_Init+0x90>)
 8002ae8:	f010 f8eb 	bl	8012cc2 <HAL_UARTEx_SetTxFifoThreshold>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_USART6_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8002af2:	f000 f9db 	bl	8002eac <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8)
 8002af6:	2100      	movs	r1, #0
 8002af8:	4808      	ldr	r0, [pc, #32]	; (8002b1c <MX_USART6_UART_Init+0x90>)
 8002afa:	f010 f920 	bl	8012d3e <HAL_UARTEx_SetRxFifoThreshold>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_USART6_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002b04:	f000 f9d2 	bl	8002eac <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK) {
 8002b08:	4804      	ldr	r0, [pc, #16]	; (8002b1c <MX_USART6_UART_Init+0x90>)
 8002b0a:	f010 f8a1 	bl	8012c50 <HAL_UARTEx_DisableFifoMode>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_USART6_UART_Init+0x8c>
		Error_Handler();
 8002b14:	f000 f9ca 	bl	8002eac <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	240015f8 	.word	0x240015f8
 8002b20:	40011400 	.word	0x40011400

08002b24 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002b2a:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <MX_DMA_Init+0xbc>)
 8002b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b30:	4a2b      	ldr	r2, [pc, #172]	; (8002be0 <MX_DMA_Init+0xbc>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002b3a:	4b29      	ldr	r3, [pc, #164]	; (8002be0 <MX_DMA_Init+0xbc>)
 8002b3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <MX_DMA_Init+0xbc>)
 8002b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b4e:	4a24      	ldr	r2, [pc, #144]	; (8002be0 <MX_DMA_Init+0xbc>)
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002b58:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <MX_DMA_Init+0xbc>)
 8002b5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2100      	movs	r1, #0
 8002b6a:	200b      	movs	r0, #11
 8002b6c:	f003 fbb5 	bl	80062da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002b70:	200b      	movs	r0, #11
 8002b72:	f003 fbcc 	bl	800630e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2100      	movs	r1, #0
 8002b7a:	200c      	movs	r0, #12
 8002b7c:	f003 fbad 	bl	80062da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002b80:	200c      	movs	r0, #12
 8002b82:	f003 fbc4 	bl	800630e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	200d      	movs	r0, #13
 8002b8c:	f003 fba5 	bl	80062da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002b90:	200d      	movs	r0, #13
 8002b92:	f003 fbbc 	bl	800630e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2100      	movs	r1, #0
 8002b9a:	200e      	movs	r0, #14
 8002b9c:	f003 fb9d 	bl	80062da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002ba0:	200e      	movs	r0, #14
 8002ba2:	f003 fbb4 	bl	800630e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	200f      	movs	r0, #15
 8002bac:	f003 fb95 	bl	80062da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002bb0:	200f      	movs	r0, #15
 8002bb2:	f003 fbac 	bl	800630e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2100      	movs	r1, #0
 8002bba:	2010      	movs	r0, #16
 8002bbc:	f003 fb8d 	bl	80062da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002bc0:	2010      	movs	r0, #16
 8002bc2:	f003 fba4 	bl	800630e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2100      	movs	r1, #0
 8002bca:	2046      	movs	r0, #70	; 0x46
 8002bcc:	f003 fb85 	bl	80062da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002bd0:	2046      	movs	r0, #70	; 0x46
 8002bd2:	f003 fb9c 	bl	800630e <HAL_NVIC_EnableIRQ>

}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	58024400 	.word	0x58024400

08002be4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08c      	sub	sp, #48	; 0x30
 8002be8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002bea:	f107 031c 	add.w	r3, r7, #28
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	609a      	str	r2, [r3, #8]
 8002bf6:	60da      	str	r2, [r3, #12]
 8002bf8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002bfa:	4ba4      	ldr	r3, [pc, #656]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c00:	4aa2      	ldr	r2, [pc, #648]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002c02:	f043 0310 	orr.w	r3, r3, #16
 8002c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c0a:	4ba0      	ldr	r3, [pc, #640]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002c18:	4b9c      	ldr	r3, [pc, #624]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c1e:	4a9b      	ldr	r2, [pc, #620]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002c20:	f043 0320 	orr.w	r3, r3, #32
 8002c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c28:	4b98      	ldr	r3, [pc, #608]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002c36:	4b95      	ldr	r3, [pc, #596]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c3c:	4a93      	ldr	r2, [pc, #588]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c46:	4b91      	ldr	r3, [pc, #580]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c54:	4b8d      	ldr	r3, [pc, #564]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5a:	4a8c      	ldr	r2, [pc, #560]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c64:	4b89      	ldr	r3, [pc, #548]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002c72:	4b86      	ldr	r3, [pc, #536]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c78:	4a84      	ldr	r2, [pc, #528]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002c7a:	f043 0302 	orr.w	r3, r3, #2
 8002c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c82:	4b82      	ldr	r3, [pc, #520]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002c90:	4b7e      	ldr	r3, [pc, #504]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c96:	4a7d      	ldr	r2, [pc, #500]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca0:	4b7a      	ldr	r3, [pc, #488]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002cae:	4b77      	ldr	r3, [pc, #476]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb4:	4a75      	ldr	r2, [pc, #468]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002cb6:	f043 0308 	orr.w	r3, r3, #8
 8002cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cbe:	4b73      	ldr	r3, [pc, #460]	; (8002e8c <MX_GPIO_Init+0x2a8>)
 8002cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	603b      	str	r3, [r7, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin,
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f241 5104 	movw	r1, #5380	; 0x1504
 8002cd2:	486f      	ldr	r0, [pc, #444]	; (8002e90 <MX_GPIO_Init+0x2ac>)
 8002cd4:	f006 f92e 	bl	8008f34 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ARM1_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f248 0102 	movw	r1, #32770	; 0x8002
 8002cde:	486d      	ldr	r0, [pc, #436]	; (8002e94 <MX_GPIO_Init+0x2b0>)
 8002ce0:	f006 f928 	bl	8008f34 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2130      	movs	r1, #48	; 0x30
 8002ce8:	486b      	ldr	r0, [pc, #428]	; (8002e98 <MX_GPIO_Init+0x2b4>)
 8002cea:	f006 f923 	bl	8008f34 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	486a      	ldr	r0, [pc, #424]	; (8002e9c <MX_GPIO_Init+0x2b8>)
 8002cf4:	f006 f91e 	bl	8008f34 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, PYRO2_Pin | PYRO3_Pin | PYRO4_Pin, GPIO_PIN_RESET);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002cfe:	4868      	ldr	r0, [pc, #416]	; (8002ea0 <MX_GPIO_Init+0x2bc>)
 8002d00:	f006 f918 	bl	8008f34 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3,
 8002d04:	2200      	movs	r2, #0
 8002d06:	210e      	movs	r1, #14
 8002d08:	4866      	ldr	r0, [pc, #408]	; (8002ea4 <MX_GPIO_Init+0x2c0>)
 8002d0a:	f006 f913 	bl	8008f34 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0,
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f240 3101 	movw	r1, #769	; 0x301
 8002d14:	4864      	ldr	r0, [pc, #400]	; (8002ea8 <MX_GPIO_Init+0x2c4>)
 8002d16:	f006 f90d 	bl	8008f34 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin;
 8002d1a:	f241 5304 	movw	r3, #5380	; 0x1504
 8002d1e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d20:	2301      	movs	r3, #1
 8002d22:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d2c:	f107 031c 	add.w	r3, r7, #28
 8002d30:	4619      	mov	r1, r3
 8002d32:	4857      	ldr	r0, [pc, #348]	; (8002e90 <MX_GPIO_Init+0x2ac>)
 8002d34:	f005 ff3e 	bl	8008bb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARM1_Pin PA15 */
	GPIO_InitStruct.Pin = ARM1_Pin | GPIO_PIN_15;
 8002d38:	f248 0302 	movw	r3, #32770	; 0x8002
 8002d3c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d46:	2300      	movs	r3, #0
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4a:	f107 031c 	add.w	r3, r7, #28
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4850      	ldr	r0, [pc, #320]	; (8002e94 <MX_GPIO_Init+0x2b0>)
 8002d52:	f005 ff2f 	bl	8008bb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC4 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8002d56:	2330      	movs	r3, #48	; 0x30
 8002d58:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d62:	2300      	movs	r3, #0
 8002d64:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d66:	f107 031c 	add.w	r3, r7, #28
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	484a      	ldr	r0, [pc, #296]	; (8002e98 <MX_GPIO_Init+0x2b4>)
 8002d6e:	f005 ff21 	bl	8008bb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PYRO1_Pin */
	GPIO_InitStruct.Pin = PYRO1_Pin;
 8002d72:	2302      	movs	r3, #2
 8002d74:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d76:	2301      	movs	r3, #1
 8002d78:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8002d82:	f107 031c 	add.w	r3, r7, #28
 8002d86:	4619      	mov	r1, r3
 8002d88:	4844      	ldr	r0, [pc, #272]	; (8002e9c <MX_GPIO_Init+0x2b8>)
 8002d8a:	f005 ff13 	bl	8008bb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT1_Pin */
	GPIO_InitStruct.Pin = CONT1_Pin;
 8002d8e:	2304      	movs	r3, #4
 8002d90:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d96:	2301      	movs	r3, #1
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002d9a:	f107 031c 	add.w	r3, r7, #28
 8002d9e:	4619      	mov	r1, r3
 8002da0:	483e      	ldr	r0, [pc, #248]	; (8002e9c <MX_GPIO_Init+0x2b8>)
 8002da2:	f005 ff07 	bl	8008bb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
	GPIO_InitStruct.Pin = PYRO2_Pin | PYRO3_Pin | PYRO4_Pin;
 8002da6:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002daa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dac:	2301      	movs	r3, #1
 8002dae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002db8:	f107 031c 	add.w	r3, r7, #28
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4838      	ldr	r0, [pc, #224]	; (8002ea0 <MX_GPIO_Init+0x2bc>)
 8002dc0:	f005 fef8 	bl	8008bb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT2_Pin CONT3_Pin */
	GPIO_InitStruct.Pin = CONT2_Pin | CONT3_Pin;
 8002dc4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002dc8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dd2:	f107 031c 	add.w	r3, r7, #28
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4831      	ldr	r0, [pc, #196]	; (8002ea0 <MX_GPIO_Init+0x2bc>)
 8002dda:	f005 feeb 	bl	8008bb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT4_Pin */
	GPIO_InitStruct.Pin = CONT4_Pin;
 8002dde:	2301      	movs	r3, #1
 8002de0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002de2:	2300      	movs	r3, #0
 8002de4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de6:	2301      	movs	r3, #1
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002dea:	f107 031c 	add.w	r3, r7, #28
 8002dee:	4619      	mov	r1, r3
 8002df0:	482c      	ldr	r0, [pc, #176]	; (8002ea4 <MX_GPIO_Init+0x2c0>)
 8002df2:	f005 fedf 	bl	8008bb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
	GPIO_InitStruct.Pin = PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3;
 8002df6:	230e      	movs	r3, #14
 8002df8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e02:	2300      	movs	r3, #0
 8002e04:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e06:	f107 031c 	add.w	r3, r7, #28
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4825      	ldr	r0, [pc, #148]	; (8002ea4 <MX_GPIO_Init+0x2c0>)
 8002e0e:	f005 fed1 	bl	8008bb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
	GPIO_InitStruct.Pin = CONT5_Pin | CONT6_Pin | CONT7_Pin | CONT8_Pin;
 8002e12:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002e16:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e20:	f107 031c 	add.w	r3, r7, #28
 8002e24:	4619      	mov	r1, r3
 8002e26:	481a      	ldr	r0, [pc, #104]	; (8002e90 <MX_GPIO_Init+0x2ac>)
 8002e28:	f005 fec4 	bl	8008bb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD0 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0;
 8002e2c:	f240 3301 	movw	r3, #769	; 0x301
 8002e30:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e32:	2301      	movs	r3, #1
 8002e34:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e3e:	f107 031c 	add.w	r3, r7, #28
 8002e42:	4619      	mov	r1, r3
 8002e44:	4818      	ldr	r0, [pc, #96]	; (8002ea8 <MX_GPIO_Init+0x2c4>)
 8002e46:	f005 feb5 	bl	8008bb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : Servo_ARM_CHECK_Pin */
	GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002e4a:	2310      	movs	r3, #16
 8002e4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002e56:	f107 031c 	add.w	r3, r7, #28
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4811      	ldr	r0, [pc, #68]	; (8002ea4 <MX_GPIO_Init+0x2c0>)
 8002e5e:	f005 fea9 	bl	8008bb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e66:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e70:	2300      	movs	r3, #0
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e74:	2300      	movs	r3, #0
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e78:	f107 031c 	add.w	r3, r7, #28
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4805      	ldr	r0, [pc, #20]	; (8002e94 <MX_GPIO_Init+0x2b0>)
 8002e80:	f005 fe98 	bl	8008bb4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002e84:	bf00      	nop
 8002e86:	3730      	adds	r7, #48	; 0x30
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	58024400 	.word	0x58024400
 8002e90:	58021000 	.word	0x58021000
 8002e94:	58020000 	.word	0x58020000
 8002e98:	58020800 	.word	0x58020800
 8002e9c:	58020400 	.word	0x58020400
 8002ea0:	58021400 	.word	0x58021400
 8002ea4:	58021800 	.word	0x58021800
 8002ea8:	58020c00 	.word	0x58020c00

08002eac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb0:	b672      	cpsid	i
}
 8002eb2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002eb4:	e7fe      	b.n	8002eb4 <Error_Handler+0x8>
	...

08002eb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <HAL_MspInit+0x30>)
 8002ec0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ec4:	4a08      	ldr	r2, [pc, #32]	; (8002ee8 <HAL_MspInit+0x30>)
 8002ec6:	f043 0302 	orr.w	r3, r3, #2
 8002eca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_MspInit+0x30>)
 8002ed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	58024400 	.word	0x58024400

08002eec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08c      	sub	sp, #48	; 0x30
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 031c 	add.w	r3, r7, #28
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a5d      	ldr	r2, [pc, #372]	; (8003080 <HAL_ADC_MspInit+0x194>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d159      	bne.n	8002fc2 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f0e:	4b5d      	ldr	r3, [pc, #372]	; (8003084 <HAL_ADC_MspInit+0x198>)
 8002f10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f14:	4a5b      	ldr	r2, [pc, #364]	; (8003084 <HAL_ADC_MspInit+0x198>)
 8002f16:	f043 0320 	orr.w	r3, r3, #32
 8002f1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f1e:	4b59      	ldr	r3, [pc, #356]	; (8003084 <HAL_ADC_MspInit+0x198>)
 8002f20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	61bb      	str	r3, [r7, #24]
 8002f2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2c:	4b55      	ldr	r3, [pc, #340]	; (8003084 <HAL_ADC_MspInit+0x198>)
 8002f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f32:	4a54      	ldr	r2, [pc, #336]	; (8003084 <HAL_ADC_MspInit+0x198>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f3c:	4b51      	ldr	r3, [pc, #324]	; (8003084 <HAL_ADC_MspInit+0x198>)
 8002f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f56:	f107 031c 	add.w	r3, r7, #28
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	484a      	ldr	r0, [pc, #296]	; (8003088 <HAL_ADC_MspInit+0x19c>)
 8002f5e:	f005 fe29 	bl	8008bb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002f62:	4b4a      	ldr	r3, [pc, #296]	; (800308c <HAL_ADC_MspInit+0x1a0>)
 8002f64:	4a4a      	ldr	r2, [pc, #296]	; (8003090 <HAL_ADC_MspInit+0x1a4>)
 8002f66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002f68:	4b48      	ldr	r3, [pc, #288]	; (800308c <HAL_ADC_MspInit+0x1a0>)
 8002f6a:	2209      	movs	r2, #9
 8002f6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f6e:	4b47      	ldr	r3, [pc, #284]	; (800308c <HAL_ADC_MspInit+0x1a0>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f74:	4b45      	ldr	r3, [pc, #276]	; (800308c <HAL_ADC_MspInit+0x1a0>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f7a:	4b44      	ldr	r3, [pc, #272]	; (800308c <HAL_ADC_MspInit+0x1a0>)
 8002f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f82:	4b42      	ldr	r3, [pc, #264]	; (800308c <HAL_ADC_MspInit+0x1a0>)
 8002f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f8a:	4b40      	ldr	r3, [pc, #256]	; (800308c <HAL_ADC_MspInit+0x1a0>)
 8002f8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002f92:	4b3e      	ldr	r3, [pc, #248]	; (800308c <HAL_ADC_MspInit+0x1a0>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f98:	4b3c      	ldr	r3, [pc, #240]	; (800308c <HAL_ADC_MspInit+0x1a0>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f9e:	4b3b      	ldr	r3, [pc, #236]	; (800308c <HAL_ADC_MspInit+0x1a0>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002fa4:	4839      	ldr	r0, [pc, #228]	; (800308c <HAL_ADC_MspInit+0x1a0>)
 8002fa6:	f003 f9cd 	bl	8006344 <HAL_DMA_Init>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002fb0:	f7ff ff7c 	bl	8002eac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a35      	ldr	r2, [pc, #212]	; (800308c <HAL_ADC_MspInit+0x1a0>)
 8002fb8:	659a      	str	r2, [r3, #88]	; 0x58
 8002fba:	4a34      	ldr	r2, [pc, #208]	; (800308c <HAL_ADC_MspInit+0x1a0>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002fc0:	e059      	b.n	8003076 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a33      	ldr	r2, [pc, #204]	; (8003094 <HAL_ADC_MspInit+0x1a8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d154      	bne.n	8003076 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <HAL_ADC_MspInit+0x198>)
 8002fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd2:	4a2c      	ldr	r2, [pc, #176]	; (8003084 <HAL_ADC_MspInit+0x198>)
 8002fd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fdc:	4b29      	ldr	r3, [pc, #164]	; (8003084 <HAL_ADC_MspInit+0x198>)
 8002fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fea:	4b26      	ldr	r3, [pc, #152]	; (8003084 <HAL_ADC_MspInit+0x198>)
 8002fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff0:	4a24      	ldr	r2, [pc, #144]	; (8003084 <HAL_ADC_MspInit+0x198>)
 8002ff2:	f043 0304 	orr.w	r3, r3, #4
 8002ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ffa:	4b22      	ldr	r3, [pc, #136]	; (8003084 <HAL_ADC_MspInit+0x198>)
 8002ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003008:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800300c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003010:	f001 f8b6 	bl	8004180 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8003014:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_ADC_MspInit+0x1ac>)
 8003016:	4a21      	ldr	r2, [pc, #132]	; (800309c <HAL_ADC_MspInit+0x1b0>)
 8003018:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800301a:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <HAL_ADC_MspInit+0x1ac>)
 800301c:	2273      	movs	r2, #115	; 0x73
 800301e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003020:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_ADC_MspInit+0x1ac>)
 8003022:	2200      	movs	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003026:	4b1c      	ldr	r3, [pc, #112]	; (8003098 <HAL_ADC_MspInit+0x1ac>)
 8003028:	2200      	movs	r2, #0
 800302a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800302c:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <HAL_ADC_MspInit+0x1ac>)
 800302e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003032:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003034:	4b18      	ldr	r3, [pc, #96]	; (8003098 <HAL_ADC_MspInit+0x1ac>)
 8003036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800303a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800303c:	4b16      	ldr	r3, [pc, #88]	; (8003098 <HAL_ADC_MspInit+0x1ac>)
 800303e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003042:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003044:	4b14      	ldr	r3, [pc, #80]	; (8003098 <HAL_ADC_MspInit+0x1ac>)
 8003046:	f44f 7280 	mov.w	r2, #256	; 0x100
 800304a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800304c:	4b12      	ldr	r3, [pc, #72]	; (8003098 <HAL_ADC_MspInit+0x1ac>)
 800304e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003052:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_ADC_MspInit+0x1ac>)
 8003056:	2200      	movs	r2, #0
 8003058:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800305a:	480f      	ldr	r0, [pc, #60]	; (8003098 <HAL_ADC_MspInit+0x1ac>)
 800305c:	f003 f972 	bl	8006344 <HAL_DMA_Init>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8003066:	f7ff ff21 	bl	8002eac <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <HAL_ADC_MspInit+0x1ac>)
 800306e:	659a      	str	r2, [r3, #88]	; 0x58
 8003070:	4a09      	ldr	r2, [pc, #36]	; (8003098 <HAL_ADC_MspInit+0x1ac>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003076:	bf00      	nop
 8003078:	3730      	adds	r7, #48	; 0x30
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40022000 	.word	0x40022000
 8003084:	58024400 	.word	0x58024400
 8003088:	58020000 	.word	0x58020000
 800308c:	24000d4c 	.word	0x24000d4c
 8003090:	40020088 	.word	0x40020088
 8003094:	58026000 	.word	0x58026000
 8003098:	24000dc4 	.word	0x24000dc4
 800309c:	400204b8 	.word	0x400204b8

080030a0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b0b8      	sub	sp, #224	; 0xe0
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030b8:	f107 0310 	add.w	r3, r7, #16
 80030bc:	22b8      	movs	r2, #184	; 0xb8
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f018 fe6e 	bl	801bda2 <memset>
  if(hfdcan->Instance==FDCAN3)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a26      	ldr	r2, [pc, #152]	; (8003164 <HAL_FDCAN_MspInit+0xc4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d145      	bne.n	800315c <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80030d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80030dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80030e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030e2:	f107 0310 	add.w	r3, r7, #16
 80030e6:	4618      	mov	r0, r3
 80030e8:	f008 fb52 	bl	800b790 <HAL_RCCEx_PeriphCLKConfig>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80030f2:	f7ff fedb 	bl	8002eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80030f6:	4b1c      	ldr	r3, [pc, #112]	; (8003168 <HAL_FDCAN_MspInit+0xc8>)
 80030f8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80030fc:	4a1a      	ldr	r2, [pc, #104]	; (8003168 <HAL_FDCAN_MspInit+0xc8>)
 80030fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003102:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003106:	4b18      	ldr	r3, [pc, #96]	; (8003168 <HAL_FDCAN_MspInit+0xc8>)
 8003108:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003114:	4b14      	ldr	r3, [pc, #80]	; (8003168 <HAL_FDCAN_MspInit+0xc8>)
 8003116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800311a:	4a13      	ldr	r2, [pc, #76]	; (8003168 <HAL_FDCAN_MspInit+0xc8>)
 800311c:	f043 0320 	orr.w	r3, r3, #32
 8003120:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003124:	4b10      	ldr	r3, [pc, #64]	; (8003168 <HAL_FDCAN_MspInit+0xc8>)
 8003126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003132:	23c0      	movs	r3, #192	; 0xc0
 8003134:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 800314a:	2302      	movs	r3, #2
 800314c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003150:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003154:	4619      	mov	r1, r3
 8003156:	4805      	ldr	r0, [pc, #20]	; (800316c <HAL_FDCAN_MspInit+0xcc>)
 8003158:	f005 fd2c 	bl	8008bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800315c:	bf00      	nop
 800315e:	37e0      	adds	r7, #224	; 0xe0
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	4000d400 	.word	0x4000d400
 8003168:	58024400 	.word	0x58024400
 800316c:	58021400 	.word	0x58021400

08003170 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b0b8      	sub	sp, #224	; 0xe0
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003188:	f107 0310 	add.w	r3, r7, #16
 800318c:	22b8      	movs	r2, #184	; 0xb8
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f018 fe06 	bl	801bda2 <memset>
  if(hi2c->Instance==I2C2)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <HAL_I2C_MspInit+0xd4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d14d      	bne.n	800323c <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80031a0:	f04f 0208 	mov.w	r2, #8
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031b2:	f107 0310 	add.w	r3, r7, #16
 80031b6:	4618      	mov	r0, r3
 80031b8:	f008 faea 	bl	800b790 <HAL_RCCEx_PeriphCLKConfig>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80031c2:	f7ff fe73 	bl	8002eac <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <HAL_I2C_MspInit+0xd8>)
 80031c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031cc:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <HAL_I2C_MspInit+0xd8>)
 80031ce:	f043 0320 	orr.w	r3, r3, #32
 80031d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031d6:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <HAL_I2C_MspInit+0xd8>)
 80031d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031e4:	2303      	movs	r3, #3
 80031e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031ea:	2312      	movs	r3, #18
 80031ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031fc:	2304      	movs	r3, #4
 80031fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003202:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003206:	4619      	mov	r1, r3
 8003208:	4810      	ldr	r0, [pc, #64]	; (800324c <HAL_I2C_MspInit+0xdc>)
 800320a:	f005 fcd3 	bl	8008bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <HAL_I2C_MspInit+0xd8>)
 8003210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003214:	4a0c      	ldr	r2, [pc, #48]	; (8003248 <HAL_I2C_MspInit+0xd8>)
 8003216:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800321a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_I2C_MspInit+0xd8>)
 8003220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800322c:	2200      	movs	r2, #0
 800322e:	2101      	movs	r1, #1
 8003230:	2021      	movs	r0, #33	; 0x21
 8003232:	f003 f852 	bl	80062da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003236:	2021      	movs	r0, #33	; 0x21
 8003238:	f003 f869 	bl	800630e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800323c:	bf00      	nop
 800323e:	37e0      	adds	r7, #224	; 0xe0
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40005800 	.word	0x40005800
 8003248:	58024400 	.word	0x58024400
 800324c:	58021400 	.word	0x58021400

08003250 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b0ba      	sub	sp, #232	; 0xe8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003258:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003268:	f107 0318 	add.w	r3, r7, #24
 800326c:	22b8      	movs	r2, #184	; 0xb8
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f018 fd96 	bl	801bda2 <memset>
  if(hsd->Instance==SDMMC2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a5d      	ldr	r2, [pc, #372]	; (80033f0 <HAL_SD_MspInit+0x1a0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	f040 80b3 	bne.w	80033e8 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003282:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800328e:	2300      	movs	r3, #0
 8003290:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003292:	f107 0318 	add.w	r3, r7, #24
 8003296:	4618      	mov	r0, r3
 8003298:	f008 fa7a 	bl	800b790 <HAL_RCCEx_PeriphCLKConfig>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 80032a2:	f7ff fe03 	bl	8002eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80032a6:	4b53      	ldr	r3, [pc, #332]	; (80033f4 <HAL_SD_MspInit+0x1a4>)
 80032a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80032ac:	4a51      	ldr	r2, [pc, #324]	; (80033f4 <HAL_SD_MspInit+0x1a4>)
 80032ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032b2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80032b6:	4b4f      	ldr	r3, [pc, #316]	; (80033f4 <HAL_SD_MspInit+0x1a4>)
 80032b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80032bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032c4:	4b4b      	ldr	r3, [pc, #300]	; (80033f4 <HAL_SD_MspInit+0x1a4>)
 80032c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ca:	4a4a      	ldr	r2, [pc, #296]	; (80033f4 <HAL_SD_MspInit+0x1a4>)
 80032cc:	f043 0308 	orr.w	r3, r3, #8
 80032d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032d4:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_SD_MspInit+0x1a4>)
 80032d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032e2:	4b44      	ldr	r3, [pc, #272]	; (80033f4 <HAL_SD_MspInit+0x1a4>)
 80032e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e8:	4a42      	ldr	r2, [pc, #264]	; (80033f4 <HAL_SD_MspInit+0x1a4>)
 80032ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032f2:	4b40      	ldr	r3, [pc, #256]	; (80033f4 <HAL_SD_MspInit+0x1a4>)
 80032f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003300:	2340      	movs	r3, #64	; 0x40
 8003302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003306:	2302      	movs	r3, #2
 8003308:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003312:	2303      	movs	r3, #3
 8003314:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003318:	230b      	movs	r3, #11
 800331a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800331e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003322:	4619      	mov	r1, r3
 8003324:	4834      	ldr	r0, [pc, #208]	; (80033f8 <HAL_SD_MspInit+0x1a8>)
 8003326:	f005 fc45 	bl	8008bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003330:	2302      	movs	r3, #2
 8003332:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003336:	2301      	movs	r3, #1
 8003338:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800333c:	2303      	movs	r3, #3
 800333e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003342:	230b      	movs	r3, #11
 8003344:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003348:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800334c:	4619      	mov	r1, r3
 800334e:	482a      	ldr	r0, [pc, #168]	; (80033f8 <HAL_SD_MspInit+0x1a8>)
 8003350:	f005 fc30 	bl	8008bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003358:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335c:	2302      	movs	r3, #2
 800335e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003362:	2301      	movs	r3, #1
 8003364:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003368:	2303      	movs	r3, #3
 800336a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800336e:	230b      	movs	r3, #11
 8003370:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003374:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003378:	4619      	mov	r1, r3
 800337a:	4820      	ldr	r0, [pc, #128]	; (80033fc <HAL_SD_MspInit+0x1ac>)
 800337c:	f005 fc1a 	bl	8008bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003388:	2302      	movs	r3, #2
 800338a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338e:	2300      	movs	r3, #0
 8003390:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003394:	2303      	movs	r3, #3
 8003396:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800339a:	230b      	movs	r3, #11
 800339c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4815      	ldr	r0, [pc, #84]	; (80033fc <HAL_SD_MspInit+0x1ac>)
 80033a8:	f005 fc04 	bl	8008bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80033ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80033b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c0:	2303      	movs	r3, #3
 80033c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80033c6:	230a      	movs	r3, #10
 80033c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033d0:	4619      	mov	r1, r3
 80033d2:	480a      	ldr	r0, [pc, #40]	; (80033fc <HAL_SD_MspInit+0x1ac>)
 80033d4:	f005 fbee 	bl	8008bb4 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 80033d8:	2200      	movs	r2, #0
 80033da:	2100      	movs	r1, #0
 80033dc:	207c      	movs	r0, #124	; 0x7c
 80033de:	f002 ff7c 	bl	80062da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 80033e2:	207c      	movs	r0, #124	; 0x7c
 80033e4:	f002 ff93 	bl	800630e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80033e8:	bf00      	nop
 80033ea:	37e8      	adds	r7, #232	; 0xe8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	48022400 	.word	0x48022400
 80033f4:	58024400 	.word	0x58024400
 80033f8:	58020c00 	.word	0x58020c00
 80033fc:	58021800 	.word	0x58021800

08003400 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08e      	sub	sp, #56	; 0x38
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a4f      	ldr	r2, [pc, #316]	; (800355c <HAL_SPI_MspInit+0x15c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d12e      	bne.n	8003480 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003422:	4b4f      	ldr	r3, [pc, #316]	; (8003560 <HAL_SPI_MspInit+0x160>)
 8003424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003428:	4a4d      	ldr	r2, [pc, #308]	; (8003560 <HAL_SPI_MspInit+0x160>)
 800342a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800342e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003432:	4b4b      	ldr	r3, [pc, #300]	; (8003560 <HAL_SPI_MspInit+0x160>)
 8003434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800343c:	623b      	str	r3, [r7, #32]
 800343e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003440:	4b47      	ldr	r3, [pc, #284]	; (8003560 <HAL_SPI_MspInit+0x160>)
 8003442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003446:	4a46      	ldr	r2, [pc, #280]	; (8003560 <HAL_SPI_MspInit+0x160>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003450:	4b43      	ldr	r3, [pc, #268]	; (8003560 <HAL_SPI_MspInit+0x160>)
 8003452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800345e:	23e0      	movs	r3, #224	; 0xe0
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003462:	2302      	movs	r3, #2
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346a:	2300      	movs	r3, #0
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800346e:	2305      	movs	r3, #5
 8003470:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003476:	4619      	mov	r1, r3
 8003478:	483a      	ldr	r0, [pc, #232]	; (8003564 <HAL_SPI_MspInit+0x164>)
 800347a:	f005 fb9b 	bl	8008bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800347e:	e068      	b.n	8003552 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a38      	ldr	r2, [pc, #224]	; (8003568 <HAL_SPI_MspInit+0x168>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d12f      	bne.n	80034ea <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800348a:	4b35      	ldr	r3, [pc, #212]	; (8003560 <HAL_SPI_MspInit+0x160>)
 800348c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003490:	4a33      	ldr	r2, [pc, #204]	; (8003560 <HAL_SPI_MspInit+0x160>)
 8003492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003496:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800349a:	4b31      	ldr	r3, [pc, #196]	; (8003560 <HAL_SPI_MspInit+0x160>)
 800349c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a8:	4b2d      	ldr	r3, [pc, #180]	; (8003560 <HAL_SPI_MspInit+0x160>)
 80034aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ae:	4a2c      	ldr	r2, [pc, #176]	; (8003560 <HAL_SPI_MspInit+0x160>)
 80034b0:	f043 0302 	orr.w	r3, r3, #2
 80034b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034b8:	4b29      	ldr	r3, [pc, #164]	; (8003560 <HAL_SPI_MspInit+0x160>)
 80034ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80034c6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034cc:	2302      	movs	r3, #2
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d4:	2300      	movs	r3, #0
 80034d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034d8:	2305      	movs	r3, #5
 80034da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e0:	4619      	mov	r1, r3
 80034e2:	4822      	ldr	r0, [pc, #136]	; (800356c <HAL_SPI_MspInit+0x16c>)
 80034e4:	f005 fb66 	bl	8008bb4 <HAL_GPIO_Init>
}
 80034e8:	e033      	b.n	8003552 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a20      	ldr	r2, [pc, #128]	; (8003570 <HAL_SPI_MspInit+0x170>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d12e      	bne.n	8003552 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034f4:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <HAL_SPI_MspInit+0x160>)
 80034f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034fa:	4a19      	ldr	r2, [pc, #100]	; (8003560 <HAL_SPI_MspInit+0x160>)
 80034fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003500:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003504:	4b16      	ldr	r3, [pc, #88]	; (8003560 <HAL_SPI_MspInit+0x160>)
 8003506:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800350a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003512:	4b13      	ldr	r3, [pc, #76]	; (8003560 <HAL_SPI_MspInit+0x160>)
 8003514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003518:	4a11      	ldr	r2, [pc, #68]	; (8003560 <HAL_SPI_MspInit+0x160>)
 800351a:	f043 0304 	orr.w	r3, r3, #4
 800351e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <HAL_SPI_MspInit+0x160>)
 8003524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003530:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353e:	2300      	movs	r3, #0
 8003540:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003542:	2306      	movs	r3, #6
 8003544:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800354a:	4619      	mov	r1, r3
 800354c:	4809      	ldr	r0, [pc, #36]	; (8003574 <HAL_SPI_MspInit+0x174>)
 800354e:	f005 fb31 	bl	8008bb4 <HAL_GPIO_Init>
}
 8003552:	bf00      	nop
 8003554:	3738      	adds	r7, #56	; 0x38
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40013000 	.word	0x40013000
 8003560:	58024400 	.word	0x58024400
 8003564:	58020000 	.word	0x58020000
 8003568:	40003800 	.word	0x40003800
 800356c:	58020400 	.word	0x58020400
 8003570:	40003c00 	.word	0x40003c00
 8003574:	58020800 	.word	0x58020800

08003578 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08c      	sub	sp, #48	; 0x30
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003580:	f107 031c 	add.w	r3, r7, #28
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003598:	d15d      	bne.n	8003656 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800359a:	4b8e      	ldr	r3, [pc, #568]	; (80037d4 <HAL_TIM_PWM_MspInit+0x25c>)
 800359c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035a0:	4a8c      	ldr	r2, [pc, #560]	; (80037d4 <HAL_TIM_PWM_MspInit+0x25c>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035aa:	4b8a      	ldr	r3, [pc, #552]	; (80037d4 <HAL_TIM_PWM_MspInit+0x25c>)
 80035ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b8:	4b86      	ldr	r3, [pc, #536]	; (80037d4 <HAL_TIM_PWM_MspInit+0x25c>)
 80035ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035be:	4a85      	ldr	r2, [pc, #532]	; (80037d4 <HAL_TIM_PWM_MspInit+0x25c>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035c8:	4b82      	ldr	r3, [pc, #520]	; (80037d4 <HAL_TIM_PWM_MspInit+0x25c>)
 80035ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035d6:	2301      	movs	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035da:	2302      	movs	r3, #2
 80035dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e2:	2300      	movs	r3, #0
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035e6:	2301      	movs	r3, #1
 80035e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ea:	f107 031c 	add.w	r3, r7, #28
 80035ee:	4619      	mov	r1, r3
 80035f0:	4879      	ldr	r0, [pc, #484]	; (80037d8 <HAL_TIM_PWM_MspInit+0x260>)
 80035f2:	f005 fadf 	bl	8008bb4 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80035f6:	4b79      	ldr	r3, [pc, #484]	; (80037dc <HAL_TIM_PWM_MspInit+0x264>)
 80035f8:	4a79      	ldr	r2, [pc, #484]	; (80037e0 <HAL_TIM_PWM_MspInit+0x268>)
 80035fa:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80035fc:	4b77      	ldr	r3, [pc, #476]	; (80037dc <HAL_TIM_PWM_MspInit+0x264>)
 80035fe:	2214      	movs	r2, #20
 8003600:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003602:	4b76      	ldr	r3, [pc, #472]	; (80037dc <HAL_TIM_PWM_MspInit+0x264>)
 8003604:	2240      	movs	r2, #64	; 0x40
 8003606:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003608:	4b74      	ldr	r3, [pc, #464]	; (80037dc <HAL_TIM_PWM_MspInit+0x264>)
 800360a:	2200      	movs	r2, #0
 800360c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800360e:	4b73      	ldr	r3, [pc, #460]	; (80037dc <HAL_TIM_PWM_MspInit+0x264>)
 8003610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003614:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003616:	4b71      	ldr	r3, [pc, #452]	; (80037dc <HAL_TIM_PWM_MspInit+0x264>)
 8003618:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800361c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800361e:	4b6f      	ldr	r3, [pc, #444]	; (80037dc <HAL_TIM_PWM_MspInit+0x264>)
 8003620:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003624:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8003626:	4b6d      	ldr	r3, [pc, #436]	; (80037dc <HAL_TIM_PWM_MspInit+0x264>)
 8003628:	2200      	movs	r2, #0
 800362a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800362c:	4b6b      	ldr	r3, [pc, #428]	; (80037dc <HAL_TIM_PWM_MspInit+0x264>)
 800362e:	2200      	movs	r2, #0
 8003630:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003632:	4b6a      	ldr	r3, [pc, #424]	; (80037dc <HAL_TIM_PWM_MspInit+0x264>)
 8003634:	2200      	movs	r2, #0
 8003636:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003638:	4868      	ldr	r0, [pc, #416]	; (80037dc <HAL_TIM_PWM_MspInit+0x264>)
 800363a:	f002 fe83 	bl	8006344 <HAL_DMA_Init>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003644:	f7ff fc32 	bl	8002eac <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a64      	ldr	r2, [pc, #400]	; (80037dc <HAL_TIM_PWM_MspInit+0x264>)
 800364c:	62da      	str	r2, [r3, #44]	; 0x2c
 800364e:	4a63      	ldr	r2, [pc, #396]	; (80037dc <HAL_TIM_PWM_MspInit+0x264>)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003654:	e119      	b.n	800388a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a62      	ldr	r2, [pc, #392]	; (80037e4 <HAL_TIM_PWM_MspInit+0x26c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d16d      	bne.n	800373c <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003660:	4b5c      	ldr	r3, [pc, #368]	; (80037d4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003662:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003666:	4a5b      	ldr	r2, [pc, #364]	; (80037d4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003668:	f043 0302 	orr.w	r3, r3, #2
 800366c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003670:	4b58      	ldr	r3, [pc, #352]	; (80037d4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003672:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 800367e:	4b5a      	ldr	r3, [pc, #360]	; (80037e8 <HAL_TIM_PWM_MspInit+0x270>)
 8003680:	4a5a      	ldr	r2, [pc, #360]	; (80037ec <HAL_TIM_PWM_MspInit+0x274>)
 8003682:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003684:	4b58      	ldr	r3, [pc, #352]	; (80037e8 <HAL_TIM_PWM_MspInit+0x270>)
 8003686:	2218      	movs	r2, #24
 8003688:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800368a:	4b57      	ldr	r3, [pc, #348]	; (80037e8 <HAL_TIM_PWM_MspInit+0x270>)
 800368c:	2240      	movs	r2, #64	; 0x40
 800368e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003690:	4b55      	ldr	r3, [pc, #340]	; (80037e8 <HAL_TIM_PWM_MspInit+0x270>)
 8003692:	2200      	movs	r2, #0
 8003694:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003696:	4b54      	ldr	r3, [pc, #336]	; (80037e8 <HAL_TIM_PWM_MspInit+0x270>)
 8003698:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800369c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800369e:	4b52      	ldr	r3, [pc, #328]	; (80037e8 <HAL_TIM_PWM_MspInit+0x270>)
 80036a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036a4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036a6:	4b50      	ldr	r3, [pc, #320]	; (80037e8 <HAL_TIM_PWM_MspInit+0x270>)
 80036a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036ac:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80036ae:	4b4e      	ldr	r3, [pc, #312]	; (80037e8 <HAL_TIM_PWM_MspInit+0x270>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80036b4:	4b4c      	ldr	r3, [pc, #304]	; (80037e8 <HAL_TIM_PWM_MspInit+0x270>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ba:	4b4b      	ldr	r3, [pc, #300]	; (80037e8 <HAL_TIM_PWM_MspInit+0x270>)
 80036bc:	2200      	movs	r2, #0
 80036be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80036c0:	4849      	ldr	r0, [pc, #292]	; (80037e8 <HAL_TIM_PWM_MspInit+0x270>)
 80036c2:	f002 fe3f 	bl	8006344 <HAL_DMA_Init>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80036cc:	f7ff fbee 	bl	8002eac <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a45      	ldr	r2, [pc, #276]	; (80037e8 <HAL_TIM_PWM_MspInit+0x270>)
 80036d4:	629a      	str	r2, [r3, #40]	; 0x28
 80036d6:	4a44      	ldr	r2, [pc, #272]	; (80037e8 <HAL_TIM_PWM_MspInit+0x270>)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80036dc:	4b44      	ldr	r3, [pc, #272]	; (80037f0 <HAL_TIM_PWM_MspInit+0x278>)
 80036de:	4a45      	ldr	r2, [pc, #276]	; (80037f4 <HAL_TIM_PWM_MspInit+0x27c>)
 80036e0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80036e2:	4b43      	ldr	r3, [pc, #268]	; (80037f0 <HAL_TIM_PWM_MspInit+0x278>)
 80036e4:	2217      	movs	r2, #23
 80036e6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036e8:	4b41      	ldr	r3, [pc, #260]	; (80037f0 <HAL_TIM_PWM_MspInit+0x278>)
 80036ea:	2240      	movs	r2, #64	; 0x40
 80036ec:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ee:	4b40      	ldr	r3, [pc, #256]	; (80037f0 <HAL_TIM_PWM_MspInit+0x278>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80036f4:	4b3e      	ldr	r3, [pc, #248]	; (80037f0 <HAL_TIM_PWM_MspInit+0x278>)
 80036f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036fa:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036fc:	4b3c      	ldr	r3, [pc, #240]	; (80037f0 <HAL_TIM_PWM_MspInit+0x278>)
 80036fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003702:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003704:	4b3a      	ldr	r3, [pc, #232]	; (80037f0 <HAL_TIM_PWM_MspInit+0x278>)
 8003706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800370a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800370c:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <HAL_TIM_PWM_MspInit+0x278>)
 800370e:	2200      	movs	r2, #0
 8003710:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003712:	4b37      	ldr	r3, [pc, #220]	; (80037f0 <HAL_TIM_PWM_MspInit+0x278>)
 8003714:	2200      	movs	r2, #0
 8003716:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003718:	4b35      	ldr	r3, [pc, #212]	; (80037f0 <HAL_TIM_PWM_MspInit+0x278>)
 800371a:	2200      	movs	r2, #0
 800371c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800371e:	4834      	ldr	r0, [pc, #208]	; (80037f0 <HAL_TIM_PWM_MspInit+0x278>)
 8003720:	f002 fe10 	bl	8006344 <HAL_DMA_Init>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 800372a:	f7ff fbbf 	bl	8002eac <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a2f      	ldr	r2, [pc, #188]	; (80037f0 <HAL_TIM_PWM_MspInit+0x278>)
 8003732:	625a      	str	r2, [r3, #36]	; 0x24
 8003734:	4a2e      	ldr	r2, [pc, #184]	; (80037f0 <HAL_TIM_PWM_MspInit+0x278>)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6393      	str	r3, [r2, #56]	; 0x38
}
 800373a:	e0a6      	b.n	800388a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a2d      	ldr	r2, [pc, #180]	; (80037f8 <HAL_TIM_PWM_MspInit+0x280>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d15e      	bne.n	8003804 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003746:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800374c:	4a21      	ldr	r2, [pc, #132]	; (80037d4 <HAL_TIM_PWM_MspInit+0x25c>)
 800374e:	f043 0304 	orr.w	r3, r3, #4
 8003752:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003756:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003764:	4b25      	ldr	r3, [pc, #148]	; (80037fc <HAL_TIM_PWM_MspInit+0x284>)
 8003766:	4a26      	ldr	r2, [pc, #152]	; (8003800 <HAL_TIM_PWM_MspInit+0x288>)
 8003768:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 800376a:	4b24      	ldr	r3, [pc, #144]	; (80037fc <HAL_TIM_PWM_MspInit+0x284>)
 800376c:	221f      	movs	r2, #31
 800376e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003770:	4b22      	ldr	r3, [pc, #136]	; (80037fc <HAL_TIM_PWM_MspInit+0x284>)
 8003772:	2240      	movs	r2, #64	; 0x40
 8003774:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003776:	4b21      	ldr	r3, [pc, #132]	; (80037fc <HAL_TIM_PWM_MspInit+0x284>)
 8003778:	2200      	movs	r2, #0
 800377a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800377c:	4b1f      	ldr	r3, [pc, #124]	; (80037fc <HAL_TIM_PWM_MspInit+0x284>)
 800377e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003782:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <HAL_TIM_PWM_MspInit+0x284>)
 8003786:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800378a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <HAL_TIM_PWM_MspInit+0x284>)
 800378e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003792:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003794:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_TIM_PWM_MspInit+0x284>)
 8003796:	2200      	movs	r2, #0
 8003798:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800379a:	4b18      	ldr	r3, [pc, #96]	; (80037fc <HAL_TIM_PWM_MspInit+0x284>)
 800379c:	2200      	movs	r2, #0
 800379e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037a0:	4b16      	ldr	r3, [pc, #88]	; (80037fc <HAL_TIM_PWM_MspInit+0x284>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80037a6:	4815      	ldr	r0, [pc, #84]	; (80037fc <HAL_TIM_PWM_MspInit+0x284>)
 80037a8:	f002 fdcc 	bl	8006344 <HAL_DMA_Init>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 80037b2:	f7ff fb7b 	bl	8002eac <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a10      	ldr	r2, [pc, #64]	; (80037fc <HAL_TIM_PWM_MspInit+0x284>)
 80037ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80037bc:	4a0f      	ldr	r2, [pc, #60]	; (80037fc <HAL_TIM_PWM_MspInit+0x284>)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80037c2:	2200      	movs	r2, #0
 80037c4:	2100      	movs	r1, #0
 80037c6:	201e      	movs	r0, #30
 80037c8:	f002 fd87 	bl	80062da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80037cc:	201e      	movs	r0, #30
 80037ce:	f002 fd9e 	bl	800630e <HAL_NVIC_EnableIRQ>
}
 80037d2:	e05a      	b.n	800388a <HAL_TIM_PWM_MspInit+0x312>
 80037d4:	58024400 	.word	0x58024400
 80037d8:	58020000 	.word	0x58020000
 80037dc:	2400130c 	.word	0x2400130c
 80037e0:	40020028 	.word	0x40020028
 80037e4:	40000400 	.word	0x40000400
 80037e8:	24001384 	.word	0x24001384
 80037ec:	40020058 	.word	0x40020058
 80037f0:	240013fc 	.word	0x240013fc
 80037f4:	40020070 	.word	0x40020070
 80037f8:	40000800 	.word	0x40000800
 80037fc:	24001474 	.word	0x24001474
 8003800:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a22      	ldr	r2, [pc, #136]	; (8003894 <HAL_TIM_PWM_MspInit+0x31c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d13d      	bne.n	800388a <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800380e:	4b22      	ldr	r3, [pc, #136]	; (8003898 <HAL_TIM_PWM_MspInit+0x320>)
 8003810:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003814:	4a20      	ldr	r2, [pc, #128]	; (8003898 <HAL_TIM_PWM_MspInit+0x320>)
 8003816:	f043 0308 	orr.w	r3, r3, #8
 800381a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800381e:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <HAL_TIM_PWM_MspInit+0x320>)
 8003820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 800382c:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_TIM_PWM_MspInit+0x324>)
 800382e:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <HAL_TIM_PWM_MspInit+0x328>)
 8003830:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003832:	4b1a      	ldr	r3, [pc, #104]	; (800389c <HAL_TIM_PWM_MspInit+0x324>)
 8003834:	223a      	movs	r2, #58	; 0x3a
 8003836:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003838:	4b18      	ldr	r3, [pc, #96]	; (800389c <HAL_TIM_PWM_MspInit+0x324>)
 800383a:	2240      	movs	r2, #64	; 0x40
 800383c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800383e:	4b17      	ldr	r3, [pc, #92]	; (800389c <HAL_TIM_PWM_MspInit+0x324>)
 8003840:	2200      	movs	r2, #0
 8003842:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003844:	4b15      	ldr	r3, [pc, #84]	; (800389c <HAL_TIM_PWM_MspInit+0x324>)
 8003846:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800384a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800384c:	4b13      	ldr	r3, [pc, #76]	; (800389c <HAL_TIM_PWM_MspInit+0x324>)
 800384e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003852:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <HAL_TIM_PWM_MspInit+0x324>)
 8003856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800385a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 800385c:	4b0f      	ldr	r3, [pc, #60]	; (800389c <HAL_TIM_PWM_MspInit+0x324>)
 800385e:	2200      	movs	r2, #0
 8003860:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003862:	4b0e      	ldr	r3, [pc, #56]	; (800389c <HAL_TIM_PWM_MspInit+0x324>)
 8003864:	2200      	movs	r2, #0
 8003866:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <HAL_TIM_PWM_MspInit+0x324>)
 800386a:	2200      	movs	r2, #0
 800386c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800386e:	480b      	ldr	r0, [pc, #44]	; (800389c <HAL_TIM_PWM_MspInit+0x324>)
 8003870:	f002 fd68 	bl	8006344 <HAL_DMA_Init>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 800387a:	f7ff fb17 	bl	8002eac <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a06      	ldr	r2, [pc, #24]	; (800389c <HAL_TIM_PWM_MspInit+0x324>)
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
 8003884:	4a05      	ldr	r2, [pc, #20]	; (800389c <HAL_TIM_PWM_MspInit+0x324>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6393      	str	r3, [r2, #56]	; 0x38
}
 800388a:	bf00      	nop
 800388c:	3730      	adds	r7, #48	; 0x30
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40000c00 	.word	0x40000c00
 8003898:	58024400 	.word	0x58024400
 800389c:	240014ec 	.word	0x240014ec
 80038a0:	40020040 	.word	0x40020040

080038a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a16      	ldr	r2, [pc, #88]	; (800390c <HAL_TIM_Base_MspInit+0x68>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d10f      	bne.n	80038d6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80038b6:	4b16      	ldr	r3, [pc, #88]	; (8003910 <HAL_TIM_Base_MspInit+0x6c>)
 80038b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038bc:	4a14      	ldr	r2, [pc, #80]	; (8003910 <HAL_TIM_Base_MspInit+0x6c>)
 80038be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038c6:	4b12      	ldr	r3, [pc, #72]	; (8003910 <HAL_TIM_Base_MspInit+0x6c>)
 80038c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80038d4:	e013      	b.n	80038fe <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a0e      	ldr	r2, [pc, #56]	; (8003914 <HAL_TIM_Base_MspInit+0x70>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d10e      	bne.n	80038fe <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_TIM_Base_MspInit+0x6c>)
 80038e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038e6:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <HAL_TIM_Base_MspInit+0x6c>)
 80038e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038f0:	4b07      	ldr	r3, [pc, #28]	; (8003910 <HAL_TIM_Base_MspInit+0x6c>)
 80038f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	68bb      	ldr	r3, [r7, #8]
}
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40001c00 	.word	0x40001c00
 8003910:	58024400 	.word	0x58024400
 8003914:	40002000 	.word	0x40002000

08003918 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08c      	sub	sp, #48	; 0x30
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003920:	f107 031c 	add.w	r3, r7, #28
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003938:	d120      	bne.n	800397c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800393a:	4b52      	ldr	r3, [pc, #328]	; (8003a84 <HAL_TIM_MspPostInit+0x16c>)
 800393c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003940:	4a50      	ldr	r2, [pc, #320]	; (8003a84 <HAL_TIM_MspPostInit+0x16c>)
 8003942:	f043 0302 	orr.w	r3, r3, #2
 8003946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800394a:	4b4e      	ldr	r3, [pc, #312]	; (8003a84 <HAL_TIM_MspPostInit+0x16c>)
 800394c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800395c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395e:	2302      	movs	r3, #2
 8003960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003962:	2302      	movs	r3, #2
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003966:	2300      	movs	r3, #0
 8003968:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800396a:	2301      	movs	r3, #1
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396e:	f107 031c 	add.w	r3, r7, #28
 8003972:	4619      	mov	r1, r3
 8003974:	4844      	ldr	r0, [pc, #272]	; (8003a88 <HAL_TIM_MspPostInit+0x170>)
 8003976:	f005 f91d 	bl	8008bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800397a:	e07f      	b.n	8003a7c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a42      	ldr	r2, [pc, #264]	; (8003a8c <HAL_TIM_MspPostInit+0x174>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d11f      	bne.n	80039c6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003986:	4b3f      	ldr	r3, [pc, #252]	; (8003a84 <HAL_TIM_MspPostInit+0x16c>)
 8003988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800398c:	4a3d      	ldr	r2, [pc, #244]	; (8003a84 <HAL_TIM_MspPostInit+0x16c>)
 800398e:	f043 0302 	orr.w	r3, r3, #2
 8003992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003996:	4b3b      	ldr	r3, [pc, #236]	; (8003a84 <HAL_TIM_MspPostInit+0x16c>)
 8003998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80039a4:	2330      	movs	r3, #48	; 0x30
 80039a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a8:	2302      	movs	r3, #2
 80039aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039ac:	2302      	movs	r3, #2
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b0:	2300      	movs	r3, #0
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039b4:	2302      	movs	r3, #2
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b8:	f107 031c 	add.w	r3, r7, #28
 80039bc:	4619      	mov	r1, r3
 80039be:	4832      	ldr	r0, [pc, #200]	; (8003a88 <HAL_TIM_MspPostInit+0x170>)
 80039c0:	f005 f8f8 	bl	8008bb4 <HAL_GPIO_Init>
}
 80039c4:	e05a      	b.n	8003a7c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a31      	ldr	r2, [pc, #196]	; (8003a90 <HAL_TIM_MspPostInit+0x178>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d131      	bne.n	8003a34 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039d0:	4b2c      	ldr	r3, [pc, #176]	; (8003a84 <HAL_TIM_MspPostInit+0x16c>)
 80039d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039d6:	4a2b      	ldr	r2, [pc, #172]	; (8003a84 <HAL_TIM_MspPostInit+0x16c>)
 80039d8:	f043 0308 	orr.w	r3, r3, #8
 80039dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039e0:	4b28      	ldr	r3, [pc, #160]	; (8003a84 <HAL_TIM_MspPostInit+0x16c>)
 80039e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80039ee:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80039f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f4:	2302      	movs	r3, #2
 80039f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fc:	2300      	movs	r3, #0
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a00:	2302      	movs	r3, #2
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a04:	f107 031c 	add.w	r3, r7, #28
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4822      	ldr	r0, [pc, #136]	; (8003a94 <HAL_TIM_MspPostInit+0x17c>)
 8003a0c:	f005 f8d2 	bl	8008bb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003a10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a16:	2302      	movs	r3, #2
 8003a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a22:	2302      	movs	r3, #2
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a26:	f107 031c 	add.w	r3, r7, #28
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4819      	ldr	r0, [pc, #100]	; (8003a94 <HAL_TIM_MspPostInit+0x17c>)
 8003a2e:	f005 f8c1 	bl	8008bb4 <HAL_GPIO_Init>
}
 8003a32:	e023      	b.n	8003a7c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a17      	ldr	r2, [pc, #92]	; (8003a98 <HAL_TIM_MspPostInit+0x180>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d11e      	bne.n	8003a7c <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <HAL_TIM_MspPostInit+0x16c>)
 8003a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a44:	4a0f      	ldr	r2, [pc, #60]	; (8003a84 <HAL_TIM_MspPostInit+0x16c>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <HAL_TIM_MspPostInit+0x16c>)
 8003a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a5c:	2308      	movs	r3, #8
 8003a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a60:	2302      	movs	r3, #2
 8003a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a64:	2302      	movs	r3, #2
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a70:	f107 031c 	add.w	r3, r7, #28
 8003a74:	4619      	mov	r1, r3
 8003a76:	4809      	ldr	r0, [pc, #36]	; (8003a9c <HAL_TIM_MspPostInit+0x184>)
 8003a78:	f005 f89c 	bl	8008bb4 <HAL_GPIO_Init>
}
 8003a7c:	bf00      	nop
 8003a7e:	3730      	adds	r7, #48	; 0x30
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	58024400 	.word	0x58024400
 8003a88:	58020400 	.word	0x58020400
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800
 8003a94:	58020c00 	.word	0x58020c00
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	58020000 	.word	0x58020000

08003aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b0ba      	sub	sp, #232	; 0xe8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ab8:	f107 0318 	add.w	r3, r7, #24
 8003abc:	22b8      	movs	r2, #184	; 0xb8
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f018 f96e 	bl	801bda2 <memset>
  if(huart->Instance==UART4)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a4d      	ldr	r2, [pc, #308]	; (8003c00 <HAL_UART_MspInit+0x160>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d147      	bne.n	8003b60 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003ad0:	f04f 0202 	mov.w	r2, #2
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ae2:	f107 0318 	add.w	r3, r7, #24
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f007 fe52 	bl	800b790 <HAL_RCCEx_PeriphCLKConfig>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003af2:	f7ff f9db 	bl	8002eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003af6:	4b43      	ldr	r3, [pc, #268]	; (8003c04 <HAL_UART_MspInit+0x164>)
 8003af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003afc:	4a41      	ldr	r2, [pc, #260]	; (8003c04 <HAL_UART_MspInit+0x164>)
 8003afe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b06:	4b3f      	ldr	r3, [pc, #252]	; (8003c04 <HAL_UART_MspInit+0x164>)
 8003b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b14:	4b3b      	ldr	r3, [pc, #236]	; (8003c04 <HAL_UART_MspInit+0x164>)
 8003b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b1a:	4a3a      	ldr	r2, [pc, #232]	; (8003c04 <HAL_UART_MspInit+0x164>)
 8003b1c:	f043 0302 	orr.w	r3, r3, #2
 8003b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b24:	4b37      	ldr	r3, [pc, #220]	; (8003c04 <HAL_UART_MspInit+0x164>)
 8003b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b46:	2300      	movs	r3, #0
 8003b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003b4c:	2308      	movs	r3, #8
 8003b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b52:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b56:	4619      	mov	r1, r3
 8003b58:	482b      	ldr	r0, [pc, #172]	; (8003c08 <HAL_UART_MspInit+0x168>)
 8003b5a:	f005 f82b 	bl	8008bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003b5e:	e04a      	b.n	8003bf6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a29      	ldr	r2, [pc, #164]	; (8003c0c <HAL_UART_MspInit+0x16c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d145      	bne.n	8003bf6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003b6a:	f04f 0201 	mov.w	r2, #1
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003b76:	2300      	movs	r3, #0
 8003b78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b7c:	f107 0318 	add.w	r3, r7, #24
 8003b80:	4618      	mov	r0, r3
 8003b82:	f007 fe05 	bl	800b790 <HAL_RCCEx_PeriphCLKConfig>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003b8c:	f7ff f98e 	bl	8002eac <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003b90:	4b1c      	ldr	r3, [pc, #112]	; (8003c04 <HAL_UART_MspInit+0x164>)
 8003b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b96:	4a1b      	ldr	r2, [pc, #108]	; (8003c04 <HAL_UART_MspInit+0x164>)
 8003b98:	f043 0320 	orr.w	r3, r3, #32
 8003b9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ba0:	4b18      	ldr	r3, [pc, #96]	; (8003c04 <HAL_UART_MspInit+0x164>)
 8003ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bae:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <HAL_UART_MspInit+0x164>)
 8003bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bb4:	4a13      	ldr	r2, [pc, #76]	; (8003c04 <HAL_UART_MspInit+0x164>)
 8003bb6:	f043 0304 	orr.w	r3, r3, #4
 8003bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bbe:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <HAL_UART_MspInit+0x164>)
 8003bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bcc:	23c0      	movs	r3, #192	; 0xc0
 8003bce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bde:	2300      	movs	r3, #0
 8003be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003be4:	2307      	movs	r3, #7
 8003be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4807      	ldr	r0, [pc, #28]	; (8003c10 <HAL_UART_MspInit+0x170>)
 8003bf2:	f004 ffdf 	bl	8008bb4 <HAL_GPIO_Init>
}
 8003bf6:	bf00      	nop
 8003bf8:	37e8      	adds	r7, #232	; 0xe8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40004c00 	.word	0x40004c00
 8003c04:	58024400 	.word	0x58024400
 8003c08:	58020400 	.word	0x58020400
 8003c0c:	40011400 	.word	0x40011400
 8003c10:	58020800 	.word	0x58020800

08003c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c18:	e7fe      	b.n	8003c18 <NMI_Handler+0x4>

08003c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c1e:	e7fe      	b.n	8003c1e <HardFault_Handler+0x4>

08003c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c24:	e7fe      	b.n	8003c24 <MemManage_Handler+0x4>

08003c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c2a:	e7fe      	b.n	8003c2a <BusFault_Handler+0x4>

08003c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c30:	e7fe      	b.n	8003c30 <UsageFault_Handler+0x4>

08003c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c32:	b480      	push	{r7}
 8003c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c60:	f000 fa4a 	bl	80040f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c64:	bf00      	nop
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003c6c:	4802      	ldr	r0, [pc, #8]	; (8003c78 <DMA1_Stream0_IRQHandler+0x10>)
 8003c6e:	f003 f92b 	bl	8006ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	24001474 	.word	0x24001474

08003c7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003c80:	4802      	ldr	r0, [pc, #8]	; (8003c8c <DMA1_Stream1_IRQHandler+0x10>)
 8003c82:	f003 f921 	bl	8006ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	2400130c 	.word	0x2400130c

08003c90 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003c94:	4802      	ldr	r0, [pc, #8]	; (8003ca0 <DMA1_Stream2_IRQHandler+0x10>)
 8003c96:	f003 f917 	bl	8006ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	240014ec 	.word	0x240014ec

08003ca4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003ca8:	4802      	ldr	r0, [pc, #8]	; (8003cb4 <DMA1_Stream3_IRQHandler+0x10>)
 8003caa:	f003 f90d 	bl	8006ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	24001384 	.word	0x24001384

08003cb8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003cbc:	4802      	ldr	r0, [pc, #8]	; (8003cc8 <DMA1_Stream4_IRQHandler+0x10>)
 8003cbe:	f003 f903 	bl	8006ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	240013fc 	.word	0x240013fc

08003ccc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003cd0:	4802      	ldr	r0, [pc, #8]	; (8003cdc <DMA1_Stream5_IRQHandler+0x10>)
 8003cd2:	f003 f8f9 	bl	8006ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	24000d4c 	.word	0x24000d4c

08003ce0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003ce4:	4802      	ldr	r0, [pc, #8]	; (8003cf0 <TIM4_IRQHandler+0x10>)
 8003ce6:	f00c ff35 	bl	8010b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	240011dc 	.word	0x240011dc

08003cf4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003cf8:	4802      	ldr	r0, [pc, #8]	; (8003d04 <I2C2_EV_IRQHandler+0x10>)
 8003cfa:	f005 f9c5 	bl	8009088 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	24000edc 	.word	0x24000edc

08003d08 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003d0c:	4802      	ldr	r0, [pc, #8]	; (8003d18 <DMA2_Stream7_IRQHandler+0x10>)
 8003d0e:	f003 f8db 	bl	8006ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	24000dc4 	.word	0x24000dc4

08003d1c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003d20:	4802      	ldr	r0, [pc, #8]	; (8003d2c <OTG_HS_IRQHandler+0x10>)
 8003d22:	f005 fbbb 	bl	800949c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	24002db8 	.word	0x24002db8

08003d30 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003d34:	4802      	ldr	r0, [pc, #8]	; (8003d40 <SDMMC2_IRQHandler+0x10>)
 8003d36:	f00a fb81 	bl	800e43c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	24000f30 	.word	0x24000f30

08003d44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  return 1;
 8003d48:	2301      	movs	r3, #1
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <_kill>:

int _kill(int pid, int sig)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d5e:	f018 f873 	bl	801be48 <__errno>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2216      	movs	r2, #22
 8003d66:	601a      	str	r2, [r3, #0]
  return -1;
 8003d68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <_exit>:

void _exit (int status)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ffe7 	bl	8003d54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d86:	e7fe      	b.n	8003d86 <_exit+0x12>

08003d88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	e00a      	b.n	8003db0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d9a:	f3af 8000 	nop.w
 8003d9e:	4601      	mov	r1, r0
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	60ba      	str	r2, [r7, #8]
 8003da6:	b2ca      	uxtb	r2, r1
 8003da8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	3301      	adds	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	dbf0      	blt.n	8003d9a <_read+0x12>
  }

  return len;
 8003db8:	687b      	ldr	r3, [r7, #4]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b086      	sub	sp, #24
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	e009      	b.n	8003de8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	60ba      	str	r2, [r7, #8]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	3301      	adds	r3, #1
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	dbf1      	blt.n	8003dd4 <_write+0x12>
  }
  return len;
 8003df0:	687b      	ldr	r3, [r7, #4]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <_close>:

int _close(int file)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e22:	605a      	str	r2, [r3, #4]
  return 0;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <_isatty>:

int _isatty(int file)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e3a:	2301      	movs	r3, #1
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e6c:	4a14      	ldr	r2, [pc, #80]	; (8003ec0 <_sbrk+0x5c>)
 8003e6e:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <_sbrk+0x60>)
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e78:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <_sbrk+0x64>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e80:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <_sbrk+0x64>)
 8003e82:	4a12      	ldr	r2, [pc, #72]	; (8003ecc <_sbrk+0x68>)
 8003e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e86:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <_sbrk+0x64>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d207      	bcs.n	8003ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e94:	f017 ffd8 	bl	801be48 <__errno>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	220c      	movs	r2, #12
 8003e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	e009      	b.n	8003eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ea4:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <_sbrk+0x64>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eaa:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <_sbrk+0x64>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	4a05      	ldr	r2, [pc, #20]	; (8003ec8 <_sbrk+0x64>)
 8003eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	24050000 	.word	0x24050000
 8003ec4:	00000800 	.word	0x00000800
 8003ec8:	2400168c 	.word	0x2400168c
 8003ecc:	24003630 	.word	0x24003630

08003ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ed4:	4b32      	ldr	r3, [pc, #200]	; (8003fa0 <SystemInit+0xd0>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	4a31      	ldr	r2, [pc, #196]	; (8003fa0 <SystemInit+0xd0>)
 8003edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ee4:	4b2f      	ldr	r3, [pc, #188]	; (8003fa4 <SystemInit+0xd4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	2b06      	cmp	r3, #6
 8003eee:	d807      	bhi.n	8003f00 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ef0:	4b2c      	ldr	r3, [pc, #176]	; (8003fa4 <SystemInit+0xd4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f023 030f 	bic.w	r3, r3, #15
 8003ef8:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <SystemInit+0xd4>)
 8003efa:	f043 0307 	orr.w	r3, r3, #7
 8003efe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f00:	4b29      	ldr	r3, [pc, #164]	; (8003fa8 <SystemInit+0xd8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a28      	ldr	r2, [pc, #160]	; (8003fa8 <SystemInit+0xd8>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f0c:	4b26      	ldr	r3, [pc, #152]	; (8003fa8 <SystemInit+0xd8>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f12:	4b25      	ldr	r3, [pc, #148]	; (8003fa8 <SystemInit+0xd8>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4924      	ldr	r1, [pc, #144]	; (8003fa8 <SystemInit+0xd8>)
 8003f18:	4b24      	ldr	r3, [pc, #144]	; (8003fac <SystemInit+0xdc>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f1e:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <SystemInit+0xd4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <SystemInit+0xd4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 030f 	bic.w	r3, r3, #15
 8003f32:	4a1c      	ldr	r2, [pc, #112]	; (8003fa4 <SystemInit+0xd4>)
 8003f34:	f043 0307 	orr.w	r3, r3, #7
 8003f38:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003f3a:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <SystemInit+0xd8>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003f40:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <SystemInit+0xd8>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003f46:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <SystemInit+0xd8>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003f4c:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <SystemInit+0xd8>)
 8003f4e:	4a18      	ldr	r2, [pc, #96]	; (8003fb0 <SystemInit+0xe0>)
 8003f50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003f52:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <SystemInit+0xd8>)
 8003f54:	4a17      	ldr	r2, [pc, #92]	; (8003fb4 <SystemInit+0xe4>)
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003f58:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <SystemInit+0xd8>)
 8003f5a:	4a17      	ldr	r2, [pc, #92]	; (8003fb8 <SystemInit+0xe8>)
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003f5e:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <SystemInit+0xd8>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003f64:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <SystemInit+0xd8>)
 8003f66:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <SystemInit+0xe8>)
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003f6a:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <SystemInit+0xd8>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003f70:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <SystemInit+0xd8>)
 8003f72:	4a11      	ldr	r2, [pc, #68]	; (8003fb8 <SystemInit+0xe8>)
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003f76:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <SystemInit+0xd8>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <SystemInit+0xd8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <SystemInit+0xd8>)
 8003f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003f88:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <SystemInit+0xd8>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <SystemInit+0xec>)
 8003f90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003f94:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003f96:	bf00      	nop
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	e000ed00 	.word	0xe000ed00
 8003fa4:	52002000 	.word	0x52002000
 8003fa8:	58024400 	.word	0x58024400
 8003fac:	eaf6ed7f 	.word	0xeaf6ed7f
 8003fb0:	02020200 	.word	0x02020200
 8003fb4:	01ff0000 	.word	0x01ff0000
 8003fb8:	01010280 	.word	0x01010280
 8003fbc:	52004000 	.word	0x52004000

08003fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ff8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fc4:	f7ff ff84 	bl	8003ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fc8:	480c      	ldr	r0, [pc, #48]	; (8003ffc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fca:	490d      	ldr	r1, [pc, #52]	; (8004000 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fcc:	4a0d      	ldr	r2, [pc, #52]	; (8004004 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fd0:	e002      	b.n	8003fd8 <LoopCopyDataInit>

08003fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fd6:	3304      	adds	r3, #4

08003fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fdc:	d3f9      	bcc.n	8003fd2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fde:	4a0a      	ldr	r2, [pc, #40]	; (8004008 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fe0:	4c0a      	ldr	r4, [pc, #40]	; (800400c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fe4:	e001      	b.n	8003fea <LoopFillZerobss>

08003fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fe8:	3204      	adds	r2, #4

08003fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fec:	d3fb      	bcc.n	8003fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fee:	f017 ff31 	bl	801be54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ff2:	f7fd fa81 	bl	80014f8 <main>
  bx  lr
 8003ff6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ff8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003ffc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004000:	240002c8 	.word	0x240002c8
  ldr r2, =_sidata
 8004004:	0802089c 	.word	0x0802089c
  ldr r2, =_sbss
 8004008:	240002c8 	.word	0x240002c8
  ldr r4, =_ebss
 800400c:	24003630 	.word	0x24003630

08004010 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004010:	e7fe      	b.n	8004010 <ADC3_IRQHandler>
	...

08004014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800401a:	2003      	movs	r0, #3
 800401c:	f002 f952 	bl	80062c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004020:	f007 f9e0 	bl	800b3e4 <HAL_RCC_GetSysClockFreq>
 8004024:	4602      	mov	r2, r0
 8004026:	4b15      	ldr	r3, [pc, #84]	; (800407c <HAL_Init+0x68>)
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	0a1b      	lsrs	r3, r3, #8
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	4913      	ldr	r1, [pc, #76]	; (8004080 <HAL_Init+0x6c>)
 8004032:	5ccb      	ldrb	r3, [r1, r3]
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
 800403c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800403e:	4b0f      	ldr	r3, [pc, #60]	; (800407c <HAL_Init+0x68>)
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	4a0e      	ldr	r2, [pc, #56]	; (8004080 <HAL_Init+0x6c>)
 8004048:	5cd3      	ldrb	r3, [r2, r3]
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
 8004054:	4a0b      	ldr	r2, [pc, #44]	; (8004084 <HAL_Init+0x70>)
 8004056:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004058:	4a0b      	ldr	r2, [pc, #44]	; (8004088 <HAL_Init+0x74>)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800405e:	200f      	movs	r0, #15
 8004060:	f000 f814 	bl	800408c <HAL_InitTick>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e002      	b.n	8004074 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800406e:	f7fe ff23 	bl	8002eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	58024400 	.word	0x58024400
 8004080:	0801ffb0 	.word	0x0801ffb0
 8004084:	24000004 	.word	0x24000004
 8004088:	24000000 	.word	0x24000000

0800408c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004094:	4b15      	ldr	r3, [pc, #84]	; (80040ec <HAL_InitTick+0x60>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e021      	b.n	80040e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80040a0:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <HAL_InitTick+0x64>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <HAL_InitTick+0x60>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	4619      	mov	r1, r3
 80040aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80040b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b6:	4618      	mov	r0, r3
 80040b8:	f002 f937 	bl	800632a <HAL_SYSTICK_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e00e      	b.n	80040e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b0f      	cmp	r3, #15
 80040ca:	d80a      	bhi.n	80040e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040cc:	2200      	movs	r2, #0
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	f04f 30ff 	mov.w	r0, #4294967295
 80040d4:	f002 f901 	bl	80062da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040d8:	4a06      	ldr	r2, [pc, #24]	; (80040f4 <HAL_InitTick+0x68>)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	e000      	b.n	80040e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	2400000c 	.word	0x2400000c
 80040f0:	24000000 	.word	0x24000000
 80040f4:	24000008 	.word	0x24000008

080040f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_IncTick+0x20>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_IncTick+0x24>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4413      	add	r3, r2
 8004108:	4a04      	ldr	r2, [pc, #16]	; (800411c <HAL_IncTick+0x24>)
 800410a:	6013      	str	r3, [r2, #0]
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	2400000c 	.word	0x2400000c
 800411c:	24001690 	.word	0x24001690

08004120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  return uwTick;
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <HAL_GetTick+0x14>)
 8004126:	681b      	ldr	r3, [r3, #0]
}
 8004128:	4618      	mov	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	24001690 	.word	0x24001690

08004138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004140:	f7ff ffee 	bl	8004120 <HAL_GetTick>
 8004144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004150:	d005      	beq.n	800415e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004152:	4b0a      	ldr	r3, [pc, #40]	; (800417c <HAL_Delay+0x44>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4413      	add	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800415e:	bf00      	nop
 8004160:	f7ff ffde 	bl	8004120 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	429a      	cmp	r2, r3
 800416e:	d8f7      	bhi.n	8004160 <HAL_Delay+0x28>
  {
  }
}
 8004170:	bf00      	nop
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	2400000c 	.word	0x2400000c

08004180 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	43db      	mvns	r3, r3
 8004192:	401a      	ands	r2, r3
 8004194:	4904      	ldr	r1, [pc, #16]	; (80041a8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	4313      	orrs	r3, r2
 800419a:	604b      	str	r3, [r1, #4]
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	58000400 	.word	0x58000400

080041ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	609a      	str	r2, [r3, #8]
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	609a      	str	r2, [r3, #8]
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3360      	adds	r3, #96	; 0x60
 8004226:	461a      	mov	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4a10      	ldr	r2, [pc, #64]	; (8004274 <LL_ADC_SetOffset+0x60>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d10b      	bne.n	8004250 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	4313      	orrs	r3, r2
 8004246:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800424e:	e00b      	b.n	8004268 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	430b      	orrs	r3, r1
 8004262:	431a      	orrs	r2, r3
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	601a      	str	r2, [r3, #0]
}
 8004268:	bf00      	nop
 800426a:	371c      	adds	r7, #28
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	58026000 	.word	0x58026000

08004278 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3360      	adds	r3, #96	; 0x60
 8004286:	461a      	mov	r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	431a      	orrs	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	611a      	str	r2, [r3, #16]
}
 80042ca:	bf00      	nop
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4a0c      	ldr	r2, [pc, #48]	; (8004318 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00e      	beq.n	800430a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3360      	adds	r3, #96	; 0x60
 80042f0:	461a      	mov	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	431a      	orrs	r2, r3
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	601a      	str	r2, [r3, #0]
  }
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	58026000 	.word	0x58026000

0800431c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a0c      	ldr	r2, [pc, #48]	; (800435c <LL_ADC_SetOffsetSaturation+0x40>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d10e      	bne.n	800434e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	3360      	adds	r3, #96	; 0x60
 8004334:	461a      	mov	r2, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	431a      	orrs	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800434e:	bf00      	nop
 8004350:	371c      	adds	r7, #28
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	58026000 	.word	0x58026000

08004360 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4a0c      	ldr	r2, [pc, #48]	; (80043a0 <LL_ADC_SetOffsetSign+0x40>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d10e      	bne.n	8004392 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3360      	adds	r3, #96	; 0x60
 8004378:	461a      	mov	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	431a      	orrs	r2, r3
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004392:	bf00      	nop
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	58026000 	.word	0x58026000

080043a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3360      	adds	r3, #96	; 0x60
 80043b4:	461a      	mov	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4a0c      	ldr	r2, [pc, #48]	; (80043f4 <LL_ADC_SetOffsetState+0x50>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d108      	bne.n	80043d8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80043d6:	e007      	b.n	80043e8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	601a      	str	r2, [r3, #0]
}
 80043e8:	bf00      	nop
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	58026000 	.word	0x58026000

080043f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800441e:	b480      	push	{r7}
 8004420:	b087      	sub	sp, #28
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3330      	adds	r3, #48	; 0x30
 800442e:	461a      	mov	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	4413      	add	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	211f      	movs	r1, #31
 800444a:	fa01 f303 	lsl.w	r3, r1, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	401a      	ands	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	0e9b      	lsrs	r3, r3, #26
 8004456:	f003 011f 	and.w	r1, r3, #31
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	fa01 f303 	lsl.w	r3, r1, r3
 8004464:	431a      	orrs	r2, r3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004476:	b480      	push	{r7}
 8004478:	b087      	sub	sp, #28
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3314      	adds	r3, #20
 8004486:	461a      	mov	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	0e5b      	lsrs	r3, r3, #25
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	4413      	add	r3, r2
 8004494:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	0d1b      	lsrs	r3, r3, #20
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	2107      	movs	r1, #7
 80044a4:	fa01 f303 	lsl.w	r3, r1, r3
 80044a8:	43db      	mvns	r3, r3
 80044aa:	401a      	ands	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	0d1b      	lsrs	r3, r3, #20
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ba:	431a      	orrs	r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80044c0:	bf00      	nop
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4a1a      	ldr	r2, [pc, #104]	; (8004544 <LL_ADC_SetChannelSingleDiff+0x78>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d115      	bne.n	800450c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044ec:	43db      	mvns	r3, r3
 80044ee:	401a      	ands	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f003 0318 	and.w	r3, r3, #24
 80044f6:	4914      	ldr	r1, [pc, #80]	; (8004548 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80044f8:	40d9      	lsrs	r1, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	400b      	ands	r3, r1
 80044fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004502:	431a      	orrs	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800450a:	e014      	b.n	8004536 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004518:	43db      	mvns	r3, r3
 800451a:	401a      	ands	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f003 0318 	and.w	r3, r3, #24
 8004522:	4909      	ldr	r1, [pc, #36]	; (8004548 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004524:	40d9      	lsrs	r1, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	400b      	ands	r3, r1
 800452a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800452e:	431a      	orrs	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	58026000 	.word	0x58026000
 8004548:	000fffff 	.word	0x000fffff

0800454c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 031f 	and.w	r3, r3, #31
}
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004592:	4013      	ands	r3, r2
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6093      	str	r3, [r2, #8]
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	5fffffc0 	.word	0x5fffffc0

080045a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045bc:	d101      	bne.n	80045c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80045de:	4013      	ands	r3, r2
 80045e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	6fffffc0 	.word	0x6fffffc0

080045f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004608:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800460c:	d101      	bne.n	8004612 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <LL_ADC_Enable+0x24>)
 800462e:	4013      	ands	r3, r2
 8004630:	f043 0201 	orr.w	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	7fffffc0 	.word	0x7fffffc0

08004648 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <LL_ADC_Disable+0x24>)
 8004656:	4013      	ands	r3, r2
 8004658:	f043 0202 	orr.w	r2, r3, #2
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	7fffffc0 	.word	0x7fffffc0

08004670 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <LL_ADC_IsEnabled+0x18>
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <LL_ADC_IsEnabled+0x1a>
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d101      	bne.n	80046ae <LL_ADC_IsDisableOngoing+0x18>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <LL_ADC_IsDisableOngoing+0x1a>
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <LL_ADC_REG_StartConversion+0x24>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	f043 0204 	orr.w	r2, r3, #4
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	7fffffc0 	.word	0x7fffffc0

080046e4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <LL_ADC_REG_StopConversion+0x24>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	f043 0210 	orr.w	r2, r3, #16
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	7fffffc0 	.word	0x7fffffc0

0800470c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b04      	cmp	r3, #4
 800471e:	d101      	bne.n	8004724 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
	...

08004734 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <LL_ADC_INJ_StopConversion+0x24>)
 8004742:	4013      	ands	r3, r2
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	7fffffc0 	.word	0x7fffffc0

0800475c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d101      	bne.n	8004774 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b089      	sub	sp, #36	; 0x24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004790:	2300      	movs	r3, #0
 8004792:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e1ee      	b.n	8004b7c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7fe fb9d 	bl	8002eec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff feef 	bl	80045a8 <LL_ADC_IsDeepPowerDownEnabled>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d004      	beq.n	80047da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fed5 	bl	8004584 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff ff0a 	bl	80045f8 <LL_ADC_IsInternalRegulatorEnabled>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d114      	bne.n	8004814 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff feee 	bl	80045d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047f4:	4b8e      	ldr	r3, [pc, #568]	; (8004a30 <HAL_ADC_Init+0x2ac>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	099b      	lsrs	r3, r3, #6
 80047fa:	4a8e      	ldr	r2, [pc, #568]	; (8004a34 <HAL_ADC_Init+0x2b0>)
 80047fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004800:	099b      	lsrs	r3, r3, #6
 8004802:	3301      	adds	r3, #1
 8004804:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004806:	e002      	b.n	800480e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	3b01      	subs	r3, #1
 800480c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f9      	bne.n	8004808 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff feed 	bl	80045f8 <LL_ADC_IsInternalRegulatorEnabled>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10d      	bne.n	8004840 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004828:	f043 0210 	orr.w	r2, r3, #16
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004834:	f043 0201 	orr.w	r2, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff ff61 	bl	800470c <LL_ADC_REG_IsConversionOngoing>
 800484a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b00      	cmp	r3, #0
 8004856:	f040 8188 	bne.w	8004b6a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f040 8184 	bne.w	8004b6a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004866:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800486a:	f043 0202 	orr.w	r2, r3, #2
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff fefa 	bl	8004670 <LL_ADC_IsEnabled>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d136      	bne.n	80048f0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a6c      	ldr	r2, [pc, #432]	; (8004a38 <HAL_ADC_Init+0x2b4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_ADC_Init+0x112>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a6a      	ldr	r2, [pc, #424]	; (8004a3c <HAL_ADC_Init+0x2b8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d10e      	bne.n	80048b4 <HAL_ADC_Init+0x130>
 8004896:	4868      	ldr	r0, [pc, #416]	; (8004a38 <HAL_ADC_Init+0x2b4>)
 8004898:	f7ff feea 	bl	8004670 <LL_ADC_IsEnabled>
 800489c:	4604      	mov	r4, r0
 800489e:	4867      	ldr	r0, [pc, #412]	; (8004a3c <HAL_ADC_Init+0x2b8>)
 80048a0:	f7ff fee6 	bl	8004670 <LL_ADC_IsEnabled>
 80048a4:	4603      	mov	r3, r0
 80048a6:	4323      	orrs	r3, r4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	e008      	b.n	80048c6 <HAL_ADC_Init+0x142>
 80048b4:	4862      	ldr	r0, [pc, #392]	; (8004a40 <HAL_ADC_Init+0x2bc>)
 80048b6:	f7ff fedb 	bl	8004670 <LL_ADC_IsEnabled>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bf0c      	ite	eq
 80048c0:	2301      	moveq	r3, #1
 80048c2:	2300      	movne	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d012      	beq.n	80048f0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a5a      	ldr	r2, [pc, #360]	; (8004a38 <HAL_ADC_Init+0x2b4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <HAL_ADC_Init+0x15a>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a58      	ldr	r2, [pc, #352]	; (8004a3c <HAL_ADC_Init+0x2b8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d101      	bne.n	80048e2 <HAL_ADC_Init+0x15e>
 80048de:	4a59      	ldr	r2, [pc, #356]	; (8004a44 <HAL_ADC_Init+0x2c0>)
 80048e0:	e000      	b.n	80048e4 <HAL_ADC_Init+0x160>
 80048e2:	4a59      	ldr	r2, [pc, #356]	; (8004a48 <HAL_ADC_Init+0x2c4>)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	4619      	mov	r1, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f7ff fc5e 	bl	80041ac <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a52      	ldr	r2, [pc, #328]	; (8004a40 <HAL_ADC_Init+0x2bc>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d129      	bne.n	800494e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	7e5b      	ldrb	r3, [r3, #25]
 80048fe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004904:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800490a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2b08      	cmp	r3, #8
 8004912:	d013      	beq.n	800493c <HAL_ADC_Init+0x1b8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b0c      	cmp	r3, #12
 800491a:	d00d      	beq.n	8004938 <HAL_ADC_Init+0x1b4>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2b1c      	cmp	r3, #28
 8004922:	d007      	beq.n	8004934 <HAL_ADC_Init+0x1b0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2b18      	cmp	r3, #24
 800492a:	d101      	bne.n	8004930 <HAL_ADC_Init+0x1ac>
 800492c:	2318      	movs	r3, #24
 800492e:	e006      	b.n	800493e <HAL_ADC_Init+0x1ba>
 8004930:	2300      	movs	r3, #0
 8004932:	e004      	b.n	800493e <HAL_ADC_Init+0x1ba>
 8004934:	2310      	movs	r3, #16
 8004936:	e002      	b.n	800493e <HAL_ADC_Init+0x1ba>
 8004938:	2308      	movs	r3, #8
 800493a:	e000      	b.n	800493e <HAL_ADC_Init+0x1ba>
 800493c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800493e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004946:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004948:	4313      	orrs	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	e00e      	b.n	800496c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	7e5b      	ldrb	r3, [r3, #25]
 8004952:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004958:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800495e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004966:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004968:	4313      	orrs	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d106      	bne.n	8004984 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	3b01      	subs	r3, #1
 800497c:	045b      	lsls	r3, r3, #17
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4313      	orrs	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	d009      	beq.n	80049a0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	4313      	orrs	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a26      	ldr	r2, [pc, #152]	; (8004a40 <HAL_ADC_Init+0x2bc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d115      	bne.n	80049d6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	4b26      	ldr	r3, [pc, #152]	; (8004a4c <HAL_ADC_Init+0x2c8>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6812      	ldr	r2, [r2, #0]
 80049b8:	69b9      	ldr	r1, [r7, #24]
 80049ba:	430b      	orrs	r3, r1
 80049bc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	611a      	str	r2, [r3, #16]
 80049d4:	e009      	b.n	80049ea <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	4b1c      	ldr	r3, [pc, #112]	; (8004a50 <HAL_ADC_Init+0x2cc>)
 80049de:	4013      	ands	r3, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6812      	ldr	r2, [r2, #0]
 80049e4:	69b9      	ldr	r1, [r7, #24]
 80049e6:	430b      	orrs	r3, r1
 80049e8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fe8c 	bl	800470c <LL_ADC_REG_IsConversionOngoing>
 80049f4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff feae 	bl	800475c <LL_ADC_INJ_IsConversionOngoing>
 8004a00:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f040 808e 	bne.w	8004b26 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f040 808a 	bne.w	8004b26 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a0a      	ldr	r2, [pc, #40]	; (8004a40 <HAL_ADC_Init+0x2bc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d11b      	bne.n	8004a54 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	7e1b      	ldrb	r3, [r3, #24]
 8004a20:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a28:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	e018      	b.n	8004a62 <HAL_ADC_Init+0x2de>
 8004a30:	24000000 	.word	0x24000000
 8004a34:	053e2d63 	.word	0x053e2d63
 8004a38:	40022000 	.word	0x40022000
 8004a3c:	40022100 	.word	0x40022100
 8004a40:	58026000 	.word	0x58026000
 8004a44:	40022300 	.word	0x40022300
 8004a48:	58026300 	.word	0x58026300
 8004a4c:	fff04007 	.word	0xfff04007
 8004a50:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	7e1b      	ldrb	r3, [r3, #24]
 8004a58:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	4b46      	ldr	r3, [pc, #280]	; (8004b84 <HAL_ADC_Init+0x400>)
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6812      	ldr	r2, [r2, #0]
 8004a70:	69b9      	ldr	r1, [r7, #24]
 8004a72:	430b      	orrs	r3, r1
 8004a74:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d137      	bne.n	8004af0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a3f      	ldr	r2, [pc, #252]	; (8004b88 <HAL_ADC_Init+0x404>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d116      	bne.n	8004abe <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	4b3d      	ldr	r3, [pc, #244]	; (8004b8c <HAL_ADC_Init+0x408>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004aa2:	4311      	orrs	r1, r2
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004aa8:	4311      	orrs	r1, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	611a      	str	r2, [r3, #16]
 8004abc:	e020      	b.n	8004b00 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	4b32      	ldr	r3, [pc, #200]	; (8004b90 <HAL_ADC_Init+0x40c>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004acc:	3a01      	subs	r2, #1
 8004ace:	0411      	lsls	r1, r2, #16
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004ad4:	4311      	orrs	r1, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ada:	4311      	orrs	r1, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0201 	orr.w	r2, r2, #1
 8004aec:	611a      	str	r2, [r3, #16]
 8004aee:	e007      	b.n	8004b00 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0201 	bic.w	r2, r2, #1
 8004afe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1b      	ldr	r2, [pc, #108]	; (8004b88 <HAL_ADC_Init+0x404>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d002      	beq.n	8004b26 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f001 f909 	bl	8005d38 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d10c      	bne.n	8004b48 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	f023 010f 	bic.w	r1, r3, #15
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	1e5a      	subs	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30
 8004b46:	e007      	b.n	8004b58 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 020f 	bic.w	r2, r2, #15
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b5c:	f023 0303 	bic.w	r3, r3, #3
 8004b60:	f043 0201 	orr.w	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	661a      	str	r2, [r3, #96]	; 0x60
 8004b68:	e007      	b.n	8004b7a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6e:	f043 0210 	orr.w	r2, r3, #16
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3724      	adds	r7, #36	; 0x24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd90      	pop	{r4, r7, pc}
 8004b84:	ffffbffc 	.word	0xffffbffc
 8004b88:	58026000 	.word	0x58026000
 8004b8c:	fc00f81f 	.word	0xfc00f81f
 8004b90:	fc00f81e 	.word	0xfc00f81e

08004b94 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a5c      	ldr	r2, [pc, #368]	; (8004d14 <HAL_ADC_Start+0x180>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d004      	beq.n	8004bb0 <HAL_ADC_Start+0x1c>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a5b      	ldr	r2, [pc, #364]	; (8004d18 <HAL_ADC_Start+0x184>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d101      	bne.n	8004bb4 <HAL_ADC_Start+0x20>
 8004bb0:	4b5a      	ldr	r3, [pc, #360]	; (8004d1c <HAL_ADC_Start+0x188>)
 8004bb2:	e000      	b.n	8004bb6 <HAL_ADC_Start+0x22>
 8004bb4:	4b5a      	ldr	r3, [pc, #360]	; (8004d20 <HAL_ADC_Start+0x18c>)
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fcc8 	bl	800454c <LL_ADC_GetMultimode>
 8004bbc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff fda2 	bl	800470c <LL_ADC_REG_IsConversionOngoing>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f040 809a 	bne.w	8004d04 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_ADC_Start+0x4a>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e095      	b.n	8004d0a <HAL_ADC_Start+0x176>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 ffbc 	bl	8005b64 <ADC_Enable>
 8004bec:	4603      	mov	r3, r0
 8004bee:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 8081 	bne.w	8004cfa <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004bfc:	4b49      	ldr	r3, [pc, #292]	; (8004d24 <HAL_ADC_Start+0x190>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a42      	ldr	r2, [pc, #264]	; (8004d18 <HAL_ADC_Start+0x184>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d002      	beq.n	8004c18 <HAL_ADC_Start+0x84>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	e000      	b.n	8004c1a <HAL_ADC_Start+0x86>
 8004c18:	4b3e      	ldr	r3, [pc, #248]	; (8004d14 <HAL_ADC_Start+0x180>)
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d002      	beq.n	8004c28 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d105      	bne.n	8004c34 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c40:	d106      	bne.n	8004c50 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c46:	f023 0206 	bic.w	r2, r3, #6
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	665a      	str	r2, [r3, #100]	; 0x64
 8004c4e:	e002      	b.n	8004c56 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	221c      	movs	r2, #28
 8004c5c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a2b      	ldr	r2, [pc, #172]	; (8004d18 <HAL_ADC_Start+0x184>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d002      	beq.n	8004c76 <HAL_ADC_Start+0xe2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	e000      	b.n	8004c78 <HAL_ADC_Start+0xe4>
 8004c76:	4b27      	ldr	r3, [pc, #156]	; (8004d14 <HAL_ADC_Start+0x180>)
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6812      	ldr	r2, [r2, #0]
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d008      	beq.n	8004c92 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b05      	cmp	r3, #5
 8004c8a:	d002      	beq.n	8004c92 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b09      	cmp	r3, #9
 8004c90:	d114      	bne.n	8004cbc <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d007      	beq.n	8004cb0 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ca8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff fd01 	bl	80046bc <LL_ADC_REG_StartConversion>
 8004cba:	e025      	b.n	8004d08 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <HAL_ADC_Start+0x184>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d002      	beq.n	8004cd8 <HAL_ADC_Start+0x144>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	e000      	b.n	8004cda <HAL_ADC_Start+0x146>
 8004cd8:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <HAL_ADC_Start+0x180>)
 8004cda:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00f      	beq.n	8004d08 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004cf0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	661a      	str	r2, [r3, #96]	; 0x60
 8004cf8:	e006      	b.n	8004d08 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004d02:	e001      	b.n	8004d08 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004d04:	2302      	movs	r3, #2
 8004d06:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40022000 	.word	0x40022000
 8004d18:	40022100 	.word	0x40022100
 8004d1c:	40022300 	.word	0x40022300
 8004d20:	58026300 	.word	0x58026300
 8004d24:	fffff0fe 	.word	0xfffff0fe

08004d28 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_ADC_Stop+0x16>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e021      	b.n	8004d82 <HAL_ADC_Stop+0x5a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004d46:	2103      	movs	r1, #3
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fe4f 	bl	80059ec <ADC_ConversionStop>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10f      	bne.n	8004d78 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 ff8d 	bl	8005c78 <ADC_Disable>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d107      	bne.n	8004d78 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d6c:	4b07      	ldr	r3, [pc, #28]	; (8004d8c <HAL_ADC_Stop+0x64>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	f043 0201 	orr.w	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	ffffeefe 	.word	0xffffeefe

08004d90 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a72      	ldr	r2, [pc, #456]	; (8004f68 <HAL_ADC_PollForConversion+0x1d8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_ADC_PollForConversion+0x1e>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a70      	ldr	r2, [pc, #448]	; (8004f6c <HAL_ADC_PollForConversion+0x1dc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d101      	bne.n	8004db2 <HAL_ADC_PollForConversion+0x22>
 8004dae:	4b70      	ldr	r3, [pc, #448]	; (8004f70 <HAL_ADC_PollForConversion+0x1e0>)
 8004db0:	e000      	b.n	8004db4 <HAL_ADC_PollForConversion+0x24>
 8004db2:	4b70      	ldr	r3, [pc, #448]	; (8004f74 <HAL_ADC_PollForConversion+0x1e4>)
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff fbc9 	bl	800454c <LL_ADC_GetMultimode>
 8004dba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d102      	bne.n	8004dca <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004dc4:	2308      	movs	r3, #8
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	e037      	b.n	8004e3a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	d002      	beq.n	8004ddc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b09      	cmp	r3, #9
 8004dda:	d111      	bne.n	8004e00 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dee:	f043 0220 	orr.w	r2, r3, #32
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e0b1      	b.n	8004f5e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004dfa:	2304      	movs	r3, #4
 8004dfc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004dfe:	e01c      	b.n	8004e3a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a58      	ldr	r2, [pc, #352]	; (8004f68 <HAL_ADC_PollForConversion+0x1d8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <HAL_ADC_PollForConversion+0x84>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a57      	ldr	r2, [pc, #348]	; (8004f6c <HAL_ADC_PollForConversion+0x1dc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d101      	bne.n	8004e18 <HAL_ADC_PollForConversion+0x88>
 8004e14:	4b56      	ldr	r3, [pc, #344]	; (8004f70 <HAL_ADC_PollForConversion+0x1e0>)
 8004e16:	e000      	b.n	8004e1a <HAL_ADC_PollForConversion+0x8a>
 8004e18:	4b56      	ldr	r3, [pc, #344]	; (8004f74 <HAL_ADC_PollForConversion+0x1e4>)
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fba4 	bl	8004568 <LL_ADC_GetMultiDMATransfer>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d007      	beq.n	8004e36 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e2a:	f043 0220 	orr.w	r2, r3, #32
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e093      	b.n	8004f5e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004e36:	2304      	movs	r3, #4
 8004e38:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004e3a:	f7ff f971 	bl	8004120 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e40:	e021      	b.n	8004e86 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d01d      	beq.n	8004e86 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004e4a:	f7ff f969 	bl	8004120 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d302      	bcc.n	8004e60 <HAL_ADC_PollForConversion+0xd0>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d112      	bne.n	8004e86 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10b      	bne.n	8004e86 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e72:	f043 0204 	orr.w	r2, r3, #4
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e06b      	b.n	8004f5e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0d6      	beq.n	8004e42 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff faa7 	bl	80043f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01c      	beq.n	8004eea <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	7e5b      	ldrb	r3, [r3, #25]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d118      	bne.n	8004eea <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d111      	bne.n	8004eea <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d105      	bne.n	8004eea <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee2:	f043 0201 	orr.w	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1f      	ldr	r2, [pc, #124]	; (8004f6c <HAL_ADC_PollForConversion+0x1dc>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d002      	beq.n	8004efa <HAL_ADC_PollForConversion+0x16a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	e000      	b.n	8004efc <HAL_ADC_PollForConversion+0x16c>
 8004efa:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <HAL_ADC_PollForConversion+0x1d8>)
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d008      	beq.n	8004f16 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2b05      	cmp	r3, #5
 8004f0e:	d002      	beq.n	8004f16 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2b09      	cmp	r3, #9
 8004f14:	d104      	bne.n	8004f20 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	e00c      	b.n	8004f3a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a11      	ldr	r2, [pc, #68]	; (8004f6c <HAL_ADC_PollForConversion+0x1dc>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d002      	beq.n	8004f30 <HAL_ADC_PollForConversion+0x1a0>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	e000      	b.n	8004f32 <HAL_ADC_PollForConversion+0x1a2>
 8004f30:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <HAL_ADC_PollForConversion+0x1d8>)
 8004f32:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d104      	bne.n	8004f4a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2208      	movs	r2, #8
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	e008      	b.n	8004f5c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d103      	bne.n	8004f5c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	220c      	movs	r2, #12
 8004f5a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3720      	adds	r7, #32
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40022000 	.word	0x40022000
 8004f6c:	40022100 	.word	0x40022100
 8004f70:	40022300 	.word	0x40022300
 8004f74:	58026300 	.word	0x58026300

08004f78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004f94:	b590      	push	{r4, r7, lr}
 8004f96:	b0b9      	sub	sp, #228	; 0xe4
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fae:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4aa9      	ldr	r2, [pc, #676]	; (800525c <HAL_ADC_ConfigChannel+0x2c8>)
 8004fb6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d102      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x34>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	f000 bcfa 	b.w	80059bc <HAL_ADC_ConfigChannel+0xa28>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fb99 	bl	800470c <LL_ADC_REG_IsConversionOngoing>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f040 84de 	bne.w	800599e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a9e      	ldr	r2, [pc, #632]	; (8005260 <HAL_ADC_ConfigChannel+0x2cc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d033      	beq.n	8005054 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d108      	bne.n	800500a <HAL_ADC_ConfigChannel+0x76>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	0e9b      	lsrs	r3, r3, #26
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	2201      	movs	r2, #1
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	e01d      	b.n	8005046 <HAL_ADC_ConfigChannel+0xb2>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005012:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005016:	fa93 f3a3 	rbit	r3, r3
 800501a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800501e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005022:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005026:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800502e:	2320      	movs	r3, #32
 8005030:	e004      	b.n	800503c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8005032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005036:	fab3 f383 	clz	r3, r3
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	2201      	movs	r2, #1
 8005042:	fa02 f303 	lsl.w	r3, r2, r3
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	69d1      	ldr	r1, [r2, #28]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6812      	ldr	r2, [r2, #0]
 8005050:	430b      	orrs	r3, r1
 8005052:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6818      	ldr	r0, [r3, #0]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	6859      	ldr	r1, [r3, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	f7ff f9dc 	bl	800441e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff fb4e 	bl	800470c <LL_ADC_REG_IsConversionOngoing>
 8005070:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff fb6f 	bl	800475c <LL_ADC_INJ_IsConversionOngoing>
 800507e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005086:	2b00      	cmp	r3, #0
 8005088:	f040 8270 	bne.w	800556c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800508c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005090:	2b00      	cmp	r3, #0
 8005092:	f040 826b 	bne.w	800556c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6819      	ldr	r1, [r3, #0]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f7ff f9e7 	bl	8004476 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a6c      	ldr	r2, [pc, #432]	; (8005260 <HAL_ADC_ConfigChannel+0x2cc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d10d      	bne.n	80050ce <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	695a      	ldr	r2, [r3, #20]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	08db      	lsrs	r3, r3, #3
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050cc:	e032      	b.n	8005134 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80050ce:	4b65      	ldr	r3, [pc, #404]	; (8005264 <HAL_ADC_ConfigChannel+0x2d0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80050d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050da:	d10b      	bne.n	80050f4 <HAL_ADC_ConfigChannel+0x160>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	695a      	ldr	r2, [r3, #20]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	089b      	lsrs	r3, r3, #2
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	e01d      	b.n	8005130 <HAL_ADC_ConfigChannel+0x19c>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f003 0310 	and.w	r3, r3, #16
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10b      	bne.n	800511a <HAL_ADC_ConfigChannel+0x186>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	695a      	ldr	r2, [r3, #20]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	089b      	lsrs	r3, r3, #2
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	e00a      	b.n	8005130 <HAL_ADC_ConfigChannel+0x19c>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	695a      	ldr	r2, [r3, #20]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	089b      	lsrs	r3, r3, #2
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	2b04      	cmp	r3, #4
 800513a:	d048      	beq.n	80051ce <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6818      	ldr	r0, [r3, #0]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	6919      	ldr	r1, [r3, #16]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800514c:	f7ff f862 	bl	8004214 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a42      	ldr	r2, [pc, #264]	; (8005260 <HAL_ADC_ConfigChannel+0x2cc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d119      	bne.n	800518e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6919      	ldr	r1, [r3, #16]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	461a      	mov	r2, r3
 8005168:	f7ff f8fa 	bl	8004360 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	6919      	ldr	r1, [r3, #16]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	f893 3020 	ldrb.w	r3, [r3, #32]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d102      	bne.n	8005184 <HAL_ADC_ConfigChannel+0x1f0>
 800517e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005182:	e000      	b.n	8005186 <HAL_ADC_ConfigChannel+0x1f2>
 8005184:	2300      	movs	r3, #0
 8005186:	461a      	mov	r2, r3
 8005188:	f7ff f8c8 	bl	800431c <LL_ADC_SetOffsetSaturation>
 800518c:	e1ee      	b.n	800556c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6919      	ldr	r1, [r3, #16]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800519c:	2b01      	cmp	r3, #1
 800519e:	d102      	bne.n	80051a6 <HAL_ADC_ConfigChannel+0x212>
 80051a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051a4:	e000      	b.n	80051a8 <HAL_ADC_ConfigChannel+0x214>
 80051a6:	2300      	movs	r3, #0
 80051a8:	461a      	mov	r2, r3
 80051aa:	f7ff f895 	bl	80042d8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	6919      	ldr	r1, [r3, #16]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	7e1b      	ldrb	r3, [r3, #24]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d102      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x230>
 80051be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051c2:	e000      	b.n	80051c6 <HAL_ADC_ConfigChannel+0x232>
 80051c4:	2300      	movs	r3, #0
 80051c6:	461a      	mov	r2, r3
 80051c8:	f7ff f86c 	bl	80042a4 <LL_ADC_SetDataRightShift>
 80051cc:	e1ce      	b.n	800556c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a23      	ldr	r2, [pc, #140]	; (8005260 <HAL_ADC_ConfigChannel+0x2cc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	f040 8181 	bne.w	80054dc <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2100      	movs	r1, #0
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff f849 	bl	8004278 <LL_ADC_GetOffsetChannel>
 80051e6:	4603      	mov	r3, r0
 80051e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <HAL_ADC_ConfigChannel+0x272>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2100      	movs	r1, #0
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff f83e 	bl	8004278 <LL_ADC_GetOffsetChannel>
 80051fc:	4603      	mov	r3, r0
 80051fe:	0e9b      	lsrs	r3, r3, #26
 8005200:	f003 021f 	and.w	r2, r3, #31
 8005204:	e01e      	b.n	8005244 <HAL_ADC_ConfigChannel+0x2b0>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2100      	movs	r1, #0
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff f833 	bl	8004278 <LL_ADC_GetOffsetChannel>
 8005212:	4603      	mov	r3, r0
 8005214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005218:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800521c:	fa93 f3a3 	rbit	r3, r3
 8005220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8005224:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005228:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800522c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8005234:	2320      	movs	r3, #32
 8005236:	e004      	b.n	8005242 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8005238:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800523c:	fab3 f383 	clz	r3, r3
 8005240:	b2db      	uxtb	r3, r3
 8005242:	461a      	mov	r2, r3
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10b      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x2d4>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	0e9b      	lsrs	r3, r3, #26
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	e01e      	b.n	800529a <HAL_ADC_ConfigChannel+0x306>
 800525c:	47ff0000 	.word	0x47ff0000
 8005260:	58026000 	.word	0x58026000
 8005264:	5c001000 	.word	0x5c001000
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005274:	fa93 f3a3 	rbit	r3, r3
 8005278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800527c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005284:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 800528c:	2320      	movs	r3, #32
 800528e:	e004      	b.n	800529a <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8005290:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005294:	fab3 f383 	clz	r3, r3
 8005298:	b2db      	uxtb	r3, r3
 800529a:	429a      	cmp	r2, r3
 800529c:	d106      	bne.n	80052ac <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2200      	movs	r2, #0
 80052a4:	2100      	movs	r1, #0
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff f87c 	bl	80043a4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2101      	movs	r1, #1
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fe ffe0 	bl	8004278 <LL_ADC_GetOffsetChannel>
 80052b8:	4603      	mov	r3, r0
 80052ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10a      	bne.n	80052d8 <HAL_ADC_ConfigChannel+0x344>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2101      	movs	r1, #1
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fe ffd5 	bl	8004278 <LL_ADC_GetOffsetChannel>
 80052ce:	4603      	mov	r3, r0
 80052d0:	0e9b      	lsrs	r3, r3, #26
 80052d2:	f003 021f 	and.w	r2, r3, #31
 80052d6:	e01e      	b.n	8005316 <HAL_ADC_ConfigChannel+0x382>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2101      	movs	r1, #1
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fe ffca 	bl	8004278 <LL_ADC_GetOffsetChannel>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052ee:	fa93 f3a3 	rbit	r3, r3
 80052f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80052f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80052fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8005306:	2320      	movs	r3, #32
 8005308:	e004      	b.n	8005314 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800530a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800530e:	fab3 f383 	clz	r3, r3
 8005312:	b2db      	uxtb	r3, r3
 8005314:	461a      	mov	r2, r3
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800531e:	2b00      	cmp	r3, #0
 8005320:	d105      	bne.n	800532e <HAL_ADC_ConfigChannel+0x39a>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	0e9b      	lsrs	r3, r3, #26
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	e018      	b.n	8005360 <HAL_ADC_ConfigChannel+0x3cc>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005336:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800533a:	fa93 f3a3 	rbit	r3, r3
 800533e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8005342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005346:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800534a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8005352:	2320      	movs	r3, #32
 8005354:	e004      	b.n	8005360 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8005356:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800535a:	fab3 f383 	clz	r3, r3
 800535e:	b2db      	uxtb	r3, r3
 8005360:	429a      	cmp	r2, r3
 8005362:	d106      	bne.n	8005372 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2200      	movs	r2, #0
 800536a:	2101      	movs	r1, #1
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff f819 	bl	80043a4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2102      	movs	r1, #2
 8005378:	4618      	mov	r0, r3
 800537a:	f7fe ff7d 	bl	8004278 <LL_ADC_GetOffsetChannel>
 800537e:	4603      	mov	r3, r0
 8005380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <HAL_ADC_ConfigChannel+0x40a>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2102      	movs	r1, #2
 800538e:	4618      	mov	r0, r3
 8005390:	f7fe ff72 	bl	8004278 <LL_ADC_GetOffsetChannel>
 8005394:	4603      	mov	r3, r0
 8005396:	0e9b      	lsrs	r3, r3, #26
 8005398:	f003 021f 	and.w	r2, r3, #31
 800539c:	e01e      	b.n	80053dc <HAL_ADC_ConfigChannel+0x448>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2102      	movs	r1, #2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fe ff67 	bl	8004278 <LL_ADC_GetOffsetChannel>
 80053aa:	4603      	mov	r3, r0
 80053ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053b4:	fa93 f3a3 	rbit	r3, r3
 80053b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80053bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80053c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80053cc:	2320      	movs	r3, #32
 80053ce:	e004      	b.n	80053da <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80053d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053d4:	fab3 f383 	clz	r3, r3
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d105      	bne.n	80053f4 <HAL_ADC_ConfigChannel+0x460>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	0e9b      	lsrs	r3, r3, #26
 80053ee:	f003 031f 	and.w	r3, r3, #31
 80053f2:	e014      	b.n	800541e <HAL_ADC_ConfigChannel+0x48a>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053fc:	fa93 f3a3 	rbit	r3, r3
 8005400:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005408:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8005410:	2320      	movs	r3, #32
 8005412:	e004      	b.n	800541e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8005414:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005418:	fab3 f383 	clz	r3, r3
 800541c:	b2db      	uxtb	r3, r3
 800541e:	429a      	cmp	r2, r3
 8005420:	d106      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2200      	movs	r2, #0
 8005428:	2102      	movs	r1, #2
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe ffba 	bl	80043a4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2103      	movs	r1, #3
 8005436:	4618      	mov	r0, r3
 8005438:	f7fe ff1e 	bl	8004278 <LL_ADC_GetOffsetChannel>
 800543c:	4603      	mov	r3, r0
 800543e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <HAL_ADC_ConfigChannel+0x4c8>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2103      	movs	r1, #3
 800544c:	4618      	mov	r0, r3
 800544e:	f7fe ff13 	bl	8004278 <LL_ADC_GetOffsetChannel>
 8005452:	4603      	mov	r3, r0
 8005454:	0e9b      	lsrs	r3, r3, #26
 8005456:	f003 021f 	and.w	r2, r3, #31
 800545a:	e017      	b.n	800548c <HAL_ADC_ConfigChannel+0x4f8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2103      	movs	r1, #3
 8005462:	4618      	mov	r0, r3
 8005464:	f7fe ff08 	bl	8004278 <LL_ADC_GetOffsetChannel>
 8005468:	4603      	mov	r3, r0
 800546a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800546e:	fa93 f3a3 	rbit	r3, r3
 8005472:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005476:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8005478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800547e:	2320      	movs	r3, #32
 8005480:	e003      	b.n	800548a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005484:	fab3 f383 	clz	r3, r3
 8005488:	b2db      	uxtb	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005494:	2b00      	cmp	r3, #0
 8005496:	d105      	bne.n	80054a4 <HAL_ADC_ConfigChannel+0x510>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	0e9b      	lsrs	r3, r3, #26
 800549e:	f003 031f 	and.w	r3, r3, #31
 80054a2:	e011      	b.n	80054c8 <HAL_ADC_ConfigChannel+0x534>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ac:	fa93 f3a3 	rbit	r3, r3
 80054b0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80054b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054b4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80054b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80054bc:	2320      	movs	r3, #32
 80054be:	e003      	b.n	80054c8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80054c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054c2:	fab3 f383 	clz	r3, r3
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d14f      	bne.n	800556c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2200      	movs	r2, #0
 80054d2:	2103      	movs	r1, #3
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fe ff65 	bl	80043a4 <LL_ADC_SetOffsetState>
 80054da:	e047      	b.n	800556c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	069b      	lsls	r3, r3, #26
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d107      	bne.n	8005500 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80054fe:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005506:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	069b      	lsls	r3, r3, #26
 8005510:	429a      	cmp	r2, r3
 8005512:	d107      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005522:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800552a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	069b      	lsls	r3, r3, #26
 8005534:	429a      	cmp	r2, r3
 8005536:	d107      	bne.n	8005548 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005546:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800554e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	069b      	lsls	r3, r3, #26
 8005558:	429a      	cmp	r2, r3
 800555a:	d107      	bne.n	800556c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800556a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff f87d 	bl	8004670 <LL_ADC_IsEnabled>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	f040 8219 	bne.w	80059b0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6819      	ldr	r1, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	461a      	mov	r2, r3
 800558c:	f7fe ff9e 	bl	80044cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	4aa1      	ldr	r2, [pc, #644]	; (800581c <HAL_ADC_ConfigChannel+0x888>)
 8005596:	4293      	cmp	r3, r2
 8005598:	f040 812e 	bne.w	80057f8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10b      	bne.n	80055c4 <HAL_ADC_ConfigChannel+0x630>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	0e9b      	lsrs	r3, r3, #26
 80055b2:	3301      	adds	r3, #1
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	2b09      	cmp	r3, #9
 80055ba:	bf94      	ite	ls
 80055bc:	2301      	movls	r3, #1
 80055be:	2300      	movhi	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	e019      	b.n	80055f8 <HAL_ADC_ConfigChannel+0x664>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055cc:	fa93 f3a3 	rbit	r3, r3
 80055d0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80055d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80055d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80055dc:	2320      	movs	r3, #32
 80055de:	e003      	b.n	80055e8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80055e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055e2:	fab3 f383 	clz	r3, r3
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	3301      	adds	r3, #1
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	2b09      	cmp	r3, #9
 80055f0:	bf94      	ite	ls
 80055f2:	2301      	movls	r3, #1
 80055f4:	2300      	movhi	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d079      	beq.n	80056f0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005604:	2b00      	cmp	r3, #0
 8005606:	d107      	bne.n	8005618 <HAL_ADC_ConfigChannel+0x684>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	0e9b      	lsrs	r3, r3, #26
 800560e:	3301      	adds	r3, #1
 8005610:	069b      	lsls	r3, r3, #26
 8005612:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005616:	e015      	b.n	8005644 <HAL_ADC_ConfigChannel+0x6b0>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005620:	fa93 f3a3 	rbit	r3, r3
 8005624:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005628:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800562a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8005630:	2320      	movs	r3, #32
 8005632:	e003      	b.n	800563c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8005634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005636:	fab3 f383 	clz	r3, r3
 800563a:	b2db      	uxtb	r3, r3
 800563c:	3301      	adds	r3, #1
 800563e:	069b      	lsls	r3, r3, #26
 8005640:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800564c:	2b00      	cmp	r3, #0
 800564e:	d109      	bne.n	8005664 <HAL_ADC_ConfigChannel+0x6d0>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	0e9b      	lsrs	r3, r3, #26
 8005656:	3301      	adds	r3, #1
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	2101      	movs	r1, #1
 800565e:	fa01 f303 	lsl.w	r3, r1, r3
 8005662:	e017      	b.n	8005694 <HAL_ADC_ConfigChannel+0x700>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566c:	fa93 f3a3 	rbit	r3, r3
 8005670:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005674:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 800567c:	2320      	movs	r3, #32
 800567e:	e003      	b.n	8005688 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005682:	fab3 f383 	clz	r3, r3
 8005686:	b2db      	uxtb	r3, r3
 8005688:	3301      	adds	r3, #1
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	2101      	movs	r1, #1
 8005690:	fa01 f303 	lsl.w	r3, r1, r3
 8005694:	ea42 0103 	orr.w	r1, r2, r3
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10a      	bne.n	80056ba <HAL_ADC_ConfigChannel+0x726>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	0e9b      	lsrs	r3, r3, #26
 80056aa:	3301      	adds	r3, #1
 80056ac:	f003 021f 	and.w	r2, r3, #31
 80056b0:	4613      	mov	r3, r2
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	4413      	add	r3, r2
 80056b6:	051b      	lsls	r3, r3, #20
 80056b8:	e018      	b.n	80056ec <HAL_ADC_ConfigChannel+0x758>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c2:	fa93 f3a3 	rbit	r3, r3
 80056c6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80056d2:	2320      	movs	r3, #32
 80056d4:	e003      	b.n	80056de <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	fab3 f383 	clz	r3, r3
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	3301      	adds	r3, #1
 80056e0:	f003 021f 	and.w	r2, r3, #31
 80056e4:	4613      	mov	r3, r2
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	4413      	add	r3, r2
 80056ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056ec:	430b      	orrs	r3, r1
 80056ee:	e07e      	b.n	80057ee <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d107      	bne.n	800570c <HAL_ADC_ConfigChannel+0x778>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	0e9b      	lsrs	r3, r3, #26
 8005702:	3301      	adds	r3, #1
 8005704:	069b      	lsls	r3, r3, #26
 8005706:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800570a:	e015      	b.n	8005738 <HAL_ADC_ConfigChannel+0x7a4>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	fa93 f3a3 	rbit	r3, r3
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8005724:	2320      	movs	r3, #32
 8005726:	e003      	b.n	8005730 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8005728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572a:	fab3 f383 	clz	r3, r3
 800572e:	b2db      	uxtb	r3, r3
 8005730:	3301      	adds	r3, #1
 8005732:	069b      	lsls	r3, r3, #26
 8005734:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <HAL_ADC_ConfigChannel+0x7c4>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	0e9b      	lsrs	r3, r3, #26
 800574a:	3301      	adds	r3, #1
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	2101      	movs	r1, #1
 8005752:	fa01 f303 	lsl.w	r3, r1, r3
 8005756:	e017      	b.n	8005788 <HAL_ADC_ConfigChannel+0x7f4>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	fa93 f3a3 	rbit	r3, r3
 8005764:	61bb      	str	r3, [r7, #24]
  return result;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8005770:	2320      	movs	r3, #32
 8005772:	e003      	b.n	800577c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	fab3 f383 	clz	r3, r3
 800577a:	b2db      	uxtb	r3, r3
 800577c:	3301      	adds	r3, #1
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	2101      	movs	r1, #1
 8005784:	fa01 f303 	lsl.w	r3, r1, r3
 8005788:	ea42 0103 	orr.w	r1, r2, r3
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10d      	bne.n	80057b4 <HAL_ADC_ConfigChannel+0x820>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	0e9b      	lsrs	r3, r3, #26
 800579e:	3301      	adds	r3, #1
 80057a0:	f003 021f 	and.w	r2, r3, #31
 80057a4:	4613      	mov	r3, r2
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	4413      	add	r3, r2
 80057aa:	3b1e      	subs	r3, #30
 80057ac:	051b      	lsls	r3, r3, #20
 80057ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057b2:	e01b      	b.n	80057ec <HAL_ADC_ConfigChannel+0x858>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	fa93 f3a3 	rbit	r3, r3
 80057c0:	60fb      	str	r3, [r7, #12]
  return result;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80057cc:	2320      	movs	r3, #32
 80057ce:	e003      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	fab3 f383 	clz	r3, r3
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	3301      	adds	r3, #1
 80057da:	f003 021f 	and.w	r2, r3, #31
 80057de:	4613      	mov	r3, r2
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	4413      	add	r3, r2
 80057e4:	3b1e      	subs	r3, #30
 80057e6:	051b      	lsls	r3, r3, #20
 80057e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057ec:	430b      	orrs	r3, r1
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	6892      	ldr	r2, [r2, #8]
 80057f2:	4619      	mov	r1, r3
 80057f4:	f7fe fe3f 	bl	8004476 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f280 80d7 	bge.w	80059b0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a06      	ldr	r2, [pc, #24]	; (8005820 <HAL_ADC_ConfigChannel+0x88c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d004      	beq.n	8005816 <HAL_ADC_ConfigChannel+0x882>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a04      	ldr	r2, [pc, #16]	; (8005824 <HAL_ADC_ConfigChannel+0x890>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d10a      	bne.n	800582c <HAL_ADC_ConfigChannel+0x898>
 8005816:	4b04      	ldr	r3, [pc, #16]	; (8005828 <HAL_ADC_ConfigChannel+0x894>)
 8005818:	e009      	b.n	800582e <HAL_ADC_ConfigChannel+0x89a>
 800581a:	bf00      	nop
 800581c:	47ff0000 	.word	0x47ff0000
 8005820:	40022000 	.word	0x40022000
 8005824:	40022100 	.word	0x40022100
 8005828:	40022300 	.word	0x40022300
 800582c:	4b65      	ldr	r3, [pc, #404]	; (80059c4 <HAL_ADC_ConfigChannel+0xa30>)
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fce2 	bl	80041f8 <LL_ADC_GetCommonPathInternalCh>
 8005834:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a62      	ldr	r2, [pc, #392]	; (80059c8 <HAL_ADC_ConfigChannel+0xa34>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <HAL_ADC_ConfigChannel+0x8b8>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a61      	ldr	r2, [pc, #388]	; (80059cc <HAL_ADC_ConfigChannel+0xa38>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d10e      	bne.n	800586a <HAL_ADC_ConfigChannel+0x8d6>
 800584c:	485e      	ldr	r0, [pc, #376]	; (80059c8 <HAL_ADC_ConfigChannel+0xa34>)
 800584e:	f7fe ff0f 	bl	8004670 <LL_ADC_IsEnabled>
 8005852:	4604      	mov	r4, r0
 8005854:	485d      	ldr	r0, [pc, #372]	; (80059cc <HAL_ADC_ConfigChannel+0xa38>)
 8005856:	f7fe ff0b 	bl	8004670 <LL_ADC_IsEnabled>
 800585a:	4603      	mov	r3, r0
 800585c:	4323      	orrs	r3, r4
 800585e:	2b00      	cmp	r3, #0
 8005860:	bf0c      	ite	eq
 8005862:	2301      	moveq	r3, #1
 8005864:	2300      	movne	r3, #0
 8005866:	b2db      	uxtb	r3, r3
 8005868:	e008      	b.n	800587c <HAL_ADC_ConfigChannel+0x8e8>
 800586a:	4859      	ldr	r0, [pc, #356]	; (80059d0 <HAL_ADC_ConfigChannel+0xa3c>)
 800586c:	f7fe ff00 	bl	8004670 <LL_ADC_IsEnabled>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	bf0c      	ite	eq
 8005876:	2301      	moveq	r3, #1
 8005878:	2300      	movne	r3, #0
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 8084 	beq.w	800598a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a53      	ldr	r2, [pc, #332]	; (80059d4 <HAL_ADC_ConfigChannel+0xa40>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d132      	bne.n	80058f2 <HAL_ADC_ConfigChannel+0x95e>
 800588c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d12c      	bne.n	80058f2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a4c      	ldr	r2, [pc, #304]	; (80059d0 <HAL_ADC_ConfigChannel+0xa3c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	f040 8086 	bne.w	80059b0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a47      	ldr	r2, [pc, #284]	; (80059c8 <HAL_ADC_ConfigChannel+0xa34>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d004      	beq.n	80058b8 <HAL_ADC_ConfigChannel+0x924>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a46      	ldr	r2, [pc, #280]	; (80059cc <HAL_ADC_ConfigChannel+0xa38>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d101      	bne.n	80058bc <HAL_ADC_ConfigChannel+0x928>
 80058b8:	4a47      	ldr	r2, [pc, #284]	; (80059d8 <HAL_ADC_ConfigChannel+0xa44>)
 80058ba:	e000      	b.n	80058be <HAL_ADC_ConfigChannel+0x92a>
 80058bc:	4a41      	ldr	r2, [pc, #260]	; (80059c4 <HAL_ADC_ConfigChannel+0xa30>)
 80058be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058c6:	4619      	mov	r1, r3
 80058c8:	4610      	mov	r0, r2
 80058ca:	f7fe fc82 	bl	80041d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058ce:	4b43      	ldr	r3, [pc, #268]	; (80059dc <HAL_ADC_ConfigChannel+0xa48>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	099b      	lsrs	r3, r3, #6
 80058d4:	4a42      	ldr	r2, [pc, #264]	; (80059e0 <HAL_ADC_ConfigChannel+0xa4c>)
 80058d6:	fba2 2303 	umull	r2, r3, r2, r3
 80058da:	099b      	lsrs	r3, r3, #6
 80058dc:	3301      	adds	r3, #1
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80058e2:	e002      	b.n	80058ea <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1f9      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058f0:	e05e      	b.n	80059b0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a3b      	ldr	r2, [pc, #236]	; (80059e4 <HAL_ADC_ConfigChannel+0xa50>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d120      	bne.n	800593e <HAL_ADC_ConfigChannel+0x9aa>
 80058fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d11a      	bne.n	800593e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a30      	ldr	r2, [pc, #192]	; (80059d0 <HAL_ADC_ConfigChannel+0xa3c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d14e      	bne.n	80059b0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a2c      	ldr	r2, [pc, #176]	; (80059c8 <HAL_ADC_ConfigChannel+0xa34>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_ADC_ConfigChannel+0x992>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a2a      	ldr	r2, [pc, #168]	; (80059cc <HAL_ADC_ConfigChannel+0xa38>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d101      	bne.n	800592a <HAL_ADC_ConfigChannel+0x996>
 8005926:	4a2c      	ldr	r2, [pc, #176]	; (80059d8 <HAL_ADC_ConfigChannel+0xa44>)
 8005928:	e000      	b.n	800592c <HAL_ADC_ConfigChannel+0x998>
 800592a:	4a26      	ldr	r2, [pc, #152]	; (80059c4 <HAL_ADC_ConfigChannel+0xa30>)
 800592c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005930:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005934:	4619      	mov	r1, r3
 8005936:	4610      	mov	r0, r2
 8005938:	f7fe fc4b 	bl	80041d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800593c:	e038      	b.n	80059b0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a29      	ldr	r2, [pc, #164]	; (80059e8 <HAL_ADC_ConfigChannel+0xa54>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d133      	bne.n	80059b0 <HAL_ADC_ConfigChannel+0xa1c>
 8005948:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800594c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d12d      	bne.n	80059b0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a1d      	ldr	r2, [pc, #116]	; (80059d0 <HAL_ADC_ConfigChannel+0xa3c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d128      	bne.n	80059b0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a19      	ldr	r2, [pc, #100]	; (80059c8 <HAL_ADC_ConfigChannel+0xa34>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d004      	beq.n	8005972 <HAL_ADC_ConfigChannel+0x9de>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a17      	ldr	r2, [pc, #92]	; (80059cc <HAL_ADC_ConfigChannel+0xa38>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d101      	bne.n	8005976 <HAL_ADC_ConfigChannel+0x9e2>
 8005972:	4a19      	ldr	r2, [pc, #100]	; (80059d8 <HAL_ADC_ConfigChannel+0xa44>)
 8005974:	e000      	b.n	8005978 <HAL_ADC_ConfigChannel+0x9e4>
 8005976:	4a13      	ldr	r2, [pc, #76]	; (80059c4 <HAL_ADC_ConfigChannel+0xa30>)
 8005978:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800597c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005980:	4619      	mov	r1, r3
 8005982:	4610      	mov	r0, r2
 8005984:	f7fe fc25 	bl	80041d2 <LL_ADC_SetCommonPathInternalCh>
 8005988:	e012      	b.n	80059b0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598e:	f043 0220 	orr.w	r2, r3, #32
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800599c:	e008      	b.n	80059b0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a2:	f043 0220 	orr.w	r2, r3, #32
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80059b8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80059bc:	4618      	mov	r0, r3
 80059be:	37e4      	adds	r7, #228	; 0xe4
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd90      	pop	{r4, r7, pc}
 80059c4:	58026300 	.word	0x58026300
 80059c8:	40022000 	.word	0x40022000
 80059cc:	40022100 	.word	0x40022100
 80059d0:	58026000 	.word	0x58026000
 80059d4:	c7520000 	.word	0xc7520000
 80059d8:	40022300 	.word	0x40022300
 80059dc:	24000000 	.word	0x24000000
 80059e0:	053e2d63 	.word	0x053e2d63
 80059e4:	c3210000 	.word	0xc3210000
 80059e8:	cb840000 	.word	0xcb840000

080059ec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80059f6:	2300      	movs	r3, #0
 80059f8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fe fe82 	bl	800470c <LL_ADC_REG_IsConversionOngoing>
 8005a08:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe fea4 	bl	800475c <LL_ADC_INJ_IsConversionOngoing>
 8005a14:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d103      	bne.n	8005a24 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 8098 	beq.w	8005b54 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d02a      	beq.n	8005a88 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	7e5b      	ldrb	r3, [r3, #25]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d126      	bne.n	8005a88 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	7e1b      	ldrb	r3, [r3, #24]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d122      	bne.n	8005a88 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005a42:	2301      	movs	r3, #1
 8005a44:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005a46:	e014      	b.n	8005a72 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	4a45      	ldr	r2, [pc, #276]	; (8005b60 <ADC_ConversionStop+0x174>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d90d      	bls.n	8005a6c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a54:	f043 0210 	orr.w	r2, r3, #16
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a60:	f043 0201 	orr.w	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e074      	b.n	8005b56 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b40      	cmp	r3, #64	; 0x40
 8005a7e:	d1e3      	bne.n	8005a48 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2240      	movs	r2, #64	; 0x40
 8005a86:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d014      	beq.n	8005ab8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fe fe3a 	bl	800470c <LL_ADC_REG_IsConversionOngoing>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00c      	beq.n	8005ab8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fe fdf7 	bl	8004696 <LL_ADC_IsDisableOngoing>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe fe16 	bl	80046e4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d014      	beq.n	8005ae8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe fe4a 	bl	800475c <LL_ADC_INJ_IsConversionOngoing>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00c      	beq.n	8005ae8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe fddf 	bl	8004696 <LL_ADC_IsDisableOngoing>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d104      	bne.n	8005ae8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fe fe26 	bl	8004734 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d005      	beq.n	8005afa <ADC_ConversionStop+0x10e>
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d105      	bne.n	8005b00 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005af4:	230c      	movs	r3, #12
 8005af6:	617b      	str	r3, [r7, #20]
        break;
 8005af8:	e005      	b.n	8005b06 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005afa:	2308      	movs	r3, #8
 8005afc:	617b      	str	r3, [r7, #20]
        break;
 8005afe:	e002      	b.n	8005b06 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005b00:	2304      	movs	r3, #4
 8005b02:	617b      	str	r3, [r7, #20]
        break;
 8005b04:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005b06:	f7fe fb0b 	bl	8004120 <HAL_GetTick>
 8005b0a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005b0c:	e01b      	b.n	8005b46 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005b0e:	f7fe fb07 	bl	8004120 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b05      	cmp	r3, #5
 8005b1a:	d914      	bls.n	8005b46 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	4013      	ands	r3, r2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00d      	beq.n	8005b46 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b2e:	f043 0210 	orr.w	r2, r3, #16
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b3a:	f043 0201 	orr.w	r2, r3, #1
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e007      	b.n	8005b56 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1dc      	bne.n	8005b0e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3720      	adds	r7, #32
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	000cdbff 	.word	0x000cdbff

08005b64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fe fd7d 	bl	8004670 <LL_ADC_IsEnabled>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d16e      	bne.n	8005c5a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	4b38      	ldr	r3, [pc, #224]	; (8005c64 <ADC_Enable+0x100>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00d      	beq.n	8005ba6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b8e:	f043 0210 	orr.w	r2, r3, #16
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b9a:	f043 0201 	orr.w	r2, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e05a      	b.n	8005c5c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe fd38 	bl	8004620 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005bb0:	f7fe fab6 	bl	8004120 <HAL_GetTick>
 8005bb4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a2b      	ldr	r2, [pc, #172]	; (8005c68 <ADC_Enable+0x104>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d004      	beq.n	8005bca <ADC_Enable+0x66>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a29      	ldr	r2, [pc, #164]	; (8005c6c <ADC_Enable+0x108>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d101      	bne.n	8005bce <ADC_Enable+0x6a>
 8005bca:	4b29      	ldr	r3, [pc, #164]	; (8005c70 <ADC_Enable+0x10c>)
 8005bcc:	e000      	b.n	8005bd0 <ADC_Enable+0x6c>
 8005bce:	4b29      	ldr	r3, [pc, #164]	; (8005c74 <ADC_Enable+0x110>)
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fe fcbb 	bl	800454c <LL_ADC_GetMultimode>
 8005bd6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a23      	ldr	r2, [pc, #140]	; (8005c6c <ADC_Enable+0x108>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d002      	beq.n	8005be8 <ADC_Enable+0x84>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	e000      	b.n	8005bea <ADC_Enable+0x86>
 8005be8:	4b1f      	ldr	r3, [pc, #124]	; (8005c68 <ADC_Enable+0x104>)
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6812      	ldr	r2, [r2, #0]
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d02c      	beq.n	8005c4c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d130      	bne.n	8005c5a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005bf8:	e028      	b.n	8005c4c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fe fd36 	bl	8004670 <LL_ADC_IsEnabled>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d104      	bne.n	8005c14 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fe fd06 	bl	8004620 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005c14:	f7fe fa84 	bl	8004120 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d914      	bls.n	8005c4c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d00d      	beq.n	8005c4c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c34:	f043 0210 	orr.w	r2, r3, #16
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c40:	f043 0201 	orr.w	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e007      	b.n	8005c5c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d1cf      	bne.n	8005bfa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	8000003f 	.word	0x8000003f
 8005c68:	40022000 	.word	0x40022000
 8005c6c:	40022100 	.word	0x40022100
 8005c70:	40022300 	.word	0x40022300
 8005c74:	58026300 	.word	0x58026300

08005c78 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fe fd06 	bl	8004696 <LL_ADC_IsDisableOngoing>
 8005c8a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fe fced 	bl	8004670 <LL_ADC_IsEnabled>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d047      	beq.n	8005d2c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d144      	bne.n	8005d2c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 030d 	and.w	r3, r3, #13
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d10c      	bne.n	8005cca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fe fcc7 	bl	8004648 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005cc2:	f7fe fa2d 	bl	8004120 <HAL_GetTick>
 8005cc6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005cc8:	e029      	b.n	8005d1e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cce:	f043 0210 	orr.w	r2, r3, #16
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cda:	f043 0201 	orr.w	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e023      	b.n	8005d2e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005ce6:	f7fe fa1b 	bl	8004120 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d914      	bls.n	8005d1e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00d      	beq.n	8005d1e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d06:	f043 0210 	orr.w	r2, r3, #16
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d12:	f043 0201 	orr.w	r2, r3, #1
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e007      	b.n	8005d2e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1dc      	bne.n	8005ce6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a6c      	ldr	r2, [pc, #432]	; (8005ef8 <ADC_ConfigureBoostMode+0x1c0>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d004      	beq.n	8005d54 <ADC_ConfigureBoostMode+0x1c>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a6b      	ldr	r2, [pc, #428]	; (8005efc <ADC_ConfigureBoostMode+0x1c4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d109      	bne.n	8005d68 <ADC_ConfigureBoostMode+0x30>
 8005d54:	4b6a      	ldr	r3, [pc, #424]	; (8005f00 <ADC_ConfigureBoostMode+0x1c8>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bf14      	ite	ne
 8005d60:	2301      	movne	r3, #1
 8005d62:	2300      	moveq	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	e008      	b.n	8005d7a <ADC_ConfigureBoostMode+0x42>
 8005d68:	4b66      	ldr	r3, [pc, #408]	; (8005f04 <ADC_ConfigureBoostMode+0x1cc>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	bf14      	ite	ne
 8005d74:	2301      	movne	r3, #1
 8005d76:	2300      	moveq	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d01c      	beq.n	8005db8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005d7e:	f005 fcab 	bl	800b6d8 <HAL_RCC_GetHCLKFreq>
 8005d82:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d8c:	d010      	beq.n	8005db0 <ADC_ConfigureBoostMode+0x78>
 8005d8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d92:	d873      	bhi.n	8005e7c <ADC_ConfigureBoostMode+0x144>
 8005d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d98:	d002      	beq.n	8005da0 <ADC_ConfigureBoostMode+0x68>
 8005d9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d9e:	d16d      	bne.n	8005e7c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	0c1b      	lsrs	r3, r3, #16
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dac:	60fb      	str	r3, [r7, #12]
        break;
 8005dae:	e068      	b.n	8005e82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	089b      	lsrs	r3, r3, #2
 8005db4:	60fb      	str	r3, [r7, #12]
        break;
 8005db6:	e064      	b.n	8005e82 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005db8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005dbc:	f04f 0100 	mov.w	r1, #0
 8005dc0:	f006 fe86 	bl	800cad0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005dc4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005dce:	d051      	beq.n	8005e74 <ADC_ConfigureBoostMode+0x13c>
 8005dd0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005dd4:	d854      	bhi.n	8005e80 <ADC_ConfigureBoostMode+0x148>
 8005dd6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005dda:	d047      	beq.n	8005e6c <ADC_ConfigureBoostMode+0x134>
 8005ddc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005de0:	d84e      	bhi.n	8005e80 <ADC_ConfigureBoostMode+0x148>
 8005de2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005de6:	d03d      	beq.n	8005e64 <ADC_ConfigureBoostMode+0x12c>
 8005de8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005dec:	d848      	bhi.n	8005e80 <ADC_ConfigureBoostMode+0x148>
 8005dee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005df2:	d033      	beq.n	8005e5c <ADC_ConfigureBoostMode+0x124>
 8005df4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005df8:	d842      	bhi.n	8005e80 <ADC_ConfigureBoostMode+0x148>
 8005dfa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005dfe:	d029      	beq.n	8005e54 <ADC_ConfigureBoostMode+0x11c>
 8005e00:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005e04:	d83c      	bhi.n	8005e80 <ADC_ConfigureBoostMode+0x148>
 8005e06:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005e0a:	d01a      	beq.n	8005e42 <ADC_ConfigureBoostMode+0x10a>
 8005e0c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005e10:	d836      	bhi.n	8005e80 <ADC_ConfigureBoostMode+0x148>
 8005e12:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005e16:	d014      	beq.n	8005e42 <ADC_ConfigureBoostMode+0x10a>
 8005e18:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005e1c:	d830      	bhi.n	8005e80 <ADC_ConfigureBoostMode+0x148>
 8005e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e22:	d00e      	beq.n	8005e42 <ADC_ConfigureBoostMode+0x10a>
 8005e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e28:	d82a      	bhi.n	8005e80 <ADC_ConfigureBoostMode+0x148>
 8005e2a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e2e:	d008      	beq.n	8005e42 <ADC_ConfigureBoostMode+0x10a>
 8005e30:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e34:	d824      	bhi.n	8005e80 <ADC_ConfigureBoostMode+0x148>
 8005e36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e3a:	d002      	beq.n	8005e42 <ADC_ConfigureBoostMode+0x10a>
 8005e3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e40:	d11e      	bne.n	8005e80 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	0c9b      	lsrs	r3, r3, #18
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e50:	60fb      	str	r3, [r7, #12]
        break;
 8005e52:	e016      	b.n	8005e82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	091b      	lsrs	r3, r3, #4
 8005e58:	60fb      	str	r3, [r7, #12]
        break;
 8005e5a:	e012      	b.n	8005e82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	60fb      	str	r3, [r7, #12]
        break;
 8005e62:	e00e      	b.n	8005e82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	099b      	lsrs	r3, r3, #6
 8005e68:	60fb      	str	r3, [r7, #12]
        break;
 8005e6a:	e00a      	b.n	8005e82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	09db      	lsrs	r3, r3, #7
 8005e70:	60fb      	str	r3, [r7, #12]
        break;
 8005e72:	e006      	b.n	8005e82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	0a1b      	lsrs	r3, r3, #8
 8005e78:	60fb      	str	r3, [r7, #12]
        break;
 8005e7a:	e002      	b.n	8005e82 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005e7c:	bf00      	nop
 8005e7e:	e000      	b.n	8005e82 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005e80:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	085b      	lsrs	r3, r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4a1f      	ldr	r2, [pc, #124]	; (8005f08 <ADC_ConfigureBoostMode+0x1d0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d808      	bhi.n	8005ea2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e9e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005ea0:	e025      	b.n	8005eee <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a19      	ldr	r2, [pc, #100]	; (8005f0c <ADC_ConfigureBoostMode+0x1d4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d80a      	bhi.n	8005ec0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ebc:	609a      	str	r2, [r3, #8]
}
 8005ebe:	e016      	b.n	8005eee <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4a13      	ldr	r2, [pc, #76]	; (8005f10 <ADC_ConfigureBoostMode+0x1d8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d80a      	bhi.n	8005ede <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eda:	609a      	str	r2, [r3, #8]
}
 8005edc:	e007      	b.n	8005eee <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005eec:	609a      	str	r2, [r3, #8]
}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40022000 	.word	0x40022000
 8005efc:	40022100 	.word	0x40022100
 8005f00:	40022300 	.word	0x40022300
 8005f04:	58026300 	.word	0x58026300
 8005f08:	005f5e10 	.word	0x005f5e10
 8005f0c:	00bebc20 	.word	0x00bebc20
 8005f10:	017d7840 	.word	0x017d7840

08005f14 <LL_ADC_IsEnabled>:
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <LL_ADC_IsEnabled+0x18>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e000      	b.n	8005f2e <LL_ADC_IsEnabled+0x1a>
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <LL_ADC_REG_IsConversionOngoing>:
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d101      	bne.n	8005f52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005f60:	b590      	push	{r4, r7, lr}
 8005f62:	b0a3      	sub	sp, #140	; 0x8c
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d101      	bne.n	8005f7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e0c1      	b.n	8006102 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005f86:	2300      	movs	r3, #0
 8005f88:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a5e      	ldr	r2, [pc, #376]	; (800610c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d102      	bne.n	8005f9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005f98:	4b5d      	ldr	r3, [pc, #372]	; (8006110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	e001      	b.n	8005fa2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10b      	bne.n	8005fc0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fac:	f043 0220 	orr.w	r2, r3, #32
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e0a0      	b.n	8006102 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7ff ffb9 	bl	8005f3a <LL_ADC_REG_IsConversionOngoing>
 8005fc8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff ffb2 	bl	8005f3a <LL_ADC_REG_IsConversionOngoing>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f040 8081 	bne.w	80060e0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005fde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d17c      	bne.n	80060e0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a48      	ldr	r2, [pc, #288]	; (800610c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d004      	beq.n	8005ffa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a46      	ldr	r2, [pc, #280]	; (8006110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d101      	bne.n	8005ffe <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005ffa:	4b46      	ldr	r3, [pc, #280]	; (8006114 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005ffc:	e000      	b.n	8006000 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005ffe:	4b46      	ldr	r3, [pc, #280]	; (8006118 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006000:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d039      	beq.n	800607e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800600a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	431a      	orrs	r2, r3
 8006018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800601a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a3a      	ldr	r2, [pc, #232]	; (800610c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d004      	beq.n	8006030 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a39      	ldr	r2, [pc, #228]	; (8006110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d10e      	bne.n	800604e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8006030:	4836      	ldr	r0, [pc, #216]	; (800610c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006032:	f7ff ff6f 	bl	8005f14 <LL_ADC_IsEnabled>
 8006036:	4604      	mov	r4, r0
 8006038:	4835      	ldr	r0, [pc, #212]	; (8006110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800603a:	f7ff ff6b 	bl	8005f14 <LL_ADC_IsEnabled>
 800603e:	4603      	mov	r3, r0
 8006040:	4323      	orrs	r3, r4
 8006042:	2b00      	cmp	r3, #0
 8006044:	bf0c      	ite	eq
 8006046:	2301      	moveq	r3, #1
 8006048:	2300      	movne	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	e008      	b.n	8006060 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800604e:	4833      	ldr	r0, [pc, #204]	; (800611c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006050:	f7ff ff60 	bl	8005f14 <LL_ADC_IsEnabled>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	bf0c      	ite	eq
 800605a:	2301      	moveq	r3, #1
 800605c:	2300      	movne	r3, #0
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d047      	beq.n	80060f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006064:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	4b2d      	ldr	r3, [pc, #180]	; (8006120 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800606a:	4013      	ands	r3, r2
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	6811      	ldr	r1, [r2, #0]
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	6892      	ldr	r2, [r2, #8]
 8006074:	430a      	orrs	r2, r1
 8006076:	431a      	orrs	r2, r3
 8006078:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800607a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800607c:	e03a      	b.n	80060f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800607e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006086:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006088:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a1f      	ldr	r2, [pc, #124]	; (800610c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d004      	beq.n	800609e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a1d      	ldr	r2, [pc, #116]	; (8006110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10e      	bne.n	80060bc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800609e:	481b      	ldr	r0, [pc, #108]	; (800610c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80060a0:	f7ff ff38 	bl	8005f14 <LL_ADC_IsEnabled>
 80060a4:	4604      	mov	r4, r0
 80060a6:	481a      	ldr	r0, [pc, #104]	; (8006110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80060a8:	f7ff ff34 	bl	8005f14 <LL_ADC_IsEnabled>
 80060ac:	4603      	mov	r3, r0
 80060ae:	4323      	orrs	r3, r4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	bf0c      	ite	eq
 80060b4:	2301      	moveq	r3, #1
 80060b6:	2300      	movne	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	e008      	b.n	80060ce <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80060bc:	4817      	ldr	r0, [pc, #92]	; (800611c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80060be:	f7ff ff29 	bl	8005f14 <LL_ADC_IsEnabled>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	bf0c      	ite	eq
 80060c8:	2301      	moveq	r3, #1
 80060ca:	2300      	movne	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d010      	beq.n	80060f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80060d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	4b12      	ldr	r3, [pc, #72]	; (8006120 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80060d8:	4013      	ands	r3, r2
 80060da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80060dc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80060de:	e009      	b.n	80060f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e4:	f043 0220 	orr.w	r2, r3, #32
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80060f2:	e000      	b.n	80060f6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80060f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80060fe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8006102:	4618      	mov	r0, r3
 8006104:	378c      	adds	r7, #140	; 0x8c
 8006106:	46bd      	mov	sp, r7
 8006108:	bd90      	pop	{r4, r7, pc}
 800610a:	bf00      	nop
 800610c:	40022000 	.word	0x40022000
 8006110:	40022100 	.word	0x40022100
 8006114:	40022300 	.word	0x40022300
 8006118:	58026300 	.word	0x58026300
 800611c:	58026000 	.word	0x58026000
 8006120:	fffff0e0 	.word	0xfffff0e0

08006124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f003 0307 	and.w	r3, r3, #7
 8006132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006134:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <__NVIC_SetPriorityGrouping+0x40>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006140:	4013      	ands	r3, r2
 8006142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800614c:	4b06      	ldr	r3, [pc, #24]	; (8006168 <__NVIC_SetPriorityGrouping+0x44>)
 800614e:	4313      	orrs	r3, r2
 8006150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006152:	4a04      	ldr	r2, [pc, #16]	; (8006164 <__NVIC_SetPriorityGrouping+0x40>)
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	60d3      	str	r3, [r2, #12]
}
 8006158:	bf00      	nop
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	e000ed00 	.word	0xe000ed00
 8006168:	05fa0000 	.word	0x05fa0000

0800616c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006170:	4b04      	ldr	r3, [pc, #16]	; (8006184 <__NVIC_GetPriorityGrouping+0x18>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	0a1b      	lsrs	r3, r3, #8
 8006176:	f003 0307 	and.w	r3, r3, #7
}
 800617a:	4618      	mov	r0, r3
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	e000ed00 	.word	0xe000ed00

08006188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	4603      	mov	r3, r0
 8006190:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006196:	2b00      	cmp	r3, #0
 8006198:	db0b      	blt.n	80061b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	f003 021f 	and.w	r2, r3, #31
 80061a0:	4907      	ldr	r1, [pc, #28]	; (80061c0 <__NVIC_EnableIRQ+0x38>)
 80061a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	2001      	movs	r0, #1
 80061aa:	fa00 f202 	lsl.w	r2, r0, r2
 80061ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	e000e100 	.word	0xe000e100

080061c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4603      	mov	r3, r0
 80061cc:	6039      	str	r1, [r7, #0]
 80061ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80061d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	db0a      	blt.n	80061ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	490c      	ldr	r1, [pc, #48]	; (8006210 <__NVIC_SetPriority+0x4c>)
 80061de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061e2:	0112      	lsls	r2, r2, #4
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	440b      	add	r3, r1
 80061e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061ec:	e00a      	b.n	8006204 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	4908      	ldr	r1, [pc, #32]	; (8006214 <__NVIC_SetPriority+0x50>)
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	3b04      	subs	r3, #4
 80061fc:	0112      	lsls	r2, r2, #4
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	440b      	add	r3, r1
 8006202:	761a      	strb	r2, [r3, #24]
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	e000e100 	.word	0xe000e100
 8006214:	e000ed00 	.word	0xe000ed00

08006218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006218:	b480      	push	{r7}
 800621a:	b089      	sub	sp, #36	; 0x24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f1c3 0307 	rsb	r3, r3, #7
 8006232:	2b04      	cmp	r3, #4
 8006234:	bf28      	it	cs
 8006236:	2304      	movcs	r3, #4
 8006238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	3304      	adds	r3, #4
 800623e:	2b06      	cmp	r3, #6
 8006240:	d902      	bls.n	8006248 <NVIC_EncodePriority+0x30>
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	3b03      	subs	r3, #3
 8006246:	e000      	b.n	800624a <NVIC_EncodePriority+0x32>
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800624c:	f04f 32ff 	mov.w	r2, #4294967295
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	43da      	mvns	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	401a      	ands	r2, r3
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006260:	f04f 31ff 	mov.w	r1, #4294967295
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	fa01 f303 	lsl.w	r3, r1, r3
 800626a:	43d9      	mvns	r1, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006270:	4313      	orrs	r3, r2
         );
}
 8006272:	4618      	mov	r0, r3
 8006274:	3724      	adds	r7, #36	; 0x24
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
	...

08006280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3b01      	subs	r3, #1
 800628c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006290:	d301      	bcc.n	8006296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006292:	2301      	movs	r3, #1
 8006294:	e00f      	b.n	80062b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006296:	4a0a      	ldr	r2, [pc, #40]	; (80062c0 <SysTick_Config+0x40>)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3b01      	subs	r3, #1
 800629c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800629e:	210f      	movs	r1, #15
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295
 80062a4:	f7ff ff8e 	bl	80061c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062a8:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <SysTick_Config+0x40>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062ae:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <SysTick_Config+0x40>)
 80062b0:	2207      	movs	r2, #7
 80062b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	e000e010 	.word	0xe000e010

080062c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff ff29 	bl	8006124 <__NVIC_SetPriorityGrouping>
}
 80062d2:	bf00      	nop
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b086      	sub	sp, #24
 80062de:	af00      	add	r7, sp, #0
 80062e0:	4603      	mov	r3, r0
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	607a      	str	r2, [r7, #4]
 80062e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80062e8:	f7ff ff40 	bl	800616c <__NVIC_GetPriorityGrouping>
 80062ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	6978      	ldr	r0, [r7, #20]
 80062f4:	f7ff ff90 	bl	8006218 <NVIC_EncodePriority>
 80062f8:	4602      	mov	r2, r0
 80062fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80062fe:	4611      	mov	r1, r2
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff ff5f 	bl	80061c4 <__NVIC_SetPriority>
}
 8006306:	bf00      	nop
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	4603      	mov	r3, r0
 8006316:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff ff33 	bl	8006188 <__NVIC_EnableIRQ>
}
 8006322:	bf00      	nop
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b082      	sub	sp, #8
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff ffa4 	bl	8006280 <SysTick_Config>
 8006338:	4603      	mov	r3, r0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800634c:	f7fd fee8 	bl	8004120 <HAL_GetTick>
 8006350:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e312      	b.n	8006982 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a66      	ldr	r2, [pc, #408]	; (80064fc <HAL_DMA_Init+0x1b8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d04a      	beq.n	80063fc <HAL_DMA_Init+0xb8>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a65      	ldr	r2, [pc, #404]	; (8006500 <HAL_DMA_Init+0x1bc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d045      	beq.n	80063fc <HAL_DMA_Init+0xb8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a63      	ldr	r2, [pc, #396]	; (8006504 <HAL_DMA_Init+0x1c0>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d040      	beq.n	80063fc <HAL_DMA_Init+0xb8>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a62      	ldr	r2, [pc, #392]	; (8006508 <HAL_DMA_Init+0x1c4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d03b      	beq.n	80063fc <HAL_DMA_Init+0xb8>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a60      	ldr	r2, [pc, #384]	; (800650c <HAL_DMA_Init+0x1c8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d036      	beq.n	80063fc <HAL_DMA_Init+0xb8>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a5f      	ldr	r2, [pc, #380]	; (8006510 <HAL_DMA_Init+0x1cc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d031      	beq.n	80063fc <HAL_DMA_Init+0xb8>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a5d      	ldr	r2, [pc, #372]	; (8006514 <HAL_DMA_Init+0x1d0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d02c      	beq.n	80063fc <HAL_DMA_Init+0xb8>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a5c      	ldr	r2, [pc, #368]	; (8006518 <HAL_DMA_Init+0x1d4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d027      	beq.n	80063fc <HAL_DMA_Init+0xb8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a5a      	ldr	r2, [pc, #360]	; (800651c <HAL_DMA_Init+0x1d8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d022      	beq.n	80063fc <HAL_DMA_Init+0xb8>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a59      	ldr	r2, [pc, #356]	; (8006520 <HAL_DMA_Init+0x1dc>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d01d      	beq.n	80063fc <HAL_DMA_Init+0xb8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a57      	ldr	r2, [pc, #348]	; (8006524 <HAL_DMA_Init+0x1e0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d018      	beq.n	80063fc <HAL_DMA_Init+0xb8>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a56      	ldr	r2, [pc, #344]	; (8006528 <HAL_DMA_Init+0x1e4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d013      	beq.n	80063fc <HAL_DMA_Init+0xb8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a54      	ldr	r2, [pc, #336]	; (800652c <HAL_DMA_Init+0x1e8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00e      	beq.n	80063fc <HAL_DMA_Init+0xb8>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a53      	ldr	r2, [pc, #332]	; (8006530 <HAL_DMA_Init+0x1ec>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d009      	beq.n	80063fc <HAL_DMA_Init+0xb8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a51      	ldr	r2, [pc, #324]	; (8006534 <HAL_DMA_Init+0x1f0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d004      	beq.n	80063fc <HAL_DMA_Init+0xb8>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a50      	ldr	r2, [pc, #320]	; (8006538 <HAL_DMA_Init+0x1f4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d101      	bne.n	8006400 <HAL_DMA_Init+0xbc>
 80063fc:	2301      	movs	r3, #1
 80063fe:	e000      	b.n	8006402 <HAL_DMA_Init+0xbe>
 8006400:	2300      	movs	r3, #0
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 813c 	beq.w	8006680 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a37      	ldr	r2, [pc, #220]	; (80064fc <HAL_DMA_Init+0x1b8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d04a      	beq.n	80064b8 <HAL_DMA_Init+0x174>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a36      	ldr	r2, [pc, #216]	; (8006500 <HAL_DMA_Init+0x1bc>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d045      	beq.n	80064b8 <HAL_DMA_Init+0x174>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a34      	ldr	r2, [pc, #208]	; (8006504 <HAL_DMA_Init+0x1c0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d040      	beq.n	80064b8 <HAL_DMA_Init+0x174>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a33      	ldr	r2, [pc, #204]	; (8006508 <HAL_DMA_Init+0x1c4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d03b      	beq.n	80064b8 <HAL_DMA_Init+0x174>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a31      	ldr	r2, [pc, #196]	; (800650c <HAL_DMA_Init+0x1c8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d036      	beq.n	80064b8 <HAL_DMA_Init+0x174>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a30      	ldr	r2, [pc, #192]	; (8006510 <HAL_DMA_Init+0x1cc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d031      	beq.n	80064b8 <HAL_DMA_Init+0x174>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a2e      	ldr	r2, [pc, #184]	; (8006514 <HAL_DMA_Init+0x1d0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d02c      	beq.n	80064b8 <HAL_DMA_Init+0x174>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a2d      	ldr	r2, [pc, #180]	; (8006518 <HAL_DMA_Init+0x1d4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d027      	beq.n	80064b8 <HAL_DMA_Init+0x174>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a2b      	ldr	r2, [pc, #172]	; (800651c <HAL_DMA_Init+0x1d8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d022      	beq.n	80064b8 <HAL_DMA_Init+0x174>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a2a      	ldr	r2, [pc, #168]	; (8006520 <HAL_DMA_Init+0x1dc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d01d      	beq.n	80064b8 <HAL_DMA_Init+0x174>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a28      	ldr	r2, [pc, #160]	; (8006524 <HAL_DMA_Init+0x1e0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d018      	beq.n	80064b8 <HAL_DMA_Init+0x174>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a27      	ldr	r2, [pc, #156]	; (8006528 <HAL_DMA_Init+0x1e4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d013      	beq.n	80064b8 <HAL_DMA_Init+0x174>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a25      	ldr	r2, [pc, #148]	; (800652c <HAL_DMA_Init+0x1e8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00e      	beq.n	80064b8 <HAL_DMA_Init+0x174>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a24      	ldr	r2, [pc, #144]	; (8006530 <HAL_DMA_Init+0x1ec>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d009      	beq.n	80064b8 <HAL_DMA_Init+0x174>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a22      	ldr	r2, [pc, #136]	; (8006534 <HAL_DMA_Init+0x1f0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d004      	beq.n	80064b8 <HAL_DMA_Init+0x174>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a21      	ldr	r2, [pc, #132]	; (8006538 <HAL_DMA_Init+0x1f4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d108      	bne.n	80064ca <HAL_DMA_Init+0x186>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0201 	bic.w	r2, r2, #1
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	e007      	b.n	80064da <HAL_DMA_Init+0x196>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0201 	bic.w	r2, r2, #1
 80064d8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80064da:	e02f      	b.n	800653c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064dc:	f7fd fe20 	bl	8004120 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b05      	cmp	r3, #5
 80064e8:	d928      	bls.n	800653c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2203      	movs	r2, #3
 80064f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e242      	b.n	8006982 <HAL_DMA_Init+0x63e>
 80064fc:	40020010 	.word	0x40020010
 8006500:	40020028 	.word	0x40020028
 8006504:	40020040 	.word	0x40020040
 8006508:	40020058 	.word	0x40020058
 800650c:	40020070 	.word	0x40020070
 8006510:	40020088 	.word	0x40020088
 8006514:	400200a0 	.word	0x400200a0
 8006518:	400200b8 	.word	0x400200b8
 800651c:	40020410 	.word	0x40020410
 8006520:	40020428 	.word	0x40020428
 8006524:	40020440 	.word	0x40020440
 8006528:	40020458 	.word	0x40020458
 800652c:	40020470 	.word	0x40020470
 8006530:	40020488 	.word	0x40020488
 8006534:	400204a0 	.word	0x400204a0
 8006538:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1c8      	bne.n	80064dc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	4b83      	ldr	r3, [pc, #524]	; (8006764 <HAL_DMA_Init+0x420>)
 8006556:	4013      	ands	r3, r2
 8006558:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006562:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800656e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800657a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	4313      	orrs	r3, r2
 8006586:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	2b04      	cmp	r3, #4
 800658e:	d107      	bne.n	80065a0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006598:	4313      	orrs	r3, r2
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2b28      	cmp	r3, #40	; 0x28
 80065a6:	d903      	bls.n	80065b0 <HAL_DMA_Init+0x26c>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	2b2e      	cmp	r3, #46	; 0x2e
 80065ae:	d91f      	bls.n	80065f0 <HAL_DMA_Init+0x2ac>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	2b3e      	cmp	r3, #62	; 0x3e
 80065b6:	d903      	bls.n	80065c0 <HAL_DMA_Init+0x27c>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2b42      	cmp	r3, #66	; 0x42
 80065be:	d917      	bls.n	80065f0 <HAL_DMA_Init+0x2ac>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2b46      	cmp	r3, #70	; 0x46
 80065c6:	d903      	bls.n	80065d0 <HAL_DMA_Init+0x28c>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2b48      	cmp	r3, #72	; 0x48
 80065ce:	d90f      	bls.n	80065f0 <HAL_DMA_Init+0x2ac>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	2b4e      	cmp	r3, #78	; 0x4e
 80065d6:	d903      	bls.n	80065e0 <HAL_DMA_Init+0x29c>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2b52      	cmp	r3, #82	; 0x52
 80065de:	d907      	bls.n	80065f0 <HAL_DMA_Init+0x2ac>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	2b73      	cmp	r3, #115	; 0x73
 80065e6:	d905      	bls.n	80065f4 <HAL_DMA_Init+0x2b0>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	2b77      	cmp	r3, #119	; 0x77
 80065ee:	d801      	bhi.n	80065f4 <HAL_DMA_Init+0x2b0>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <HAL_DMA_Init+0x2b2>
 80065f4:	2300      	movs	r3, #0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006600:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f023 0307 	bic.w	r3, r3, #7
 8006618:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	2b04      	cmp	r3, #4
 800662a:	d117      	bne.n	800665c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00e      	beq.n	800665c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f001 fdca 	bl	80081d8 <DMA_CheckFifoParam>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d008      	beq.n	800665c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2240      	movs	r2, #64	; 0x40
 800664e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e192      	b.n	8006982 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f001 fd05 	bl	8008074 <DMA_CalcBaseAndBitshift>
 800666a:	4603      	mov	r3, r0
 800666c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006672:	f003 031f 	and.w	r3, r3, #31
 8006676:	223f      	movs	r2, #63	; 0x3f
 8006678:	409a      	lsls	r2, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	609a      	str	r2, [r3, #8]
 800667e:	e0c8      	b.n	8006812 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a38      	ldr	r2, [pc, #224]	; (8006768 <HAL_DMA_Init+0x424>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d022      	beq.n	80066d0 <HAL_DMA_Init+0x38c>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a37      	ldr	r2, [pc, #220]	; (800676c <HAL_DMA_Init+0x428>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d01d      	beq.n	80066d0 <HAL_DMA_Init+0x38c>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a35      	ldr	r2, [pc, #212]	; (8006770 <HAL_DMA_Init+0x42c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d018      	beq.n	80066d0 <HAL_DMA_Init+0x38c>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a34      	ldr	r2, [pc, #208]	; (8006774 <HAL_DMA_Init+0x430>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d013      	beq.n	80066d0 <HAL_DMA_Init+0x38c>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a32      	ldr	r2, [pc, #200]	; (8006778 <HAL_DMA_Init+0x434>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00e      	beq.n	80066d0 <HAL_DMA_Init+0x38c>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a31      	ldr	r2, [pc, #196]	; (800677c <HAL_DMA_Init+0x438>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d009      	beq.n	80066d0 <HAL_DMA_Init+0x38c>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a2f      	ldr	r2, [pc, #188]	; (8006780 <HAL_DMA_Init+0x43c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d004      	beq.n	80066d0 <HAL_DMA_Init+0x38c>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a2e      	ldr	r2, [pc, #184]	; (8006784 <HAL_DMA_Init+0x440>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d101      	bne.n	80066d4 <HAL_DMA_Init+0x390>
 80066d0:	2301      	movs	r3, #1
 80066d2:	e000      	b.n	80066d6 <HAL_DMA_Init+0x392>
 80066d4:	2300      	movs	r3, #0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 8092 	beq.w	8006800 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a21      	ldr	r2, [pc, #132]	; (8006768 <HAL_DMA_Init+0x424>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d021      	beq.n	800672a <HAL_DMA_Init+0x3e6>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a20      	ldr	r2, [pc, #128]	; (800676c <HAL_DMA_Init+0x428>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d01c      	beq.n	800672a <HAL_DMA_Init+0x3e6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1e      	ldr	r2, [pc, #120]	; (8006770 <HAL_DMA_Init+0x42c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d017      	beq.n	800672a <HAL_DMA_Init+0x3e6>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1d      	ldr	r2, [pc, #116]	; (8006774 <HAL_DMA_Init+0x430>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d012      	beq.n	800672a <HAL_DMA_Init+0x3e6>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a1b      	ldr	r2, [pc, #108]	; (8006778 <HAL_DMA_Init+0x434>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00d      	beq.n	800672a <HAL_DMA_Init+0x3e6>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1a      	ldr	r2, [pc, #104]	; (800677c <HAL_DMA_Init+0x438>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d008      	beq.n	800672a <HAL_DMA_Init+0x3e6>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a18      	ldr	r2, [pc, #96]	; (8006780 <HAL_DMA_Init+0x43c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d003      	beq.n	800672a <HAL_DMA_Init+0x3e6>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a17      	ldr	r2, [pc, #92]	; (8006784 <HAL_DMA_Init+0x440>)
 8006728:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2202      	movs	r2, #2
 800672e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4b10      	ldr	r3, [pc, #64]	; (8006788 <HAL_DMA_Init+0x444>)
 8006746:	4013      	ands	r3, r2
 8006748:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2b40      	cmp	r3, #64	; 0x40
 8006750:	d01c      	beq.n	800678c <HAL_DMA_Init+0x448>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	2b80      	cmp	r3, #128	; 0x80
 8006758:	d102      	bne.n	8006760 <HAL_DMA_Init+0x41c>
 800675a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800675e:	e016      	b.n	800678e <HAL_DMA_Init+0x44a>
 8006760:	2300      	movs	r3, #0
 8006762:	e014      	b.n	800678e <HAL_DMA_Init+0x44a>
 8006764:	fe10803f 	.word	0xfe10803f
 8006768:	58025408 	.word	0x58025408
 800676c:	5802541c 	.word	0x5802541c
 8006770:	58025430 	.word	0x58025430
 8006774:	58025444 	.word	0x58025444
 8006778:	58025458 	.word	0x58025458
 800677c:	5802546c 	.word	0x5802546c
 8006780:	58025480 	.word	0x58025480
 8006784:	58025494 	.word	0x58025494
 8006788:	fffe000f 	.word	0xfffe000f
 800678c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	68d2      	ldr	r2, [r2, #12]
 8006792:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006794:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800679c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80067a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80067ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80067b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80067bc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	4b6e      	ldr	r3, [pc, #440]	; (800698c <HAL_DMA_Init+0x648>)
 80067d4:	4413      	add	r3, r2
 80067d6:	4a6e      	ldr	r2, [pc, #440]	; (8006990 <HAL_DMA_Init+0x64c>)
 80067d8:	fba2 2303 	umull	r2, r3, r2, r3
 80067dc:	091b      	lsrs	r3, r3, #4
 80067de:	009a      	lsls	r2, r3, #2
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f001 fc45 	bl	8008074 <DMA_CalcBaseAndBitshift>
 80067ea:	4603      	mov	r3, r0
 80067ec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f2:	f003 031f 	and.w	r3, r3, #31
 80067f6:	2201      	movs	r2, #1
 80067f8:	409a      	lsls	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	e008      	b.n	8006812 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2240      	movs	r2, #64	; 0x40
 8006804:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2203      	movs	r2, #3
 800680a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e0b7      	b.n	8006982 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a5f      	ldr	r2, [pc, #380]	; (8006994 <HAL_DMA_Init+0x650>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d072      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a5d      	ldr	r2, [pc, #372]	; (8006998 <HAL_DMA_Init+0x654>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d06d      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a5c      	ldr	r2, [pc, #368]	; (800699c <HAL_DMA_Init+0x658>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d068      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a5a      	ldr	r2, [pc, #360]	; (80069a0 <HAL_DMA_Init+0x65c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d063      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a59      	ldr	r2, [pc, #356]	; (80069a4 <HAL_DMA_Init+0x660>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d05e      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a57      	ldr	r2, [pc, #348]	; (80069a8 <HAL_DMA_Init+0x664>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d059      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a56      	ldr	r2, [pc, #344]	; (80069ac <HAL_DMA_Init+0x668>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d054      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a54      	ldr	r2, [pc, #336]	; (80069b0 <HAL_DMA_Init+0x66c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d04f      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a53      	ldr	r2, [pc, #332]	; (80069b4 <HAL_DMA_Init+0x670>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d04a      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a51      	ldr	r2, [pc, #324]	; (80069b8 <HAL_DMA_Init+0x674>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d045      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a50      	ldr	r2, [pc, #320]	; (80069bc <HAL_DMA_Init+0x678>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d040      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a4e      	ldr	r2, [pc, #312]	; (80069c0 <HAL_DMA_Init+0x67c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d03b      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a4d      	ldr	r2, [pc, #308]	; (80069c4 <HAL_DMA_Init+0x680>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d036      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a4b      	ldr	r2, [pc, #300]	; (80069c8 <HAL_DMA_Init+0x684>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d031      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a4a      	ldr	r2, [pc, #296]	; (80069cc <HAL_DMA_Init+0x688>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d02c      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a48      	ldr	r2, [pc, #288]	; (80069d0 <HAL_DMA_Init+0x68c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d027      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a47      	ldr	r2, [pc, #284]	; (80069d4 <HAL_DMA_Init+0x690>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d022      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a45      	ldr	r2, [pc, #276]	; (80069d8 <HAL_DMA_Init+0x694>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d01d      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a44      	ldr	r2, [pc, #272]	; (80069dc <HAL_DMA_Init+0x698>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d018      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a42      	ldr	r2, [pc, #264]	; (80069e0 <HAL_DMA_Init+0x69c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d013      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a41      	ldr	r2, [pc, #260]	; (80069e4 <HAL_DMA_Init+0x6a0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00e      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a3f      	ldr	r2, [pc, #252]	; (80069e8 <HAL_DMA_Init+0x6a4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d009      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a3e      	ldr	r2, [pc, #248]	; (80069ec <HAL_DMA_Init+0x6a8>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d004      	beq.n	8006902 <HAL_DMA_Init+0x5be>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a3c      	ldr	r2, [pc, #240]	; (80069f0 <HAL_DMA_Init+0x6ac>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d101      	bne.n	8006906 <HAL_DMA_Init+0x5c2>
 8006902:	2301      	movs	r3, #1
 8006904:	e000      	b.n	8006908 <HAL_DMA_Init+0x5c4>
 8006906:	2300      	movs	r3, #0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d032      	beq.n	8006972 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f001 fcdf 	bl	80082d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	2b80      	cmp	r3, #128	; 0x80
 8006918:	d102      	bne.n	8006920 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006934:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d010      	beq.n	8006960 <HAL_DMA_Init+0x61c>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b08      	cmp	r3, #8
 8006944:	d80c      	bhi.n	8006960 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f001 fd5c 	bl	8008404 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800695c:	605a      	str	r2, [r3, #4]
 800695e:	e008      	b.n	8006972 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	a7fdabf8 	.word	0xa7fdabf8
 8006990:	cccccccd 	.word	0xcccccccd
 8006994:	40020010 	.word	0x40020010
 8006998:	40020028 	.word	0x40020028
 800699c:	40020040 	.word	0x40020040
 80069a0:	40020058 	.word	0x40020058
 80069a4:	40020070 	.word	0x40020070
 80069a8:	40020088 	.word	0x40020088
 80069ac:	400200a0 	.word	0x400200a0
 80069b0:	400200b8 	.word	0x400200b8
 80069b4:	40020410 	.word	0x40020410
 80069b8:	40020428 	.word	0x40020428
 80069bc:	40020440 	.word	0x40020440
 80069c0:	40020458 	.word	0x40020458
 80069c4:	40020470 	.word	0x40020470
 80069c8:	40020488 	.word	0x40020488
 80069cc:	400204a0 	.word	0x400204a0
 80069d0:	400204b8 	.word	0x400204b8
 80069d4:	58025408 	.word	0x58025408
 80069d8:	5802541c 	.word	0x5802541c
 80069dc:	58025430 	.word	0x58025430
 80069e0:	58025444 	.word	0x58025444
 80069e4:	58025458 	.word	0x58025458
 80069e8:	5802546c 	.word	0x5802546c
 80069ec:	58025480 	.word	0x58025480
 80069f0:	58025494 	.word	0x58025494

080069f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e226      	b.n	8006e5e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d101      	bne.n	8006a1e <HAL_DMA_Start_IT+0x2a>
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	e21f      	b.n	8006e5e <HAL_DMA_Start_IT+0x46a>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	f040 820a 	bne.w	8006e48 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a68      	ldr	r2, [pc, #416]	; (8006be8 <HAL_DMA_Start_IT+0x1f4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d04a      	beq.n	8006ae2 <HAL_DMA_Start_IT+0xee>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a66      	ldr	r2, [pc, #408]	; (8006bec <HAL_DMA_Start_IT+0x1f8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d045      	beq.n	8006ae2 <HAL_DMA_Start_IT+0xee>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a65      	ldr	r2, [pc, #404]	; (8006bf0 <HAL_DMA_Start_IT+0x1fc>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d040      	beq.n	8006ae2 <HAL_DMA_Start_IT+0xee>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a63      	ldr	r2, [pc, #396]	; (8006bf4 <HAL_DMA_Start_IT+0x200>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d03b      	beq.n	8006ae2 <HAL_DMA_Start_IT+0xee>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a62      	ldr	r2, [pc, #392]	; (8006bf8 <HAL_DMA_Start_IT+0x204>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d036      	beq.n	8006ae2 <HAL_DMA_Start_IT+0xee>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a60      	ldr	r2, [pc, #384]	; (8006bfc <HAL_DMA_Start_IT+0x208>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d031      	beq.n	8006ae2 <HAL_DMA_Start_IT+0xee>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a5f      	ldr	r2, [pc, #380]	; (8006c00 <HAL_DMA_Start_IT+0x20c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d02c      	beq.n	8006ae2 <HAL_DMA_Start_IT+0xee>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a5d      	ldr	r2, [pc, #372]	; (8006c04 <HAL_DMA_Start_IT+0x210>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d027      	beq.n	8006ae2 <HAL_DMA_Start_IT+0xee>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a5c      	ldr	r2, [pc, #368]	; (8006c08 <HAL_DMA_Start_IT+0x214>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d022      	beq.n	8006ae2 <HAL_DMA_Start_IT+0xee>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a5a      	ldr	r2, [pc, #360]	; (8006c0c <HAL_DMA_Start_IT+0x218>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d01d      	beq.n	8006ae2 <HAL_DMA_Start_IT+0xee>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a59      	ldr	r2, [pc, #356]	; (8006c10 <HAL_DMA_Start_IT+0x21c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d018      	beq.n	8006ae2 <HAL_DMA_Start_IT+0xee>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a57      	ldr	r2, [pc, #348]	; (8006c14 <HAL_DMA_Start_IT+0x220>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d013      	beq.n	8006ae2 <HAL_DMA_Start_IT+0xee>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a56      	ldr	r2, [pc, #344]	; (8006c18 <HAL_DMA_Start_IT+0x224>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00e      	beq.n	8006ae2 <HAL_DMA_Start_IT+0xee>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a54      	ldr	r2, [pc, #336]	; (8006c1c <HAL_DMA_Start_IT+0x228>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d009      	beq.n	8006ae2 <HAL_DMA_Start_IT+0xee>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a53      	ldr	r2, [pc, #332]	; (8006c20 <HAL_DMA_Start_IT+0x22c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d004      	beq.n	8006ae2 <HAL_DMA_Start_IT+0xee>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a51      	ldr	r2, [pc, #324]	; (8006c24 <HAL_DMA_Start_IT+0x230>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d108      	bne.n	8006af4 <HAL_DMA_Start_IT+0x100>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 0201 	bic.w	r2, r2, #1
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	e007      	b.n	8006b04 <HAL_DMA_Start_IT+0x110>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0201 	bic.w	r2, r2, #1
 8006b02:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f001 f906 	bl	8007d1c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a34      	ldr	r2, [pc, #208]	; (8006be8 <HAL_DMA_Start_IT+0x1f4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d04a      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x1bc>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a33      	ldr	r2, [pc, #204]	; (8006bec <HAL_DMA_Start_IT+0x1f8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d045      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x1bc>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a31      	ldr	r2, [pc, #196]	; (8006bf0 <HAL_DMA_Start_IT+0x1fc>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d040      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x1bc>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a30      	ldr	r2, [pc, #192]	; (8006bf4 <HAL_DMA_Start_IT+0x200>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d03b      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x1bc>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a2e      	ldr	r2, [pc, #184]	; (8006bf8 <HAL_DMA_Start_IT+0x204>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d036      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x1bc>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a2d      	ldr	r2, [pc, #180]	; (8006bfc <HAL_DMA_Start_IT+0x208>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d031      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x1bc>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a2b      	ldr	r2, [pc, #172]	; (8006c00 <HAL_DMA_Start_IT+0x20c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d02c      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x1bc>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a2a      	ldr	r2, [pc, #168]	; (8006c04 <HAL_DMA_Start_IT+0x210>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d027      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x1bc>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a28      	ldr	r2, [pc, #160]	; (8006c08 <HAL_DMA_Start_IT+0x214>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d022      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x1bc>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a27      	ldr	r2, [pc, #156]	; (8006c0c <HAL_DMA_Start_IT+0x218>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d01d      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x1bc>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a25      	ldr	r2, [pc, #148]	; (8006c10 <HAL_DMA_Start_IT+0x21c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d018      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x1bc>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a24      	ldr	r2, [pc, #144]	; (8006c14 <HAL_DMA_Start_IT+0x220>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d013      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x1bc>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a22      	ldr	r2, [pc, #136]	; (8006c18 <HAL_DMA_Start_IT+0x224>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00e      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x1bc>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a21      	ldr	r2, [pc, #132]	; (8006c1c <HAL_DMA_Start_IT+0x228>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d009      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x1bc>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1f      	ldr	r2, [pc, #124]	; (8006c20 <HAL_DMA_Start_IT+0x22c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d004      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x1bc>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a1e      	ldr	r2, [pc, #120]	; (8006c24 <HAL_DMA_Start_IT+0x230>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d101      	bne.n	8006bb4 <HAL_DMA_Start_IT+0x1c0>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e000      	b.n	8006bb6 <HAL_DMA_Start_IT+0x1c2>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d036      	beq.n	8006c28 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f023 021e 	bic.w	r2, r3, #30
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f042 0216 	orr.w	r2, r2, #22
 8006bcc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d03e      	beq.n	8006c54 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f042 0208 	orr.w	r2, r2, #8
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	e035      	b.n	8006c54 <HAL_DMA_Start_IT+0x260>
 8006be8:	40020010 	.word	0x40020010
 8006bec:	40020028 	.word	0x40020028
 8006bf0:	40020040 	.word	0x40020040
 8006bf4:	40020058 	.word	0x40020058
 8006bf8:	40020070 	.word	0x40020070
 8006bfc:	40020088 	.word	0x40020088
 8006c00:	400200a0 	.word	0x400200a0
 8006c04:	400200b8 	.word	0x400200b8
 8006c08:	40020410 	.word	0x40020410
 8006c0c:	40020428 	.word	0x40020428
 8006c10:	40020440 	.word	0x40020440
 8006c14:	40020458 	.word	0x40020458
 8006c18:	40020470 	.word	0x40020470
 8006c1c:	40020488 	.word	0x40020488
 8006c20:	400204a0 	.word	0x400204a0
 8006c24:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f023 020e 	bic.w	r2, r3, #14
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 020a 	orr.w	r2, r2, #10
 8006c3a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d007      	beq.n	8006c54 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0204 	orr.w	r2, r2, #4
 8006c52:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a83      	ldr	r2, [pc, #524]	; (8006e68 <HAL_DMA_Start_IT+0x474>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d072      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a82      	ldr	r2, [pc, #520]	; (8006e6c <HAL_DMA_Start_IT+0x478>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d06d      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a80      	ldr	r2, [pc, #512]	; (8006e70 <HAL_DMA_Start_IT+0x47c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d068      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a7f      	ldr	r2, [pc, #508]	; (8006e74 <HAL_DMA_Start_IT+0x480>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d063      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a7d      	ldr	r2, [pc, #500]	; (8006e78 <HAL_DMA_Start_IT+0x484>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d05e      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a7c      	ldr	r2, [pc, #496]	; (8006e7c <HAL_DMA_Start_IT+0x488>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d059      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a7a      	ldr	r2, [pc, #488]	; (8006e80 <HAL_DMA_Start_IT+0x48c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d054      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a79      	ldr	r2, [pc, #484]	; (8006e84 <HAL_DMA_Start_IT+0x490>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d04f      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a77      	ldr	r2, [pc, #476]	; (8006e88 <HAL_DMA_Start_IT+0x494>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d04a      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a76      	ldr	r2, [pc, #472]	; (8006e8c <HAL_DMA_Start_IT+0x498>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d045      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a74      	ldr	r2, [pc, #464]	; (8006e90 <HAL_DMA_Start_IT+0x49c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d040      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a73      	ldr	r2, [pc, #460]	; (8006e94 <HAL_DMA_Start_IT+0x4a0>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d03b      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a71      	ldr	r2, [pc, #452]	; (8006e98 <HAL_DMA_Start_IT+0x4a4>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d036      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a70      	ldr	r2, [pc, #448]	; (8006e9c <HAL_DMA_Start_IT+0x4a8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d031      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a6e      	ldr	r2, [pc, #440]	; (8006ea0 <HAL_DMA_Start_IT+0x4ac>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d02c      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a6d      	ldr	r2, [pc, #436]	; (8006ea4 <HAL_DMA_Start_IT+0x4b0>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d027      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a6b      	ldr	r2, [pc, #428]	; (8006ea8 <HAL_DMA_Start_IT+0x4b4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d022      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a6a      	ldr	r2, [pc, #424]	; (8006eac <HAL_DMA_Start_IT+0x4b8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d01d      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a68      	ldr	r2, [pc, #416]	; (8006eb0 <HAL_DMA_Start_IT+0x4bc>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d018      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a67      	ldr	r2, [pc, #412]	; (8006eb4 <HAL_DMA_Start_IT+0x4c0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d013      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a65      	ldr	r2, [pc, #404]	; (8006eb8 <HAL_DMA_Start_IT+0x4c4>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00e      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a64      	ldr	r2, [pc, #400]	; (8006ebc <HAL_DMA_Start_IT+0x4c8>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d009      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a62      	ldr	r2, [pc, #392]	; (8006ec0 <HAL_DMA_Start_IT+0x4cc>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d004      	beq.n	8006d44 <HAL_DMA_Start_IT+0x350>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a61      	ldr	r2, [pc, #388]	; (8006ec4 <HAL_DMA_Start_IT+0x4d0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d101      	bne.n	8006d48 <HAL_DMA_Start_IT+0x354>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <HAL_DMA_Start_IT+0x356>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d01a      	beq.n	8006d84 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d6a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d82:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a37      	ldr	r2, [pc, #220]	; (8006e68 <HAL_DMA_Start_IT+0x474>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d04a      	beq.n	8006e24 <HAL_DMA_Start_IT+0x430>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a36      	ldr	r2, [pc, #216]	; (8006e6c <HAL_DMA_Start_IT+0x478>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d045      	beq.n	8006e24 <HAL_DMA_Start_IT+0x430>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a34      	ldr	r2, [pc, #208]	; (8006e70 <HAL_DMA_Start_IT+0x47c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d040      	beq.n	8006e24 <HAL_DMA_Start_IT+0x430>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a33      	ldr	r2, [pc, #204]	; (8006e74 <HAL_DMA_Start_IT+0x480>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d03b      	beq.n	8006e24 <HAL_DMA_Start_IT+0x430>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a31      	ldr	r2, [pc, #196]	; (8006e78 <HAL_DMA_Start_IT+0x484>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d036      	beq.n	8006e24 <HAL_DMA_Start_IT+0x430>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a30      	ldr	r2, [pc, #192]	; (8006e7c <HAL_DMA_Start_IT+0x488>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d031      	beq.n	8006e24 <HAL_DMA_Start_IT+0x430>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a2e      	ldr	r2, [pc, #184]	; (8006e80 <HAL_DMA_Start_IT+0x48c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d02c      	beq.n	8006e24 <HAL_DMA_Start_IT+0x430>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a2d      	ldr	r2, [pc, #180]	; (8006e84 <HAL_DMA_Start_IT+0x490>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d027      	beq.n	8006e24 <HAL_DMA_Start_IT+0x430>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a2b      	ldr	r2, [pc, #172]	; (8006e88 <HAL_DMA_Start_IT+0x494>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d022      	beq.n	8006e24 <HAL_DMA_Start_IT+0x430>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a2a      	ldr	r2, [pc, #168]	; (8006e8c <HAL_DMA_Start_IT+0x498>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d01d      	beq.n	8006e24 <HAL_DMA_Start_IT+0x430>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a28      	ldr	r2, [pc, #160]	; (8006e90 <HAL_DMA_Start_IT+0x49c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d018      	beq.n	8006e24 <HAL_DMA_Start_IT+0x430>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a27      	ldr	r2, [pc, #156]	; (8006e94 <HAL_DMA_Start_IT+0x4a0>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d013      	beq.n	8006e24 <HAL_DMA_Start_IT+0x430>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a25      	ldr	r2, [pc, #148]	; (8006e98 <HAL_DMA_Start_IT+0x4a4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00e      	beq.n	8006e24 <HAL_DMA_Start_IT+0x430>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a24      	ldr	r2, [pc, #144]	; (8006e9c <HAL_DMA_Start_IT+0x4a8>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d009      	beq.n	8006e24 <HAL_DMA_Start_IT+0x430>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a22      	ldr	r2, [pc, #136]	; (8006ea0 <HAL_DMA_Start_IT+0x4ac>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d004      	beq.n	8006e24 <HAL_DMA_Start_IT+0x430>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a21      	ldr	r2, [pc, #132]	; (8006ea4 <HAL_DMA_Start_IT+0x4b0>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d108      	bne.n	8006e36 <HAL_DMA_Start_IT+0x442>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0201 	orr.w	r2, r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	e012      	b.n	8006e5c <HAL_DMA_Start_IT+0x468>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 0201 	orr.w	r2, r2, #1
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	e009      	b.n	8006e5c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	40020010 	.word	0x40020010
 8006e6c:	40020028 	.word	0x40020028
 8006e70:	40020040 	.word	0x40020040
 8006e74:	40020058 	.word	0x40020058
 8006e78:	40020070 	.word	0x40020070
 8006e7c:	40020088 	.word	0x40020088
 8006e80:	400200a0 	.word	0x400200a0
 8006e84:	400200b8 	.word	0x400200b8
 8006e88:	40020410 	.word	0x40020410
 8006e8c:	40020428 	.word	0x40020428
 8006e90:	40020440 	.word	0x40020440
 8006e94:	40020458 	.word	0x40020458
 8006e98:	40020470 	.word	0x40020470
 8006e9c:	40020488 	.word	0x40020488
 8006ea0:	400204a0 	.word	0x400204a0
 8006ea4:	400204b8 	.word	0x400204b8
 8006ea8:	58025408 	.word	0x58025408
 8006eac:	5802541c 	.word	0x5802541c
 8006eb0:	58025430 	.word	0x58025430
 8006eb4:	58025444 	.word	0x58025444
 8006eb8:	58025458 	.word	0x58025458
 8006ebc:	5802546c 	.word	0x5802546c
 8006ec0:	58025480 	.word	0x58025480
 8006ec4:	58025494 	.word	0x58025494

08006ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08a      	sub	sp, #40	; 0x28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ed4:	4b67      	ldr	r3, [pc, #412]	; (8007074 <HAL_DMA_IRQHandler+0x1ac>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a67      	ldr	r2, [pc, #412]	; (8007078 <HAL_DMA_IRQHandler+0x1b0>)
 8006eda:	fba2 2303 	umull	r2, r3, r2, r3
 8006ede:	0a9b      	lsrs	r3, r3, #10
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a5f      	ldr	r2, [pc, #380]	; (800707c <HAL_DMA_IRQHandler+0x1b4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d04a      	beq.n	8006f9a <HAL_DMA_IRQHandler+0xd2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a5d      	ldr	r2, [pc, #372]	; (8007080 <HAL_DMA_IRQHandler+0x1b8>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d045      	beq.n	8006f9a <HAL_DMA_IRQHandler+0xd2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a5c      	ldr	r2, [pc, #368]	; (8007084 <HAL_DMA_IRQHandler+0x1bc>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d040      	beq.n	8006f9a <HAL_DMA_IRQHandler+0xd2>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a5a      	ldr	r2, [pc, #360]	; (8007088 <HAL_DMA_IRQHandler+0x1c0>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d03b      	beq.n	8006f9a <HAL_DMA_IRQHandler+0xd2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a59      	ldr	r2, [pc, #356]	; (800708c <HAL_DMA_IRQHandler+0x1c4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d036      	beq.n	8006f9a <HAL_DMA_IRQHandler+0xd2>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a57      	ldr	r2, [pc, #348]	; (8007090 <HAL_DMA_IRQHandler+0x1c8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d031      	beq.n	8006f9a <HAL_DMA_IRQHandler+0xd2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a56      	ldr	r2, [pc, #344]	; (8007094 <HAL_DMA_IRQHandler+0x1cc>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d02c      	beq.n	8006f9a <HAL_DMA_IRQHandler+0xd2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a54      	ldr	r2, [pc, #336]	; (8007098 <HAL_DMA_IRQHandler+0x1d0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d027      	beq.n	8006f9a <HAL_DMA_IRQHandler+0xd2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a53      	ldr	r2, [pc, #332]	; (800709c <HAL_DMA_IRQHandler+0x1d4>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d022      	beq.n	8006f9a <HAL_DMA_IRQHandler+0xd2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a51      	ldr	r2, [pc, #324]	; (80070a0 <HAL_DMA_IRQHandler+0x1d8>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d01d      	beq.n	8006f9a <HAL_DMA_IRQHandler+0xd2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a50      	ldr	r2, [pc, #320]	; (80070a4 <HAL_DMA_IRQHandler+0x1dc>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d018      	beq.n	8006f9a <HAL_DMA_IRQHandler+0xd2>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a4e      	ldr	r2, [pc, #312]	; (80070a8 <HAL_DMA_IRQHandler+0x1e0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d013      	beq.n	8006f9a <HAL_DMA_IRQHandler+0xd2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a4d      	ldr	r2, [pc, #308]	; (80070ac <HAL_DMA_IRQHandler+0x1e4>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d00e      	beq.n	8006f9a <HAL_DMA_IRQHandler+0xd2>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a4b      	ldr	r2, [pc, #300]	; (80070b0 <HAL_DMA_IRQHandler+0x1e8>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d009      	beq.n	8006f9a <HAL_DMA_IRQHandler+0xd2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a4a      	ldr	r2, [pc, #296]	; (80070b4 <HAL_DMA_IRQHandler+0x1ec>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d004      	beq.n	8006f9a <HAL_DMA_IRQHandler+0xd2>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a48      	ldr	r2, [pc, #288]	; (80070b8 <HAL_DMA_IRQHandler+0x1f0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d101      	bne.n	8006f9e <HAL_DMA_IRQHandler+0xd6>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <HAL_DMA_IRQHandler+0xd8>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 842b 	beq.w	80077fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006faa:	f003 031f 	and.w	r3, r3, #31
 8006fae:	2208      	movs	r2, #8
 8006fb0:	409a      	lsls	r2, r3
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80a2 	beq.w	8007100 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a2e      	ldr	r2, [pc, #184]	; (800707c <HAL_DMA_IRQHandler+0x1b4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d04a      	beq.n	800705c <HAL_DMA_IRQHandler+0x194>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a2d      	ldr	r2, [pc, #180]	; (8007080 <HAL_DMA_IRQHandler+0x1b8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d045      	beq.n	800705c <HAL_DMA_IRQHandler+0x194>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a2b      	ldr	r2, [pc, #172]	; (8007084 <HAL_DMA_IRQHandler+0x1bc>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d040      	beq.n	800705c <HAL_DMA_IRQHandler+0x194>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a2a      	ldr	r2, [pc, #168]	; (8007088 <HAL_DMA_IRQHandler+0x1c0>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d03b      	beq.n	800705c <HAL_DMA_IRQHandler+0x194>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a28      	ldr	r2, [pc, #160]	; (800708c <HAL_DMA_IRQHandler+0x1c4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d036      	beq.n	800705c <HAL_DMA_IRQHandler+0x194>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a27      	ldr	r2, [pc, #156]	; (8007090 <HAL_DMA_IRQHandler+0x1c8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d031      	beq.n	800705c <HAL_DMA_IRQHandler+0x194>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a25      	ldr	r2, [pc, #148]	; (8007094 <HAL_DMA_IRQHandler+0x1cc>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d02c      	beq.n	800705c <HAL_DMA_IRQHandler+0x194>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a24      	ldr	r2, [pc, #144]	; (8007098 <HAL_DMA_IRQHandler+0x1d0>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d027      	beq.n	800705c <HAL_DMA_IRQHandler+0x194>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a22      	ldr	r2, [pc, #136]	; (800709c <HAL_DMA_IRQHandler+0x1d4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d022      	beq.n	800705c <HAL_DMA_IRQHandler+0x194>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a21      	ldr	r2, [pc, #132]	; (80070a0 <HAL_DMA_IRQHandler+0x1d8>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d01d      	beq.n	800705c <HAL_DMA_IRQHandler+0x194>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a1f      	ldr	r2, [pc, #124]	; (80070a4 <HAL_DMA_IRQHandler+0x1dc>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d018      	beq.n	800705c <HAL_DMA_IRQHandler+0x194>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a1e      	ldr	r2, [pc, #120]	; (80070a8 <HAL_DMA_IRQHandler+0x1e0>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d013      	beq.n	800705c <HAL_DMA_IRQHandler+0x194>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a1c      	ldr	r2, [pc, #112]	; (80070ac <HAL_DMA_IRQHandler+0x1e4>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d00e      	beq.n	800705c <HAL_DMA_IRQHandler+0x194>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a1b      	ldr	r2, [pc, #108]	; (80070b0 <HAL_DMA_IRQHandler+0x1e8>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d009      	beq.n	800705c <HAL_DMA_IRQHandler+0x194>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a19      	ldr	r2, [pc, #100]	; (80070b4 <HAL_DMA_IRQHandler+0x1ec>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d004      	beq.n	800705c <HAL_DMA_IRQHandler+0x194>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a18      	ldr	r2, [pc, #96]	; (80070b8 <HAL_DMA_IRQHandler+0x1f0>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d12f      	bne.n	80070bc <HAL_DMA_IRQHandler+0x1f4>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0304 	and.w	r3, r3, #4
 8007066:	2b00      	cmp	r3, #0
 8007068:	bf14      	ite	ne
 800706a:	2301      	movne	r3, #1
 800706c:	2300      	moveq	r3, #0
 800706e:	b2db      	uxtb	r3, r3
 8007070:	e02e      	b.n	80070d0 <HAL_DMA_IRQHandler+0x208>
 8007072:	bf00      	nop
 8007074:	24000000 	.word	0x24000000
 8007078:	1b4e81b5 	.word	0x1b4e81b5
 800707c:	40020010 	.word	0x40020010
 8007080:	40020028 	.word	0x40020028
 8007084:	40020040 	.word	0x40020040
 8007088:	40020058 	.word	0x40020058
 800708c:	40020070 	.word	0x40020070
 8007090:	40020088 	.word	0x40020088
 8007094:	400200a0 	.word	0x400200a0
 8007098:	400200b8 	.word	0x400200b8
 800709c:	40020410 	.word	0x40020410
 80070a0:	40020428 	.word	0x40020428
 80070a4:	40020440 	.word	0x40020440
 80070a8:	40020458 	.word	0x40020458
 80070ac:	40020470 	.word	0x40020470
 80070b0:	40020488 	.word	0x40020488
 80070b4:	400204a0 	.word	0x400204a0
 80070b8:	400204b8 	.word	0x400204b8
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0308 	and.w	r3, r3, #8
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bf14      	ite	ne
 80070ca:	2301      	movne	r3, #1
 80070cc:	2300      	moveq	r3, #0
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d015      	beq.n	8007100 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 0204 	bic.w	r2, r2, #4
 80070e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e8:	f003 031f 	and.w	r3, r3, #31
 80070ec:	2208      	movs	r2, #8
 80070ee:	409a      	lsls	r2, r3
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f8:	f043 0201 	orr.w	r2, r3, #1
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007104:	f003 031f 	and.w	r3, r3, #31
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	fa22 f303 	lsr.w	r3, r2, r3
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	d06e      	beq.n	80071f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a69      	ldr	r2, [pc, #420]	; (80072c0 <HAL_DMA_IRQHandler+0x3f8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d04a      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x2ee>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a67      	ldr	r2, [pc, #412]	; (80072c4 <HAL_DMA_IRQHandler+0x3fc>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d045      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x2ee>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a66      	ldr	r2, [pc, #408]	; (80072c8 <HAL_DMA_IRQHandler+0x400>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d040      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x2ee>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a64      	ldr	r2, [pc, #400]	; (80072cc <HAL_DMA_IRQHandler+0x404>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d03b      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x2ee>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a63      	ldr	r2, [pc, #396]	; (80072d0 <HAL_DMA_IRQHandler+0x408>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d036      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x2ee>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a61      	ldr	r2, [pc, #388]	; (80072d4 <HAL_DMA_IRQHandler+0x40c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d031      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x2ee>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a60      	ldr	r2, [pc, #384]	; (80072d8 <HAL_DMA_IRQHandler+0x410>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d02c      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x2ee>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a5e      	ldr	r2, [pc, #376]	; (80072dc <HAL_DMA_IRQHandler+0x414>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d027      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x2ee>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a5d      	ldr	r2, [pc, #372]	; (80072e0 <HAL_DMA_IRQHandler+0x418>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d022      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x2ee>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a5b      	ldr	r2, [pc, #364]	; (80072e4 <HAL_DMA_IRQHandler+0x41c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d01d      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x2ee>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a5a      	ldr	r2, [pc, #360]	; (80072e8 <HAL_DMA_IRQHandler+0x420>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d018      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x2ee>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a58      	ldr	r2, [pc, #352]	; (80072ec <HAL_DMA_IRQHandler+0x424>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d013      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x2ee>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a57      	ldr	r2, [pc, #348]	; (80072f0 <HAL_DMA_IRQHandler+0x428>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d00e      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x2ee>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a55      	ldr	r2, [pc, #340]	; (80072f4 <HAL_DMA_IRQHandler+0x42c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d009      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x2ee>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a54      	ldr	r2, [pc, #336]	; (80072f8 <HAL_DMA_IRQHandler+0x430>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d004      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x2ee>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a52      	ldr	r2, [pc, #328]	; (80072fc <HAL_DMA_IRQHandler+0x434>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d10a      	bne.n	80071cc <HAL_DMA_IRQHandler+0x304>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bf14      	ite	ne
 80071c4:	2301      	movne	r3, #1
 80071c6:	2300      	moveq	r3, #0
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	e003      	b.n	80071d4 <HAL_DMA_IRQHandler+0x30c>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2300      	movs	r3, #0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00d      	beq.n	80071f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071dc:	f003 031f 	and.w	r3, r3, #31
 80071e0:	2201      	movs	r2, #1
 80071e2:	409a      	lsls	r2, r3
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ec:	f043 0202 	orr.w	r2, r3, #2
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f8:	f003 031f 	and.w	r3, r3, #31
 80071fc:	2204      	movs	r2, #4
 80071fe:	409a      	lsls	r2, r3
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	4013      	ands	r3, r2
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 808f 	beq.w	8007328 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a2c      	ldr	r2, [pc, #176]	; (80072c0 <HAL_DMA_IRQHandler+0x3f8>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d04a      	beq.n	80072aa <HAL_DMA_IRQHandler+0x3e2>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a2a      	ldr	r2, [pc, #168]	; (80072c4 <HAL_DMA_IRQHandler+0x3fc>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d045      	beq.n	80072aa <HAL_DMA_IRQHandler+0x3e2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a29      	ldr	r2, [pc, #164]	; (80072c8 <HAL_DMA_IRQHandler+0x400>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d040      	beq.n	80072aa <HAL_DMA_IRQHandler+0x3e2>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a27      	ldr	r2, [pc, #156]	; (80072cc <HAL_DMA_IRQHandler+0x404>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d03b      	beq.n	80072aa <HAL_DMA_IRQHandler+0x3e2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a26      	ldr	r2, [pc, #152]	; (80072d0 <HAL_DMA_IRQHandler+0x408>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d036      	beq.n	80072aa <HAL_DMA_IRQHandler+0x3e2>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a24      	ldr	r2, [pc, #144]	; (80072d4 <HAL_DMA_IRQHandler+0x40c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d031      	beq.n	80072aa <HAL_DMA_IRQHandler+0x3e2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a23      	ldr	r2, [pc, #140]	; (80072d8 <HAL_DMA_IRQHandler+0x410>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d02c      	beq.n	80072aa <HAL_DMA_IRQHandler+0x3e2>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a21      	ldr	r2, [pc, #132]	; (80072dc <HAL_DMA_IRQHandler+0x414>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d027      	beq.n	80072aa <HAL_DMA_IRQHandler+0x3e2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a20      	ldr	r2, [pc, #128]	; (80072e0 <HAL_DMA_IRQHandler+0x418>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d022      	beq.n	80072aa <HAL_DMA_IRQHandler+0x3e2>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1e      	ldr	r2, [pc, #120]	; (80072e4 <HAL_DMA_IRQHandler+0x41c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d01d      	beq.n	80072aa <HAL_DMA_IRQHandler+0x3e2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a1d      	ldr	r2, [pc, #116]	; (80072e8 <HAL_DMA_IRQHandler+0x420>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d018      	beq.n	80072aa <HAL_DMA_IRQHandler+0x3e2>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1b      	ldr	r2, [pc, #108]	; (80072ec <HAL_DMA_IRQHandler+0x424>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <HAL_DMA_IRQHandler+0x3e2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a1a      	ldr	r2, [pc, #104]	; (80072f0 <HAL_DMA_IRQHandler+0x428>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00e      	beq.n	80072aa <HAL_DMA_IRQHandler+0x3e2>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a18      	ldr	r2, [pc, #96]	; (80072f4 <HAL_DMA_IRQHandler+0x42c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d009      	beq.n	80072aa <HAL_DMA_IRQHandler+0x3e2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a17      	ldr	r2, [pc, #92]	; (80072f8 <HAL_DMA_IRQHandler+0x430>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d004      	beq.n	80072aa <HAL_DMA_IRQHandler+0x3e2>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a15      	ldr	r2, [pc, #84]	; (80072fc <HAL_DMA_IRQHandler+0x434>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d12a      	bne.n	8007300 <HAL_DMA_IRQHandler+0x438>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	bf14      	ite	ne
 80072b8:	2301      	movne	r3, #1
 80072ba:	2300      	moveq	r3, #0
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	e023      	b.n	8007308 <HAL_DMA_IRQHandler+0x440>
 80072c0:	40020010 	.word	0x40020010
 80072c4:	40020028 	.word	0x40020028
 80072c8:	40020040 	.word	0x40020040
 80072cc:	40020058 	.word	0x40020058
 80072d0:	40020070 	.word	0x40020070
 80072d4:	40020088 	.word	0x40020088
 80072d8:	400200a0 	.word	0x400200a0
 80072dc:	400200b8 	.word	0x400200b8
 80072e0:	40020410 	.word	0x40020410
 80072e4:	40020428 	.word	0x40020428
 80072e8:	40020440 	.word	0x40020440
 80072ec:	40020458 	.word	0x40020458
 80072f0:	40020470 	.word	0x40020470
 80072f4:	40020488 	.word	0x40020488
 80072f8:	400204a0 	.word	0x400204a0
 80072fc:	400204b8 	.word	0x400204b8
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2300      	movs	r3, #0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00d      	beq.n	8007328 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007310:	f003 031f 	and.w	r3, r3, #31
 8007314:	2204      	movs	r2, #4
 8007316:	409a      	lsls	r2, r3
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007320:	f043 0204 	orr.w	r2, r3, #4
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800732c:	f003 031f 	and.w	r3, r3, #31
 8007330:	2210      	movs	r2, #16
 8007332:	409a      	lsls	r2, r3
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	4013      	ands	r3, r2
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 80a6 	beq.w	800748a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a85      	ldr	r2, [pc, #532]	; (8007558 <HAL_DMA_IRQHandler+0x690>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d04a      	beq.n	80073de <HAL_DMA_IRQHandler+0x516>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a83      	ldr	r2, [pc, #524]	; (800755c <HAL_DMA_IRQHandler+0x694>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d045      	beq.n	80073de <HAL_DMA_IRQHandler+0x516>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a82      	ldr	r2, [pc, #520]	; (8007560 <HAL_DMA_IRQHandler+0x698>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d040      	beq.n	80073de <HAL_DMA_IRQHandler+0x516>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a80      	ldr	r2, [pc, #512]	; (8007564 <HAL_DMA_IRQHandler+0x69c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d03b      	beq.n	80073de <HAL_DMA_IRQHandler+0x516>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a7f      	ldr	r2, [pc, #508]	; (8007568 <HAL_DMA_IRQHandler+0x6a0>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d036      	beq.n	80073de <HAL_DMA_IRQHandler+0x516>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a7d      	ldr	r2, [pc, #500]	; (800756c <HAL_DMA_IRQHandler+0x6a4>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d031      	beq.n	80073de <HAL_DMA_IRQHandler+0x516>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a7c      	ldr	r2, [pc, #496]	; (8007570 <HAL_DMA_IRQHandler+0x6a8>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d02c      	beq.n	80073de <HAL_DMA_IRQHandler+0x516>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a7a      	ldr	r2, [pc, #488]	; (8007574 <HAL_DMA_IRQHandler+0x6ac>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d027      	beq.n	80073de <HAL_DMA_IRQHandler+0x516>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a79      	ldr	r2, [pc, #484]	; (8007578 <HAL_DMA_IRQHandler+0x6b0>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d022      	beq.n	80073de <HAL_DMA_IRQHandler+0x516>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a77      	ldr	r2, [pc, #476]	; (800757c <HAL_DMA_IRQHandler+0x6b4>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d01d      	beq.n	80073de <HAL_DMA_IRQHandler+0x516>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a76      	ldr	r2, [pc, #472]	; (8007580 <HAL_DMA_IRQHandler+0x6b8>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d018      	beq.n	80073de <HAL_DMA_IRQHandler+0x516>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a74      	ldr	r2, [pc, #464]	; (8007584 <HAL_DMA_IRQHandler+0x6bc>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d013      	beq.n	80073de <HAL_DMA_IRQHandler+0x516>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a73      	ldr	r2, [pc, #460]	; (8007588 <HAL_DMA_IRQHandler+0x6c0>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d00e      	beq.n	80073de <HAL_DMA_IRQHandler+0x516>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a71      	ldr	r2, [pc, #452]	; (800758c <HAL_DMA_IRQHandler+0x6c4>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d009      	beq.n	80073de <HAL_DMA_IRQHandler+0x516>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a70      	ldr	r2, [pc, #448]	; (8007590 <HAL_DMA_IRQHandler+0x6c8>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d004      	beq.n	80073de <HAL_DMA_IRQHandler+0x516>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a6e      	ldr	r2, [pc, #440]	; (8007594 <HAL_DMA_IRQHandler+0x6cc>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d10a      	bne.n	80073f4 <HAL_DMA_IRQHandler+0x52c>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	bf14      	ite	ne
 80073ec:	2301      	movne	r3, #1
 80073ee:	2300      	moveq	r3, #0
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	e009      	b.n	8007408 <HAL_DMA_IRQHandler+0x540>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0304 	and.w	r3, r3, #4
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bf14      	ite	ne
 8007402:	2301      	movne	r3, #1
 8007404:	2300      	moveq	r3, #0
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d03e      	beq.n	800748a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007410:	f003 031f 	and.w	r3, r3, #31
 8007414:	2210      	movs	r2, #16
 8007416:	409a      	lsls	r2, r3
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d018      	beq.n	800745c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d108      	bne.n	800744a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743c:	2b00      	cmp	r3, #0
 800743e:	d024      	beq.n	800748a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	4798      	blx	r3
 8007448:	e01f      	b.n	800748a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800744e:	2b00      	cmp	r3, #0
 8007450:	d01b      	beq.n	800748a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
 800745a:	e016      	b.n	800748a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007466:	2b00      	cmp	r3, #0
 8007468:	d107      	bne.n	800747a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f022 0208 	bic.w	r2, r2, #8
 8007478:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800748e:	f003 031f 	and.w	r3, r3, #31
 8007492:	2220      	movs	r2, #32
 8007494:	409a      	lsls	r2, r3
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	4013      	ands	r3, r2
 800749a:	2b00      	cmp	r3, #0
 800749c:	f000 8110 	beq.w	80076c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a2c      	ldr	r2, [pc, #176]	; (8007558 <HAL_DMA_IRQHandler+0x690>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d04a      	beq.n	8007540 <HAL_DMA_IRQHandler+0x678>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a2b      	ldr	r2, [pc, #172]	; (800755c <HAL_DMA_IRQHandler+0x694>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d045      	beq.n	8007540 <HAL_DMA_IRQHandler+0x678>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a29      	ldr	r2, [pc, #164]	; (8007560 <HAL_DMA_IRQHandler+0x698>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d040      	beq.n	8007540 <HAL_DMA_IRQHandler+0x678>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a28      	ldr	r2, [pc, #160]	; (8007564 <HAL_DMA_IRQHandler+0x69c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d03b      	beq.n	8007540 <HAL_DMA_IRQHandler+0x678>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a26      	ldr	r2, [pc, #152]	; (8007568 <HAL_DMA_IRQHandler+0x6a0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d036      	beq.n	8007540 <HAL_DMA_IRQHandler+0x678>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a25      	ldr	r2, [pc, #148]	; (800756c <HAL_DMA_IRQHandler+0x6a4>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d031      	beq.n	8007540 <HAL_DMA_IRQHandler+0x678>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a23      	ldr	r2, [pc, #140]	; (8007570 <HAL_DMA_IRQHandler+0x6a8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d02c      	beq.n	8007540 <HAL_DMA_IRQHandler+0x678>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a22      	ldr	r2, [pc, #136]	; (8007574 <HAL_DMA_IRQHandler+0x6ac>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d027      	beq.n	8007540 <HAL_DMA_IRQHandler+0x678>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a20      	ldr	r2, [pc, #128]	; (8007578 <HAL_DMA_IRQHandler+0x6b0>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d022      	beq.n	8007540 <HAL_DMA_IRQHandler+0x678>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a1f      	ldr	r2, [pc, #124]	; (800757c <HAL_DMA_IRQHandler+0x6b4>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d01d      	beq.n	8007540 <HAL_DMA_IRQHandler+0x678>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a1d      	ldr	r2, [pc, #116]	; (8007580 <HAL_DMA_IRQHandler+0x6b8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d018      	beq.n	8007540 <HAL_DMA_IRQHandler+0x678>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a1c      	ldr	r2, [pc, #112]	; (8007584 <HAL_DMA_IRQHandler+0x6bc>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d013      	beq.n	8007540 <HAL_DMA_IRQHandler+0x678>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a1a      	ldr	r2, [pc, #104]	; (8007588 <HAL_DMA_IRQHandler+0x6c0>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d00e      	beq.n	8007540 <HAL_DMA_IRQHandler+0x678>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a19      	ldr	r2, [pc, #100]	; (800758c <HAL_DMA_IRQHandler+0x6c4>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d009      	beq.n	8007540 <HAL_DMA_IRQHandler+0x678>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a17      	ldr	r2, [pc, #92]	; (8007590 <HAL_DMA_IRQHandler+0x6c8>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d004      	beq.n	8007540 <HAL_DMA_IRQHandler+0x678>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a16      	ldr	r2, [pc, #88]	; (8007594 <HAL_DMA_IRQHandler+0x6cc>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d12b      	bne.n	8007598 <HAL_DMA_IRQHandler+0x6d0>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0310 	and.w	r3, r3, #16
 800754a:	2b00      	cmp	r3, #0
 800754c:	bf14      	ite	ne
 800754e:	2301      	movne	r3, #1
 8007550:	2300      	moveq	r3, #0
 8007552:	b2db      	uxtb	r3, r3
 8007554:	e02a      	b.n	80075ac <HAL_DMA_IRQHandler+0x6e4>
 8007556:	bf00      	nop
 8007558:	40020010 	.word	0x40020010
 800755c:	40020028 	.word	0x40020028
 8007560:	40020040 	.word	0x40020040
 8007564:	40020058 	.word	0x40020058
 8007568:	40020070 	.word	0x40020070
 800756c:	40020088 	.word	0x40020088
 8007570:	400200a0 	.word	0x400200a0
 8007574:	400200b8 	.word	0x400200b8
 8007578:	40020410 	.word	0x40020410
 800757c:	40020428 	.word	0x40020428
 8007580:	40020440 	.word	0x40020440
 8007584:	40020458 	.word	0x40020458
 8007588:	40020470 	.word	0x40020470
 800758c:	40020488 	.word	0x40020488
 8007590:	400204a0 	.word	0x400204a0
 8007594:	400204b8 	.word	0x400204b8
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	bf14      	ite	ne
 80075a6:	2301      	movne	r3, #1
 80075a8:	2300      	moveq	r3, #0
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 8087 	beq.w	80076c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b6:	f003 031f 	and.w	r3, r3, #31
 80075ba:	2220      	movs	r2, #32
 80075bc:	409a      	lsls	r2, r3
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d139      	bne.n	8007642 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0216 	bic.w	r2, r2, #22
 80075dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	695a      	ldr	r2, [r3, #20]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d103      	bne.n	80075fe <HAL_DMA_IRQHandler+0x736>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d007      	beq.n	800760e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0208 	bic.w	r2, r2, #8
 800760c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007612:	f003 031f 	and.w	r3, r3, #31
 8007616:	223f      	movs	r2, #63	; 0x3f
 8007618:	409a      	lsls	r2, r3
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 834a 	beq.w	8007ccc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	4798      	blx	r3
          }
          return;
 8007640:	e344      	b.n	8007ccc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d018      	beq.n	8007682 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d108      	bne.n	8007670 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007662:	2b00      	cmp	r3, #0
 8007664:	d02c      	beq.n	80076c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	4798      	blx	r3
 800766e:	e027      	b.n	80076c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007674:	2b00      	cmp	r3, #0
 8007676:	d023      	beq.n	80076c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	4798      	blx	r3
 8007680:	e01e      	b.n	80076c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10f      	bne.n	80076b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0210 	bic.w	r2, r2, #16
 800769e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d003      	beq.n	80076c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 8306 	beq.w	8007cd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 8088 	beq.w	80077e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2204      	movs	r2, #4
 80076dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a7a      	ldr	r2, [pc, #488]	; (80078d0 <HAL_DMA_IRQHandler+0xa08>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d04a      	beq.n	8007780 <HAL_DMA_IRQHandler+0x8b8>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a79      	ldr	r2, [pc, #484]	; (80078d4 <HAL_DMA_IRQHandler+0xa0c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d045      	beq.n	8007780 <HAL_DMA_IRQHandler+0x8b8>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a77      	ldr	r2, [pc, #476]	; (80078d8 <HAL_DMA_IRQHandler+0xa10>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d040      	beq.n	8007780 <HAL_DMA_IRQHandler+0x8b8>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a76      	ldr	r2, [pc, #472]	; (80078dc <HAL_DMA_IRQHandler+0xa14>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d03b      	beq.n	8007780 <HAL_DMA_IRQHandler+0x8b8>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a74      	ldr	r2, [pc, #464]	; (80078e0 <HAL_DMA_IRQHandler+0xa18>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d036      	beq.n	8007780 <HAL_DMA_IRQHandler+0x8b8>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a73      	ldr	r2, [pc, #460]	; (80078e4 <HAL_DMA_IRQHandler+0xa1c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d031      	beq.n	8007780 <HAL_DMA_IRQHandler+0x8b8>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a71      	ldr	r2, [pc, #452]	; (80078e8 <HAL_DMA_IRQHandler+0xa20>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d02c      	beq.n	8007780 <HAL_DMA_IRQHandler+0x8b8>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a70      	ldr	r2, [pc, #448]	; (80078ec <HAL_DMA_IRQHandler+0xa24>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d027      	beq.n	8007780 <HAL_DMA_IRQHandler+0x8b8>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a6e      	ldr	r2, [pc, #440]	; (80078f0 <HAL_DMA_IRQHandler+0xa28>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d022      	beq.n	8007780 <HAL_DMA_IRQHandler+0x8b8>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a6d      	ldr	r2, [pc, #436]	; (80078f4 <HAL_DMA_IRQHandler+0xa2c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d01d      	beq.n	8007780 <HAL_DMA_IRQHandler+0x8b8>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a6b      	ldr	r2, [pc, #428]	; (80078f8 <HAL_DMA_IRQHandler+0xa30>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d018      	beq.n	8007780 <HAL_DMA_IRQHandler+0x8b8>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a6a      	ldr	r2, [pc, #424]	; (80078fc <HAL_DMA_IRQHandler+0xa34>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d013      	beq.n	8007780 <HAL_DMA_IRQHandler+0x8b8>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a68      	ldr	r2, [pc, #416]	; (8007900 <HAL_DMA_IRQHandler+0xa38>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00e      	beq.n	8007780 <HAL_DMA_IRQHandler+0x8b8>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a67      	ldr	r2, [pc, #412]	; (8007904 <HAL_DMA_IRQHandler+0xa3c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d009      	beq.n	8007780 <HAL_DMA_IRQHandler+0x8b8>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a65      	ldr	r2, [pc, #404]	; (8007908 <HAL_DMA_IRQHandler+0xa40>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d004      	beq.n	8007780 <HAL_DMA_IRQHandler+0x8b8>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a64      	ldr	r2, [pc, #400]	; (800790c <HAL_DMA_IRQHandler+0xa44>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d108      	bne.n	8007792 <HAL_DMA_IRQHandler+0x8ca>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0201 	bic.w	r2, r2, #1
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	e007      	b.n	80077a2 <HAL_DMA_IRQHandler+0x8da>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0201 	bic.w	r2, r2, #1
 80077a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3301      	adds	r3, #1
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d307      	bcc.n	80077be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1f2      	bne.n	80077a2 <HAL_DMA_IRQHandler+0x8da>
 80077bc:	e000      	b.n	80077c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80077be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d004      	beq.n	80077d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2203      	movs	r2, #3
 80077d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80077d6:	e003      	b.n	80077e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 8272 	beq.w	8007cd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	4798      	blx	r3
 80077fa:	e26c      	b.n	8007cd6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a43      	ldr	r2, [pc, #268]	; (8007910 <HAL_DMA_IRQHandler+0xa48>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d022      	beq.n	800784c <HAL_DMA_IRQHandler+0x984>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a42      	ldr	r2, [pc, #264]	; (8007914 <HAL_DMA_IRQHandler+0xa4c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d01d      	beq.n	800784c <HAL_DMA_IRQHandler+0x984>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a40      	ldr	r2, [pc, #256]	; (8007918 <HAL_DMA_IRQHandler+0xa50>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d018      	beq.n	800784c <HAL_DMA_IRQHandler+0x984>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a3f      	ldr	r2, [pc, #252]	; (800791c <HAL_DMA_IRQHandler+0xa54>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d013      	beq.n	800784c <HAL_DMA_IRQHandler+0x984>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a3d      	ldr	r2, [pc, #244]	; (8007920 <HAL_DMA_IRQHandler+0xa58>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d00e      	beq.n	800784c <HAL_DMA_IRQHandler+0x984>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a3c      	ldr	r2, [pc, #240]	; (8007924 <HAL_DMA_IRQHandler+0xa5c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d009      	beq.n	800784c <HAL_DMA_IRQHandler+0x984>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a3a      	ldr	r2, [pc, #232]	; (8007928 <HAL_DMA_IRQHandler+0xa60>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d004      	beq.n	800784c <HAL_DMA_IRQHandler+0x984>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a39      	ldr	r2, [pc, #228]	; (800792c <HAL_DMA_IRQHandler+0xa64>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d101      	bne.n	8007850 <HAL_DMA_IRQHandler+0x988>
 800784c:	2301      	movs	r3, #1
 800784e:	e000      	b.n	8007852 <HAL_DMA_IRQHandler+0x98a>
 8007850:	2300      	movs	r3, #0
 8007852:	2b00      	cmp	r3, #0
 8007854:	f000 823f 	beq.w	8007cd6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007864:	f003 031f 	and.w	r3, r3, #31
 8007868:	2204      	movs	r2, #4
 800786a:	409a      	lsls	r2, r3
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	4013      	ands	r3, r2
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 80cd 	beq.w	8007a10 <HAL_DMA_IRQHandler+0xb48>
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f003 0304 	and.w	r3, r3, #4
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 80c7 	beq.w	8007a10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007886:	f003 031f 	and.w	r3, r3, #31
 800788a:	2204      	movs	r2, #4
 800788c:	409a      	lsls	r2, r3
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d049      	beq.n	8007930 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d109      	bne.n	80078ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f000 8210 	beq.w	8007cd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078b8:	e20a      	b.n	8007cd0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 8206 	beq.w	8007cd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078cc:	e200      	b.n	8007cd0 <HAL_DMA_IRQHandler+0xe08>
 80078ce:	bf00      	nop
 80078d0:	40020010 	.word	0x40020010
 80078d4:	40020028 	.word	0x40020028
 80078d8:	40020040 	.word	0x40020040
 80078dc:	40020058 	.word	0x40020058
 80078e0:	40020070 	.word	0x40020070
 80078e4:	40020088 	.word	0x40020088
 80078e8:	400200a0 	.word	0x400200a0
 80078ec:	400200b8 	.word	0x400200b8
 80078f0:	40020410 	.word	0x40020410
 80078f4:	40020428 	.word	0x40020428
 80078f8:	40020440 	.word	0x40020440
 80078fc:	40020458 	.word	0x40020458
 8007900:	40020470 	.word	0x40020470
 8007904:	40020488 	.word	0x40020488
 8007908:	400204a0 	.word	0x400204a0
 800790c:	400204b8 	.word	0x400204b8
 8007910:	58025408 	.word	0x58025408
 8007914:	5802541c 	.word	0x5802541c
 8007918:	58025430 	.word	0x58025430
 800791c:	58025444 	.word	0x58025444
 8007920:	58025458 	.word	0x58025458
 8007924:	5802546c 	.word	0x5802546c
 8007928:	58025480 	.word	0x58025480
 800792c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	d160      	bne.n	80079fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a7f      	ldr	r2, [pc, #508]	; (8007b3c <HAL_DMA_IRQHandler+0xc74>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d04a      	beq.n	80079da <HAL_DMA_IRQHandler+0xb12>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a7d      	ldr	r2, [pc, #500]	; (8007b40 <HAL_DMA_IRQHandler+0xc78>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d045      	beq.n	80079da <HAL_DMA_IRQHandler+0xb12>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a7c      	ldr	r2, [pc, #496]	; (8007b44 <HAL_DMA_IRQHandler+0xc7c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d040      	beq.n	80079da <HAL_DMA_IRQHandler+0xb12>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a7a      	ldr	r2, [pc, #488]	; (8007b48 <HAL_DMA_IRQHandler+0xc80>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d03b      	beq.n	80079da <HAL_DMA_IRQHandler+0xb12>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a79      	ldr	r2, [pc, #484]	; (8007b4c <HAL_DMA_IRQHandler+0xc84>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d036      	beq.n	80079da <HAL_DMA_IRQHandler+0xb12>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a77      	ldr	r2, [pc, #476]	; (8007b50 <HAL_DMA_IRQHandler+0xc88>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d031      	beq.n	80079da <HAL_DMA_IRQHandler+0xb12>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a76      	ldr	r2, [pc, #472]	; (8007b54 <HAL_DMA_IRQHandler+0xc8c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d02c      	beq.n	80079da <HAL_DMA_IRQHandler+0xb12>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a74      	ldr	r2, [pc, #464]	; (8007b58 <HAL_DMA_IRQHandler+0xc90>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d027      	beq.n	80079da <HAL_DMA_IRQHandler+0xb12>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a73      	ldr	r2, [pc, #460]	; (8007b5c <HAL_DMA_IRQHandler+0xc94>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d022      	beq.n	80079da <HAL_DMA_IRQHandler+0xb12>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a71      	ldr	r2, [pc, #452]	; (8007b60 <HAL_DMA_IRQHandler+0xc98>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d01d      	beq.n	80079da <HAL_DMA_IRQHandler+0xb12>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a70      	ldr	r2, [pc, #448]	; (8007b64 <HAL_DMA_IRQHandler+0xc9c>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d018      	beq.n	80079da <HAL_DMA_IRQHandler+0xb12>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a6e      	ldr	r2, [pc, #440]	; (8007b68 <HAL_DMA_IRQHandler+0xca0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d013      	beq.n	80079da <HAL_DMA_IRQHandler+0xb12>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a6d      	ldr	r2, [pc, #436]	; (8007b6c <HAL_DMA_IRQHandler+0xca4>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00e      	beq.n	80079da <HAL_DMA_IRQHandler+0xb12>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a6b      	ldr	r2, [pc, #428]	; (8007b70 <HAL_DMA_IRQHandler+0xca8>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d009      	beq.n	80079da <HAL_DMA_IRQHandler+0xb12>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a6a      	ldr	r2, [pc, #424]	; (8007b74 <HAL_DMA_IRQHandler+0xcac>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d004      	beq.n	80079da <HAL_DMA_IRQHandler+0xb12>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a68      	ldr	r2, [pc, #416]	; (8007b78 <HAL_DMA_IRQHandler+0xcb0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d108      	bne.n	80079ec <HAL_DMA_IRQHandler+0xb24>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f022 0208 	bic.w	r2, r2, #8
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	e007      	b.n	80079fc <HAL_DMA_IRQHandler+0xb34>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 0204 	bic.w	r2, r2, #4
 80079fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 8165 	beq.w	8007cd0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a0e:	e15f      	b.n	8007cd0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a14:	f003 031f 	and.w	r3, r3, #31
 8007a18:	2202      	movs	r2, #2
 8007a1a:	409a      	lsls	r2, r3
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80c5 	beq.w	8007bb0 <HAL_DMA_IRQHandler+0xce8>
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80bf 	beq.w	8007bb0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a36:	f003 031f 	and.w	r3, r3, #31
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	409a      	lsls	r2, r3
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d018      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d109      	bne.n	8007a6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 813a 	beq.w	8007cd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a68:	e134      	b.n	8007cd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 8130 	beq.w	8007cd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a7c:	e12a      	b.n	8007cd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f040 8089 	bne.w	8007b9c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a2b      	ldr	r2, [pc, #172]	; (8007b3c <HAL_DMA_IRQHandler+0xc74>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d04a      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xc62>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a29      	ldr	r2, [pc, #164]	; (8007b40 <HAL_DMA_IRQHandler+0xc78>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d045      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xc62>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a28      	ldr	r2, [pc, #160]	; (8007b44 <HAL_DMA_IRQHandler+0xc7c>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d040      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xc62>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a26      	ldr	r2, [pc, #152]	; (8007b48 <HAL_DMA_IRQHandler+0xc80>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d03b      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xc62>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a25      	ldr	r2, [pc, #148]	; (8007b4c <HAL_DMA_IRQHandler+0xc84>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d036      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xc62>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a23      	ldr	r2, [pc, #140]	; (8007b50 <HAL_DMA_IRQHandler+0xc88>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d031      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xc62>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a22      	ldr	r2, [pc, #136]	; (8007b54 <HAL_DMA_IRQHandler+0xc8c>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d02c      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xc62>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a20      	ldr	r2, [pc, #128]	; (8007b58 <HAL_DMA_IRQHandler+0xc90>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d027      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xc62>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a1f      	ldr	r2, [pc, #124]	; (8007b5c <HAL_DMA_IRQHandler+0xc94>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d022      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xc62>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a1d      	ldr	r2, [pc, #116]	; (8007b60 <HAL_DMA_IRQHandler+0xc98>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d01d      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xc62>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a1c      	ldr	r2, [pc, #112]	; (8007b64 <HAL_DMA_IRQHandler+0xc9c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d018      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xc62>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a1a      	ldr	r2, [pc, #104]	; (8007b68 <HAL_DMA_IRQHandler+0xca0>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d013      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xc62>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a19      	ldr	r2, [pc, #100]	; (8007b6c <HAL_DMA_IRQHandler+0xca4>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d00e      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xc62>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a17      	ldr	r2, [pc, #92]	; (8007b70 <HAL_DMA_IRQHandler+0xca8>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d009      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xc62>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a16      	ldr	r2, [pc, #88]	; (8007b74 <HAL_DMA_IRQHandler+0xcac>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d004      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xc62>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a14      	ldr	r2, [pc, #80]	; (8007b78 <HAL_DMA_IRQHandler+0xcb0>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d128      	bne.n	8007b7c <HAL_DMA_IRQHandler+0xcb4>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0214 	bic.w	r2, r2, #20
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	e027      	b.n	8007b8c <HAL_DMA_IRQHandler+0xcc4>
 8007b3c:	40020010 	.word	0x40020010
 8007b40:	40020028 	.word	0x40020028
 8007b44:	40020040 	.word	0x40020040
 8007b48:	40020058 	.word	0x40020058
 8007b4c:	40020070 	.word	0x40020070
 8007b50:	40020088 	.word	0x40020088
 8007b54:	400200a0 	.word	0x400200a0
 8007b58:	400200b8 	.word	0x400200b8
 8007b5c:	40020410 	.word	0x40020410
 8007b60:	40020428 	.word	0x40020428
 8007b64:	40020440 	.word	0x40020440
 8007b68:	40020458 	.word	0x40020458
 8007b6c:	40020470 	.word	0x40020470
 8007b70:	40020488 	.word	0x40020488
 8007b74:	400204a0 	.word	0x400204a0
 8007b78:	400204b8 	.word	0x400204b8
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f022 020a 	bic.w	r2, r2, #10
 8007b8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 8097 	beq.w	8007cd4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bae:	e091      	b.n	8007cd4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bb4:	f003 031f 	and.w	r3, r3, #31
 8007bb8:	2208      	movs	r2, #8
 8007bba:	409a      	lsls	r2, r3
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 8088 	beq.w	8007cd6 <HAL_DMA_IRQHandler+0xe0e>
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f003 0308 	and.w	r3, r3, #8
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 8082 	beq.w	8007cd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a41      	ldr	r2, [pc, #260]	; (8007cdc <HAL_DMA_IRQHandler+0xe14>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d04a      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xdaa>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a3f      	ldr	r2, [pc, #252]	; (8007ce0 <HAL_DMA_IRQHandler+0xe18>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d045      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xdaa>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a3e      	ldr	r2, [pc, #248]	; (8007ce4 <HAL_DMA_IRQHandler+0xe1c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d040      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xdaa>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a3c      	ldr	r2, [pc, #240]	; (8007ce8 <HAL_DMA_IRQHandler+0xe20>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d03b      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xdaa>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a3b      	ldr	r2, [pc, #236]	; (8007cec <HAL_DMA_IRQHandler+0xe24>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d036      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xdaa>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a39      	ldr	r2, [pc, #228]	; (8007cf0 <HAL_DMA_IRQHandler+0xe28>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d031      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xdaa>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a38      	ldr	r2, [pc, #224]	; (8007cf4 <HAL_DMA_IRQHandler+0xe2c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d02c      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xdaa>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a36      	ldr	r2, [pc, #216]	; (8007cf8 <HAL_DMA_IRQHandler+0xe30>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d027      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xdaa>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a35      	ldr	r2, [pc, #212]	; (8007cfc <HAL_DMA_IRQHandler+0xe34>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d022      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xdaa>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a33      	ldr	r2, [pc, #204]	; (8007d00 <HAL_DMA_IRQHandler+0xe38>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d01d      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xdaa>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a32      	ldr	r2, [pc, #200]	; (8007d04 <HAL_DMA_IRQHandler+0xe3c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d018      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xdaa>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a30      	ldr	r2, [pc, #192]	; (8007d08 <HAL_DMA_IRQHandler+0xe40>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d013      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xdaa>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a2f      	ldr	r2, [pc, #188]	; (8007d0c <HAL_DMA_IRQHandler+0xe44>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d00e      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xdaa>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a2d      	ldr	r2, [pc, #180]	; (8007d10 <HAL_DMA_IRQHandler+0xe48>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d009      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xdaa>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a2c      	ldr	r2, [pc, #176]	; (8007d14 <HAL_DMA_IRQHandler+0xe4c>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d004      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xdaa>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a2a      	ldr	r2, [pc, #168]	; (8007d18 <HAL_DMA_IRQHandler+0xe50>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d108      	bne.n	8007c84 <HAL_DMA_IRQHandler+0xdbc>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 021c 	bic.w	r2, r2, #28
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	e007      	b.n	8007c94 <HAL_DMA_IRQHandler+0xdcc>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 020e 	bic.w	r2, r2, #14
 8007c92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c98:	f003 031f 	and.w	r3, r3, #31
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	409a      	lsls	r2, r3
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d009      	beq.n	8007cd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	4798      	blx	r3
 8007cca:	e004      	b.n	8007cd6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007ccc:	bf00      	nop
 8007cce:	e002      	b.n	8007cd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cd0:	bf00      	nop
 8007cd2:	e000      	b.n	8007cd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cd4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007cd6:	3728      	adds	r7, #40	; 0x28
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	40020010 	.word	0x40020010
 8007ce0:	40020028 	.word	0x40020028
 8007ce4:	40020040 	.word	0x40020040
 8007ce8:	40020058 	.word	0x40020058
 8007cec:	40020070 	.word	0x40020070
 8007cf0:	40020088 	.word	0x40020088
 8007cf4:	400200a0 	.word	0x400200a0
 8007cf8:	400200b8 	.word	0x400200b8
 8007cfc:	40020410 	.word	0x40020410
 8007d00:	40020428 	.word	0x40020428
 8007d04:	40020440 	.word	0x40020440
 8007d08:	40020458 	.word	0x40020458
 8007d0c:	40020470 	.word	0x40020470
 8007d10:	40020488 	.word	0x40020488
 8007d14:	400204a0 	.word	0x400204a0
 8007d18:	400204b8 	.word	0x400204b8

08007d1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d2e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d34:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a7f      	ldr	r2, [pc, #508]	; (8007f38 <DMA_SetConfig+0x21c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d072      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a7d      	ldr	r2, [pc, #500]	; (8007f3c <DMA_SetConfig+0x220>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d06d      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a7c      	ldr	r2, [pc, #496]	; (8007f40 <DMA_SetConfig+0x224>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d068      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a7a      	ldr	r2, [pc, #488]	; (8007f44 <DMA_SetConfig+0x228>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d063      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a79      	ldr	r2, [pc, #484]	; (8007f48 <DMA_SetConfig+0x22c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d05e      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a77      	ldr	r2, [pc, #476]	; (8007f4c <DMA_SetConfig+0x230>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d059      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a76      	ldr	r2, [pc, #472]	; (8007f50 <DMA_SetConfig+0x234>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d054      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a74      	ldr	r2, [pc, #464]	; (8007f54 <DMA_SetConfig+0x238>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d04f      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a73      	ldr	r2, [pc, #460]	; (8007f58 <DMA_SetConfig+0x23c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d04a      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a71      	ldr	r2, [pc, #452]	; (8007f5c <DMA_SetConfig+0x240>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d045      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a70      	ldr	r2, [pc, #448]	; (8007f60 <DMA_SetConfig+0x244>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d040      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a6e      	ldr	r2, [pc, #440]	; (8007f64 <DMA_SetConfig+0x248>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d03b      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a6d      	ldr	r2, [pc, #436]	; (8007f68 <DMA_SetConfig+0x24c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d036      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a6b      	ldr	r2, [pc, #428]	; (8007f6c <DMA_SetConfig+0x250>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d031      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a6a      	ldr	r2, [pc, #424]	; (8007f70 <DMA_SetConfig+0x254>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d02c      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a68      	ldr	r2, [pc, #416]	; (8007f74 <DMA_SetConfig+0x258>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d027      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a67      	ldr	r2, [pc, #412]	; (8007f78 <DMA_SetConfig+0x25c>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d022      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a65      	ldr	r2, [pc, #404]	; (8007f7c <DMA_SetConfig+0x260>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d01d      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a64      	ldr	r2, [pc, #400]	; (8007f80 <DMA_SetConfig+0x264>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d018      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a62      	ldr	r2, [pc, #392]	; (8007f84 <DMA_SetConfig+0x268>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d013      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a61      	ldr	r2, [pc, #388]	; (8007f88 <DMA_SetConfig+0x26c>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d00e      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a5f      	ldr	r2, [pc, #380]	; (8007f8c <DMA_SetConfig+0x270>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d009      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a5e      	ldr	r2, [pc, #376]	; (8007f90 <DMA_SetConfig+0x274>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d004      	beq.n	8007e26 <DMA_SetConfig+0x10a>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a5c      	ldr	r2, [pc, #368]	; (8007f94 <DMA_SetConfig+0x278>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d101      	bne.n	8007e2a <DMA_SetConfig+0x10e>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <DMA_SetConfig+0x110>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00d      	beq.n	8007e4c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007e38:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d004      	beq.n	8007e4c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007e4a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a39      	ldr	r2, [pc, #228]	; (8007f38 <DMA_SetConfig+0x21c>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d04a      	beq.n	8007eec <DMA_SetConfig+0x1d0>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a38      	ldr	r2, [pc, #224]	; (8007f3c <DMA_SetConfig+0x220>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d045      	beq.n	8007eec <DMA_SetConfig+0x1d0>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a36      	ldr	r2, [pc, #216]	; (8007f40 <DMA_SetConfig+0x224>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d040      	beq.n	8007eec <DMA_SetConfig+0x1d0>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a35      	ldr	r2, [pc, #212]	; (8007f44 <DMA_SetConfig+0x228>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d03b      	beq.n	8007eec <DMA_SetConfig+0x1d0>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a33      	ldr	r2, [pc, #204]	; (8007f48 <DMA_SetConfig+0x22c>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d036      	beq.n	8007eec <DMA_SetConfig+0x1d0>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a32      	ldr	r2, [pc, #200]	; (8007f4c <DMA_SetConfig+0x230>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d031      	beq.n	8007eec <DMA_SetConfig+0x1d0>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a30      	ldr	r2, [pc, #192]	; (8007f50 <DMA_SetConfig+0x234>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d02c      	beq.n	8007eec <DMA_SetConfig+0x1d0>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a2f      	ldr	r2, [pc, #188]	; (8007f54 <DMA_SetConfig+0x238>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d027      	beq.n	8007eec <DMA_SetConfig+0x1d0>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a2d      	ldr	r2, [pc, #180]	; (8007f58 <DMA_SetConfig+0x23c>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d022      	beq.n	8007eec <DMA_SetConfig+0x1d0>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a2c      	ldr	r2, [pc, #176]	; (8007f5c <DMA_SetConfig+0x240>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d01d      	beq.n	8007eec <DMA_SetConfig+0x1d0>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a2a      	ldr	r2, [pc, #168]	; (8007f60 <DMA_SetConfig+0x244>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d018      	beq.n	8007eec <DMA_SetConfig+0x1d0>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a29      	ldr	r2, [pc, #164]	; (8007f64 <DMA_SetConfig+0x248>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d013      	beq.n	8007eec <DMA_SetConfig+0x1d0>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a27      	ldr	r2, [pc, #156]	; (8007f68 <DMA_SetConfig+0x24c>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00e      	beq.n	8007eec <DMA_SetConfig+0x1d0>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a26      	ldr	r2, [pc, #152]	; (8007f6c <DMA_SetConfig+0x250>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d009      	beq.n	8007eec <DMA_SetConfig+0x1d0>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a24      	ldr	r2, [pc, #144]	; (8007f70 <DMA_SetConfig+0x254>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d004      	beq.n	8007eec <DMA_SetConfig+0x1d0>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a23      	ldr	r2, [pc, #140]	; (8007f74 <DMA_SetConfig+0x258>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d101      	bne.n	8007ef0 <DMA_SetConfig+0x1d4>
 8007eec:	2301      	movs	r3, #1
 8007eee:	e000      	b.n	8007ef2 <DMA_SetConfig+0x1d6>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d059      	beq.n	8007faa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007efa:	f003 031f 	and.w	r3, r3, #31
 8007efe:	223f      	movs	r2, #63	; 0x3f
 8007f00:	409a      	lsls	r2, r3
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f14:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	2b40      	cmp	r3, #64	; 0x40
 8007f24:	d138      	bne.n	8007f98 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007f36:	e086      	b.n	8008046 <DMA_SetConfig+0x32a>
 8007f38:	40020010 	.word	0x40020010
 8007f3c:	40020028 	.word	0x40020028
 8007f40:	40020040 	.word	0x40020040
 8007f44:	40020058 	.word	0x40020058
 8007f48:	40020070 	.word	0x40020070
 8007f4c:	40020088 	.word	0x40020088
 8007f50:	400200a0 	.word	0x400200a0
 8007f54:	400200b8 	.word	0x400200b8
 8007f58:	40020410 	.word	0x40020410
 8007f5c:	40020428 	.word	0x40020428
 8007f60:	40020440 	.word	0x40020440
 8007f64:	40020458 	.word	0x40020458
 8007f68:	40020470 	.word	0x40020470
 8007f6c:	40020488 	.word	0x40020488
 8007f70:	400204a0 	.word	0x400204a0
 8007f74:	400204b8 	.word	0x400204b8
 8007f78:	58025408 	.word	0x58025408
 8007f7c:	5802541c 	.word	0x5802541c
 8007f80:	58025430 	.word	0x58025430
 8007f84:	58025444 	.word	0x58025444
 8007f88:	58025458 	.word	0x58025458
 8007f8c:	5802546c 	.word	0x5802546c
 8007f90:	58025480 	.word	0x58025480
 8007f94:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	60da      	str	r2, [r3, #12]
}
 8007fa8:	e04d      	b.n	8008046 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a29      	ldr	r2, [pc, #164]	; (8008054 <DMA_SetConfig+0x338>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d022      	beq.n	8007ffa <DMA_SetConfig+0x2de>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a27      	ldr	r2, [pc, #156]	; (8008058 <DMA_SetConfig+0x33c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d01d      	beq.n	8007ffa <DMA_SetConfig+0x2de>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a26      	ldr	r2, [pc, #152]	; (800805c <DMA_SetConfig+0x340>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d018      	beq.n	8007ffa <DMA_SetConfig+0x2de>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a24      	ldr	r2, [pc, #144]	; (8008060 <DMA_SetConfig+0x344>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d013      	beq.n	8007ffa <DMA_SetConfig+0x2de>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a23      	ldr	r2, [pc, #140]	; (8008064 <DMA_SetConfig+0x348>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d00e      	beq.n	8007ffa <DMA_SetConfig+0x2de>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a21      	ldr	r2, [pc, #132]	; (8008068 <DMA_SetConfig+0x34c>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d009      	beq.n	8007ffa <DMA_SetConfig+0x2de>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a20      	ldr	r2, [pc, #128]	; (800806c <DMA_SetConfig+0x350>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d004      	beq.n	8007ffa <DMA_SetConfig+0x2de>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a1e      	ldr	r2, [pc, #120]	; (8008070 <DMA_SetConfig+0x354>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d101      	bne.n	8007ffe <DMA_SetConfig+0x2e2>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e000      	b.n	8008000 <DMA_SetConfig+0x2e4>
 8007ffe:	2300      	movs	r3, #0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d020      	beq.n	8008046 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008008:	f003 031f 	and.w	r3, r3, #31
 800800c:	2201      	movs	r2, #1
 800800e:	409a      	lsls	r2, r3
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	683a      	ldr	r2, [r7, #0]
 800801a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	2b40      	cmp	r3, #64	; 0x40
 8008022:	d108      	bne.n	8008036 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	60da      	str	r2, [r3, #12]
}
 8008034:	e007      	b.n	8008046 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	60da      	str	r2, [r3, #12]
}
 8008046:	bf00      	nop
 8008048:	371c      	adds	r7, #28
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	58025408 	.word	0x58025408
 8008058:	5802541c 	.word	0x5802541c
 800805c:	58025430 	.word	0x58025430
 8008060:	58025444 	.word	0x58025444
 8008064:	58025458 	.word	0x58025458
 8008068:	5802546c 	.word	0x5802546c
 800806c:	58025480 	.word	0x58025480
 8008070:	58025494 	.word	0x58025494

08008074 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a42      	ldr	r2, [pc, #264]	; (800818c <DMA_CalcBaseAndBitshift+0x118>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d04a      	beq.n	800811c <DMA_CalcBaseAndBitshift+0xa8>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a41      	ldr	r2, [pc, #260]	; (8008190 <DMA_CalcBaseAndBitshift+0x11c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d045      	beq.n	800811c <DMA_CalcBaseAndBitshift+0xa8>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a3f      	ldr	r2, [pc, #252]	; (8008194 <DMA_CalcBaseAndBitshift+0x120>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d040      	beq.n	800811c <DMA_CalcBaseAndBitshift+0xa8>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a3e      	ldr	r2, [pc, #248]	; (8008198 <DMA_CalcBaseAndBitshift+0x124>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d03b      	beq.n	800811c <DMA_CalcBaseAndBitshift+0xa8>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a3c      	ldr	r2, [pc, #240]	; (800819c <DMA_CalcBaseAndBitshift+0x128>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d036      	beq.n	800811c <DMA_CalcBaseAndBitshift+0xa8>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a3b      	ldr	r2, [pc, #236]	; (80081a0 <DMA_CalcBaseAndBitshift+0x12c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d031      	beq.n	800811c <DMA_CalcBaseAndBitshift+0xa8>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a39      	ldr	r2, [pc, #228]	; (80081a4 <DMA_CalcBaseAndBitshift+0x130>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d02c      	beq.n	800811c <DMA_CalcBaseAndBitshift+0xa8>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a38      	ldr	r2, [pc, #224]	; (80081a8 <DMA_CalcBaseAndBitshift+0x134>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d027      	beq.n	800811c <DMA_CalcBaseAndBitshift+0xa8>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a36      	ldr	r2, [pc, #216]	; (80081ac <DMA_CalcBaseAndBitshift+0x138>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d022      	beq.n	800811c <DMA_CalcBaseAndBitshift+0xa8>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a35      	ldr	r2, [pc, #212]	; (80081b0 <DMA_CalcBaseAndBitshift+0x13c>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d01d      	beq.n	800811c <DMA_CalcBaseAndBitshift+0xa8>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a33      	ldr	r2, [pc, #204]	; (80081b4 <DMA_CalcBaseAndBitshift+0x140>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d018      	beq.n	800811c <DMA_CalcBaseAndBitshift+0xa8>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a32      	ldr	r2, [pc, #200]	; (80081b8 <DMA_CalcBaseAndBitshift+0x144>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d013      	beq.n	800811c <DMA_CalcBaseAndBitshift+0xa8>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a30      	ldr	r2, [pc, #192]	; (80081bc <DMA_CalcBaseAndBitshift+0x148>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d00e      	beq.n	800811c <DMA_CalcBaseAndBitshift+0xa8>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a2f      	ldr	r2, [pc, #188]	; (80081c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d009      	beq.n	800811c <DMA_CalcBaseAndBitshift+0xa8>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a2d      	ldr	r2, [pc, #180]	; (80081c4 <DMA_CalcBaseAndBitshift+0x150>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d004      	beq.n	800811c <DMA_CalcBaseAndBitshift+0xa8>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a2c      	ldr	r2, [pc, #176]	; (80081c8 <DMA_CalcBaseAndBitshift+0x154>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d101      	bne.n	8008120 <DMA_CalcBaseAndBitshift+0xac>
 800811c:	2301      	movs	r3, #1
 800811e:	e000      	b.n	8008122 <DMA_CalcBaseAndBitshift+0xae>
 8008120:	2300      	movs	r3, #0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d024      	beq.n	8008170 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	b2db      	uxtb	r3, r3
 800812c:	3b10      	subs	r3, #16
 800812e:	4a27      	ldr	r2, [pc, #156]	; (80081cc <DMA_CalcBaseAndBitshift+0x158>)
 8008130:	fba2 2303 	umull	r2, r3, r2, r3
 8008134:	091b      	lsrs	r3, r3, #4
 8008136:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f003 0307 	and.w	r3, r3, #7
 800813e:	4a24      	ldr	r2, [pc, #144]	; (80081d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8008140:	5cd3      	ldrb	r3, [r2, r3]
 8008142:	461a      	mov	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b03      	cmp	r3, #3
 800814c:	d908      	bls.n	8008160 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	4b1f      	ldr	r3, [pc, #124]	; (80081d4 <DMA_CalcBaseAndBitshift+0x160>)
 8008156:	4013      	ands	r3, r2
 8008158:	1d1a      	adds	r2, r3, #4
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	659a      	str	r2, [r3, #88]	; 0x58
 800815e:	e00d      	b.n	800817c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	461a      	mov	r2, r3
 8008166:	4b1b      	ldr	r3, [pc, #108]	; (80081d4 <DMA_CalcBaseAndBitshift+0x160>)
 8008168:	4013      	ands	r3, r2
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	6593      	str	r3, [r2, #88]	; 0x58
 800816e:	e005      	b.n	800817c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	40020010 	.word	0x40020010
 8008190:	40020028 	.word	0x40020028
 8008194:	40020040 	.word	0x40020040
 8008198:	40020058 	.word	0x40020058
 800819c:	40020070 	.word	0x40020070
 80081a0:	40020088 	.word	0x40020088
 80081a4:	400200a0 	.word	0x400200a0
 80081a8:	400200b8 	.word	0x400200b8
 80081ac:	40020410 	.word	0x40020410
 80081b0:	40020428 	.word	0x40020428
 80081b4:	40020440 	.word	0x40020440
 80081b8:	40020458 	.word	0x40020458
 80081bc:	40020470 	.word	0x40020470
 80081c0:	40020488 	.word	0x40020488
 80081c4:	400204a0 	.word	0x400204a0
 80081c8:	400204b8 	.word	0x400204b8
 80081cc:	aaaaaaab 	.word	0xaaaaaaab
 80081d0:	0801ffc0 	.word	0x0801ffc0
 80081d4:	fffffc00 	.word	0xfffffc00

080081d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d120      	bne.n	800822e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d858      	bhi.n	80082a6 <DMA_CheckFifoParam+0xce>
 80081f4:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <DMA_CheckFifoParam+0x24>)
 80081f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fa:	bf00      	nop
 80081fc:	0800820d 	.word	0x0800820d
 8008200:	0800821f 	.word	0x0800821f
 8008204:	0800820d 	.word	0x0800820d
 8008208:	080082a7 	.word	0x080082a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d048      	beq.n	80082aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800821c:	e045      	b.n	80082aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008222:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008226:	d142      	bne.n	80082ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800822c:	e03f      	b.n	80082ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008236:	d123      	bne.n	8008280 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823c:	2b03      	cmp	r3, #3
 800823e:	d838      	bhi.n	80082b2 <DMA_CheckFifoParam+0xda>
 8008240:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <DMA_CheckFifoParam+0x70>)
 8008242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008246:	bf00      	nop
 8008248:	08008259 	.word	0x08008259
 800824c:	0800825f 	.word	0x0800825f
 8008250:	08008259 	.word	0x08008259
 8008254:	08008271 	.word	0x08008271
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	73fb      	strb	r3, [r7, #15]
        break;
 800825c:	e030      	b.n	80082c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d025      	beq.n	80082b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800826e:	e022      	b.n	80082b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008274:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008278:	d11f      	bne.n	80082ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800827e:	e01c      	b.n	80082ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008284:	2b02      	cmp	r3, #2
 8008286:	d902      	bls.n	800828e <DMA_CheckFifoParam+0xb6>
 8008288:	2b03      	cmp	r3, #3
 800828a:	d003      	beq.n	8008294 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800828c:	e018      	b.n	80082c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	73fb      	strb	r3, [r7, #15]
        break;
 8008292:	e015      	b.n	80082c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00e      	beq.n	80082be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	73fb      	strb	r3, [r7, #15]
    break;
 80082a4:	e00b      	b.n	80082be <DMA_CheckFifoParam+0xe6>
        break;
 80082a6:	bf00      	nop
 80082a8:	e00a      	b.n	80082c0 <DMA_CheckFifoParam+0xe8>
        break;
 80082aa:	bf00      	nop
 80082ac:	e008      	b.n	80082c0 <DMA_CheckFifoParam+0xe8>
        break;
 80082ae:	bf00      	nop
 80082b0:	e006      	b.n	80082c0 <DMA_CheckFifoParam+0xe8>
        break;
 80082b2:	bf00      	nop
 80082b4:	e004      	b.n	80082c0 <DMA_CheckFifoParam+0xe8>
        break;
 80082b6:	bf00      	nop
 80082b8:	e002      	b.n	80082c0 <DMA_CheckFifoParam+0xe8>
        break;
 80082ba:	bf00      	nop
 80082bc:	e000      	b.n	80082c0 <DMA_CheckFifoParam+0xe8>
    break;
 80082be:	bf00      	nop
    }
  }

  return status;
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop

080082d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a38      	ldr	r2, [pc, #224]	; (80083c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d022      	beq.n	800832e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a36      	ldr	r2, [pc, #216]	; (80083c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d01d      	beq.n	800832e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a35      	ldr	r2, [pc, #212]	; (80083cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d018      	beq.n	800832e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a33      	ldr	r2, [pc, #204]	; (80083d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d013      	beq.n	800832e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a32      	ldr	r2, [pc, #200]	; (80083d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d00e      	beq.n	800832e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a30      	ldr	r2, [pc, #192]	; (80083d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d009      	beq.n	800832e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a2f      	ldr	r2, [pc, #188]	; (80083dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d004      	beq.n	800832e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a2d      	ldr	r2, [pc, #180]	; (80083e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d101      	bne.n	8008332 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800832e:	2301      	movs	r3, #1
 8008330:	e000      	b.n	8008334 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008332:	2300      	movs	r3, #0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d01a      	beq.n	800836e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	b2db      	uxtb	r3, r3
 800833e:	3b08      	subs	r3, #8
 8008340:	4a28      	ldr	r2, [pc, #160]	; (80083e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008342:	fba2 2303 	umull	r2, r3, r2, r3
 8008346:	091b      	lsrs	r3, r3, #4
 8008348:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	4b26      	ldr	r3, [pc, #152]	; (80083e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	461a      	mov	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a24      	ldr	r2, [pc, #144]	; (80083ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800835c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f003 031f 	and.w	r3, r3, #31
 8008364:	2201      	movs	r2, #1
 8008366:	409a      	lsls	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800836c:	e024      	b.n	80083b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	3b10      	subs	r3, #16
 8008376:	4a1e      	ldr	r2, [pc, #120]	; (80083f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008378:	fba2 2303 	umull	r2, r3, r2, r3
 800837c:	091b      	lsrs	r3, r3, #4
 800837e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4a1c      	ldr	r2, [pc, #112]	; (80083f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d806      	bhi.n	8008396 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	4a1b      	ldr	r2, [pc, #108]	; (80083f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d902      	bls.n	8008396 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3308      	adds	r3, #8
 8008394:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	4b18      	ldr	r3, [pc, #96]	; (80083fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800839a:	4413      	add	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	461a      	mov	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a16      	ldr	r2, [pc, #88]	; (8008400 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80083a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f003 031f 	and.w	r3, r3, #31
 80083b0:	2201      	movs	r2, #1
 80083b2:	409a      	lsls	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80083b8:	bf00      	nop
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	58025408 	.word	0x58025408
 80083c8:	5802541c 	.word	0x5802541c
 80083cc:	58025430 	.word	0x58025430
 80083d0:	58025444 	.word	0x58025444
 80083d4:	58025458 	.word	0x58025458
 80083d8:	5802546c 	.word	0x5802546c
 80083dc:	58025480 	.word	0x58025480
 80083e0:	58025494 	.word	0x58025494
 80083e4:	cccccccd 	.word	0xcccccccd
 80083e8:	16009600 	.word	0x16009600
 80083ec:	58025880 	.word	0x58025880
 80083f0:	aaaaaaab 	.word	0xaaaaaaab
 80083f4:	400204b8 	.word	0x400204b8
 80083f8:	4002040f 	.word	0x4002040f
 80083fc:	10008200 	.word	0x10008200
 8008400:	40020880 	.word	0x40020880

08008404 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	b2db      	uxtb	r3, r3
 8008412:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d04a      	beq.n	80084b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2b08      	cmp	r3, #8
 800841e:	d847      	bhi.n	80084b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a25      	ldr	r2, [pc, #148]	; (80084bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d022      	beq.n	8008470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a24      	ldr	r2, [pc, #144]	; (80084c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d01d      	beq.n	8008470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a22      	ldr	r2, [pc, #136]	; (80084c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d018      	beq.n	8008470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a21      	ldr	r2, [pc, #132]	; (80084c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d013      	beq.n	8008470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a1f      	ldr	r2, [pc, #124]	; (80084cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d00e      	beq.n	8008470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a1e      	ldr	r2, [pc, #120]	; (80084d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d009      	beq.n	8008470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a1c      	ldr	r2, [pc, #112]	; (80084d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d004      	beq.n	8008470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a1b      	ldr	r2, [pc, #108]	; (80084d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d101      	bne.n	8008474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008470:	2301      	movs	r3, #1
 8008472:	e000      	b.n	8008476 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008474:	2300      	movs	r3, #0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00a      	beq.n	8008490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	4b17      	ldr	r3, [pc, #92]	; (80084dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	461a      	mov	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a15      	ldr	r2, [pc, #84]	; (80084e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800848c:	671a      	str	r2, [r3, #112]	; 0x70
 800848e:	e009      	b.n	80084a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	4b14      	ldr	r3, [pc, #80]	; (80084e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008494:	4413      	add	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	461a      	mov	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a11      	ldr	r2, [pc, #68]	; (80084e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80084a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3b01      	subs	r3, #1
 80084a8:	2201      	movs	r2, #1
 80084aa:	409a      	lsls	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80084b0:	bf00      	nop
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	58025408 	.word	0x58025408
 80084c0:	5802541c 	.word	0x5802541c
 80084c4:	58025430 	.word	0x58025430
 80084c8:	58025444 	.word	0x58025444
 80084cc:	58025458 	.word	0x58025458
 80084d0:	5802546c 	.word	0x5802546c
 80084d4:	58025480 	.word	0x58025480
 80084d8:	58025494 	.word	0x58025494
 80084dc:	1600963f 	.word	0x1600963f
 80084e0:	58025940 	.word	0x58025940
 80084e4:	1000823f 	.word	0x1000823f
 80084e8:	40020940 	.word	0x40020940

080084ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b098      	sub	sp, #96	; 0x60
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80084f4:	4a84      	ldr	r2, [pc, #528]	; (8008708 <HAL_FDCAN_Init+0x21c>)
 80084f6:	f107 030c 	add.w	r3, r7, #12
 80084fa:	4611      	mov	r1, r2
 80084fc:	224c      	movs	r2, #76	; 0x4c
 80084fe:	4618      	mov	r0, r3
 8008500:	f013 fcd7 	bl	801beb2 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d101      	bne.n	800850e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e1c6      	b.n	800889c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a7e      	ldr	r2, [pc, #504]	; (800870c <HAL_FDCAN_Init+0x220>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d106      	bne.n	8008526 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008520:	461a      	mov	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d106      	bne.n	8008540 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7fa fdb0 	bl	80030a0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 0210 	bic.w	r2, r2, #16
 800854e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008550:	f7fb fde6 	bl	8004120 <HAL_GetTick>
 8008554:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008556:	e014      	b.n	8008582 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008558:	f7fb fde2 	bl	8004120 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b0a      	cmp	r3, #10
 8008564:	d90d      	bls.n	8008582 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800856c:	f043 0201 	orr.w	r2, r3, #1
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2203      	movs	r2, #3
 800857a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e18c      	b.n	800889c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	f003 0308 	and.w	r3, r3, #8
 800858c:	2b08      	cmp	r3, #8
 800858e:	d0e3      	beq.n	8008558 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	699a      	ldr	r2, [r3, #24]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f042 0201 	orr.w	r2, r2, #1
 800859e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085a0:	f7fb fdbe 	bl	8004120 <HAL_GetTick>
 80085a4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80085a6:	e014      	b.n	80085d2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80085a8:	f7fb fdba 	bl	8004120 <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	2b0a      	cmp	r3, #10
 80085b4:	d90d      	bls.n	80085d2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085bc:	f043 0201 	orr.w	r2, r3, #1
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2203      	movs	r2, #3
 80085ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e164      	b.n	800889c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d0e3      	beq.n	80085a8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	699a      	ldr	r2, [r3, #24]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f042 0202 	orr.w	r2, r2, #2
 80085ee:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	7c1b      	ldrb	r3, [r3, #16]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d108      	bne.n	800860a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	699a      	ldr	r2, [r3, #24]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008606:	619a      	str	r2, [r3, #24]
 8008608:	e007      	b.n	800861a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	699a      	ldr	r2, [r3, #24]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008618:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	7c5b      	ldrb	r3, [r3, #17]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d108      	bne.n	8008634 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	699a      	ldr	r2, [r3, #24]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008630:	619a      	str	r2, [r3, #24]
 8008632:	e007      	b.n	8008644 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	699a      	ldr	r2, [r3, #24]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008642:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	7c9b      	ldrb	r3, [r3, #18]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d108      	bne.n	800865e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	699a      	ldr	r2, [r3, #24]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800865a:	619a      	str	r2, [r3, #24]
 800865c:	e007      	b.n	800866e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	699a      	ldr	r2, [r3, #24]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800866c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689a      	ldr	r2, [r3, #8]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	430a      	orrs	r2, r1
 8008682:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	699a      	ldr	r2, [r3, #24]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8008692:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	691a      	ldr	r2, [r3, #16]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f022 0210 	bic.w	r2, r2, #16
 80086a2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d108      	bne.n	80086be <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	699a      	ldr	r2, [r3, #24]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f042 0204 	orr.w	r2, r2, #4
 80086ba:	619a      	str	r2, [r3, #24]
 80086bc:	e030      	b.n	8008720 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d02c      	beq.n	8008720 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d020      	beq.n	8008710 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	699a      	ldr	r2, [r3, #24]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086dc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	691a      	ldr	r2, [r3, #16]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f042 0210 	orr.w	r2, r2, #16
 80086ec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	d114      	bne.n	8008720 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	699a      	ldr	r2, [r3, #24]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f042 0220 	orr.w	r2, r2, #32
 8008704:	619a      	str	r2, [r3, #24]
 8008706:	e00b      	b.n	8008720 <HAL_FDCAN_Init+0x234>
 8008708:	0801fe64 	.word	0x0801fe64
 800870c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	699a      	ldr	r2, [r3, #24]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f042 0220 	orr.w	r2, r2, #32
 800871e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	3b01      	subs	r3, #1
 8008726:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	3b01      	subs	r3, #1
 800872e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008730:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008738:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	3b01      	subs	r3, #1
 8008742:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008748:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800874a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008754:	d115      	bne.n	8008782 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008760:	3b01      	subs	r3, #1
 8008762:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008764:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876a:	3b01      	subs	r3, #1
 800876c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800876e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008776:	3b01      	subs	r3, #1
 8008778:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800877e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008780:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00a      	beq.n	80087a0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087a8:	4413      	add	r3, r2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d011      	beq.n	80087d2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80087b6:	f023 0107 	bic.w	r1, r3, #7
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	3360      	adds	r3, #96	; 0x60
 80087c2:	443b      	add	r3, r7
 80087c4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	430a      	orrs	r2, r1
 80087ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d011      	beq.n	80087fe <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80087e2:	f023 0107 	bic.w	r1, r3, #7
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	3360      	adds	r3, #96	; 0x60
 80087ee:	443b      	add	r3, r7
 80087f0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008802:	2b00      	cmp	r3, #0
 8008804:	d012      	beq.n	800882c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800880e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	3360      	adds	r3, #96	; 0x60
 800881a:	443b      	add	r3, r7
 800881c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008820:	011a      	lsls	r2, r3, #4
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	430a      	orrs	r2, r1
 8008828:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008830:	2b00      	cmp	r3, #0
 8008832:	d012      	beq.n	800885a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800883c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	3360      	adds	r3, #96	; 0x60
 8008848:	443b      	add	r3, r7
 800884a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800884e:	021a      	lsls	r2, r3, #8
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	430a      	orrs	r2, r1
 8008856:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a11      	ldr	r2, [pc, #68]	; (80088a4 <HAL_FDCAN_Init+0x3b8>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d107      	bne.n	8008874 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	689a      	ldr	r2, [r3, #8]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f022 0203 	bic.w	r2, r2, #3
 8008872:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f80b 	bl	80088a8 <FDCAN_CalcultateRamBlockAddresses>
 8008892:	4603      	mov	r3, r0
 8008894:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8008898:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800889c:	4618      	mov	r0, r3
 800889e:	3760      	adds	r7, #96	; 0x60
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	4000a000 	.word	0x4000a000

080088a8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80088be:	4ba7      	ldr	r3, [pc, #668]	; (8008b5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80088c0:	4013      	ands	r3, r2
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	0091      	lsls	r1, r2, #2
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	6812      	ldr	r2, [r2, #0]
 80088ca:	430b      	orrs	r3, r1
 80088cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088d8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e0:	041a      	lsls	r2, r3, #16
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	430a      	orrs	r2, r1
 80088e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	4413      	add	r3, r2
 80088f4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80088fe:	4b97      	ldr	r3, [pc, #604]	; (8008b5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008900:	4013      	ands	r3, r2
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	0091      	lsls	r1, r2, #2
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	6812      	ldr	r2, [r2, #0]
 800890a:	430b      	orrs	r3, r1
 800890c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008918:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008920:	041a      	lsls	r2, r3, #16
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008930:	005b      	lsls	r3, r3, #1
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	4413      	add	r3, r2
 8008936:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008940:	4b86      	ldr	r3, [pc, #536]	; (8008b5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008942:	4013      	ands	r3, r2
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	0091      	lsls	r1, r2, #2
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	6812      	ldr	r2, [r2, #0]
 800894c:	430b      	orrs	r3, r1
 800894e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800895a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	041a      	lsls	r2, r3, #16
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008976:	fb02 f303 	mul.w	r3, r2, r3
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	4413      	add	r3, r2
 800897e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008988:	4b74      	ldr	r3, [pc, #464]	; (8008b5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800898a:	4013      	ands	r3, r2
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	0091      	lsls	r1, r2, #2
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	6812      	ldr	r2, [r2, #0]
 8008994:	430b      	orrs	r3, r1
 8008996:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089a2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089aa:	041a      	lsls	r2, r3, #16
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	430a      	orrs	r2, r1
 80089b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80089be:	fb02 f303 	mul.w	r3, r2, r3
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	4413      	add	r3, r2
 80089c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80089d0:	4b62      	ldr	r3, [pc, #392]	; (8008b5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80089d2:	4013      	ands	r3, r2
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	0091      	lsls	r1, r2, #2
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	6812      	ldr	r2, [r2, #0]
 80089dc:	430b      	orrs	r3, r1
 80089de:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80089ea:	fb02 f303 	mul.w	r3, r2, r3
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	4413      	add	r3, r2
 80089f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80089fc:	4b57      	ldr	r3, [pc, #348]	; (8008b5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80089fe:	4013      	ands	r3, r2
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	0091      	lsls	r1, r2, #2
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	6812      	ldr	r2, [r2, #0]
 8008a08:	430b      	orrs	r3, r1
 8008a0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a16:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a1e:	041a      	lsls	r2, r3, #16
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	430a      	orrs	r2, r1
 8008a26:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a2e:	005b      	lsls	r3, r3, #1
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	4413      	add	r3, r2
 8008a34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008a3e:	4b47      	ldr	r3, [pc, #284]	; (8008b5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a40:	4013      	ands	r3, r2
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	0091      	lsls	r1, r2, #2
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	6812      	ldr	r2, [r2, #0]
 8008a4a:	430b      	orrs	r3, r1
 8008a4c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008a58:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a60:	041a      	lsls	r2, r3, #16
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008a74:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a7c:	061a      	lsls	r2, r3, #24
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a8c:	4b34      	ldr	r3, [pc, #208]	; (8008b60 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008a8e:	4413      	add	r3, r2
 8008a90:	009a      	lsls	r2, r3, #2
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	441a      	add	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aae:	00db      	lsls	r3, r3, #3
 8008ab0:	441a      	add	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abe:	6879      	ldr	r1, [r7, #4]
 8008ac0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8008ac2:	fb01 f303 	mul.w	r3, r1, r3
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	441a      	add	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ad6:	6879      	ldr	r1, [r7, #4]
 8008ad8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8008ada:	fb01 f303 	mul.w	r3, r1, r3
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	441a      	add	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8008af2:	fb01 f303 	mul.w	r3, r1, r3
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	441a      	add	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b0a:	00db      	lsls	r3, r3, #3
 8008b0c:	441a      	add	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008b22:	fb01 f303 	mul.w	r3, r1, r3
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	441a      	add	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008b3e:	fb01 f303 	mul.w	r3, r1, r3
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	441a      	add	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b52:	4a04      	ldr	r2, [pc, #16]	; (8008b64 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d915      	bls.n	8008b84 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008b58:	e006      	b.n	8008b68 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008b5a:	bf00      	nop
 8008b5c:	ffff0003 	.word	0xffff0003
 8008b60:	10002b00 	.word	0x10002b00
 8008b64:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b6e:	f043 0220 	orr.w	r2, r3, #32
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2203      	movs	r2, #3
 8008b7c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e010      	b.n	8008ba6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	e005      	b.n	8008b98 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3304      	adds	r3, #4
 8008b96:	60fb      	str	r3, [r7, #12]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d3f3      	bcc.n	8008b8c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop

08008bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b089      	sub	sp, #36	; 0x24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008bc2:	4b86      	ldr	r3, [pc, #536]	; (8008ddc <HAL_GPIO_Init+0x228>)
 8008bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008bc6:	e18c      	b.n	8008ee2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	2101      	movs	r1, #1
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f000 817e 	beq.w	8008edc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	f003 0303 	and.w	r3, r3, #3
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d005      	beq.n	8008bf8 <HAL_GPIO_Init+0x44>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	f003 0303 	and.w	r3, r3, #3
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d130      	bne.n	8008c5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	2203      	movs	r2, #3
 8008c04:	fa02 f303 	lsl.w	r3, r2, r3
 8008c08:	43db      	mvns	r3, r3
 8008c0a:	69ba      	ldr	r2, [r7, #24]
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	68da      	ldr	r2, [r3, #12]
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	69ba      	ldr	r2, [r7, #24]
 8008c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c2e:	2201      	movs	r2, #1
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	fa02 f303 	lsl.w	r3, r2, r3
 8008c36:	43db      	mvns	r3, r3
 8008c38:	69ba      	ldr	r2, [r7, #24]
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	091b      	lsrs	r3, r3, #4
 8008c44:	f003 0201 	and.w	r2, r3, #1
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4e:	69ba      	ldr	r2, [r7, #24]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f003 0303 	and.w	r3, r3, #3
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d017      	beq.n	8008c96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	2203      	movs	r2, #3
 8008c72:	fa02 f303 	lsl.w	r3, r2, r3
 8008c76:	43db      	mvns	r3, r3
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	689a      	ldr	r2, [r3, #8]
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f003 0303 	and.w	r3, r3, #3
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d123      	bne.n	8008cea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	08da      	lsrs	r2, r3, #3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3208      	adds	r2, #8
 8008caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	f003 0307 	and.w	r3, r3, #7
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	220f      	movs	r2, #15
 8008cba:	fa02 f303 	lsl.w	r3, r2, r3
 8008cbe:	43db      	mvns	r3, r3
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	691a      	ldr	r2, [r3, #16]
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	f003 0307 	and.w	r3, r3, #7
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	08da      	lsrs	r2, r3, #3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	3208      	adds	r2, #8
 8008ce4:	69b9      	ldr	r1, [r7, #24]
 8008ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	2203      	movs	r2, #3
 8008cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfa:	43db      	mvns	r3, r3
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	4013      	ands	r3, r2
 8008d00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	f003 0203 	and.w	r2, r3, #3
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	005b      	lsls	r3, r3, #1
 8008d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f000 80d8 	beq.w	8008edc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d2c:	4b2c      	ldr	r3, [pc, #176]	; (8008de0 <HAL_GPIO_Init+0x22c>)
 8008d2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d32:	4a2b      	ldr	r2, [pc, #172]	; (8008de0 <HAL_GPIO_Init+0x22c>)
 8008d34:	f043 0302 	orr.w	r3, r3, #2
 8008d38:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008d3c:	4b28      	ldr	r3, [pc, #160]	; (8008de0 <HAL_GPIO_Init+0x22c>)
 8008d3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d42:	f003 0302 	and.w	r3, r3, #2
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d4a:	4a26      	ldr	r2, [pc, #152]	; (8008de4 <HAL_GPIO_Init+0x230>)
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	089b      	lsrs	r3, r3, #2
 8008d50:	3302      	adds	r3, #2
 8008d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	220f      	movs	r2, #15
 8008d62:	fa02 f303 	lsl.w	r3, r2, r3
 8008d66:	43db      	mvns	r3, r3
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a1d      	ldr	r2, [pc, #116]	; (8008de8 <HAL_GPIO_Init+0x234>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d04a      	beq.n	8008e0c <HAL_GPIO_Init+0x258>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a1c      	ldr	r2, [pc, #112]	; (8008dec <HAL_GPIO_Init+0x238>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d02b      	beq.n	8008dd6 <HAL_GPIO_Init+0x222>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a1b      	ldr	r2, [pc, #108]	; (8008df0 <HAL_GPIO_Init+0x23c>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d025      	beq.n	8008dd2 <HAL_GPIO_Init+0x21e>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a1a      	ldr	r2, [pc, #104]	; (8008df4 <HAL_GPIO_Init+0x240>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d01f      	beq.n	8008dce <HAL_GPIO_Init+0x21a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a19      	ldr	r2, [pc, #100]	; (8008df8 <HAL_GPIO_Init+0x244>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d019      	beq.n	8008dca <HAL_GPIO_Init+0x216>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a18      	ldr	r2, [pc, #96]	; (8008dfc <HAL_GPIO_Init+0x248>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d013      	beq.n	8008dc6 <HAL_GPIO_Init+0x212>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a17      	ldr	r2, [pc, #92]	; (8008e00 <HAL_GPIO_Init+0x24c>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d00d      	beq.n	8008dc2 <HAL_GPIO_Init+0x20e>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a16      	ldr	r2, [pc, #88]	; (8008e04 <HAL_GPIO_Init+0x250>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d007      	beq.n	8008dbe <HAL_GPIO_Init+0x20a>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a15      	ldr	r2, [pc, #84]	; (8008e08 <HAL_GPIO_Init+0x254>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d101      	bne.n	8008dba <HAL_GPIO_Init+0x206>
 8008db6:	2309      	movs	r3, #9
 8008db8:	e029      	b.n	8008e0e <HAL_GPIO_Init+0x25a>
 8008dba:	230a      	movs	r3, #10
 8008dbc:	e027      	b.n	8008e0e <HAL_GPIO_Init+0x25a>
 8008dbe:	2307      	movs	r3, #7
 8008dc0:	e025      	b.n	8008e0e <HAL_GPIO_Init+0x25a>
 8008dc2:	2306      	movs	r3, #6
 8008dc4:	e023      	b.n	8008e0e <HAL_GPIO_Init+0x25a>
 8008dc6:	2305      	movs	r3, #5
 8008dc8:	e021      	b.n	8008e0e <HAL_GPIO_Init+0x25a>
 8008dca:	2304      	movs	r3, #4
 8008dcc:	e01f      	b.n	8008e0e <HAL_GPIO_Init+0x25a>
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e01d      	b.n	8008e0e <HAL_GPIO_Init+0x25a>
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	e01b      	b.n	8008e0e <HAL_GPIO_Init+0x25a>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e019      	b.n	8008e0e <HAL_GPIO_Init+0x25a>
 8008dda:	bf00      	nop
 8008ddc:	58000080 	.word	0x58000080
 8008de0:	58024400 	.word	0x58024400
 8008de4:	58000400 	.word	0x58000400
 8008de8:	58020000 	.word	0x58020000
 8008dec:	58020400 	.word	0x58020400
 8008df0:	58020800 	.word	0x58020800
 8008df4:	58020c00 	.word	0x58020c00
 8008df8:	58021000 	.word	0x58021000
 8008dfc:	58021400 	.word	0x58021400
 8008e00:	58021800 	.word	0x58021800
 8008e04:	58021c00 	.word	0x58021c00
 8008e08:	58022400 	.word	0x58022400
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	69fa      	ldr	r2, [r7, #28]
 8008e10:	f002 0203 	and.w	r2, r2, #3
 8008e14:	0092      	lsls	r2, r2, #2
 8008e16:	4093      	lsls	r3, r2
 8008e18:	69ba      	ldr	r2, [r7, #24]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e1e:	4938      	ldr	r1, [pc, #224]	; (8008f00 <HAL_GPIO_Init+0x34c>)
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	089b      	lsrs	r3, r3, #2
 8008e24:	3302      	adds	r3, #2
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	43db      	mvns	r3, r3
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	43db      	mvns	r3, r3
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	4013      	ands	r3, r2
 8008e6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d003      	beq.n	8008e80 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008e78:	69ba      	ldr	r2, [r7, #24]
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	43db      	mvns	r3, r3
 8008e92:	69ba      	ldr	r2, [r7, #24]
 8008e94:	4013      	ands	r3, r2
 8008e96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d003      	beq.n	8008eac <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008ea4:	69ba      	ldr	r2, [r7, #24]
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	69ba      	ldr	r2, [r7, #24]
 8008eb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	43db      	mvns	r3, r3
 8008ebc:	69ba      	ldr	r2, [r7, #24]
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008ece:	69ba      	ldr	r2, [r7, #24]
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	69ba      	ldr	r2, [r7, #24]
 8008eda:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f47f ae6b 	bne.w	8008bc8 <HAL_GPIO_Init+0x14>
  }
}
 8008ef2:	bf00      	nop
 8008ef4:	bf00      	nop
 8008ef6:	3724      	adds	r7, #36	; 0x24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	58000400 	.word	0x58000400

08008f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	691a      	ldr	r2, [r3, #16]
 8008f14:	887b      	ldrh	r3, [r7, #2]
 8008f16:	4013      	ands	r3, r2
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	73fb      	strb	r3, [r7, #15]
 8008f20:	e001      	b.n	8008f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f22:	2300      	movs	r3, #0
 8008f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3714      	adds	r7, #20
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	807b      	strh	r3, [r7, #2]
 8008f40:	4613      	mov	r3, r2
 8008f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f44:	787b      	ldrb	r3, [r7, #1]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f4a:	887a      	ldrh	r2, [r7, #2]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008f50:	e003      	b.n	8008f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008f52:	887b      	ldrh	r3, [r7, #2]
 8008f54:	041a      	lsls	r2, r3, #16
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	619a      	str	r2, [r3, #24]
}
 8008f5a:	bf00      	nop
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
	...

08008f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e07f      	b.n	800907a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d106      	bne.n	8008f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7fa f8ee 	bl	8003170 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2224      	movs	r2, #36	; 0x24
 8008f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f022 0201 	bic.w	r2, r2, #1
 8008faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008fb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	689a      	ldr	r2, [r3, #8]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d107      	bne.n	8008fe2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	689a      	ldr	r2, [r3, #8]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fde:	609a      	str	r2, [r3, #8]
 8008fe0:	e006      	b.n	8008ff0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	689a      	ldr	r2, [r3, #8]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008fee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d104      	bne.n	8009002 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009000:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6859      	ldr	r1, [r3, #4]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	4b1d      	ldr	r3, [pc, #116]	; (8009084 <HAL_I2C_Init+0x11c>)
 800900e:	430b      	orrs	r3, r1
 8009010:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68da      	ldr	r2, [r3, #12]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009020:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	691a      	ldr	r2, [r3, #16]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	430a      	orrs	r2, r1
 800903a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	69d9      	ldr	r1, [r3, #28]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a1a      	ldr	r2, [r3, #32]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f042 0201 	orr.w	r2, r2, #1
 800905a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2220      	movs	r2, #32
 8009066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	02008000 	.word	0x02008000

08009088 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d005      	beq.n	80090b4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	68f9      	ldr	r1, [r7, #12]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	4798      	blx	r3
  }
}
 80090b4:	bf00      	nop
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b20      	cmp	r3, #32
 80090d0:	d138      	bne.n	8009144 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d101      	bne.n	80090e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80090dc:	2302      	movs	r3, #2
 80090de:	e032      	b.n	8009146 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2224      	movs	r2, #36	; 0x24
 80090ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f022 0201 	bic.w	r2, r2, #1
 80090fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800910e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6819      	ldr	r1, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	430a      	orrs	r2, r1
 800911e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f042 0201 	orr.w	r2, r2, #1
 800912e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2220      	movs	r2, #32
 8009134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	e000      	b.n	8009146 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009144:	2302      	movs	r3, #2
  }
}
 8009146:	4618      	mov	r0, r3
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009152:	b480      	push	{r7}
 8009154:	b085      	sub	sp, #20
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b20      	cmp	r3, #32
 8009166:	d139      	bne.n	80091dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800916e:	2b01      	cmp	r3, #1
 8009170:	d101      	bne.n	8009176 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009172:	2302      	movs	r3, #2
 8009174:	e033      	b.n	80091de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2224      	movs	r2, #36	; 0x24
 8009182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f022 0201 	bic.w	r2, r2, #1
 8009194:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80091a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	021b      	lsls	r3, r3, #8
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f042 0201 	orr.w	r2, r2, #1
 80091c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2220      	movs	r2, #32
 80091cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	e000      	b.n	80091de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80091dc:	2302      	movs	r3, #2
  }
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80091ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ec:	b08f      	sub	sp, #60	; 0x3c
 80091ee:	af0a      	add	r7, sp, #40	; 0x28
 80091f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d101      	bne.n	80091fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e116      	b.n	800942a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	d106      	bne.n	800921c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f011 fb26 	bl	801a868 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2203      	movs	r2, #3
 8009220:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922c:	2b00      	cmp	r3, #0
 800922e:	d102      	bne.n	8009236 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4618      	mov	r0, r3
 800923c:	f00a fcf7 	bl	8013c2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	603b      	str	r3, [r7, #0]
 8009246:	687e      	ldr	r6, [r7, #4]
 8009248:	466d      	mov	r5, sp
 800924a:	f106 0410 	add.w	r4, r6, #16
 800924e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009256:	e894 0003 	ldmia.w	r4, {r0, r1}
 800925a:	e885 0003 	stmia.w	r5, {r0, r1}
 800925e:	1d33      	adds	r3, r6, #4
 8009260:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009262:	6838      	ldr	r0, [r7, #0]
 8009264:	f00a fbc2 	bl	80139ec <USB_CoreInit>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d005      	beq.n	800927a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2202      	movs	r2, #2
 8009272:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e0d7      	b.n	800942a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2100      	movs	r1, #0
 8009280:	4618      	mov	r0, r3
 8009282:	f00a fce5 	bl	8013c50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009286:	2300      	movs	r3, #0
 8009288:	73fb      	strb	r3, [r7, #15]
 800928a:	e04a      	b.n	8009322 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800928c:	7bfa      	ldrb	r2, [r7, #15]
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	4613      	mov	r3, r2
 8009292:	00db      	lsls	r3, r3, #3
 8009294:	4413      	add	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	440b      	add	r3, r1
 800929a:	333d      	adds	r3, #61	; 0x3d
 800929c:	2201      	movs	r2, #1
 800929e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80092a0:	7bfa      	ldrb	r2, [r7, #15]
 80092a2:	6879      	ldr	r1, [r7, #4]
 80092a4:	4613      	mov	r3, r2
 80092a6:	00db      	lsls	r3, r3, #3
 80092a8:	4413      	add	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	440b      	add	r3, r1
 80092ae:	333c      	adds	r3, #60	; 0x3c
 80092b0:	7bfa      	ldrb	r2, [r7, #15]
 80092b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80092b4:	7bfa      	ldrb	r2, [r7, #15]
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
 80092b8:	b298      	uxth	r0, r3
 80092ba:	6879      	ldr	r1, [r7, #4]
 80092bc:	4613      	mov	r3, r2
 80092be:	00db      	lsls	r3, r3, #3
 80092c0:	4413      	add	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	440b      	add	r3, r1
 80092c6:	3356      	adds	r3, #86	; 0x56
 80092c8:	4602      	mov	r2, r0
 80092ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80092cc:	7bfa      	ldrb	r2, [r7, #15]
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	4613      	mov	r3, r2
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	440b      	add	r3, r1
 80092da:	3340      	adds	r3, #64	; 0x40
 80092dc:	2200      	movs	r2, #0
 80092de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80092e0:	7bfa      	ldrb	r2, [r7, #15]
 80092e2:	6879      	ldr	r1, [r7, #4]
 80092e4:	4613      	mov	r3, r2
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	4413      	add	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	440b      	add	r3, r1
 80092ee:	3344      	adds	r3, #68	; 0x44
 80092f0:	2200      	movs	r2, #0
 80092f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80092f4:	7bfa      	ldrb	r2, [r7, #15]
 80092f6:	6879      	ldr	r1, [r7, #4]
 80092f8:	4613      	mov	r3, r2
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	4413      	add	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	440b      	add	r3, r1
 8009302:	3348      	adds	r3, #72	; 0x48
 8009304:	2200      	movs	r2, #0
 8009306:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009308:	7bfa      	ldrb	r2, [r7, #15]
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	4613      	mov	r3, r2
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	4413      	add	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	440b      	add	r3, r1
 8009316:	334c      	adds	r3, #76	; 0x4c
 8009318:	2200      	movs	r2, #0
 800931a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800931c:	7bfb      	ldrb	r3, [r7, #15]
 800931e:	3301      	adds	r3, #1
 8009320:	73fb      	strb	r3, [r7, #15]
 8009322:	7bfa      	ldrb	r2, [r7, #15]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	429a      	cmp	r2, r3
 800932a:	d3af      	bcc.n	800928c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800932c:	2300      	movs	r3, #0
 800932e:	73fb      	strb	r3, [r7, #15]
 8009330:	e044      	b.n	80093bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009332:	7bfa      	ldrb	r2, [r7, #15]
 8009334:	6879      	ldr	r1, [r7, #4]
 8009336:	4613      	mov	r3, r2
 8009338:	00db      	lsls	r3, r3, #3
 800933a:	4413      	add	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	440b      	add	r3, r1
 8009340:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009344:	2200      	movs	r2, #0
 8009346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009348:	7bfa      	ldrb	r2, [r7, #15]
 800934a:	6879      	ldr	r1, [r7, #4]
 800934c:	4613      	mov	r3, r2
 800934e:	00db      	lsls	r3, r3, #3
 8009350:	4413      	add	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	440b      	add	r3, r1
 8009356:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800935a:	7bfa      	ldrb	r2, [r7, #15]
 800935c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800935e:	7bfa      	ldrb	r2, [r7, #15]
 8009360:	6879      	ldr	r1, [r7, #4]
 8009362:	4613      	mov	r3, r2
 8009364:	00db      	lsls	r3, r3, #3
 8009366:	4413      	add	r3, r2
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	440b      	add	r3, r1
 800936c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009370:	2200      	movs	r2, #0
 8009372:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009374:	7bfa      	ldrb	r2, [r7, #15]
 8009376:	6879      	ldr	r1, [r7, #4]
 8009378:	4613      	mov	r3, r2
 800937a:	00db      	lsls	r3, r3, #3
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	440b      	add	r3, r1
 8009382:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8009386:	2200      	movs	r2, #0
 8009388:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800938a:	7bfa      	ldrb	r2, [r7, #15]
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	4613      	mov	r3, r2
 8009390:	00db      	lsls	r3, r3, #3
 8009392:	4413      	add	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	440b      	add	r3, r1
 8009398:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800939c:	2200      	movs	r2, #0
 800939e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80093a0:	7bfa      	ldrb	r2, [r7, #15]
 80093a2:	6879      	ldr	r1, [r7, #4]
 80093a4:	4613      	mov	r3, r2
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	4413      	add	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	440b      	add	r3, r1
 80093ae:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	3301      	adds	r3, #1
 80093ba:	73fb      	strb	r3, [r7, #15]
 80093bc:	7bfa      	ldrb	r2, [r7, #15]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d3b5      	bcc.n	8009332 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	603b      	str	r3, [r7, #0]
 80093cc:	687e      	ldr	r6, [r7, #4]
 80093ce:	466d      	mov	r5, sp
 80093d0:	f106 0410 	add.w	r4, r6, #16
 80093d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80093e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80093e4:	1d33      	adds	r3, r6, #4
 80093e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093e8:	6838      	ldr	r0, [r7, #0]
 80093ea:	f00a fc7d 	bl	8013ce8 <USB_DevInit>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d005      	beq.n	8009400 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e014      	b.n	800942a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009414:	2b01      	cmp	r3, #1
 8009416:	d102      	bne.n	800941e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f001 f96f 	bl	800a6fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4618      	mov	r0, r3
 8009424:	f00b fcbf 	bl	8014da6 <USB_DevDisconnect>

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009432 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b084      	sub	sp, #16
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009446:	2b01      	cmp	r3, #1
 8009448:	d101      	bne.n	800944e <HAL_PCD_Start+0x1c>
 800944a:	2302      	movs	r3, #2
 800944c:	e022      	b.n	8009494 <HAL_PCD_Start+0x62>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800945e:	2b00      	cmp	r3, #0
 8009460:	d109      	bne.n	8009476 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8009466:	2b01      	cmp	r3, #1
 8009468:	d105      	bne.n	8009476 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4618      	mov	r0, r3
 800947c:	f00a fbc6 	bl	8013c0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4618      	mov	r0, r3
 8009486:	f00b fc6d 	bl	8014d64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800949c:	b590      	push	{r4, r7, lr}
 800949e:	b08d      	sub	sp, #52	; 0x34
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f00b fd2b 	bl	8014f0e <USB_GetMode>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f040 84b7 	bne.w	8009e2e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f00b fc8f 	bl	8014de8 <USB_ReadInterrupts>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 84ad 	beq.w	8009e2c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	0a1b      	lsrs	r3, r3, #8
 80094dc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f00b fc7c 	bl	8014de8 <USB_ReadInterrupts>
 80094f0:	4603      	mov	r3, r0
 80094f2:	f003 0302 	and.w	r3, r3, #2
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d107      	bne.n	800950a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	695a      	ldr	r2, [r3, #20]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f002 0202 	and.w	r2, r2, #2
 8009508:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4618      	mov	r0, r3
 8009510:	f00b fc6a 	bl	8014de8 <USB_ReadInterrupts>
 8009514:	4603      	mov	r3, r0
 8009516:	f003 0310 	and.w	r3, r3, #16
 800951a:	2b10      	cmp	r3, #16
 800951c:	d161      	bne.n	80095e2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	699a      	ldr	r2, [r3, #24]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f022 0210 	bic.w	r2, r2, #16
 800952c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800952e:	6a3b      	ldr	r3, [r7, #32]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	f003 020f 	and.w	r2, r3, #15
 800953a:	4613      	mov	r3, r2
 800953c:	00db      	lsls	r3, r3, #3
 800953e:	4413      	add	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	4413      	add	r3, r2
 800954a:	3304      	adds	r3, #4
 800954c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	0c5b      	lsrs	r3, r3, #17
 8009552:	f003 030f 	and.w	r3, r3, #15
 8009556:	2b02      	cmp	r3, #2
 8009558:	d124      	bne.n	80095a4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800955a:	69ba      	ldr	r2, [r7, #24]
 800955c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009560:	4013      	ands	r3, r2
 8009562:	2b00      	cmp	r3, #0
 8009564:	d035      	beq.n	80095d2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	091b      	lsrs	r3, r3, #4
 800956e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009570:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009574:	b29b      	uxth	r3, r3
 8009576:	461a      	mov	r2, r3
 8009578:	6a38      	ldr	r0, [r7, #32]
 800957a:	f00b faa1 	bl	8014ac0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	68da      	ldr	r2, [r3, #12]
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	091b      	lsrs	r3, r3, #4
 8009586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800958a:	441a      	add	r2, r3
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	695a      	ldr	r2, [r3, #20]
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	091b      	lsrs	r3, r3, #4
 8009598:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800959c:	441a      	add	r2, r3
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	615a      	str	r2, [r3, #20]
 80095a2:	e016      	b.n	80095d2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	0c5b      	lsrs	r3, r3, #17
 80095a8:	f003 030f 	and.w	r3, r3, #15
 80095ac:	2b06      	cmp	r3, #6
 80095ae:	d110      	bne.n	80095d2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80095b6:	2208      	movs	r2, #8
 80095b8:	4619      	mov	r1, r3
 80095ba:	6a38      	ldr	r0, [r7, #32]
 80095bc:	f00b fa80 	bl	8014ac0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	695a      	ldr	r2, [r3, #20]
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	091b      	lsrs	r3, r3, #4
 80095c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095cc:	441a      	add	r2, r3
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	699a      	ldr	r2, [r3, #24]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f042 0210 	orr.w	r2, r2, #16
 80095e0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f00b fbfe 	bl	8014de8 <USB_ReadInterrupts>
 80095ec:	4603      	mov	r3, r0
 80095ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80095f6:	f040 80a7 	bne.w	8009748 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80095fa:	2300      	movs	r3, #0
 80095fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4618      	mov	r0, r3
 8009604:	f00b fc03 	bl	8014e0e <USB_ReadDevAllOutEpInterrupt>
 8009608:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800960a:	e099      	b.n	8009740 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800960c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	f000 808e 	beq.w	8009734 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800961e:	b2d2      	uxtb	r2, r2
 8009620:	4611      	mov	r1, r2
 8009622:	4618      	mov	r0, r3
 8009624:	f00b fc27 	bl	8014e76 <USB_ReadDevOutEPInterrupt>
 8009628:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	f003 0301 	and.w	r3, r3, #1
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00c      	beq.n	800964e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009640:	461a      	mov	r2, r3
 8009642:	2301      	movs	r3, #1
 8009644:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009646:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fed1 	bl	800a3f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	f003 0308 	and.w	r3, r3, #8
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00c      	beq.n	8009672 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	015a      	lsls	r2, r3, #5
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	4413      	add	r3, r2
 8009660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009664:	461a      	mov	r2, r3
 8009666:	2308      	movs	r3, #8
 8009668:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800966a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 ffa7 	bl	800a5c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	f003 0310 	and.w	r3, r3, #16
 8009678:	2b00      	cmp	r3, #0
 800967a:	d008      	beq.n	800968e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	015a      	lsls	r2, r3, #5
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	4413      	add	r3, r2
 8009684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009688:	461a      	mov	r2, r3
 800968a:	2310      	movs	r3, #16
 800968c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	f003 0302 	and.w	r3, r3, #2
 8009694:	2b00      	cmp	r3, #0
 8009696:	d030      	beq.n	80096fa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009698:	6a3b      	ldr	r3, [r7, #32]
 800969a:	695b      	ldr	r3, [r3, #20]
 800969c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a0:	2b80      	cmp	r3, #128	; 0x80
 80096a2:	d109      	bne.n	80096b8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	69fa      	ldr	r2, [r7, #28]
 80096ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096b6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80096b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ba:	4613      	mov	r3, r2
 80096bc:	00db      	lsls	r3, r3, #3
 80096be:	4413      	add	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	4413      	add	r3, r2
 80096ca:	3304      	adds	r3, #4
 80096cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	78db      	ldrb	r3, [r3, #3]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d108      	bne.n	80096e8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2200      	movs	r2, #0
 80096da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f011 f9b8 	bl	801aa58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80096e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ea:	015a      	lsls	r2, r3, #5
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	4413      	add	r3, r2
 80096f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f4:	461a      	mov	r2, r3
 80096f6:	2302      	movs	r3, #2
 80096f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	f003 0320 	and.w	r3, r3, #32
 8009700:	2b00      	cmp	r3, #0
 8009702:	d008      	beq.n	8009716 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009706:	015a      	lsls	r2, r3, #5
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	4413      	add	r3, r2
 800970c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009710:	461a      	mov	r2, r3
 8009712:	2320      	movs	r3, #32
 8009714:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d009      	beq.n	8009734 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800972c:	461a      	mov	r2, r3
 800972e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009732:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009736:	3301      	adds	r3, #1
 8009738:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800973a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973c:	085b      	lsrs	r3, r3, #1
 800973e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009742:	2b00      	cmp	r3, #0
 8009744:	f47f af62 	bne.w	800960c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4618      	mov	r0, r3
 800974e:	f00b fb4b 	bl	8014de8 <USB_ReadInterrupts>
 8009752:	4603      	mov	r3, r0
 8009754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009758:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800975c:	f040 80db 	bne.w	8009916 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4618      	mov	r0, r3
 8009766:	f00b fb6c 	bl	8014e42 <USB_ReadDevAllInEpInterrupt>
 800976a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800976c:	2300      	movs	r3, #0
 800976e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009770:	e0cd      	b.n	800990e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009774:	f003 0301 	and.w	r3, r3, #1
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 80c2 	beq.w	8009902 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009784:	b2d2      	uxtb	r2, r2
 8009786:	4611      	mov	r1, r2
 8009788:	4618      	mov	r0, r3
 800978a:	f00b fb92 	bl	8014eb2 <USB_ReadDevInEPInterrupt>
 800978e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	2b00      	cmp	r3, #0
 8009798:	d057      	beq.n	800984a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979c:	f003 030f 	and.w	r3, r3, #15
 80097a0:	2201      	movs	r2, #1
 80097a2:	fa02 f303 	lsl.w	r3, r2, r3
 80097a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	43db      	mvns	r3, r3
 80097b4:	69f9      	ldr	r1, [r7, #28]
 80097b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097ba:	4013      	ands	r3, r2
 80097bc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80097be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c0:	015a      	lsls	r2, r3, #5
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	4413      	add	r3, r2
 80097c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ca:	461a      	mov	r2, r3
 80097cc:	2301      	movs	r3, #1
 80097ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d132      	bne.n	800983e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80097d8:	6879      	ldr	r1, [r7, #4]
 80097da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097dc:	4613      	mov	r3, r2
 80097de:	00db      	lsls	r3, r3, #3
 80097e0:	4413      	add	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	440b      	add	r3, r1
 80097e6:	3348      	adds	r3, #72	; 0x48
 80097e8:	6819      	ldr	r1, [r3, #0]
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ee:	4613      	mov	r3, r2
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	4413      	add	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4403      	add	r3, r0
 80097f8:	3344      	adds	r3, #68	; 0x44
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4419      	add	r1, r3
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009802:	4613      	mov	r3, r2
 8009804:	00db      	lsls	r3, r3, #3
 8009806:	4413      	add	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4403      	add	r3, r0
 800980c:	3348      	adds	r3, #72	; 0x48
 800980e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	2b00      	cmp	r3, #0
 8009814:	d113      	bne.n	800983e <HAL_PCD_IRQHandler+0x3a2>
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800981a:	4613      	mov	r3, r2
 800981c:	00db      	lsls	r3, r3, #3
 800981e:	4413      	add	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	334c      	adds	r3, #76	; 0x4c
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d108      	bne.n	800983e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6818      	ldr	r0, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009836:	461a      	mov	r2, r3
 8009838:	2101      	movs	r1, #1
 800983a:	f00b fb9b 	bl	8014f74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	b2db      	uxtb	r3, r3
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f011 f882 	bl	801a94e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	f003 0308 	and.w	r3, r3, #8
 8009850:	2b00      	cmp	r3, #0
 8009852:	d008      	beq.n	8009866 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	015a      	lsls	r2, r3, #5
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	4413      	add	r3, r2
 800985c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009860:	461a      	mov	r2, r3
 8009862:	2308      	movs	r3, #8
 8009864:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f003 0310 	and.w	r3, r3, #16
 800986c:	2b00      	cmp	r3, #0
 800986e:	d008      	beq.n	8009882 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	4413      	add	r3, r2
 8009878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800987c:	461a      	mov	r2, r3
 800987e:	2310      	movs	r3, #16
 8009880:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009888:	2b00      	cmp	r3, #0
 800988a:	d008      	beq.n	800989e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009898:	461a      	mov	r2, r3
 800989a:	2340      	movs	r3, #64	; 0x40
 800989c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	f003 0302 	and.w	r3, r3, #2
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d023      	beq.n	80098f0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80098a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098aa:	6a38      	ldr	r0, [r7, #32]
 80098ac:	f00a fb7a 	bl	8013fa4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80098b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b2:	4613      	mov	r3, r2
 80098b4:	00db      	lsls	r3, r3, #3
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	3338      	adds	r3, #56	; 0x38
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	4413      	add	r3, r2
 80098c0:	3304      	adds	r3, #4
 80098c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	78db      	ldrb	r3, [r3, #3]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d108      	bne.n	80098de <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	2200      	movs	r2, #0
 80098d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f011 f8cf 	bl	801aa7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80098de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ea:	461a      	mov	r2, r3
 80098ec:	2302      	movs	r3, #2
 80098ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d003      	beq.n	8009902 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80098fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fcea 	bl	800a2d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009904:	3301      	adds	r3, #1
 8009906:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990a:	085b      	lsrs	r3, r3, #1
 800990c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009910:	2b00      	cmp	r3, #0
 8009912:	f47f af2e 	bne.w	8009772 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4618      	mov	r0, r3
 800991c:	f00b fa64 	bl	8014de8 <USB_ReadInterrupts>
 8009920:	4603      	mov	r3, r0
 8009922:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800992a:	d122      	bne.n	8009972 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	69fa      	ldr	r2, [r7, #28]
 8009936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800993a:	f023 0301 	bic.w	r3, r3, #1
 800993e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009946:	2b01      	cmp	r3, #1
 8009948:	d108      	bne.n	800995c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009952:	2100      	movs	r1, #0
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fef5 	bl	800a744 <HAL_PCDEx_LPM_Callback>
 800995a:	e002      	b.n	8009962 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f011 f86d 	bl	801aa3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	695a      	ldr	r2, [r3, #20]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009970:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4618      	mov	r0, r3
 8009978:	f00b fa36 	bl	8014de8 <USB_ReadInterrupts>
 800997c:	4603      	mov	r3, r0
 800997e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009986:	d112      	bne.n	80099ae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f003 0301 	and.w	r3, r3, #1
 8009994:	2b01      	cmp	r3, #1
 8009996:	d102      	bne.n	800999e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f011 f829 	bl	801a9f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	695a      	ldr	r2, [r3, #20]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80099ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f00b fa18 	bl	8014de8 <USB_ReadInterrupts>
 80099b8:	4603      	mov	r3, r0
 80099ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099c2:	d121      	bne.n	8009a08 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	695a      	ldr	r2, [r3, #20]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80099d2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d111      	bne.n	8009a02 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ec:	089b      	lsrs	r3, r3, #2
 80099ee:	f003 020f 	and.w	r2, r3, #15
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80099f8:	2101      	movs	r1, #1
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fea2 	bl	800a744 <HAL_PCDEx_LPM_Callback>
 8009a00:	e002      	b.n	8009a08 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f010 fff4 	bl	801a9f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f00b f9eb 	bl	8014de8 <USB_ReadInterrupts>
 8009a12:	4603      	mov	r3, r0
 8009a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a1c:	f040 80b7 	bne.w	8009b8e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	69fa      	ldr	r2, [r7, #28]
 8009a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a2e:	f023 0301 	bic.w	r3, r3, #1
 8009a32:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2110      	movs	r1, #16
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f00a fab2 	bl	8013fa4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a40:	2300      	movs	r3, #0
 8009a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a44:	e046      	b.n	8009ad4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a48:	015a      	lsls	r2, r3, #5
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a52:	461a      	mov	r2, r3
 8009a54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a58:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5c:	015a      	lsls	r2, r3, #5
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	4413      	add	r3, r2
 8009a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a6a:	0151      	lsls	r1, r2, #5
 8009a6c:	69fa      	ldr	r2, [r7, #28]
 8009a6e:	440a      	add	r2, r1
 8009a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7c:	015a      	lsls	r2, r3, #5
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	4413      	add	r3, r2
 8009a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a86:	461a      	mov	r2, r3
 8009a88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a8c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a9e:	0151      	lsls	r1, r2, #5
 8009aa0:	69fa      	ldr	r2, [r7, #28]
 8009aa2:	440a      	add	r2, r1
 8009aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aa8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009aac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab0:	015a      	lsls	r2, r3, #5
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009abe:	0151      	lsls	r1, r2, #5
 8009ac0:	69fa      	ldr	r2, [r7, #28]
 8009ac2:	440a      	add	r2, r1
 8009ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ac8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009acc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d3b3      	bcc.n	8009a46 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ae4:	69db      	ldr	r3, [r3, #28]
 8009ae6:	69fa      	ldr	r2, [r7, #28]
 8009ae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009aec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009af0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d016      	beq.n	8009b28 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b04:	69fa      	ldr	r2, [r7, #28]
 8009b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b0a:	f043 030b 	orr.w	r3, r3, #11
 8009b0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b1a:	69fa      	ldr	r2, [r7, #28]
 8009b1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b20:	f043 030b 	orr.w	r3, r3, #11
 8009b24:	6453      	str	r3, [r2, #68]	; 0x44
 8009b26:	e015      	b.n	8009b54 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b2e:	695a      	ldr	r2, [r3, #20]
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b36:	4619      	mov	r1, r3
 8009b38:	f242 032b 	movw	r3, #8235	; 0x202b
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	69fa      	ldr	r2, [r7, #28]
 8009b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b4e:	f043 030b 	orr.w	r3, r3, #11
 8009b52:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	69fa      	ldr	r2, [r7, #28]
 8009b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009b66:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6818      	ldr	r0, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009b78:	461a      	mov	r2, r3
 8009b7a:	f00b f9fb 	bl	8014f74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	695a      	ldr	r2, [r3, #20]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009b8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f00b f928 	bl	8014de8 <USB_ReadInterrupts>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ba2:	d124      	bne.n	8009bee <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f00b f9bf 	bl	8014f2c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f00a fa73 	bl	801409e <USB_GetDevSpeed>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	461a      	mov	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681c      	ldr	r4, [r3, #0]
 8009bc4:	f001 fd88 	bl	800b6d8 <HAL_RCC_GetHCLKFreq>
 8009bc8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f009 ff78 	bl	8013ac8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f010 fee0 	bl	801a99e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	695a      	ldr	r2, [r3, #20]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009bec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f00b f8f8 	bl	8014de8 <USB_ReadInterrupts>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f003 0308 	and.w	r3, r3, #8
 8009bfe:	2b08      	cmp	r3, #8
 8009c00:	d10a      	bne.n	8009c18 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f010 febd 	bl	801a982 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	695a      	ldr	r2, [r3, #20]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f002 0208 	and.w	r2, r2, #8
 8009c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f00b f8e3 	bl	8014de8 <USB_ReadInterrupts>
 8009c22:	4603      	mov	r3, r0
 8009c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c28:	2b80      	cmp	r3, #128	; 0x80
 8009c2a:	d122      	bne.n	8009c72 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c34:	6a3b      	ldr	r3, [r7, #32]
 8009c36:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c38:	2301      	movs	r3, #1
 8009c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c3c:	e014      	b.n	8009c68 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009c3e:	6879      	ldr	r1, [r7, #4]
 8009c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c42:	4613      	mov	r3, r2
 8009c44:	00db      	lsls	r3, r3, #3
 8009c46:	4413      	add	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	440b      	add	r3, r1
 8009c4c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d105      	bne.n	8009c62 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fb09 	bl	800a274 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c64:	3301      	adds	r3, #1
 8009c66:	627b      	str	r3, [r7, #36]	; 0x24
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d3e5      	bcc.n	8009c3e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f00b f8b6 	bl	8014de8 <USB_ReadInterrupts>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c86:	d13b      	bne.n	8009d00 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c88:	2301      	movs	r3, #1
 8009c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c8c:	e02b      	b.n	8009ce6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	015a      	lsls	r2, r3, #5
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	4413      	add	r3, r2
 8009c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	00db      	lsls	r3, r3, #3
 8009ca6:	4413      	add	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	440b      	add	r3, r1
 8009cac:	3340      	adds	r3, #64	; 0x40
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d115      	bne.n	8009ce0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009cb4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	da12      	bge.n	8009ce0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009cba:	6879      	ldr	r1, [r7, #4]
 8009cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	00db      	lsls	r3, r3, #3
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	440b      	add	r3, r1
 8009cc8:	333f      	adds	r3, #63	; 0x3f
 8009cca:	2201      	movs	r2, #1
 8009ccc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	4619      	mov	r1, r3
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 faca 	bl	800a274 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d3ce      	bcc.n	8009c8e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	695a      	ldr	r2, [r3, #20]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009cfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4618      	mov	r0, r3
 8009d06:	f00b f86f 	bl	8014de8 <USB_ReadInterrupts>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d14:	d155      	bne.n	8009dc2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d16:	2301      	movs	r3, #1
 8009d18:	627b      	str	r3, [r7, #36]	; 0x24
 8009d1a:	e045      	b.n	8009da8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	015a      	lsls	r2, r3, #5
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	4413      	add	r3, r2
 8009d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009d2c:	6879      	ldr	r1, [r7, #4]
 8009d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d30:	4613      	mov	r3, r2
 8009d32:	00db      	lsls	r3, r3, #3
 8009d34:	4413      	add	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	440b      	add	r3, r1
 8009d3a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d12e      	bne.n	8009da2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009d44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	da2b      	bge.n	8009da2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009d56:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d121      	bne.n	8009da2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009d5e:	6879      	ldr	r1, [r7, #4]
 8009d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d62:	4613      	mov	r3, r2
 8009d64:	00db      	lsls	r3, r3, #3
 8009d66:	4413      	add	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	440b      	add	r3, r1
 8009d6c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009d70:	2201      	movs	r2, #1
 8009d72:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009d74:	6a3b      	ldr	r3, [r7, #32]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10a      	bne.n	8009da2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	69fa      	ldr	r2, [r7, #28]
 8009d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d9e:	6053      	str	r3, [r2, #4]
            break;
 8009da0:	e007      	b.n	8009db2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	3301      	adds	r3, #1
 8009da6:	627b      	str	r3, [r7, #36]	; 0x24
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d3b4      	bcc.n	8009d1c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	695a      	ldr	r2, [r3, #20]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009dc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f00b f80e 	bl	8014de8 <USB_ReadInterrupts>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dd6:	d10a      	bne.n	8009dee <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f010 fe61 	bl	801aaa0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	695a      	ldr	r2, [r3, #20]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f00a fff8 	bl	8014de8 <USB_ReadInterrupts>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	f003 0304 	and.w	r3, r3, #4
 8009dfe:	2b04      	cmp	r3, #4
 8009e00:	d115      	bne.n	8009e2e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	f003 0304 	and.w	r3, r3, #4
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f010 fe51 	bl	801aabc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	6859      	ldr	r1, [r3, #4]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	69ba      	ldr	r2, [r7, #24]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	605a      	str	r2, [r3, #4]
 8009e2a:	e000      	b.n	8009e2e <HAL_PCD_IRQHandler+0x992>
      return;
 8009e2c:	bf00      	nop
    }
  }
}
 8009e2e:	3734      	adds	r7, #52	; 0x34
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd90      	pop	{r4, r7, pc}

08009e34 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d101      	bne.n	8009e4e <HAL_PCD_SetAddress+0x1a>
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	e013      	b.n	8009e76 <HAL_PCD_SetAddress+0x42>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	78fa      	ldrb	r2, [r7, #3]
 8009e5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	78fa      	ldrb	r2, [r7, #3]
 8009e64:	4611      	mov	r1, r2
 8009e66:	4618      	mov	r0, r3
 8009e68:	f00a ff56 	bl	8014d18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	4608      	mov	r0, r1
 8009e88:	4611      	mov	r1, r2
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	70fb      	strb	r3, [r7, #3]
 8009e90:	460b      	mov	r3, r1
 8009e92:	803b      	strh	r3, [r7, #0]
 8009e94:	4613      	mov	r3, r2
 8009e96:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009e9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	da0f      	bge.n	8009ec4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ea4:	78fb      	ldrb	r3, [r7, #3]
 8009ea6:	f003 020f 	and.w	r2, r3, #15
 8009eaa:	4613      	mov	r3, r2
 8009eac:	00db      	lsls	r3, r3, #3
 8009eae:	4413      	add	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	3338      	adds	r3, #56	; 0x38
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	3304      	adds	r3, #4
 8009eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	705a      	strb	r2, [r3, #1]
 8009ec2:	e00f      	b.n	8009ee4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ec4:	78fb      	ldrb	r3, [r7, #3]
 8009ec6:	f003 020f 	and.w	r2, r3, #15
 8009eca:	4613      	mov	r3, r2
 8009ecc:	00db      	lsls	r3, r3, #3
 8009ece:	4413      	add	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	4413      	add	r3, r2
 8009eda:	3304      	adds	r3, #4
 8009edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009ee4:	78fb      	ldrb	r3, [r7, #3]
 8009ee6:	f003 030f 	and.w	r3, r3, #15
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009ef0:	883a      	ldrh	r2, [r7, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	78ba      	ldrb	r2, [r7, #2]
 8009efa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	785b      	ldrb	r3, [r3, #1]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d004      	beq.n	8009f0e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009f0e:	78bb      	ldrb	r3, [r7, #2]
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d102      	bne.n	8009f1a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2200      	movs	r2, #0
 8009f18:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d101      	bne.n	8009f28 <HAL_PCD_EP_Open+0xaa>
 8009f24:	2302      	movs	r3, #2
 8009f26:	e00e      	b.n	8009f46 <HAL_PCD_EP_Open+0xc8>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68f9      	ldr	r1, [r7, #12]
 8009f36:	4618      	mov	r0, r3
 8009f38:	f00a f8d6 	bl	80140e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009f44:	7afb      	ldrb	r3, [r7, #11]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b084      	sub	sp, #16
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
 8009f56:	460b      	mov	r3, r1
 8009f58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	da0f      	bge.n	8009f82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f62:	78fb      	ldrb	r3, [r7, #3]
 8009f64:	f003 020f 	and.w	r2, r3, #15
 8009f68:	4613      	mov	r3, r2
 8009f6a:	00db      	lsls	r3, r3, #3
 8009f6c:	4413      	add	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	3338      	adds	r3, #56	; 0x38
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	4413      	add	r3, r2
 8009f76:	3304      	adds	r3, #4
 8009f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	705a      	strb	r2, [r3, #1]
 8009f80:	e00f      	b.n	8009fa2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f82:	78fb      	ldrb	r3, [r7, #3]
 8009f84:	f003 020f 	and.w	r2, r3, #15
 8009f88:	4613      	mov	r3, r2
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	4413      	add	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	4413      	add	r3, r2
 8009f98:	3304      	adds	r3, #4
 8009f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009fa2:	78fb      	ldrb	r3, [r7, #3]
 8009fa4:	f003 030f 	and.w	r3, r3, #15
 8009fa8:	b2da      	uxtb	r2, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d101      	bne.n	8009fbc <HAL_PCD_EP_Close+0x6e>
 8009fb8:	2302      	movs	r3, #2
 8009fba:	e00e      	b.n	8009fda <HAL_PCD_EP_Close+0x8c>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68f9      	ldr	r1, [r7, #12]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f00a f914 	bl	80141f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b086      	sub	sp, #24
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	60f8      	str	r0, [r7, #12]
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	603b      	str	r3, [r7, #0]
 8009fee:	460b      	mov	r3, r1
 8009ff0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ff2:	7afb      	ldrb	r3, [r7, #11]
 8009ff4:	f003 020f 	and.w	r2, r3, #15
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	00db      	lsls	r3, r3, #3
 8009ffc:	4413      	add	r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	4413      	add	r3, r2
 800a008:	3304      	adds	r3, #4
 800a00a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	2200      	movs	r2, #0
 800a01c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2200      	movs	r2, #0
 800a022:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a024:	7afb      	ldrb	r3, [r7, #11]
 800a026:	f003 030f 	and.w	r3, r3, #15
 800a02a:	b2da      	uxtb	r2, r3
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d102      	bne.n	800a03e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6818      	ldr	r0, [r3, #0]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	b2db      	uxtb	r3, r3
 800a048:	461a      	mov	r2, r3
 800a04a:	6979      	ldr	r1, [r7, #20]
 800a04c:	f00a f9b0 	bl	80143b0 <USB_EPStartXfer>

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3718      	adds	r7, #24
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b083      	sub	sp, #12
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	460b      	mov	r3, r1
 800a064:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a066:	78fb      	ldrb	r3, [r7, #3]
 800a068:	f003 020f 	and.w	r2, r3, #15
 800a06c:	6879      	ldr	r1, [r7, #4]
 800a06e:	4613      	mov	r3, r2
 800a070:	00db      	lsls	r3, r3, #3
 800a072:	4413      	add	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	440b      	add	r3, r1
 800a078:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800a07c:	681b      	ldr	r3, [r3, #0]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b086      	sub	sp, #24
 800a08e:	af00      	add	r7, sp, #0
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	603b      	str	r3, [r7, #0]
 800a096:	460b      	mov	r3, r1
 800a098:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a09a:	7afb      	ldrb	r3, [r7, #11]
 800a09c:	f003 020f 	and.w	r2, r3, #15
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	00db      	lsls	r3, r3, #3
 800a0a4:	4413      	add	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	3338      	adds	r3, #56	; 0x38
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0ca:	7afb      	ldrb	r3, [r7, #11]
 800a0cc:	f003 030f 	and.w	r3, r3, #15
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d102      	bne.n	800a0e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6818      	ldr	r0, [r3, #0]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	6979      	ldr	r1, [r7, #20]
 800a0f2:	f00a f95d 	bl	80143b0 <USB_EPStartXfer>

  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3718      	adds	r7, #24
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	460b      	mov	r3, r1
 800a10a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a10c:	78fb      	ldrb	r3, [r7, #3]
 800a10e:	f003 020f 	and.w	r2, r3, #15
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	429a      	cmp	r2, r3
 800a118:	d901      	bls.n	800a11e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e050      	b.n	800a1c0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a11e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a122:	2b00      	cmp	r3, #0
 800a124:	da0f      	bge.n	800a146 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a126:	78fb      	ldrb	r3, [r7, #3]
 800a128:	f003 020f 	and.w	r2, r3, #15
 800a12c:	4613      	mov	r3, r2
 800a12e:	00db      	lsls	r3, r3, #3
 800a130:	4413      	add	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	3338      	adds	r3, #56	; 0x38
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	4413      	add	r3, r2
 800a13a:	3304      	adds	r3, #4
 800a13c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2201      	movs	r2, #1
 800a142:	705a      	strb	r2, [r3, #1]
 800a144:	e00d      	b.n	800a162 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a146:	78fa      	ldrb	r2, [r7, #3]
 800a148:	4613      	mov	r3, r2
 800a14a:	00db      	lsls	r3, r3, #3
 800a14c:	4413      	add	r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	4413      	add	r3, r2
 800a158:	3304      	adds	r3, #4
 800a15a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2201      	movs	r2, #1
 800a166:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a168:	78fb      	ldrb	r3, [r7, #3]
 800a16a:	f003 030f 	and.w	r3, r3, #15
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d101      	bne.n	800a182 <HAL_PCD_EP_SetStall+0x82>
 800a17e:	2302      	movs	r3, #2
 800a180:	e01e      	b.n	800a1c0 <HAL_PCD_EP_SetStall+0xc0>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68f9      	ldr	r1, [r7, #12]
 800a190:	4618      	mov	r0, r3
 800a192:	f00a fced 	bl	8014b70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a196:	78fb      	ldrb	r3, [r7, #3]
 800a198:	f003 030f 	and.w	r3, r3, #15
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10a      	bne.n	800a1b6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6818      	ldr	r0, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	b2d9      	uxtb	r1, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	f00a fedf 	bl	8014f74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a1d4:	78fb      	ldrb	r3, [r7, #3]
 800a1d6:	f003 020f 	and.w	r2, r3, #15
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d901      	bls.n	800a1e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e042      	b.n	800a26c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a1e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	da0f      	bge.n	800a20e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1ee:	78fb      	ldrb	r3, [r7, #3]
 800a1f0:	f003 020f 	and.w	r2, r3, #15
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	00db      	lsls	r3, r3, #3
 800a1f8:	4413      	add	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	3338      	adds	r3, #56	; 0x38
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	4413      	add	r3, r2
 800a202:	3304      	adds	r3, #4
 800a204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2201      	movs	r2, #1
 800a20a:	705a      	strb	r2, [r3, #1]
 800a20c:	e00f      	b.n	800a22e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a20e:	78fb      	ldrb	r3, [r7, #3]
 800a210:	f003 020f 	and.w	r2, r3, #15
 800a214:	4613      	mov	r3, r2
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	4413      	add	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	4413      	add	r3, r2
 800a224:	3304      	adds	r3, #4
 800a226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a234:	78fb      	ldrb	r3, [r7, #3]
 800a236:	f003 030f 	and.w	r3, r3, #15
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a246:	2b01      	cmp	r3, #1
 800a248:	d101      	bne.n	800a24e <HAL_PCD_EP_ClrStall+0x86>
 800a24a:	2302      	movs	r3, #2
 800a24c:	e00e      	b.n	800a26c <HAL_PCD_EP_ClrStall+0xa4>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68f9      	ldr	r1, [r7, #12]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f00a fcf5 	bl	8014c4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a284:	2b00      	cmp	r3, #0
 800a286:	da0c      	bge.n	800a2a2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	f003 020f 	and.w	r2, r3, #15
 800a28e:	4613      	mov	r3, r2
 800a290:	00db      	lsls	r3, r3, #3
 800a292:	4413      	add	r3, r2
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	3338      	adds	r3, #56	; 0x38
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	4413      	add	r3, r2
 800a29c:	3304      	adds	r3, #4
 800a29e:	60fb      	str	r3, [r7, #12]
 800a2a0:	e00c      	b.n	800a2bc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2a2:	78fb      	ldrb	r3, [r7, #3]
 800a2a4:	f003 020f 	and.w	r2, r3, #15
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	00db      	lsls	r3, r3, #3
 800a2ac:	4413      	add	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68f9      	ldr	r1, [r7, #12]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f00a fb14 	bl	80148f0 <USB_EPStopXfer>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a2cc:	7afb      	ldrb	r3, [r7, #11]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b08a      	sub	sp, #40	; 0x28
 800a2da:	af02      	add	r7, sp, #8
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	00db      	lsls	r3, r3, #3
 800a2f0:	4413      	add	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	3338      	adds	r3, #56	; 0x38
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	695a      	ldr	r2, [r3, #20]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	429a      	cmp	r2, r3
 800a308:	d901      	bls.n	800a30e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e06c      	b.n	800a3e8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	691a      	ldr	r2, [r3, #16]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	69fa      	ldr	r2, [r7, #28]
 800a320:	429a      	cmp	r2, r3
 800a322:	d902      	bls.n	800a32a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	3303      	adds	r3, #3
 800a32e:	089b      	lsrs	r3, r3, #2
 800a330:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a332:	e02b      	b.n	800a38c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	691a      	ldr	r2, [r3, #16]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	69fa      	ldr	r2, [r7, #28]
 800a346:	429a      	cmp	r2, r3
 800a348:	d902      	bls.n	800a350 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	3303      	adds	r3, #3
 800a354:	089b      	lsrs	r3, r3, #2
 800a356:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	68d9      	ldr	r1, [r3, #12]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	4603      	mov	r3, r0
 800a36e:	6978      	ldr	r0, [r7, #20]
 800a370:	f00a fb68 	bl	8014a44 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	68da      	ldr	r2, [r3, #12]
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	441a      	add	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	695a      	ldr	r2, [r3, #20]
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	441a      	add	r2, r3
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	015a      	lsls	r2, r3, #5
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	4413      	add	r3, r2
 800a394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a39c:	69ba      	ldr	r2, [r7, #24]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d809      	bhi.n	800a3b6 <PCD_WriteEmptyTxFifo+0xe0>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	695a      	ldr	r2, [r3, #20]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d203      	bcs.n	800a3b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1be      	bne.n	800a334 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	691a      	ldr	r2, [r3, #16]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d811      	bhi.n	800a3e6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	f003 030f 	and.w	r3, r3, #15
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	43db      	mvns	r3, r3
 800a3dc:	6939      	ldr	r1, [r7, #16]
 800a3de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3720      	adds	r7, #32
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b088      	sub	sp, #32
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	333c      	adds	r3, #60	; 0x3c
 800a408:	3304      	adds	r3, #4
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	2b01      	cmp	r3, #1
 800a424:	d17b      	bne.n	800a51e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	f003 0308 	and.w	r3, r3, #8
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d015      	beq.n	800a45c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	4a61      	ldr	r2, [pc, #388]	; (800a5b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a434:	4293      	cmp	r3, r2
 800a436:	f240 80b9 	bls.w	800a5ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a440:	2b00      	cmp	r3, #0
 800a442:	f000 80b3 	beq.w	800a5ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	015a      	lsls	r2, r3, #5
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	4413      	add	r3, r2
 800a44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a452:	461a      	mov	r2, r3
 800a454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a458:	6093      	str	r3, [r2, #8]
 800a45a:	e0a7      	b.n	800a5ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	f003 0320 	and.w	r3, r3, #32
 800a462:	2b00      	cmp	r3, #0
 800a464:	d009      	beq.n	800a47a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	015a      	lsls	r2, r3, #5
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a472:	461a      	mov	r2, r3
 800a474:	2320      	movs	r3, #32
 800a476:	6093      	str	r3, [r2, #8]
 800a478:	e098      	b.n	800a5ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a480:	2b00      	cmp	r3, #0
 800a482:	f040 8093 	bne.w	800a5ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	4a4b      	ldr	r2, [pc, #300]	; (800a5b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d90f      	bls.n	800a4ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00a      	beq.n	800a4ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	015a      	lsls	r2, r3, #5
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	4413      	add	r3, r2
 800a4a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4aa:	6093      	str	r3, [r2, #8]
 800a4ac:	e07e      	b.n	800a5ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	00db      	lsls	r3, r3, #3
 800a4b4:	4413      	add	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	4413      	add	r3, r2
 800a4c0:	3304      	adds	r3, #4
 800a4c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6a1a      	ldr	r2, [r3, #32]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	0159      	lsls	r1, r3, #5
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	440b      	add	r3, r1
 800a4d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4da:	1ad2      	subs	r2, r2, r3
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d114      	bne.n	800a510 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d109      	bne.n	800a502 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6818      	ldr	r0, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	2101      	movs	r1, #1
 800a4fc:	f00a fd3a 	bl	8014f74 <USB_EP0_OutStart>
 800a500:	e006      	b.n	800a510 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	68da      	ldr	r2, [r3, #12]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	441a      	add	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	b2db      	uxtb	r3, r3
 800a514:	4619      	mov	r1, r3
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f010 f9fe 	bl	801a918 <HAL_PCD_DataOutStageCallback>
 800a51c:	e046      	b.n	800a5ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	4a26      	ldr	r2, [pc, #152]	; (800a5bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d124      	bne.n	800a570 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00a      	beq.n	800a546 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	4413      	add	r3, r2
 800a538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a53c:	461a      	mov	r2, r3
 800a53e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a542:	6093      	str	r3, [r2, #8]
 800a544:	e032      	b.n	800a5ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	f003 0320 	and.w	r3, r3, #32
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d008      	beq.n	800a562 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	015a      	lsls	r2, r3, #5
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	4413      	add	r3, r2
 800a558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a55c:	461a      	mov	r2, r3
 800a55e:	2320      	movs	r3, #32
 800a560:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	b2db      	uxtb	r3, r3
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f010 f9d5 	bl	801a918 <HAL_PCD_DataOutStageCallback>
 800a56e:	e01d      	b.n	800a5ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d114      	bne.n	800a5a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a576:	6879      	ldr	r1, [r7, #4]
 800a578:	683a      	ldr	r2, [r7, #0]
 800a57a:	4613      	mov	r3, r2
 800a57c:	00db      	lsls	r3, r3, #3
 800a57e:	4413      	add	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	440b      	add	r3, r1
 800a584:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d108      	bne.n	800a5a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6818      	ldr	r0, [r3, #0]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a598:	461a      	mov	r2, r3
 800a59a:	2100      	movs	r1, #0
 800a59c:	f00a fcea 	bl	8014f74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f010 f9b6 	bl	801a918 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3720      	adds	r7, #32
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	4f54300a 	.word	0x4f54300a
 800a5bc:	4f54310a 	.word	0x4f54310a

0800a5c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	333c      	adds	r3, #60	; 0x3c
 800a5d8:	3304      	adds	r3, #4
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	015a      	lsls	r2, r3, #5
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	4a15      	ldr	r2, [pc, #84]	; (800a648 <PCD_EP_OutSetupPacket_int+0x88>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d90e      	bls.n	800a614 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d009      	beq.n	800a614 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	015a      	lsls	r2, r3, #5
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	4413      	add	r3, r2
 800a608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a60c:	461a      	mov	r2, r3
 800a60e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a612:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f010 f96d 	bl	801a8f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	4a0a      	ldr	r2, [pc, #40]	; (800a648 <PCD_EP_OutSetupPacket_int+0x88>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d90c      	bls.n	800a63c <PCD_EP_OutSetupPacket_int+0x7c>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d108      	bne.n	800a63c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6818      	ldr	r0, [r3, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a634:	461a      	mov	r2, r3
 800a636:	2101      	movs	r1, #1
 800a638:	f00a fc9c 	bl	8014f74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	4f54300a 	.word	0x4f54300a

0800a64c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b085      	sub	sp, #20
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	460b      	mov	r3, r1
 800a656:	70fb      	strb	r3, [r7, #3]
 800a658:	4613      	mov	r3, r2
 800a65a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a662:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a664:	78fb      	ldrb	r3, [r7, #3]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d107      	bne.n	800a67a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a66a:	883b      	ldrh	r3, [r7, #0]
 800a66c:	0419      	lsls	r1, r3, #16
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	430a      	orrs	r2, r1
 800a676:	629a      	str	r2, [r3, #40]	; 0x28
 800a678:	e028      	b.n	800a6cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a680:	0c1b      	lsrs	r3, r3, #16
 800a682:	68ba      	ldr	r2, [r7, #8]
 800a684:	4413      	add	r3, r2
 800a686:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a688:	2300      	movs	r3, #0
 800a68a:	73fb      	strb	r3, [r7, #15]
 800a68c:	e00d      	b.n	800a6aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	7bfb      	ldrb	r3, [r7, #15]
 800a694:	3340      	adds	r3, #64	; 0x40
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	0c1b      	lsrs	r3, r3, #16
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a6a4:	7bfb      	ldrb	r3, [r7, #15]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	73fb      	strb	r3, [r7, #15]
 800a6aa:	7bfa      	ldrb	r2, [r7, #15]
 800a6ac:	78fb      	ldrb	r3, [r7, #3]
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d3ec      	bcc.n	800a68e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a6b4:	883b      	ldrh	r3, [r7, #0]
 800a6b6:	0418      	lsls	r0, r3, #16
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6819      	ldr	r1, [r3, #0]
 800a6bc:	78fb      	ldrb	r3, [r7, #3]
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	4302      	orrs	r2, r0
 800a6c4:	3340      	adds	r3, #64	; 0x40
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	440b      	add	r3, r1
 800a6ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3714      	adds	r7, #20
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b083      	sub	sp, #12
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	887a      	ldrh	r2, [r7, #2]
 800a6ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a72a:	4b05      	ldr	r3, [pc, #20]	; (800a740 <HAL_PCDEx_ActivateLPM+0x44>)
 800a72c:	4313      	orrs	r3, r2
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3714      	adds	r7, #20
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	10000003 	.word	0x10000003

0800a744 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	460b      	mov	r3, r1
 800a74e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a750:	bf00      	nop
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a764:	4b19      	ldr	r3, [pc, #100]	; (800a7cc <HAL_PWREx_ConfigSupply+0x70>)
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f003 0304 	and.w	r3, r3, #4
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	d00a      	beq.n	800a786 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a770:	4b16      	ldr	r3, [pc, #88]	; (800a7cc <HAL_PWREx_ConfigSupply+0x70>)
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	f003 0307 	and.w	r3, r3, #7
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d001      	beq.n	800a782 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e01f      	b.n	800a7c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	e01d      	b.n	800a7c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a786:	4b11      	ldr	r3, [pc, #68]	; (800a7cc <HAL_PWREx_ConfigSupply+0x70>)
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	f023 0207 	bic.w	r2, r3, #7
 800a78e:	490f      	ldr	r1, [pc, #60]	; (800a7cc <HAL_PWREx_ConfigSupply+0x70>)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4313      	orrs	r3, r2
 800a794:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a796:	f7f9 fcc3 	bl	8004120 <HAL_GetTick>
 800a79a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a79c:	e009      	b.n	800a7b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a79e:	f7f9 fcbf 	bl	8004120 <HAL_GetTick>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7ac:	d901      	bls.n	800a7b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e007      	b.n	800a7c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a7b2:	4b06      	ldr	r3, [pc, #24]	; (800a7cc <HAL_PWREx_ConfigSupply+0x70>)
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7be:	d1ee      	bne.n	800a79e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	58024800 	.word	0x58024800

0800a7d0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a7d4:	4b05      	ldr	r3, [pc, #20]	; (800a7ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	4a04      	ldr	r2, [pc, #16]	; (800a7ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a7da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7de:	60d3      	str	r3, [r2, #12]
}
 800a7e0:	bf00      	nop
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	58024800 	.word	0x58024800

0800a7f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b08c      	sub	sp, #48	; 0x30
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d101      	bne.n	800a802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	e3c8      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f000 8087 	beq.w	800a91e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a810:	4b88      	ldr	r3, [pc, #544]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a818:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a81a:	4b86      	ldr	r3, [pc, #536]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a81e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a822:	2b10      	cmp	r3, #16
 800a824:	d007      	beq.n	800a836 <HAL_RCC_OscConfig+0x46>
 800a826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a828:	2b18      	cmp	r3, #24
 800a82a:	d110      	bne.n	800a84e <HAL_RCC_OscConfig+0x5e>
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	f003 0303 	and.w	r3, r3, #3
 800a832:	2b02      	cmp	r3, #2
 800a834:	d10b      	bne.n	800a84e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a836:	4b7f      	ldr	r3, [pc, #508]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d06c      	beq.n	800a91c <HAL_RCC_OscConfig+0x12c>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d168      	bne.n	800a91c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e3a2      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a856:	d106      	bne.n	800a866 <HAL_RCC_OscConfig+0x76>
 800a858:	4b76      	ldr	r3, [pc, #472]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a75      	ldr	r2, [pc, #468]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a85e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a862:	6013      	str	r3, [r2, #0]
 800a864:	e02e      	b.n	800a8c4 <HAL_RCC_OscConfig+0xd4>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d10c      	bne.n	800a888 <HAL_RCC_OscConfig+0x98>
 800a86e:	4b71      	ldr	r3, [pc, #452]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a70      	ldr	r2, [pc, #448]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	4b6e      	ldr	r3, [pc, #440]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a6d      	ldr	r2, [pc, #436]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a884:	6013      	str	r3, [r2, #0]
 800a886:	e01d      	b.n	800a8c4 <HAL_RCC_OscConfig+0xd4>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a890:	d10c      	bne.n	800a8ac <HAL_RCC_OscConfig+0xbc>
 800a892:	4b68      	ldr	r3, [pc, #416]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a67      	ldr	r2, [pc, #412]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a89c:	6013      	str	r3, [r2, #0]
 800a89e:	4b65      	ldr	r3, [pc, #404]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a64      	ldr	r2, [pc, #400]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a8a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8a8:	6013      	str	r3, [r2, #0]
 800a8aa:	e00b      	b.n	800a8c4 <HAL_RCC_OscConfig+0xd4>
 800a8ac:	4b61      	ldr	r3, [pc, #388]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a60      	ldr	r2, [pc, #384]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a8b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8b6:	6013      	str	r3, [r2, #0]
 800a8b8:	4b5e      	ldr	r3, [pc, #376]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a5d      	ldr	r2, [pc, #372]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a8be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d013      	beq.n	800a8f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8cc:	f7f9 fc28 	bl	8004120 <HAL_GetTick>
 800a8d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8d2:	e008      	b.n	800a8e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8d4:	f7f9 fc24 	bl	8004120 <HAL_GetTick>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	2b64      	cmp	r3, #100	; 0x64
 800a8e0:	d901      	bls.n	800a8e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e356      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8e6:	4b53      	ldr	r3, [pc, #332]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d0f0      	beq.n	800a8d4 <HAL_RCC_OscConfig+0xe4>
 800a8f2:	e014      	b.n	800a91e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8f4:	f7f9 fc14 	bl	8004120 <HAL_GetTick>
 800a8f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a8fa:	e008      	b.n	800a90e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8fc:	f7f9 fc10 	bl	8004120 <HAL_GetTick>
 800a900:	4602      	mov	r2, r0
 800a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a904:	1ad3      	subs	r3, r2, r3
 800a906:	2b64      	cmp	r3, #100	; 0x64
 800a908:	d901      	bls.n	800a90e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	e342      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a90e:	4b49      	ldr	r3, [pc, #292]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1f0      	bne.n	800a8fc <HAL_RCC_OscConfig+0x10c>
 800a91a:	e000      	b.n	800a91e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a91c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 0302 	and.w	r3, r3, #2
 800a926:	2b00      	cmp	r3, #0
 800a928:	f000 808c 	beq.w	800aa44 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a92c:	4b41      	ldr	r3, [pc, #260]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a934:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a936:	4b3f      	ldr	r3, [pc, #252]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a93a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a93c:	6a3b      	ldr	r3, [r7, #32]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d007      	beq.n	800a952 <HAL_RCC_OscConfig+0x162>
 800a942:	6a3b      	ldr	r3, [r7, #32]
 800a944:	2b18      	cmp	r3, #24
 800a946:	d137      	bne.n	800a9b8 <HAL_RCC_OscConfig+0x1c8>
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	f003 0303 	and.w	r3, r3, #3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d132      	bne.n	800a9b8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a952:	4b38      	ldr	r3, [pc, #224]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 0304 	and.w	r3, r3, #4
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d005      	beq.n	800a96a <HAL_RCC_OscConfig+0x17a>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d101      	bne.n	800a96a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	e314      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a96a:	4b32      	ldr	r3, [pc, #200]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f023 0219 	bic.w	r2, r3, #25
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	492f      	ldr	r1, [pc, #188]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a978:	4313      	orrs	r3, r2
 800a97a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a97c:	f7f9 fbd0 	bl	8004120 <HAL_GetTick>
 800a980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a982:	e008      	b.n	800a996 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a984:	f7f9 fbcc 	bl	8004120 <HAL_GetTick>
 800a988:	4602      	mov	r2, r0
 800a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d901      	bls.n	800a996 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a992:	2303      	movs	r3, #3
 800a994:	e2fe      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a996:	4b27      	ldr	r3, [pc, #156]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 0304 	and.w	r3, r3, #4
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d0f0      	beq.n	800a984 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9a2:	4b24      	ldr	r3, [pc, #144]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	061b      	lsls	r3, r3, #24
 800a9b0:	4920      	ldr	r1, [pc, #128]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9b6:	e045      	b.n	800aa44 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d026      	beq.n	800aa0e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a9c0:	4b1c      	ldr	r3, [pc, #112]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f023 0219 	bic.w	r2, r3, #25
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	4919      	ldr	r1, [pc, #100]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9d2:	f7f9 fba5 	bl	8004120 <HAL_GetTick>
 800a9d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9d8:	e008      	b.n	800a9ec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9da:	f7f9 fba1 	bl	8004120 <HAL_GetTick>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d901      	bls.n	800a9ec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	e2d3      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9ec:	4b11      	ldr	r3, [pc, #68]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 0304 	and.w	r3, r3, #4
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d0f0      	beq.n	800a9da <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9f8:	4b0e      	ldr	r3, [pc, #56]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	061b      	lsls	r3, r3, #24
 800aa06:	490b      	ldr	r1, [pc, #44]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	604b      	str	r3, [r1, #4]
 800aa0c:	e01a      	b.n	800aa44 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa0e:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a08      	ldr	r2, [pc, #32]	; (800aa34 <HAL_RCC_OscConfig+0x244>)
 800aa14:	f023 0301 	bic.w	r3, r3, #1
 800aa18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa1a:	f7f9 fb81 	bl	8004120 <HAL_GetTick>
 800aa1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aa20:	e00a      	b.n	800aa38 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa22:	f7f9 fb7d 	bl	8004120 <HAL_GetTick>
 800aa26:	4602      	mov	r2, r0
 800aa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d903      	bls.n	800aa38 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800aa30:	2303      	movs	r3, #3
 800aa32:	e2af      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
 800aa34:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aa38:	4b96      	ldr	r3, [pc, #600]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 0304 	and.w	r3, r3, #4
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1ee      	bne.n	800aa22 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 0310 	and.w	r3, r3, #16
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d06a      	beq.n	800ab26 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa50:	4b90      	ldr	r3, [pc, #576]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa58:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa5a:	4b8e      	ldr	r3, [pc, #568]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800aa5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa5e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	2b08      	cmp	r3, #8
 800aa64:	d007      	beq.n	800aa76 <HAL_RCC_OscConfig+0x286>
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	2b18      	cmp	r3, #24
 800aa6a:	d11b      	bne.n	800aaa4 <HAL_RCC_OscConfig+0x2b4>
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	f003 0303 	and.w	r3, r3, #3
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d116      	bne.n	800aaa4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa76:	4b87      	ldr	r3, [pc, #540]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d005      	beq.n	800aa8e <HAL_RCC_OscConfig+0x29e>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	69db      	ldr	r3, [r3, #28]
 800aa86:	2b80      	cmp	r3, #128	; 0x80
 800aa88:	d001      	beq.n	800aa8e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e282      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa8e:	4b81      	ldr	r3, [pc, #516]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a1b      	ldr	r3, [r3, #32]
 800aa9a:	061b      	lsls	r3, r3, #24
 800aa9c:	497d      	ldr	r1, [pc, #500]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aaa2:	e040      	b.n	800ab26 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	69db      	ldr	r3, [r3, #28]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d023      	beq.n	800aaf4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800aaac:	4b79      	ldr	r3, [pc, #484]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a78      	ldr	r2, [pc, #480]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800aab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aab8:	f7f9 fb32 	bl	8004120 <HAL_GetTick>
 800aabc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aabe:	e008      	b.n	800aad2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aac0:	f7f9 fb2e 	bl	8004120 <HAL_GetTick>
 800aac4:	4602      	mov	r2, r0
 800aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d901      	bls.n	800aad2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800aace:	2303      	movs	r3, #3
 800aad0:	e260      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aad2:	4b70      	ldr	r3, [pc, #448]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0f0      	beq.n	800aac0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aade:	4b6d      	ldr	r3, [pc, #436]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a1b      	ldr	r3, [r3, #32]
 800aaea:	061b      	lsls	r3, r3, #24
 800aaec:	4969      	ldr	r1, [pc, #420]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	60cb      	str	r3, [r1, #12]
 800aaf2:	e018      	b.n	800ab26 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800aaf4:	4b67      	ldr	r3, [pc, #412]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a66      	ldr	r2, [pc, #408]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800aafa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aafe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab00:	f7f9 fb0e 	bl	8004120 <HAL_GetTick>
 800ab04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ab06:	e008      	b.n	800ab1a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ab08:	f7f9 fb0a 	bl	8004120 <HAL_GetTick>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d901      	bls.n	800ab1a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800ab16:	2303      	movs	r3, #3
 800ab18:	e23c      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ab1a:	4b5e      	ldr	r3, [pc, #376]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1f0      	bne.n	800ab08 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 0308 	and.w	r3, r3, #8
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d036      	beq.n	800aba0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d019      	beq.n	800ab6e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ab3a:	4b56      	ldr	r3, [pc, #344]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800ab3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab3e:	4a55      	ldr	r2, [pc, #340]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800ab40:	f043 0301 	orr.w	r3, r3, #1
 800ab44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab46:	f7f9 faeb 	bl	8004120 <HAL_GetTick>
 800ab4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ab4c:	e008      	b.n	800ab60 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab4e:	f7f9 fae7 	bl	8004120 <HAL_GetTick>
 800ab52:	4602      	mov	r2, r0
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d901      	bls.n	800ab60 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e219      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ab60:	4b4c      	ldr	r3, [pc, #304]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800ab62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab64:	f003 0302 	and.w	r3, r3, #2
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d0f0      	beq.n	800ab4e <HAL_RCC_OscConfig+0x35e>
 800ab6c:	e018      	b.n	800aba0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab6e:	4b49      	ldr	r3, [pc, #292]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800ab70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab72:	4a48      	ldr	r2, [pc, #288]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800ab74:	f023 0301 	bic.w	r3, r3, #1
 800ab78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab7a:	f7f9 fad1 	bl	8004120 <HAL_GetTick>
 800ab7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ab80:	e008      	b.n	800ab94 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab82:	f7f9 facd 	bl	8004120 <HAL_GetTick>
 800ab86:	4602      	mov	r2, r0
 800ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8a:	1ad3      	subs	r3, r2, r3
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d901      	bls.n	800ab94 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ab90:	2303      	movs	r3, #3
 800ab92:	e1ff      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ab94:	4b3f      	ldr	r3, [pc, #252]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800ab96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab98:	f003 0302 	and.w	r3, r3, #2
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1f0      	bne.n	800ab82 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f003 0320 	and.w	r3, r3, #32
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d036      	beq.n	800ac1a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	699b      	ldr	r3, [r3, #24]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d019      	beq.n	800abe8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800abb4:	4b37      	ldr	r3, [pc, #220]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a36      	ldr	r2, [pc, #216]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800abba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800abbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800abc0:	f7f9 faae 	bl	8004120 <HAL_GetTick>
 800abc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800abc6:	e008      	b.n	800abda <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800abc8:	f7f9 faaa 	bl	8004120 <HAL_GetTick>
 800abcc:	4602      	mov	r2, r0
 800abce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d901      	bls.n	800abda <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800abd6:	2303      	movs	r3, #3
 800abd8:	e1dc      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800abda:	4b2e      	ldr	r3, [pc, #184]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d0f0      	beq.n	800abc8 <HAL_RCC_OscConfig+0x3d8>
 800abe6:	e018      	b.n	800ac1a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800abe8:	4b2a      	ldr	r3, [pc, #168]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a29      	ldr	r2, [pc, #164]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800abee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abf2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800abf4:	f7f9 fa94 	bl	8004120 <HAL_GetTick>
 800abf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800abfa:	e008      	b.n	800ac0e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800abfc:	f7f9 fa90 	bl	8004120 <HAL_GetTick>
 800ac00:	4602      	mov	r2, r0
 800ac02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d901      	bls.n	800ac0e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	e1c2      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ac0e:	4b21      	ldr	r3, [pc, #132]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d1f0      	bne.n	800abfc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f003 0304 	and.w	r3, r3, #4
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f000 8086 	beq.w	800ad34 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ac28:	4b1b      	ldr	r3, [pc, #108]	; (800ac98 <HAL_RCC_OscConfig+0x4a8>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a1a      	ldr	r2, [pc, #104]	; (800ac98 <HAL_RCC_OscConfig+0x4a8>)
 800ac2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac34:	f7f9 fa74 	bl	8004120 <HAL_GetTick>
 800ac38:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac3a:	e008      	b.n	800ac4e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac3c:	f7f9 fa70 	bl	8004120 <HAL_GetTick>
 800ac40:	4602      	mov	r2, r0
 800ac42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	2b64      	cmp	r3, #100	; 0x64
 800ac48:	d901      	bls.n	800ac4e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800ac4a:	2303      	movs	r3, #3
 800ac4c:	e1a2      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac4e:	4b12      	ldr	r3, [pc, #72]	; (800ac98 <HAL_RCC_OscConfig+0x4a8>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d0f0      	beq.n	800ac3c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d106      	bne.n	800ac70 <HAL_RCC_OscConfig+0x480>
 800ac62:	4b0c      	ldr	r3, [pc, #48]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800ac64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac66:	4a0b      	ldr	r2, [pc, #44]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800ac68:	f043 0301 	orr.w	r3, r3, #1
 800ac6c:	6713      	str	r3, [r2, #112]	; 0x70
 800ac6e:	e032      	b.n	800acd6 <HAL_RCC_OscConfig+0x4e6>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d111      	bne.n	800ac9c <HAL_RCC_OscConfig+0x4ac>
 800ac78:	4b06      	ldr	r3, [pc, #24]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800ac7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac7c:	4a05      	ldr	r2, [pc, #20]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800ac7e:	f023 0301 	bic.w	r3, r3, #1
 800ac82:	6713      	str	r3, [r2, #112]	; 0x70
 800ac84:	4b03      	ldr	r3, [pc, #12]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800ac86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac88:	4a02      	ldr	r2, [pc, #8]	; (800ac94 <HAL_RCC_OscConfig+0x4a4>)
 800ac8a:	f023 0304 	bic.w	r3, r3, #4
 800ac8e:	6713      	str	r3, [r2, #112]	; 0x70
 800ac90:	e021      	b.n	800acd6 <HAL_RCC_OscConfig+0x4e6>
 800ac92:	bf00      	nop
 800ac94:	58024400 	.word	0x58024400
 800ac98:	58024800 	.word	0x58024800
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	2b05      	cmp	r3, #5
 800aca2:	d10c      	bne.n	800acbe <HAL_RCC_OscConfig+0x4ce>
 800aca4:	4b83      	ldr	r3, [pc, #524]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800aca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca8:	4a82      	ldr	r2, [pc, #520]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800acaa:	f043 0304 	orr.w	r3, r3, #4
 800acae:	6713      	str	r3, [r2, #112]	; 0x70
 800acb0:	4b80      	ldr	r3, [pc, #512]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800acb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acb4:	4a7f      	ldr	r2, [pc, #508]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800acb6:	f043 0301 	orr.w	r3, r3, #1
 800acba:	6713      	str	r3, [r2, #112]	; 0x70
 800acbc:	e00b      	b.n	800acd6 <HAL_RCC_OscConfig+0x4e6>
 800acbe:	4b7d      	ldr	r3, [pc, #500]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800acc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc2:	4a7c      	ldr	r2, [pc, #496]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800acc4:	f023 0301 	bic.w	r3, r3, #1
 800acc8:	6713      	str	r3, [r2, #112]	; 0x70
 800acca:	4b7a      	ldr	r3, [pc, #488]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800accc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acce:	4a79      	ldr	r2, [pc, #484]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800acd0:	f023 0304 	bic.w	r3, r3, #4
 800acd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d015      	beq.n	800ad0a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acde:	f7f9 fa1f 	bl	8004120 <HAL_GetTick>
 800ace2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ace4:	e00a      	b.n	800acfc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ace6:	f7f9 fa1b 	bl	8004120 <HAL_GetTick>
 800acea:	4602      	mov	r2, r0
 800acec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acee:	1ad3      	subs	r3, r2, r3
 800acf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d901      	bls.n	800acfc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800acf8:	2303      	movs	r3, #3
 800acfa:	e14b      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800acfc:	4b6d      	ldr	r3, [pc, #436]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800acfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad00:	f003 0302 	and.w	r3, r3, #2
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d0ee      	beq.n	800ace6 <HAL_RCC_OscConfig+0x4f6>
 800ad08:	e014      	b.n	800ad34 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad0a:	f7f9 fa09 	bl	8004120 <HAL_GetTick>
 800ad0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ad10:	e00a      	b.n	800ad28 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad12:	f7f9 fa05 	bl	8004120 <HAL_GetTick>
 800ad16:	4602      	mov	r2, r0
 800ad18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d901      	bls.n	800ad28 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ad24:	2303      	movs	r3, #3
 800ad26:	e135      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ad28:	4b62      	ldr	r3, [pc, #392]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ad2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad2c:	f003 0302 	and.w	r3, r3, #2
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1ee      	bne.n	800ad12 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f000 812a 	beq.w	800af92 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ad3e:	4b5d      	ldr	r3, [pc, #372]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad46:	2b18      	cmp	r3, #24
 800ad48:	f000 80ba 	beq.w	800aec0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	f040 8095 	bne.w	800ae80 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad56:	4b57      	ldr	r3, [pc, #348]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a56      	ldr	r2, [pc, #344]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ad5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad62:	f7f9 f9dd 	bl	8004120 <HAL_GetTick>
 800ad66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad68:	e008      	b.n	800ad7c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad6a:	f7f9 f9d9 	bl	8004120 <HAL_GetTick>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad72:	1ad3      	subs	r3, r2, r3
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d901      	bls.n	800ad7c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ad78:	2303      	movs	r3, #3
 800ad7a:	e10b      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad7c:	4b4d      	ldr	r3, [pc, #308]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d1f0      	bne.n	800ad6a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad88:	4b4a      	ldr	r3, [pc, #296]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ad8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad8c:	4b4a      	ldr	r3, [pc, #296]	; (800aeb8 <HAL_RCC_OscConfig+0x6c8>)
 800ad8e:	4013      	ands	r3, r2
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ad98:	0112      	lsls	r2, r2, #4
 800ad9a:	430a      	orrs	r2, r1
 800ad9c:	4945      	ldr	r1, [pc, #276]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	628b      	str	r3, [r1, #40]	; 0x28
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada6:	3b01      	subs	r3, #1
 800ada8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb0:	3b01      	subs	r3, #1
 800adb2:	025b      	lsls	r3, r3, #9
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	431a      	orrs	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adbc:	3b01      	subs	r3, #1
 800adbe:	041b      	lsls	r3, r3, #16
 800adc0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800adc4:	431a      	orrs	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adca:	3b01      	subs	r3, #1
 800adcc:	061b      	lsls	r3, r3, #24
 800adce:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800add2:	4938      	ldr	r1, [pc, #224]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800add4:	4313      	orrs	r3, r2
 800add6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800add8:	4b36      	ldr	r3, [pc, #216]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800adda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800addc:	4a35      	ldr	r2, [pc, #212]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800adde:	f023 0301 	bic.w	r3, r3, #1
 800ade2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ade4:	4b33      	ldr	r3, [pc, #204]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ade6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ade8:	4b34      	ldr	r3, [pc, #208]	; (800aebc <HAL_RCC_OscConfig+0x6cc>)
 800adea:	4013      	ands	r3, r2
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800adf0:	00d2      	lsls	r2, r2, #3
 800adf2:	4930      	ldr	r1, [pc, #192]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800adf4:	4313      	orrs	r3, r2
 800adf6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800adf8:	4b2e      	ldr	r3, [pc, #184]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800adfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfc:	f023 020c 	bic.w	r2, r3, #12
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae04:	492b      	ldr	r1, [pc, #172]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ae06:	4313      	orrs	r3, r2
 800ae08:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ae0a:	4b2a      	ldr	r3, [pc, #168]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ae0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0e:	f023 0202 	bic.w	r2, r3, #2
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae16:	4927      	ldr	r1, [pc, #156]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ae1c:	4b25      	ldr	r3, [pc, #148]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ae1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae20:	4a24      	ldr	r2, [pc, #144]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ae22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae28:	4b22      	ldr	r3, [pc, #136]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ae2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2c:	4a21      	ldr	r2, [pc, #132]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ae2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ae34:	4b1f      	ldr	r3, [pc, #124]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ae36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae38:	4a1e      	ldr	r2, [pc, #120]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ae3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ae40:	4b1c      	ldr	r3, [pc, #112]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ae42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae44:	4a1b      	ldr	r2, [pc, #108]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ae46:	f043 0301 	orr.w	r3, r3, #1
 800ae4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae4c:	4b19      	ldr	r3, [pc, #100]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a18      	ldr	r2, [pc, #96]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ae52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae58:	f7f9 f962 	bl	8004120 <HAL_GetTick>
 800ae5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ae5e:	e008      	b.n	800ae72 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae60:	f7f9 f95e 	bl	8004120 <HAL_GetTick>
 800ae64:	4602      	mov	r2, r0
 800ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d901      	bls.n	800ae72 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	e090      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ae72:	4b10      	ldr	r3, [pc, #64]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d0f0      	beq.n	800ae60 <HAL_RCC_OscConfig+0x670>
 800ae7e:	e088      	b.n	800af92 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae80:	4b0c      	ldr	r3, [pc, #48]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a0b      	ldr	r2, [pc, #44]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800ae86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae8c:	f7f9 f948 	bl	8004120 <HAL_GetTick>
 800ae90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae92:	e008      	b.n	800aea6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae94:	f7f9 f944 	bl	8004120 <HAL_GetTick>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9c:	1ad3      	subs	r3, r2, r3
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	d901      	bls.n	800aea6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800aea2:	2303      	movs	r3, #3
 800aea4:	e076      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aea6:	4b03      	ldr	r3, [pc, #12]	; (800aeb4 <HAL_RCC_OscConfig+0x6c4>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1f0      	bne.n	800ae94 <HAL_RCC_OscConfig+0x6a4>
 800aeb2:	e06e      	b.n	800af92 <HAL_RCC_OscConfig+0x7a2>
 800aeb4:	58024400 	.word	0x58024400
 800aeb8:	fffffc0c 	.word	0xfffffc0c
 800aebc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800aec0:	4b36      	ldr	r3, [pc, #216]	; (800af9c <HAL_RCC_OscConfig+0x7ac>)
 800aec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aec6:	4b35      	ldr	r3, [pc, #212]	; (800af9c <HAL_RCC_OscConfig+0x7ac>)
 800aec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d031      	beq.n	800af38 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	f003 0203 	and.w	r2, r3, #3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aede:	429a      	cmp	r2, r3
 800aee0:	d12a      	bne.n	800af38 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	091b      	lsrs	r3, r3, #4
 800aee6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d122      	bne.n	800af38 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aefc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aefe:	429a      	cmp	r2, r3
 800af00:	d11a      	bne.n	800af38 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	0a5b      	lsrs	r3, r3, #9
 800af06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af0e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af10:	429a      	cmp	r2, r3
 800af12:	d111      	bne.n	800af38 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	0c1b      	lsrs	r3, r3, #16
 800af18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af20:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800af22:	429a      	cmp	r2, r3
 800af24:	d108      	bne.n	800af38 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	0e1b      	lsrs	r3, r3, #24
 800af2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af32:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800af34:	429a      	cmp	r2, r3
 800af36:	d001      	beq.n	800af3c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800af38:	2301      	movs	r3, #1
 800af3a:	e02b      	b.n	800af94 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800af3c:	4b17      	ldr	r3, [pc, #92]	; (800af9c <HAL_RCC_OscConfig+0x7ac>)
 800af3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af40:	08db      	lsrs	r3, r3, #3
 800af42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af46:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d01f      	beq.n	800af92 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800af52:	4b12      	ldr	r3, [pc, #72]	; (800af9c <HAL_RCC_OscConfig+0x7ac>)
 800af54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af56:	4a11      	ldr	r2, [pc, #68]	; (800af9c <HAL_RCC_OscConfig+0x7ac>)
 800af58:	f023 0301 	bic.w	r3, r3, #1
 800af5c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800af5e:	f7f9 f8df 	bl	8004120 <HAL_GetTick>
 800af62:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800af64:	bf00      	nop
 800af66:	f7f9 f8db 	bl	8004120 <HAL_GetTick>
 800af6a:	4602      	mov	r2, r0
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6e:	4293      	cmp	r3, r2
 800af70:	d0f9      	beq.n	800af66 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800af72:	4b0a      	ldr	r3, [pc, #40]	; (800af9c <HAL_RCC_OscConfig+0x7ac>)
 800af74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af76:	4b0a      	ldr	r3, [pc, #40]	; (800afa0 <HAL_RCC_OscConfig+0x7b0>)
 800af78:	4013      	ands	r3, r2
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800af7e:	00d2      	lsls	r2, r2, #3
 800af80:	4906      	ldr	r1, [pc, #24]	; (800af9c <HAL_RCC_OscConfig+0x7ac>)
 800af82:	4313      	orrs	r3, r2
 800af84:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800af86:	4b05      	ldr	r3, [pc, #20]	; (800af9c <HAL_RCC_OscConfig+0x7ac>)
 800af88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8a:	4a04      	ldr	r2, [pc, #16]	; (800af9c <HAL_RCC_OscConfig+0x7ac>)
 800af8c:	f043 0301 	orr.w	r3, r3, #1
 800af90:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3730      	adds	r7, #48	; 0x30
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	58024400 	.word	0x58024400
 800afa0:	ffff0007 	.word	0xffff0007

0800afa4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	e19c      	b.n	800b2f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800afb8:	4b8a      	ldr	r3, [pc, #552]	; (800b1e4 <HAL_RCC_ClockConfig+0x240>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 030f 	and.w	r3, r3, #15
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d910      	bls.n	800afe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afc6:	4b87      	ldr	r3, [pc, #540]	; (800b1e4 <HAL_RCC_ClockConfig+0x240>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f023 020f 	bic.w	r2, r3, #15
 800afce:	4985      	ldr	r1, [pc, #532]	; (800b1e4 <HAL_RCC_ClockConfig+0x240>)
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800afd6:	4b83      	ldr	r3, [pc, #524]	; (800b1e4 <HAL_RCC_ClockConfig+0x240>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 030f 	and.w	r3, r3, #15
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d001      	beq.n	800afe8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800afe4:	2301      	movs	r3, #1
 800afe6:	e184      	b.n	800b2f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f003 0304 	and.w	r3, r3, #4
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d010      	beq.n	800b016 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	691a      	ldr	r2, [r3, #16]
 800aff8:	4b7b      	ldr	r3, [pc, #492]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b000:	429a      	cmp	r2, r3
 800b002:	d908      	bls.n	800b016 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b004:	4b78      	ldr	r3, [pc, #480]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	4975      	ldr	r1, [pc, #468]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b012:	4313      	orrs	r3, r2
 800b014:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f003 0308 	and.w	r3, r3, #8
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d010      	beq.n	800b044 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	695a      	ldr	r2, [r3, #20]
 800b026:	4b70      	ldr	r3, [pc, #448]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b028:	69db      	ldr	r3, [r3, #28]
 800b02a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b02e:	429a      	cmp	r2, r3
 800b030:	d908      	bls.n	800b044 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b032:	4b6d      	ldr	r3, [pc, #436]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b034:	69db      	ldr	r3, [r3, #28]
 800b036:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	695b      	ldr	r3, [r3, #20]
 800b03e:	496a      	ldr	r1, [pc, #424]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b040:	4313      	orrs	r3, r2
 800b042:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 0310 	and.w	r3, r3, #16
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d010      	beq.n	800b072 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	699a      	ldr	r2, [r3, #24]
 800b054:	4b64      	ldr	r3, [pc, #400]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b056:	69db      	ldr	r3, [r3, #28]
 800b058:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d908      	bls.n	800b072 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b060:	4b61      	ldr	r3, [pc, #388]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b062:	69db      	ldr	r3, [r3, #28]
 800b064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	699b      	ldr	r3, [r3, #24]
 800b06c:	495e      	ldr	r1, [pc, #376]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b06e:	4313      	orrs	r3, r2
 800b070:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 0320 	and.w	r3, r3, #32
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d010      	beq.n	800b0a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	69da      	ldr	r2, [r3, #28]
 800b082:	4b59      	ldr	r3, [pc, #356]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b084:	6a1b      	ldr	r3, [r3, #32]
 800b086:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d908      	bls.n	800b0a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b08e:	4b56      	ldr	r3, [pc, #344]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b090:	6a1b      	ldr	r3, [r3, #32]
 800b092:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	69db      	ldr	r3, [r3, #28]
 800b09a:	4953      	ldr	r1, [pc, #332]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b09c:	4313      	orrs	r3, r2
 800b09e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f003 0302 	and.w	r3, r3, #2
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d010      	beq.n	800b0ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	68da      	ldr	r2, [r3, #12]
 800b0b0:	4b4d      	ldr	r3, [pc, #308]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	f003 030f 	and.w	r3, r3, #15
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d908      	bls.n	800b0ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0bc:	4b4a      	ldr	r3, [pc, #296]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	f023 020f 	bic.w	r2, r3, #15
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	4947      	ldr	r1, [pc, #284]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f003 0301 	and.w	r3, r3, #1
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d055      	beq.n	800b186 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b0da:	4b43      	ldr	r3, [pc, #268]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b0dc:	699b      	ldr	r3, [r3, #24]
 800b0de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	4940      	ldr	r1, [pc, #256]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	2b02      	cmp	r3, #2
 800b0f2:	d107      	bne.n	800b104 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b0f4:	4b3c      	ldr	r3, [pc, #240]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d121      	bne.n	800b144 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b100:	2301      	movs	r3, #1
 800b102:	e0f6      	b.n	800b2f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	2b03      	cmp	r3, #3
 800b10a:	d107      	bne.n	800b11c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b10c:	4b36      	ldr	r3, [pc, #216]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b114:	2b00      	cmp	r3, #0
 800b116:	d115      	bne.n	800b144 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b118:	2301      	movs	r3, #1
 800b11a:	e0ea      	b.n	800b2f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d107      	bne.n	800b134 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b124:	4b30      	ldr	r3, [pc, #192]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d109      	bne.n	800b144 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	e0de      	b.n	800b2f2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b134:	4b2c      	ldr	r3, [pc, #176]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 0304 	and.w	r3, r3, #4
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d101      	bne.n	800b144 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b140:	2301      	movs	r3, #1
 800b142:	e0d6      	b.n	800b2f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b144:	4b28      	ldr	r3, [pc, #160]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	f023 0207 	bic.w	r2, r3, #7
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	4925      	ldr	r1, [pc, #148]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b152:	4313      	orrs	r3, r2
 800b154:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b156:	f7f8 ffe3 	bl	8004120 <HAL_GetTick>
 800b15a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b15c:	e00a      	b.n	800b174 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b15e:	f7f8 ffdf 	bl	8004120 <HAL_GetTick>
 800b162:	4602      	mov	r2, r0
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	f241 3288 	movw	r2, #5000	; 0x1388
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d901      	bls.n	800b174 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b170:	2303      	movs	r3, #3
 800b172:	e0be      	b.n	800b2f2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b174:	4b1c      	ldr	r3, [pc, #112]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	00db      	lsls	r3, r3, #3
 800b182:	429a      	cmp	r2, r3
 800b184:	d1eb      	bne.n	800b15e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f003 0302 	and.w	r3, r3, #2
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d010      	beq.n	800b1b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	68da      	ldr	r2, [r3, #12]
 800b196:	4b14      	ldr	r3, [pc, #80]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	f003 030f 	and.w	r3, r3, #15
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d208      	bcs.n	800b1b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b1a2:	4b11      	ldr	r3, [pc, #68]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	f023 020f 	bic.w	r2, r3, #15
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	490e      	ldr	r1, [pc, #56]	; (800b1e8 <HAL_RCC_ClockConfig+0x244>)
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b1b4:	4b0b      	ldr	r3, [pc, #44]	; (800b1e4 <HAL_RCC_ClockConfig+0x240>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 030f 	and.w	r3, r3, #15
 800b1bc:	683a      	ldr	r2, [r7, #0]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d214      	bcs.n	800b1ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1c2:	4b08      	ldr	r3, [pc, #32]	; (800b1e4 <HAL_RCC_ClockConfig+0x240>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f023 020f 	bic.w	r2, r3, #15
 800b1ca:	4906      	ldr	r1, [pc, #24]	; (800b1e4 <HAL_RCC_ClockConfig+0x240>)
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1d2:	4b04      	ldr	r3, [pc, #16]	; (800b1e4 <HAL_RCC_ClockConfig+0x240>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f003 030f 	and.w	r3, r3, #15
 800b1da:	683a      	ldr	r2, [r7, #0]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d005      	beq.n	800b1ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e086      	b.n	800b2f2 <HAL_RCC_ClockConfig+0x34e>
 800b1e4:	52002000 	.word	0x52002000
 800b1e8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 0304 	and.w	r3, r3, #4
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d010      	beq.n	800b21a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	691a      	ldr	r2, [r3, #16]
 800b1fc:	4b3f      	ldr	r3, [pc, #252]	; (800b2fc <HAL_RCC_ClockConfig+0x358>)
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b204:	429a      	cmp	r2, r3
 800b206:	d208      	bcs.n	800b21a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b208:	4b3c      	ldr	r3, [pc, #240]	; (800b2fc <HAL_RCC_ClockConfig+0x358>)
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	691b      	ldr	r3, [r3, #16]
 800b214:	4939      	ldr	r1, [pc, #228]	; (800b2fc <HAL_RCC_ClockConfig+0x358>)
 800b216:	4313      	orrs	r3, r2
 800b218:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f003 0308 	and.w	r3, r3, #8
 800b222:	2b00      	cmp	r3, #0
 800b224:	d010      	beq.n	800b248 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	695a      	ldr	r2, [r3, #20]
 800b22a:	4b34      	ldr	r3, [pc, #208]	; (800b2fc <HAL_RCC_ClockConfig+0x358>)
 800b22c:	69db      	ldr	r3, [r3, #28]
 800b22e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b232:	429a      	cmp	r2, r3
 800b234:	d208      	bcs.n	800b248 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b236:	4b31      	ldr	r3, [pc, #196]	; (800b2fc <HAL_RCC_ClockConfig+0x358>)
 800b238:	69db      	ldr	r3, [r3, #28]
 800b23a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	695b      	ldr	r3, [r3, #20]
 800b242:	492e      	ldr	r1, [pc, #184]	; (800b2fc <HAL_RCC_ClockConfig+0x358>)
 800b244:	4313      	orrs	r3, r2
 800b246:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f003 0310 	and.w	r3, r3, #16
 800b250:	2b00      	cmp	r3, #0
 800b252:	d010      	beq.n	800b276 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	699a      	ldr	r2, [r3, #24]
 800b258:	4b28      	ldr	r3, [pc, #160]	; (800b2fc <HAL_RCC_ClockConfig+0x358>)
 800b25a:	69db      	ldr	r3, [r3, #28]
 800b25c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b260:	429a      	cmp	r2, r3
 800b262:	d208      	bcs.n	800b276 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b264:	4b25      	ldr	r3, [pc, #148]	; (800b2fc <HAL_RCC_ClockConfig+0x358>)
 800b266:	69db      	ldr	r3, [r3, #28]
 800b268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	699b      	ldr	r3, [r3, #24]
 800b270:	4922      	ldr	r1, [pc, #136]	; (800b2fc <HAL_RCC_ClockConfig+0x358>)
 800b272:	4313      	orrs	r3, r2
 800b274:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f003 0320 	and.w	r3, r3, #32
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d010      	beq.n	800b2a4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	69da      	ldr	r2, [r3, #28]
 800b286:	4b1d      	ldr	r3, [pc, #116]	; (800b2fc <HAL_RCC_ClockConfig+0x358>)
 800b288:	6a1b      	ldr	r3, [r3, #32]
 800b28a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b28e:	429a      	cmp	r2, r3
 800b290:	d208      	bcs.n	800b2a4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b292:	4b1a      	ldr	r3, [pc, #104]	; (800b2fc <HAL_RCC_ClockConfig+0x358>)
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	69db      	ldr	r3, [r3, #28]
 800b29e:	4917      	ldr	r1, [pc, #92]	; (800b2fc <HAL_RCC_ClockConfig+0x358>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b2a4:	f000 f89e 	bl	800b3e4 <HAL_RCC_GetSysClockFreq>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	4b14      	ldr	r3, [pc, #80]	; (800b2fc <HAL_RCC_ClockConfig+0x358>)
 800b2ac:	699b      	ldr	r3, [r3, #24]
 800b2ae:	0a1b      	lsrs	r3, r3, #8
 800b2b0:	f003 030f 	and.w	r3, r3, #15
 800b2b4:	4912      	ldr	r1, [pc, #72]	; (800b300 <HAL_RCC_ClockConfig+0x35c>)
 800b2b6:	5ccb      	ldrb	r3, [r1, r3]
 800b2b8:	f003 031f 	and.w	r3, r3, #31
 800b2bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b2c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b2c2:	4b0e      	ldr	r3, [pc, #56]	; (800b2fc <HAL_RCC_ClockConfig+0x358>)
 800b2c4:	699b      	ldr	r3, [r3, #24]
 800b2c6:	f003 030f 	and.w	r3, r3, #15
 800b2ca:	4a0d      	ldr	r2, [pc, #52]	; (800b300 <HAL_RCC_ClockConfig+0x35c>)
 800b2cc:	5cd3      	ldrb	r3, [r2, r3]
 800b2ce:	f003 031f 	and.w	r3, r3, #31
 800b2d2:	693a      	ldr	r2, [r7, #16]
 800b2d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d8:	4a0a      	ldr	r2, [pc, #40]	; (800b304 <HAL_RCC_ClockConfig+0x360>)
 800b2da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b2dc:	4a0a      	ldr	r2, [pc, #40]	; (800b308 <HAL_RCC_ClockConfig+0x364>)
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b2e2:	4b0a      	ldr	r3, [pc, #40]	; (800b30c <HAL_RCC_ClockConfig+0x368>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7f8 fed0 	bl	800408c <HAL_InitTick>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3718      	adds	r7, #24
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	58024400 	.word	0x58024400
 800b300:	0801ffb0 	.word	0x0801ffb0
 800b304:	24000004 	.word	0x24000004
 800b308:	24000000 	.word	0x24000000
 800b30c:	24000008 	.word	0x24000008

0800b310 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b08c      	sub	sp, #48	; 0x30
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d12a      	bne.n	800b378 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b322:	4b2d      	ldr	r3, [pc, #180]	; (800b3d8 <HAL_RCC_MCOConfig+0xc8>)
 800b324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b328:	4a2b      	ldr	r2, [pc, #172]	; (800b3d8 <HAL_RCC_MCOConfig+0xc8>)
 800b32a:	f043 0301 	orr.w	r3, r3, #1
 800b32e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b332:	4b29      	ldr	r3, [pc, #164]	; (800b3d8 <HAL_RCC_MCOConfig+0xc8>)
 800b334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b338:	f003 0301 	and.w	r3, r3, #1
 800b33c:	61bb      	str	r3, [r7, #24]
 800b33e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b340:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b346:	2302      	movs	r3, #2
 800b348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b34a:	2303      	movs	r3, #3
 800b34c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b34e:	2300      	movs	r3, #0
 800b350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b352:	2300      	movs	r3, #0
 800b354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b356:	f107 031c 	add.w	r3, r7, #28
 800b35a:	4619      	mov	r1, r3
 800b35c:	481f      	ldr	r0, [pc, #124]	; (800b3dc <HAL_RCC_MCOConfig+0xcc>)
 800b35e:	f7fd fc29 	bl	8008bb4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b362:	4b1d      	ldr	r3, [pc, #116]	; (800b3d8 <HAL_RCC_MCOConfig+0xc8>)
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b36a:	68b9      	ldr	r1, [r7, #8]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	430b      	orrs	r3, r1
 800b370:	4919      	ldr	r1, [pc, #100]	; (800b3d8 <HAL_RCC_MCOConfig+0xc8>)
 800b372:	4313      	orrs	r3, r2
 800b374:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b376:	e02a      	b.n	800b3ce <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b378:	4b17      	ldr	r3, [pc, #92]	; (800b3d8 <HAL_RCC_MCOConfig+0xc8>)
 800b37a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b37e:	4a16      	ldr	r2, [pc, #88]	; (800b3d8 <HAL_RCC_MCOConfig+0xc8>)
 800b380:	f043 0304 	orr.w	r3, r3, #4
 800b384:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b388:	4b13      	ldr	r3, [pc, #76]	; (800b3d8 <HAL_RCC_MCOConfig+0xc8>)
 800b38a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b38e:	f003 0304 	and.w	r3, r3, #4
 800b392:	617b      	str	r3, [r7, #20]
 800b394:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b39a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b39c:	2302      	movs	r3, #2
 800b39e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3a0:	2303      	movs	r3, #3
 800b3a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b3ac:	f107 031c 	add.w	r3, r7, #28
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	480b      	ldr	r0, [pc, #44]	; (800b3e0 <HAL_RCC_MCOConfig+0xd0>)
 800b3b4:	f7fd fbfe 	bl	8008bb4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b3b8:	4b07      	ldr	r3, [pc, #28]	; (800b3d8 <HAL_RCC_MCOConfig+0xc8>)
 800b3ba:	691b      	ldr	r3, [r3, #16]
 800b3bc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	01d9      	lsls	r1, r3, #7
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	430b      	orrs	r3, r1
 800b3c8:	4903      	ldr	r1, [pc, #12]	; (800b3d8 <HAL_RCC_MCOConfig+0xc8>)
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	610b      	str	r3, [r1, #16]
}
 800b3ce:	bf00      	nop
 800b3d0:	3730      	adds	r7, #48	; 0x30
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	58024400 	.word	0x58024400
 800b3dc:	58020000 	.word	0x58020000
 800b3e0:	58020800 	.word	0x58020800

0800b3e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b089      	sub	sp, #36	; 0x24
 800b3e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3ea:	4bb3      	ldr	r3, [pc, #716]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3f2:	2b18      	cmp	r3, #24
 800b3f4:	f200 8155 	bhi.w	800b6a2 <HAL_RCC_GetSysClockFreq+0x2be>
 800b3f8:	a201      	add	r2, pc, #4	; (adr r2, 800b400 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fe:	bf00      	nop
 800b400:	0800b465 	.word	0x0800b465
 800b404:	0800b6a3 	.word	0x0800b6a3
 800b408:	0800b6a3 	.word	0x0800b6a3
 800b40c:	0800b6a3 	.word	0x0800b6a3
 800b410:	0800b6a3 	.word	0x0800b6a3
 800b414:	0800b6a3 	.word	0x0800b6a3
 800b418:	0800b6a3 	.word	0x0800b6a3
 800b41c:	0800b6a3 	.word	0x0800b6a3
 800b420:	0800b48b 	.word	0x0800b48b
 800b424:	0800b6a3 	.word	0x0800b6a3
 800b428:	0800b6a3 	.word	0x0800b6a3
 800b42c:	0800b6a3 	.word	0x0800b6a3
 800b430:	0800b6a3 	.word	0x0800b6a3
 800b434:	0800b6a3 	.word	0x0800b6a3
 800b438:	0800b6a3 	.word	0x0800b6a3
 800b43c:	0800b6a3 	.word	0x0800b6a3
 800b440:	0800b491 	.word	0x0800b491
 800b444:	0800b6a3 	.word	0x0800b6a3
 800b448:	0800b6a3 	.word	0x0800b6a3
 800b44c:	0800b6a3 	.word	0x0800b6a3
 800b450:	0800b6a3 	.word	0x0800b6a3
 800b454:	0800b6a3 	.word	0x0800b6a3
 800b458:	0800b6a3 	.word	0x0800b6a3
 800b45c:	0800b6a3 	.word	0x0800b6a3
 800b460:	0800b497 	.word	0x0800b497
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b464:	4b94      	ldr	r3, [pc, #592]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f003 0320 	and.w	r3, r3, #32
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d009      	beq.n	800b484 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b470:	4b91      	ldr	r3, [pc, #580]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	08db      	lsrs	r3, r3, #3
 800b476:	f003 0303 	and.w	r3, r3, #3
 800b47a:	4a90      	ldr	r2, [pc, #576]	; (800b6bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b47c:	fa22 f303 	lsr.w	r3, r2, r3
 800b480:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b482:	e111      	b.n	800b6a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b484:	4b8d      	ldr	r3, [pc, #564]	; (800b6bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b486:	61bb      	str	r3, [r7, #24]
      break;
 800b488:	e10e      	b.n	800b6a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b48a:	4b8d      	ldr	r3, [pc, #564]	; (800b6c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b48c:	61bb      	str	r3, [r7, #24]
      break;
 800b48e:	e10b      	b.n	800b6a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b490:	4b8c      	ldr	r3, [pc, #560]	; (800b6c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b492:	61bb      	str	r3, [r7, #24]
      break;
 800b494:	e108      	b.n	800b6a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b496:	4b88      	ldr	r3, [pc, #544]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b49a:	f003 0303 	and.w	r3, r3, #3
 800b49e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b4a0:	4b85      	ldr	r3, [pc, #532]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a4:	091b      	lsrs	r3, r3, #4
 800b4a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b4ac:	4b82      	ldr	r3, [pc, #520]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b0:	f003 0301 	and.w	r3, r3, #1
 800b4b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b4b6:	4b80      	ldr	r3, [pc, #512]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ba:	08db      	lsrs	r3, r3, #3
 800b4bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	fb02 f303 	mul.w	r3, r2, r3
 800b4c6:	ee07 3a90 	vmov	s15, r3
 800b4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f000 80e1 	beq.w	800b69c <HAL_RCC_GetSysClockFreq+0x2b8>
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	f000 8083 	beq.w	800b5e8 <HAL_RCC_GetSysClockFreq+0x204>
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	2b02      	cmp	r3, #2
 800b4e6:	f200 80a1 	bhi.w	800b62c <HAL_RCC_GetSysClockFreq+0x248>
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d003      	beq.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x114>
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d056      	beq.n	800b5a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b4f6:	e099      	b.n	800b62c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4f8:	4b6f      	ldr	r3, [pc, #444]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f003 0320 	and.w	r3, r3, #32
 800b500:	2b00      	cmp	r3, #0
 800b502:	d02d      	beq.n	800b560 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b504:	4b6c      	ldr	r3, [pc, #432]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	08db      	lsrs	r3, r3, #3
 800b50a:	f003 0303 	and.w	r3, r3, #3
 800b50e:	4a6b      	ldr	r2, [pc, #428]	; (800b6bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b510:	fa22 f303 	lsr.w	r3, r2, r3
 800b514:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	ee07 3a90 	vmov	s15, r3
 800b51c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	ee07 3a90 	vmov	s15, r3
 800b526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b52a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b52e:	4b62      	ldr	r3, [pc, #392]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b536:	ee07 3a90 	vmov	s15, r3
 800b53a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b53e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b542:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b6c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b54a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b54e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b55a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b55e:	e087      	b.n	800b670 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	ee07 3a90 	vmov	s15, r3
 800b566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b56a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b6cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800b56e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b572:	4b51      	ldr	r3, [pc, #324]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b57a:	ee07 3a90 	vmov	s15, r3
 800b57e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b582:	ed97 6a02 	vldr	s12, [r7, #8]
 800b586:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b6c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b58a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b58e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b59a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b59e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b5a2:	e065      	b.n	800b670 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	ee07 3a90 	vmov	s15, r3
 800b5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b6d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b5b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5b6:	4b40      	ldr	r3, [pc, #256]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5be:	ee07 3a90 	vmov	s15, r3
 800b5c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b6c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b5e6:	e043      	b.n	800b670 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	ee07 3a90 	vmov	s15, r3
 800b5ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b6d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b5f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5fa:	4b2f      	ldr	r3, [pc, #188]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b602:	ee07 3a90 	vmov	s15, r3
 800b606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b60a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b60e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b6c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b61a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b61e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b622:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b626:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b62a:	e021      	b.n	800b670 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	ee07 3a90 	vmov	s15, r3
 800b632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b636:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b6d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b63a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b63e:	4b1e      	ldr	r3, [pc, #120]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b646:	ee07 3a90 	vmov	s15, r3
 800b64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b64e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b652:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b6c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b65e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b66a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b66e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b670:	4b11      	ldr	r3, [pc, #68]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b674:	0a5b      	lsrs	r3, r3, #9
 800b676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b67a:	3301      	adds	r3, #1
 800b67c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	ee07 3a90 	vmov	s15, r3
 800b684:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b688:	edd7 6a07 	vldr	s13, [r7, #28]
 800b68c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b694:	ee17 3a90 	vmov	r3, s15
 800b698:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b69a:	e005      	b.n	800b6a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b69c:	2300      	movs	r3, #0
 800b69e:	61bb      	str	r3, [r7, #24]
      break;
 800b6a0:	e002      	b.n	800b6a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b6a2:	4b07      	ldr	r3, [pc, #28]	; (800b6c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b6a4:	61bb      	str	r3, [r7, #24]
      break;
 800b6a6:	bf00      	nop
  }

  return sysclockfreq;
 800b6a8:	69bb      	ldr	r3, [r7, #24]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3724      	adds	r7, #36	; 0x24
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	58024400 	.word	0x58024400
 800b6bc:	03d09000 	.word	0x03d09000
 800b6c0:	003d0900 	.word	0x003d0900
 800b6c4:	02faf080 	.word	0x02faf080
 800b6c8:	46000000 	.word	0x46000000
 800b6cc:	4c742400 	.word	0x4c742400
 800b6d0:	4a742400 	.word	0x4a742400
 800b6d4:	4c3ebc20 	.word	0x4c3ebc20

0800b6d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b6de:	f7ff fe81 	bl	800b3e4 <HAL_RCC_GetSysClockFreq>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	4b10      	ldr	r3, [pc, #64]	; (800b728 <HAL_RCC_GetHCLKFreq+0x50>)
 800b6e6:	699b      	ldr	r3, [r3, #24]
 800b6e8:	0a1b      	lsrs	r3, r3, #8
 800b6ea:	f003 030f 	and.w	r3, r3, #15
 800b6ee:	490f      	ldr	r1, [pc, #60]	; (800b72c <HAL_RCC_GetHCLKFreq+0x54>)
 800b6f0:	5ccb      	ldrb	r3, [r1, r3]
 800b6f2:	f003 031f 	and.w	r3, r3, #31
 800b6f6:	fa22 f303 	lsr.w	r3, r2, r3
 800b6fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6fc:	4b0a      	ldr	r3, [pc, #40]	; (800b728 <HAL_RCC_GetHCLKFreq+0x50>)
 800b6fe:	699b      	ldr	r3, [r3, #24]
 800b700:	f003 030f 	and.w	r3, r3, #15
 800b704:	4a09      	ldr	r2, [pc, #36]	; (800b72c <HAL_RCC_GetHCLKFreq+0x54>)
 800b706:	5cd3      	ldrb	r3, [r2, r3]
 800b708:	f003 031f 	and.w	r3, r3, #31
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	fa22 f303 	lsr.w	r3, r2, r3
 800b712:	4a07      	ldr	r2, [pc, #28]	; (800b730 <HAL_RCC_GetHCLKFreq+0x58>)
 800b714:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b716:	4a07      	ldr	r2, [pc, #28]	; (800b734 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b71c:	4b04      	ldr	r3, [pc, #16]	; (800b730 <HAL_RCC_GetHCLKFreq+0x58>)
 800b71e:	681b      	ldr	r3, [r3, #0]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3708      	adds	r7, #8
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	58024400 	.word	0x58024400
 800b72c:	0801ffb0 	.word	0x0801ffb0
 800b730:	24000004 	.word	0x24000004
 800b734:	24000000 	.word	0x24000000

0800b738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b73c:	f7ff ffcc 	bl	800b6d8 <HAL_RCC_GetHCLKFreq>
 800b740:	4602      	mov	r2, r0
 800b742:	4b06      	ldr	r3, [pc, #24]	; (800b75c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b744:	69db      	ldr	r3, [r3, #28]
 800b746:	091b      	lsrs	r3, r3, #4
 800b748:	f003 0307 	and.w	r3, r3, #7
 800b74c:	4904      	ldr	r1, [pc, #16]	; (800b760 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b74e:	5ccb      	ldrb	r3, [r1, r3]
 800b750:	f003 031f 	and.w	r3, r3, #31
 800b754:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b758:	4618      	mov	r0, r3
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	58024400 	.word	0x58024400
 800b760:	0801ffb0 	.word	0x0801ffb0

0800b764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b768:	f7ff ffb6 	bl	800b6d8 <HAL_RCC_GetHCLKFreq>
 800b76c:	4602      	mov	r2, r0
 800b76e:	4b06      	ldr	r3, [pc, #24]	; (800b788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b770:	69db      	ldr	r3, [r3, #28]
 800b772:	0a1b      	lsrs	r3, r3, #8
 800b774:	f003 0307 	and.w	r3, r3, #7
 800b778:	4904      	ldr	r1, [pc, #16]	; (800b78c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b77a:	5ccb      	ldrb	r3, [r1, r3]
 800b77c:	f003 031f 	and.w	r3, r3, #31
 800b780:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b784:	4618      	mov	r0, r3
 800b786:	bd80      	pop	{r7, pc}
 800b788:	58024400 	.word	0x58024400
 800b78c:	0801ffb0 	.word	0x0801ffb0

0800b790 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b794:	b0c6      	sub	sp, #280	; 0x118
 800b796:	af00      	add	r7, sp, #0
 800b798:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b79c:	2300      	movs	r3, #0
 800b79e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b7b4:	2500      	movs	r5, #0
 800b7b6:	ea54 0305 	orrs.w	r3, r4, r5
 800b7ba:	d049      	beq.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7c6:	d02f      	beq.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b7c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7cc:	d828      	bhi.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b7ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7d2:	d01a      	beq.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b7d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7d8:	d822      	bhi.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b7de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7e2:	d007      	beq.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b7e4:	e01c      	b.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7e6:	4bab      	ldr	r3, [pc, #684]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ea:	4aaa      	ldr	r2, [pc, #680]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b7f2:	e01a      	b.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f8:	3308      	adds	r3, #8
 800b7fa:	2102      	movs	r1, #2
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f002 fa49 	bl	800dc94 <RCCEx_PLL2_Config>
 800b802:	4603      	mov	r3, r0
 800b804:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b808:	e00f      	b.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b80e:	3328      	adds	r3, #40	; 0x28
 800b810:	2102      	movs	r1, #2
 800b812:	4618      	mov	r0, r3
 800b814:	f002 faf0 	bl	800ddf8 <RCCEx_PLL3_Config>
 800b818:	4603      	mov	r3, r0
 800b81a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b81e:	e004      	b.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b820:	2301      	movs	r3, #1
 800b822:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b826:	e000      	b.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b82a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10a      	bne.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b832:	4b98      	ldr	r3, [pc, #608]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b836:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b83e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b840:	4a94      	ldr	r2, [pc, #592]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b842:	430b      	orrs	r3, r1
 800b844:	6513      	str	r3, [r2, #80]	; 0x50
 800b846:	e003      	b.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b848:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b84c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b858:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b85c:	f04f 0900 	mov.w	r9, #0
 800b860:	ea58 0309 	orrs.w	r3, r8, r9
 800b864:	d047      	beq.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b86a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b86c:	2b04      	cmp	r3, #4
 800b86e:	d82a      	bhi.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b870:	a201      	add	r2, pc, #4	; (adr r2, 800b878 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b876:	bf00      	nop
 800b878:	0800b88d 	.word	0x0800b88d
 800b87c:	0800b89b 	.word	0x0800b89b
 800b880:	0800b8b1 	.word	0x0800b8b1
 800b884:	0800b8cf 	.word	0x0800b8cf
 800b888:	0800b8cf 	.word	0x0800b8cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b88c:	4b81      	ldr	r3, [pc, #516]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b890:	4a80      	ldr	r2, [pc, #512]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b898:	e01a      	b.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b89a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89e:	3308      	adds	r3, #8
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f002 f9f6 	bl	800dc94 <RCCEx_PLL2_Config>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b8ae:	e00f      	b.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8b4:	3328      	adds	r3, #40	; 0x28
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f002 fa9d 	bl	800ddf8 <RCCEx_PLL3_Config>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b8c4:	e004      	b.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8cc:	e000      	b.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b8ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d10a      	bne.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b8d8:	4b6e      	ldr	r3, [pc, #440]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8dc:	f023 0107 	bic.w	r1, r3, #7
 800b8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8e6:	4a6b      	ldr	r2, [pc, #428]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8e8:	430b      	orrs	r3, r1
 800b8ea:	6513      	str	r3, [r2, #80]	; 0x50
 800b8ec:	e003      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8f2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fe:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800b902:	f04f 0b00 	mov.w	fp, #0
 800b906:	ea5a 030b 	orrs.w	r3, sl, fp
 800b90a:	d05b      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b910:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b914:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b918:	d03b      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b91a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b91e:	d834      	bhi.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b920:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b924:	d037      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b926:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b92a:	d82e      	bhi.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b92c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b930:	d033      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b932:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b936:	d828      	bhi.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b93c:	d01a      	beq.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b93e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b942:	d822      	bhi.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b944:	2b00      	cmp	r3, #0
 800b946:	d003      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b948:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b94c:	d007      	beq.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b94e:	e01c      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b950:	4b50      	ldr	r3, [pc, #320]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b954:	4a4f      	ldr	r2, [pc, #316]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b95a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b95c:	e01e      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b95e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b962:	3308      	adds	r3, #8
 800b964:	2100      	movs	r1, #0
 800b966:	4618      	mov	r0, r3
 800b968:	f002 f994 	bl	800dc94 <RCCEx_PLL2_Config>
 800b96c:	4603      	mov	r3, r0
 800b96e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b972:	e013      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b978:	3328      	adds	r3, #40	; 0x28
 800b97a:	2100      	movs	r1, #0
 800b97c:	4618      	mov	r0, r3
 800b97e:	f002 fa3b 	bl	800ddf8 <RCCEx_PLL3_Config>
 800b982:	4603      	mov	r3, r0
 800b984:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b988:	e008      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b990:	e004      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b992:	bf00      	nop
 800b994:	e002      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b996:	bf00      	nop
 800b998:	e000      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b99a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b99c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d10b      	bne.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b9a4:	4b3b      	ldr	r3, [pc, #236]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9a8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b9b4:	4a37      	ldr	r2, [pc, #220]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9b6:	430b      	orrs	r3, r1
 800b9b8:	6593      	str	r3, [r2, #88]	; 0x58
 800b9ba:	e003      	b.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9cc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b9d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b9da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b9de:	460b      	mov	r3, r1
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	d05d      	beq.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b9ec:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b9f0:	d03b      	beq.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b9f2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b9f6:	d834      	bhi.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b9f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9fc:	d037      	beq.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b9fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba02:	d82e      	bhi.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ba04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba08:	d033      	beq.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800ba0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba0e:	d828      	bhi.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ba10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba14:	d01a      	beq.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800ba16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba1a:	d822      	bhi.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d003      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ba20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba24:	d007      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ba26:	e01c      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba28:	4b1a      	ldr	r3, [pc, #104]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba2c:	4a19      	ldr	r2, [pc, #100]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba34:	e01e      	b.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba3a:	3308      	adds	r3, #8
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f002 f928 	bl	800dc94 <RCCEx_PLL2_Config>
 800ba44:	4603      	mov	r3, r0
 800ba46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ba4a:	e013      	b.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba50:	3328      	adds	r3, #40	; 0x28
 800ba52:	2100      	movs	r1, #0
 800ba54:	4618      	mov	r0, r3
 800ba56:	f002 f9cf 	bl	800ddf8 <RCCEx_PLL3_Config>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba60:	e008      	b.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ba62:	2301      	movs	r3, #1
 800ba64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba68:	e004      	b.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ba6a:	bf00      	nop
 800ba6c:	e002      	b.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ba6e:	bf00      	nop
 800ba70:	e000      	b.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ba72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10d      	bne.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ba7c:	4b05      	ldr	r3, [pc, #20]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba80:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ba84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ba8c:	4a01      	ldr	r2, [pc, #4]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba8e:	430b      	orrs	r3, r1
 800ba90:	6593      	str	r3, [r2, #88]	; 0x58
 800ba92:	e005      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ba94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800baa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800baac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bab0:	2300      	movs	r3, #0
 800bab2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bab6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800baba:	460b      	mov	r3, r1
 800babc:	4313      	orrs	r3, r2
 800babe:	d03a      	beq.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bac6:	2b30      	cmp	r3, #48	; 0x30
 800bac8:	d01f      	beq.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800baca:	2b30      	cmp	r3, #48	; 0x30
 800bacc:	d819      	bhi.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bace:	2b20      	cmp	r3, #32
 800bad0:	d00c      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bad2:	2b20      	cmp	r3, #32
 800bad4:	d815      	bhi.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d019      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bada:	2b10      	cmp	r3, #16
 800badc:	d111      	bne.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bade:	4baa      	ldr	r3, [pc, #680]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae2:	4aa9      	ldr	r2, [pc, #676]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bae8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800baea:	e011      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800baec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf0:	3308      	adds	r3, #8
 800baf2:	2102      	movs	r1, #2
 800baf4:	4618      	mov	r0, r3
 800baf6:	f002 f8cd 	bl	800dc94 <RCCEx_PLL2_Config>
 800bafa:	4603      	mov	r3, r0
 800bafc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bb00:	e006      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb08:	e002      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bb0a:	bf00      	nop
 800bb0c:	e000      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bb0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d10a      	bne.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bb18:	4b9b      	ldr	r3, [pc, #620]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb1c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800bb20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb26:	4a98      	ldr	r2, [pc, #608]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb28:	430b      	orrs	r3, r1
 800bb2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bb2c:	e003      	b.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb32:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bb36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800bb42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bb46:	2300      	movs	r3, #0
 800bb48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bb4c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800bb50:	460b      	mov	r3, r1
 800bb52:	4313      	orrs	r3, r2
 800bb54:	d051      	beq.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bb56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb60:	d035      	beq.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bb62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb66:	d82e      	bhi.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bb68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb6c:	d031      	beq.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bb6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb72:	d828      	bhi.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bb74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb78:	d01a      	beq.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bb7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb7e:	d822      	bhi.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d003      	beq.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bb84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb88:	d007      	beq.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bb8a:	e01c      	b.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb8c:	4b7e      	ldr	r3, [pc, #504]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb90:	4a7d      	ldr	r2, [pc, #500]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bb98:	e01c      	b.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb9e:	3308      	adds	r3, #8
 800bba0:	2100      	movs	r1, #0
 800bba2:	4618      	mov	r0, r3
 800bba4:	f002 f876 	bl	800dc94 <RCCEx_PLL2_Config>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bbae:	e011      	b.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bbb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbb4:	3328      	adds	r3, #40	; 0x28
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f002 f91d 	bl	800ddf8 <RCCEx_PLL3_Config>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bbc4:	e006      	b.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bbcc:	e002      	b.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bbce:	bf00      	nop
 800bbd0:	e000      	b.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bbd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d10a      	bne.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bbdc:	4b6a      	ldr	r3, [pc, #424]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbe0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800bbe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbea:	4a67      	ldr	r2, [pc, #412]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbec:	430b      	orrs	r3, r1
 800bbee:	6513      	str	r3, [r2, #80]	; 0x50
 800bbf0:	e003      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbf2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbf6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bbfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc02:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bc06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bc10:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bc14:	460b      	mov	r3, r1
 800bc16:	4313      	orrs	r3, r2
 800bc18:	d053      	beq.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bc1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc24:	d033      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bc26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc2a:	d82c      	bhi.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bc2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc30:	d02f      	beq.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bc32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc36:	d826      	bhi.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bc38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc3c:	d02b      	beq.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bc3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc42:	d820      	bhi.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bc44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc48:	d012      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bc4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc4e:	d81a      	bhi.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d022      	beq.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800bc54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc58:	d115      	bne.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc5e:	3308      	adds	r3, #8
 800bc60:	2101      	movs	r1, #1
 800bc62:	4618      	mov	r0, r3
 800bc64:	f002 f816 	bl	800dc94 <RCCEx_PLL2_Config>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bc6e:	e015      	b.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc74:	3328      	adds	r3, #40	; 0x28
 800bc76:	2101      	movs	r1, #1
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f002 f8bd 	bl	800ddf8 <RCCEx_PLL3_Config>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bc84:	e00a      	b.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc86:	2301      	movs	r3, #1
 800bc88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc8c:	e006      	b.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bc8e:	bf00      	nop
 800bc90:	e004      	b.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bc92:	bf00      	nop
 800bc94:	e002      	b.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bc96:	bf00      	nop
 800bc98:	e000      	b.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bc9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d10a      	bne.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bca4:	4b38      	ldr	r3, [pc, #224]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bca8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bcac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcb2:	4a35      	ldr	r2, [pc, #212]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcb4:	430b      	orrs	r3, r1
 800bcb6:	6513      	str	r3, [r2, #80]	; 0x50
 800bcb8:	e003      	b.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcbe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bcc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcca:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800bcce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bcd8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4313      	orrs	r3, r2
 800bce0:	d058      	beq.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bce6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bcea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bcee:	d033      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bcf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bcf4:	d82c      	bhi.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bcf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcfa:	d02f      	beq.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bcfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd00:	d826      	bhi.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bd02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd06:	d02b      	beq.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bd08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd0c:	d820      	bhi.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bd0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd12:	d012      	beq.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bd14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd18:	d81a      	bhi.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d022      	beq.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bd1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd22:	d115      	bne.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd28:	3308      	adds	r3, #8
 800bd2a:	2101      	movs	r1, #1
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f001 ffb1 	bl	800dc94 <RCCEx_PLL2_Config>
 800bd32:	4603      	mov	r3, r0
 800bd34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bd38:	e015      	b.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd3e:	3328      	adds	r3, #40	; 0x28
 800bd40:	2101      	movs	r1, #1
 800bd42:	4618      	mov	r0, r3
 800bd44:	f002 f858 	bl	800ddf8 <RCCEx_PLL3_Config>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bd4e:	e00a      	b.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bd50:	2301      	movs	r3, #1
 800bd52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bd56:	e006      	b.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd58:	bf00      	nop
 800bd5a:	e004      	b.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd5c:	bf00      	nop
 800bd5e:	e002      	b.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd60:	bf00      	nop
 800bd62:	e000      	b.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10e      	bne.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bd6e:	4b06      	ldr	r3, [pc, #24]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd72:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bd76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bd7e:	4a02      	ldr	r2, [pc, #8]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd80:	430b      	orrs	r3, r1
 800bd82:	6593      	str	r3, [r2, #88]	; 0x58
 800bd84:	e006      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bd86:	bf00      	nop
 800bd88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bd94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bda0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bda4:	2300      	movs	r3, #0
 800bda6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bdaa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	d037      	beq.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bdb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdbe:	d00e      	beq.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bdc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdc4:	d816      	bhi.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d018      	beq.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bdca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdce:	d111      	bne.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdd0:	4bc4      	ldr	r3, [pc, #784]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd4:	4ac3      	ldr	r2, [pc, #780]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bddc:	e00f      	b.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bdde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bde2:	3308      	adds	r3, #8
 800bde4:	2101      	movs	r1, #1
 800bde6:	4618      	mov	r0, r3
 800bde8:	f001 ff54 	bl	800dc94 <RCCEx_PLL2_Config>
 800bdec:	4603      	mov	r3, r0
 800bdee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bdf2:	e004      	b.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bdfa:	e000      	b.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bdfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdfe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be02:	2b00      	cmp	r3, #0
 800be04:	d10a      	bne.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800be06:	4bb7      	ldr	r3, [pc, #732]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be0a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800be0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be14:	4ab3      	ldr	r2, [pc, #716]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be16:	430b      	orrs	r3, r1
 800be18:	6513      	str	r3, [r2, #80]	; 0x50
 800be1a:	e003      	b.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800be24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800be30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be34:	2300      	movs	r3, #0
 800be36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800be3a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800be3e:	460b      	mov	r3, r1
 800be40:	4313      	orrs	r3, r2
 800be42:	d039      	beq.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800be44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be4a:	2b03      	cmp	r3, #3
 800be4c:	d81c      	bhi.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800be4e:	a201      	add	r2, pc, #4	; (adr r2, 800be54 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800be50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be54:	0800be91 	.word	0x0800be91
 800be58:	0800be65 	.word	0x0800be65
 800be5c:	0800be73 	.word	0x0800be73
 800be60:	0800be91 	.word	0x0800be91
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be64:	4b9f      	ldr	r3, [pc, #636]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be68:	4a9e      	ldr	r2, [pc, #632]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800be70:	e00f      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be76:	3308      	adds	r3, #8
 800be78:	2102      	movs	r1, #2
 800be7a:	4618      	mov	r0, r3
 800be7c:	f001 ff0a 	bl	800dc94 <RCCEx_PLL2_Config>
 800be80:	4603      	mov	r3, r0
 800be82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800be86:	e004      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800be8e:	e000      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800be90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10a      	bne.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800be9a:	4b92      	ldr	r3, [pc, #584]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be9e:	f023 0103 	bic.w	r1, r3, #3
 800bea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bea8:	4a8e      	ldr	r2, [pc, #568]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800beaa:	430b      	orrs	r3, r1
 800beac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800beae:	e003      	b.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800beb4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800beb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bec4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bec8:	2300      	movs	r3, #0
 800beca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bece:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bed2:	460b      	mov	r3, r1
 800bed4:	4313      	orrs	r3, r2
 800bed6:	f000 8099 	beq.w	800c00c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800beda:	4b83      	ldr	r3, [pc, #524]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4a82      	ldr	r2, [pc, #520]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bee4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bee6:	f7f8 f91b 	bl	8004120 <HAL_GetTick>
 800beea:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800beee:	e00b      	b.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bef0:	f7f8 f916 	bl	8004120 <HAL_GetTick>
 800bef4:	4602      	mov	r2, r0
 800bef6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	2b64      	cmp	r3, #100	; 0x64
 800befe:	d903      	bls.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bf00:	2303      	movs	r3, #3
 800bf02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bf06:	e005      	b.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf08:	4b77      	ldr	r3, [pc, #476]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d0ed      	beq.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bf14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d173      	bne.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bf1c:	4b71      	ldr	r3, [pc, #452]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bf20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bf28:	4053      	eors	r3, r2
 800bf2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d015      	beq.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bf32:	4b6c      	ldr	r3, [pc, #432]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bf3e:	4b69      	ldr	r3, [pc, #420]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf42:	4a68      	ldr	r2, [pc, #416]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf48:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bf4a:	4b66      	ldr	r3, [pc, #408]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf4e:	4a65      	ldr	r2, [pc, #404]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf54:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bf56:	4a63      	ldr	r2, [pc, #396]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bf5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bf66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf6a:	d118      	bne.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf6c:	f7f8 f8d8 	bl	8004120 <HAL_GetTick>
 800bf70:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf74:	e00d      	b.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf76:	f7f8 f8d3 	bl	8004120 <HAL_GetTick>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bf80:	1ad2      	subs	r2, r2, r3
 800bf82:	f241 3388 	movw	r3, #5000	; 0x1388
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d903      	bls.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800bf90:	e005      	b.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf92:	4b54      	ldr	r3, [pc, #336]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf96:	f003 0302 	and.w	r3, r3, #2
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d0eb      	beq.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bf9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d129      	bne.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bfa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bfae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfb6:	d10e      	bne.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bfb8:	4b4a      	ldr	r3, [pc, #296]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bfc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bfc8:	091a      	lsrs	r2, r3, #4
 800bfca:	4b48      	ldr	r3, [pc, #288]	; (800c0ec <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bfcc:	4013      	ands	r3, r2
 800bfce:	4a45      	ldr	r2, [pc, #276]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfd0:	430b      	orrs	r3, r1
 800bfd2:	6113      	str	r3, [r2, #16]
 800bfd4:	e005      	b.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bfd6:	4b43      	ldr	r3, [pc, #268]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfd8:	691b      	ldr	r3, [r3, #16]
 800bfda:	4a42      	ldr	r2, [pc, #264]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bfe0:	6113      	str	r3, [r2, #16]
 800bfe2:	4b40      	ldr	r3, [pc, #256]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfe4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bfe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bfee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bff2:	4a3c      	ldr	r2, [pc, #240]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bff4:	430b      	orrs	r3, r1
 800bff6:	6713      	str	r3, [r2, #112]	; 0x70
 800bff8:	e008      	b.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bffa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bffe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800c002:	e003      	b.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c004:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c008:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c00c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c014:	f002 0301 	and.w	r3, r2, #1
 800c018:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c01c:	2300      	movs	r3, #0
 800c01e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c022:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c026:	460b      	mov	r3, r1
 800c028:	4313      	orrs	r3, r2
 800c02a:	f000 808f 	beq.w	800c14c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c034:	2b28      	cmp	r3, #40	; 0x28
 800c036:	d871      	bhi.n	800c11c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c038:	a201      	add	r2, pc, #4	; (adr r2, 800c040 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c03e:	bf00      	nop
 800c040:	0800c125 	.word	0x0800c125
 800c044:	0800c11d 	.word	0x0800c11d
 800c048:	0800c11d 	.word	0x0800c11d
 800c04c:	0800c11d 	.word	0x0800c11d
 800c050:	0800c11d 	.word	0x0800c11d
 800c054:	0800c11d 	.word	0x0800c11d
 800c058:	0800c11d 	.word	0x0800c11d
 800c05c:	0800c11d 	.word	0x0800c11d
 800c060:	0800c0f1 	.word	0x0800c0f1
 800c064:	0800c11d 	.word	0x0800c11d
 800c068:	0800c11d 	.word	0x0800c11d
 800c06c:	0800c11d 	.word	0x0800c11d
 800c070:	0800c11d 	.word	0x0800c11d
 800c074:	0800c11d 	.word	0x0800c11d
 800c078:	0800c11d 	.word	0x0800c11d
 800c07c:	0800c11d 	.word	0x0800c11d
 800c080:	0800c107 	.word	0x0800c107
 800c084:	0800c11d 	.word	0x0800c11d
 800c088:	0800c11d 	.word	0x0800c11d
 800c08c:	0800c11d 	.word	0x0800c11d
 800c090:	0800c11d 	.word	0x0800c11d
 800c094:	0800c11d 	.word	0x0800c11d
 800c098:	0800c11d 	.word	0x0800c11d
 800c09c:	0800c11d 	.word	0x0800c11d
 800c0a0:	0800c125 	.word	0x0800c125
 800c0a4:	0800c11d 	.word	0x0800c11d
 800c0a8:	0800c11d 	.word	0x0800c11d
 800c0ac:	0800c11d 	.word	0x0800c11d
 800c0b0:	0800c11d 	.word	0x0800c11d
 800c0b4:	0800c11d 	.word	0x0800c11d
 800c0b8:	0800c11d 	.word	0x0800c11d
 800c0bc:	0800c11d 	.word	0x0800c11d
 800c0c0:	0800c125 	.word	0x0800c125
 800c0c4:	0800c11d 	.word	0x0800c11d
 800c0c8:	0800c11d 	.word	0x0800c11d
 800c0cc:	0800c11d 	.word	0x0800c11d
 800c0d0:	0800c11d 	.word	0x0800c11d
 800c0d4:	0800c11d 	.word	0x0800c11d
 800c0d8:	0800c11d 	.word	0x0800c11d
 800c0dc:	0800c11d 	.word	0x0800c11d
 800c0e0:	0800c125 	.word	0x0800c125
 800c0e4:	58024400 	.word	0x58024400
 800c0e8:	58024800 	.word	0x58024800
 800c0ec:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0f4:	3308      	adds	r3, #8
 800c0f6:	2101      	movs	r1, #1
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f001 fdcb 	bl	800dc94 <RCCEx_PLL2_Config>
 800c0fe:	4603      	mov	r3, r0
 800c100:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c104:	e00f      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c10a:	3328      	adds	r3, #40	; 0x28
 800c10c:	2101      	movs	r1, #1
 800c10e:	4618      	mov	r0, r3
 800c110:	f001 fe72 	bl	800ddf8 <RCCEx_PLL3_Config>
 800c114:	4603      	mov	r3, r0
 800c116:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c11a:	e004      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c11c:	2301      	movs	r3, #1
 800c11e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c122:	e000      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c124:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c126:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d10a      	bne.n	800c144 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c12e:	4bbf      	ldr	r3, [pc, #764]	; (800c42c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c132:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c13a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c13c:	4abb      	ldr	r2, [pc, #748]	; (800c42c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c13e:	430b      	orrs	r3, r1
 800c140:	6553      	str	r3, [r2, #84]	; 0x54
 800c142:	e003      	b.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c144:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c148:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c14c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c154:	f002 0302 	and.w	r3, r2, #2
 800c158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c15c:	2300      	movs	r3, #0
 800c15e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c162:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c166:	460b      	mov	r3, r1
 800c168:	4313      	orrs	r3, r2
 800c16a:	d041      	beq.n	800c1f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c172:	2b05      	cmp	r3, #5
 800c174:	d824      	bhi.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c176:	a201      	add	r2, pc, #4	; (adr r2, 800c17c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c17c:	0800c1c9 	.word	0x0800c1c9
 800c180:	0800c195 	.word	0x0800c195
 800c184:	0800c1ab 	.word	0x0800c1ab
 800c188:	0800c1c9 	.word	0x0800c1c9
 800c18c:	0800c1c9 	.word	0x0800c1c9
 800c190:	0800c1c9 	.word	0x0800c1c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c198:	3308      	adds	r3, #8
 800c19a:	2101      	movs	r1, #1
 800c19c:	4618      	mov	r0, r3
 800c19e:	f001 fd79 	bl	800dc94 <RCCEx_PLL2_Config>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c1a8:	e00f      	b.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1ae:	3328      	adds	r3, #40	; 0x28
 800c1b0:	2101      	movs	r1, #1
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f001 fe20 	bl	800ddf8 <RCCEx_PLL3_Config>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c1be:	e004      	b.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c1c6:	e000      	b.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c1c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10a      	bne.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c1d2:	4b96      	ldr	r3, [pc, #600]	; (800c42c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1d6:	f023 0107 	bic.w	r1, r3, #7
 800c1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1e0:	4a92      	ldr	r2, [pc, #584]	; (800c42c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1e2:	430b      	orrs	r3, r1
 800c1e4:	6553      	str	r3, [r2, #84]	; 0x54
 800c1e6:	e003      	b.n	800c1f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f8:	f002 0304 	and.w	r3, r2, #4
 800c1fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c200:	2300      	movs	r3, #0
 800c202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c206:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c20a:	460b      	mov	r3, r1
 800c20c:	4313      	orrs	r3, r2
 800c20e:	d044      	beq.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c218:	2b05      	cmp	r3, #5
 800c21a:	d825      	bhi.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c21c:	a201      	add	r2, pc, #4	; (adr r2, 800c224 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c222:	bf00      	nop
 800c224:	0800c271 	.word	0x0800c271
 800c228:	0800c23d 	.word	0x0800c23d
 800c22c:	0800c253 	.word	0x0800c253
 800c230:	0800c271 	.word	0x0800c271
 800c234:	0800c271 	.word	0x0800c271
 800c238:	0800c271 	.word	0x0800c271
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c240:	3308      	adds	r3, #8
 800c242:	2101      	movs	r1, #1
 800c244:	4618      	mov	r0, r3
 800c246:	f001 fd25 	bl	800dc94 <RCCEx_PLL2_Config>
 800c24a:	4603      	mov	r3, r0
 800c24c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c250:	e00f      	b.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c256:	3328      	adds	r3, #40	; 0x28
 800c258:	2101      	movs	r1, #1
 800c25a:	4618      	mov	r0, r3
 800c25c:	f001 fdcc 	bl	800ddf8 <RCCEx_PLL3_Config>
 800c260:	4603      	mov	r3, r0
 800c262:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c266:	e004      	b.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c26e:	e000      	b.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c270:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c272:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c276:	2b00      	cmp	r3, #0
 800c278:	d10b      	bne.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c27a:	4b6c      	ldr	r3, [pc, #432]	; (800c42c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c27c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c27e:	f023 0107 	bic.w	r1, r3, #7
 800c282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c28a:	4a68      	ldr	r2, [pc, #416]	; (800c42c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c28c:	430b      	orrs	r3, r1
 800c28e:	6593      	str	r3, [r2, #88]	; 0x58
 800c290:	e003      	b.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c292:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c296:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a2:	f002 0320 	and.w	r3, r2, #32
 800c2a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c2b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	d055      	beq.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2c6:	d033      	beq.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c2c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2cc:	d82c      	bhi.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c2ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2d2:	d02f      	beq.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c2d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2d8:	d826      	bhi.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c2da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2de:	d02b      	beq.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c2e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2e4:	d820      	bhi.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c2e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2ea:	d012      	beq.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c2ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2f0:	d81a      	bhi.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d022      	beq.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c2f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2fa:	d115      	bne.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c300:	3308      	adds	r3, #8
 800c302:	2100      	movs	r1, #0
 800c304:	4618      	mov	r0, r3
 800c306:	f001 fcc5 	bl	800dc94 <RCCEx_PLL2_Config>
 800c30a:	4603      	mov	r3, r0
 800c30c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c310:	e015      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c316:	3328      	adds	r3, #40	; 0x28
 800c318:	2102      	movs	r1, #2
 800c31a:	4618      	mov	r0, r3
 800c31c:	f001 fd6c 	bl	800ddf8 <RCCEx_PLL3_Config>
 800c320:	4603      	mov	r3, r0
 800c322:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c326:	e00a      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c328:	2301      	movs	r3, #1
 800c32a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c32e:	e006      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c330:	bf00      	nop
 800c332:	e004      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c334:	bf00      	nop
 800c336:	e002      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c338:	bf00      	nop
 800c33a:	e000      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c33c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c33e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10b      	bne.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c346:	4b39      	ldr	r3, [pc, #228]	; (800c42c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c34a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c356:	4a35      	ldr	r2, [pc, #212]	; (800c42c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c358:	430b      	orrs	r3, r1
 800c35a:	6553      	str	r3, [r2, #84]	; 0x54
 800c35c:	e003      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c35e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c362:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c372:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c376:	2300      	movs	r3, #0
 800c378:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c37c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c380:	460b      	mov	r3, r1
 800c382:	4313      	orrs	r3, r2
 800c384:	d058      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c38a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c38e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c392:	d033      	beq.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c394:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c398:	d82c      	bhi.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c39a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c39e:	d02f      	beq.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c3a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3a4:	d826      	bhi.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c3a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c3aa:	d02b      	beq.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c3ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c3b0:	d820      	bhi.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c3b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3b6:	d012      	beq.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c3b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3bc:	d81a      	bhi.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d022      	beq.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c3c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3c6:	d115      	bne.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3cc:	3308      	adds	r3, #8
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f001 fc5f 	bl	800dc94 <RCCEx_PLL2_Config>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c3dc:	e015      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3e2:	3328      	adds	r3, #40	; 0x28
 800c3e4:	2102      	movs	r1, #2
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f001 fd06 	bl	800ddf8 <RCCEx_PLL3_Config>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c3f2:	e00a      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c3fa:	e006      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c3fc:	bf00      	nop
 800c3fe:	e004      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c400:	bf00      	nop
 800c402:	e002      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c404:	bf00      	nop
 800c406:	e000      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c40a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d10e      	bne.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c412:	4b06      	ldr	r3, [pc, #24]	; (800c42c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c416:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c41a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c41e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c422:	4a02      	ldr	r2, [pc, #8]	; (800c42c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c424:	430b      	orrs	r3, r1
 800c426:	6593      	str	r3, [r2, #88]	; 0x58
 800c428:	e006      	b.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c42a:	bf00      	nop
 800c42c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c430:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c434:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c440:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c444:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c448:	2300      	movs	r3, #0
 800c44a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c44e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c452:	460b      	mov	r3, r1
 800c454:	4313      	orrs	r3, r2
 800c456:	d055      	beq.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c45c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c460:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c464:	d033      	beq.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c466:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c46a:	d82c      	bhi.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c46c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c470:	d02f      	beq.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c476:	d826      	bhi.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c478:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c47c:	d02b      	beq.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c47e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c482:	d820      	bhi.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c488:	d012      	beq.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c48a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c48e:	d81a      	bhi.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c490:	2b00      	cmp	r3, #0
 800c492:	d022      	beq.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c498:	d115      	bne.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c49e:	3308      	adds	r3, #8
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f001 fbf6 	bl	800dc94 <RCCEx_PLL2_Config>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c4ae:	e015      	b.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4b4:	3328      	adds	r3, #40	; 0x28
 800c4b6:	2102      	movs	r1, #2
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f001 fc9d 	bl	800ddf8 <RCCEx_PLL3_Config>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c4c4:	e00a      	b.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c4cc:	e006      	b.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c4ce:	bf00      	nop
 800c4d0:	e004      	b.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c4d2:	bf00      	nop
 800c4d4:	e002      	b.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c4d6:	bf00      	nop
 800c4d8:	e000      	b.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c4da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10b      	bne.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c4e4:	4ba0      	ldr	r3, [pc, #640]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4e8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c4f4:	4a9c      	ldr	r2, [pc, #624]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4f6:	430b      	orrs	r3, r1
 800c4f8:	6593      	str	r3, [r2, #88]	; 0x58
 800c4fa:	e003      	b.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c500:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50c:	f002 0308 	and.w	r3, r2, #8
 800c510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c514:	2300      	movs	r3, #0
 800c516:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c51a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c51e:	460b      	mov	r3, r1
 800c520:	4313      	orrs	r3, r2
 800c522:	d01e      	beq.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c52c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c530:	d10c      	bne.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c536:	3328      	adds	r3, #40	; 0x28
 800c538:	2102      	movs	r1, #2
 800c53a:	4618      	mov	r0, r3
 800c53c:	f001 fc5c 	bl	800ddf8 <RCCEx_PLL3_Config>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d002      	beq.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c546:	2301      	movs	r3, #1
 800c548:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c54c:	4b86      	ldr	r3, [pc, #536]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c54e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c550:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c55c:	4a82      	ldr	r2, [pc, #520]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c55e:	430b      	orrs	r3, r1
 800c560:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56a:	f002 0310 	and.w	r3, r2, #16
 800c56e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c572:	2300      	movs	r3, #0
 800c574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c578:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c57c:	460b      	mov	r3, r1
 800c57e:	4313      	orrs	r3, r2
 800c580:	d01e      	beq.n	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c58a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c58e:	d10c      	bne.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c594:	3328      	adds	r3, #40	; 0x28
 800c596:	2102      	movs	r1, #2
 800c598:	4618      	mov	r0, r3
 800c59a:	f001 fc2d 	bl	800ddf8 <RCCEx_PLL3_Config>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d002      	beq.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c5aa:	4b6f      	ldr	r3, [pc, #444]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c5b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5ba:	4a6b      	ldr	r2, [pc, #428]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5bc:	430b      	orrs	r3, r1
 800c5be:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c5cc:	67bb      	str	r3, [r7, #120]	; 0x78
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c5d2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	d03e      	beq.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c5e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5e8:	d022      	beq.n	800c630 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c5ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5ee:	d81b      	bhi.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d003      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c5f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5f8:	d00b      	beq.n	800c612 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c5fa:	e015      	b.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c600:	3308      	adds	r3, #8
 800c602:	2100      	movs	r1, #0
 800c604:	4618      	mov	r0, r3
 800c606:	f001 fb45 	bl	800dc94 <RCCEx_PLL2_Config>
 800c60a:	4603      	mov	r3, r0
 800c60c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c610:	e00f      	b.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c616:	3328      	adds	r3, #40	; 0x28
 800c618:	2102      	movs	r1, #2
 800c61a:	4618      	mov	r0, r3
 800c61c:	f001 fbec 	bl	800ddf8 <RCCEx_PLL3_Config>
 800c620:	4603      	mov	r3, r0
 800c622:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c626:	e004      	b.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c628:	2301      	movs	r3, #1
 800c62a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c62e:	e000      	b.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c630:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c632:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c636:	2b00      	cmp	r3, #0
 800c638:	d10b      	bne.n	800c652 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c63a:	4b4b      	ldr	r3, [pc, #300]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c63c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c63e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c646:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c64a:	4a47      	ldr	r2, [pc, #284]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c64c:	430b      	orrs	r3, r1
 800c64e:	6593      	str	r3, [r2, #88]	; 0x58
 800c650:	e003      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c652:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c656:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c662:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c666:	673b      	str	r3, [r7, #112]	; 0x70
 800c668:	2300      	movs	r3, #0
 800c66a:	677b      	str	r3, [r7, #116]	; 0x74
 800c66c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c670:	460b      	mov	r3, r1
 800c672:	4313      	orrs	r3, r2
 800c674:	d03b      	beq.n	800c6ee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c67a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c67e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c682:	d01f      	beq.n	800c6c4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c684:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c688:	d818      	bhi.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c68a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c68e:	d003      	beq.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c690:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c694:	d007      	beq.n	800c6a6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c696:	e011      	b.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c698:	4b33      	ldr	r3, [pc, #204]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69c:	4a32      	ldr	r2, [pc, #200]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c69e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c6a4:	e00f      	b.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6aa:	3328      	adds	r3, #40	; 0x28
 800c6ac:	2101      	movs	r1, #1
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f001 fba2 	bl	800ddf8 <RCCEx_PLL3_Config>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c6ba:	e004      	b.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c6c2:	e000      	b.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c6c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d10b      	bne.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c6ce:	4b26      	ldr	r3, [pc, #152]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c6d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6de:	4a22      	ldr	r2, [pc, #136]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6e0:	430b      	orrs	r3, r1
 800c6e2:	6553      	str	r3, [r2, #84]	; 0x54
 800c6e4:	e003      	b.n	800c6ee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c6ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c6fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c700:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c704:	460b      	mov	r3, r1
 800c706:	4313      	orrs	r3, r2
 800c708:	d034      	beq.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c70e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c710:	2b00      	cmp	r3, #0
 800c712:	d003      	beq.n	800c71c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c718:	d007      	beq.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c71a:	e011      	b.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c71c:	4b12      	ldr	r3, [pc, #72]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c720:	4a11      	ldr	r2, [pc, #68]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c728:	e00e      	b.n	800c748 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c72e:	3308      	adds	r3, #8
 800c730:	2102      	movs	r1, #2
 800c732:	4618      	mov	r0, r3
 800c734:	f001 faae 	bl	800dc94 <RCCEx_PLL2_Config>
 800c738:	4603      	mov	r3, r0
 800c73a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c73e:	e003      	b.n	800c748 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c746:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c748:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d10d      	bne.n	800c76c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c750:	4b05      	ldr	r3, [pc, #20]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c754:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c75c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c75e:	4a02      	ldr	r2, [pc, #8]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c760:	430b      	orrs	r3, r1
 800c762:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c764:	e006      	b.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c766:	bf00      	nop
 800c768:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c76c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c770:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c780:	663b      	str	r3, [r7, #96]	; 0x60
 800c782:	2300      	movs	r3, #0
 800c784:	667b      	str	r3, [r7, #100]	; 0x64
 800c786:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c78a:	460b      	mov	r3, r1
 800c78c:	4313      	orrs	r3, r2
 800c78e:	d00c      	beq.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c794:	3328      	adds	r3, #40	; 0x28
 800c796:	2102      	movs	r1, #2
 800c798:	4618      	mov	r0, r3
 800c79a:	f001 fb2d 	bl	800ddf8 <RCCEx_PLL3_Config>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d002      	beq.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c7b6:	65bb      	str	r3, [r7, #88]	; 0x58
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c7bc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	d036      	beq.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7d0:	d018      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c7d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7d6:	d811      	bhi.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c7d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7dc:	d014      	beq.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c7de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7e2:	d80b      	bhi.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d011      	beq.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c7e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7ec:	d106      	bne.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7ee:	4bb7      	ldr	r3, [pc, #732]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f2:	4ab6      	ldr	r2, [pc, #728]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c7f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c7fa:	e008      	b.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c802:	e004      	b.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c804:	bf00      	nop
 800c806:	e002      	b.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c808:	bf00      	nop
 800c80a:	e000      	b.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c80c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c80e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10a      	bne.n	800c82c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c816:	4bad      	ldr	r3, [pc, #692]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c81a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c824:	4aa9      	ldr	r2, [pc, #676]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c826:	430b      	orrs	r3, r1
 800c828:	6553      	str	r3, [r2, #84]	; 0x54
 800c82a:	e003      	b.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c82c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c830:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c840:	653b      	str	r3, [r7, #80]	; 0x50
 800c842:	2300      	movs	r3, #0
 800c844:	657b      	str	r3, [r7, #84]	; 0x54
 800c846:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c84a:	460b      	mov	r3, r1
 800c84c:	4313      	orrs	r3, r2
 800c84e:	d009      	beq.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c850:	4b9e      	ldr	r3, [pc, #632]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c854:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c85c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c85e:	4a9b      	ldr	r2, [pc, #620]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c860:	430b      	orrs	r3, r1
 800c862:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c870:	64bb      	str	r3, [r7, #72]	; 0x48
 800c872:	2300      	movs	r3, #0
 800c874:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c876:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c87a:	460b      	mov	r3, r1
 800c87c:	4313      	orrs	r3, r2
 800c87e:	d009      	beq.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c880:	4b92      	ldr	r3, [pc, #584]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c884:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c88c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c88e:	4a8f      	ldr	r2, [pc, #572]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c890:	430b      	orrs	r3, r1
 800c892:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c8a0:	643b      	str	r3, [r7, #64]	; 0x40
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	647b      	str	r3, [r7, #68]	; 0x44
 800c8a6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	d00e      	beq.n	800c8ce <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c8b0:	4b86      	ldr	r3, [pc, #536]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	4a85      	ldr	r2, [pc, #532]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c8ba:	6113      	str	r3, [r2, #16]
 800c8bc:	4b83      	ldr	r3, [pc, #524]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8be:	6919      	ldr	r1, [r3, #16]
 800c8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c8c8:	4a80      	ldr	r2, [pc, #512]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8ca:	430b      	orrs	r3, r1
 800c8cc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c8da:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8dc:	2300      	movs	r3, #0
 800c8de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8e0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	d009      	beq.n	800c8fe <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c8ea:	4b78      	ldr	r3, [pc, #480]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8ee:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8f8:	4a74      	ldr	r2, [pc, #464]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8fa:	430b      	orrs	r3, r1
 800c8fc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c90a:	633b      	str	r3, [r7, #48]	; 0x30
 800c90c:	2300      	movs	r3, #0
 800c90e:	637b      	str	r3, [r7, #52]	; 0x34
 800c910:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c914:	460b      	mov	r3, r1
 800c916:	4313      	orrs	r3, r2
 800c918:	d00a      	beq.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c91a:	4b6c      	ldr	r3, [pc, #432]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c91e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c92a:	4a68      	ldr	r2, [pc, #416]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c92c:	430b      	orrs	r3, r1
 800c92e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c938:	2100      	movs	r1, #0
 800c93a:	62b9      	str	r1, [r7, #40]	; 0x28
 800c93c:	f003 0301 	and.w	r3, r3, #1
 800c940:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c942:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c946:	460b      	mov	r3, r1
 800c948:	4313      	orrs	r3, r2
 800c94a:	d011      	beq.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c94c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c950:	3308      	adds	r3, #8
 800c952:	2100      	movs	r1, #0
 800c954:	4618      	mov	r0, r3
 800c956:	f001 f99d 	bl	800dc94 <RCCEx_PLL2_Config>
 800c95a:	4603      	mov	r3, r0
 800c95c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c960:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c964:	2b00      	cmp	r3, #0
 800c966:	d003      	beq.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c968:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c96c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c978:	2100      	movs	r1, #0
 800c97a:	6239      	str	r1, [r7, #32]
 800c97c:	f003 0302 	and.w	r3, r3, #2
 800c980:	627b      	str	r3, [r7, #36]	; 0x24
 800c982:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c986:	460b      	mov	r3, r1
 800c988:	4313      	orrs	r3, r2
 800c98a:	d011      	beq.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c990:	3308      	adds	r3, #8
 800c992:	2101      	movs	r1, #1
 800c994:	4618      	mov	r0, r3
 800c996:	f001 f97d 	bl	800dc94 <RCCEx_PLL2_Config>
 800c99a:	4603      	mov	r3, r0
 800c99c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c9a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d003      	beq.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c9ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	61b9      	str	r1, [r7, #24]
 800c9bc:	f003 0304 	and.w	r3, r3, #4
 800c9c0:	61fb      	str	r3, [r7, #28]
 800c9c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	d011      	beq.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9d0:	3308      	adds	r3, #8
 800c9d2:	2102      	movs	r1, #2
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f001 f95d 	bl	800dc94 <RCCEx_PLL2_Config>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c9e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d003      	beq.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c9ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f8:	2100      	movs	r1, #0
 800c9fa:	6139      	str	r1, [r7, #16]
 800c9fc:	f003 0308 	and.w	r3, r3, #8
 800ca00:	617b      	str	r3, [r7, #20]
 800ca02:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ca06:	460b      	mov	r3, r1
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	d011      	beq.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca10:	3328      	adds	r3, #40	; 0x28
 800ca12:	2100      	movs	r1, #0
 800ca14:	4618      	mov	r0, r3
 800ca16:	f001 f9ef 	bl	800ddf8 <RCCEx_PLL3_Config>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800ca20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d003      	beq.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ca30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca38:	2100      	movs	r1, #0
 800ca3a:	60b9      	str	r1, [r7, #8]
 800ca3c:	f003 0310 	and.w	r3, r3, #16
 800ca40:	60fb      	str	r3, [r7, #12]
 800ca42:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ca46:	460b      	mov	r3, r1
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	d011      	beq.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca50:	3328      	adds	r3, #40	; 0x28
 800ca52:	2101      	movs	r1, #1
 800ca54:	4618      	mov	r0, r3
 800ca56:	f001 f9cf 	bl	800ddf8 <RCCEx_PLL3_Config>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ca60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d003      	beq.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ca70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca78:	2100      	movs	r1, #0
 800ca7a:	6039      	str	r1, [r7, #0]
 800ca7c:	f003 0320 	and.w	r3, r3, #32
 800ca80:	607b      	str	r3, [r7, #4]
 800ca82:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ca86:	460b      	mov	r3, r1
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	d011      	beq.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ca8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca90:	3328      	adds	r3, #40	; 0x28
 800ca92:	2102      	movs	r1, #2
 800ca94:	4618      	mov	r0, r3
 800ca96:	f001 f9af 	bl	800ddf8 <RCCEx_PLL3_Config>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800caa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d003      	beq.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caa8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800caac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800cab0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d101      	bne.n	800cabc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	e000      	b.n	800cabe <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800cabc:	2301      	movs	r3, #1
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800cac4:	46bd      	mov	sp, r7
 800cac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800caca:	bf00      	nop
 800cacc:	58024400 	.word	0x58024400

0800cad0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b090      	sub	sp, #64	; 0x40
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cada:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cade:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800cae2:	430b      	orrs	r3, r1
 800cae4:	f040 8094 	bne.w	800cc10 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cae8:	4b9b      	ldr	r3, [pc, #620]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800caea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caec:	f003 0307 	and.w	r3, r3, #7
 800caf0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800caf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf4:	2b04      	cmp	r3, #4
 800caf6:	f200 8087 	bhi.w	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800cafa:	a201      	add	r2, pc, #4	; (adr r2, 800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800cafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb00:	0800cb15 	.word	0x0800cb15
 800cb04:	0800cb3d 	.word	0x0800cb3d
 800cb08:	0800cb65 	.word	0x0800cb65
 800cb0c:	0800cc01 	.word	0x0800cc01
 800cb10:	0800cb8d 	.word	0x0800cb8d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb14:	4b90      	ldr	r3, [pc, #576]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb20:	d108      	bne.n	800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb26:	4618      	mov	r0, r3
 800cb28:	f000 ff62 	bl	800d9f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb30:	f000 bc93 	b.w	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb34:	2300      	movs	r3, #0
 800cb36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb38:	f000 bc8f 	b.w	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb3c:	4b86      	ldr	r3, [pc, #536]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb48:	d108      	bne.n	800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb4a:	f107 0318 	add.w	r3, r7, #24
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f000 fca6 	bl	800d4a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb54:	69bb      	ldr	r3, [r7, #24]
 800cb56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb58:	f000 bc7f 	b.w	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb60:	f000 bc7b 	b.w	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb64:	4b7c      	ldr	r3, [pc, #496]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb70:	d108      	bne.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb72:	f107 030c 	add.w	r3, r7, #12
 800cb76:	4618      	mov	r0, r3
 800cb78:	f000 fde6 	bl	800d748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb80:	f000 bc6b 	b.w	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb84:	2300      	movs	r3, #0
 800cb86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb88:	f000 bc67 	b.w	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb8c:	4b72      	ldr	r3, [pc, #456]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb94:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb96:	4b70      	ldr	r3, [pc, #448]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f003 0304 	and.w	r3, r3, #4
 800cb9e:	2b04      	cmp	r3, #4
 800cba0:	d10c      	bne.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d109      	bne.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cba8:	4b6b      	ldr	r3, [pc, #428]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	08db      	lsrs	r3, r3, #3
 800cbae:	f003 0303 	and.w	r3, r3, #3
 800cbb2:	4a6a      	ldr	r2, [pc, #424]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cbb4:	fa22 f303 	lsr.w	r3, r2, r3
 800cbb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbba:	e01f      	b.n	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cbbc:	4b66      	ldr	r3, [pc, #408]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbc8:	d106      	bne.n	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbd0:	d102      	bne.n	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cbd2:	4b63      	ldr	r3, [pc, #396]	; (800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cbd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbd6:	e011      	b.n	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cbd8:	4b5f      	ldr	r3, [pc, #380]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbe4:	d106      	bne.n	800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbec:	d102      	bne.n	800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cbee:	4b5d      	ldr	r3, [pc, #372]	; (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbf2:	e003      	b.n	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cbf8:	f000 bc2f 	b.w	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cbfc:	f000 bc2d 	b.w	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cc00:	4b59      	ldr	r3, [pc, #356]	; (800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cc02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc04:	f000 bc29 	b.w	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc0c:	f000 bc25 	b.w	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cc10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc14:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800cc18:	430b      	orrs	r3, r1
 800cc1a:	f040 80a7 	bne.w	800cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cc1e:	4b4e      	ldr	r3, [pc, #312]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc22:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800cc26:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc2e:	d054      	beq.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc36:	f200 808b 	bhi.w	800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cc40:	f000 8083 	beq.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800cc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cc4a:	f200 8081 	bhi.w	800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc54:	d02f      	beq.n	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800cc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc5c:	d878      	bhi.n	800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d004      	beq.n	800cc6e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800cc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc6a:	d012      	beq.n	800cc92 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800cc6c:	e070      	b.n	800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc6e:	4b3a      	ldr	r3, [pc, #232]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc7a:	d107      	bne.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc80:	4618      	mov	r0, r3
 800cc82:	f000 feb5 	bl	800d9f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc8a:	e3e6      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc90:	e3e3      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc92:	4b31      	ldr	r3, [pc, #196]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc9e:	d107      	bne.n	800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cca0:	f107 0318 	add.w	r3, r7, #24
 800cca4:	4618      	mov	r0, r3
 800cca6:	f000 fbfb 	bl	800d4a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccae:	e3d4      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccb4:	e3d1      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccb6:	4b28      	ldr	r3, [pc, #160]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccc2:	d107      	bne.n	800ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccc4:	f107 030c 	add.w	r3, r7, #12
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f000 fd3d 	bl	800d748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccd2:	e3c2      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccd8:	e3bf      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccda:	4b1f      	ldr	r3, [pc, #124]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cce2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cce4:	4b1c      	ldr	r3, [pc, #112]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f003 0304 	and.w	r3, r3, #4
 800ccec:	2b04      	cmp	r3, #4
 800ccee:	d10c      	bne.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ccf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d109      	bne.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccf6:	4b18      	ldr	r3, [pc, #96]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	08db      	lsrs	r3, r3, #3
 800ccfc:	f003 0303 	and.w	r3, r3, #3
 800cd00:	4a16      	ldr	r2, [pc, #88]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cd02:	fa22 f303 	lsr.w	r3, r2, r3
 800cd06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd08:	e01e      	b.n	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd0a:	4b13      	ldr	r3, [pc, #76]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd16:	d106      	bne.n	800cd26 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800cd18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd1e:	d102      	bne.n	800cd26 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd20:	4b0f      	ldr	r3, [pc, #60]	; (800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cd22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd24:	e010      	b.n	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd26:	4b0c      	ldr	r3, [pc, #48]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd32:	d106      	bne.n	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd3a:	d102      	bne.n	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd3c:	4b09      	ldr	r3, [pc, #36]	; (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd40:	e002      	b.n	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd42:	2300      	movs	r3, #0
 800cd44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd46:	e388      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd48:	e387      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd4a:	4b07      	ldr	r3, [pc, #28]	; (800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd4e:	e384      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cd50:	2300      	movs	r3, #0
 800cd52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd54:	e381      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd56:	bf00      	nop
 800cd58:	58024400 	.word	0x58024400
 800cd5c:	03d09000 	.word	0x03d09000
 800cd60:	003d0900 	.word	0x003d0900
 800cd64:	02faf080 	.word	0x02faf080
 800cd68:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cd6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd70:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800cd74:	430b      	orrs	r3, r1
 800cd76:	f040 809c 	bne.w	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cd7a:	4b9e      	ldr	r3, [pc, #632]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd7e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800cd82:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cd8a:	d054      	beq.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cd92:	f200 808b 	bhi.w	800ceac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cd9c:	f000 8083 	beq.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800cda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cda6:	f200 8081 	bhi.w	800ceac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdb0:	d02f      	beq.n	800ce12 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdb8:	d878      	bhi.n	800ceac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d004      	beq.n	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800cdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cdc6:	d012      	beq.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800cdc8:	e070      	b.n	800ceac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cdca:	4b8a      	ldr	r3, [pc, #552]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdd6:	d107      	bne.n	800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cdd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cddc:	4618      	mov	r0, r3
 800cdde:	f000 fe07 	bl	800d9f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cde6:	e338      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cde8:	2300      	movs	r3, #0
 800cdea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdec:	e335      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdee:	4b81      	ldr	r3, [pc, #516]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdfa:	d107      	bne.n	800ce0c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdfc:	f107 0318 	add.w	r3, r7, #24
 800ce00:	4618      	mov	r0, r3
 800ce02:	f000 fb4d 	bl	800d4a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce0a:	e326      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce10:	e323      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce12:	4b78      	ldr	r3, [pc, #480]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce1e:	d107      	bne.n	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce20:	f107 030c 	add.w	r3, r7, #12
 800ce24:	4618      	mov	r0, r3
 800ce26:	f000 fc8f 	bl	800d748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce2e:	e314      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce30:	2300      	movs	r3, #0
 800ce32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce34:	e311      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce36:	4b6f      	ldr	r3, [pc, #444]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce3e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce40:	4b6c      	ldr	r3, [pc, #432]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f003 0304 	and.w	r3, r3, #4
 800ce48:	2b04      	cmp	r3, #4
 800ce4a:	d10c      	bne.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ce4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d109      	bne.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce52:	4b68      	ldr	r3, [pc, #416]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	08db      	lsrs	r3, r3, #3
 800ce58:	f003 0303 	and.w	r3, r3, #3
 800ce5c:	4a66      	ldr	r2, [pc, #408]	; (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ce5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ce62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce64:	e01e      	b.n	800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce66:	4b63      	ldr	r3, [pc, #396]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce72:	d106      	bne.n	800ce82 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ce74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce7a:	d102      	bne.n	800ce82 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ce7c:	4b5f      	ldr	r3, [pc, #380]	; (800cffc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ce7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce80:	e010      	b.n	800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce82:	4b5c      	ldr	r3, [pc, #368]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce8e:	d106      	bne.n	800ce9e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800ce90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce96:	d102      	bne.n	800ce9e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce98:	4b59      	ldr	r3, [pc, #356]	; (800d000 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ce9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce9c:	e002      	b.n	800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cea2:	e2da      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cea4:	e2d9      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cea6:	4b57      	ldr	r3, [pc, #348]	; (800d004 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceaa:	e2d6      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ceac:	2300      	movs	r3, #0
 800ceae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceb0:	e2d3      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ceb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ceb6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ceba:	430b      	orrs	r3, r1
 800cebc:	f040 80a7 	bne.w	800d00e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cec0:	4b4c      	ldr	r3, [pc, #304]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cec4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cec8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ceca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cecc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ced0:	d055      	beq.n	800cf7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800ced2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ced8:	f200 8096 	bhi.w	800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cede:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cee2:	f000 8084 	beq.w	800cfee <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800cee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ceec:	f200 808c 	bhi.w	800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cef6:	d030      	beq.n	800cf5a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cefe:	f200 8083 	bhi.w	800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d004      	beq.n	800cf12 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800cf08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf0e:	d012      	beq.n	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cf10:	e07a      	b.n	800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf12:	4b38      	ldr	r3, [pc, #224]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf1e:	d107      	bne.n	800cf30 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf24:	4618      	mov	r0, r3
 800cf26:	f000 fd63 	bl	800d9f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf2e:	e294      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf30:	2300      	movs	r3, #0
 800cf32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf34:	e291      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf36:	4b2f      	ldr	r3, [pc, #188]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf42:	d107      	bne.n	800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf44:	f107 0318 	add.w	r3, r7, #24
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f000 faa9 	bl	800d4a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf52:	e282      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf54:	2300      	movs	r3, #0
 800cf56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf58:	e27f      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf5a:	4b26      	ldr	r3, [pc, #152]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf66:	d107      	bne.n	800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf68:	f107 030c 	add.w	r3, r7, #12
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f000 fbeb 	bl	800d748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf76:	e270      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf7c:	e26d      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cf7e:	4b1d      	ldr	r3, [pc, #116]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf86:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cf88:	4b1a      	ldr	r3, [pc, #104]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f003 0304 	and.w	r3, r3, #4
 800cf90:	2b04      	cmp	r3, #4
 800cf92:	d10c      	bne.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800cf94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d109      	bne.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf9a:	4b16      	ldr	r3, [pc, #88]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	08db      	lsrs	r3, r3, #3
 800cfa0:	f003 0303 	and.w	r3, r3, #3
 800cfa4:	4a14      	ldr	r2, [pc, #80]	; (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cfa6:	fa22 f303 	lsr.w	r3, r2, r3
 800cfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfac:	e01e      	b.n	800cfec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cfae:	4b11      	ldr	r3, [pc, #68]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfba:	d106      	bne.n	800cfca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800cfbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfc2:	d102      	bne.n	800cfca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cfc4:	4b0d      	ldr	r3, [pc, #52]	; (800cffc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cfc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfc8:	e010      	b.n	800cfec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cfca:	4b0a      	ldr	r3, [pc, #40]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfd6:	d106      	bne.n	800cfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800cfd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfde:	d102      	bne.n	800cfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cfe0:	4b07      	ldr	r3, [pc, #28]	; (800d000 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfe4:	e002      	b.n	800cfec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cfea:	e236      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cfec:	e235      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cfee:	4b05      	ldr	r3, [pc, #20]	; (800d004 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cff2:	e232      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cff4:	58024400 	.word	0x58024400
 800cff8:	03d09000 	.word	0x03d09000
 800cffc:	003d0900 	.word	0x003d0900
 800d000:	02faf080 	.word	0x02faf080
 800d004:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d008:	2300      	movs	r3, #0
 800d00a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d00c:	e225      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d00e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d012:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800d016:	430b      	orrs	r3, r1
 800d018:	f040 8085 	bne.w	800d126 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d01c:	4b9c      	ldr	r3, [pc, #624]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d01e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d020:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d024:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800d026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d02c:	d06b      	beq.n	800d106 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d034:	d874      	bhi.n	800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d038:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d03c:	d056      	beq.n	800d0ec <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d040:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d044:	d86c      	bhi.n	800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d048:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d04c:	d03b      	beq.n	800d0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d050:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d054:	d864      	bhi.n	800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d05c:	d021      	beq.n	800d0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d060:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d064:	d85c      	bhi.n	800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d004      	beq.n	800d076 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d072:	d004      	beq.n	800d07e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d074:	e054      	b.n	800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d076:	f7fe fb5f 	bl	800b738 <HAL_RCC_GetPCLK1Freq>
 800d07a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d07c:	e1ed      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d07e:	4b84      	ldr	r3, [pc, #528]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d08a:	d107      	bne.n	800d09c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d08c:	f107 0318 	add.w	r3, r7, #24
 800d090:	4618      	mov	r0, r3
 800d092:	f000 fa05 	bl	800d4a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d09a:	e1de      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d09c:	2300      	movs	r3, #0
 800d09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0a0:	e1db      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d0a2:	4b7b      	ldr	r3, [pc, #492]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0ae:	d107      	bne.n	800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0b0:	f107 030c 	add.w	r3, r7, #12
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f000 fb47 	bl	800d748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0be:	e1cc      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0c4:	e1c9      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d0c6:	4b72      	ldr	r3, [pc, #456]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f003 0304 	and.w	r3, r3, #4
 800d0ce:	2b04      	cmp	r3, #4
 800d0d0:	d109      	bne.n	800d0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0d2:	4b6f      	ldr	r3, [pc, #444]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	08db      	lsrs	r3, r3, #3
 800d0d8:	f003 0303 	and.w	r3, r3, #3
 800d0dc:	4a6d      	ldr	r2, [pc, #436]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d0de:	fa22 f303 	lsr.w	r3, r2, r3
 800d0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0e4:	e1b9      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0ea:	e1b6      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d0ec:	4b68      	ldr	r3, [pc, #416]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0f8:	d102      	bne.n	800d100 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d0fa:	4b67      	ldr	r3, [pc, #412]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0fe:	e1ac      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d100:	2300      	movs	r3, #0
 800d102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d104:	e1a9      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d106:	4b62      	ldr	r3, [pc, #392]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d10e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d112:	d102      	bne.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d114:	4b61      	ldr	r3, [pc, #388]	; (800d29c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d116:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d118:	e19f      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d11a:	2300      	movs	r3, #0
 800d11c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d11e:	e19c      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d120:	2300      	movs	r3, #0
 800d122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d124:	e199      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d12a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800d12e:	430b      	orrs	r3, r1
 800d130:	d173      	bne.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d132:	4b57      	ldr	r3, [pc, #348]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d136:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d13a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d142:	d02f      	beq.n	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d14a:	d863      	bhi.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d004      	beq.n	800d15c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d158:	d012      	beq.n	800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d15a:	e05b      	b.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d15c:	4b4c      	ldr	r3, [pc, #304]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d168:	d107      	bne.n	800d17a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d16a:	f107 0318 	add.w	r3, r7, #24
 800d16e:	4618      	mov	r0, r3
 800d170:	f000 f996 	bl	800d4a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d174:	69bb      	ldr	r3, [r7, #24]
 800d176:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d178:	e16f      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d17e:	e16c      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d180:	4b43      	ldr	r3, [pc, #268]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d18c:	d107      	bne.n	800d19e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d18e:	f107 030c 	add.w	r3, r7, #12
 800d192:	4618      	mov	r0, r3
 800d194:	f000 fad8 	bl	800d748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d19c:	e15d      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1a2:	e15a      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d1a4:	4b3a      	ldr	r3, [pc, #232]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d1ac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d1ae:	4b38      	ldr	r3, [pc, #224]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f003 0304 	and.w	r3, r3, #4
 800d1b6:	2b04      	cmp	r3, #4
 800d1b8:	d10c      	bne.n	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d109      	bne.n	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1c0:	4b33      	ldr	r3, [pc, #204]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	08db      	lsrs	r3, r3, #3
 800d1c6:	f003 0303 	and.w	r3, r3, #3
 800d1ca:	4a32      	ldr	r2, [pc, #200]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d1cc:	fa22 f303 	lsr.w	r3, r2, r3
 800d1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1d2:	e01e      	b.n	800d212 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d1d4:	4b2e      	ldr	r3, [pc, #184]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1e0:	d106      	bne.n	800d1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d1e8:	d102      	bne.n	800d1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d1ea:	4b2b      	ldr	r3, [pc, #172]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1ee:	e010      	b.n	800d212 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d1f0:	4b27      	ldr	r3, [pc, #156]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1fc:	d106      	bne.n	800d20c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d204:	d102      	bne.n	800d20c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d206:	4b25      	ldr	r3, [pc, #148]	; (800d29c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d20a:	e002      	b.n	800d212 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d20c:	2300      	movs	r3, #0
 800d20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d210:	e123      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d212:	e122      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d214:	2300      	movs	r3, #0
 800d216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d218:	e11f      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d21a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d21e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d222:	430b      	orrs	r3, r1
 800d224:	d13c      	bne.n	800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d226:	4b1a      	ldr	r3, [pc, #104]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d22a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d22e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d232:	2b00      	cmp	r3, #0
 800d234:	d004      	beq.n	800d240 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d23c:	d012      	beq.n	800d264 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d23e:	e023      	b.n	800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d240:	4b13      	ldr	r3, [pc, #76]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d248:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d24c:	d107      	bne.n	800d25e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d24e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d252:	4618      	mov	r0, r3
 800d254:	f000 fbcc 	bl	800d9f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d25c:	e0fd      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d25e:	2300      	movs	r3, #0
 800d260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d262:	e0fa      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d264:	4b0a      	ldr	r3, [pc, #40]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d26c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d270:	d107      	bne.n	800d282 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d272:	f107 0318 	add.w	r3, r7, #24
 800d276:	4618      	mov	r0, r3
 800d278:	f000 f912 	bl	800d4a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d27c:	6a3b      	ldr	r3, [r7, #32]
 800d27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d280:	e0eb      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d282:	2300      	movs	r3, #0
 800d284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d286:	e0e8      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d288:	2300      	movs	r3, #0
 800d28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d28c:	e0e5      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d28e:	bf00      	nop
 800d290:	58024400 	.word	0x58024400
 800d294:	03d09000 	.word	0x03d09000
 800d298:	003d0900 	.word	0x003d0900
 800d29c:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d2a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2a4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d2a8:	430b      	orrs	r3, r1
 800d2aa:	f040 8085 	bne.w	800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d2ae:	4b6d      	ldr	r3, [pc, #436]	; (800d464 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d2b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2b2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d2b6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d2be:	d06b      	beq.n	800d398 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d2c6:	d874      	bhi.n	800d3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2ce:	d056      	beq.n	800d37e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2d6:	d86c      	bhi.n	800d3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d2de:	d03b      	beq.n	800d358 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d2e6:	d864      	bhi.n	800d3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2ee:	d021      	beq.n	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2f6:	d85c      	bhi.n	800d3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d004      	beq.n	800d308 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d300:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d304:	d004      	beq.n	800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d306:	e054      	b.n	800d3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d308:	f000 f8b4 	bl	800d474 <HAL_RCCEx_GetD3PCLK1Freq>
 800d30c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d30e:	e0a4      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d310:	4b54      	ldr	r3, [pc, #336]	; (800d464 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d31c:	d107      	bne.n	800d32e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d31e:	f107 0318 	add.w	r3, r7, #24
 800d322:	4618      	mov	r0, r3
 800d324:	f000 f8bc 	bl	800d4a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d32c:	e095      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d32e:	2300      	movs	r3, #0
 800d330:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d332:	e092      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d334:	4b4b      	ldr	r3, [pc, #300]	; (800d464 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d33c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d340:	d107      	bne.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d342:	f107 030c 	add.w	r3, r7, #12
 800d346:	4618      	mov	r0, r3
 800d348:	f000 f9fe 	bl	800d748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d350:	e083      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d356:	e080      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d358:	4b42      	ldr	r3, [pc, #264]	; (800d464 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f003 0304 	and.w	r3, r3, #4
 800d360:	2b04      	cmp	r3, #4
 800d362:	d109      	bne.n	800d378 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d364:	4b3f      	ldr	r3, [pc, #252]	; (800d464 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	08db      	lsrs	r3, r3, #3
 800d36a:	f003 0303 	and.w	r3, r3, #3
 800d36e:	4a3e      	ldr	r2, [pc, #248]	; (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d370:	fa22 f303 	lsr.w	r3, r2, r3
 800d374:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d376:	e070      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d378:	2300      	movs	r3, #0
 800d37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d37c:	e06d      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d37e:	4b39      	ldr	r3, [pc, #228]	; (800d464 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d38a:	d102      	bne.n	800d392 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d38c:	4b37      	ldr	r3, [pc, #220]	; (800d46c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d390:	e063      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d392:	2300      	movs	r3, #0
 800d394:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d396:	e060      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d398:	4b32      	ldr	r3, [pc, #200]	; (800d464 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d3a4:	d102      	bne.n	800d3ac <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d3a6:	4b32      	ldr	r3, [pc, #200]	; (800d470 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3aa:	e056      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3b0:	e053      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3b6:	e050      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d3b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3bc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d3c0:	430b      	orrs	r3, r1
 800d3c2:	d148      	bne.n	800d456 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d3c4:	4b27      	ldr	r3, [pc, #156]	; (800d464 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d3cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3d4:	d02a      	beq.n	800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3dc:	d838      	bhi.n	800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d004      	beq.n	800d3ee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3ea:	d00d      	beq.n	800d408 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d3ec:	e030      	b.n	800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d3ee:	4b1d      	ldr	r3, [pc, #116]	; (800d464 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d3fa:	d102      	bne.n	800d402 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d3fc:	4b1c      	ldr	r3, [pc, #112]	; (800d470 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d400:	e02b      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d402:	2300      	movs	r3, #0
 800d404:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d406:	e028      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d408:	4b16      	ldr	r3, [pc, #88]	; (800d464 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d410:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d414:	d107      	bne.n	800d426 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d41a:	4618      	mov	r0, r3
 800d41c:	f000 fae8 	bl	800d9f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d422:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d424:	e019      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d42a:	e016      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d42c:	4b0d      	ldr	r3, [pc, #52]	; (800d464 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d438:	d107      	bne.n	800d44a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d43a:	f107 0318 	add.w	r3, r7, #24
 800d43e:	4618      	mov	r0, r3
 800d440:	f000 f82e 	bl	800d4a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d444:	69fb      	ldr	r3, [r7, #28]
 800d446:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d448:	e007      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d44a:	2300      	movs	r3, #0
 800d44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d44e:	e004      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d450:	2300      	movs	r3, #0
 800d452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d454:	e001      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d456:	2300      	movs	r3, #0
 800d458:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3740      	adds	r7, #64	; 0x40
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	58024400 	.word	0x58024400
 800d468:	03d09000 	.word	0x03d09000
 800d46c:	003d0900 	.word	0x003d0900
 800d470:	02faf080 	.word	0x02faf080

0800d474 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d478:	f7fe f92e 	bl	800b6d8 <HAL_RCC_GetHCLKFreq>
 800d47c:	4602      	mov	r2, r0
 800d47e:	4b06      	ldr	r3, [pc, #24]	; (800d498 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d480:	6a1b      	ldr	r3, [r3, #32]
 800d482:	091b      	lsrs	r3, r3, #4
 800d484:	f003 0307 	and.w	r3, r3, #7
 800d488:	4904      	ldr	r1, [pc, #16]	; (800d49c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d48a:	5ccb      	ldrb	r3, [r1, r3]
 800d48c:	f003 031f 	and.w	r3, r3, #31
 800d490:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d494:	4618      	mov	r0, r3
 800d496:	bd80      	pop	{r7, pc}
 800d498:	58024400 	.word	0x58024400
 800d49c:	0801ffb0 	.word	0x0801ffb0

0800d4a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b089      	sub	sp, #36	; 0x24
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d4a8:	4ba1      	ldr	r3, [pc, #644]	; (800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4ac:	f003 0303 	and.w	r3, r3, #3
 800d4b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d4b2:	4b9f      	ldr	r3, [pc, #636]	; (800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4b6:	0b1b      	lsrs	r3, r3, #12
 800d4b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d4be:	4b9c      	ldr	r3, [pc, #624]	; (800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c2:	091b      	lsrs	r3, r3, #4
 800d4c4:	f003 0301 	and.w	r3, r3, #1
 800d4c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d4ca:	4b99      	ldr	r3, [pc, #612]	; (800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ce:	08db      	lsrs	r3, r3, #3
 800d4d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4d4:	693a      	ldr	r2, [r7, #16]
 800d4d6:	fb02 f303 	mul.w	r3, r2, r3
 800d4da:	ee07 3a90 	vmov	s15, r3
 800d4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	f000 8111 	beq.w	800d710 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d4ee:	69bb      	ldr	r3, [r7, #24]
 800d4f0:	2b02      	cmp	r3, #2
 800d4f2:	f000 8083 	beq.w	800d5fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d4f6:	69bb      	ldr	r3, [r7, #24]
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	f200 80a1 	bhi.w	800d640 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d003      	beq.n	800d50c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d504:	69bb      	ldr	r3, [r7, #24]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d056      	beq.n	800d5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d50a:	e099      	b.n	800d640 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d50c:	4b88      	ldr	r3, [pc, #544]	; (800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f003 0320 	and.w	r3, r3, #32
 800d514:	2b00      	cmp	r3, #0
 800d516:	d02d      	beq.n	800d574 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d518:	4b85      	ldr	r3, [pc, #532]	; (800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	08db      	lsrs	r3, r3, #3
 800d51e:	f003 0303 	and.w	r3, r3, #3
 800d522:	4a84      	ldr	r2, [pc, #528]	; (800d734 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d524:	fa22 f303 	lsr.w	r3, r2, r3
 800d528:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	ee07 3a90 	vmov	s15, r3
 800d530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	ee07 3a90 	vmov	s15, r3
 800d53a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d53e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d542:	4b7b      	ldr	r3, [pc, #492]	; (800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d54a:	ee07 3a90 	vmov	s15, r3
 800d54e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d552:	ed97 6a03 	vldr	s12, [r7, #12]
 800d556:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d55a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d55e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d56a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d56e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d572:	e087      	b.n	800d684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	ee07 3a90 	vmov	s15, r3
 800d57a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d57e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d73c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d586:	4b6a      	ldr	r3, [pc, #424]	; (800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d58a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d58e:	ee07 3a90 	vmov	s15, r3
 800d592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d596:	ed97 6a03 	vldr	s12, [r7, #12]
 800d59a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d59e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5b6:	e065      	b.n	800d684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	ee07 3a90 	vmov	s15, r3
 800d5be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d5c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5ca:	4b59      	ldr	r3, [pc, #356]	; (800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5d2:	ee07 3a90 	vmov	s15, r3
 800d5d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5da:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5de:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d5e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5fa:	e043      	b.n	800d684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	ee07 3a90 	vmov	s15, r3
 800d602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d606:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d744 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d60a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d60e:	4b48      	ldr	r3, [pc, #288]	; (800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d616:	ee07 3a90 	vmov	s15, r3
 800d61a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d61e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d622:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d62a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d62e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d63a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d63e:	e021      	b.n	800d684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	ee07 3a90 	vmov	s15, r3
 800d646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d64a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d64e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d652:	4b37      	ldr	r3, [pc, #220]	; (800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d65a:	ee07 3a90 	vmov	s15, r3
 800d65e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d662:	ed97 6a03 	vldr	s12, [r7, #12]
 800d666:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d66a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d66e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d67a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d67e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d682:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d684:	4b2a      	ldr	r3, [pc, #168]	; (800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d688:	0a5b      	lsrs	r3, r3, #9
 800d68a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d68e:	ee07 3a90 	vmov	s15, r3
 800d692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d696:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d69a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d69e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6aa:	ee17 2a90 	vmov	r2, s15
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d6b2:	4b1f      	ldr	r3, [pc, #124]	; (800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b6:	0c1b      	lsrs	r3, r3, #16
 800d6b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6bc:	ee07 3a90 	vmov	s15, r3
 800d6c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6d8:	ee17 2a90 	vmov	r2, s15
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d6e0:	4b13      	ldr	r3, [pc, #76]	; (800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e4:	0e1b      	lsrs	r3, r3, #24
 800d6e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6ea:	ee07 3a90 	vmov	s15, r3
 800d6ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d706:	ee17 2a90 	vmov	r2, s15
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d70e:	e008      	b.n	800d722 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2200      	movs	r2, #0
 800d714:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2200      	movs	r2, #0
 800d71a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2200      	movs	r2, #0
 800d720:	609a      	str	r2, [r3, #8]
}
 800d722:	bf00      	nop
 800d724:	3724      	adds	r7, #36	; 0x24
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	58024400 	.word	0x58024400
 800d734:	03d09000 	.word	0x03d09000
 800d738:	46000000 	.word	0x46000000
 800d73c:	4c742400 	.word	0x4c742400
 800d740:	4a742400 	.word	0x4a742400
 800d744:	4c3ebc20 	.word	0x4c3ebc20

0800d748 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d748:	b480      	push	{r7}
 800d74a:	b089      	sub	sp, #36	; 0x24
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d750:	4ba1      	ldr	r3, [pc, #644]	; (800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d754:	f003 0303 	and.w	r3, r3, #3
 800d758:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d75a:	4b9f      	ldr	r3, [pc, #636]	; (800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d75e:	0d1b      	lsrs	r3, r3, #20
 800d760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d764:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d766:	4b9c      	ldr	r3, [pc, #624]	; (800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d76a:	0a1b      	lsrs	r3, r3, #8
 800d76c:	f003 0301 	and.w	r3, r3, #1
 800d770:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d772:	4b99      	ldr	r3, [pc, #612]	; (800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d776:	08db      	lsrs	r3, r3, #3
 800d778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d77c:	693a      	ldr	r2, [r7, #16]
 800d77e:	fb02 f303 	mul.w	r3, r2, r3
 800d782:	ee07 3a90 	vmov	s15, r3
 800d786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d78a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	2b00      	cmp	r3, #0
 800d792:	f000 8111 	beq.w	800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d796:	69bb      	ldr	r3, [r7, #24]
 800d798:	2b02      	cmp	r3, #2
 800d79a:	f000 8083 	beq.w	800d8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	2b02      	cmp	r3, #2
 800d7a2:	f200 80a1 	bhi.w	800d8e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d003      	beq.n	800d7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d056      	beq.n	800d860 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d7b2:	e099      	b.n	800d8e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7b4:	4b88      	ldr	r3, [pc, #544]	; (800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f003 0320 	and.w	r3, r3, #32
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d02d      	beq.n	800d81c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d7c0:	4b85      	ldr	r3, [pc, #532]	; (800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	08db      	lsrs	r3, r3, #3
 800d7c6:	f003 0303 	and.w	r3, r3, #3
 800d7ca:	4a84      	ldr	r2, [pc, #528]	; (800d9dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d7cc:	fa22 f303 	lsr.w	r3, r2, r3
 800d7d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	ee07 3a90 	vmov	s15, r3
 800d7d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	ee07 3a90 	vmov	s15, r3
 800d7e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7ea:	4b7b      	ldr	r3, [pc, #492]	; (800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7f2:	ee07 3a90 	vmov	s15, r3
 800d7f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d80a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d80e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d812:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d816:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d81a:	e087      	b.n	800d92c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	ee07 3a90 	vmov	s15, r3
 800d822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d826:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d82a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d82e:	4b6a      	ldr	r3, [pc, #424]	; (800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d836:	ee07 3a90 	vmov	s15, r3
 800d83a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d83e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d842:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d84a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d84e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d85a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d85e:	e065      	b.n	800d92c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	ee07 3a90 	vmov	s15, r3
 800d866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d86a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d86e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d872:	4b59      	ldr	r3, [pc, #356]	; (800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d87a:	ee07 3a90 	vmov	s15, r3
 800d87e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d882:	ed97 6a03 	vldr	s12, [r7, #12]
 800d886:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d88a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d88e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d89a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d89e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8a2:	e043      	b.n	800d92c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	ee07 3a90 	vmov	s15, r3
 800d8aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d9ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d8b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8b6:	4b48      	ldr	r3, [pc, #288]	; (800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8be:	ee07 3a90 	vmov	s15, r3
 800d8c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d8ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8e6:	e021      	b.n	800d92c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	ee07 3a90 	vmov	s15, r3
 800d8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d8f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8fa:	4b37      	ldr	r3, [pc, #220]	; (800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d902:	ee07 3a90 	vmov	s15, r3
 800d906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d90a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d90e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d91a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d91e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d922:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d92a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d92c:	4b2a      	ldr	r3, [pc, #168]	; (800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d930:	0a5b      	lsrs	r3, r3, #9
 800d932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d936:	ee07 3a90 	vmov	s15, r3
 800d93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d93e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d942:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d946:	edd7 6a07 	vldr	s13, [r7, #28]
 800d94a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d94e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d952:	ee17 2a90 	vmov	r2, s15
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d95a:	4b1f      	ldr	r3, [pc, #124]	; (800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d95e:	0c1b      	lsrs	r3, r3, #16
 800d960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d964:	ee07 3a90 	vmov	s15, r3
 800d968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d96c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d970:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d974:	edd7 6a07 	vldr	s13, [r7, #28]
 800d978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d97c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d980:	ee17 2a90 	vmov	r2, s15
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d988:	4b13      	ldr	r3, [pc, #76]	; (800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d98c:	0e1b      	lsrs	r3, r3, #24
 800d98e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d992:	ee07 3a90 	vmov	s15, r3
 800d996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d99a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d99e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d9a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9ae:	ee17 2a90 	vmov	r2, s15
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d9b6:	e008      	b.n	800d9ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	609a      	str	r2, [r3, #8]
}
 800d9ca:	bf00      	nop
 800d9cc:	3724      	adds	r7, #36	; 0x24
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr
 800d9d6:	bf00      	nop
 800d9d8:	58024400 	.word	0x58024400
 800d9dc:	03d09000 	.word	0x03d09000
 800d9e0:	46000000 	.word	0x46000000
 800d9e4:	4c742400 	.word	0x4c742400
 800d9e8:	4a742400 	.word	0x4a742400
 800d9ec:	4c3ebc20 	.word	0x4c3ebc20

0800d9f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b089      	sub	sp, #36	; 0x24
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d9f8:	4ba0      	ldr	r3, [pc, #640]	; (800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9fc:	f003 0303 	and.w	r3, r3, #3
 800da00:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800da02:	4b9e      	ldr	r3, [pc, #632]	; (800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da06:	091b      	lsrs	r3, r3, #4
 800da08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da0c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800da0e:	4b9b      	ldr	r3, [pc, #620]	; (800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da12:	f003 0301 	and.w	r3, r3, #1
 800da16:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800da18:	4b98      	ldr	r3, [pc, #608]	; (800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da1c:	08db      	lsrs	r3, r3, #3
 800da1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da22:	693a      	ldr	r2, [r7, #16]
 800da24:	fb02 f303 	mul.w	r3, r2, r3
 800da28:	ee07 3a90 	vmov	s15, r3
 800da2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da30:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	2b00      	cmp	r3, #0
 800da38:	f000 8111 	beq.w	800dc5e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	2b02      	cmp	r3, #2
 800da40:	f000 8083 	beq.w	800db4a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	2b02      	cmp	r3, #2
 800da48:	f200 80a1 	bhi.w	800db8e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d003      	beq.n	800da5a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	2b01      	cmp	r3, #1
 800da56:	d056      	beq.n	800db06 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800da58:	e099      	b.n	800db8e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da5a:	4b88      	ldr	r3, [pc, #544]	; (800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f003 0320 	and.w	r3, r3, #32
 800da62:	2b00      	cmp	r3, #0
 800da64:	d02d      	beq.n	800dac2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800da66:	4b85      	ldr	r3, [pc, #532]	; (800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	08db      	lsrs	r3, r3, #3
 800da6c:	f003 0303 	and.w	r3, r3, #3
 800da70:	4a83      	ldr	r2, [pc, #524]	; (800dc80 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800da72:	fa22 f303 	lsr.w	r3, r2, r3
 800da76:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	ee07 3a90 	vmov	s15, r3
 800da7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	ee07 3a90 	vmov	s15, r3
 800da88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da90:	4b7a      	ldr	r3, [pc, #488]	; (800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da98:	ee07 3a90 	vmov	s15, r3
 800da9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800daa0:	ed97 6a03 	vldr	s12, [r7, #12]
 800daa4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800dc84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800daa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800daac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dab0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dabc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dac0:	e087      	b.n	800dbd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	ee07 3a90 	vmov	s15, r3
 800dac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dacc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800dc88 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dad0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dad4:	4b69      	ldr	r3, [pc, #420]	; (800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dadc:	ee07 3a90 	vmov	s15, r3
 800dae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dae4:	ed97 6a03 	vldr	s12, [r7, #12]
 800dae8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800dc84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800daec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800daf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800daf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800daf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dafc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db04:	e065      	b.n	800dbd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	ee07 3a90 	vmov	s15, r3
 800db0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db10:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800dc8c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800db14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db18:	4b58      	ldr	r3, [pc, #352]	; (800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db20:	ee07 3a90 	vmov	s15, r3
 800db24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db28:	ed97 6a03 	vldr	s12, [r7, #12]
 800db2c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800dc84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db48:	e043      	b.n	800dbd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	ee07 3a90 	vmov	s15, r3
 800db50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db54:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800dc90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800db58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db5c:	4b47      	ldr	r3, [pc, #284]	; (800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db64:	ee07 3a90 	vmov	s15, r3
 800db68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800db70:	eddf 5a44 	vldr	s11, [pc, #272]	; 800dc84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db8c:	e021      	b.n	800dbd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	ee07 3a90 	vmov	s15, r3
 800db94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db98:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800dc88 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800db9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dba0:	4b36      	ldr	r3, [pc, #216]	; (800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dba8:	ee07 3a90 	vmov	s15, r3
 800dbac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbb4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800dc84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dbb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dbc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dbd0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800dbd2:	4b2a      	ldr	r3, [pc, #168]	; (800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbd6:	0a5b      	lsrs	r3, r3, #9
 800dbd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbdc:	ee07 3a90 	vmov	s15, r3
 800dbe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dbe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbec:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbf8:	ee17 2a90 	vmov	r2, s15
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800dc00:	4b1e      	ldr	r3, [pc, #120]	; (800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc04:	0c1b      	lsrs	r3, r3, #16
 800dc06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc0a:	ee07 3a90 	vmov	s15, r3
 800dc0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc26:	ee17 2a90 	vmov	r2, s15
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dc2e:	4b13      	ldr	r3, [pc, #76]	; (800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc32:	0e1b      	lsrs	r3, r3, #24
 800dc34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc38:	ee07 3a90 	vmov	s15, r3
 800dc3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc44:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc48:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc54:	ee17 2a90 	vmov	r2, s15
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dc5c:	e008      	b.n	800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2200      	movs	r2, #0
 800dc62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2200      	movs	r2, #0
 800dc68:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	609a      	str	r2, [r3, #8]
}
 800dc70:	bf00      	nop
 800dc72:	3724      	adds	r7, #36	; 0x24
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr
 800dc7c:	58024400 	.word	0x58024400
 800dc80:	03d09000 	.word	0x03d09000
 800dc84:	46000000 	.word	0x46000000
 800dc88:	4c742400 	.word	0x4c742400
 800dc8c:	4a742400 	.word	0x4a742400
 800dc90:	4c3ebc20 	.word	0x4c3ebc20

0800dc94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dca2:	4b53      	ldr	r3, [pc, #332]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dca6:	f003 0303 	and.w	r3, r3, #3
 800dcaa:	2b03      	cmp	r3, #3
 800dcac:	d101      	bne.n	800dcb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	e099      	b.n	800dde6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dcb2:	4b4f      	ldr	r3, [pc, #316]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4a4e      	ldr	r2, [pc, #312]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dcb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dcbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcbe:	f7f6 fa2f 	bl	8004120 <HAL_GetTick>
 800dcc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dcc4:	e008      	b.n	800dcd8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dcc6:	f7f6 fa2b 	bl	8004120 <HAL_GetTick>
 800dcca:	4602      	mov	r2, r0
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	1ad3      	subs	r3, r2, r3
 800dcd0:	2b02      	cmp	r3, #2
 800dcd2:	d901      	bls.n	800dcd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dcd4:	2303      	movs	r3, #3
 800dcd6:	e086      	b.n	800dde6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dcd8:	4b45      	ldr	r3, [pc, #276]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d1f0      	bne.n	800dcc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dce4:	4b42      	ldr	r3, [pc, #264]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dce8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	031b      	lsls	r3, r3, #12
 800dcf2:	493f      	ldr	r1, [pc, #252]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	628b      	str	r3, [r1, #40]	; 0x28
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	3b01      	subs	r3, #1
 800dcfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	689b      	ldr	r3, [r3, #8]
 800dd06:	3b01      	subs	r3, #1
 800dd08:	025b      	lsls	r3, r3, #9
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	431a      	orrs	r2, r3
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	68db      	ldr	r3, [r3, #12]
 800dd12:	3b01      	subs	r3, #1
 800dd14:	041b      	lsls	r3, r3, #16
 800dd16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dd1a:	431a      	orrs	r2, r3
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	691b      	ldr	r3, [r3, #16]
 800dd20:	3b01      	subs	r3, #1
 800dd22:	061b      	lsls	r3, r3, #24
 800dd24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dd28:	4931      	ldr	r1, [pc, #196]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dd2e:	4b30      	ldr	r3, [pc, #192]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	695b      	ldr	r3, [r3, #20]
 800dd3a:	492d      	ldr	r1, [pc, #180]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dd40:	4b2b      	ldr	r3, [pc, #172]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd44:	f023 0220 	bic.w	r2, r3, #32
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	699b      	ldr	r3, [r3, #24]
 800dd4c:	4928      	ldr	r1, [pc, #160]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dd52:	4b27      	ldr	r3, [pc, #156]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd56:	4a26      	ldr	r2, [pc, #152]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dd58:	f023 0310 	bic.w	r3, r3, #16
 800dd5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dd5e:	4b24      	ldr	r3, [pc, #144]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dd60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd62:	4b24      	ldr	r3, [pc, #144]	; (800ddf4 <RCCEx_PLL2_Config+0x160>)
 800dd64:	4013      	ands	r3, r2
 800dd66:	687a      	ldr	r2, [r7, #4]
 800dd68:	69d2      	ldr	r2, [r2, #28]
 800dd6a:	00d2      	lsls	r2, r2, #3
 800dd6c:	4920      	ldr	r1, [pc, #128]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dd72:	4b1f      	ldr	r3, [pc, #124]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd76:	4a1e      	ldr	r2, [pc, #120]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dd78:	f043 0310 	orr.w	r3, r3, #16
 800dd7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d106      	bne.n	800dd92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dd84:	4b1a      	ldr	r3, [pc, #104]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd88:	4a19      	ldr	r2, [pc, #100]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dd8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dd90:	e00f      	b.n	800ddb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d106      	bne.n	800dda6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dd98:	4b15      	ldr	r3, [pc, #84]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd9c:	4a14      	ldr	r2, [pc, #80]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dd9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dda2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dda4:	e005      	b.n	800ddb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dda6:	4b12      	ldr	r3, [pc, #72]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800dda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddaa:	4a11      	ldr	r2, [pc, #68]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800ddac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ddb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ddb2:	4b0f      	ldr	r3, [pc, #60]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	4a0e      	ldr	r2, [pc, #56]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800ddb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ddbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddbe:	f7f6 f9af 	bl	8004120 <HAL_GetTick>
 800ddc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ddc4:	e008      	b.n	800ddd8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ddc6:	f7f6 f9ab 	bl	8004120 <HAL_GetTick>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	1ad3      	subs	r3, r2, r3
 800ddd0:	2b02      	cmp	r3, #2
 800ddd2:	d901      	bls.n	800ddd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ddd4:	2303      	movs	r3, #3
 800ddd6:	e006      	b.n	800dde6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ddd8:	4b05      	ldr	r3, [pc, #20]	; (800ddf0 <RCCEx_PLL2_Config+0x15c>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d0f0      	beq.n	800ddc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dde4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3710      	adds	r7, #16
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	58024400 	.word	0x58024400
 800ddf4:	ffff0007 	.word	0xffff0007

0800ddf8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800de02:	2300      	movs	r3, #0
 800de04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800de06:	4b53      	ldr	r3, [pc, #332]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800de08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de0a:	f003 0303 	and.w	r3, r3, #3
 800de0e:	2b03      	cmp	r3, #3
 800de10:	d101      	bne.n	800de16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800de12:	2301      	movs	r3, #1
 800de14:	e099      	b.n	800df4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800de16:	4b4f      	ldr	r3, [pc, #316]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a4e      	ldr	r2, [pc, #312]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800de1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de22:	f7f6 f97d 	bl	8004120 <HAL_GetTick>
 800de26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800de28:	e008      	b.n	800de3c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800de2a:	f7f6 f979 	bl	8004120 <HAL_GetTick>
 800de2e:	4602      	mov	r2, r0
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	1ad3      	subs	r3, r2, r3
 800de34:	2b02      	cmp	r3, #2
 800de36:	d901      	bls.n	800de3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800de38:	2303      	movs	r3, #3
 800de3a:	e086      	b.n	800df4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800de3c:	4b45      	ldr	r3, [pc, #276]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de44:	2b00      	cmp	r3, #0
 800de46:	d1f0      	bne.n	800de2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800de48:	4b42      	ldr	r3, [pc, #264]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800de4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	051b      	lsls	r3, r3, #20
 800de56:	493f      	ldr	r1, [pc, #252]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800de58:	4313      	orrs	r3, r2
 800de5a:	628b      	str	r3, [r1, #40]	; 0x28
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	3b01      	subs	r3, #1
 800de62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	3b01      	subs	r3, #1
 800de6c:	025b      	lsls	r3, r3, #9
 800de6e:	b29b      	uxth	r3, r3
 800de70:	431a      	orrs	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	68db      	ldr	r3, [r3, #12]
 800de76:	3b01      	subs	r3, #1
 800de78:	041b      	lsls	r3, r3, #16
 800de7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800de7e:	431a      	orrs	r2, r3
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	691b      	ldr	r3, [r3, #16]
 800de84:	3b01      	subs	r3, #1
 800de86:	061b      	lsls	r3, r3, #24
 800de88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800de8c:	4931      	ldr	r1, [pc, #196]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800de8e:	4313      	orrs	r3, r2
 800de90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800de92:	4b30      	ldr	r3, [pc, #192]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800de94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	695b      	ldr	r3, [r3, #20]
 800de9e:	492d      	ldr	r1, [pc, #180]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800dea0:	4313      	orrs	r3, r2
 800dea2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dea4:	4b2b      	ldr	r3, [pc, #172]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800dea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	699b      	ldr	r3, [r3, #24]
 800deb0:	4928      	ldr	r1, [pc, #160]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800deb2:	4313      	orrs	r3, r2
 800deb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800deb6:	4b27      	ldr	r3, [pc, #156]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800deb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deba:	4a26      	ldr	r2, [pc, #152]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800debc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dec0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dec2:	4b24      	ldr	r3, [pc, #144]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800dec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dec6:	4b24      	ldr	r3, [pc, #144]	; (800df58 <RCCEx_PLL3_Config+0x160>)
 800dec8:	4013      	ands	r3, r2
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	69d2      	ldr	r2, [r2, #28]
 800dece:	00d2      	lsls	r2, r2, #3
 800ded0:	4920      	ldr	r1, [pc, #128]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800ded2:	4313      	orrs	r3, r2
 800ded4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ded6:	4b1f      	ldr	r3, [pc, #124]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800ded8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deda:	4a1e      	ldr	r2, [pc, #120]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800dedc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dee0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d106      	bne.n	800def6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dee8:	4b1a      	ldr	r3, [pc, #104]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800deea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deec:	4a19      	ldr	r2, [pc, #100]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800deee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800def2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800def4:	e00f      	b.n	800df16 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	2b01      	cmp	r3, #1
 800defa:	d106      	bne.n	800df0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800defc:	4b15      	ldr	r3, [pc, #84]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800defe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df00:	4a14      	ldr	r2, [pc, #80]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800df02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800df06:	62d3      	str	r3, [r2, #44]	; 0x2c
 800df08:	e005      	b.n	800df16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800df0a:	4b12      	ldr	r3, [pc, #72]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800df0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0e:	4a11      	ldr	r2, [pc, #68]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800df10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800df14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800df16:	4b0f      	ldr	r3, [pc, #60]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4a0e      	ldr	r2, [pc, #56]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800df1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df22:	f7f6 f8fd 	bl	8004120 <HAL_GetTick>
 800df26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800df28:	e008      	b.n	800df3c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800df2a:	f7f6 f8f9 	bl	8004120 <HAL_GetTick>
 800df2e:	4602      	mov	r2, r0
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	1ad3      	subs	r3, r2, r3
 800df34:	2b02      	cmp	r3, #2
 800df36:	d901      	bls.n	800df3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800df38:	2303      	movs	r3, #3
 800df3a:	e006      	b.n	800df4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800df3c:	4b05      	ldr	r3, [pc, #20]	; (800df54 <RCCEx_PLL3_Config+0x15c>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df44:	2b00      	cmp	r3, #0
 800df46:	d0f0      	beq.n	800df2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800df48:	7bfb      	ldrb	r3, [r7, #15]
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3710      	adds	r7, #16
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
 800df52:	bf00      	nop
 800df54:	58024400 	.word	0x58024400
 800df58:	ffff0007 	.word	0xffff0007

0800df5c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b08a      	sub	sp, #40	; 0x28
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d101      	bne.n	800df6e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800df6a:	2301      	movs	r3, #1
 800df6c:	e075      	b.n	800e05a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df74:	b2db      	uxtb	r3, r3
 800df76:	2b00      	cmp	r3, #0
 800df78:	d105      	bne.n	800df86 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2200      	movs	r2, #0
 800df7e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f7f5 f965 	bl	8003250 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2204      	movs	r2, #4
 800df8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 f868 	bl	800e064 <HAL_SD_InitCard>
 800df94:	4603      	mov	r3, r0
 800df96:	2b00      	cmp	r3, #0
 800df98:	d001      	beq.n	800df9e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800df9a:	2301      	movs	r3, #1
 800df9c:	e05d      	b.n	800e05a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800df9e:	f107 0308 	add.w	r3, r7, #8
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 fdaf 	bl	800eb08 <HAL_SD_GetCardStatus>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d001      	beq.n	800dfb4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	e052      	b.n	800e05a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800dfb4:	7e3b      	ldrb	r3, [r7, #24]
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800dfba:	7e7b      	ldrb	r3, [r7, #25]
 800dfbc:	b2db      	uxtb	r3, r3
 800dfbe:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d10a      	bne.n	800dfde <HAL_SD_Init+0x82>
 800dfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d102      	bne.n	800dfd4 <HAL_SD_Init+0x78>
 800dfce:	6a3b      	ldr	r3, [r7, #32]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d004      	beq.n	800dfde <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfda:	659a      	str	r2, [r3, #88]	; 0x58
 800dfdc:	e00b      	b.n	800dff6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	d104      	bne.n	800dff0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dfec:	659a      	str	r2, [r3, #88]	; 0x58
 800dfee:	e002      	b.n	800dff6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2200      	movs	r2, #0
 800dff4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	4619      	mov	r1, r3
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f000 fe6d 	bl	800ecdc <HAL_SD_ConfigWideBusOperation>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d001      	beq.n	800e00c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800e008:	2301      	movs	r3, #1
 800e00a:	e026      	b.n	800e05a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800e00c:	f7f6 f888 	bl	8004120 <HAL_GetTick>
 800e010:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e012:	e011      	b.n	800e038 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e014:	f7f6 f884 	bl	8004120 <HAL_GetTick>
 800e018:	4602      	mov	r2, r0
 800e01a:	69fb      	ldr	r3, [r7, #28]
 800e01c:	1ad3      	subs	r3, r2, r3
 800e01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e022:	d109      	bne.n	800e038 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e02a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800e034:	2303      	movs	r3, #3
 800e036:	e010      	b.n	800e05a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f000 ff61 	bl	800ef00 <HAL_SD_GetCardState>
 800e03e:	4603      	mov	r3, r0
 800e040:	2b04      	cmp	r3, #4
 800e042:	d1e7      	bne.n	800e014 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2200      	movs	r2, #0
 800e048:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2200      	movs	r2, #0
 800e04e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2201      	movs	r2, #1
 800e054:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3728      	adds	r7, #40	; 0x28
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
	...

0800e064 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e064:	b590      	push	{r4, r7, lr}
 800e066:	b08d      	sub	sp, #52	; 0x34
 800e068:	af02      	add	r7, sp, #8
 800e06a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e06c:	2300      	movs	r3, #0
 800e06e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e070:	2300      	movs	r3, #0
 800e072:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e074:	2300      	movs	r3, #0
 800e076:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e078:	2300      	movs	r3, #0
 800e07a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e07c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e080:	f04f 0100 	mov.w	r1, #0
 800e084:	f7fe fd24 	bl	800cad0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e088:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800e08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d109      	bne.n	800e0a4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2201      	movs	r2, #1
 800e094:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e09e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	e070      	b.n	800e186 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a6:	0a1b      	lsrs	r3, r3, #8
 800e0a8:	4a39      	ldr	r2, [pc, #228]	; (800e190 <HAL_SD_InitCard+0x12c>)
 800e0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ae:	091b      	lsrs	r3, r3, #4
 800e0b0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681c      	ldr	r4, [r3, #0]
 800e0b6:	466a      	mov	r2, sp
 800e0b8:	f107 0318 	add.w	r3, r7, #24
 800e0bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e0c0:	e882 0003 	stmia.w	r2, {r0, r1}
 800e0c4:	f107 030c 	add.w	r3, r7, #12
 800e0c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f004 fec4 	bl	8012e58 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f004 ff07 	bl	8012ee8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d005      	beq.n	800e0ec <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	005b      	lsls	r3, r3, #1
 800e0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0ea:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800e0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d007      	beq.n	800e102 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e0f2:	4a28      	ldr	r2, [pc, #160]	; (800e194 <HAL_SD_InitCard+0x130>)
 800e0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7f6 f81b 	bl	8004138 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f000 ffea 	bl	800f0dc <SD_PowerON>
 800e108:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e10a:	6a3b      	ldr	r3, [r7, #32]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00b      	beq.n	800e128 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2201      	movs	r2, #1
 800e114:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e11c:	6a3b      	ldr	r3, [r7, #32]
 800e11e:	431a      	orrs	r2, r3
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e124:	2301      	movs	r3, #1
 800e126:	e02e      	b.n	800e186 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 ff09 	bl	800ef40 <SD_InitCard>
 800e12e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e130:	6a3b      	ldr	r3, [r7, #32]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d00b      	beq.n	800e14e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2201      	movs	r2, #1
 800e13a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e142:	6a3b      	ldr	r3, [r7, #32]
 800e144:	431a      	orrs	r2, r3
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e14a:	2301      	movs	r3, #1
 800e14c:	e01b      	b.n	800e186 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e156:	4618      	mov	r0, r3
 800e158:	f004 ff5c 	bl	8013014 <SDMMC_CmdBlockLength>
 800e15c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e15e:	6a3b      	ldr	r3, [r7, #32]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d00f      	beq.n	800e184 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4a0b      	ldr	r2, [pc, #44]	; (800e198 <HAL_SD_InitCard+0x134>)
 800e16a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e170:	6a3b      	ldr	r3, [r7, #32]
 800e172:	431a      	orrs	r2, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2201      	movs	r2, #1
 800e17c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e180:	2301      	movs	r3, #1
 800e182:	e000      	b.n	800e186 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	372c      	adds	r7, #44	; 0x2c
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd90      	pop	{r4, r7, pc}
 800e18e:	bf00      	nop
 800e190:	014f8b59 	.word	0x014f8b59
 800e194:	00012110 	.word	0x00012110
 800e198:	1fe00fff 	.word	0x1fe00fff

0800e19c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b08c      	sub	sp, #48	; 0x30
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	607a      	str	r2, [r7, #4]
 800e1a8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d107      	bne.n	800e1c4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	e08d      	b.n	800e2e0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1ca:	b2db      	uxtb	r3, r3
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	f040 8086 	bne.w	800e2de <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e1d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	441a      	add	r2, r3
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d907      	bls.n	800e1f6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	e074      	b.n	800e2e0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2203      	movs	r2, #3
 800e1fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2200      	movs	r2, #0
 800e204:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	68ba      	ldr	r2, [r7, #8]
 800e20a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	025a      	lsls	r2, r3, #9
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e218:	2b01      	cmp	r3, #1
 800e21a:	d002      	beq.n	800e222 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800e21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21e:	025b      	lsls	r3, r3, #9
 800e220:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e222:	f04f 33ff 	mov.w	r3, #4294967295
 800e226:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	025b      	lsls	r3, r3, #9
 800e22c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e22e:	2390      	movs	r3, #144	; 0x90
 800e230:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e232:	2302      	movs	r3, #2
 800e234:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e236:	2300      	movs	r3, #0
 800e238:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e23a:	2300      	movs	r3, #0
 800e23c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f107 0210 	add.w	r2, r7, #16
 800e246:	4611      	mov	r1, r2
 800e248:	4618      	mov	r0, r3
 800e24a:	f004 feb7 	bl	8012fbc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	68da      	ldr	r2, [r3, #12]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e25c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	68ba      	ldr	r2, [r7, #8]
 800e264:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2201      	movs	r2, #1
 800e26c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	2b01      	cmp	r3, #1
 800e272:	d90a      	bls.n	800e28a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2282      	movs	r2, #130	; 0x82
 800e278:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e280:	4618      	mov	r0, r3
 800e282:	f004 ff0d 	bl	80130a0 <SDMMC_CmdReadMultiBlock>
 800e286:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e288:	e009      	b.n	800e29e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2281      	movs	r2, #129	; 0x81
 800e28e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e296:	4618      	mov	r0, r3
 800e298:	f004 fedf 	bl	801305a <SDMMC_CmdReadSingleBlock>
 800e29c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d012      	beq.n	800e2ca <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4a0f      	ldr	r2, [pc, #60]	; (800e2e8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e2aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b2:	431a      	orrs	r2, r3
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e00a      	b.n	800e2e0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e2d8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	e000      	b.n	800e2e0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e2de:	2302      	movs	r3, #2
  }
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3730      	adds	r7, #48	; 0x30
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	1fe00fff 	.word	0x1fe00fff

0800e2ec <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b08c      	sub	sp, #48	; 0x30
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	607a      	str	r2, [r7, #4]
 800e2f8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d107      	bne.n	800e314 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e308:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e310:	2301      	movs	r3, #1
 800e312:	e08d      	b.n	800e430 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	f040 8086 	bne.w	800e42e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2200      	movs	r2, #0
 800e326:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	441a      	add	r2, r3
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e332:	429a      	cmp	r2, r3
 800e334:	d907      	bls.n	800e346 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e33a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e342:	2301      	movs	r3, #1
 800e344:	e074      	b.n	800e430 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2203      	movs	r2, #3
 800e34a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2200      	movs	r2, #0
 800e354:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	68ba      	ldr	r2, [r7, #8]
 800e35a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	025a      	lsls	r2, r3, #9
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d002      	beq.n	800e372 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36e:	025b      	lsls	r3, r3, #9
 800e370:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e372:	f04f 33ff 	mov.w	r3, #4294967295
 800e376:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	025b      	lsls	r3, r3, #9
 800e37c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e37e:	2390      	movs	r3, #144	; 0x90
 800e380:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e382:	2300      	movs	r3, #0
 800e384:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e386:	2300      	movs	r3, #0
 800e388:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e38a:	2300      	movs	r3, #0
 800e38c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f107 0210 	add.w	r2, r7, #16
 800e396:	4611      	mov	r1, r2
 800e398:	4618      	mov	r0, r3
 800e39a:	f004 fe0f 	bl	8012fbc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	68da      	ldr	r2, [r3, #12]
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3ac:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	68ba      	ldr	r2, [r7, #8]
 800e3b4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d90a      	bls.n	800e3da <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	22a0      	movs	r2, #160	; 0xa0
 800e3c8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f004 feab 	bl	801312c <SDMMC_CmdWriteMultiBlock>
 800e3d6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e3d8:	e009      	b.n	800e3ee <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2290      	movs	r2, #144	; 0x90
 800e3de:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f004 fe7d 	bl	80130e6 <SDMMC_CmdWriteSingleBlock>
 800e3ec:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d012      	beq.n	800e41a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4a0f      	ldr	r2, [pc, #60]	; (800e438 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e3fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e402:	431a      	orrs	r2, r3
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2201      	movs	r2, #1
 800e40c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2200      	movs	r2, #0
 800e414:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e416:	2301      	movs	r3, #1
 800e418:	e00a      	b.n	800e430 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800e428:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e42a:	2300      	movs	r3, #0
 800e42c:	e000      	b.n	800e430 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e42e:	2302      	movs	r3, #2
  }
}
 800e430:	4618      	mov	r0, r3
 800e432:	3730      	adds	r7, #48	; 0x30
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	1fe00fff 	.word	0x1fe00fff

0800e43c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e448:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e454:	2b00      	cmp	r3, #0
 800e456:	d008      	beq.n	800e46a <HAL_SD_IRQHandler+0x2e>
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	f003 0308 	and.w	r3, r3, #8
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d003      	beq.n	800e46a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f001 f926 	bl	800f6b4 <SD_Read_IT>
 800e468:	e19a      	b.n	800e7a0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e474:	2b00      	cmp	r3, #0
 800e476:	f000 80ac 	beq.w	800e5d2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e482:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	4b59      	ldr	r3, [pc, #356]	; (800e5f4 <HAL_SD_IRQHandler+0x1b8>)
 800e490:	400b      	ands	r3, r1
 800e492:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e4a2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	68da      	ldr	r2, [r3, #12]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4b2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	f003 0308 	and.w	r3, r3, #8
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d038      	beq.n	800e530 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f003 0302 	and.w	r3, r3, #2
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d104      	bne.n	800e4d2 <HAL_SD_IRQHandler+0x96>
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f003 0320 	and.w	r3, r3, #32
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d011      	beq.n	800e4f6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f004 fe4c 	bl	8013174 <SDMMC_CmdStopTransfer>
 800e4dc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d008      	beq.n	800e4f6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	431a      	orrs	r2, r3
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 f95b 	bl	800e7ac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	4a3f      	ldr	r2, [pc, #252]	; (800e5f8 <HAL_SD_IRQHandler+0x1bc>)
 800e4fc:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2201      	movs	r2, #1
 800e502:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f003 0301 	and.w	r3, r3, #1
 800e512:	2b00      	cmp	r3, #0
 800e514:	d104      	bne.n	800e520 <HAL_SD_IRQHandler+0xe4>
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f003 0302 	and.w	r3, r3, #2
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d003      	beq.n	800e528 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f006 fe55 	bl	80151d0 <HAL_SD_RxCpltCallback>
 800e526:	e13b      	b.n	800e7a0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f006 fe47 	bl	80151bc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e52e:	e137      	b.n	800e7a0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e536:	2b00      	cmp	r3, #0
 800e538:	f000 8132 	beq.w	800e7a0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2200      	movs	r2, #0
 800e542:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2200      	movs	r2, #0
 800e54a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2200      	movs	r2, #0
 800e552:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f003 0302 	and.w	r3, r3, #2
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d104      	bne.n	800e568 <HAL_SD_IRQHandler+0x12c>
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	f003 0320 	and.w	r3, r3, #32
 800e564:	2b00      	cmp	r3, #0
 800e566:	d011      	beq.n	800e58c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	4618      	mov	r0, r3
 800e56e:	f004 fe01 	bl	8013174 <SDMMC_CmdStopTransfer>
 800e572:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d008      	beq.n	800e58c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	431a      	orrs	r2, r3
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f000 f910 	bl	800e7ac <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2201      	movs	r2, #1
 800e590:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2200      	movs	r2, #0
 800e598:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f003 0310 	and.w	r3, r3, #16
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d104      	bne.n	800e5ae <HAL_SD_IRQHandler+0x172>
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f003 0320 	and.w	r3, r3, #32
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d002      	beq.n	800e5b4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f006 fe04 	bl	80151bc <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f003 0301 	and.w	r3, r3, #1
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d105      	bne.n	800e5ca <HAL_SD_IRQHandler+0x18e>
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	f003 0302 	and.w	r3, r3, #2
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f000 80eb 	beq.w	800e7a0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f006 fe00 	bl	80151d0 <HAL_SD_RxCpltCallback>
}
 800e5d0:	e0e6      	b.n	800e7a0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d00d      	beq.n	800e5fc <HAL_SD_IRQHandler+0x1c0>
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f003 0308 	and.w	r3, r3, #8
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d008      	beq.n	800e5fc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f001 f8a8 	bl	800f740 <SD_Write_IT>
 800e5f0:	e0d6      	b.n	800e7a0 <HAL_SD_IRQHandler+0x364>
 800e5f2:	bf00      	nop
 800e5f4:	ffff3ec5 	.word	0xffff3ec5
 800e5f8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e602:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800e606:	2b00      	cmp	r3, #0
 800e608:	f000 809d 	beq.w	800e746 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e612:	f003 0302 	and.w	r3, r3, #2
 800e616:	2b00      	cmp	r3, #0
 800e618:	d005      	beq.n	800e626 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e61e:	f043 0202 	orr.w	r2, r3, #2
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e62c:	f003 0308 	and.w	r3, r3, #8
 800e630:	2b00      	cmp	r3, #0
 800e632:	d005      	beq.n	800e640 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e638:	f043 0208 	orr.w	r2, r3, #8
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e646:	f003 0320 	and.w	r3, r3, #32
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d005      	beq.n	800e65a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e652:	f043 0220 	orr.w	r2, r3, #32
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e660:	f003 0310 	and.w	r3, r3, #16
 800e664:	2b00      	cmp	r3, #0
 800e666:	d005      	beq.n	800e674 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e66c:	f043 0210 	orr.w	r2, r3, #16
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4a4b      	ldr	r2, [pc, #300]	; (800e7a8 <HAL_SD_IRQHandler+0x36c>)
 800e67a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e68a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	68da      	ldr	r2, [r3, #12]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e69a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e6aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	68da      	ldr	r2, [r3, #12]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e6ba:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f004 fd57 	bl	8013174 <SDMMC_CmdStopTransfer>
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6cc:	431a      	orrs	r2, r3
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	68da      	ldr	r2, [r3, #12]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e6e0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e6ea:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f003 0308 	and.w	r3, r3, #8
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d00a      	beq.n	800e70c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2200      	movs	r2, #0
 800e702:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f000 f851 	bl	800e7ac <HAL_SD_ErrorCallback>
}
 800e70a:	e049      	b.n	800e7a0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e712:	2b00      	cmp	r3, #0
 800e714:	d044      	beq.n	800e7a0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d040      	beq.n	800e7a0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e72c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2200      	movs	r2, #0
 800e734:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2201      	movs	r2, #1
 800e73a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f000 f834 	bl	800e7ac <HAL_SD_ErrorCallback>
}
 800e744:	e02c      	b.n	800e7a0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e74c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e750:	2b00      	cmp	r3, #0
 800e752:	d025      	beq.n	800e7a0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e75c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e764:	f003 0304 	and.w	r3, r3, #4
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d10c      	bne.n	800e786 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f003 0320 	and.w	r3, r3, #32
 800e772:	2b00      	cmp	r3, #0
 800e774:	d003      	beq.n	800e77e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f001 f84a 	bl	800f810 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800e77c:	e010      	b.n	800e7a0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f001 f832 	bl	800f7e8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800e784:	e00c      	b.n	800e7a0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f003 0320 	and.w	r3, r3, #32
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d003      	beq.n	800e798 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f001 f833 	bl	800f7fc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800e796:	e003      	b.n	800e7a0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f001 f81b 	bl	800f7d4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800e79e:	e7ff      	b.n	800e7a0 <HAL_SD_IRQHandler+0x364>
 800e7a0:	bf00      	nop
 800e7a2:	3710      	adds	r7, #16
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	18000f3a 	.word	0x18000f3a

0800e7ac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e7b4:	bf00      	nop
 800e7b6:	370c      	adds	r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr

0800e7c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b083      	sub	sp, #12
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7ce:	0f9b      	lsrs	r3, r3, #30
 800e7d0:	b2da      	uxtb	r2, r3
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7da:	0e9b      	lsrs	r3, r3, #26
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	f003 030f 	and.w	r3, r3, #15
 800e7e2:	b2da      	uxtb	r2, r3
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7ec:	0e1b      	lsrs	r3, r3, #24
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	f003 0303 	and.w	r3, r3, #3
 800e7f4:	b2da      	uxtb	r2, r3
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7fe:	0c1b      	lsrs	r3, r3, #16
 800e800:	b2da      	uxtb	r2, r3
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e80a:	0a1b      	lsrs	r3, r3, #8
 800e80c:	b2da      	uxtb	r2, r3
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e816:	b2da      	uxtb	r2, r3
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e820:	0d1b      	lsrs	r3, r3, #20
 800e822:	b29a      	uxth	r2, r3
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e82c:	0c1b      	lsrs	r3, r3, #16
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	f003 030f 	and.w	r3, r3, #15
 800e834:	b2da      	uxtb	r2, r3
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e83e:	0bdb      	lsrs	r3, r3, #15
 800e840:	b2db      	uxtb	r3, r3
 800e842:	f003 0301 	and.w	r3, r3, #1
 800e846:	b2da      	uxtb	r2, r3
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e850:	0b9b      	lsrs	r3, r3, #14
 800e852:	b2db      	uxtb	r3, r3
 800e854:	f003 0301 	and.w	r3, r3, #1
 800e858:	b2da      	uxtb	r2, r3
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e862:	0b5b      	lsrs	r3, r3, #13
 800e864:	b2db      	uxtb	r3, r3
 800e866:	f003 0301 	and.w	r3, r3, #1
 800e86a:	b2da      	uxtb	r2, r3
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e874:	0b1b      	lsrs	r3, r3, #12
 800e876:	b2db      	uxtb	r3, r3
 800e878:	f003 0301 	and.w	r3, r3, #1
 800e87c:	b2da      	uxtb	r2, r3
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	2200      	movs	r2, #0
 800e886:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d163      	bne.n	800e958 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e894:	009a      	lsls	r2, r3, #2
 800e896:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e89a:	4013      	ands	r3, r2
 800e89c:	687a      	ldr	r2, [r7, #4]
 800e89e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e8a0:	0f92      	lsrs	r2, r2, #30
 800e8a2:	431a      	orrs	r2, r3
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8ac:	0edb      	lsrs	r3, r3, #27
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	f003 0307 	and.w	r3, r3, #7
 800e8b4:	b2da      	uxtb	r2, r3
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8be:	0e1b      	lsrs	r3, r3, #24
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	f003 0307 	and.w	r3, r3, #7
 800e8c6:	b2da      	uxtb	r2, r3
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8d0:	0d5b      	lsrs	r3, r3, #21
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	f003 0307 	and.w	r3, r3, #7
 800e8d8:	b2da      	uxtb	r2, r3
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8e2:	0c9b      	lsrs	r3, r3, #18
 800e8e4:	b2db      	uxtb	r3, r3
 800e8e6:	f003 0307 	and.w	r3, r3, #7
 800e8ea:	b2da      	uxtb	r2, r3
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8f4:	0bdb      	lsrs	r3, r3, #15
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	f003 0307 	and.w	r3, r3, #7
 800e8fc:	b2da      	uxtb	r2, r3
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	691b      	ldr	r3, [r3, #16]
 800e906:	1c5a      	adds	r2, r3, #1
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	7e1b      	ldrb	r3, [r3, #24]
 800e910:	b2db      	uxtb	r3, r3
 800e912:	f003 0307 	and.w	r3, r3, #7
 800e916:	3302      	adds	r3, #2
 800e918:	2201      	movs	r2, #1
 800e91a:	fa02 f303 	lsl.w	r3, r2, r3
 800e91e:	687a      	ldr	r2, [r7, #4]
 800e920:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e922:	fb03 f202 	mul.w	r2, r3, r2
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	7a1b      	ldrb	r3, [r3, #8]
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	f003 030f 	and.w	r3, r3, #15
 800e934:	2201      	movs	r2, #1
 800e936:	409a      	lsls	r2, r3
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e944:	0a52      	lsrs	r2, r2, #9
 800e946:	fb03 f202 	mul.w	r2, r3, r2
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e954:	655a      	str	r2, [r3, #84]	; 0x54
 800e956:	e031      	b.n	800e9bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d11d      	bne.n	800e99c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e964:	041b      	lsls	r3, r3, #16
 800e966:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e96e:	0c1b      	lsrs	r3, r3, #16
 800e970:	431a      	orrs	r2, r3
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	691b      	ldr	r3, [r3, #16]
 800e97a:	3301      	adds	r3, #1
 800e97c:	029a      	lsls	r2, r3, #10
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e990:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	655a      	str	r2, [r3, #84]	; 0x54
 800e99a:	e00f      	b.n	800e9bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4a58      	ldr	r2, [pc, #352]	; (800eb04 <HAL_SD_GetCardCSD+0x344>)
 800e9a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	e09d      	b.n	800eaf8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9c0:	0b9b      	lsrs	r3, r3, #14
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	f003 0301 	and.w	r3, r3, #1
 800e9c8:	b2da      	uxtb	r2, r3
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9d2:	09db      	lsrs	r3, r3, #7
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9da:	b2da      	uxtb	r2, r3
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9ea:	b2da      	uxtb	r2, r3
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9f4:	0fdb      	lsrs	r3, r3, #31
 800e9f6:	b2da      	uxtb	r2, r3
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea00:	0f5b      	lsrs	r3, r3, #29
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	f003 0303 	and.w	r3, r3, #3
 800ea08:	b2da      	uxtb	r2, r3
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea12:	0e9b      	lsrs	r3, r3, #26
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	f003 0307 	and.w	r3, r3, #7
 800ea1a:	b2da      	uxtb	r2, r3
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea24:	0d9b      	lsrs	r3, r3, #22
 800ea26:	b2db      	uxtb	r3, r3
 800ea28:	f003 030f 	and.w	r3, r3, #15
 800ea2c:	b2da      	uxtb	r2, r3
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea36:	0d5b      	lsrs	r3, r3, #21
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	f003 0301 	and.w	r3, r3, #1
 800ea3e:	b2da      	uxtb	r2, r3
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea52:	0c1b      	lsrs	r3, r3, #16
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	f003 0301 	and.w	r3, r3, #1
 800ea5a:	b2da      	uxtb	r2, r3
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea66:	0bdb      	lsrs	r3, r3, #15
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	f003 0301 	and.w	r3, r3, #1
 800ea6e:	b2da      	uxtb	r2, r3
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea7a:	0b9b      	lsrs	r3, r3, #14
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	f003 0301 	and.w	r3, r3, #1
 800ea82:	b2da      	uxtb	r2, r3
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea8e:	0b5b      	lsrs	r3, r3, #13
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	f003 0301 	and.w	r3, r3, #1
 800ea96:	b2da      	uxtb	r2, r3
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eaa2:	0b1b      	lsrs	r3, r3, #12
 800eaa4:	b2db      	uxtb	r3, r3
 800eaa6:	f003 0301 	and.w	r3, r3, #1
 800eaaa:	b2da      	uxtb	r2, r3
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eab6:	0a9b      	lsrs	r3, r3, #10
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	f003 0303 	and.w	r3, r3, #3
 800eabe:	b2da      	uxtb	r2, r3
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eaca:	0a1b      	lsrs	r3, r3, #8
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	f003 0303 	and.w	r3, r3, #3
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eade:	085b      	lsrs	r3, r3, #1
 800eae0:	b2db      	uxtb	r3, r3
 800eae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eae6:	b2da      	uxtb	r2, r3
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800eaf6:	2300      	movs	r3, #0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	370c      	adds	r7, #12
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr
 800eb04:	1fe00fff 	.word	0x1fe00fff

0800eb08 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b094      	sub	sp, #80	; 0x50
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800eb12:	2300      	movs	r3, #0
 800eb14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	2b03      	cmp	r3, #3
 800eb22:	d101      	bne.n	800eb28 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800eb24:	2301      	movs	r3, #1
 800eb26:	e0a7      	b.n	800ec78 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800eb28:	f107 0308 	add.w	r3, r7, #8
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f000 fb62 	bl	800f1f8 <SD_SendSDStatus>
 800eb34:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d011      	beq.n	800eb60 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4a4f      	ldr	r2, [pc, #316]	; (800ec80 <HAL_SD_GetCardStatus+0x178>)
 800eb42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb4a:	431a      	orrs	r2, r3
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2201      	movs	r2, #1
 800eb54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800eb58:	2301      	movs	r3, #1
 800eb5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800eb5e:	e070      	b.n	800ec42 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	099b      	lsrs	r3, r3, #6
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	f003 0303 	and.w	r3, r3, #3
 800eb6a:	b2da      	uxtb	r2, r3
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	095b      	lsrs	r3, r3, #5
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	f003 0301 	and.w	r3, r3, #1
 800eb7a:	b2da      	uxtb	r2, r3
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	0a1b      	lsrs	r3, r3, #8
 800eb84:	b29b      	uxth	r3, r3
 800eb86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800eb8a:	b29a      	uxth	r2, r3
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	0e1b      	lsrs	r3, r3, #24
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	4313      	orrs	r3, r2
 800eb94:	b29a      	uxth	r2, r3
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	061a      	lsls	r2, r3, #24
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	021b      	lsls	r3, r3, #8
 800eba2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eba6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	0a1b      	lsrs	r3, r3, #8
 800ebac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ebb0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	0e1b      	lsrs	r3, r3, #24
 800ebb6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	b2da      	uxtb	r2, r3
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	0a1b      	lsrs	r3, r3, #8
 800ebc8:	b2da      	uxtb	r2, r3
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	0d1b      	lsrs	r3, r3, #20
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	f003 030f 	and.w	r3, r3, #15
 800ebd8:	b2da      	uxtb	r2, r3
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	0c1b      	lsrs	r3, r3, #16
 800ebe2:	b29b      	uxth	r3, r3
 800ebe4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ebe8:	b29a      	uxth	r2, r3
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	b29a      	uxth	r2, r3
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	0a9b      	lsrs	r3, r3, #10
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec04:	b2da      	uxtb	r2, r3
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	0a1b      	lsrs	r3, r3, #8
 800ec0e:	b2db      	uxtb	r3, r3
 800ec10:	f003 0303 	and.w	r3, r3, #3
 800ec14:	b2da      	uxtb	r2, r3
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	091b      	lsrs	r3, r3, #4
 800ec1e:	b2db      	uxtb	r3, r3
 800ec20:	f003 030f 	and.w	r3, r3, #15
 800ec24:	b2da      	uxtb	r2, r3
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	b2db      	uxtb	r3, r3
 800ec2e:	f003 030f 	and.w	r3, r3, #15
 800ec32:	b2da      	uxtb	r2, r3
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ec38:	69bb      	ldr	r3, [r7, #24]
 800ec3a:	0e1b      	lsrs	r3, r3, #24
 800ec3c:	b2da      	uxtb	r2, r3
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f004 f9e2 	bl	8013014 <SDMMC_CmdBlockLength>
 800ec50:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d00d      	beq.n	800ec74 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4a08      	ldr	r2, [pc, #32]	; (800ec80 <HAL_SD_GetCardStatus+0x178>)
 800ec5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec64:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2201      	movs	r2, #1
 800ec6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ec6e:	2301      	movs	r3, #1
 800ec70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800ec74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3750      	adds	r7, #80	; 0x50
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	1fe00fff 	.word	0x1fe00fff

0800ec84 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ecce:	2300      	movs	r3, #0
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ecdc:	b590      	push	{r4, r7, lr}
 800ecde:	b08d      	sub	sp, #52	; 0x34
 800ece0:	af02      	add	r7, sp, #8
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800ece6:	2300      	movs	r3, #0
 800ece8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2203      	movs	r2, #3
 800ecf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecf8:	2b03      	cmp	r3, #3
 800ecfa:	d02e      	beq.n	800ed5a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed02:	d106      	bne.n	800ed12 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	635a      	str	r2, [r3, #52]	; 0x34
 800ed10:	e029      	b.n	800ed66 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ed18:	d10a      	bne.n	800ed30 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f000 fb64 	bl	800f3e8 <SD_WideBus_Enable>
 800ed20:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed26:	6a3b      	ldr	r3, [r7, #32]
 800ed28:	431a      	orrs	r2, r3
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	635a      	str	r2, [r3, #52]	; 0x34
 800ed2e:	e01a      	b.n	800ed66 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d10a      	bne.n	800ed4c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f000 fba1 	bl	800f47e <SD_WideBus_Disable>
 800ed3c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed42:	6a3b      	ldr	r3, [r7, #32]
 800ed44:	431a      	orrs	r2, r3
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	635a      	str	r2, [r3, #52]	; 0x34
 800ed4a:	e00c      	b.n	800ed66 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed50:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	635a      	str	r2, [r3, #52]	; 0x34
 800ed58:	e005      	b.n	800ed66 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed5e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d007      	beq.n	800ed7e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	4a5f      	ldr	r2, [pc, #380]	; (800eef0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ed74:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ed76:	2301      	movs	r3, #1
 800ed78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed7c:	e096      	b.n	800eeac <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ed7e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ed82:	f04f 0100 	mov.w	r1, #0
 800ed86:	f7fd fea3 	bl	800cad0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ed8a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ed8c:	69fb      	ldr	r3, [r7, #28]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	f000 8083 	beq.w	800ee9a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	689b      	ldr	r3, [r3, #8]
 800ed9e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	691b      	ldr	r3, [r3, #16]
 800eda8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	695a      	ldr	r2, [r3, #20]
 800edae:	69fb      	ldr	r3, [r7, #28]
 800edb0:	4950      	ldr	r1, [pc, #320]	; (800eef4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800edb2:	fba1 1303 	umull	r1, r3, r1, r3
 800edb6:	0e1b      	lsrs	r3, r3, #24
 800edb8:	429a      	cmp	r2, r3
 800edba:	d303      	bcc.n	800edc4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	695b      	ldr	r3, [r3, #20]
 800edc0:	61bb      	str	r3, [r7, #24]
 800edc2:	e05a      	b.n	800ee7a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edcc:	d103      	bne.n	800edd6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	695b      	ldr	r3, [r3, #20]
 800edd2:	61bb      	str	r3, [r7, #24]
 800edd4:	e051      	b.n	800ee7a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edde:	d126      	bne.n	800ee2e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	695b      	ldr	r3, [r3, #20]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d10e      	bne.n	800ee06 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	4a43      	ldr	r2, [pc, #268]	; (800eef8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800edec:	4293      	cmp	r3, r2
 800edee:	d906      	bls.n	800edfe <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	4a40      	ldr	r2, [pc, #256]	; (800eef4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800edf4:	fba2 2303 	umull	r2, r3, r2, r3
 800edf8:	0e5b      	lsrs	r3, r3, #25
 800edfa:	61bb      	str	r3, [r7, #24]
 800edfc:	e03d      	b.n	800ee7a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	695b      	ldr	r3, [r3, #20]
 800ee02:	61bb      	str	r3, [r7, #24]
 800ee04:	e039      	b.n	800ee7a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	695b      	ldr	r3, [r3, #20]
 800ee0a:	005b      	lsls	r3, r3, #1
 800ee0c:	69fa      	ldr	r2, [r7, #28]
 800ee0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee12:	4a39      	ldr	r2, [pc, #228]	; (800eef8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d906      	bls.n	800ee26 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	4a36      	ldr	r2, [pc, #216]	; (800eef4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ee1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ee20:	0e5b      	lsrs	r3, r3, #25
 800ee22:	61bb      	str	r3, [r7, #24]
 800ee24:	e029      	b.n	800ee7a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	695b      	ldr	r3, [r3, #20]
 800ee2a:	61bb      	str	r3, [r7, #24]
 800ee2c:	e025      	b.n	800ee7a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	695b      	ldr	r3, [r3, #20]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d10e      	bne.n	800ee54 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ee36:	69fb      	ldr	r3, [r7, #28]
 800ee38:	4a30      	ldr	r2, [pc, #192]	; (800eefc <HAL_SD_ConfigWideBusOperation+0x220>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d906      	bls.n	800ee4c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ee3e:	69fb      	ldr	r3, [r7, #28]
 800ee40:	4a2c      	ldr	r2, [pc, #176]	; (800eef4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ee42:	fba2 2303 	umull	r2, r3, r2, r3
 800ee46:	0e1b      	lsrs	r3, r3, #24
 800ee48:	61bb      	str	r3, [r7, #24]
 800ee4a:	e016      	b.n	800ee7a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	695b      	ldr	r3, [r3, #20]
 800ee50:	61bb      	str	r3, [r7, #24]
 800ee52:	e012      	b.n	800ee7a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	695b      	ldr	r3, [r3, #20]
 800ee58:	005b      	lsls	r3, r3, #1
 800ee5a:	69fa      	ldr	r2, [r7, #28]
 800ee5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee60:	4a26      	ldr	r2, [pc, #152]	; (800eefc <HAL_SD_ConfigWideBusOperation+0x220>)
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d906      	bls.n	800ee74 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ee66:	69fb      	ldr	r3, [r7, #28]
 800ee68:	4a22      	ldr	r2, [pc, #136]	; (800eef4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ee6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ee6e:	0e1b      	lsrs	r3, r3, #24
 800ee70:	61bb      	str	r3, [r7, #24]
 800ee72:	e002      	b.n	800ee7a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	695b      	ldr	r3, [r3, #20]
 800ee78:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681c      	ldr	r4, [r3, #0]
 800ee7e:	466a      	mov	r2, sp
 800ee80:	f107 0314 	add.w	r3, r7, #20
 800ee84:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ee88:	e882 0003 	stmia.w	r2, {r0, r1}
 800ee8c:	f107 0308 	add.w	r3, r7, #8
 800ee90:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ee92:	4620      	mov	r0, r4
 800ee94:	f003 ffe0 	bl	8012e58 <SDMMC_Init>
 800ee98:	e008      	b.n	800eeac <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800eea6:	2301      	movs	r3, #1
 800eea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f004 f8ad 	bl	8013014 <SDMMC_CmdBlockLength>
 800eeba:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eebc:	6a3b      	ldr	r3, [r7, #32]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d00c      	beq.n	800eedc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a0a      	ldr	r2, [pc, #40]	; (800eef0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800eec8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eece:	6a3b      	ldr	r3, [r7, #32]
 800eed0:	431a      	orrs	r2, r3
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800eed6:	2301      	movs	r3, #1
 800eed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2201      	movs	r2, #1
 800eee0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800eee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	372c      	adds	r7, #44	; 0x2c
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd90      	pop	{r4, r7, pc}
 800eef0:	1fe00fff 	.word	0x1fe00fff
 800eef4:	55e63b89 	.word	0x55e63b89
 800eef8:	02faf080 	.word	0x02faf080
 800eefc:	017d7840 	.word	0x017d7840

0800ef00 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b086      	sub	sp, #24
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ef0c:	f107 030c 	add.w	r3, r7, #12
 800ef10:	4619      	mov	r1, r3
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f000 fa40 	bl	800f398 <SD_SendStatus>
 800ef18:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d005      	beq.n	800ef2c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	431a      	orrs	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	0a5b      	lsrs	r3, r3, #9
 800ef30:	f003 030f 	and.w	r3, r3, #15
 800ef34:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ef36:	693b      	ldr	r3, [r7, #16]
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3718      	adds	r7, #24
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b090      	sub	sp, #64	; 0x40
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ef4c:	f7f5 f8e8 	bl	8004120 <HAL_GetTick>
 800ef50:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	4618      	mov	r0, r3
 800ef58:	f003 ffd7 	bl	8012f0a <SDMMC_GetPowerState>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d102      	bne.n	800ef68 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ef62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ef66:	e0b5      	b.n	800f0d4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef6c:	2b03      	cmp	r3, #3
 800ef6e:	d02e      	beq.n	800efce <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	4618      	mov	r0, r3
 800ef76:	f004 fa22 	bl	80133be <SDMMC_CmdSendCID>
 800ef7a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ef7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d001      	beq.n	800ef86 <SD_InitCard+0x46>
    {
      return errorstate;
 800ef82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef84:	e0a6      	b.n	800f0d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2100      	movs	r1, #0
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f004 f802 	bl	8012f96 <SDMMC_GetResponse>
 800ef92:	4602      	mov	r2, r0
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2104      	movs	r1, #4
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f003 fff9 	bl	8012f96 <SDMMC_GetResponse>
 800efa4:	4602      	mov	r2, r0
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	2108      	movs	r1, #8
 800efb0:	4618      	mov	r0, r3
 800efb2:	f003 fff0 	bl	8012f96 <SDMMC_GetResponse>
 800efb6:	4602      	mov	r2, r0
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	210c      	movs	r1, #12
 800efc2:	4618      	mov	r0, r3
 800efc4:	f003 ffe7 	bl	8012f96 <SDMMC_GetResponse>
 800efc8:	4602      	mov	r2, r0
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efd2:	2b03      	cmp	r3, #3
 800efd4:	d01d      	beq.n	800f012 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800efd6:	e019      	b.n	800f00c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f107 020a 	add.w	r2, r7, #10
 800efe0:	4611      	mov	r1, r2
 800efe2:	4618      	mov	r0, r3
 800efe4:	f004 fa2a 	bl	801343c <SDMMC_CmdSetRelAdd>
 800efe8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800efea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efec:	2b00      	cmp	r3, #0
 800efee:	d001      	beq.n	800eff4 <SD_InitCard+0xb4>
      {
        return errorstate;
 800eff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff2:	e06f      	b.n	800f0d4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800eff4:	f7f5 f894 	bl	8004120 <HAL_GetTick>
 800eff8:	4602      	mov	r2, r0
 800effa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800effc:	1ad3      	subs	r3, r2, r3
 800effe:	f241 3287 	movw	r2, #4999	; 0x1387
 800f002:	4293      	cmp	r3, r2
 800f004:	d902      	bls.n	800f00c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800f006:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f00a:	e063      	b.n	800f0d4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800f00c:	897b      	ldrh	r3, [r7, #10]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d0e2      	beq.n	800efd8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f016:	2b03      	cmp	r3, #3
 800f018:	d036      	beq.n	800f088 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f01a:	897b      	ldrh	r3, [r7, #10]
 800f01c:	461a      	mov	r2, r3
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681a      	ldr	r2, [r3, #0]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f02a:	041b      	lsls	r3, r3, #16
 800f02c:	4619      	mov	r1, r3
 800f02e:	4610      	mov	r0, r2
 800f030:	f004 f9e4 	bl	80133fc <SDMMC_CmdSendCSD>
 800f034:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d001      	beq.n	800f040 <SD_InitCard+0x100>
    {
      return errorstate;
 800f03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03e:	e049      	b.n	800f0d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	2100      	movs	r1, #0
 800f046:	4618      	mov	r0, r3
 800f048:	f003 ffa5 	bl	8012f96 <SDMMC_GetResponse>
 800f04c:	4602      	mov	r2, r0
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2104      	movs	r1, #4
 800f058:	4618      	mov	r0, r3
 800f05a:	f003 ff9c 	bl	8012f96 <SDMMC_GetResponse>
 800f05e:	4602      	mov	r2, r0
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	2108      	movs	r1, #8
 800f06a:	4618      	mov	r0, r3
 800f06c:	f003 ff93 	bl	8012f96 <SDMMC_GetResponse>
 800f070:	4602      	mov	r2, r0
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	210c      	movs	r1, #12
 800f07c:	4618      	mov	r0, r3
 800f07e:	f003 ff8a 	bl	8012f96 <SDMMC_GetResponse>
 800f082:	4602      	mov	r2, r0
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	2104      	movs	r1, #4
 800f08e:	4618      	mov	r0, r3
 800f090:	f003 ff81 	bl	8012f96 <SDMMC_GetResponse>
 800f094:	4603      	mov	r3, r0
 800f096:	0d1a      	lsrs	r2, r3, #20
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f09c:	f107 030c 	add.w	r3, r7, #12
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f7ff fb8c 	bl	800e7c0 <HAL_SD_GetCardCSD>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d002      	beq.n	800f0b4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f0ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f0b2:	e00f      	b.n	800f0d4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0bc:	041b      	lsls	r3, r3, #16
 800f0be:	4619      	mov	r1, r3
 800f0c0:	4610      	mov	r0, r2
 800f0c2:	f004 f893 	bl	80131ec <SDMMC_CmdSelDesel>
 800f0c6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800f0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d001      	beq.n	800f0d2 <SD_InitCard+0x192>
  {
    return errorstate;
 800f0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d0:	e000      	b.n	800f0d4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f0d2:	2300      	movs	r3, #0
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3740      	adds	r7, #64	; 0x40
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b086      	sub	sp, #24
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f004 f89c 	bl	8013232 <SDMMC_CmdGoIdleState>
 800f0fa:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d001      	beq.n	800f106 <SD_PowerON+0x2a>
  {
    return errorstate;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	e072      	b.n	800f1ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	4618      	mov	r0, r3
 800f10c:	f004 f8af 	bl	801326e <SDMMC_CmdOperCond>
 800f110:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f118:	d10d      	bne.n	800f136 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2200      	movs	r2, #0
 800f11e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4618      	mov	r0, r3
 800f126:	f004 f884 	bl	8013232 <SDMMC_CmdGoIdleState>
 800f12a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d004      	beq.n	800f13c <SD_PowerON+0x60>
    {
      return errorstate;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	e05a      	b.n	800f1ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2201      	movs	r2, #1
 800f13a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f140:	2b01      	cmp	r3, #1
 800f142:	d137      	bne.n	800f1b4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2100      	movs	r1, #0
 800f14a:	4618      	mov	r0, r3
 800f14c:	f004 f8af 	bl	80132ae <SDMMC_CmdAppCommand>
 800f150:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d02d      	beq.n	800f1b4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f158:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f15c:	e046      	b.n	800f1ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	2100      	movs	r1, #0
 800f164:	4618      	mov	r0, r3
 800f166:	f004 f8a2 	bl	80132ae <SDMMC_CmdAppCommand>
 800f16a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d001      	beq.n	800f176 <SD_PowerON+0x9a>
    {
      return errorstate;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	e03a      	b.n	800f1ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	491e      	ldr	r1, [pc, #120]	; (800f1f4 <SD_PowerON+0x118>)
 800f17c:	4618      	mov	r0, r3
 800f17e:	f004 f8b9 	bl	80132f4 <SDMMC_CmdAppOperCommand>
 800f182:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d002      	beq.n	800f190 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f18a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f18e:	e02d      	b.n	800f1ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2100      	movs	r1, #0
 800f196:	4618      	mov	r0, r3
 800f198:	f003 fefd 	bl	8012f96 <SDMMC_GetResponse>
 800f19c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	0fdb      	lsrs	r3, r3, #31
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d101      	bne.n	800f1aa <SD_PowerON+0xce>
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	e000      	b.n	800f1ac <SD_PowerON+0xd0>
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	613b      	str	r3, [r7, #16]

    count++;
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d802      	bhi.n	800f1c4 <SD_PowerON+0xe8>
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d0cc      	beq.n	800f15e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d902      	bls.n	800f1d4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f1ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f1d2:	e00b      	b.n	800f1ec <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d002      	beq.n	800f1ea <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f1ea:	2300      	movs	r3, #0
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3718      	adds	r7, #24
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}
 800f1f4:	c1100000 	.word	0xc1100000

0800f1f8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b08c      	sub	sp, #48	; 0x30
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f202:	f7f4 ff8d 	bl	8004120 <HAL_GetTick>
 800f206:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	2100      	movs	r1, #0
 800f212:	4618      	mov	r0, r3
 800f214:	f003 febf 	bl	8012f96 <SDMMC_GetResponse>
 800f218:	4603      	mov	r3, r0
 800f21a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f21e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f222:	d102      	bne.n	800f22a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f224:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f228:	e0b0      	b.n	800f38c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	2140      	movs	r1, #64	; 0x40
 800f230:	4618      	mov	r0, r3
 800f232:	f003 feef 	bl	8013014 <SDMMC_CmdBlockLength>
 800f236:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f238:	6a3b      	ldr	r3, [r7, #32]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d005      	beq.n	800f24a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f246:	6a3b      	ldr	r3, [r7, #32]
 800f248:	e0a0      	b.n	800f38c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681a      	ldr	r2, [r3, #0]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f252:	041b      	lsls	r3, r3, #16
 800f254:	4619      	mov	r1, r3
 800f256:	4610      	mov	r0, r2
 800f258:	f004 f829 	bl	80132ae <SDMMC_CmdAppCommand>
 800f25c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f25e:	6a3b      	ldr	r3, [r7, #32]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d005      	beq.n	800f270 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f26c:	6a3b      	ldr	r3, [r7, #32]
 800f26e:	e08d      	b.n	800f38c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f270:	f04f 33ff 	mov.w	r3, #4294967295
 800f274:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f276:	2340      	movs	r3, #64	; 0x40
 800f278:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f27a:	2360      	movs	r3, #96	; 0x60
 800f27c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f27e:	2302      	movs	r3, #2
 800f280:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f282:	2300      	movs	r3, #0
 800f284:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f286:	2301      	movs	r3, #1
 800f288:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f107 0208 	add.w	r2, r7, #8
 800f292:	4611      	mov	r1, r2
 800f294:	4618      	mov	r0, r3
 800f296:	f003 fe91 	bl	8012fbc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f004 f911 	bl	80134c6 <SDMMC_CmdStatusRegister>
 800f2a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f2a6:	6a3b      	ldr	r3, [r7, #32]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d02b      	beq.n	800f304 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f2b4:	6a3b      	ldr	r3, [r7, #32]
 800f2b6:	e069      	b.n	800f38c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d013      	beq.n	800f2ee <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2ca:	e00d      	b.n	800f2e8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f003 fdeb 	bl	8012eac <SDMMC_ReadFIFO>
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2da:	601a      	str	r2, [r3, #0]
        pData++;
 800f2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2de:	3304      	adds	r3, #4
 800f2e0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800f2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ea:	2b07      	cmp	r3, #7
 800f2ec:	d9ee      	bls.n	800f2cc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f2ee:	f7f4 ff17 	bl	8004120 <HAL_GetTick>
 800f2f2:	4602      	mov	r2, r0
 800f2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f6:	1ad3      	subs	r3, r2, r3
 800f2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2fc:	d102      	bne.n	800f304 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f2fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f302:	e043      	b.n	800f38c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f30a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d0d2      	beq.n	800f2b8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f318:	f003 0308 	and.w	r3, r3, #8
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d001      	beq.n	800f324 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f320:	2308      	movs	r3, #8
 800f322:	e033      	b.n	800f38c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f32a:	f003 0302 	and.w	r3, r3, #2
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d001      	beq.n	800f336 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f332:	2302      	movs	r3, #2
 800f334:	e02a      	b.n	800f38c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f33c:	f003 0320 	and.w	r3, r3, #32
 800f340:	2b00      	cmp	r3, #0
 800f342:	d017      	beq.n	800f374 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f344:	2320      	movs	r3, #32
 800f346:	e021      	b.n	800f38c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	4618      	mov	r0, r3
 800f34e:	f003 fdad 	bl	8012eac <SDMMC_ReadFIFO>
 800f352:	4602      	mov	r2, r0
 800f354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f356:	601a      	str	r2, [r3, #0]
    pData++;
 800f358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35a:	3304      	adds	r3, #4
 800f35c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f35e:	f7f4 fedf 	bl	8004120 <HAL_GetTick>
 800f362:	4602      	mov	r2, r0
 800f364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f366:	1ad3      	subs	r3, r2, r3
 800f368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f36c:	d102      	bne.n	800f374 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f36e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f372:	e00b      	b.n	800f38c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f37a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d1e2      	bne.n	800f348 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	4a03      	ldr	r2, [pc, #12]	; (800f394 <SD_SendSDStatus+0x19c>)
 800f388:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800f38a:	2300      	movs	r3, #0
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3730      	adds	r7, #48	; 0x30
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}
 800f394:	18000f3a 	.word	0x18000f3a

0800f398 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b084      	sub	sp, #16
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d102      	bne.n	800f3ae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f3a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f3ac:	e018      	b.n	800f3e0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681a      	ldr	r2, [r3, #0]
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3b6:	041b      	lsls	r3, r3, #16
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	4610      	mov	r0, r2
 800f3bc:	f004 f860 	bl	8013480 <SDMMC_CmdSendStatus>
 800f3c0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d001      	beq.n	800f3cc <SD_SendStatus+0x34>
  {
    return errorstate;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	e009      	b.n	800f3e0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	2100      	movs	r1, #0
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f003 fddf 	bl	8012f96 <SDMMC_GetResponse>
 800f3d8:	4602      	mov	r2, r0
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f3de:	2300      	movs	r3, #0
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3710      	adds	r7, #16
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b086      	sub	sp, #24
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	60fb      	str	r3, [r7, #12]
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	2100      	movs	r1, #0
 800f3fe:	4618      	mov	r0, r3
 800f400:	f003 fdc9 	bl	8012f96 <SDMMC_GetResponse>
 800f404:	4603      	mov	r3, r0
 800f406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f40a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f40e:	d102      	bne.n	800f416 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f410:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f414:	e02f      	b.n	800f476 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f416:	f107 030c 	add.w	r3, r7, #12
 800f41a:	4619      	mov	r1, r3
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f000 f879 	bl	800f514 <SD_FindSCR>
 800f422:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d001      	beq.n	800f42e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	e023      	b.n	800f476 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f434:	2b00      	cmp	r3, #0
 800f436:	d01c      	beq.n	800f472 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681a      	ldr	r2, [r3, #0]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f440:	041b      	lsls	r3, r3, #16
 800f442:	4619      	mov	r1, r3
 800f444:	4610      	mov	r0, r2
 800f446:	f003 ff32 	bl	80132ae <SDMMC_CmdAppCommand>
 800f44a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d001      	beq.n	800f456 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	e00f      	b.n	800f476 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2102      	movs	r1, #2
 800f45c:	4618      	mov	r0, r3
 800f45e:	f003 ff69 	bl	8013334 <SDMMC_CmdBusWidth>
 800f462:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d001      	beq.n	800f46e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	e003      	b.n	800f476 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f46e:	2300      	movs	r3, #0
 800f470:	e001      	b.n	800f476 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f472:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f476:	4618      	mov	r0, r3
 800f478:	3718      	adds	r7, #24
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}

0800f47e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f47e:	b580      	push	{r7, lr}
 800f480:	b086      	sub	sp, #24
 800f482:	af00      	add	r7, sp, #0
 800f484:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f486:	2300      	movs	r3, #0
 800f488:	60fb      	str	r3, [r7, #12]
 800f48a:	2300      	movs	r3, #0
 800f48c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2100      	movs	r1, #0
 800f494:	4618      	mov	r0, r3
 800f496:	f003 fd7e 	bl	8012f96 <SDMMC_GetResponse>
 800f49a:	4603      	mov	r3, r0
 800f49c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f4a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f4a4:	d102      	bne.n	800f4ac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f4a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f4aa:	e02f      	b.n	800f50c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f4ac:	f107 030c 	add.w	r3, r7, #12
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 f82e 	bl	800f514 <SD_FindSCR>
 800f4b8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d001      	beq.n	800f4c4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	e023      	b.n	800f50c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d01c      	beq.n	800f508 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4d6:	041b      	lsls	r3, r3, #16
 800f4d8:	4619      	mov	r1, r3
 800f4da:	4610      	mov	r0, r2
 800f4dc:	f003 fee7 	bl	80132ae <SDMMC_CmdAppCommand>
 800f4e0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d001      	beq.n	800f4ec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	e00f      	b.n	800f50c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2100      	movs	r1, #0
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f003 ff1e 	bl	8013334 <SDMMC_CmdBusWidth>
 800f4f8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d001      	beq.n	800f504 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	e003      	b.n	800f50c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f504:	2300      	movs	r3, #0
 800f506:	e001      	b.n	800f50c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f508:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3718      	adds	r7, #24
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b08e      	sub	sp, #56	; 0x38
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f51e:	f7f4 fdff 	bl	8004120 <HAL_GetTick>
 800f522:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f524:	2300      	movs	r3, #0
 800f526:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f528:	2300      	movs	r3, #0
 800f52a:	60bb      	str	r3, [r7, #8]
 800f52c:	2300      	movs	r3, #0
 800f52e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2108      	movs	r1, #8
 800f53a:	4618      	mov	r0, r3
 800f53c:	f003 fd6a 	bl	8013014 <SDMMC_CmdBlockLength>
 800f540:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f544:	2b00      	cmp	r3, #0
 800f546:	d001      	beq.n	800f54c <SD_FindSCR+0x38>
  {
    return errorstate;
 800f548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f54a:	e0ad      	b.n	800f6a8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681a      	ldr	r2, [r3, #0]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f554:	041b      	lsls	r3, r3, #16
 800f556:	4619      	mov	r1, r3
 800f558:	4610      	mov	r0, r2
 800f55a:	f003 fea8 	bl	80132ae <SDMMC_CmdAppCommand>
 800f55e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f562:	2b00      	cmp	r3, #0
 800f564:	d001      	beq.n	800f56a <SD_FindSCR+0x56>
  {
    return errorstate;
 800f566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f568:	e09e      	b.n	800f6a8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f56a:	f04f 33ff 	mov.w	r3, #4294967295
 800f56e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f570:	2308      	movs	r3, #8
 800f572:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f574:	2330      	movs	r3, #48	; 0x30
 800f576:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f578:	2302      	movs	r3, #2
 800f57a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f57c:	2300      	movs	r3, #0
 800f57e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f580:	2301      	movs	r3, #1
 800f582:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f107 0210 	add.w	r2, r7, #16
 800f58c:	4611      	mov	r1, r2
 800f58e:	4618      	mov	r0, r3
 800f590:	f003 fd14 	bl	8012fbc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	4618      	mov	r0, r3
 800f59a:	f003 feee 	bl	801337a <SDMMC_CmdSendSCR>
 800f59e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d027      	beq.n	800f5f6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a8:	e07e      	b.n	800f6a8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d113      	bne.n	800f5e0 <SD_FindSCR+0xcc>
 800f5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d110      	bne.n	800f5e0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f003 fc72 	bl	8012eac <SDMMC_ReadFIFO>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f003 fc6b 	bl	8012eac <SDMMC_ReadFIFO>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	60fb      	str	r3, [r7, #12]
      index++;
 800f5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5dc:	3301      	adds	r3, #1
 800f5de:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f5e0:	f7f4 fd9e 	bl	8004120 <HAL_GetTick>
 800f5e4:	4602      	mov	r2, r0
 800f5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e8:	1ad3      	subs	r3, r2, r3
 800f5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ee:	d102      	bne.n	800f5f6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f5f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f5f4:	e058      	b.n	800f6a8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f5fc:	f240 532a 	movw	r3, #1322	; 0x52a
 800f600:	4013      	ands	r3, r2
 800f602:	2b00      	cmp	r3, #0
 800f604:	d0d1      	beq.n	800f5aa <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f60c:	f003 0308 	and.w	r3, r3, #8
 800f610:	2b00      	cmp	r3, #0
 800f612:	d005      	beq.n	800f620 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	2208      	movs	r2, #8
 800f61a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f61c:	2308      	movs	r3, #8
 800f61e:	e043      	b.n	800f6a8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f626:	f003 0302 	and.w	r3, r3, #2
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d005      	beq.n	800f63a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2202      	movs	r2, #2
 800f634:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f636:	2302      	movs	r3, #2
 800f638:	e036      	b.n	800f6a8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f640:	f003 0320 	and.w	r3, r3, #32
 800f644:	2b00      	cmp	r3, #0
 800f646:	d005      	beq.n	800f654 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	2220      	movs	r2, #32
 800f64e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f650:	2320      	movs	r3, #32
 800f652:	e029      	b.n	800f6a8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4a15      	ldr	r2, [pc, #84]	; (800f6b0 <SD_FindSCR+0x19c>)
 800f65a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	061a      	lsls	r2, r3, #24
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	021b      	lsls	r3, r3, #8
 800f664:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f668:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	0a1b      	lsrs	r3, r3, #8
 800f66e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f672:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	0e1b      	lsrs	r3, r3, #24
 800f678:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67c:	601a      	str	r2, [r3, #0]
    scr++;
 800f67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f680:	3304      	adds	r3, #4
 800f682:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	061a      	lsls	r2, r3, #24
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	021b      	lsls	r3, r3, #8
 800f68c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f690:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	0a1b      	lsrs	r3, r3, #8
 800f696:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f69a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	0e1b      	lsrs	r3, r3, #24
 800f6a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f6a6:	2300      	movs	r3, #0
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3738      	adds	r7, #56	; 0x38
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}
 800f6b0:	18000f3a 	.word	0x18000f3a

0800f6b4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b086      	sub	sp, #24
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6c6:	2b1f      	cmp	r3, #31
 800f6c8:	d936      	bls.n	800f738 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	617b      	str	r3, [r7, #20]
 800f6ce:	e027      	b.n	800f720 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f003 fbe9 	bl	8012eac <SDMMC_ReadFIFO>
 800f6da:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	b2da      	uxtb	r2, r3
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	0a1b      	lsrs	r3, r3, #8
 800f6ee:	b2da      	uxtb	r2, r3
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	0c1b      	lsrs	r3, r3, #16
 800f6fe:	b2da      	uxtb	r2, r3
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	3301      	adds	r3, #1
 800f708:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	0e1b      	lsrs	r3, r3, #24
 800f70e:	b2da      	uxtb	r2, r3
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f714:	693b      	ldr	r3, [r7, #16]
 800f716:	3301      	adds	r3, #1
 800f718:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	3301      	adds	r3, #1
 800f71e:	617b      	str	r3, [r7, #20]
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	2b07      	cmp	r3, #7
 800f724:	d9d4      	bls.n	800f6d0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	693a      	ldr	r2, [r7, #16]
 800f72a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f730:	f1a3 0220 	sub.w	r2, r3, #32
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800f738:	bf00      	nop
 800f73a:	3718      	adds	r7, #24
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b086      	sub	sp, #24
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	69db      	ldr	r3, [r3, #28]
 800f74c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6a1b      	ldr	r3, [r3, #32]
 800f752:	2b1f      	cmp	r3, #31
 800f754:	d93a      	bls.n	800f7cc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800f756:	2300      	movs	r3, #0
 800f758:	617b      	str	r3, [r7, #20]
 800f75a:	e02b      	b.n	800f7b4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	3301      	adds	r3, #1
 800f766:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	021a      	lsls	r2, r3, #8
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	4313      	orrs	r3, r2
 800f772:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	3301      	adds	r3, #1
 800f778:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	041a      	lsls	r2, r3, #16
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	4313      	orrs	r3, r2
 800f784:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	3301      	adds	r3, #1
 800f78a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	061a      	lsls	r2, r3, #24
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	4313      	orrs	r3, r2
 800f796:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	3301      	adds	r3, #1
 800f79c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f107 020c 	add.w	r2, r7, #12
 800f7a6:	4611      	mov	r1, r2
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f003 fb8c 	bl	8012ec6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	617b      	str	r3, [r7, #20]
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	2b07      	cmp	r3, #7
 800f7b8:	d9d0      	bls.n	800f75c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	693a      	ldr	r2, [r7, #16]
 800f7be:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6a1b      	ldr	r3, [r3, #32]
 800f7c4:	f1a3 0220 	sub.w	r2, r3, #32
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	621a      	str	r2, [r3, #32]
  }
}
 800f7cc:	bf00      	nop
 800f7ce:	3718      	adds	r7, #24
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}

0800f7d4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b083      	sub	sp, #12
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f7dc:	bf00      	nop
 800f7de:	370c      	adds	r7, #12
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr

0800f7e8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b083      	sub	sp, #12
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f7f0:	bf00      	nop
 800f7f2:	370c      	adds	r7, #12
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr

0800f7fc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f804:	bf00      	nop
 800f806:	370c      	adds	r7, #12
 800f808:	46bd      	mov	sp, r7
 800f80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80e:	4770      	bx	lr

0800f810 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f810:	b480      	push	{r7}
 800f812:	b083      	sub	sp, #12
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f818:	bf00      	nop
 800f81a:	370c      	adds	r7, #12
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr

0800f824 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b084      	sub	sp, #16
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d101      	bne.n	800f836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f832:	2301      	movs	r3, #1
 800f834:	e10f      	b.n	800fa56 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2200      	movs	r2, #0
 800f83a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	4a87      	ldr	r2, [pc, #540]	; (800fa60 <HAL_SPI_Init+0x23c>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d00f      	beq.n	800f866 <HAL_SPI_Init+0x42>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	4a86      	ldr	r2, [pc, #536]	; (800fa64 <HAL_SPI_Init+0x240>)
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d00a      	beq.n	800f866 <HAL_SPI_Init+0x42>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	4a84      	ldr	r2, [pc, #528]	; (800fa68 <HAL_SPI_Init+0x244>)
 800f856:	4293      	cmp	r3, r2
 800f858:	d005      	beq.n	800f866 <HAL_SPI_Init+0x42>
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	2b0f      	cmp	r3, #15
 800f860:	d901      	bls.n	800f866 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f862:	2301      	movs	r3, #1
 800f864:	e0f7      	b.n	800fa56 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f000 fd5a 	bl	8010320 <SPI_GetPacketSize>
 800f86c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	4a7b      	ldr	r2, [pc, #492]	; (800fa60 <HAL_SPI_Init+0x23c>)
 800f874:	4293      	cmp	r3, r2
 800f876:	d00c      	beq.n	800f892 <HAL_SPI_Init+0x6e>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	4a79      	ldr	r2, [pc, #484]	; (800fa64 <HAL_SPI_Init+0x240>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d007      	beq.n	800f892 <HAL_SPI_Init+0x6e>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	4a78      	ldr	r2, [pc, #480]	; (800fa68 <HAL_SPI_Init+0x244>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d002      	beq.n	800f892 <HAL_SPI_Init+0x6e>
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	2b08      	cmp	r3, #8
 800f890:	d811      	bhi.n	800f8b6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f896:	4a72      	ldr	r2, [pc, #456]	; (800fa60 <HAL_SPI_Init+0x23c>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d009      	beq.n	800f8b0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	4a70      	ldr	r2, [pc, #448]	; (800fa64 <HAL_SPI_Init+0x240>)
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d004      	beq.n	800f8b0 <HAL_SPI_Init+0x8c>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	4a6f      	ldr	r2, [pc, #444]	; (800fa68 <HAL_SPI_Init+0x244>)
 800f8ac:	4293      	cmp	r3, r2
 800f8ae:	d104      	bne.n	800f8ba <HAL_SPI_Init+0x96>
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2b10      	cmp	r3, #16
 800f8b4:	d901      	bls.n	800f8ba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	e0cd      	b.n	800fa56 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d106      	bne.n	800f8d4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f7f3 fd96 	bl	8003400 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2202      	movs	r2, #2
 800f8d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	681a      	ldr	r2, [r3, #0]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	f022 0201 	bic.w	r2, r2, #1
 800f8ea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	689b      	ldr	r3, [r3, #8]
 800f8f2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f8f6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	699b      	ldr	r3, [r3, #24]
 800f8fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f900:	d119      	bne.n	800f936 <HAL_SPI_Init+0x112>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f90a:	d103      	bne.n	800f914 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f910:	2b00      	cmp	r3, #0
 800f912:	d008      	beq.n	800f926 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d10c      	bne.n	800f936 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f924:	d107      	bne.n	800f936 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	681a      	ldr	r2, [r3, #0]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f934:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d00f      	beq.n	800f962 <HAL_SPI_Init+0x13e>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	68db      	ldr	r3, [r3, #12]
 800f946:	2b06      	cmp	r3, #6
 800f948:	d90b      	bls.n	800f962 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	430a      	orrs	r2, r1
 800f95e:	601a      	str	r2, [r3, #0]
 800f960:	e007      	b.n	800f972 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f970:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	69da      	ldr	r2, [r3, #28]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f97a:	431a      	orrs	r2, r3
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	431a      	orrs	r2, r3
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f984:	ea42 0103 	orr.w	r1, r2, r3
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	68da      	ldr	r2, [r3, #12]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	430a      	orrs	r2, r1
 800f992:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f99c:	431a      	orrs	r2, r3
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9a2:	431a      	orrs	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	699b      	ldr	r3, [r3, #24]
 800f9a8:	431a      	orrs	r2, r3
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	691b      	ldr	r3, [r3, #16]
 800f9ae:	431a      	orrs	r2, r3
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	695b      	ldr	r3, [r3, #20]
 800f9b4:	431a      	orrs	r2, r3
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6a1b      	ldr	r3, [r3, #32]
 800f9ba:	431a      	orrs	r2, r3
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	431a      	orrs	r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9c6:	431a      	orrs	r2, r3
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	689b      	ldr	r3, [r3, #8]
 800f9cc:	431a      	orrs	r2, r3
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f9d2:	ea42 0103 	orr.w	r1, r2, r3
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	430a      	orrs	r2, r1
 800f9e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d113      	bne.n	800fa12 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	689b      	ldr	r3, [r3, #8]
 800f9f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f9fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fa10:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f022 0201 	bic.w	r2, r2, #1
 800fa20:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d00a      	beq.n	800fa44 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	68db      	ldr	r3, [r3, #12]
 800fa34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	430a      	orrs	r2, r1
 800fa42:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2200      	movs	r2, #0
 800fa48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2201      	movs	r2, #1
 800fa50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800fa54:	2300      	movs	r3, #0
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3710      	adds	r7, #16
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}
 800fa5e:	bf00      	nop
 800fa60:	40013000 	.word	0x40013000
 800fa64:	40003800 	.word	0x40003800
 800fa68:	40003c00 	.word	0x40003c00

0800fa6c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b08a      	sub	sp, #40	; 0x28
 800fa70:	af02      	add	r7, sp, #8
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	60b9      	str	r1, [r7, #8]
 800fa76:	603b      	str	r3, [r7, #0]
 800fa78:	4613      	mov	r3, r2
 800fa7a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	3320      	adds	r3, #32
 800fa82:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fa84:	2300      	movs	r3, #0
 800fa86:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	d101      	bne.n	800fa96 <HAL_SPI_Transmit+0x2a>
 800fa92:	2302      	movs	r3, #2
 800fa94:	e1e1      	b.n	800fe5a <HAL_SPI_Transmit+0x3ee>
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2201      	movs	r2, #1
 800fa9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fa9e:	f7f4 fb3f 	bl	8004120 <HAL_GetTick>
 800faa2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800faaa:	b2db      	uxtb	r3, r3
 800faac:	2b01      	cmp	r3, #1
 800faae:	d007      	beq.n	800fac0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800fab0:	2302      	movs	r3, #2
 800fab2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	2200      	movs	r2, #0
 800fab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fabc:	7efb      	ldrb	r3, [r7, #27]
 800fabe:	e1cc      	b.n	800fe5a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d002      	beq.n	800facc <HAL_SPI_Transmit+0x60>
 800fac6:	88fb      	ldrh	r3, [r7, #6]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d107      	bne.n	800fadc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800facc:	2301      	movs	r3, #1
 800face:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	2200      	movs	r2, #0
 800fad4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fad8:	7efb      	ldrb	r3, [r7, #27]
 800fada:	e1be      	b.n	800fe5a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	2203      	movs	r2, #3
 800fae0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	2200      	movs	r2, #0
 800fae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	68ba      	ldr	r2, [r7, #8]
 800faf0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	88fa      	ldrh	r2, [r7, #6]
 800faf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	88fa      	ldrh	r2, [r7, #6]
 800fafe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	2200      	movs	r2, #0
 800fb06:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	2200      	movs	r2, #0
 800fb14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2200      	movs	r2, #0
 800fb22:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	689b      	ldr	r3, [r3, #8]
 800fb28:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800fb2c:	d108      	bne.n	800fb40 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb3c:	601a      	str	r2, [r3, #0]
 800fb3e:	e009      	b.n	800fb54 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	68db      	ldr	r3, [r3, #12]
 800fb46:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fb52:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	685a      	ldr	r2, [r3, #4]
 800fb5a:	4b96      	ldr	r3, [pc, #600]	; (800fdb4 <HAL_SPI_Transmit+0x348>)
 800fb5c:	4013      	ands	r3, r2
 800fb5e:	88f9      	ldrh	r1, [r7, #6]
 800fb60:	68fa      	ldr	r2, [r7, #12]
 800fb62:	6812      	ldr	r2, [r2, #0]
 800fb64:	430b      	orrs	r3, r1
 800fb66:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	681a      	ldr	r2, [r3, #0]
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	f042 0201 	orr.w	r2, r2, #1
 800fb76:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	685b      	ldr	r3, [r3, #4]
 800fb7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fb80:	d107      	bne.n	800fb92 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	681a      	ldr	r2, [r3, #0]
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fb90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	68db      	ldr	r3, [r3, #12]
 800fb96:	2b0f      	cmp	r3, #15
 800fb98:	d947      	bls.n	800fc2a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fb9a:	e03f      	b.n	800fc1c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	695b      	ldr	r3, [r3, #20]
 800fba2:	f003 0302 	and.w	r3, r3, #2
 800fba6:	2b02      	cmp	r3, #2
 800fba8:	d114      	bne.n	800fbd4 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	6812      	ldr	r2, [r2, #0]
 800fbb4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbba:	1d1a      	adds	r2, r3, #4
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fbc6:	b29b      	uxth	r3, r3
 800fbc8:	3b01      	subs	r3, #1
 800fbca:	b29a      	uxth	r2, r3
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fbd2:	e023      	b.n	800fc1c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fbd4:	f7f4 faa4 	bl	8004120 <HAL_GetTick>
 800fbd8:	4602      	mov	r2, r0
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	1ad3      	subs	r3, r2, r3
 800fbde:	683a      	ldr	r2, [r7, #0]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d803      	bhi.n	800fbec <HAL_SPI_Transmit+0x180>
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbea:	d102      	bne.n	800fbf2 <HAL_SPI_Transmit+0x186>
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d114      	bne.n	800fc1c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fbf2:	68f8      	ldr	r0, [r7, #12]
 800fbf4:	f000 fac6 	bl	8010184 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2201      	movs	r2, #1
 800fc14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fc18:	2303      	movs	r3, #3
 800fc1a:	e11e      	b.n	800fe5a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d1b9      	bne.n	800fb9c <HAL_SPI_Transmit+0x130>
 800fc28:	e0f1      	b.n	800fe0e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	68db      	ldr	r3, [r3, #12]
 800fc2e:	2b07      	cmp	r3, #7
 800fc30:	f240 80e6 	bls.w	800fe00 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fc34:	e05d      	b.n	800fcf2 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	695b      	ldr	r3, [r3, #20]
 800fc3c:	f003 0302 	and.w	r3, r3, #2
 800fc40:	2b02      	cmp	r3, #2
 800fc42:	d132      	bne.n	800fcaa <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	2b01      	cmp	r3, #1
 800fc4e:	d918      	bls.n	800fc82 <HAL_SPI_Transmit+0x216>
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d014      	beq.n	800fc82 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	6812      	ldr	r2, [r2, #0]
 800fc62:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc68:	1d1a      	adds	r2, r3, #4
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc74:	b29b      	uxth	r3, r3
 800fc76:	3b02      	subs	r3, #2
 800fc78:	b29a      	uxth	r2, r3
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fc80:	e037      	b.n	800fcf2 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc86:	881a      	ldrh	r2, [r3, #0]
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc90:	1c9a      	adds	r2, r3, #2
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	3b01      	subs	r3, #1
 800fca0:	b29a      	uxth	r2, r3
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fca8:	e023      	b.n	800fcf2 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fcaa:	f7f4 fa39 	bl	8004120 <HAL_GetTick>
 800fcae:	4602      	mov	r2, r0
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	1ad3      	subs	r3, r2, r3
 800fcb4:	683a      	ldr	r2, [r7, #0]
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d803      	bhi.n	800fcc2 <HAL_SPI_Transmit+0x256>
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcc0:	d102      	bne.n	800fcc8 <HAL_SPI_Transmit+0x25c>
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d114      	bne.n	800fcf2 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fcc8:	68f8      	ldr	r0, [r7, #12]
 800fcca:	f000 fa5b 	bl	8010184 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2201      	movs	r2, #1
 800fcea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fcee:	2303      	movs	r3, #3
 800fcf0:	e0b3      	b.n	800fe5a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fcf8:	b29b      	uxth	r3, r3
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d19b      	bne.n	800fc36 <HAL_SPI_Transmit+0x1ca>
 800fcfe:	e086      	b.n	800fe0e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	695b      	ldr	r3, [r3, #20]
 800fd06:	f003 0302 	and.w	r3, r3, #2
 800fd0a:	2b02      	cmp	r3, #2
 800fd0c:	d154      	bne.n	800fdb8 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd14:	b29b      	uxth	r3, r3
 800fd16:	2b03      	cmp	r3, #3
 800fd18:	d918      	bls.n	800fd4c <HAL_SPI_Transmit+0x2e0>
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd1e:	2b40      	cmp	r3, #64	; 0x40
 800fd20:	d914      	bls.n	800fd4c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	6812      	ldr	r2, [r2, #0]
 800fd2c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd32:	1d1a      	adds	r2, r3, #4
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	3b04      	subs	r3, #4
 800fd42:	b29a      	uxth	r2, r3
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fd4a:	e059      	b.n	800fe00 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d917      	bls.n	800fd88 <HAL_SPI_Transmit+0x31c>
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d013      	beq.n	800fd88 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd64:	881a      	ldrh	r2, [r3, #0]
 800fd66:	69fb      	ldr	r3, [r7, #28]
 800fd68:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd6e:	1c9a      	adds	r2, r3, #2
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd7a:	b29b      	uxth	r3, r3
 800fd7c:	3b02      	subs	r3, #2
 800fd7e:	b29a      	uxth	r2, r3
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fd86:	e03b      	b.n	800fe00 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	3320      	adds	r3, #32
 800fd92:	7812      	ldrb	r2, [r2, #0]
 800fd94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd9a:	1c5a      	adds	r2, r3, #1
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fda6:	b29b      	uxth	r3, r3
 800fda8:	3b01      	subs	r3, #1
 800fdaa:	b29a      	uxth	r2, r3
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fdb2:	e025      	b.n	800fe00 <HAL_SPI_Transmit+0x394>
 800fdb4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fdb8:	f7f4 f9b2 	bl	8004120 <HAL_GetTick>
 800fdbc:	4602      	mov	r2, r0
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	1ad3      	subs	r3, r2, r3
 800fdc2:	683a      	ldr	r2, [r7, #0]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d803      	bhi.n	800fdd0 <HAL_SPI_Transmit+0x364>
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdce:	d102      	bne.n	800fdd6 <HAL_SPI_Transmit+0x36a>
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d114      	bne.n	800fe00 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fdd6:	68f8      	ldr	r0, [r7, #12]
 800fdd8:	f000 f9d4 	bl	8010184 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2200      	movs	r2, #0
 800fde0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fdfc:	2303      	movs	r3, #3
 800fdfe:	e02c      	b.n	800fe5a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	f47f af79 	bne.w	800fd00 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	9300      	str	r3, [sp, #0]
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	2200      	movs	r2, #0
 800fe16:	2108      	movs	r1, #8
 800fe18:	68f8      	ldr	r0, [r7, #12]
 800fe1a:	f000 fa53 	bl	80102c4 <SPI_WaitOnFlagUntilTimeout>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d007      	beq.n	800fe34 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe2a:	f043 0220 	orr.w	r2, r3, #32
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fe34:	68f8      	ldr	r0, [r7, #12]
 800fe36:	f000 f9a5 	bl	8010184 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	2201      	movs	r2, #1
 800fe46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d001      	beq.n	800fe58 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800fe54:	2301      	movs	r3, #1
 800fe56:	e000      	b.n	800fe5a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800fe58:	7efb      	ldrb	r3, [r7, #27]
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3720      	adds	r7, #32
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop

0800fe64 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b088      	sub	sp, #32
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	60f8      	str	r0, [r7, #12]
 800fe6c:	60b9      	str	r1, [r7, #8]
 800fe6e:	603b      	str	r3, [r7, #0]
 800fe70:	4613      	mov	r3, r2
 800fe72:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fe74:	2300      	movs	r3, #0
 800fe76:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	3330      	adds	r3, #48	; 0x30
 800fe7e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d101      	bne.n	800fe8e <HAL_SPI_Receive+0x2a>
 800fe8a:	2302      	movs	r3, #2
 800fe8c:	e173      	b.n	8010176 <HAL_SPI_Receive+0x312>
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	2201      	movs	r2, #1
 800fe92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fe96:	f7f4 f943 	bl	8004120 <HAL_GetTick>
 800fe9a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fea2:	b2db      	uxtb	r3, r3
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d007      	beq.n	800feb8 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800fea8:	2302      	movs	r3, #2
 800feaa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2200      	movs	r2, #0
 800feb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800feb4:	7ffb      	ldrb	r3, [r7, #31]
 800feb6:	e15e      	b.n	8010176 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d002      	beq.n	800fec4 <HAL_SPI_Receive+0x60>
 800febe:	88fb      	ldrh	r3, [r7, #6]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d107      	bne.n	800fed4 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800fec4:	2301      	movs	r3, #1
 800fec6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	2200      	movs	r2, #0
 800fecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fed0:	7ffb      	ldrb	r3, [r7, #31]
 800fed2:	e150      	b.n	8010176 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2204      	movs	r2, #4
 800fed8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	2200      	movs	r2, #0
 800fee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	68ba      	ldr	r2, [r7, #8]
 800fee8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	88fa      	ldrh	r2, [r7, #6]
 800feee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	88fa      	ldrh	r2, [r7, #6]
 800fef6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	2200      	movs	r2, #0
 800fefe:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2200      	movs	r2, #0
 800ff04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	2200      	movs	r2, #0
 800ff14:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	689b      	ldr	r3, [r3, #8]
 800ff20:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ff24:	d108      	bne.n	800ff38 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	681a      	ldr	r2, [r3, #0]
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ff34:	601a      	str	r2, [r3, #0]
 800ff36:	e009      	b.n	800ff4c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ff4a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	685a      	ldr	r2, [r3, #4]
 800ff52:	4b8b      	ldr	r3, [pc, #556]	; (8010180 <HAL_SPI_Receive+0x31c>)
 800ff54:	4013      	ands	r3, r2
 800ff56:	88f9      	ldrh	r1, [r7, #6]
 800ff58:	68fa      	ldr	r2, [r7, #12]
 800ff5a:	6812      	ldr	r2, [r2, #0]
 800ff5c:	430b      	orrs	r3, r1
 800ff5e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	681a      	ldr	r2, [r3, #0]
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	f042 0201 	orr.w	r2, r2, #1
 800ff6e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ff78:	d107      	bne.n	800ff8a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	681a      	ldr	r2, [r3, #0]
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ff88:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	68db      	ldr	r3, [r3, #12]
 800ff8e:	2b0f      	cmp	r3, #15
 800ff90:	d948      	bls.n	8010024 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ff92:	e040      	b.n	8010016 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	695a      	ldr	r2, [r3, #20]
 800ff9a:	f248 0308 	movw	r3, #32776	; 0x8008
 800ff9e:	4013      	ands	r3, r2
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d014      	beq.n	800ffce <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	681a      	ldr	r2, [r3, #0]
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ffae:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffb4:	1d1a      	adds	r2, r3, #4
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	3b01      	subs	r3, #1
 800ffc4:	b29a      	uxth	r2, r3
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ffcc:	e023      	b.n	8010016 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ffce:	f7f4 f8a7 	bl	8004120 <HAL_GetTick>
 800ffd2:	4602      	mov	r2, r0
 800ffd4:	697b      	ldr	r3, [r7, #20]
 800ffd6:	1ad3      	subs	r3, r2, r3
 800ffd8:	683a      	ldr	r2, [r7, #0]
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d803      	bhi.n	800ffe6 <HAL_SPI_Receive+0x182>
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffe4:	d102      	bne.n	800ffec <HAL_SPI_Receive+0x188>
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d114      	bne.n	8010016 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ffec:	68f8      	ldr	r0, [r7, #12]
 800ffee:	f000 f8c9 	bl	8010184 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	2200      	movs	r2, #0
 800fff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010000:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	2201      	movs	r2, #1
 801000e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010012:	2303      	movs	r3, #3
 8010014:	e0af      	b.n	8010176 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801001c:	b29b      	uxth	r3, r3
 801001e:	2b00      	cmp	r3, #0
 8010020:	d1b8      	bne.n	800ff94 <HAL_SPI_Receive+0x130>
 8010022:	e095      	b.n	8010150 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	2b07      	cmp	r3, #7
 801002a:	f240 808b 	bls.w	8010144 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 801002e:	e03f      	b.n	80100b0 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	695b      	ldr	r3, [r3, #20]
 8010036:	f003 0301 	and.w	r3, r3, #1
 801003a:	2b01      	cmp	r3, #1
 801003c:	d114      	bne.n	8010068 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010042:	69ba      	ldr	r2, [r7, #24]
 8010044:	8812      	ldrh	r2, [r2, #0]
 8010046:	b292      	uxth	r2, r2
 8010048:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801004e:	1c9a      	adds	r2, r3, #2
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801005a:	b29b      	uxth	r3, r3
 801005c:	3b01      	subs	r3, #1
 801005e:	b29a      	uxth	r2, r3
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010066:	e023      	b.n	80100b0 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010068:	f7f4 f85a 	bl	8004120 <HAL_GetTick>
 801006c:	4602      	mov	r2, r0
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	1ad3      	subs	r3, r2, r3
 8010072:	683a      	ldr	r2, [r7, #0]
 8010074:	429a      	cmp	r2, r3
 8010076:	d803      	bhi.n	8010080 <HAL_SPI_Receive+0x21c>
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801007e:	d102      	bne.n	8010086 <HAL_SPI_Receive+0x222>
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d114      	bne.n	80100b0 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010086:	68f8      	ldr	r0, [r7, #12]
 8010088:	f000 f87c 	bl	8010184 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	2200      	movs	r2, #0
 8010090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801009a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2201      	movs	r2, #1
 80100a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80100ac:	2303      	movs	r3, #3
 80100ae:	e062      	b.n	8010176 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d1b9      	bne.n	8010030 <HAL_SPI_Receive+0x1cc>
 80100bc:	e048      	b.n	8010150 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	695b      	ldr	r3, [r3, #20]
 80100c4:	f003 0301 	and.w	r3, r3, #1
 80100c8:	2b01      	cmp	r3, #1
 80100ca:	d117      	bne.n	80100fc <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100d8:	7812      	ldrb	r2, [r2, #0]
 80100da:	b2d2      	uxtb	r2, r2
 80100dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100e2:	1c5a      	adds	r2, r3, #1
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	3b01      	subs	r3, #1
 80100f2:	b29a      	uxth	r2, r3
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80100fa:	e023      	b.n	8010144 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80100fc:	f7f4 f810 	bl	8004120 <HAL_GetTick>
 8010100:	4602      	mov	r2, r0
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	1ad3      	subs	r3, r2, r3
 8010106:	683a      	ldr	r2, [r7, #0]
 8010108:	429a      	cmp	r2, r3
 801010a:	d803      	bhi.n	8010114 <HAL_SPI_Receive+0x2b0>
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010112:	d102      	bne.n	801011a <HAL_SPI_Receive+0x2b6>
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d114      	bne.n	8010144 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801011a:	68f8      	ldr	r0, [r7, #12]
 801011c:	f000 f832 	bl	8010184 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2200      	movs	r2, #0
 8010124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801012e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	2201      	movs	r2, #1
 801013c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010140:	2303      	movs	r3, #3
 8010142:	e018      	b.n	8010176 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801014a:	b29b      	uxth	r3, r3
 801014c:	2b00      	cmp	r3, #0
 801014e:	d1b6      	bne.n	80100be <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010150:	68f8      	ldr	r0, [r7, #12]
 8010152:	f000 f817 	bl	8010184 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	2200      	movs	r2, #0
 801015a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	2201      	movs	r2, #1
 8010162:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801016c:	2b00      	cmp	r3, #0
 801016e:	d001      	beq.n	8010174 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8010170:	2301      	movs	r3, #1
 8010172:	e000      	b.n	8010176 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8010174:	7ffb      	ldrb	r3, [r7, #31]
}
 8010176:	4618      	mov	r0, r3
 8010178:	3720      	adds	r7, #32
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}
 801017e:	bf00      	nop
 8010180:	ffff0000 	.word	0xffff0000

08010184 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010184:	b480      	push	{r7}
 8010186:	b085      	sub	sp, #20
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	695b      	ldr	r3, [r3, #20]
 8010192:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	699a      	ldr	r2, [r3, #24]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	f042 0208 	orr.w	r2, r2, #8
 80101a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	699a      	ldr	r2, [r3, #24]
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	f042 0210 	orr.w	r2, r2, #16
 80101b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	681a      	ldr	r2, [r3, #0]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f022 0201 	bic.w	r2, r2, #1
 80101c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	6919      	ldr	r1, [r3, #16]
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681a      	ldr	r2, [r3, #0]
 80101ce:	4b3c      	ldr	r3, [pc, #240]	; (80102c0 <SPI_CloseTransfer+0x13c>)
 80101d0:	400b      	ands	r3, r1
 80101d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	689a      	ldr	r2, [r3, #8]
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80101e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80101ea:	b2db      	uxtb	r3, r3
 80101ec:	2b04      	cmp	r3, #4
 80101ee:	d014      	beq.n	801021a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	f003 0320 	and.w	r3, r3, #32
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d00f      	beq.n	801021a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010200:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	699a      	ldr	r2, [r3, #24]
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	f042 0220 	orr.w	r2, r2, #32
 8010218:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010220:	b2db      	uxtb	r3, r3
 8010222:	2b03      	cmp	r3, #3
 8010224:	d014      	beq.n	8010250 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801022c:	2b00      	cmp	r3, #0
 801022e:	d00f      	beq.n	8010250 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010236:	f043 0204 	orr.w	r2, r3, #4
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	699a      	ldr	r2, [r3, #24]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801024e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010256:	2b00      	cmp	r3, #0
 8010258:	d00f      	beq.n	801027a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010260:	f043 0201 	orr.w	r2, r3, #1
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	699a      	ldr	r2, [r3, #24]
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010278:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010280:	2b00      	cmp	r3, #0
 8010282:	d00f      	beq.n	80102a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801028a:	f043 0208 	orr.w	r2, r3, #8
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	699a      	ldr	r2, [r3, #24]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80102a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2200      	movs	r2, #0
 80102a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2200      	movs	r2, #0
 80102b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80102b4:	bf00      	nop
 80102b6:	3714      	adds	r7, #20
 80102b8:	46bd      	mov	sp, r7
 80102ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102be:	4770      	bx	lr
 80102c0:	fffffc90 	.word	0xfffffc90

080102c4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b084      	sub	sp, #16
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	60f8      	str	r0, [r7, #12]
 80102cc:	60b9      	str	r1, [r7, #8]
 80102ce:	603b      	str	r3, [r7, #0]
 80102d0:	4613      	mov	r3, r2
 80102d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80102d4:	e010      	b.n	80102f8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80102d6:	f7f3 ff23 	bl	8004120 <HAL_GetTick>
 80102da:	4602      	mov	r2, r0
 80102dc:	69bb      	ldr	r3, [r7, #24]
 80102de:	1ad3      	subs	r3, r2, r3
 80102e0:	683a      	ldr	r2, [r7, #0]
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d803      	bhi.n	80102ee <SPI_WaitOnFlagUntilTimeout+0x2a>
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ec:	d102      	bne.n	80102f4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d101      	bne.n	80102f8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80102f4:	2303      	movs	r3, #3
 80102f6:	e00f      	b.n	8010318 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	695a      	ldr	r2, [r3, #20]
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	4013      	ands	r3, r2
 8010302:	68ba      	ldr	r2, [r7, #8]
 8010304:	429a      	cmp	r2, r3
 8010306:	bf0c      	ite	eq
 8010308:	2301      	moveq	r3, #1
 801030a:	2300      	movne	r3, #0
 801030c:	b2db      	uxtb	r3, r3
 801030e:	461a      	mov	r2, r3
 8010310:	79fb      	ldrb	r3, [r7, #7]
 8010312:	429a      	cmp	r2, r3
 8010314:	d0df      	beq.n	80102d6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010316:	2300      	movs	r3, #0
}
 8010318:	4618      	mov	r0, r3
 801031a:	3710      	adds	r7, #16
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010320:	b480      	push	{r7}
 8010322:	b085      	sub	sp, #20
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801032c:	095b      	lsrs	r3, r3, #5
 801032e:	3301      	adds	r3, #1
 8010330:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	3301      	adds	r3, #1
 8010338:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	3307      	adds	r3, #7
 801033e:	08db      	lsrs	r3, r3, #3
 8010340:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	68fa      	ldr	r2, [r7, #12]
 8010346:	fb02 f303 	mul.w	r3, r2, r3
}
 801034a:	4618      	mov	r0, r3
 801034c:	3714      	adds	r7, #20
 801034e:	46bd      	mov	sp, r7
 8010350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010354:	4770      	bx	lr

08010356 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010356:	b580      	push	{r7, lr}
 8010358:	b082      	sub	sp, #8
 801035a:	af00      	add	r7, sp, #0
 801035c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d101      	bne.n	8010368 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010364:	2301      	movs	r3, #1
 8010366:	e049      	b.n	80103fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801036e:	b2db      	uxtb	r3, r3
 8010370:	2b00      	cmp	r3, #0
 8010372:	d106      	bne.n	8010382 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2200      	movs	r2, #0
 8010378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f7f3 fa91 	bl	80038a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2202      	movs	r2, #2
 8010386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	3304      	adds	r3, #4
 8010392:	4619      	mov	r1, r3
 8010394:	4610      	mov	r0, r2
 8010396:	f000 ff29 	bl	80111ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2201      	movs	r2, #1
 801039e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2201      	movs	r2, #1
 80103a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2201      	movs	r2, #1
 80103ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2201      	movs	r2, #1
 80103b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2201      	movs	r2, #1
 80103be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2201      	movs	r2, #1
 80103c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2201      	movs	r2, #1
 80103ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2201      	movs	r2, #1
 80103d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2201      	movs	r2, #1
 80103de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2201      	movs	r2, #1
 80103e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2201      	movs	r2, #1
 80103ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2201      	movs	r2, #1
 80103f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80103fa:	2300      	movs	r3, #0
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3708      	adds	r7, #8
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d101      	bne.n	8010416 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010412:	2301      	movs	r3, #1
 8010414:	e049      	b.n	80104aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801041c:	b2db      	uxtb	r3, r3
 801041e:	2b00      	cmp	r3, #0
 8010420:	d106      	bne.n	8010430 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2200      	movs	r2, #0
 8010426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f7f3 f8a4 	bl	8003578 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2202      	movs	r2, #2
 8010434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	3304      	adds	r3, #4
 8010440:	4619      	mov	r1, r3
 8010442:	4610      	mov	r0, r2
 8010444:	f000 fed2 	bl	80111ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2201      	movs	r2, #1
 801044c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2201      	movs	r2, #1
 8010454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2201      	movs	r2, #1
 801045c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2201      	movs	r2, #1
 8010464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2201      	movs	r2, #1
 801046c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2201      	movs	r2, #1
 8010474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2201      	movs	r2, #1
 801047c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2201      	movs	r2, #1
 8010484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2201      	movs	r2, #1
 801048c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2201      	movs	r2, #1
 8010494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2201      	movs	r2, #1
 801049c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2201      	movs	r2, #1
 80104a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80104a8:	2300      	movs	r3, #0
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3708      	adds	r7, #8
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
	...

080104b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d109      	bne.n	80104d8 <HAL_TIM_PWM_Start+0x24>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80104ca:	b2db      	uxtb	r3, r3
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	bf14      	ite	ne
 80104d0:	2301      	movne	r3, #1
 80104d2:	2300      	moveq	r3, #0
 80104d4:	b2db      	uxtb	r3, r3
 80104d6:	e03c      	b.n	8010552 <HAL_TIM_PWM_Start+0x9e>
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	2b04      	cmp	r3, #4
 80104dc:	d109      	bne.n	80104f2 <HAL_TIM_PWM_Start+0x3e>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80104e4:	b2db      	uxtb	r3, r3
 80104e6:	2b01      	cmp	r3, #1
 80104e8:	bf14      	ite	ne
 80104ea:	2301      	movne	r3, #1
 80104ec:	2300      	moveq	r3, #0
 80104ee:	b2db      	uxtb	r3, r3
 80104f0:	e02f      	b.n	8010552 <HAL_TIM_PWM_Start+0x9e>
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	2b08      	cmp	r3, #8
 80104f6:	d109      	bne.n	801050c <HAL_TIM_PWM_Start+0x58>
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80104fe:	b2db      	uxtb	r3, r3
 8010500:	2b01      	cmp	r3, #1
 8010502:	bf14      	ite	ne
 8010504:	2301      	movne	r3, #1
 8010506:	2300      	moveq	r3, #0
 8010508:	b2db      	uxtb	r3, r3
 801050a:	e022      	b.n	8010552 <HAL_TIM_PWM_Start+0x9e>
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	2b0c      	cmp	r3, #12
 8010510:	d109      	bne.n	8010526 <HAL_TIM_PWM_Start+0x72>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010518:	b2db      	uxtb	r3, r3
 801051a:	2b01      	cmp	r3, #1
 801051c:	bf14      	ite	ne
 801051e:	2301      	movne	r3, #1
 8010520:	2300      	moveq	r3, #0
 8010522:	b2db      	uxtb	r3, r3
 8010524:	e015      	b.n	8010552 <HAL_TIM_PWM_Start+0x9e>
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	2b10      	cmp	r3, #16
 801052a:	d109      	bne.n	8010540 <HAL_TIM_PWM_Start+0x8c>
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010532:	b2db      	uxtb	r3, r3
 8010534:	2b01      	cmp	r3, #1
 8010536:	bf14      	ite	ne
 8010538:	2301      	movne	r3, #1
 801053a:	2300      	moveq	r3, #0
 801053c:	b2db      	uxtb	r3, r3
 801053e:	e008      	b.n	8010552 <HAL_TIM_PWM_Start+0x9e>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010546:	b2db      	uxtb	r3, r3
 8010548:	2b01      	cmp	r3, #1
 801054a:	bf14      	ite	ne
 801054c:	2301      	movne	r3, #1
 801054e:	2300      	moveq	r3, #0
 8010550:	b2db      	uxtb	r3, r3
 8010552:	2b00      	cmp	r3, #0
 8010554:	d001      	beq.n	801055a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010556:	2301      	movs	r3, #1
 8010558:	e0ab      	b.n	80106b2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d104      	bne.n	801056a <HAL_TIM_PWM_Start+0xb6>
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2202      	movs	r2, #2
 8010564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010568:	e023      	b.n	80105b2 <HAL_TIM_PWM_Start+0xfe>
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	2b04      	cmp	r3, #4
 801056e:	d104      	bne.n	801057a <HAL_TIM_PWM_Start+0xc6>
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2202      	movs	r2, #2
 8010574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010578:	e01b      	b.n	80105b2 <HAL_TIM_PWM_Start+0xfe>
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	2b08      	cmp	r3, #8
 801057e:	d104      	bne.n	801058a <HAL_TIM_PWM_Start+0xd6>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2202      	movs	r2, #2
 8010584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010588:	e013      	b.n	80105b2 <HAL_TIM_PWM_Start+0xfe>
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	2b0c      	cmp	r3, #12
 801058e:	d104      	bne.n	801059a <HAL_TIM_PWM_Start+0xe6>
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2202      	movs	r2, #2
 8010594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010598:	e00b      	b.n	80105b2 <HAL_TIM_PWM_Start+0xfe>
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	2b10      	cmp	r3, #16
 801059e:	d104      	bne.n	80105aa <HAL_TIM_PWM_Start+0xf6>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2202      	movs	r2, #2
 80105a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80105a8:	e003      	b.n	80105b2 <HAL_TIM_PWM_Start+0xfe>
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2202      	movs	r2, #2
 80105ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	2201      	movs	r2, #1
 80105b8:	6839      	ldr	r1, [r7, #0]
 80105ba:	4618      	mov	r0, r3
 80105bc:	f001 f992 	bl	80118e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	4a3d      	ldr	r2, [pc, #244]	; (80106bc <HAL_TIM_PWM_Start+0x208>)
 80105c6:	4293      	cmp	r3, r2
 80105c8:	d013      	beq.n	80105f2 <HAL_TIM_PWM_Start+0x13e>
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	4a3c      	ldr	r2, [pc, #240]	; (80106c0 <HAL_TIM_PWM_Start+0x20c>)
 80105d0:	4293      	cmp	r3, r2
 80105d2:	d00e      	beq.n	80105f2 <HAL_TIM_PWM_Start+0x13e>
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	4a3a      	ldr	r2, [pc, #232]	; (80106c4 <HAL_TIM_PWM_Start+0x210>)
 80105da:	4293      	cmp	r3, r2
 80105dc:	d009      	beq.n	80105f2 <HAL_TIM_PWM_Start+0x13e>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	4a39      	ldr	r2, [pc, #228]	; (80106c8 <HAL_TIM_PWM_Start+0x214>)
 80105e4:	4293      	cmp	r3, r2
 80105e6:	d004      	beq.n	80105f2 <HAL_TIM_PWM_Start+0x13e>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	4a37      	ldr	r2, [pc, #220]	; (80106cc <HAL_TIM_PWM_Start+0x218>)
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d101      	bne.n	80105f6 <HAL_TIM_PWM_Start+0x142>
 80105f2:	2301      	movs	r3, #1
 80105f4:	e000      	b.n	80105f8 <HAL_TIM_PWM_Start+0x144>
 80105f6:	2300      	movs	r3, #0
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d007      	beq.n	801060c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801060a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	4a2a      	ldr	r2, [pc, #168]	; (80106bc <HAL_TIM_PWM_Start+0x208>)
 8010612:	4293      	cmp	r3, r2
 8010614:	d02c      	beq.n	8010670 <HAL_TIM_PWM_Start+0x1bc>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801061e:	d027      	beq.n	8010670 <HAL_TIM_PWM_Start+0x1bc>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4a2a      	ldr	r2, [pc, #168]	; (80106d0 <HAL_TIM_PWM_Start+0x21c>)
 8010626:	4293      	cmp	r3, r2
 8010628:	d022      	beq.n	8010670 <HAL_TIM_PWM_Start+0x1bc>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	4a29      	ldr	r2, [pc, #164]	; (80106d4 <HAL_TIM_PWM_Start+0x220>)
 8010630:	4293      	cmp	r3, r2
 8010632:	d01d      	beq.n	8010670 <HAL_TIM_PWM_Start+0x1bc>
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4a27      	ldr	r2, [pc, #156]	; (80106d8 <HAL_TIM_PWM_Start+0x224>)
 801063a:	4293      	cmp	r3, r2
 801063c:	d018      	beq.n	8010670 <HAL_TIM_PWM_Start+0x1bc>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	4a1f      	ldr	r2, [pc, #124]	; (80106c0 <HAL_TIM_PWM_Start+0x20c>)
 8010644:	4293      	cmp	r3, r2
 8010646:	d013      	beq.n	8010670 <HAL_TIM_PWM_Start+0x1bc>
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	4a23      	ldr	r2, [pc, #140]	; (80106dc <HAL_TIM_PWM_Start+0x228>)
 801064e:	4293      	cmp	r3, r2
 8010650:	d00e      	beq.n	8010670 <HAL_TIM_PWM_Start+0x1bc>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	4a1b      	ldr	r2, [pc, #108]	; (80106c4 <HAL_TIM_PWM_Start+0x210>)
 8010658:	4293      	cmp	r3, r2
 801065a:	d009      	beq.n	8010670 <HAL_TIM_PWM_Start+0x1bc>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4a1f      	ldr	r2, [pc, #124]	; (80106e0 <HAL_TIM_PWM_Start+0x22c>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d004      	beq.n	8010670 <HAL_TIM_PWM_Start+0x1bc>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4a1e      	ldr	r2, [pc, #120]	; (80106e4 <HAL_TIM_PWM_Start+0x230>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d115      	bne.n	801069c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	689a      	ldr	r2, [r3, #8]
 8010676:	4b1c      	ldr	r3, [pc, #112]	; (80106e8 <HAL_TIM_PWM_Start+0x234>)
 8010678:	4013      	ands	r3, r2
 801067a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	2b06      	cmp	r3, #6
 8010680:	d015      	beq.n	80106ae <HAL_TIM_PWM_Start+0x1fa>
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010688:	d011      	beq.n	80106ae <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	f042 0201 	orr.w	r2, r2, #1
 8010698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801069a:	e008      	b.n	80106ae <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	681a      	ldr	r2, [r3, #0]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	f042 0201 	orr.w	r2, r2, #1
 80106aa:	601a      	str	r2, [r3, #0]
 80106ac:	e000      	b.n	80106b0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80106b0:	2300      	movs	r3, #0
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3710      	adds	r7, #16
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	40010000 	.word	0x40010000
 80106c0:	40010400 	.word	0x40010400
 80106c4:	40014000 	.word	0x40014000
 80106c8:	40014400 	.word	0x40014400
 80106cc:	40014800 	.word	0x40014800
 80106d0:	40000400 	.word	0x40000400
 80106d4:	40000800 	.word	0x40000800
 80106d8:	40000c00 	.word	0x40000c00
 80106dc:	40001800 	.word	0x40001800
 80106e0:	4000e000 	.word	0x4000e000
 80106e4:	4000e400 	.word	0x4000e400
 80106e8:	00010007 	.word	0x00010007

080106ec <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b086      	sub	sp, #24
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	60f8      	str	r0, [r7, #12]
 80106f4:	60b9      	str	r1, [r7, #8]
 80106f6:	607a      	str	r2, [r7, #4]
 80106f8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80106fa:	2300      	movs	r3, #0
 80106fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d109      	bne.n	8010718 <HAL_TIM_PWM_Start_DMA+0x2c>
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801070a:	b2db      	uxtb	r3, r3
 801070c:	2b02      	cmp	r3, #2
 801070e:	bf0c      	ite	eq
 8010710:	2301      	moveq	r3, #1
 8010712:	2300      	movne	r3, #0
 8010714:	b2db      	uxtb	r3, r3
 8010716:	e03c      	b.n	8010792 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	2b04      	cmp	r3, #4
 801071c:	d109      	bne.n	8010732 <HAL_TIM_PWM_Start_DMA+0x46>
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010724:	b2db      	uxtb	r3, r3
 8010726:	2b02      	cmp	r3, #2
 8010728:	bf0c      	ite	eq
 801072a:	2301      	moveq	r3, #1
 801072c:	2300      	movne	r3, #0
 801072e:	b2db      	uxtb	r3, r3
 8010730:	e02f      	b.n	8010792 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	2b08      	cmp	r3, #8
 8010736:	d109      	bne.n	801074c <HAL_TIM_PWM_Start_DMA+0x60>
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801073e:	b2db      	uxtb	r3, r3
 8010740:	2b02      	cmp	r3, #2
 8010742:	bf0c      	ite	eq
 8010744:	2301      	moveq	r3, #1
 8010746:	2300      	movne	r3, #0
 8010748:	b2db      	uxtb	r3, r3
 801074a:	e022      	b.n	8010792 <HAL_TIM_PWM_Start_DMA+0xa6>
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	2b0c      	cmp	r3, #12
 8010750:	d109      	bne.n	8010766 <HAL_TIM_PWM_Start_DMA+0x7a>
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010758:	b2db      	uxtb	r3, r3
 801075a:	2b02      	cmp	r3, #2
 801075c:	bf0c      	ite	eq
 801075e:	2301      	moveq	r3, #1
 8010760:	2300      	movne	r3, #0
 8010762:	b2db      	uxtb	r3, r3
 8010764:	e015      	b.n	8010792 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	2b10      	cmp	r3, #16
 801076a:	d109      	bne.n	8010780 <HAL_TIM_PWM_Start_DMA+0x94>
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010772:	b2db      	uxtb	r3, r3
 8010774:	2b02      	cmp	r3, #2
 8010776:	bf0c      	ite	eq
 8010778:	2301      	moveq	r3, #1
 801077a:	2300      	movne	r3, #0
 801077c:	b2db      	uxtb	r3, r3
 801077e:	e008      	b.n	8010792 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010786:	b2db      	uxtb	r3, r3
 8010788:	2b02      	cmp	r3, #2
 801078a:	bf0c      	ite	eq
 801078c:	2301      	moveq	r3, #1
 801078e:	2300      	movne	r3, #0
 8010790:	b2db      	uxtb	r3, r3
 8010792:	2b00      	cmp	r3, #0
 8010794:	d001      	beq.n	801079a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8010796:	2302      	movs	r3, #2
 8010798:	e1ba      	b.n	8010b10 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d109      	bne.n	80107b4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	bf0c      	ite	eq
 80107ac:	2301      	moveq	r3, #1
 80107ae:	2300      	movne	r3, #0
 80107b0:	b2db      	uxtb	r3, r3
 80107b2:	e03c      	b.n	801082e <HAL_TIM_PWM_Start_DMA+0x142>
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	2b04      	cmp	r3, #4
 80107b8:	d109      	bne.n	80107ce <HAL_TIM_PWM_Start_DMA+0xe2>
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80107c0:	b2db      	uxtb	r3, r3
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	bf0c      	ite	eq
 80107c6:	2301      	moveq	r3, #1
 80107c8:	2300      	movne	r3, #0
 80107ca:	b2db      	uxtb	r3, r3
 80107cc:	e02f      	b.n	801082e <HAL_TIM_PWM_Start_DMA+0x142>
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	2b08      	cmp	r3, #8
 80107d2:	d109      	bne.n	80107e8 <HAL_TIM_PWM_Start_DMA+0xfc>
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107da:	b2db      	uxtb	r3, r3
 80107dc:	2b01      	cmp	r3, #1
 80107de:	bf0c      	ite	eq
 80107e0:	2301      	moveq	r3, #1
 80107e2:	2300      	movne	r3, #0
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	e022      	b.n	801082e <HAL_TIM_PWM_Start_DMA+0x142>
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	2b0c      	cmp	r3, #12
 80107ec:	d109      	bne.n	8010802 <HAL_TIM_PWM_Start_DMA+0x116>
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80107f4:	b2db      	uxtb	r3, r3
 80107f6:	2b01      	cmp	r3, #1
 80107f8:	bf0c      	ite	eq
 80107fa:	2301      	moveq	r3, #1
 80107fc:	2300      	movne	r3, #0
 80107fe:	b2db      	uxtb	r3, r3
 8010800:	e015      	b.n	801082e <HAL_TIM_PWM_Start_DMA+0x142>
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	2b10      	cmp	r3, #16
 8010806:	d109      	bne.n	801081c <HAL_TIM_PWM_Start_DMA+0x130>
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801080e:	b2db      	uxtb	r3, r3
 8010810:	2b01      	cmp	r3, #1
 8010812:	bf0c      	ite	eq
 8010814:	2301      	moveq	r3, #1
 8010816:	2300      	movne	r3, #0
 8010818:	b2db      	uxtb	r3, r3
 801081a:	e008      	b.n	801082e <HAL_TIM_PWM_Start_DMA+0x142>
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010822:	b2db      	uxtb	r3, r3
 8010824:	2b01      	cmp	r3, #1
 8010826:	bf0c      	ite	eq
 8010828:	2301      	moveq	r3, #1
 801082a:	2300      	movne	r3, #0
 801082c:	b2db      	uxtb	r3, r3
 801082e:	2b00      	cmp	r3, #0
 8010830:	d034      	beq.n	801089c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d002      	beq.n	801083e <HAL_TIM_PWM_Start_DMA+0x152>
 8010838:	887b      	ldrh	r3, [r7, #2]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d101      	bne.n	8010842 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 801083e:	2301      	movs	r3, #1
 8010840:	e166      	b.n	8010b10 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d104      	bne.n	8010852 <HAL_TIM_PWM_Start_DMA+0x166>
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2202      	movs	r2, #2
 801084c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010850:	e026      	b.n	80108a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010852:	68bb      	ldr	r3, [r7, #8]
 8010854:	2b04      	cmp	r3, #4
 8010856:	d104      	bne.n	8010862 <HAL_TIM_PWM_Start_DMA+0x176>
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	2202      	movs	r2, #2
 801085c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010860:	e01e      	b.n	80108a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	2b08      	cmp	r3, #8
 8010866:	d104      	bne.n	8010872 <HAL_TIM_PWM_Start_DMA+0x186>
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2202      	movs	r2, #2
 801086c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010870:	e016      	b.n	80108a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	2b0c      	cmp	r3, #12
 8010876:	d104      	bne.n	8010882 <HAL_TIM_PWM_Start_DMA+0x196>
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2202      	movs	r2, #2
 801087c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010880:	e00e      	b.n	80108a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	2b10      	cmp	r3, #16
 8010886:	d104      	bne.n	8010892 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	2202      	movs	r2, #2
 801088c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010890:	e006      	b.n	80108a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2202      	movs	r2, #2
 8010896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801089a:	e001      	b.n	80108a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 801089c:	2301      	movs	r3, #1
 801089e:	e137      	b.n	8010b10 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	2b0c      	cmp	r3, #12
 80108a4:	f200 80ae 	bhi.w	8010a04 <HAL_TIM_PWM_Start_DMA+0x318>
 80108a8:	a201      	add	r2, pc, #4	; (adr r2, 80108b0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80108aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108ae:	bf00      	nop
 80108b0:	080108e5 	.word	0x080108e5
 80108b4:	08010a05 	.word	0x08010a05
 80108b8:	08010a05 	.word	0x08010a05
 80108bc:	08010a05 	.word	0x08010a05
 80108c0:	0801092d 	.word	0x0801092d
 80108c4:	08010a05 	.word	0x08010a05
 80108c8:	08010a05 	.word	0x08010a05
 80108cc:	08010a05 	.word	0x08010a05
 80108d0:	08010975 	.word	0x08010975
 80108d4:	08010a05 	.word	0x08010a05
 80108d8:	08010a05 	.word	0x08010a05
 80108dc:	08010a05 	.word	0x08010a05
 80108e0:	080109bd 	.word	0x080109bd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108e8:	4a8b      	ldr	r2, [pc, #556]	; (8010b18 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80108ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f0:	4a8a      	ldr	r2, [pc, #552]	; (8010b1c <HAL_TIM_PWM_Start_DMA+0x430>)
 80108f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f8:	4a89      	ldr	r2, [pc, #548]	; (8010b20 <HAL_TIM_PWM_Start_DMA+0x434>)
 80108fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010900:	6879      	ldr	r1, [r7, #4]
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	3334      	adds	r3, #52	; 0x34
 8010908:	461a      	mov	r2, r3
 801090a:	887b      	ldrh	r3, [r7, #2]
 801090c:	f7f6 f872 	bl	80069f4 <HAL_DMA_Start_IT>
 8010910:	4603      	mov	r3, r0
 8010912:	2b00      	cmp	r3, #0
 8010914:	d001      	beq.n	801091a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010916:	2301      	movs	r3, #1
 8010918:	e0fa      	b.n	8010b10 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	68da      	ldr	r2, [r3, #12]
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010928:	60da      	str	r2, [r3, #12]
      break;
 801092a:	e06e      	b.n	8010a0a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010930:	4a79      	ldr	r2, [pc, #484]	; (8010b18 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010932:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010938:	4a78      	ldr	r2, [pc, #480]	; (8010b1c <HAL_TIM_PWM_Start_DMA+0x430>)
 801093a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010940:	4a77      	ldr	r2, [pc, #476]	; (8010b20 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010942:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010948:	6879      	ldr	r1, [r7, #4]
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	3338      	adds	r3, #56	; 0x38
 8010950:	461a      	mov	r2, r3
 8010952:	887b      	ldrh	r3, [r7, #2]
 8010954:	f7f6 f84e 	bl	80069f4 <HAL_DMA_Start_IT>
 8010958:	4603      	mov	r3, r0
 801095a:	2b00      	cmp	r3, #0
 801095c:	d001      	beq.n	8010962 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801095e:	2301      	movs	r3, #1
 8010960:	e0d6      	b.n	8010b10 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	68da      	ldr	r2, [r3, #12]
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010970:	60da      	str	r2, [r3, #12]
      break;
 8010972:	e04a      	b.n	8010a0a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010978:	4a67      	ldr	r2, [pc, #412]	; (8010b18 <HAL_TIM_PWM_Start_DMA+0x42c>)
 801097a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010980:	4a66      	ldr	r2, [pc, #408]	; (8010b1c <HAL_TIM_PWM_Start_DMA+0x430>)
 8010982:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010988:	4a65      	ldr	r2, [pc, #404]	; (8010b20 <HAL_TIM_PWM_Start_DMA+0x434>)
 801098a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010990:	6879      	ldr	r1, [r7, #4]
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	333c      	adds	r3, #60	; 0x3c
 8010998:	461a      	mov	r2, r3
 801099a:	887b      	ldrh	r3, [r7, #2]
 801099c:	f7f6 f82a 	bl	80069f4 <HAL_DMA_Start_IT>
 80109a0:	4603      	mov	r3, r0
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d001      	beq.n	80109aa <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80109a6:	2301      	movs	r3, #1
 80109a8:	e0b2      	b.n	8010b10 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	68da      	ldr	r2, [r3, #12]
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80109b8:	60da      	str	r2, [r3, #12]
      break;
 80109ba:	e026      	b.n	8010a0a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109c0:	4a55      	ldr	r2, [pc, #340]	; (8010b18 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80109c2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109c8:	4a54      	ldr	r2, [pc, #336]	; (8010b1c <HAL_TIM_PWM_Start_DMA+0x430>)
 80109ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109d0:	4a53      	ldr	r2, [pc, #332]	; (8010b20 <HAL_TIM_PWM_Start_DMA+0x434>)
 80109d2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80109d8:	6879      	ldr	r1, [r7, #4]
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	3340      	adds	r3, #64	; 0x40
 80109e0:	461a      	mov	r2, r3
 80109e2:	887b      	ldrh	r3, [r7, #2]
 80109e4:	f7f6 f806 	bl	80069f4 <HAL_DMA_Start_IT>
 80109e8:	4603      	mov	r3, r0
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d001      	beq.n	80109f2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80109ee:	2301      	movs	r3, #1
 80109f0:	e08e      	b.n	8010b10 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	68da      	ldr	r2, [r3, #12]
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010a00:	60da      	str	r2, [r3, #12]
      break;
 8010a02:	e002      	b.n	8010a0a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8010a04:	2301      	movs	r3, #1
 8010a06:	75fb      	strb	r3, [r7, #23]
      break;
 8010a08:	bf00      	nop
  }

  if (status == HAL_OK)
 8010a0a:	7dfb      	ldrb	r3, [r7, #23]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d17e      	bne.n	8010b0e <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	2201      	movs	r2, #1
 8010a16:	68b9      	ldr	r1, [r7, #8]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f000 ff63 	bl	80118e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	4a40      	ldr	r2, [pc, #256]	; (8010b24 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010a24:	4293      	cmp	r3, r2
 8010a26:	d013      	beq.n	8010a50 <HAL_TIM_PWM_Start_DMA+0x364>
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	4a3e      	ldr	r2, [pc, #248]	; (8010b28 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	d00e      	beq.n	8010a50 <HAL_TIM_PWM_Start_DMA+0x364>
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4a3d      	ldr	r2, [pc, #244]	; (8010b2c <HAL_TIM_PWM_Start_DMA+0x440>)
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	d009      	beq.n	8010a50 <HAL_TIM_PWM_Start_DMA+0x364>
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	4a3b      	ldr	r2, [pc, #236]	; (8010b30 <HAL_TIM_PWM_Start_DMA+0x444>)
 8010a42:	4293      	cmp	r3, r2
 8010a44:	d004      	beq.n	8010a50 <HAL_TIM_PWM_Start_DMA+0x364>
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	4a3a      	ldr	r2, [pc, #232]	; (8010b34 <HAL_TIM_PWM_Start_DMA+0x448>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d101      	bne.n	8010a54 <HAL_TIM_PWM_Start_DMA+0x368>
 8010a50:	2301      	movs	r3, #1
 8010a52:	e000      	b.n	8010a56 <HAL_TIM_PWM_Start_DMA+0x36a>
 8010a54:	2300      	movs	r3, #0
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d007      	beq.n	8010a6a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010a68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	4a2d      	ldr	r2, [pc, #180]	; (8010b24 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010a70:	4293      	cmp	r3, r2
 8010a72:	d02c      	beq.n	8010ace <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a7c:	d027      	beq.n	8010ace <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	4a2d      	ldr	r2, [pc, #180]	; (8010b38 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8010a84:	4293      	cmp	r3, r2
 8010a86:	d022      	beq.n	8010ace <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	4a2b      	ldr	r2, [pc, #172]	; (8010b3c <HAL_TIM_PWM_Start_DMA+0x450>)
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d01d      	beq.n	8010ace <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	4a2a      	ldr	r2, [pc, #168]	; (8010b40 <HAL_TIM_PWM_Start_DMA+0x454>)
 8010a98:	4293      	cmp	r3, r2
 8010a9a:	d018      	beq.n	8010ace <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	4a21      	ldr	r2, [pc, #132]	; (8010b28 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d013      	beq.n	8010ace <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	4a26      	ldr	r2, [pc, #152]	; (8010b44 <HAL_TIM_PWM_Start_DMA+0x458>)
 8010aac:	4293      	cmp	r3, r2
 8010aae:	d00e      	beq.n	8010ace <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	4a1d      	ldr	r2, [pc, #116]	; (8010b2c <HAL_TIM_PWM_Start_DMA+0x440>)
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d009      	beq.n	8010ace <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	4a22      	ldr	r2, [pc, #136]	; (8010b48 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d004      	beq.n	8010ace <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4a20      	ldr	r2, [pc, #128]	; (8010b4c <HAL_TIM_PWM_Start_DMA+0x460>)
 8010aca:	4293      	cmp	r3, r2
 8010acc:	d115      	bne.n	8010afa <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	689a      	ldr	r2, [r3, #8]
 8010ad4:	4b1e      	ldr	r3, [pc, #120]	; (8010b50 <HAL_TIM_PWM_Start_DMA+0x464>)
 8010ad6:	4013      	ands	r3, r2
 8010ad8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	2b06      	cmp	r3, #6
 8010ade:	d015      	beq.n	8010b0c <HAL_TIM_PWM_Start_DMA+0x420>
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ae6:	d011      	beq.n	8010b0c <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	681a      	ldr	r2, [r3, #0]
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	f042 0201 	orr.w	r2, r2, #1
 8010af6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010af8:	e008      	b.n	8010b0c <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	681a      	ldr	r2, [r3, #0]
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	f042 0201 	orr.w	r2, r2, #1
 8010b08:	601a      	str	r2, [r3, #0]
 8010b0a:	e000      	b.n	8010b0e <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b0c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3718      	adds	r7, #24
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	080110db 	.word	0x080110db
 8010b1c:	08011183 	.word	0x08011183
 8010b20:	08011049 	.word	0x08011049
 8010b24:	40010000 	.word	0x40010000
 8010b28:	40010400 	.word	0x40010400
 8010b2c:	40014000 	.word	0x40014000
 8010b30:	40014400 	.word	0x40014400
 8010b34:	40014800 	.word	0x40014800
 8010b38:	40000400 	.word	0x40000400
 8010b3c:	40000800 	.word	0x40000800
 8010b40:	40000c00 	.word	0x40000c00
 8010b44:	40001800 	.word	0x40001800
 8010b48:	4000e000 	.word	0x4000e000
 8010b4c:	4000e400 	.word	0x4000e400
 8010b50:	00010007 	.word	0x00010007

08010b54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b082      	sub	sp, #8
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	691b      	ldr	r3, [r3, #16]
 8010b62:	f003 0302 	and.w	r3, r3, #2
 8010b66:	2b02      	cmp	r3, #2
 8010b68:	d122      	bne.n	8010bb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	68db      	ldr	r3, [r3, #12]
 8010b70:	f003 0302 	and.w	r3, r3, #2
 8010b74:	2b02      	cmp	r3, #2
 8010b76:	d11b      	bne.n	8010bb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	f06f 0202 	mvn.w	r2, #2
 8010b80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2201      	movs	r2, #1
 8010b86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	699b      	ldr	r3, [r3, #24]
 8010b8e:	f003 0303 	and.w	r3, r3, #3
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d003      	beq.n	8010b9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f000 fa24 	bl	8010fe4 <HAL_TIM_IC_CaptureCallback>
 8010b9c:	e005      	b.n	8010baa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f000 fa16 	bl	8010fd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f000 fa27 	bl	8010ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2200      	movs	r2, #0
 8010bae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	691b      	ldr	r3, [r3, #16]
 8010bb6:	f003 0304 	and.w	r3, r3, #4
 8010bba:	2b04      	cmp	r3, #4
 8010bbc:	d122      	bne.n	8010c04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	68db      	ldr	r3, [r3, #12]
 8010bc4:	f003 0304 	and.w	r3, r3, #4
 8010bc8:	2b04      	cmp	r3, #4
 8010bca:	d11b      	bne.n	8010c04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	f06f 0204 	mvn.w	r2, #4
 8010bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2202      	movs	r2, #2
 8010bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	699b      	ldr	r3, [r3, #24]
 8010be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d003      	beq.n	8010bf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 f9fa 	bl	8010fe4 <HAL_TIM_IC_CaptureCallback>
 8010bf0:	e005      	b.n	8010bfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f000 f9ec 	bl	8010fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f000 f9fd 	bl	8010ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2200      	movs	r2, #0
 8010c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	691b      	ldr	r3, [r3, #16]
 8010c0a:	f003 0308 	and.w	r3, r3, #8
 8010c0e:	2b08      	cmp	r3, #8
 8010c10:	d122      	bne.n	8010c58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	68db      	ldr	r3, [r3, #12]
 8010c18:	f003 0308 	and.w	r3, r3, #8
 8010c1c:	2b08      	cmp	r3, #8
 8010c1e:	d11b      	bne.n	8010c58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	f06f 0208 	mvn.w	r2, #8
 8010c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2204      	movs	r2, #4
 8010c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	69db      	ldr	r3, [r3, #28]
 8010c36:	f003 0303 	and.w	r3, r3, #3
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d003      	beq.n	8010c46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f000 f9d0 	bl	8010fe4 <HAL_TIM_IC_CaptureCallback>
 8010c44:	e005      	b.n	8010c52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f000 f9c2 	bl	8010fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f000 f9d3 	bl	8010ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2200      	movs	r2, #0
 8010c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	691b      	ldr	r3, [r3, #16]
 8010c5e:	f003 0310 	and.w	r3, r3, #16
 8010c62:	2b10      	cmp	r3, #16
 8010c64:	d122      	bne.n	8010cac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	68db      	ldr	r3, [r3, #12]
 8010c6c:	f003 0310 	and.w	r3, r3, #16
 8010c70:	2b10      	cmp	r3, #16
 8010c72:	d11b      	bne.n	8010cac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	f06f 0210 	mvn.w	r2, #16
 8010c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	2208      	movs	r2, #8
 8010c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	69db      	ldr	r3, [r3, #28]
 8010c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d003      	beq.n	8010c9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f000 f9a6 	bl	8010fe4 <HAL_TIM_IC_CaptureCallback>
 8010c98:	e005      	b.n	8010ca6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f000 f998 	bl	8010fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f000 f9a9 	bl	8010ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	2200      	movs	r2, #0
 8010caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	691b      	ldr	r3, [r3, #16]
 8010cb2:	f003 0301 	and.w	r3, r3, #1
 8010cb6:	2b01      	cmp	r3, #1
 8010cb8:	d10e      	bne.n	8010cd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	f003 0301 	and.w	r3, r3, #1
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d107      	bne.n	8010cd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	f06f 0201 	mvn.w	r2, #1
 8010cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f000 f972 	bl	8010fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	691b      	ldr	r3, [r3, #16]
 8010cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ce2:	2b80      	cmp	r3, #128	; 0x80
 8010ce4:	d10e      	bne.n	8010d04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cf0:	2b80      	cmp	r3, #128	; 0x80
 8010cf2:	d107      	bne.n	8010d04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f000 febc 	bl	8011a7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	691b      	ldr	r3, [r3, #16]
 8010d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d12:	d10e      	bne.n	8010d32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	68db      	ldr	r3, [r3, #12]
 8010d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d1e:	2b80      	cmp	r3, #128	; 0x80
 8010d20:	d107      	bne.n	8010d32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f000 feaf 	bl	8011a90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	691b      	ldr	r3, [r3, #16]
 8010d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d3c:	2b40      	cmp	r3, #64	; 0x40
 8010d3e:	d10e      	bne.n	8010d5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	68db      	ldr	r3, [r3, #12]
 8010d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d4a:	2b40      	cmp	r3, #64	; 0x40
 8010d4c:	d107      	bne.n	8010d5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f000 f961 	bl	8011020 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	691b      	ldr	r3, [r3, #16]
 8010d64:	f003 0320 	and.w	r3, r3, #32
 8010d68:	2b20      	cmp	r3, #32
 8010d6a:	d10e      	bne.n	8010d8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	68db      	ldr	r3, [r3, #12]
 8010d72:	f003 0320 	and.w	r3, r3, #32
 8010d76:	2b20      	cmp	r3, #32
 8010d78:	d107      	bne.n	8010d8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f06f 0220 	mvn.w	r2, #32
 8010d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f000 fe6f 	bl	8011a68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010d8a:	bf00      	nop
 8010d8c:	3708      	adds	r7, #8
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}
	...

08010d94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b086      	sub	sp, #24
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	60f8      	str	r0, [r7, #12]
 8010d9c:	60b9      	str	r1, [r7, #8]
 8010d9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010da0:	2300      	movs	r3, #0
 8010da2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	d101      	bne.n	8010db2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010dae:	2302      	movs	r3, #2
 8010db0:	e0ff      	b.n	8010fb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	2201      	movs	r2, #1
 8010db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2b14      	cmp	r3, #20
 8010dbe:	f200 80f0 	bhi.w	8010fa2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010dc2:	a201      	add	r2, pc, #4	; (adr r2, 8010dc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dc8:	08010e1d 	.word	0x08010e1d
 8010dcc:	08010fa3 	.word	0x08010fa3
 8010dd0:	08010fa3 	.word	0x08010fa3
 8010dd4:	08010fa3 	.word	0x08010fa3
 8010dd8:	08010e5d 	.word	0x08010e5d
 8010ddc:	08010fa3 	.word	0x08010fa3
 8010de0:	08010fa3 	.word	0x08010fa3
 8010de4:	08010fa3 	.word	0x08010fa3
 8010de8:	08010e9f 	.word	0x08010e9f
 8010dec:	08010fa3 	.word	0x08010fa3
 8010df0:	08010fa3 	.word	0x08010fa3
 8010df4:	08010fa3 	.word	0x08010fa3
 8010df8:	08010edf 	.word	0x08010edf
 8010dfc:	08010fa3 	.word	0x08010fa3
 8010e00:	08010fa3 	.word	0x08010fa3
 8010e04:	08010fa3 	.word	0x08010fa3
 8010e08:	08010f21 	.word	0x08010f21
 8010e0c:	08010fa3 	.word	0x08010fa3
 8010e10:	08010fa3 	.word	0x08010fa3
 8010e14:	08010fa3 	.word	0x08010fa3
 8010e18:	08010f61 	.word	0x08010f61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	68b9      	ldr	r1, [r7, #8]
 8010e22:	4618      	mov	r0, r3
 8010e24:	f000 fa88 	bl	8011338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	699a      	ldr	r2, [r3, #24]
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	f042 0208 	orr.w	r2, r2, #8
 8010e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	699a      	ldr	r2, [r3, #24]
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f022 0204 	bic.w	r2, r2, #4
 8010e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	6999      	ldr	r1, [r3, #24]
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	691a      	ldr	r2, [r3, #16]
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	430a      	orrs	r2, r1
 8010e58:	619a      	str	r2, [r3, #24]
      break;
 8010e5a:	e0a5      	b.n	8010fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	68b9      	ldr	r1, [r7, #8]
 8010e62:	4618      	mov	r0, r3
 8010e64:	f000 faf8 	bl	8011458 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	699a      	ldr	r2, [r3, #24]
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	699a      	ldr	r2, [r3, #24]
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	6999      	ldr	r1, [r3, #24]
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	691b      	ldr	r3, [r3, #16]
 8010e92:	021a      	lsls	r2, r3, #8
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	430a      	orrs	r2, r1
 8010e9a:	619a      	str	r2, [r3, #24]
      break;
 8010e9c:	e084      	b.n	8010fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	68b9      	ldr	r1, [r7, #8]
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f000 fb61 	bl	801156c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	69da      	ldr	r2, [r3, #28]
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	f042 0208 	orr.w	r2, r2, #8
 8010eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	69da      	ldr	r2, [r3, #28]
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	f022 0204 	bic.w	r2, r2, #4
 8010ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	69d9      	ldr	r1, [r3, #28]
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	691a      	ldr	r2, [r3, #16]
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	430a      	orrs	r2, r1
 8010eda:	61da      	str	r2, [r3, #28]
      break;
 8010edc:	e064      	b.n	8010fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	68b9      	ldr	r1, [r7, #8]
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f000 fbc9 	bl	801167c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	69da      	ldr	r2, [r3, #28]
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	69da      	ldr	r2, [r3, #28]
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	69d9      	ldr	r1, [r3, #28]
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	691b      	ldr	r3, [r3, #16]
 8010f14:	021a      	lsls	r2, r3, #8
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	430a      	orrs	r2, r1
 8010f1c:	61da      	str	r2, [r3, #28]
      break;
 8010f1e:	e043      	b.n	8010fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	68b9      	ldr	r1, [r7, #8]
 8010f26:	4618      	mov	r0, r3
 8010f28:	f000 fc12 	bl	8011750 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	f042 0208 	orr.w	r2, r2, #8
 8010f3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	f022 0204 	bic.w	r2, r2, #4
 8010f4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	691a      	ldr	r2, [r3, #16]
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	430a      	orrs	r2, r1
 8010f5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010f5e:	e023      	b.n	8010fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	68b9      	ldr	r1, [r7, #8]
 8010f66:	4618      	mov	r0, r3
 8010f68:	f000 fc56 	bl	8011818 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010f7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010f8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	691b      	ldr	r3, [r3, #16]
 8010f96:	021a      	lsls	r2, r3, #8
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	430a      	orrs	r2, r1
 8010f9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010fa0:	e002      	b.n	8010fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8010fa6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	2200      	movs	r2, #0
 8010fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3718      	adds	r7, #24
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
 8010fba:	bf00      	nop

08010fbc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010fc4:	bf00      	nop
 8010fc6:	370c      	adds	r7, #12
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fce:	4770      	bx	lr

08010fd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	b083      	sub	sp, #12
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010fd8:	bf00      	nop
 8010fda:	370c      	adds	r7, #12
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr

08010fe4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b083      	sub	sp, #12
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010fec:	bf00      	nop
 8010fee:	370c      	adds	r7, #12
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr

08010ff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	b083      	sub	sp, #12
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011000:	bf00      	nop
 8011002:	370c      	adds	r7, #12
 8011004:	46bd      	mov	sp, r7
 8011006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100a:	4770      	bx	lr

0801100c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801100c:	b480      	push	{r7}
 801100e:	b083      	sub	sp, #12
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8011014:	bf00      	nop
 8011016:	370c      	adds	r7, #12
 8011018:	46bd      	mov	sp, r7
 801101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101e:	4770      	bx	lr

08011020 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011020:	b480      	push	{r7}
 8011022:	b083      	sub	sp, #12
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011028:	bf00      	nop
 801102a:	370c      	adds	r7, #12
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr

08011034 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8011034:	b480      	push	{r7}
 8011036:	b083      	sub	sp, #12
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 801103c:	bf00      	nop
 801103e:	370c      	adds	r7, #12
 8011040:	46bd      	mov	sp, r7
 8011042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011046:	4770      	bx	lr

08011048 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b084      	sub	sp, #16
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011054:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801105a:	687a      	ldr	r2, [r7, #4]
 801105c:	429a      	cmp	r2, r3
 801105e:	d107      	bne.n	8011070 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	2201      	movs	r2, #1
 8011064:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	2201      	movs	r2, #1
 801106a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801106e:	e02a      	b.n	80110c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011074:	687a      	ldr	r2, [r7, #4]
 8011076:	429a      	cmp	r2, r3
 8011078:	d107      	bne.n	801108a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2202      	movs	r2, #2
 801107e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2201      	movs	r2, #1
 8011084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011088:	e01d      	b.n	80110c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801108e:	687a      	ldr	r2, [r7, #4]
 8011090:	429a      	cmp	r2, r3
 8011092:	d107      	bne.n	80110a4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2204      	movs	r2, #4
 8011098:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	2201      	movs	r2, #1
 801109e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80110a2:	e010      	b.n	80110c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110a8:	687a      	ldr	r2, [r7, #4]
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d107      	bne.n	80110be <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	2208      	movs	r2, #8
 80110b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	2201      	movs	r2, #1
 80110b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80110bc:	e003      	b.n	80110c6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	2201      	movs	r2, #1
 80110c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80110c6:	68f8      	ldr	r0, [r7, #12]
 80110c8:	f7ff ffb4 	bl	8011034 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	2200      	movs	r2, #0
 80110d0:	771a      	strb	r2, [r3, #28]
}
 80110d2:	bf00      	nop
 80110d4:	3710      	adds	r7, #16
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}

080110da <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80110da:	b580      	push	{r7, lr}
 80110dc:	b084      	sub	sp, #16
 80110de:	af00      	add	r7, sp, #0
 80110e0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110e6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110ec:	687a      	ldr	r2, [r7, #4]
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d10b      	bne.n	801110a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	2201      	movs	r2, #1
 80110f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	69db      	ldr	r3, [r3, #28]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d136      	bne.n	801116e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	2201      	movs	r2, #1
 8011104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011108:	e031      	b.n	801116e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801110e:	687a      	ldr	r2, [r7, #4]
 8011110:	429a      	cmp	r2, r3
 8011112:	d10b      	bne.n	801112c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2202      	movs	r2, #2
 8011118:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	69db      	ldr	r3, [r3, #28]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d125      	bne.n	801116e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	2201      	movs	r2, #1
 8011126:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801112a:	e020      	b.n	801116e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	429a      	cmp	r2, r3
 8011134:	d10b      	bne.n	801114e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2204      	movs	r2, #4
 801113a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	69db      	ldr	r3, [r3, #28]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d114      	bne.n	801116e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	2201      	movs	r2, #1
 8011148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801114c:	e00f      	b.n	801116e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011152:	687a      	ldr	r2, [r7, #4]
 8011154:	429a      	cmp	r2, r3
 8011156:	d10a      	bne.n	801116e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2208      	movs	r2, #8
 801115c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	69db      	ldr	r3, [r3, #28]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d103      	bne.n	801116e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	2201      	movs	r2, #1
 801116a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801116e:	68f8      	ldr	r0, [r7, #12]
 8011170:	f7ff ff42 	bl	8010ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2200      	movs	r2, #0
 8011178:	771a      	strb	r2, [r3, #28]
}
 801117a:	bf00      	nop
 801117c:	3710      	adds	r7, #16
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}

08011182 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011182:	b580      	push	{r7, lr}
 8011184:	b084      	sub	sp, #16
 8011186:	af00      	add	r7, sp, #0
 8011188:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801118e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011194:	687a      	ldr	r2, [r7, #4]
 8011196:	429a      	cmp	r2, r3
 8011198:	d103      	bne.n	80111a2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2201      	movs	r2, #1
 801119e:	771a      	strb	r2, [r3, #28]
 80111a0:	e019      	b.n	80111d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111a6:	687a      	ldr	r2, [r7, #4]
 80111a8:	429a      	cmp	r2, r3
 80111aa:	d103      	bne.n	80111b4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2202      	movs	r2, #2
 80111b0:	771a      	strb	r2, [r3, #28]
 80111b2:	e010      	b.n	80111d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111b8:	687a      	ldr	r2, [r7, #4]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d103      	bne.n	80111c6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	2204      	movs	r2, #4
 80111c2:	771a      	strb	r2, [r3, #28]
 80111c4:	e007      	b.n	80111d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111ca:	687a      	ldr	r2, [r7, #4]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d102      	bne.n	80111d6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2208      	movs	r2, #8
 80111d4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80111d6:	68f8      	ldr	r0, [r7, #12]
 80111d8:	f7ff ff18 	bl	801100c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	2200      	movs	r2, #0
 80111e0:	771a      	strb	r2, [r3, #28]
}
 80111e2:	bf00      	nop
 80111e4:	3710      	adds	r7, #16
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}
	...

080111ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80111ec:	b480      	push	{r7}
 80111ee:	b085      	sub	sp, #20
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
 80111f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	4a44      	ldr	r2, [pc, #272]	; (8011310 <TIM_Base_SetConfig+0x124>)
 8011200:	4293      	cmp	r3, r2
 8011202:	d013      	beq.n	801122c <TIM_Base_SetConfig+0x40>
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801120a:	d00f      	beq.n	801122c <TIM_Base_SetConfig+0x40>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	4a41      	ldr	r2, [pc, #260]	; (8011314 <TIM_Base_SetConfig+0x128>)
 8011210:	4293      	cmp	r3, r2
 8011212:	d00b      	beq.n	801122c <TIM_Base_SetConfig+0x40>
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	4a40      	ldr	r2, [pc, #256]	; (8011318 <TIM_Base_SetConfig+0x12c>)
 8011218:	4293      	cmp	r3, r2
 801121a:	d007      	beq.n	801122c <TIM_Base_SetConfig+0x40>
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	4a3f      	ldr	r2, [pc, #252]	; (801131c <TIM_Base_SetConfig+0x130>)
 8011220:	4293      	cmp	r3, r2
 8011222:	d003      	beq.n	801122c <TIM_Base_SetConfig+0x40>
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	4a3e      	ldr	r2, [pc, #248]	; (8011320 <TIM_Base_SetConfig+0x134>)
 8011228:	4293      	cmp	r3, r2
 801122a:	d108      	bne.n	801123e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	68fa      	ldr	r2, [r7, #12]
 801123a:	4313      	orrs	r3, r2
 801123c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	4a33      	ldr	r2, [pc, #204]	; (8011310 <TIM_Base_SetConfig+0x124>)
 8011242:	4293      	cmp	r3, r2
 8011244:	d027      	beq.n	8011296 <TIM_Base_SetConfig+0xaa>
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801124c:	d023      	beq.n	8011296 <TIM_Base_SetConfig+0xaa>
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	4a30      	ldr	r2, [pc, #192]	; (8011314 <TIM_Base_SetConfig+0x128>)
 8011252:	4293      	cmp	r3, r2
 8011254:	d01f      	beq.n	8011296 <TIM_Base_SetConfig+0xaa>
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	4a2f      	ldr	r2, [pc, #188]	; (8011318 <TIM_Base_SetConfig+0x12c>)
 801125a:	4293      	cmp	r3, r2
 801125c:	d01b      	beq.n	8011296 <TIM_Base_SetConfig+0xaa>
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	4a2e      	ldr	r2, [pc, #184]	; (801131c <TIM_Base_SetConfig+0x130>)
 8011262:	4293      	cmp	r3, r2
 8011264:	d017      	beq.n	8011296 <TIM_Base_SetConfig+0xaa>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	4a2d      	ldr	r2, [pc, #180]	; (8011320 <TIM_Base_SetConfig+0x134>)
 801126a:	4293      	cmp	r3, r2
 801126c:	d013      	beq.n	8011296 <TIM_Base_SetConfig+0xaa>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	4a2c      	ldr	r2, [pc, #176]	; (8011324 <TIM_Base_SetConfig+0x138>)
 8011272:	4293      	cmp	r3, r2
 8011274:	d00f      	beq.n	8011296 <TIM_Base_SetConfig+0xaa>
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	4a2b      	ldr	r2, [pc, #172]	; (8011328 <TIM_Base_SetConfig+0x13c>)
 801127a:	4293      	cmp	r3, r2
 801127c:	d00b      	beq.n	8011296 <TIM_Base_SetConfig+0xaa>
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	4a2a      	ldr	r2, [pc, #168]	; (801132c <TIM_Base_SetConfig+0x140>)
 8011282:	4293      	cmp	r3, r2
 8011284:	d007      	beq.n	8011296 <TIM_Base_SetConfig+0xaa>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	4a29      	ldr	r2, [pc, #164]	; (8011330 <TIM_Base_SetConfig+0x144>)
 801128a:	4293      	cmp	r3, r2
 801128c:	d003      	beq.n	8011296 <TIM_Base_SetConfig+0xaa>
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	4a28      	ldr	r2, [pc, #160]	; (8011334 <TIM_Base_SetConfig+0x148>)
 8011292:	4293      	cmp	r3, r2
 8011294:	d108      	bne.n	80112a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801129c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	68db      	ldr	r3, [r3, #12]
 80112a2:	68fa      	ldr	r2, [r7, #12]
 80112a4:	4313      	orrs	r3, r2
 80112a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	695b      	ldr	r3, [r3, #20]
 80112b2:	4313      	orrs	r3, r2
 80112b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	68fa      	ldr	r2, [r7, #12]
 80112ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	689a      	ldr	r2, [r3, #8]
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	681a      	ldr	r2, [r3, #0]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	4a10      	ldr	r2, [pc, #64]	; (8011310 <TIM_Base_SetConfig+0x124>)
 80112d0:	4293      	cmp	r3, r2
 80112d2:	d00f      	beq.n	80112f4 <TIM_Base_SetConfig+0x108>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	4a12      	ldr	r2, [pc, #72]	; (8011320 <TIM_Base_SetConfig+0x134>)
 80112d8:	4293      	cmp	r3, r2
 80112da:	d00b      	beq.n	80112f4 <TIM_Base_SetConfig+0x108>
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	4a11      	ldr	r2, [pc, #68]	; (8011324 <TIM_Base_SetConfig+0x138>)
 80112e0:	4293      	cmp	r3, r2
 80112e2:	d007      	beq.n	80112f4 <TIM_Base_SetConfig+0x108>
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	4a10      	ldr	r2, [pc, #64]	; (8011328 <TIM_Base_SetConfig+0x13c>)
 80112e8:	4293      	cmp	r3, r2
 80112ea:	d003      	beq.n	80112f4 <TIM_Base_SetConfig+0x108>
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	4a0f      	ldr	r2, [pc, #60]	; (801132c <TIM_Base_SetConfig+0x140>)
 80112f0:	4293      	cmp	r3, r2
 80112f2:	d103      	bne.n	80112fc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	691a      	ldr	r2, [r3, #16]
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2201      	movs	r2, #1
 8011300:	615a      	str	r2, [r3, #20]
}
 8011302:	bf00      	nop
 8011304:	3714      	adds	r7, #20
 8011306:	46bd      	mov	sp, r7
 8011308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130c:	4770      	bx	lr
 801130e:	bf00      	nop
 8011310:	40010000 	.word	0x40010000
 8011314:	40000400 	.word	0x40000400
 8011318:	40000800 	.word	0x40000800
 801131c:	40000c00 	.word	0x40000c00
 8011320:	40010400 	.word	0x40010400
 8011324:	40014000 	.word	0x40014000
 8011328:	40014400 	.word	0x40014400
 801132c:	40014800 	.word	0x40014800
 8011330:	4000e000 	.word	0x4000e000
 8011334:	4000e400 	.word	0x4000e400

08011338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011338:	b480      	push	{r7}
 801133a:	b087      	sub	sp, #28
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6a1b      	ldr	r3, [r3, #32]
 8011346:	f023 0201 	bic.w	r2, r3, #1
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6a1b      	ldr	r3, [r3, #32]
 8011352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	699b      	ldr	r3, [r3, #24]
 801135e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011360:	68fa      	ldr	r2, [r7, #12]
 8011362:	4b37      	ldr	r3, [pc, #220]	; (8011440 <TIM_OC1_SetConfig+0x108>)
 8011364:	4013      	ands	r3, r2
 8011366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	f023 0303 	bic.w	r3, r3, #3
 801136e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	68fa      	ldr	r2, [r7, #12]
 8011376:	4313      	orrs	r3, r2
 8011378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	f023 0302 	bic.w	r3, r3, #2
 8011380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	689b      	ldr	r3, [r3, #8]
 8011386:	697a      	ldr	r2, [r7, #20]
 8011388:	4313      	orrs	r3, r2
 801138a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	4a2d      	ldr	r2, [pc, #180]	; (8011444 <TIM_OC1_SetConfig+0x10c>)
 8011390:	4293      	cmp	r3, r2
 8011392:	d00f      	beq.n	80113b4 <TIM_OC1_SetConfig+0x7c>
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	4a2c      	ldr	r2, [pc, #176]	; (8011448 <TIM_OC1_SetConfig+0x110>)
 8011398:	4293      	cmp	r3, r2
 801139a:	d00b      	beq.n	80113b4 <TIM_OC1_SetConfig+0x7c>
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	4a2b      	ldr	r2, [pc, #172]	; (801144c <TIM_OC1_SetConfig+0x114>)
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d007      	beq.n	80113b4 <TIM_OC1_SetConfig+0x7c>
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	4a2a      	ldr	r2, [pc, #168]	; (8011450 <TIM_OC1_SetConfig+0x118>)
 80113a8:	4293      	cmp	r3, r2
 80113aa:	d003      	beq.n	80113b4 <TIM_OC1_SetConfig+0x7c>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	4a29      	ldr	r2, [pc, #164]	; (8011454 <TIM_OC1_SetConfig+0x11c>)
 80113b0:	4293      	cmp	r3, r2
 80113b2:	d10c      	bne.n	80113ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80113b4:	697b      	ldr	r3, [r7, #20]
 80113b6:	f023 0308 	bic.w	r3, r3, #8
 80113ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	68db      	ldr	r3, [r3, #12]
 80113c0:	697a      	ldr	r2, [r7, #20]
 80113c2:	4313      	orrs	r3, r2
 80113c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	f023 0304 	bic.w	r3, r3, #4
 80113cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	4a1c      	ldr	r2, [pc, #112]	; (8011444 <TIM_OC1_SetConfig+0x10c>)
 80113d2:	4293      	cmp	r3, r2
 80113d4:	d00f      	beq.n	80113f6 <TIM_OC1_SetConfig+0xbe>
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	4a1b      	ldr	r2, [pc, #108]	; (8011448 <TIM_OC1_SetConfig+0x110>)
 80113da:	4293      	cmp	r3, r2
 80113dc:	d00b      	beq.n	80113f6 <TIM_OC1_SetConfig+0xbe>
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	4a1a      	ldr	r2, [pc, #104]	; (801144c <TIM_OC1_SetConfig+0x114>)
 80113e2:	4293      	cmp	r3, r2
 80113e4:	d007      	beq.n	80113f6 <TIM_OC1_SetConfig+0xbe>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	4a19      	ldr	r2, [pc, #100]	; (8011450 <TIM_OC1_SetConfig+0x118>)
 80113ea:	4293      	cmp	r3, r2
 80113ec:	d003      	beq.n	80113f6 <TIM_OC1_SetConfig+0xbe>
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	4a18      	ldr	r2, [pc, #96]	; (8011454 <TIM_OC1_SetConfig+0x11c>)
 80113f2:	4293      	cmp	r3, r2
 80113f4:	d111      	bne.n	801141a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80113fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	695b      	ldr	r3, [r3, #20]
 801140a:	693a      	ldr	r2, [r7, #16]
 801140c:	4313      	orrs	r3, r2
 801140e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	699b      	ldr	r3, [r3, #24]
 8011414:	693a      	ldr	r2, [r7, #16]
 8011416:	4313      	orrs	r3, r2
 8011418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	693a      	ldr	r2, [r7, #16]
 801141e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	68fa      	ldr	r2, [r7, #12]
 8011424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	685a      	ldr	r2, [r3, #4]
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	697a      	ldr	r2, [r7, #20]
 8011432:	621a      	str	r2, [r3, #32]
}
 8011434:	bf00      	nop
 8011436:	371c      	adds	r7, #28
 8011438:	46bd      	mov	sp, r7
 801143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143e:	4770      	bx	lr
 8011440:	fffeff8f 	.word	0xfffeff8f
 8011444:	40010000 	.word	0x40010000
 8011448:	40010400 	.word	0x40010400
 801144c:	40014000 	.word	0x40014000
 8011450:	40014400 	.word	0x40014400
 8011454:	40014800 	.word	0x40014800

08011458 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011458:	b480      	push	{r7}
 801145a:	b087      	sub	sp, #28
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6a1b      	ldr	r3, [r3, #32]
 8011466:	f023 0210 	bic.w	r2, r3, #16
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6a1b      	ldr	r3, [r3, #32]
 8011472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	685b      	ldr	r3, [r3, #4]
 8011478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	699b      	ldr	r3, [r3, #24]
 801147e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011480:	68fa      	ldr	r2, [r7, #12]
 8011482:	4b34      	ldr	r3, [pc, #208]	; (8011554 <TIM_OC2_SetConfig+0xfc>)
 8011484:	4013      	ands	r3, r2
 8011486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801148e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	021b      	lsls	r3, r3, #8
 8011496:	68fa      	ldr	r2, [r7, #12]
 8011498:	4313      	orrs	r3, r2
 801149a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	f023 0320 	bic.w	r3, r3, #32
 80114a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	689b      	ldr	r3, [r3, #8]
 80114a8:	011b      	lsls	r3, r3, #4
 80114aa:	697a      	ldr	r2, [r7, #20]
 80114ac:	4313      	orrs	r3, r2
 80114ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	4a29      	ldr	r2, [pc, #164]	; (8011558 <TIM_OC2_SetConfig+0x100>)
 80114b4:	4293      	cmp	r3, r2
 80114b6:	d003      	beq.n	80114c0 <TIM_OC2_SetConfig+0x68>
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	4a28      	ldr	r2, [pc, #160]	; (801155c <TIM_OC2_SetConfig+0x104>)
 80114bc:	4293      	cmp	r3, r2
 80114be:	d10d      	bne.n	80114dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	011b      	lsls	r3, r3, #4
 80114ce:	697a      	ldr	r2, [r7, #20]
 80114d0:	4313      	orrs	r3, r2
 80114d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	4a1e      	ldr	r2, [pc, #120]	; (8011558 <TIM_OC2_SetConfig+0x100>)
 80114e0:	4293      	cmp	r3, r2
 80114e2:	d00f      	beq.n	8011504 <TIM_OC2_SetConfig+0xac>
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	4a1d      	ldr	r2, [pc, #116]	; (801155c <TIM_OC2_SetConfig+0x104>)
 80114e8:	4293      	cmp	r3, r2
 80114ea:	d00b      	beq.n	8011504 <TIM_OC2_SetConfig+0xac>
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	4a1c      	ldr	r2, [pc, #112]	; (8011560 <TIM_OC2_SetConfig+0x108>)
 80114f0:	4293      	cmp	r3, r2
 80114f2:	d007      	beq.n	8011504 <TIM_OC2_SetConfig+0xac>
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	4a1b      	ldr	r2, [pc, #108]	; (8011564 <TIM_OC2_SetConfig+0x10c>)
 80114f8:	4293      	cmp	r3, r2
 80114fa:	d003      	beq.n	8011504 <TIM_OC2_SetConfig+0xac>
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	4a1a      	ldr	r2, [pc, #104]	; (8011568 <TIM_OC2_SetConfig+0x110>)
 8011500:	4293      	cmp	r3, r2
 8011502:	d113      	bne.n	801152c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801150a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801150c:	693b      	ldr	r3, [r7, #16]
 801150e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	695b      	ldr	r3, [r3, #20]
 8011518:	009b      	lsls	r3, r3, #2
 801151a:	693a      	ldr	r2, [r7, #16]
 801151c:	4313      	orrs	r3, r2
 801151e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	699b      	ldr	r3, [r3, #24]
 8011524:	009b      	lsls	r3, r3, #2
 8011526:	693a      	ldr	r2, [r7, #16]
 8011528:	4313      	orrs	r3, r2
 801152a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	693a      	ldr	r2, [r7, #16]
 8011530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	68fa      	ldr	r2, [r7, #12]
 8011536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	685a      	ldr	r2, [r3, #4]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	697a      	ldr	r2, [r7, #20]
 8011544:	621a      	str	r2, [r3, #32]
}
 8011546:	bf00      	nop
 8011548:	371c      	adds	r7, #28
 801154a:	46bd      	mov	sp, r7
 801154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011550:	4770      	bx	lr
 8011552:	bf00      	nop
 8011554:	feff8fff 	.word	0xfeff8fff
 8011558:	40010000 	.word	0x40010000
 801155c:	40010400 	.word	0x40010400
 8011560:	40014000 	.word	0x40014000
 8011564:	40014400 	.word	0x40014400
 8011568:	40014800 	.word	0x40014800

0801156c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801156c:	b480      	push	{r7}
 801156e:	b087      	sub	sp, #28
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6a1b      	ldr	r3, [r3, #32]
 801157a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6a1b      	ldr	r3, [r3, #32]
 8011586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	69db      	ldr	r3, [r3, #28]
 8011592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011594:	68fa      	ldr	r2, [r7, #12]
 8011596:	4b33      	ldr	r3, [pc, #204]	; (8011664 <TIM_OC3_SetConfig+0xf8>)
 8011598:	4013      	ands	r3, r2
 801159a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f023 0303 	bic.w	r3, r3, #3
 80115a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	68fa      	ldr	r2, [r7, #12]
 80115aa:	4313      	orrs	r3, r2
 80115ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80115b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	689b      	ldr	r3, [r3, #8]
 80115ba:	021b      	lsls	r3, r3, #8
 80115bc:	697a      	ldr	r2, [r7, #20]
 80115be:	4313      	orrs	r3, r2
 80115c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	4a28      	ldr	r2, [pc, #160]	; (8011668 <TIM_OC3_SetConfig+0xfc>)
 80115c6:	4293      	cmp	r3, r2
 80115c8:	d003      	beq.n	80115d2 <TIM_OC3_SetConfig+0x66>
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	4a27      	ldr	r2, [pc, #156]	; (801166c <TIM_OC3_SetConfig+0x100>)
 80115ce:	4293      	cmp	r3, r2
 80115d0:	d10d      	bne.n	80115ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80115d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	68db      	ldr	r3, [r3, #12]
 80115de:	021b      	lsls	r3, r3, #8
 80115e0:	697a      	ldr	r2, [r7, #20]
 80115e2:	4313      	orrs	r3, r2
 80115e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80115ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	4a1d      	ldr	r2, [pc, #116]	; (8011668 <TIM_OC3_SetConfig+0xfc>)
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d00f      	beq.n	8011616 <TIM_OC3_SetConfig+0xaa>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	4a1c      	ldr	r2, [pc, #112]	; (801166c <TIM_OC3_SetConfig+0x100>)
 80115fa:	4293      	cmp	r3, r2
 80115fc:	d00b      	beq.n	8011616 <TIM_OC3_SetConfig+0xaa>
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	4a1b      	ldr	r2, [pc, #108]	; (8011670 <TIM_OC3_SetConfig+0x104>)
 8011602:	4293      	cmp	r3, r2
 8011604:	d007      	beq.n	8011616 <TIM_OC3_SetConfig+0xaa>
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	4a1a      	ldr	r2, [pc, #104]	; (8011674 <TIM_OC3_SetConfig+0x108>)
 801160a:	4293      	cmp	r3, r2
 801160c:	d003      	beq.n	8011616 <TIM_OC3_SetConfig+0xaa>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	4a19      	ldr	r2, [pc, #100]	; (8011678 <TIM_OC3_SetConfig+0x10c>)
 8011612:	4293      	cmp	r3, r2
 8011614:	d113      	bne.n	801163e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011616:	693b      	ldr	r3, [r7, #16]
 8011618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801161c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	695b      	ldr	r3, [r3, #20]
 801162a:	011b      	lsls	r3, r3, #4
 801162c:	693a      	ldr	r2, [r7, #16]
 801162e:	4313      	orrs	r3, r2
 8011630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011632:	683b      	ldr	r3, [r7, #0]
 8011634:	699b      	ldr	r3, [r3, #24]
 8011636:	011b      	lsls	r3, r3, #4
 8011638:	693a      	ldr	r2, [r7, #16]
 801163a:	4313      	orrs	r3, r2
 801163c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	693a      	ldr	r2, [r7, #16]
 8011642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	68fa      	ldr	r2, [r7, #12]
 8011648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	685a      	ldr	r2, [r3, #4]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	697a      	ldr	r2, [r7, #20]
 8011656:	621a      	str	r2, [r3, #32]
}
 8011658:	bf00      	nop
 801165a:	371c      	adds	r7, #28
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr
 8011664:	fffeff8f 	.word	0xfffeff8f
 8011668:	40010000 	.word	0x40010000
 801166c:	40010400 	.word	0x40010400
 8011670:	40014000 	.word	0x40014000
 8011674:	40014400 	.word	0x40014400
 8011678:	40014800 	.word	0x40014800

0801167c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801167c:	b480      	push	{r7}
 801167e:	b087      	sub	sp, #28
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6a1b      	ldr	r3, [r3, #32]
 801168a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6a1b      	ldr	r3, [r3, #32]
 8011696:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	685b      	ldr	r3, [r3, #4]
 801169c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	69db      	ldr	r3, [r3, #28]
 80116a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80116a4:	68fa      	ldr	r2, [r7, #12]
 80116a6:	4b24      	ldr	r3, [pc, #144]	; (8011738 <TIM_OC4_SetConfig+0xbc>)
 80116a8:	4013      	ands	r3, r2
 80116aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80116b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	021b      	lsls	r3, r3, #8
 80116ba:	68fa      	ldr	r2, [r7, #12]
 80116bc:	4313      	orrs	r3, r2
 80116be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80116c0:	693b      	ldr	r3, [r7, #16]
 80116c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80116c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	689b      	ldr	r3, [r3, #8]
 80116cc:	031b      	lsls	r3, r3, #12
 80116ce:	693a      	ldr	r2, [r7, #16]
 80116d0:	4313      	orrs	r3, r2
 80116d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	4a19      	ldr	r2, [pc, #100]	; (801173c <TIM_OC4_SetConfig+0xc0>)
 80116d8:	4293      	cmp	r3, r2
 80116da:	d00f      	beq.n	80116fc <TIM_OC4_SetConfig+0x80>
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	4a18      	ldr	r2, [pc, #96]	; (8011740 <TIM_OC4_SetConfig+0xc4>)
 80116e0:	4293      	cmp	r3, r2
 80116e2:	d00b      	beq.n	80116fc <TIM_OC4_SetConfig+0x80>
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	4a17      	ldr	r2, [pc, #92]	; (8011744 <TIM_OC4_SetConfig+0xc8>)
 80116e8:	4293      	cmp	r3, r2
 80116ea:	d007      	beq.n	80116fc <TIM_OC4_SetConfig+0x80>
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	4a16      	ldr	r2, [pc, #88]	; (8011748 <TIM_OC4_SetConfig+0xcc>)
 80116f0:	4293      	cmp	r3, r2
 80116f2:	d003      	beq.n	80116fc <TIM_OC4_SetConfig+0x80>
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	4a15      	ldr	r2, [pc, #84]	; (801174c <TIM_OC4_SetConfig+0xd0>)
 80116f8:	4293      	cmp	r3, r2
 80116fa:	d109      	bne.n	8011710 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	695b      	ldr	r3, [r3, #20]
 8011708:	019b      	lsls	r3, r3, #6
 801170a:	697a      	ldr	r2, [r7, #20]
 801170c:	4313      	orrs	r3, r2
 801170e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	697a      	ldr	r2, [r7, #20]
 8011714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	68fa      	ldr	r2, [r7, #12]
 801171a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	685a      	ldr	r2, [r3, #4]
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	693a      	ldr	r2, [r7, #16]
 8011728:	621a      	str	r2, [r3, #32]
}
 801172a:	bf00      	nop
 801172c:	371c      	adds	r7, #28
 801172e:	46bd      	mov	sp, r7
 8011730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011734:	4770      	bx	lr
 8011736:	bf00      	nop
 8011738:	feff8fff 	.word	0xfeff8fff
 801173c:	40010000 	.word	0x40010000
 8011740:	40010400 	.word	0x40010400
 8011744:	40014000 	.word	0x40014000
 8011748:	40014400 	.word	0x40014400
 801174c:	40014800 	.word	0x40014800

08011750 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011750:	b480      	push	{r7}
 8011752:	b087      	sub	sp, #28
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6a1b      	ldr	r3, [r3, #32]
 801175e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6a1b      	ldr	r3, [r3, #32]
 801176a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	685b      	ldr	r3, [r3, #4]
 8011770:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011778:	68fa      	ldr	r2, [r7, #12]
 801177a:	4b21      	ldr	r3, [pc, #132]	; (8011800 <TIM_OC5_SetConfig+0xb0>)
 801177c:	4013      	ands	r3, r2
 801177e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	68fa      	ldr	r2, [r7, #12]
 8011786:	4313      	orrs	r3, r2
 8011788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011790:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	689b      	ldr	r3, [r3, #8]
 8011796:	041b      	lsls	r3, r3, #16
 8011798:	693a      	ldr	r2, [r7, #16]
 801179a:	4313      	orrs	r3, r2
 801179c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	4a18      	ldr	r2, [pc, #96]	; (8011804 <TIM_OC5_SetConfig+0xb4>)
 80117a2:	4293      	cmp	r3, r2
 80117a4:	d00f      	beq.n	80117c6 <TIM_OC5_SetConfig+0x76>
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	4a17      	ldr	r2, [pc, #92]	; (8011808 <TIM_OC5_SetConfig+0xb8>)
 80117aa:	4293      	cmp	r3, r2
 80117ac:	d00b      	beq.n	80117c6 <TIM_OC5_SetConfig+0x76>
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	4a16      	ldr	r2, [pc, #88]	; (801180c <TIM_OC5_SetConfig+0xbc>)
 80117b2:	4293      	cmp	r3, r2
 80117b4:	d007      	beq.n	80117c6 <TIM_OC5_SetConfig+0x76>
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	4a15      	ldr	r2, [pc, #84]	; (8011810 <TIM_OC5_SetConfig+0xc0>)
 80117ba:	4293      	cmp	r3, r2
 80117bc:	d003      	beq.n	80117c6 <TIM_OC5_SetConfig+0x76>
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	4a14      	ldr	r2, [pc, #80]	; (8011814 <TIM_OC5_SetConfig+0xc4>)
 80117c2:	4293      	cmp	r3, r2
 80117c4:	d109      	bne.n	80117da <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80117cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	695b      	ldr	r3, [r3, #20]
 80117d2:	021b      	lsls	r3, r3, #8
 80117d4:	697a      	ldr	r2, [r7, #20]
 80117d6:	4313      	orrs	r3, r2
 80117d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	697a      	ldr	r2, [r7, #20]
 80117de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	68fa      	ldr	r2, [r7, #12]
 80117e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	685a      	ldr	r2, [r3, #4]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	693a      	ldr	r2, [r7, #16]
 80117f2:	621a      	str	r2, [r3, #32]
}
 80117f4:	bf00      	nop
 80117f6:	371c      	adds	r7, #28
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr
 8011800:	fffeff8f 	.word	0xfffeff8f
 8011804:	40010000 	.word	0x40010000
 8011808:	40010400 	.word	0x40010400
 801180c:	40014000 	.word	0x40014000
 8011810:	40014400 	.word	0x40014400
 8011814:	40014800 	.word	0x40014800

08011818 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011818:	b480      	push	{r7}
 801181a:	b087      	sub	sp, #28
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	6a1b      	ldr	r3, [r3, #32]
 8011826:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6a1b      	ldr	r3, [r3, #32]
 8011832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	685b      	ldr	r3, [r3, #4]
 8011838:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801183e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011840:	68fa      	ldr	r2, [r7, #12]
 8011842:	4b22      	ldr	r3, [pc, #136]	; (80118cc <TIM_OC6_SetConfig+0xb4>)
 8011844:	4013      	ands	r3, r2
 8011846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	021b      	lsls	r3, r3, #8
 801184e:	68fa      	ldr	r2, [r7, #12]
 8011850:	4313      	orrs	r3, r2
 8011852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801185a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	689b      	ldr	r3, [r3, #8]
 8011860:	051b      	lsls	r3, r3, #20
 8011862:	693a      	ldr	r2, [r7, #16]
 8011864:	4313      	orrs	r3, r2
 8011866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	4a19      	ldr	r2, [pc, #100]	; (80118d0 <TIM_OC6_SetConfig+0xb8>)
 801186c:	4293      	cmp	r3, r2
 801186e:	d00f      	beq.n	8011890 <TIM_OC6_SetConfig+0x78>
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	4a18      	ldr	r2, [pc, #96]	; (80118d4 <TIM_OC6_SetConfig+0xbc>)
 8011874:	4293      	cmp	r3, r2
 8011876:	d00b      	beq.n	8011890 <TIM_OC6_SetConfig+0x78>
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	4a17      	ldr	r2, [pc, #92]	; (80118d8 <TIM_OC6_SetConfig+0xc0>)
 801187c:	4293      	cmp	r3, r2
 801187e:	d007      	beq.n	8011890 <TIM_OC6_SetConfig+0x78>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	4a16      	ldr	r2, [pc, #88]	; (80118dc <TIM_OC6_SetConfig+0xc4>)
 8011884:	4293      	cmp	r3, r2
 8011886:	d003      	beq.n	8011890 <TIM_OC6_SetConfig+0x78>
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	4a15      	ldr	r2, [pc, #84]	; (80118e0 <TIM_OC6_SetConfig+0xc8>)
 801188c:	4293      	cmp	r3, r2
 801188e:	d109      	bne.n	80118a4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011896:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	695b      	ldr	r3, [r3, #20]
 801189c:	029b      	lsls	r3, r3, #10
 801189e:	697a      	ldr	r2, [r7, #20]
 80118a0:	4313      	orrs	r3, r2
 80118a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	697a      	ldr	r2, [r7, #20]
 80118a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	68fa      	ldr	r2, [r7, #12]
 80118ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	685a      	ldr	r2, [r3, #4]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	693a      	ldr	r2, [r7, #16]
 80118bc:	621a      	str	r2, [r3, #32]
}
 80118be:	bf00      	nop
 80118c0:	371c      	adds	r7, #28
 80118c2:	46bd      	mov	sp, r7
 80118c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop
 80118cc:	feff8fff 	.word	0xfeff8fff
 80118d0:	40010000 	.word	0x40010000
 80118d4:	40010400 	.word	0x40010400
 80118d8:	40014000 	.word	0x40014000
 80118dc:	40014400 	.word	0x40014400
 80118e0:	40014800 	.word	0x40014800

080118e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b087      	sub	sp, #28
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	60f8      	str	r0, [r7, #12]
 80118ec:	60b9      	str	r1, [r7, #8]
 80118ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	f003 031f 	and.w	r3, r3, #31
 80118f6:	2201      	movs	r2, #1
 80118f8:	fa02 f303 	lsl.w	r3, r2, r3
 80118fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	6a1a      	ldr	r2, [r3, #32]
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	43db      	mvns	r3, r3
 8011906:	401a      	ands	r2, r3
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	6a1a      	ldr	r2, [r3, #32]
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	f003 031f 	and.w	r3, r3, #31
 8011916:	6879      	ldr	r1, [r7, #4]
 8011918:	fa01 f303 	lsl.w	r3, r1, r3
 801191c:	431a      	orrs	r2, r3
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	621a      	str	r2, [r3, #32]
}
 8011922:	bf00      	nop
 8011924:	371c      	adds	r7, #28
 8011926:	46bd      	mov	sp, r7
 8011928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192c:	4770      	bx	lr
	...

08011930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011930:	b480      	push	{r7}
 8011932:	b085      	sub	sp, #20
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011940:	2b01      	cmp	r3, #1
 8011942:	d101      	bne.n	8011948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011944:	2302      	movs	r3, #2
 8011946:	e077      	b.n	8011a38 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2201      	movs	r2, #1
 801194c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2202      	movs	r2, #2
 8011954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	685b      	ldr	r3, [r3, #4]
 801195e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	689b      	ldr	r3, [r3, #8]
 8011966:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	4a35      	ldr	r2, [pc, #212]	; (8011a44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801196e:	4293      	cmp	r3, r2
 8011970:	d004      	beq.n	801197c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	4a34      	ldr	r2, [pc, #208]	; (8011a48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011978:	4293      	cmp	r3, r2
 801197a:	d108      	bne.n	801198e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011982:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	68fa      	ldr	r2, [r7, #12]
 801198a:	4313      	orrs	r3, r2
 801198c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011994:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	68fa      	ldr	r2, [r7, #12]
 801199c:	4313      	orrs	r3, r2
 801199e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	68fa      	ldr	r2, [r7, #12]
 80119a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	4a25      	ldr	r2, [pc, #148]	; (8011a44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80119ae:	4293      	cmp	r3, r2
 80119b0:	d02c      	beq.n	8011a0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80119ba:	d027      	beq.n	8011a0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	4a22      	ldr	r2, [pc, #136]	; (8011a4c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80119c2:	4293      	cmp	r3, r2
 80119c4:	d022      	beq.n	8011a0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	4a21      	ldr	r2, [pc, #132]	; (8011a50 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80119cc:	4293      	cmp	r3, r2
 80119ce:	d01d      	beq.n	8011a0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	4a1f      	ldr	r2, [pc, #124]	; (8011a54 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80119d6:	4293      	cmp	r3, r2
 80119d8:	d018      	beq.n	8011a0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	4a1a      	ldr	r2, [pc, #104]	; (8011a48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80119e0:	4293      	cmp	r3, r2
 80119e2:	d013      	beq.n	8011a0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	4a1b      	ldr	r2, [pc, #108]	; (8011a58 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80119ea:	4293      	cmp	r3, r2
 80119ec:	d00e      	beq.n	8011a0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	4a1a      	ldr	r2, [pc, #104]	; (8011a5c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80119f4:	4293      	cmp	r3, r2
 80119f6:	d009      	beq.n	8011a0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	4a18      	ldr	r2, [pc, #96]	; (8011a60 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d004      	beq.n	8011a0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	4a17      	ldr	r2, [pc, #92]	; (8011a64 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011a08:	4293      	cmp	r3, r2
 8011a0a:	d10c      	bne.n	8011a26 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	689b      	ldr	r3, [r3, #8]
 8011a18:	68ba      	ldr	r2, [r7, #8]
 8011a1a:	4313      	orrs	r3, r2
 8011a1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	68ba      	ldr	r2, [r7, #8]
 8011a24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2201      	movs	r2, #1
 8011a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2200      	movs	r2, #0
 8011a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011a36:	2300      	movs	r3, #0
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3714      	adds	r7, #20
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a42:	4770      	bx	lr
 8011a44:	40010000 	.word	0x40010000
 8011a48:	40010400 	.word	0x40010400
 8011a4c:	40000400 	.word	0x40000400
 8011a50:	40000800 	.word	0x40000800
 8011a54:	40000c00 	.word	0x40000c00
 8011a58:	40001800 	.word	0x40001800
 8011a5c:	40014000 	.word	0x40014000
 8011a60:	4000e000 	.word	0x4000e000
 8011a64:	4000e400 	.word	0x4000e400

08011a68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011a68:	b480      	push	{r7}
 8011a6a:	b083      	sub	sp, #12
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011a70:	bf00      	nop
 8011a72:	370c      	adds	r7, #12
 8011a74:	46bd      	mov	sp, r7
 8011a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7a:	4770      	bx	lr

08011a7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011a7c:	b480      	push	{r7}
 8011a7e:	b083      	sub	sp, #12
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011a84:	bf00      	nop
 8011a86:	370c      	adds	r7, #12
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8e:	4770      	bx	lr

08011a90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011a90:	b480      	push	{r7}
 8011a92:	b083      	sub	sp, #12
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011a98:	bf00      	nop
 8011a9a:	370c      	adds	r7, #12
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa2:	4770      	bx	lr

08011aa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d101      	bne.n	8011ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	e042      	b.n	8011b3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d106      	bne.n	8011ace <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f7f1 ffe9 	bl	8003aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2224      	movs	r2, #36	; 0x24
 8011ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	681a      	ldr	r2, [r3, #0]
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	f022 0201 	bic.w	r2, r2, #1
 8011ae4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f000 f82c 	bl	8011b44 <UART_SetConfig>
 8011aec:	4603      	mov	r3, r0
 8011aee:	2b01      	cmp	r3, #1
 8011af0:	d101      	bne.n	8011af6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8011af2:	2301      	movs	r3, #1
 8011af4:	e022      	b.n	8011b3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d002      	beq.n	8011b04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8011afe:	6878      	ldr	r0, [r7, #4]
 8011b00:	f000 fe8c 	bl	801281c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	685a      	ldr	r2, [r3, #4]
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011b12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	689a      	ldr	r2, [r3, #8]
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011b22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	681a      	ldr	r2, [r3, #0]
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	f042 0201 	orr.w	r2, r2, #1
 8011b32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f000 ff13 	bl	8012960 <UART_CheckIdleState>
 8011b3a:	4603      	mov	r3, r0
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	3708      	adds	r7, #8
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}

08011b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011b48:	b092      	sub	sp, #72	; 0x48
 8011b4a:	af00      	add	r7, sp, #0
 8011b4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011b4e:	2300      	movs	r3, #0
 8011b50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	689a      	ldr	r2, [r3, #8]
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	691b      	ldr	r3, [r3, #16]
 8011b5c:	431a      	orrs	r2, r3
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	695b      	ldr	r3, [r3, #20]
 8011b62:	431a      	orrs	r2, r3
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	69db      	ldr	r3, [r3, #28]
 8011b68:	4313      	orrs	r3, r2
 8011b6a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	681a      	ldr	r2, [r3, #0]
 8011b72:	4bbe      	ldr	r3, [pc, #760]	; (8011e6c <UART_SetConfig+0x328>)
 8011b74:	4013      	ands	r3, r2
 8011b76:	697a      	ldr	r2, [r7, #20]
 8011b78:	6812      	ldr	r2, [r2, #0]
 8011b7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011b7c:	430b      	orrs	r3, r1
 8011b7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011b80:	697b      	ldr	r3, [r7, #20]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	685b      	ldr	r3, [r3, #4]
 8011b86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	68da      	ldr	r2, [r3, #12]
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	430a      	orrs	r2, r1
 8011b94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	699b      	ldr	r3, [r3, #24]
 8011b9a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	4ab3      	ldr	r2, [pc, #716]	; (8011e70 <UART_SetConfig+0x32c>)
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	d004      	beq.n	8011bb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	6a1b      	ldr	r3, [r3, #32]
 8011baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011bac:	4313      	orrs	r3, r2
 8011bae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	689a      	ldr	r2, [r3, #8]
 8011bb6:	4baf      	ldr	r3, [pc, #700]	; (8011e74 <UART_SetConfig+0x330>)
 8011bb8:	4013      	ands	r3, r2
 8011bba:	697a      	ldr	r2, [r7, #20]
 8011bbc:	6812      	ldr	r2, [r2, #0]
 8011bbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011bc0:	430b      	orrs	r3, r1
 8011bc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bca:	f023 010f 	bic.w	r1, r3, #15
 8011bce:	697b      	ldr	r3, [r7, #20]
 8011bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bd2:	697b      	ldr	r3, [r7, #20]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	430a      	orrs	r2, r1
 8011bd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011bda:	697b      	ldr	r3, [r7, #20]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	4aa6      	ldr	r2, [pc, #664]	; (8011e78 <UART_SetConfig+0x334>)
 8011be0:	4293      	cmp	r3, r2
 8011be2:	d177      	bne.n	8011cd4 <UART_SetConfig+0x190>
 8011be4:	4ba5      	ldr	r3, [pc, #660]	; (8011e7c <UART_SetConfig+0x338>)
 8011be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011be8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011bec:	2b28      	cmp	r3, #40	; 0x28
 8011bee:	d86d      	bhi.n	8011ccc <UART_SetConfig+0x188>
 8011bf0:	a201      	add	r2, pc, #4	; (adr r2, 8011bf8 <UART_SetConfig+0xb4>)
 8011bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bf6:	bf00      	nop
 8011bf8:	08011c9d 	.word	0x08011c9d
 8011bfc:	08011ccd 	.word	0x08011ccd
 8011c00:	08011ccd 	.word	0x08011ccd
 8011c04:	08011ccd 	.word	0x08011ccd
 8011c08:	08011ccd 	.word	0x08011ccd
 8011c0c:	08011ccd 	.word	0x08011ccd
 8011c10:	08011ccd 	.word	0x08011ccd
 8011c14:	08011ccd 	.word	0x08011ccd
 8011c18:	08011ca5 	.word	0x08011ca5
 8011c1c:	08011ccd 	.word	0x08011ccd
 8011c20:	08011ccd 	.word	0x08011ccd
 8011c24:	08011ccd 	.word	0x08011ccd
 8011c28:	08011ccd 	.word	0x08011ccd
 8011c2c:	08011ccd 	.word	0x08011ccd
 8011c30:	08011ccd 	.word	0x08011ccd
 8011c34:	08011ccd 	.word	0x08011ccd
 8011c38:	08011cad 	.word	0x08011cad
 8011c3c:	08011ccd 	.word	0x08011ccd
 8011c40:	08011ccd 	.word	0x08011ccd
 8011c44:	08011ccd 	.word	0x08011ccd
 8011c48:	08011ccd 	.word	0x08011ccd
 8011c4c:	08011ccd 	.word	0x08011ccd
 8011c50:	08011ccd 	.word	0x08011ccd
 8011c54:	08011ccd 	.word	0x08011ccd
 8011c58:	08011cb5 	.word	0x08011cb5
 8011c5c:	08011ccd 	.word	0x08011ccd
 8011c60:	08011ccd 	.word	0x08011ccd
 8011c64:	08011ccd 	.word	0x08011ccd
 8011c68:	08011ccd 	.word	0x08011ccd
 8011c6c:	08011ccd 	.word	0x08011ccd
 8011c70:	08011ccd 	.word	0x08011ccd
 8011c74:	08011ccd 	.word	0x08011ccd
 8011c78:	08011cbd 	.word	0x08011cbd
 8011c7c:	08011ccd 	.word	0x08011ccd
 8011c80:	08011ccd 	.word	0x08011ccd
 8011c84:	08011ccd 	.word	0x08011ccd
 8011c88:	08011ccd 	.word	0x08011ccd
 8011c8c:	08011ccd 	.word	0x08011ccd
 8011c90:	08011ccd 	.word	0x08011ccd
 8011c94:	08011ccd 	.word	0x08011ccd
 8011c98:	08011cc5 	.word	0x08011cc5
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ca2:	e326      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011ca4:	2304      	movs	r3, #4
 8011ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011caa:	e322      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011cac:	2308      	movs	r3, #8
 8011cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cb2:	e31e      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011cb4:	2310      	movs	r3, #16
 8011cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cba:	e31a      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011cbc:	2320      	movs	r3, #32
 8011cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cc2:	e316      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011cc4:	2340      	movs	r3, #64	; 0x40
 8011cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cca:	e312      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011ccc:	2380      	movs	r3, #128	; 0x80
 8011cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cd2:	e30e      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	4a69      	ldr	r2, [pc, #420]	; (8011e80 <UART_SetConfig+0x33c>)
 8011cda:	4293      	cmp	r3, r2
 8011cdc:	d130      	bne.n	8011d40 <UART_SetConfig+0x1fc>
 8011cde:	4b67      	ldr	r3, [pc, #412]	; (8011e7c <UART_SetConfig+0x338>)
 8011ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ce2:	f003 0307 	and.w	r3, r3, #7
 8011ce6:	2b05      	cmp	r3, #5
 8011ce8:	d826      	bhi.n	8011d38 <UART_SetConfig+0x1f4>
 8011cea:	a201      	add	r2, pc, #4	; (adr r2, 8011cf0 <UART_SetConfig+0x1ac>)
 8011cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cf0:	08011d09 	.word	0x08011d09
 8011cf4:	08011d11 	.word	0x08011d11
 8011cf8:	08011d19 	.word	0x08011d19
 8011cfc:	08011d21 	.word	0x08011d21
 8011d00:	08011d29 	.word	0x08011d29
 8011d04:	08011d31 	.word	0x08011d31
 8011d08:	2300      	movs	r3, #0
 8011d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d0e:	e2f0      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011d10:	2304      	movs	r3, #4
 8011d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d16:	e2ec      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011d18:	2308      	movs	r3, #8
 8011d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d1e:	e2e8      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011d20:	2310      	movs	r3, #16
 8011d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d26:	e2e4      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011d28:	2320      	movs	r3, #32
 8011d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d2e:	e2e0      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011d30:	2340      	movs	r3, #64	; 0x40
 8011d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d36:	e2dc      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011d38:	2380      	movs	r3, #128	; 0x80
 8011d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d3e:	e2d8      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011d40:	697b      	ldr	r3, [r7, #20]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	4a4f      	ldr	r2, [pc, #316]	; (8011e84 <UART_SetConfig+0x340>)
 8011d46:	4293      	cmp	r3, r2
 8011d48:	d130      	bne.n	8011dac <UART_SetConfig+0x268>
 8011d4a:	4b4c      	ldr	r3, [pc, #304]	; (8011e7c <UART_SetConfig+0x338>)
 8011d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d4e:	f003 0307 	and.w	r3, r3, #7
 8011d52:	2b05      	cmp	r3, #5
 8011d54:	d826      	bhi.n	8011da4 <UART_SetConfig+0x260>
 8011d56:	a201      	add	r2, pc, #4	; (adr r2, 8011d5c <UART_SetConfig+0x218>)
 8011d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d5c:	08011d75 	.word	0x08011d75
 8011d60:	08011d7d 	.word	0x08011d7d
 8011d64:	08011d85 	.word	0x08011d85
 8011d68:	08011d8d 	.word	0x08011d8d
 8011d6c:	08011d95 	.word	0x08011d95
 8011d70:	08011d9d 	.word	0x08011d9d
 8011d74:	2300      	movs	r3, #0
 8011d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d7a:	e2ba      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011d7c:	2304      	movs	r3, #4
 8011d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d82:	e2b6      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011d84:	2308      	movs	r3, #8
 8011d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d8a:	e2b2      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011d8c:	2310      	movs	r3, #16
 8011d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d92:	e2ae      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011d94:	2320      	movs	r3, #32
 8011d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d9a:	e2aa      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011d9c:	2340      	movs	r3, #64	; 0x40
 8011d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011da2:	e2a6      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011da4:	2380      	movs	r3, #128	; 0x80
 8011da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011daa:	e2a2      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	4a35      	ldr	r2, [pc, #212]	; (8011e88 <UART_SetConfig+0x344>)
 8011db2:	4293      	cmp	r3, r2
 8011db4:	d130      	bne.n	8011e18 <UART_SetConfig+0x2d4>
 8011db6:	4b31      	ldr	r3, [pc, #196]	; (8011e7c <UART_SetConfig+0x338>)
 8011db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dba:	f003 0307 	and.w	r3, r3, #7
 8011dbe:	2b05      	cmp	r3, #5
 8011dc0:	d826      	bhi.n	8011e10 <UART_SetConfig+0x2cc>
 8011dc2:	a201      	add	r2, pc, #4	; (adr r2, 8011dc8 <UART_SetConfig+0x284>)
 8011dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dc8:	08011de1 	.word	0x08011de1
 8011dcc:	08011de9 	.word	0x08011de9
 8011dd0:	08011df1 	.word	0x08011df1
 8011dd4:	08011df9 	.word	0x08011df9
 8011dd8:	08011e01 	.word	0x08011e01
 8011ddc:	08011e09 	.word	0x08011e09
 8011de0:	2300      	movs	r3, #0
 8011de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011de6:	e284      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011de8:	2304      	movs	r3, #4
 8011dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dee:	e280      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011df0:	2308      	movs	r3, #8
 8011df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011df6:	e27c      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011df8:	2310      	movs	r3, #16
 8011dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dfe:	e278      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011e00:	2320      	movs	r3, #32
 8011e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e06:	e274      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011e08:	2340      	movs	r3, #64	; 0x40
 8011e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e0e:	e270      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011e10:	2380      	movs	r3, #128	; 0x80
 8011e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e16:	e26c      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011e18:	697b      	ldr	r3, [r7, #20]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	4a1b      	ldr	r2, [pc, #108]	; (8011e8c <UART_SetConfig+0x348>)
 8011e1e:	4293      	cmp	r3, r2
 8011e20:	d142      	bne.n	8011ea8 <UART_SetConfig+0x364>
 8011e22:	4b16      	ldr	r3, [pc, #88]	; (8011e7c <UART_SetConfig+0x338>)
 8011e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e26:	f003 0307 	and.w	r3, r3, #7
 8011e2a:	2b05      	cmp	r3, #5
 8011e2c:	d838      	bhi.n	8011ea0 <UART_SetConfig+0x35c>
 8011e2e:	a201      	add	r2, pc, #4	; (adr r2, 8011e34 <UART_SetConfig+0x2f0>)
 8011e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e34:	08011e4d 	.word	0x08011e4d
 8011e38:	08011e55 	.word	0x08011e55
 8011e3c:	08011e5d 	.word	0x08011e5d
 8011e40:	08011e65 	.word	0x08011e65
 8011e44:	08011e91 	.word	0x08011e91
 8011e48:	08011e99 	.word	0x08011e99
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e52:	e24e      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011e54:	2304      	movs	r3, #4
 8011e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e5a:	e24a      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011e5c:	2308      	movs	r3, #8
 8011e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e62:	e246      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011e64:	2310      	movs	r3, #16
 8011e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e6a:	e242      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011e6c:	cfff69f3 	.word	0xcfff69f3
 8011e70:	58000c00 	.word	0x58000c00
 8011e74:	11fff4ff 	.word	0x11fff4ff
 8011e78:	40011000 	.word	0x40011000
 8011e7c:	58024400 	.word	0x58024400
 8011e80:	40004400 	.word	0x40004400
 8011e84:	40004800 	.word	0x40004800
 8011e88:	40004c00 	.word	0x40004c00
 8011e8c:	40005000 	.word	0x40005000
 8011e90:	2320      	movs	r3, #32
 8011e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e96:	e22c      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011e98:	2340      	movs	r3, #64	; 0x40
 8011e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e9e:	e228      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011ea0:	2380      	movs	r3, #128	; 0x80
 8011ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ea6:	e224      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	4ab1      	ldr	r2, [pc, #708]	; (8012174 <UART_SetConfig+0x630>)
 8011eae:	4293      	cmp	r3, r2
 8011eb0:	d176      	bne.n	8011fa0 <UART_SetConfig+0x45c>
 8011eb2:	4bb1      	ldr	r3, [pc, #708]	; (8012178 <UART_SetConfig+0x634>)
 8011eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011eba:	2b28      	cmp	r3, #40	; 0x28
 8011ebc:	d86c      	bhi.n	8011f98 <UART_SetConfig+0x454>
 8011ebe:	a201      	add	r2, pc, #4	; (adr r2, 8011ec4 <UART_SetConfig+0x380>)
 8011ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ec4:	08011f69 	.word	0x08011f69
 8011ec8:	08011f99 	.word	0x08011f99
 8011ecc:	08011f99 	.word	0x08011f99
 8011ed0:	08011f99 	.word	0x08011f99
 8011ed4:	08011f99 	.word	0x08011f99
 8011ed8:	08011f99 	.word	0x08011f99
 8011edc:	08011f99 	.word	0x08011f99
 8011ee0:	08011f99 	.word	0x08011f99
 8011ee4:	08011f71 	.word	0x08011f71
 8011ee8:	08011f99 	.word	0x08011f99
 8011eec:	08011f99 	.word	0x08011f99
 8011ef0:	08011f99 	.word	0x08011f99
 8011ef4:	08011f99 	.word	0x08011f99
 8011ef8:	08011f99 	.word	0x08011f99
 8011efc:	08011f99 	.word	0x08011f99
 8011f00:	08011f99 	.word	0x08011f99
 8011f04:	08011f79 	.word	0x08011f79
 8011f08:	08011f99 	.word	0x08011f99
 8011f0c:	08011f99 	.word	0x08011f99
 8011f10:	08011f99 	.word	0x08011f99
 8011f14:	08011f99 	.word	0x08011f99
 8011f18:	08011f99 	.word	0x08011f99
 8011f1c:	08011f99 	.word	0x08011f99
 8011f20:	08011f99 	.word	0x08011f99
 8011f24:	08011f81 	.word	0x08011f81
 8011f28:	08011f99 	.word	0x08011f99
 8011f2c:	08011f99 	.word	0x08011f99
 8011f30:	08011f99 	.word	0x08011f99
 8011f34:	08011f99 	.word	0x08011f99
 8011f38:	08011f99 	.word	0x08011f99
 8011f3c:	08011f99 	.word	0x08011f99
 8011f40:	08011f99 	.word	0x08011f99
 8011f44:	08011f89 	.word	0x08011f89
 8011f48:	08011f99 	.word	0x08011f99
 8011f4c:	08011f99 	.word	0x08011f99
 8011f50:	08011f99 	.word	0x08011f99
 8011f54:	08011f99 	.word	0x08011f99
 8011f58:	08011f99 	.word	0x08011f99
 8011f5c:	08011f99 	.word	0x08011f99
 8011f60:	08011f99 	.word	0x08011f99
 8011f64:	08011f91 	.word	0x08011f91
 8011f68:	2301      	movs	r3, #1
 8011f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f6e:	e1c0      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011f70:	2304      	movs	r3, #4
 8011f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f76:	e1bc      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011f78:	2308      	movs	r3, #8
 8011f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f7e:	e1b8      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011f80:	2310      	movs	r3, #16
 8011f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f86:	e1b4      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011f88:	2320      	movs	r3, #32
 8011f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f8e:	e1b0      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011f90:	2340      	movs	r3, #64	; 0x40
 8011f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f96:	e1ac      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011f98:	2380      	movs	r3, #128	; 0x80
 8011f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f9e:	e1a8      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011fa0:	697b      	ldr	r3, [r7, #20]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	4a75      	ldr	r2, [pc, #468]	; (801217c <UART_SetConfig+0x638>)
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d130      	bne.n	801200c <UART_SetConfig+0x4c8>
 8011faa:	4b73      	ldr	r3, [pc, #460]	; (8012178 <UART_SetConfig+0x634>)
 8011fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011fae:	f003 0307 	and.w	r3, r3, #7
 8011fb2:	2b05      	cmp	r3, #5
 8011fb4:	d826      	bhi.n	8012004 <UART_SetConfig+0x4c0>
 8011fb6:	a201      	add	r2, pc, #4	; (adr r2, 8011fbc <UART_SetConfig+0x478>)
 8011fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fbc:	08011fd5 	.word	0x08011fd5
 8011fc0:	08011fdd 	.word	0x08011fdd
 8011fc4:	08011fe5 	.word	0x08011fe5
 8011fc8:	08011fed 	.word	0x08011fed
 8011fcc:	08011ff5 	.word	0x08011ff5
 8011fd0:	08011ffd 	.word	0x08011ffd
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fda:	e18a      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011fdc:	2304      	movs	r3, #4
 8011fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fe2:	e186      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011fe4:	2308      	movs	r3, #8
 8011fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fea:	e182      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011fec:	2310      	movs	r3, #16
 8011fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ff2:	e17e      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011ff4:	2320      	movs	r3, #32
 8011ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ffa:	e17a      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8011ffc:	2340      	movs	r3, #64	; 0x40
 8011ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012002:	e176      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012004:	2380      	movs	r3, #128	; 0x80
 8012006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801200a:	e172      	b.n	80122f2 <UART_SetConfig+0x7ae>
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	4a5b      	ldr	r2, [pc, #364]	; (8012180 <UART_SetConfig+0x63c>)
 8012012:	4293      	cmp	r3, r2
 8012014:	d130      	bne.n	8012078 <UART_SetConfig+0x534>
 8012016:	4b58      	ldr	r3, [pc, #352]	; (8012178 <UART_SetConfig+0x634>)
 8012018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801201a:	f003 0307 	and.w	r3, r3, #7
 801201e:	2b05      	cmp	r3, #5
 8012020:	d826      	bhi.n	8012070 <UART_SetConfig+0x52c>
 8012022:	a201      	add	r2, pc, #4	; (adr r2, 8012028 <UART_SetConfig+0x4e4>)
 8012024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012028:	08012041 	.word	0x08012041
 801202c:	08012049 	.word	0x08012049
 8012030:	08012051 	.word	0x08012051
 8012034:	08012059 	.word	0x08012059
 8012038:	08012061 	.word	0x08012061
 801203c:	08012069 	.word	0x08012069
 8012040:	2300      	movs	r3, #0
 8012042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012046:	e154      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012048:	2304      	movs	r3, #4
 801204a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801204e:	e150      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012050:	2308      	movs	r3, #8
 8012052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012056:	e14c      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012058:	2310      	movs	r3, #16
 801205a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801205e:	e148      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012060:	2320      	movs	r3, #32
 8012062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012066:	e144      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012068:	2340      	movs	r3, #64	; 0x40
 801206a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801206e:	e140      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012070:	2380      	movs	r3, #128	; 0x80
 8012072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012076:	e13c      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	4a41      	ldr	r2, [pc, #260]	; (8012184 <UART_SetConfig+0x640>)
 801207e:	4293      	cmp	r3, r2
 8012080:	f040 8082 	bne.w	8012188 <UART_SetConfig+0x644>
 8012084:	4b3c      	ldr	r3, [pc, #240]	; (8012178 <UART_SetConfig+0x634>)
 8012086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012088:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801208c:	2b28      	cmp	r3, #40	; 0x28
 801208e:	d86d      	bhi.n	801216c <UART_SetConfig+0x628>
 8012090:	a201      	add	r2, pc, #4	; (adr r2, 8012098 <UART_SetConfig+0x554>)
 8012092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012096:	bf00      	nop
 8012098:	0801213d 	.word	0x0801213d
 801209c:	0801216d 	.word	0x0801216d
 80120a0:	0801216d 	.word	0x0801216d
 80120a4:	0801216d 	.word	0x0801216d
 80120a8:	0801216d 	.word	0x0801216d
 80120ac:	0801216d 	.word	0x0801216d
 80120b0:	0801216d 	.word	0x0801216d
 80120b4:	0801216d 	.word	0x0801216d
 80120b8:	08012145 	.word	0x08012145
 80120bc:	0801216d 	.word	0x0801216d
 80120c0:	0801216d 	.word	0x0801216d
 80120c4:	0801216d 	.word	0x0801216d
 80120c8:	0801216d 	.word	0x0801216d
 80120cc:	0801216d 	.word	0x0801216d
 80120d0:	0801216d 	.word	0x0801216d
 80120d4:	0801216d 	.word	0x0801216d
 80120d8:	0801214d 	.word	0x0801214d
 80120dc:	0801216d 	.word	0x0801216d
 80120e0:	0801216d 	.word	0x0801216d
 80120e4:	0801216d 	.word	0x0801216d
 80120e8:	0801216d 	.word	0x0801216d
 80120ec:	0801216d 	.word	0x0801216d
 80120f0:	0801216d 	.word	0x0801216d
 80120f4:	0801216d 	.word	0x0801216d
 80120f8:	08012155 	.word	0x08012155
 80120fc:	0801216d 	.word	0x0801216d
 8012100:	0801216d 	.word	0x0801216d
 8012104:	0801216d 	.word	0x0801216d
 8012108:	0801216d 	.word	0x0801216d
 801210c:	0801216d 	.word	0x0801216d
 8012110:	0801216d 	.word	0x0801216d
 8012114:	0801216d 	.word	0x0801216d
 8012118:	0801215d 	.word	0x0801215d
 801211c:	0801216d 	.word	0x0801216d
 8012120:	0801216d 	.word	0x0801216d
 8012124:	0801216d 	.word	0x0801216d
 8012128:	0801216d 	.word	0x0801216d
 801212c:	0801216d 	.word	0x0801216d
 8012130:	0801216d 	.word	0x0801216d
 8012134:	0801216d 	.word	0x0801216d
 8012138:	08012165 	.word	0x08012165
 801213c:	2301      	movs	r3, #1
 801213e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012142:	e0d6      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012144:	2304      	movs	r3, #4
 8012146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801214a:	e0d2      	b.n	80122f2 <UART_SetConfig+0x7ae>
 801214c:	2308      	movs	r3, #8
 801214e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012152:	e0ce      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012154:	2310      	movs	r3, #16
 8012156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801215a:	e0ca      	b.n	80122f2 <UART_SetConfig+0x7ae>
 801215c:	2320      	movs	r3, #32
 801215e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012162:	e0c6      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012164:	2340      	movs	r3, #64	; 0x40
 8012166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801216a:	e0c2      	b.n	80122f2 <UART_SetConfig+0x7ae>
 801216c:	2380      	movs	r3, #128	; 0x80
 801216e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012172:	e0be      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012174:	40011400 	.word	0x40011400
 8012178:	58024400 	.word	0x58024400
 801217c:	40007800 	.word	0x40007800
 8012180:	40007c00 	.word	0x40007c00
 8012184:	40011800 	.word	0x40011800
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	4aad      	ldr	r2, [pc, #692]	; (8012444 <UART_SetConfig+0x900>)
 801218e:	4293      	cmp	r3, r2
 8012190:	d176      	bne.n	8012280 <UART_SetConfig+0x73c>
 8012192:	4bad      	ldr	r3, [pc, #692]	; (8012448 <UART_SetConfig+0x904>)
 8012194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801219a:	2b28      	cmp	r3, #40	; 0x28
 801219c:	d86c      	bhi.n	8012278 <UART_SetConfig+0x734>
 801219e:	a201      	add	r2, pc, #4	; (adr r2, 80121a4 <UART_SetConfig+0x660>)
 80121a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121a4:	08012249 	.word	0x08012249
 80121a8:	08012279 	.word	0x08012279
 80121ac:	08012279 	.word	0x08012279
 80121b0:	08012279 	.word	0x08012279
 80121b4:	08012279 	.word	0x08012279
 80121b8:	08012279 	.word	0x08012279
 80121bc:	08012279 	.word	0x08012279
 80121c0:	08012279 	.word	0x08012279
 80121c4:	08012251 	.word	0x08012251
 80121c8:	08012279 	.word	0x08012279
 80121cc:	08012279 	.word	0x08012279
 80121d0:	08012279 	.word	0x08012279
 80121d4:	08012279 	.word	0x08012279
 80121d8:	08012279 	.word	0x08012279
 80121dc:	08012279 	.word	0x08012279
 80121e0:	08012279 	.word	0x08012279
 80121e4:	08012259 	.word	0x08012259
 80121e8:	08012279 	.word	0x08012279
 80121ec:	08012279 	.word	0x08012279
 80121f0:	08012279 	.word	0x08012279
 80121f4:	08012279 	.word	0x08012279
 80121f8:	08012279 	.word	0x08012279
 80121fc:	08012279 	.word	0x08012279
 8012200:	08012279 	.word	0x08012279
 8012204:	08012261 	.word	0x08012261
 8012208:	08012279 	.word	0x08012279
 801220c:	08012279 	.word	0x08012279
 8012210:	08012279 	.word	0x08012279
 8012214:	08012279 	.word	0x08012279
 8012218:	08012279 	.word	0x08012279
 801221c:	08012279 	.word	0x08012279
 8012220:	08012279 	.word	0x08012279
 8012224:	08012269 	.word	0x08012269
 8012228:	08012279 	.word	0x08012279
 801222c:	08012279 	.word	0x08012279
 8012230:	08012279 	.word	0x08012279
 8012234:	08012279 	.word	0x08012279
 8012238:	08012279 	.word	0x08012279
 801223c:	08012279 	.word	0x08012279
 8012240:	08012279 	.word	0x08012279
 8012244:	08012271 	.word	0x08012271
 8012248:	2301      	movs	r3, #1
 801224a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801224e:	e050      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012250:	2304      	movs	r3, #4
 8012252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012256:	e04c      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012258:	2308      	movs	r3, #8
 801225a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801225e:	e048      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012260:	2310      	movs	r3, #16
 8012262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012266:	e044      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012268:	2320      	movs	r3, #32
 801226a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801226e:	e040      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012270:	2340      	movs	r3, #64	; 0x40
 8012272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012276:	e03c      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012278:	2380      	movs	r3, #128	; 0x80
 801227a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801227e:	e038      	b.n	80122f2 <UART_SetConfig+0x7ae>
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	4a71      	ldr	r2, [pc, #452]	; (801244c <UART_SetConfig+0x908>)
 8012286:	4293      	cmp	r3, r2
 8012288:	d130      	bne.n	80122ec <UART_SetConfig+0x7a8>
 801228a:	4b6f      	ldr	r3, [pc, #444]	; (8012448 <UART_SetConfig+0x904>)
 801228c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801228e:	f003 0307 	and.w	r3, r3, #7
 8012292:	2b05      	cmp	r3, #5
 8012294:	d826      	bhi.n	80122e4 <UART_SetConfig+0x7a0>
 8012296:	a201      	add	r2, pc, #4	; (adr r2, 801229c <UART_SetConfig+0x758>)
 8012298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801229c:	080122b5 	.word	0x080122b5
 80122a0:	080122bd 	.word	0x080122bd
 80122a4:	080122c5 	.word	0x080122c5
 80122a8:	080122cd 	.word	0x080122cd
 80122ac:	080122d5 	.word	0x080122d5
 80122b0:	080122dd 	.word	0x080122dd
 80122b4:	2302      	movs	r3, #2
 80122b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122ba:	e01a      	b.n	80122f2 <UART_SetConfig+0x7ae>
 80122bc:	2304      	movs	r3, #4
 80122be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122c2:	e016      	b.n	80122f2 <UART_SetConfig+0x7ae>
 80122c4:	2308      	movs	r3, #8
 80122c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122ca:	e012      	b.n	80122f2 <UART_SetConfig+0x7ae>
 80122cc:	2310      	movs	r3, #16
 80122ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122d2:	e00e      	b.n	80122f2 <UART_SetConfig+0x7ae>
 80122d4:	2320      	movs	r3, #32
 80122d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122da:	e00a      	b.n	80122f2 <UART_SetConfig+0x7ae>
 80122dc:	2340      	movs	r3, #64	; 0x40
 80122de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122e2:	e006      	b.n	80122f2 <UART_SetConfig+0x7ae>
 80122e4:	2380      	movs	r3, #128	; 0x80
 80122e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122ea:	e002      	b.n	80122f2 <UART_SetConfig+0x7ae>
 80122ec:	2380      	movs	r3, #128	; 0x80
 80122ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	4a55      	ldr	r2, [pc, #340]	; (801244c <UART_SetConfig+0x908>)
 80122f8:	4293      	cmp	r3, r2
 80122fa:	f040 80f8 	bne.w	80124ee <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80122fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012302:	2b20      	cmp	r3, #32
 8012304:	dc46      	bgt.n	8012394 <UART_SetConfig+0x850>
 8012306:	2b02      	cmp	r3, #2
 8012308:	db75      	blt.n	80123f6 <UART_SetConfig+0x8b2>
 801230a:	3b02      	subs	r3, #2
 801230c:	2b1e      	cmp	r3, #30
 801230e:	d872      	bhi.n	80123f6 <UART_SetConfig+0x8b2>
 8012310:	a201      	add	r2, pc, #4	; (adr r2, 8012318 <UART_SetConfig+0x7d4>)
 8012312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012316:	bf00      	nop
 8012318:	0801239b 	.word	0x0801239b
 801231c:	080123f7 	.word	0x080123f7
 8012320:	080123a3 	.word	0x080123a3
 8012324:	080123f7 	.word	0x080123f7
 8012328:	080123f7 	.word	0x080123f7
 801232c:	080123f7 	.word	0x080123f7
 8012330:	080123b3 	.word	0x080123b3
 8012334:	080123f7 	.word	0x080123f7
 8012338:	080123f7 	.word	0x080123f7
 801233c:	080123f7 	.word	0x080123f7
 8012340:	080123f7 	.word	0x080123f7
 8012344:	080123f7 	.word	0x080123f7
 8012348:	080123f7 	.word	0x080123f7
 801234c:	080123f7 	.word	0x080123f7
 8012350:	080123c3 	.word	0x080123c3
 8012354:	080123f7 	.word	0x080123f7
 8012358:	080123f7 	.word	0x080123f7
 801235c:	080123f7 	.word	0x080123f7
 8012360:	080123f7 	.word	0x080123f7
 8012364:	080123f7 	.word	0x080123f7
 8012368:	080123f7 	.word	0x080123f7
 801236c:	080123f7 	.word	0x080123f7
 8012370:	080123f7 	.word	0x080123f7
 8012374:	080123f7 	.word	0x080123f7
 8012378:	080123f7 	.word	0x080123f7
 801237c:	080123f7 	.word	0x080123f7
 8012380:	080123f7 	.word	0x080123f7
 8012384:	080123f7 	.word	0x080123f7
 8012388:	080123f7 	.word	0x080123f7
 801238c:	080123f7 	.word	0x080123f7
 8012390:	080123e9 	.word	0x080123e9
 8012394:	2b40      	cmp	r3, #64	; 0x40
 8012396:	d02a      	beq.n	80123ee <UART_SetConfig+0x8aa>
 8012398:	e02d      	b.n	80123f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801239a:	f7fb f86b 	bl	800d474 <HAL_RCCEx_GetD3PCLK1Freq>
 801239e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80123a0:	e02f      	b.n	8012402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80123a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7fb f87a 	bl	800d4a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80123ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80123b0:	e027      	b.n	8012402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80123b2:	f107 0318 	add.w	r3, r7, #24
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7fb f9c6 	bl	800d748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80123bc:	69fb      	ldr	r3, [r7, #28]
 80123be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80123c0:	e01f      	b.n	8012402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80123c2:	4b21      	ldr	r3, [pc, #132]	; (8012448 <UART_SetConfig+0x904>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	f003 0320 	and.w	r3, r3, #32
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d009      	beq.n	80123e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80123ce:	4b1e      	ldr	r3, [pc, #120]	; (8012448 <UART_SetConfig+0x904>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	08db      	lsrs	r3, r3, #3
 80123d4:	f003 0303 	and.w	r3, r3, #3
 80123d8:	4a1d      	ldr	r2, [pc, #116]	; (8012450 <UART_SetConfig+0x90c>)
 80123da:	fa22 f303 	lsr.w	r3, r2, r3
 80123de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80123e0:	e00f      	b.n	8012402 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80123e2:	4b1b      	ldr	r3, [pc, #108]	; (8012450 <UART_SetConfig+0x90c>)
 80123e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80123e6:	e00c      	b.n	8012402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80123e8:	4b1a      	ldr	r3, [pc, #104]	; (8012454 <UART_SetConfig+0x910>)
 80123ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80123ec:	e009      	b.n	8012402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80123ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80123f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80123f4:	e005      	b.n	8012402 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80123f6:	2300      	movs	r3, #0
 80123f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80123fa:	2301      	movs	r3, #1
 80123fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012400:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012404:	2b00      	cmp	r3, #0
 8012406:	f000 81ee 	beq.w	80127e6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801240e:	4a12      	ldr	r2, [pc, #72]	; (8012458 <UART_SetConfig+0x914>)
 8012410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012414:	461a      	mov	r2, r3
 8012416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012418:	fbb3 f3f2 	udiv	r3, r3, r2
 801241c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	685a      	ldr	r2, [r3, #4]
 8012422:	4613      	mov	r3, r2
 8012424:	005b      	lsls	r3, r3, #1
 8012426:	4413      	add	r3, r2
 8012428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801242a:	429a      	cmp	r2, r3
 801242c:	d305      	bcc.n	801243a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	685b      	ldr	r3, [r3, #4]
 8012432:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012436:	429a      	cmp	r2, r3
 8012438:	d910      	bls.n	801245c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801243a:	2301      	movs	r3, #1
 801243c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012440:	e1d1      	b.n	80127e6 <UART_SetConfig+0xca2>
 8012442:	bf00      	nop
 8012444:	40011c00 	.word	0x40011c00
 8012448:	58024400 	.word	0x58024400
 801244c:	58000c00 	.word	0x58000c00
 8012450:	03d09000 	.word	0x03d09000
 8012454:	003d0900 	.word	0x003d0900
 8012458:	0801ffc8 	.word	0x0801ffc8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801245c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801245e:	2200      	movs	r2, #0
 8012460:	60bb      	str	r3, [r7, #8]
 8012462:	60fa      	str	r2, [r7, #12]
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012468:	4ac0      	ldr	r2, [pc, #768]	; (801276c <UART_SetConfig+0xc28>)
 801246a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801246e:	b29b      	uxth	r3, r3
 8012470:	2200      	movs	r2, #0
 8012472:	603b      	str	r3, [r7, #0]
 8012474:	607a      	str	r2, [r7, #4]
 8012476:	e9d7 2300 	ldrd	r2, r3, [r7]
 801247a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801247e:	f7ee f96b 	bl	8000758 <__aeabi_uldivmod>
 8012482:	4602      	mov	r2, r0
 8012484:	460b      	mov	r3, r1
 8012486:	4610      	mov	r0, r2
 8012488:	4619      	mov	r1, r3
 801248a:	f04f 0200 	mov.w	r2, #0
 801248e:	f04f 0300 	mov.w	r3, #0
 8012492:	020b      	lsls	r3, r1, #8
 8012494:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012498:	0202      	lsls	r2, r0, #8
 801249a:	6979      	ldr	r1, [r7, #20]
 801249c:	6849      	ldr	r1, [r1, #4]
 801249e:	0849      	lsrs	r1, r1, #1
 80124a0:	2000      	movs	r0, #0
 80124a2:	460c      	mov	r4, r1
 80124a4:	4605      	mov	r5, r0
 80124a6:	eb12 0804 	adds.w	r8, r2, r4
 80124aa:	eb43 0905 	adc.w	r9, r3, r5
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	2200      	movs	r2, #0
 80124b4:	469a      	mov	sl, r3
 80124b6:	4693      	mov	fp, r2
 80124b8:	4652      	mov	r2, sl
 80124ba:	465b      	mov	r3, fp
 80124bc:	4640      	mov	r0, r8
 80124be:	4649      	mov	r1, r9
 80124c0:	f7ee f94a 	bl	8000758 <__aeabi_uldivmod>
 80124c4:	4602      	mov	r2, r0
 80124c6:	460b      	mov	r3, r1
 80124c8:	4613      	mov	r3, r2
 80124ca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80124cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80124d2:	d308      	bcc.n	80124e6 <UART_SetConfig+0x9a2>
 80124d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80124da:	d204      	bcs.n	80124e6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124e2:	60da      	str	r2, [r3, #12]
 80124e4:	e17f      	b.n	80127e6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80124e6:	2301      	movs	r3, #1
 80124e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80124ec:	e17b      	b.n	80127e6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80124ee:	697b      	ldr	r3, [r7, #20]
 80124f0:	69db      	ldr	r3, [r3, #28]
 80124f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80124f6:	f040 80bd 	bne.w	8012674 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80124fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80124fe:	2b20      	cmp	r3, #32
 8012500:	dc48      	bgt.n	8012594 <UART_SetConfig+0xa50>
 8012502:	2b00      	cmp	r3, #0
 8012504:	db7b      	blt.n	80125fe <UART_SetConfig+0xaba>
 8012506:	2b20      	cmp	r3, #32
 8012508:	d879      	bhi.n	80125fe <UART_SetConfig+0xaba>
 801250a:	a201      	add	r2, pc, #4	; (adr r2, 8012510 <UART_SetConfig+0x9cc>)
 801250c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012510:	0801259b 	.word	0x0801259b
 8012514:	080125a3 	.word	0x080125a3
 8012518:	080125ff 	.word	0x080125ff
 801251c:	080125ff 	.word	0x080125ff
 8012520:	080125ab 	.word	0x080125ab
 8012524:	080125ff 	.word	0x080125ff
 8012528:	080125ff 	.word	0x080125ff
 801252c:	080125ff 	.word	0x080125ff
 8012530:	080125bb 	.word	0x080125bb
 8012534:	080125ff 	.word	0x080125ff
 8012538:	080125ff 	.word	0x080125ff
 801253c:	080125ff 	.word	0x080125ff
 8012540:	080125ff 	.word	0x080125ff
 8012544:	080125ff 	.word	0x080125ff
 8012548:	080125ff 	.word	0x080125ff
 801254c:	080125ff 	.word	0x080125ff
 8012550:	080125cb 	.word	0x080125cb
 8012554:	080125ff 	.word	0x080125ff
 8012558:	080125ff 	.word	0x080125ff
 801255c:	080125ff 	.word	0x080125ff
 8012560:	080125ff 	.word	0x080125ff
 8012564:	080125ff 	.word	0x080125ff
 8012568:	080125ff 	.word	0x080125ff
 801256c:	080125ff 	.word	0x080125ff
 8012570:	080125ff 	.word	0x080125ff
 8012574:	080125ff 	.word	0x080125ff
 8012578:	080125ff 	.word	0x080125ff
 801257c:	080125ff 	.word	0x080125ff
 8012580:	080125ff 	.word	0x080125ff
 8012584:	080125ff 	.word	0x080125ff
 8012588:	080125ff 	.word	0x080125ff
 801258c:	080125ff 	.word	0x080125ff
 8012590:	080125f1 	.word	0x080125f1
 8012594:	2b40      	cmp	r3, #64	; 0x40
 8012596:	d02e      	beq.n	80125f6 <UART_SetConfig+0xab2>
 8012598:	e031      	b.n	80125fe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801259a:	f7f9 f8cd 	bl	800b738 <HAL_RCC_GetPCLK1Freq>
 801259e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80125a0:	e033      	b.n	801260a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80125a2:	f7f9 f8df 	bl	800b764 <HAL_RCC_GetPCLK2Freq>
 80125a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80125a8:	e02f      	b.n	801260a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80125aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7fa ff76 	bl	800d4a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80125b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125b8:	e027      	b.n	801260a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80125ba:	f107 0318 	add.w	r3, r7, #24
 80125be:	4618      	mov	r0, r3
 80125c0:	f7fb f8c2 	bl	800d748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80125c4:	69fb      	ldr	r3, [r7, #28]
 80125c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125c8:	e01f      	b.n	801260a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80125ca:	4b69      	ldr	r3, [pc, #420]	; (8012770 <UART_SetConfig+0xc2c>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	f003 0320 	and.w	r3, r3, #32
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d009      	beq.n	80125ea <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80125d6:	4b66      	ldr	r3, [pc, #408]	; (8012770 <UART_SetConfig+0xc2c>)
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	08db      	lsrs	r3, r3, #3
 80125dc:	f003 0303 	and.w	r3, r3, #3
 80125e0:	4a64      	ldr	r2, [pc, #400]	; (8012774 <UART_SetConfig+0xc30>)
 80125e2:	fa22 f303 	lsr.w	r3, r2, r3
 80125e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80125e8:	e00f      	b.n	801260a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80125ea:	4b62      	ldr	r3, [pc, #392]	; (8012774 <UART_SetConfig+0xc30>)
 80125ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125ee:	e00c      	b.n	801260a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80125f0:	4b61      	ldr	r3, [pc, #388]	; (8012778 <UART_SetConfig+0xc34>)
 80125f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125f4:	e009      	b.n	801260a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80125f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80125fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125fc:	e005      	b.n	801260a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80125fe:	2300      	movs	r3, #0
 8012600:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012602:	2301      	movs	r3, #1
 8012604:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012608:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801260a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801260c:	2b00      	cmp	r3, #0
 801260e:	f000 80ea 	beq.w	80127e6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012616:	4a55      	ldr	r2, [pc, #340]	; (801276c <UART_SetConfig+0xc28>)
 8012618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801261c:	461a      	mov	r2, r3
 801261e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012620:	fbb3 f3f2 	udiv	r3, r3, r2
 8012624:	005a      	lsls	r2, r3, #1
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	685b      	ldr	r3, [r3, #4]
 801262a:	085b      	lsrs	r3, r3, #1
 801262c:	441a      	add	r2, r3
 801262e:	697b      	ldr	r3, [r7, #20]
 8012630:	685b      	ldr	r3, [r3, #4]
 8012632:	fbb2 f3f3 	udiv	r3, r2, r3
 8012636:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801263a:	2b0f      	cmp	r3, #15
 801263c:	d916      	bls.n	801266c <UART_SetConfig+0xb28>
 801263e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012644:	d212      	bcs.n	801266c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012648:	b29b      	uxth	r3, r3
 801264a:	f023 030f 	bic.w	r3, r3, #15
 801264e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012652:	085b      	lsrs	r3, r3, #1
 8012654:	b29b      	uxth	r3, r3
 8012656:	f003 0307 	and.w	r3, r3, #7
 801265a:	b29a      	uxth	r2, r3
 801265c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801265e:	4313      	orrs	r3, r2
 8012660:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012668:	60da      	str	r2, [r3, #12]
 801266a:	e0bc      	b.n	80127e6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801266c:	2301      	movs	r3, #1
 801266e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012672:	e0b8      	b.n	80127e6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012674:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012678:	2b20      	cmp	r3, #32
 801267a:	dc4b      	bgt.n	8012714 <UART_SetConfig+0xbd0>
 801267c:	2b00      	cmp	r3, #0
 801267e:	f2c0 8087 	blt.w	8012790 <UART_SetConfig+0xc4c>
 8012682:	2b20      	cmp	r3, #32
 8012684:	f200 8084 	bhi.w	8012790 <UART_SetConfig+0xc4c>
 8012688:	a201      	add	r2, pc, #4	; (adr r2, 8012690 <UART_SetConfig+0xb4c>)
 801268a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801268e:	bf00      	nop
 8012690:	0801271b 	.word	0x0801271b
 8012694:	08012723 	.word	0x08012723
 8012698:	08012791 	.word	0x08012791
 801269c:	08012791 	.word	0x08012791
 80126a0:	0801272b 	.word	0x0801272b
 80126a4:	08012791 	.word	0x08012791
 80126a8:	08012791 	.word	0x08012791
 80126ac:	08012791 	.word	0x08012791
 80126b0:	0801273b 	.word	0x0801273b
 80126b4:	08012791 	.word	0x08012791
 80126b8:	08012791 	.word	0x08012791
 80126bc:	08012791 	.word	0x08012791
 80126c0:	08012791 	.word	0x08012791
 80126c4:	08012791 	.word	0x08012791
 80126c8:	08012791 	.word	0x08012791
 80126cc:	08012791 	.word	0x08012791
 80126d0:	0801274b 	.word	0x0801274b
 80126d4:	08012791 	.word	0x08012791
 80126d8:	08012791 	.word	0x08012791
 80126dc:	08012791 	.word	0x08012791
 80126e0:	08012791 	.word	0x08012791
 80126e4:	08012791 	.word	0x08012791
 80126e8:	08012791 	.word	0x08012791
 80126ec:	08012791 	.word	0x08012791
 80126f0:	08012791 	.word	0x08012791
 80126f4:	08012791 	.word	0x08012791
 80126f8:	08012791 	.word	0x08012791
 80126fc:	08012791 	.word	0x08012791
 8012700:	08012791 	.word	0x08012791
 8012704:	08012791 	.word	0x08012791
 8012708:	08012791 	.word	0x08012791
 801270c:	08012791 	.word	0x08012791
 8012710:	08012783 	.word	0x08012783
 8012714:	2b40      	cmp	r3, #64	; 0x40
 8012716:	d037      	beq.n	8012788 <UART_SetConfig+0xc44>
 8012718:	e03a      	b.n	8012790 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801271a:	f7f9 f80d 	bl	800b738 <HAL_RCC_GetPCLK1Freq>
 801271e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012720:	e03c      	b.n	801279c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012722:	f7f9 f81f 	bl	800b764 <HAL_RCC_GetPCLK2Freq>
 8012726:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012728:	e038      	b.n	801279c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801272a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801272e:	4618      	mov	r0, r3
 8012730:	f7fa feb6 	bl	800d4a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012738:	e030      	b.n	801279c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801273a:	f107 0318 	add.w	r3, r7, #24
 801273e:	4618      	mov	r0, r3
 8012740:	f7fb f802 	bl	800d748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012744:	69fb      	ldr	r3, [r7, #28]
 8012746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012748:	e028      	b.n	801279c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801274a:	4b09      	ldr	r3, [pc, #36]	; (8012770 <UART_SetConfig+0xc2c>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	f003 0320 	and.w	r3, r3, #32
 8012752:	2b00      	cmp	r3, #0
 8012754:	d012      	beq.n	801277c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012756:	4b06      	ldr	r3, [pc, #24]	; (8012770 <UART_SetConfig+0xc2c>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	08db      	lsrs	r3, r3, #3
 801275c:	f003 0303 	and.w	r3, r3, #3
 8012760:	4a04      	ldr	r2, [pc, #16]	; (8012774 <UART_SetConfig+0xc30>)
 8012762:	fa22 f303 	lsr.w	r3, r2, r3
 8012766:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012768:	e018      	b.n	801279c <UART_SetConfig+0xc58>
 801276a:	bf00      	nop
 801276c:	0801ffc8 	.word	0x0801ffc8
 8012770:	58024400 	.word	0x58024400
 8012774:	03d09000 	.word	0x03d09000
 8012778:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801277c:	4b24      	ldr	r3, [pc, #144]	; (8012810 <UART_SetConfig+0xccc>)
 801277e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012780:	e00c      	b.n	801279c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012782:	4b24      	ldr	r3, [pc, #144]	; (8012814 <UART_SetConfig+0xcd0>)
 8012784:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012786:	e009      	b.n	801279c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801278c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801278e:	e005      	b.n	801279c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8012790:	2300      	movs	r3, #0
 8012792:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012794:	2301      	movs	r3, #1
 8012796:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801279a:	bf00      	nop
    }

    if (pclk != 0U)
 801279c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d021      	beq.n	80127e6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80127a2:	697b      	ldr	r3, [r7, #20]
 80127a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127a6:	4a1c      	ldr	r2, [pc, #112]	; (8012818 <UART_SetConfig+0xcd4>)
 80127a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80127ac:	461a      	mov	r2, r3
 80127ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80127b4:	697b      	ldr	r3, [r7, #20]
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	085b      	lsrs	r3, r3, #1
 80127ba:	441a      	add	r2, r3
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80127c4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80127c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c8:	2b0f      	cmp	r3, #15
 80127ca:	d909      	bls.n	80127e0 <UART_SetConfig+0xc9c>
 80127cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127d2:	d205      	bcs.n	80127e0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80127d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127d6:	b29a      	uxth	r2, r3
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	60da      	str	r2, [r3, #12]
 80127de:	e002      	b.n	80127e6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80127e0:	2301      	movs	r3, #1
 80127e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80127e6:	697b      	ldr	r3, [r7, #20]
 80127e8:	2201      	movs	r2, #1
 80127ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80127ee:	697b      	ldr	r3, [r7, #20]
 80127f0:	2201      	movs	r2, #1
 80127f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	2200      	movs	r2, #0
 80127fa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	2200      	movs	r2, #0
 8012800:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8012802:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8012806:	4618      	mov	r0, r3
 8012808:	3748      	adds	r7, #72	; 0x48
 801280a:	46bd      	mov	sp, r7
 801280c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012810:	03d09000 	.word	0x03d09000
 8012814:	003d0900 	.word	0x003d0900
 8012818:	0801ffc8 	.word	0x0801ffc8

0801281c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801281c:	b480      	push	{r7}
 801281e:	b083      	sub	sp, #12
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012828:	f003 0301 	and.w	r3, r3, #1
 801282c:	2b00      	cmp	r3, #0
 801282e:	d00a      	beq.n	8012846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	685b      	ldr	r3, [r3, #4]
 8012836:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	430a      	orrs	r2, r1
 8012844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801284a:	f003 0302 	and.w	r3, r3, #2
 801284e:	2b00      	cmp	r3, #0
 8012850:	d00a      	beq.n	8012868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	685b      	ldr	r3, [r3, #4]
 8012858:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	430a      	orrs	r2, r1
 8012866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801286c:	f003 0304 	and.w	r3, r3, #4
 8012870:	2b00      	cmp	r3, #0
 8012872:	d00a      	beq.n	801288a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	430a      	orrs	r2, r1
 8012888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801288e:	f003 0308 	and.w	r3, r3, #8
 8012892:	2b00      	cmp	r3, #0
 8012894:	d00a      	beq.n	80128ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	430a      	orrs	r2, r1
 80128aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128b0:	f003 0310 	and.w	r3, r3, #16
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d00a      	beq.n	80128ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	689b      	ldr	r3, [r3, #8]
 80128be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	430a      	orrs	r2, r1
 80128cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128d2:	f003 0320 	and.w	r3, r3, #32
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d00a      	beq.n	80128f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	689b      	ldr	r3, [r3, #8]
 80128e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	430a      	orrs	r2, r1
 80128ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d01a      	beq.n	8012932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	685b      	ldr	r3, [r3, #4]
 8012902:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	430a      	orrs	r2, r1
 8012910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801291a:	d10a      	bne.n	8012932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	430a      	orrs	r2, r1
 8012930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801293a:	2b00      	cmp	r3, #0
 801293c:	d00a      	beq.n	8012954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	430a      	orrs	r2, r1
 8012952:	605a      	str	r2, [r3, #4]
  }
}
 8012954:	bf00      	nop
 8012956:	370c      	adds	r7, #12
 8012958:	46bd      	mov	sp, r7
 801295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295e:	4770      	bx	lr

08012960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b098      	sub	sp, #96	; 0x60
 8012964:	af02      	add	r7, sp, #8
 8012966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2200      	movs	r2, #0
 801296c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012970:	f7f1 fbd6 	bl	8004120 <HAL_GetTick>
 8012974:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	f003 0308 	and.w	r3, r3, #8
 8012980:	2b08      	cmp	r3, #8
 8012982:	d12f      	bne.n	80129e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012988:	9300      	str	r3, [sp, #0]
 801298a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801298c:	2200      	movs	r2, #0
 801298e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f000 f88e 	bl	8012ab4 <UART_WaitOnFlagUntilTimeout>
 8012998:	4603      	mov	r3, r0
 801299a:	2b00      	cmp	r3, #0
 801299c:	d022      	beq.n	80129e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a6:	e853 3f00 	ldrex	r3, [r3]
 80129aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80129ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80129b2:	653b      	str	r3, [r7, #80]	; 0x50
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	461a      	mov	r2, r3
 80129ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129bc:	647b      	str	r3, [r7, #68]	; 0x44
 80129be:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80129c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129c4:	e841 2300 	strex	r3, r2, [r1]
 80129c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80129ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d1e6      	bne.n	801299e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2220      	movs	r2, #32
 80129d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2200      	movs	r2, #0
 80129dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80129e0:	2303      	movs	r3, #3
 80129e2:	e063      	b.n	8012aac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	f003 0304 	and.w	r3, r3, #4
 80129ee:	2b04      	cmp	r3, #4
 80129f0:	d149      	bne.n	8012a86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80129f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80129f6:	9300      	str	r3, [sp, #0]
 80129f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129fa:	2200      	movs	r2, #0
 80129fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	f000 f857 	bl	8012ab4 <UART_WaitOnFlagUntilTimeout>
 8012a06:	4603      	mov	r3, r0
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d03c      	beq.n	8012a86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a14:	e853 3f00 	ldrex	r3, [r3]
 8012a18:	623b      	str	r3, [r7, #32]
   return(result);
 8012a1a:	6a3b      	ldr	r3, [r7, #32]
 8012a1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012a20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	461a      	mov	r2, r3
 8012a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a2a:	633b      	str	r3, [r7, #48]	; 0x30
 8012a2c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a32:	e841 2300 	strex	r3, r2, [r1]
 8012a36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d1e6      	bne.n	8012a0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	3308      	adds	r3, #8
 8012a44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	e853 3f00 	ldrex	r3, [r3]
 8012a4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	f023 0301 	bic.w	r3, r3, #1
 8012a54:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	3308      	adds	r3, #8
 8012a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a5e:	61fa      	str	r2, [r7, #28]
 8012a60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a62:	69b9      	ldr	r1, [r7, #24]
 8012a64:	69fa      	ldr	r2, [r7, #28]
 8012a66:	e841 2300 	strex	r3, r2, [r1]
 8012a6a:	617b      	str	r3, [r7, #20]
   return(result);
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d1e5      	bne.n	8012a3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	2220      	movs	r2, #32
 8012a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012a82:	2303      	movs	r3, #3
 8012a84:	e012      	b.n	8012aac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2220      	movs	r2, #32
 8012a8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	2220      	movs	r2, #32
 8012a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2200      	movs	r2, #0
 8012a9a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012aaa:	2300      	movs	r3, #0
}
 8012aac:	4618      	mov	r0, r3
 8012aae:	3758      	adds	r7, #88	; 0x58
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}

08012ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b084      	sub	sp, #16
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	60f8      	str	r0, [r7, #12]
 8012abc:	60b9      	str	r1, [r7, #8]
 8012abe:	603b      	str	r3, [r7, #0]
 8012ac0:	4613      	mov	r3, r2
 8012ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012ac4:	e049      	b.n	8012b5a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012ac6:	69bb      	ldr	r3, [r7, #24]
 8012ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012acc:	d045      	beq.n	8012b5a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012ace:	f7f1 fb27 	bl	8004120 <HAL_GetTick>
 8012ad2:	4602      	mov	r2, r0
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	1ad3      	subs	r3, r2, r3
 8012ad8:	69ba      	ldr	r2, [r7, #24]
 8012ada:	429a      	cmp	r2, r3
 8012adc:	d302      	bcc.n	8012ae4 <UART_WaitOnFlagUntilTimeout+0x30>
 8012ade:	69bb      	ldr	r3, [r7, #24]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d101      	bne.n	8012ae8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012ae4:	2303      	movs	r3, #3
 8012ae6:	e048      	b.n	8012b7a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	f003 0304 	and.w	r3, r3, #4
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d031      	beq.n	8012b5a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	69db      	ldr	r3, [r3, #28]
 8012afc:	f003 0308 	and.w	r3, r3, #8
 8012b00:	2b08      	cmp	r3, #8
 8012b02:	d110      	bne.n	8012b26 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	2208      	movs	r2, #8
 8012b0a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012b0c:	68f8      	ldr	r0, [r7, #12]
 8012b0e:	f000 f839 	bl	8012b84 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	2208      	movs	r2, #8
 8012b16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012b22:	2301      	movs	r3, #1
 8012b24:	e029      	b.n	8012b7a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	69db      	ldr	r3, [r3, #28]
 8012b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012b30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012b34:	d111      	bne.n	8012b5a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012b3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012b40:	68f8      	ldr	r0, [r7, #12]
 8012b42:	f000 f81f 	bl	8012b84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	2220      	movs	r2, #32
 8012b4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	2200      	movs	r2, #0
 8012b52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012b56:	2303      	movs	r3, #3
 8012b58:	e00f      	b.n	8012b7a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	69da      	ldr	r2, [r3, #28]
 8012b60:	68bb      	ldr	r3, [r7, #8]
 8012b62:	4013      	ands	r3, r2
 8012b64:	68ba      	ldr	r2, [r7, #8]
 8012b66:	429a      	cmp	r2, r3
 8012b68:	bf0c      	ite	eq
 8012b6a:	2301      	moveq	r3, #1
 8012b6c:	2300      	movne	r3, #0
 8012b6e:	b2db      	uxtb	r3, r3
 8012b70:	461a      	mov	r2, r3
 8012b72:	79fb      	ldrb	r3, [r7, #7]
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d0a6      	beq.n	8012ac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012b78:	2300      	movs	r3, #0
}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3710      	adds	r7, #16
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}
	...

08012b84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012b84:	b480      	push	{r7}
 8012b86:	b095      	sub	sp, #84	; 0x54
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b94:	e853 3f00 	ldrex	r3, [r3]
 8012b98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	461a      	mov	r2, r3
 8012ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012baa:	643b      	str	r3, [r7, #64]	; 0x40
 8012bac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012bb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012bb2:	e841 2300 	strex	r3, r2, [r1]
 8012bb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d1e6      	bne.n	8012b8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	3308      	adds	r3, #8
 8012bc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bc6:	6a3b      	ldr	r3, [r7, #32]
 8012bc8:	e853 3f00 	ldrex	r3, [r3]
 8012bcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8012bce:	69fa      	ldr	r2, [r7, #28]
 8012bd0:	4b1e      	ldr	r3, [pc, #120]	; (8012c4c <UART_EndRxTransfer+0xc8>)
 8012bd2:	4013      	ands	r3, r2
 8012bd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	3308      	adds	r3, #8
 8012bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012be0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012be2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012be6:	e841 2300 	strex	r3, r2, [r1]
 8012bea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d1e5      	bne.n	8012bbe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bf6:	2b01      	cmp	r3, #1
 8012bf8:	d118      	bne.n	8012c2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	e853 3f00 	ldrex	r3, [r3]
 8012c06:	60bb      	str	r3, [r7, #8]
   return(result);
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	f023 0310 	bic.w	r3, r3, #16
 8012c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	461a      	mov	r2, r3
 8012c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c18:	61bb      	str	r3, [r7, #24]
 8012c1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c1c:	6979      	ldr	r1, [r7, #20]
 8012c1e:	69ba      	ldr	r2, [r7, #24]
 8012c20:	e841 2300 	strex	r3, r2, [r1]
 8012c24:	613b      	str	r3, [r7, #16]
   return(result);
 8012c26:	693b      	ldr	r3, [r7, #16]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d1e6      	bne.n	8012bfa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2220      	movs	r2, #32
 8012c30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2200      	movs	r2, #0
 8012c38:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012c40:	bf00      	nop
 8012c42:	3754      	adds	r7, #84	; 0x54
 8012c44:	46bd      	mov	sp, r7
 8012c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4a:	4770      	bx	lr
 8012c4c:	effffffe 	.word	0xeffffffe

08012c50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012c50:	b480      	push	{r7}
 8012c52:	b085      	sub	sp, #20
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c5e:	2b01      	cmp	r3, #1
 8012c60:	d101      	bne.n	8012c66 <HAL_UARTEx_DisableFifoMode+0x16>
 8012c62:	2302      	movs	r3, #2
 8012c64:	e027      	b.n	8012cb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2201      	movs	r2, #1
 8012c6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2224      	movs	r2, #36	; 0x24
 8012c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	681a      	ldr	r2, [r3, #0]
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	f022 0201 	bic.w	r2, r2, #1
 8012c8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012c94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2200      	movs	r2, #0
 8012c9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	68fa      	ldr	r2, [r7, #12]
 8012ca2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2220      	movs	r2, #32
 8012ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2200      	movs	r2, #0
 8012cb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012cb4:	2300      	movs	r3, #0
}
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	3714      	adds	r7, #20
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc0:	4770      	bx	lr

08012cc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012cc2:	b580      	push	{r7, lr}
 8012cc4:	b084      	sub	sp, #16
 8012cc6:	af00      	add	r7, sp, #0
 8012cc8:	6078      	str	r0, [r7, #4]
 8012cca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012cd2:	2b01      	cmp	r3, #1
 8012cd4:	d101      	bne.n	8012cda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012cd6:	2302      	movs	r3, #2
 8012cd8:	e02d      	b.n	8012d36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	2201      	movs	r2, #1
 8012cde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2224      	movs	r2, #36	; 0x24
 8012ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	681a      	ldr	r2, [r3, #0]
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	f022 0201 	bic.w	r2, r2, #1
 8012d00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	689b      	ldr	r3, [r3, #8]
 8012d08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	683a      	ldr	r2, [r7, #0]
 8012d12:	430a      	orrs	r2, r1
 8012d14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f000 f850 	bl	8012dbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	68fa      	ldr	r2, [r7, #12]
 8012d22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2220      	movs	r2, #32
 8012d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2200      	movs	r2, #0
 8012d30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d34:	2300      	movs	r3, #0
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3710      	adds	r7, #16
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd80      	pop	{r7, pc}

08012d3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012d3e:	b580      	push	{r7, lr}
 8012d40:	b084      	sub	sp, #16
 8012d42:	af00      	add	r7, sp, #0
 8012d44:	6078      	str	r0, [r7, #4]
 8012d46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d4e:	2b01      	cmp	r3, #1
 8012d50:	d101      	bne.n	8012d56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012d52:	2302      	movs	r3, #2
 8012d54:	e02d      	b.n	8012db2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2201      	movs	r2, #1
 8012d5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	2224      	movs	r2, #36	; 0x24
 8012d62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	681a      	ldr	r2, [r3, #0]
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	f022 0201 	bic.w	r2, r2, #1
 8012d7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	689b      	ldr	r3, [r3, #8]
 8012d84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	683a      	ldr	r2, [r7, #0]
 8012d8e:	430a      	orrs	r2, r1
 8012d90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d92:	6878      	ldr	r0, [r7, #4]
 8012d94:	f000 f812 	bl	8012dbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	68fa      	ldr	r2, [r7, #12]
 8012d9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2220      	movs	r2, #32
 8012da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2200      	movs	r2, #0
 8012dac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012db0:	2300      	movs	r3, #0
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	3710      	adds	r7, #16
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
	...

08012dbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012dbc:	b480      	push	{r7}
 8012dbe:	b085      	sub	sp, #20
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d108      	bne.n	8012dde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	2201      	movs	r2, #1
 8012dd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2201      	movs	r2, #1
 8012dd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012ddc:	e031      	b.n	8012e42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012dde:	2310      	movs	r3, #16
 8012de0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012de2:	2310      	movs	r3, #16
 8012de4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	689b      	ldr	r3, [r3, #8]
 8012dec:	0e5b      	lsrs	r3, r3, #25
 8012dee:	b2db      	uxtb	r3, r3
 8012df0:	f003 0307 	and.w	r3, r3, #7
 8012df4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	689b      	ldr	r3, [r3, #8]
 8012dfc:	0f5b      	lsrs	r3, r3, #29
 8012dfe:	b2db      	uxtb	r3, r3
 8012e00:	f003 0307 	and.w	r3, r3, #7
 8012e04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012e06:	7bbb      	ldrb	r3, [r7, #14]
 8012e08:	7b3a      	ldrb	r2, [r7, #12]
 8012e0a:	4911      	ldr	r1, [pc, #68]	; (8012e50 <UARTEx_SetNbDataToProcess+0x94>)
 8012e0c:	5c8a      	ldrb	r2, [r1, r2]
 8012e0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012e12:	7b3a      	ldrb	r2, [r7, #12]
 8012e14:	490f      	ldr	r1, [pc, #60]	; (8012e54 <UARTEx_SetNbDataToProcess+0x98>)
 8012e16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012e18:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e1c:	b29a      	uxth	r2, r3
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012e24:	7bfb      	ldrb	r3, [r7, #15]
 8012e26:	7b7a      	ldrb	r2, [r7, #13]
 8012e28:	4909      	ldr	r1, [pc, #36]	; (8012e50 <UARTEx_SetNbDataToProcess+0x94>)
 8012e2a:	5c8a      	ldrb	r2, [r1, r2]
 8012e2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012e30:	7b7a      	ldrb	r2, [r7, #13]
 8012e32:	4908      	ldr	r1, [pc, #32]	; (8012e54 <UARTEx_SetNbDataToProcess+0x98>)
 8012e34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012e36:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e3a:	b29a      	uxth	r2, r3
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012e42:	bf00      	nop
 8012e44:	3714      	adds	r7, #20
 8012e46:	46bd      	mov	sp, r7
 8012e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4c:	4770      	bx	lr
 8012e4e:	bf00      	nop
 8012e50:	0801ffe0 	.word	0x0801ffe0
 8012e54:	0801ffe8 	.word	0x0801ffe8

08012e58 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012e58:	b084      	sub	sp, #16
 8012e5a:	b480      	push	{r7}
 8012e5c:	b085      	sub	sp, #20
 8012e5e:	af00      	add	r7, sp, #0
 8012e60:	6078      	str	r0, [r7, #4]
 8012e62:	f107 001c 	add.w	r0, r7, #28
 8012e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012e6e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012e70:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012e72:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012e76:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012e7a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8012e7e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012e80:	68fa      	ldr	r2, [r7, #12]
 8012e82:	4313      	orrs	r3, r2
 8012e84:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	685a      	ldr	r2, [r3, #4]
 8012e8a:	4b07      	ldr	r3, [pc, #28]	; (8012ea8 <SDMMC_Init+0x50>)
 8012e8c:	4013      	ands	r3, r2
 8012e8e:	68fa      	ldr	r2, [r7, #12]
 8012e90:	431a      	orrs	r2, r3
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012e96:	2300      	movs	r3, #0
}
 8012e98:	4618      	mov	r0, r3
 8012e9a:	3714      	adds	r7, #20
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea2:	b004      	add	sp, #16
 8012ea4:	4770      	bx	lr
 8012ea6:	bf00      	nop
 8012ea8:	ffc02c00 	.word	0xffc02c00

08012eac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012eac:	b480      	push	{r7}
 8012eae:	b083      	sub	sp, #12
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	370c      	adds	r7, #12
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec4:	4770      	bx	lr

08012ec6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012ec6:	b480      	push	{r7}
 8012ec8:	b083      	sub	sp, #12
 8012eca:	af00      	add	r7, sp, #0
 8012ecc:	6078      	str	r0, [r7, #4]
 8012ece:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	681a      	ldr	r2, [r3, #0]
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012eda:	2300      	movs	r3, #0
}
 8012edc:	4618      	mov	r0, r3
 8012ede:	370c      	adds	r7, #12
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee6:	4770      	bx	lr

08012ee8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012ee8:	b480      	push	{r7}
 8012eea:	b083      	sub	sp, #12
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	f043 0203 	orr.w	r2, r3, #3
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012efc:	2300      	movs	r3, #0
}
 8012efe:	4618      	mov	r0, r3
 8012f00:	370c      	adds	r7, #12
 8012f02:	46bd      	mov	sp, r7
 8012f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f08:	4770      	bx	lr

08012f0a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012f0a:	b480      	push	{r7}
 8012f0c:	b083      	sub	sp, #12
 8012f0e:	af00      	add	r7, sp, #0
 8012f10:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	f003 0303 	and.w	r3, r3, #3
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	370c      	adds	r7, #12
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f24:	4770      	bx	lr
	...

08012f28 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012f28:	b480      	push	{r7}
 8012f2a:	b085      	sub	sp, #20
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
 8012f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012f32:	2300      	movs	r3, #0
 8012f34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012f36:	683b      	ldr	r3, [r7, #0]
 8012f38:	681a      	ldr	r2, [r3, #0]
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012f46:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012f4c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012f52:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012f54:	68fa      	ldr	r2, [r7, #12]
 8012f56:	4313      	orrs	r3, r2
 8012f58:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	68da      	ldr	r2, [r3, #12]
 8012f5e:	4b06      	ldr	r3, [pc, #24]	; (8012f78 <SDMMC_SendCommand+0x50>)
 8012f60:	4013      	ands	r3, r2
 8012f62:	68fa      	ldr	r2, [r7, #12]
 8012f64:	431a      	orrs	r2, r3
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012f6a:	2300      	movs	r3, #0
}
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	3714      	adds	r7, #20
 8012f70:	46bd      	mov	sp, r7
 8012f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f76:	4770      	bx	lr
 8012f78:	fffee0c0 	.word	0xfffee0c0

08012f7c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b083      	sub	sp, #12
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	691b      	ldr	r3, [r3, #16]
 8012f88:	b2db      	uxtb	r3, r3
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	370c      	adds	r7, #12
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f94:	4770      	bx	lr

08012f96 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012f96:	b480      	push	{r7}
 8012f98:	b085      	sub	sp, #20
 8012f9a:	af00      	add	r7, sp, #0
 8012f9c:	6078      	str	r0, [r7, #4]
 8012f9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	3314      	adds	r3, #20
 8012fa4:	461a      	mov	r2, r3
 8012fa6:	683b      	ldr	r3, [r7, #0]
 8012fa8:	4413      	add	r3, r2
 8012faa:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	681b      	ldr	r3, [r3, #0]
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	3714      	adds	r7, #20
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fba:	4770      	bx	lr

08012fbc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012fbc:	b480      	push	{r7}
 8012fbe:	b085      	sub	sp, #20
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
 8012fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	681a      	ldr	r2, [r3, #0]
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	685a      	ldr	r2, [r3, #4]
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012fda:	683b      	ldr	r3, [r7, #0]
 8012fdc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012fe2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012fe8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012fee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012ff0:	68fa      	ldr	r2, [r7, #12]
 8012ff2:	4313      	orrs	r3, r2
 8012ff4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ffa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	431a      	orrs	r2, r3
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8013006:	2300      	movs	r3, #0

}
 8013008:	4618      	mov	r0, r3
 801300a:	3714      	adds	r7, #20
 801300c:	46bd      	mov	sp, r7
 801300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013012:	4770      	bx	lr

08013014 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b088      	sub	sp, #32
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
 801301c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8013022:	2310      	movs	r3, #16
 8013024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013026:	f44f 7380 	mov.w	r3, #256	; 0x100
 801302a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801302c:	2300      	movs	r3, #0
 801302e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013034:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013036:	f107 0308 	add.w	r3, r7, #8
 801303a:	4619      	mov	r1, r3
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f7ff ff73 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8013042:	f241 3288 	movw	r2, #5000	; 0x1388
 8013046:	2110      	movs	r1, #16
 8013048:	6878      	ldr	r0, [r7, #4]
 801304a:	f000 fa5f 	bl	801350c <SDMMC_GetCmdResp1>
 801304e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013050:	69fb      	ldr	r3, [r7, #28]
}
 8013052:	4618      	mov	r0, r3
 8013054:	3720      	adds	r7, #32
 8013056:	46bd      	mov	sp, r7
 8013058:	bd80      	pop	{r7, pc}

0801305a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801305a:	b580      	push	{r7, lr}
 801305c:	b088      	sub	sp, #32
 801305e:	af00      	add	r7, sp, #0
 8013060:	6078      	str	r0, [r7, #4]
 8013062:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8013068:	2311      	movs	r3, #17
 801306a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801306c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013072:	2300      	movs	r3, #0
 8013074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801307a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801307c:	f107 0308 	add.w	r3, r7, #8
 8013080:	4619      	mov	r1, r3
 8013082:	6878      	ldr	r0, [r7, #4]
 8013084:	f7ff ff50 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013088:	f241 3288 	movw	r2, #5000	; 0x1388
 801308c:	2111      	movs	r1, #17
 801308e:	6878      	ldr	r0, [r7, #4]
 8013090:	f000 fa3c 	bl	801350c <SDMMC_GetCmdResp1>
 8013094:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013096:	69fb      	ldr	r3, [r7, #28]
}
 8013098:	4618      	mov	r0, r3
 801309a:	3720      	adds	r7, #32
 801309c:	46bd      	mov	sp, r7
 801309e:	bd80      	pop	{r7, pc}

080130a0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b088      	sub	sp, #32
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
 80130a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80130aa:	683b      	ldr	r3, [r7, #0]
 80130ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80130ae:	2312      	movs	r3, #18
 80130b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80130b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80130b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130b8:	2300      	movs	r3, #0
 80130ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80130c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130c2:	f107 0308 	add.w	r3, r7, #8
 80130c6:	4619      	mov	r1, r3
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f7ff ff2d 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80130ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80130d2:	2112      	movs	r1, #18
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f000 fa19 	bl	801350c <SDMMC_GetCmdResp1>
 80130da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130dc:	69fb      	ldr	r3, [r7, #28]
}
 80130de:	4618      	mov	r0, r3
 80130e0:	3720      	adds	r7, #32
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}

080130e6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80130e6:	b580      	push	{r7, lr}
 80130e8:	b088      	sub	sp, #32
 80130ea:	af00      	add	r7, sp, #0
 80130ec:	6078      	str	r0, [r7, #4]
 80130ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80130f4:	2318      	movs	r3, #24
 80130f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80130f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80130fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130fe:	2300      	movs	r3, #0
 8013100:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013106:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013108:	f107 0308 	add.w	r3, r7, #8
 801310c:	4619      	mov	r1, r3
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f7ff ff0a 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013114:	f241 3288 	movw	r2, #5000	; 0x1388
 8013118:	2118      	movs	r1, #24
 801311a:	6878      	ldr	r0, [r7, #4]
 801311c:	f000 f9f6 	bl	801350c <SDMMC_GetCmdResp1>
 8013120:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013122:	69fb      	ldr	r3, [r7, #28]
}
 8013124:	4618      	mov	r0, r3
 8013126:	3720      	adds	r7, #32
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}

0801312c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b088      	sub	sp, #32
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
 8013134:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013136:	683b      	ldr	r3, [r7, #0]
 8013138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801313a:	2319      	movs	r3, #25
 801313c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801313e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013144:	2300      	movs	r3, #0
 8013146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801314c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801314e:	f107 0308 	add.w	r3, r7, #8
 8013152:	4619      	mov	r1, r3
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f7ff fee7 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801315a:	f241 3288 	movw	r2, #5000	; 0x1388
 801315e:	2119      	movs	r1, #25
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f000 f9d3 	bl	801350c <SDMMC_GetCmdResp1>
 8013166:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013168:	69fb      	ldr	r3, [r7, #28]
}
 801316a:	4618      	mov	r0, r3
 801316c:	3720      	adds	r7, #32
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}
	...

08013174 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b088      	sub	sp, #32
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801317c:	2300      	movs	r3, #0
 801317e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8013180:	230c      	movs	r3, #12
 8013182:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013188:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801318a:	2300      	movs	r3, #0
 801318c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801318e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013192:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	68db      	ldr	r3, [r3, #12]
 8013198:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	68db      	ldr	r3, [r3, #12]
 80131a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80131ac:	f107 0308 	add.w	r3, r7, #8
 80131b0:	4619      	mov	r1, r3
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f7ff feb8 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80131b8:	4a0b      	ldr	r2, [pc, #44]	; (80131e8 <SDMMC_CmdStopTransfer+0x74>)
 80131ba:	210c      	movs	r1, #12
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f000 f9a5 	bl	801350c <SDMMC_GetCmdResp1>
 80131c2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	68db      	ldr	r3, [r3, #12]
 80131c8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80131d0:	69fb      	ldr	r3, [r7, #28]
 80131d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80131d6:	d101      	bne.n	80131dc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80131d8:	2300      	movs	r3, #0
 80131da:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80131dc:	69fb      	ldr	r3, [r7, #28]
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3720      	adds	r7, #32
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}
 80131e6:	bf00      	nop
 80131e8:	05f5e100 	.word	0x05f5e100

080131ec <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b088      	sub	sp, #32
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
 80131f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80131fa:	2307      	movs	r3, #7
 80131fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80131fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013202:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013204:	2300      	movs	r3, #0
 8013206:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801320c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801320e:	f107 0308 	add.w	r3, r7, #8
 8013212:	4619      	mov	r1, r3
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f7ff fe87 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801321a:	f241 3288 	movw	r2, #5000	; 0x1388
 801321e:	2107      	movs	r1, #7
 8013220:	6878      	ldr	r0, [r7, #4]
 8013222:	f000 f973 	bl	801350c <SDMMC_GetCmdResp1>
 8013226:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013228:	69fb      	ldr	r3, [r7, #28]
}
 801322a:	4618      	mov	r0, r3
 801322c:	3720      	adds	r7, #32
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}

08013232 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8013232:	b580      	push	{r7, lr}
 8013234:	b088      	sub	sp, #32
 8013236:	af00      	add	r7, sp, #0
 8013238:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801323a:	2300      	movs	r3, #0
 801323c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801323e:	2300      	movs	r3, #0
 8013240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8013242:	2300      	movs	r3, #0
 8013244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013246:	2300      	movs	r3, #0
 8013248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801324a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801324e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013250:	f107 0308 	add.w	r3, r7, #8
 8013254:	4619      	mov	r1, r3
 8013256:	6878      	ldr	r0, [r7, #4]
 8013258:	f7ff fe66 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f000 fb97 	bl	8013990 <SDMMC_GetCmdError>
 8013262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013264:	69fb      	ldr	r3, [r7, #28]
}
 8013266:	4618      	mov	r0, r3
 8013268:	3720      	adds	r7, #32
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}

0801326e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801326e:	b580      	push	{r7, lr}
 8013270:	b088      	sub	sp, #32
 8013272:	af00      	add	r7, sp, #0
 8013274:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8013276:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801327a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801327c:	2308      	movs	r3, #8
 801327e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013284:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013286:	2300      	movs	r3, #0
 8013288:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801328a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801328e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013290:	f107 0308 	add.w	r3, r7, #8
 8013294:	4619      	mov	r1, r3
 8013296:	6878      	ldr	r0, [r7, #4]
 8013298:	f7ff fe46 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801329c:	6878      	ldr	r0, [r7, #4]
 801329e:	f000 fb29 	bl	80138f4 <SDMMC_GetCmdResp7>
 80132a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132a4:	69fb      	ldr	r3, [r7, #28]
}
 80132a6:	4618      	mov	r0, r3
 80132a8:	3720      	adds	r7, #32
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}

080132ae <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80132ae:	b580      	push	{r7, lr}
 80132b0:	b088      	sub	sp, #32
 80132b2:	af00      	add	r7, sp, #0
 80132b4:	6078      	str	r0, [r7, #4]
 80132b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80132bc:	2337      	movs	r3, #55	; 0x37
 80132be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80132c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80132c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80132c6:	2300      	movs	r3, #0
 80132c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80132ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80132d0:	f107 0308 	add.w	r3, r7, #8
 80132d4:	4619      	mov	r1, r3
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f7ff fe26 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80132dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80132e0:	2137      	movs	r1, #55	; 0x37
 80132e2:	6878      	ldr	r0, [r7, #4]
 80132e4:	f000 f912 	bl	801350c <SDMMC_GetCmdResp1>
 80132e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132ea:	69fb      	ldr	r3, [r7, #28]
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3720      	adds	r7, #32
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}

080132f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b088      	sub	sp, #32
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
 80132fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80132fe:	683b      	ldr	r3, [r7, #0]
 8013300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8013302:	2329      	movs	r3, #41	; 0x29
 8013304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013306:	f44f 7380 	mov.w	r3, #256	; 0x100
 801330a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801330c:	2300      	movs	r3, #0
 801330e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013314:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013316:	f107 0308 	add.w	r3, r7, #8
 801331a:	4619      	mov	r1, r3
 801331c:	6878      	ldr	r0, [r7, #4]
 801331e:	f7ff fe03 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f000 fa2e 	bl	8013784 <SDMMC_GetCmdResp3>
 8013328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801332a:	69fb      	ldr	r3, [r7, #28]
}
 801332c:	4618      	mov	r0, r3
 801332e:	3720      	adds	r7, #32
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}

08013334 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b088      	sub	sp, #32
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
 801333c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801333e:	683b      	ldr	r3, [r7, #0]
 8013340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8013342:	2306      	movs	r3, #6
 8013344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013346:	f44f 7380 	mov.w	r3, #256	; 0x100
 801334a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801334c:	2300      	movs	r3, #0
 801334e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013356:	f107 0308 	add.w	r3, r7, #8
 801335a:	4619      	mov	r1, r3
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f7ff fde3 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8013362:	f241 3288 	movw	r2, #5000	; 0x1388
 8013366:	2106      	movs	r1, #6
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f000 f8cf 	bl	801350c <SDMMC_GetCmdResp1>
 801336e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013370:	69fb      	ldr	r3, [r7, #28]
}
 8013372:	4618      	mov	r0, r3
 8013374:	3720      	adds	r7, #32
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}

0801337a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801337a:	b580      	push	{r7, lr}
 801337c:	b088      	sub	sp, #32
 801337e:	af00      	add	r7, sp, #0
 8013380:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8013382:	2300      	movs	r3, #0
 8013384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8013386:	2333      	movs	r3, #51	; 0x33
 8013388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801338a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801338e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013390:	2300      	movs	r3, #0
 8013392:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013398:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801339a:	f107 0308 	add.w	r3, r7, #8
 801339e:	4619      	mov	r1, r3
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f7ff fdc1 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80133a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80133aa:	2133      	movs	r1, #51	; 0x33
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f000 f8ad 	bl	801350c <SDMMC_GetCmdResp1>
 80133b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80133b4:	69fb      	ldr	r3, [r7, #28]
}
 80133b6:	4618      	mov	r0, r3
 80133b8:	3720      	adds	r7, #32
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}

080133be <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80133be:	b580      	push	{r7, lr}
 80133c0:	b088      	sub	sp, #32
 80133c2:	af00      	add	r7, sp, #0
 80133c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80133c6:	2300      	movs	r3, #0
 80133c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80133ca:	2302      	movs	r3, #2
 80133cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80133ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80133d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80133d4:	2300      	movs	r3, #0
 80133d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80133d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80133dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80133de:	f107 0308 	add.w	r3, r7, #8
 80133e2:	4619      	mov	r1, r3
 80133e4:	6878      	ldr	r0, [r7, #4]
 80133e6:	f7ff fd9f 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f000 f980 	bl	80136f0 <SDMMC_GetCmdResp2>
 80133f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80133f2:	69fb      	ldr	r3, [r7, #28]
}
 80133f4:	4618      	mov	r0, r3
 80133f6:	3720      	adds	r7, #32
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}

080133fc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b088      	sub	sp, #32
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801340a:	2309      	movs	r3, #9
 801340c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801340e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013414:	2300      	movs	r3, #0
 8013416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801341c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801341e:	f107 0308 	add.w	r3, r7, #8
 8013422:	4619      	mov	r1, r3
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f7ff fd7f 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f000 f960 	bl	80136f0 <SDMMC_GetCmdResp2>
 8013430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013432:	69fb      	ldr	r3, [r7, #28]
}
 8013434:	4618      	mov	r0, r3
 8013436:	3720      	adds	r7, #32
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}

0801343c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b088      	sub	sp, #32
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
 8013444:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8013446:	2300      	movs	r3, #0
 8013448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801344a:	2303      	movs	r3, #3
 801344c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801344e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013452:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013454:	2300      	movs	r3, #0
 8013456:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801345c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801345e:	f107 0308 	add.w	r3, r7, #8
 8013462:	4619      	mov	r1, r3
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f7ff fd5f 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801346a:	683a      	ldr	r2, [r7, #0]
 801346c:	2103      	movs	r1, #3
 801346e:	6878      	ldr	r0, [r7, #4]
 8013470:	f000 f9c8 	bl	8013804 <SDMMC_GetCmdResp6>
 8013474:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013476:	69fb      	ldr	r3, [r7, #28]
}
 8013478:	4618      	mov	r0, r3
 801347a:	3720      	adds	r7, #32
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}

08013480 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b088      	sub	sp, #32
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801348e:	230d      	movs	r3, #13
 8013490:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013496:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013498:	2300      	movs	r3, #0
 801349a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801349c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80134a2:	f107 0308 	add.w	r3, r7, #8
 80134a6:	4619      	mov	r1, r3
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f7ff fd3d 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80134ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80134b2:	210d      	movs	r1, #13
 80134b4:	6878      	ldr	r0, [r7, #4]
 80134b6:	f000 f829 	bl	801350c <SDMMC_GetCmdResp1>
 80134ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80134bc:	69fb      	ldr	r3, [r7, #28]
}
 80134be:	4618      	mov	r0, r3
 80134c0:	3720      	adds	r7, #32
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}

080134c6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80134c6:	b580      	push	{r7, lr}
 80134c8:	b088      	sub	sp, #32
 80134ca:	af00      	add	r7, sp, #0
 80134cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80134ce:	2300      	movs	r3, #0
 80134d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80134d2:	230d      	movs	r3, #13
 80134d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80134d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80134da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80134dc:	2300      	movs	r3, #0
 80134de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80134e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80134e6:	f107 0308 	add.w	r3, r7, #8
 80134ea:	4619      	mov	r1, r3
 80134ec:	6878      	ldr	r0, [r7, #4]
 80134ee:	f7ff fd1b 	bl	8012f28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80134f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80134f6:	210d      	movs	r1, #13
 80134f8:	6878      	ldr	r0, [r7, #4]
 80134fa:	f000 f807 	bl	801350c <SDMMC_GetCmdResp1>
 80134fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013500:	69fb      	ldr	r3, [r7, #28]
}
 8013502:	4618      	mov	r0, r3
 8013504:	3720      	adds	r7, #32
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
	...

0801350c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b088      	sub	sp, #32
 8013510:	af00      	add	r7, sp, #0
 8013512:	60f8      	str	r0, [r7, #12]
 8013514:	460b      	mov	r3, r1
 8013516:	607a      	str	r2, [r7, #4]
 8013518:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801351a:	4b70      	ldr	r3, [pc, #448]	; (80136dc <SDMMC_GetCmdResp1+0x1d0>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	4a70      	ldr	r2, [pc, #448]	; (80136e0 <SDMMC_GetCmdResp1+0x1d4>)
 8013520:	fba2 2303 	umull	r2, r3, r2, r3
 8013524:	0a5a      	lsrs	r2, r3, #9
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	fb02 f303 	mul.w	r3, r2, r3
 801352c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801352e:	69fb      	ldr	r3, [r7, #28]
 8013530:	1e5a      	subs	r2, r3, #1
 8013532:	61fa      	str	r2, [r7, #28]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d102      	bne.n	801353e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013538:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801353c:	e0c9      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013542:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8013544:	69ba      	ldr	r2, [r7, #24]
 8013546:	4b67      	ldr	r3, [pc, #412]	; (80136e4 <SDMMC_GetCmdResp1+0x1d8>)
 8013548:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801354a:	2b00      	cmp	r3, #0
 801354c:	d0ef      	beq.n	801352e <SDMMC_GetCmdResp1+0x22>
 801354e:	69bb      	ldr	r3, [r7, #24]
 8013550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013554:	2b00      	cmp	r3, #0
 8013556:	d1ea      	bne.n	801352e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801355c:	f003 0304 	and.w	r3, r3, #4
 8013560:	2b00      	cmp	r3, #0
 8013562:	d004      	beq.n	801356e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	2204      	movs	r2, #4
 8013568:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801356a:	2304      	movs	r3, #4
 801356c:	e0b1      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013572:	f003 0301 	and.w	r3, r3, #1
 8013576:	2b00      	cmp	r3, #0
 8013578:	d004      	beq.n	8013584 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	2201      	movs	r2, #1
 801357e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013580:	2301      	movs	r3, #1
 8013582:	e0a6      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	4a58      	ldr	r2, [pc, #352]	; (80136e8 <SDMMC_GetCmdResp1+0x1dc>)
 8013588:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801358a:	68f8      	ldr	r0, [r7, #12]
 801358c:	f7ff fcf6 	bl	8012f7c <SDMMC_GetCommandResponse>
 8013590:	4603      	mov	r3, r0
 8013592:	461a      	mov	r2, r3
 8013594:	7afb      	ldrb	r3, [r7, #11]
 8013596:	4293      	cmp	r3, r2
 8013598:	d001      	beq.n	801359e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801359a:	2301      	movs	r3, #1
 801359c:	e099      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801359e:	2100      	movs	r1, #0
 80135a0:	68f8      	ldr	r0, [r7, #12]
 80135a2:	f7ff fcf8 	bl	8012f96 <SDMMC_GetResponse>
 80135a6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80135a8:	697a      	ldr	r2, [r7, #20]
 80135aa:	4b50      	ldr	r3, [pc, #320]	; (80136ec <SDMMC_GetCmdResp1+0x1e0>)
 80135ac:	4013      	ands	r3, r2
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d101      	bne.n	80135b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80135b2:	2300      	movs	r3, #0
 80135b4:	e08d      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	da02      	bge.n	80135c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80135bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80135c0:	e087      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80135c2:	697b      	ldr	r3, [r7, #20]
 80135c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d001      	beq.n	80135d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80135cc:	2340      	movs	r3, #64	; 0x40
 80135ce:	e080      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80135d0:	697b      	ldr	r3, [r7, #20]
 80135d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d001      	beq.n	80135de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80135da:	2380      	movs	r3, #128	; 0x80
 80135dc:	e079      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80135de:	697b      	ldr	r3, [r7, #20]
 80135e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d002      	beq.n	80135ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80135e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80135ec:	e071      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80135ee:	697b      	ldr	r3, [r7, #20]
 80135f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d002      	beq.n	80135fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80135f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80135fc:	e069      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013604:	2b00      	cmp	r3, #0
 8013606:	d002      	beq.n	801360e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801360c:	e061      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801360e:	697b      	ldr	r3, [r7, #20]
 8013610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013614:	2b00      	cmp	r3, #0
 8013616:	d002      	beq.n	801361e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013618:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801361c:	e059      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801361e:	697b      	ldr	r3, [r7, #20]
 8013620:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013624:	2b00      	cmp	r3, #0
 8013626:	d002      	beq.n	801362e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801362c:	e051      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013634:	2b00      	cmp	r3, #0
 8013636:	d002      	beq.n	801363e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801363c:	e049      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013644:	2b00      	cmp	r3, #0
 8013646:	d002      	beq.n	801364e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013648:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801364c:	e041      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013654:	2b00      	cmp	r3, #0
 8013656:	d002      	beq.n	801365e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013658:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801365c:	e039      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801365e:	697b      	ldr	r3, [r7, #20]
 8013660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013664:	2b00      	cmp	r3, #0
 8013666:	d002      	beq.n	801366e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013668:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801366c:	e031      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013674:	2b00      	cmp	r3, #0
 8013676:	d002      	beq.n	801367e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013678:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801367c:	e029      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013684:	2b00      	cmp	r3, #0
 8013686:	d002      	beq.n	801368e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013688:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801368c:	e021      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801368e:	697b      	ldr	r3, [r7, #20]
 8013690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013694:	2b00      	cmp	r3, #0
 8013696:	d002      	beq.n	801369e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013698:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801369c:	e019      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d002      	beq.n	80136ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80136a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80136ac:	e011      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d002      	beq.n	80136be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80136b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80136bc:	e009      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	f003 0308 	and.w	r3, r3, #8
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d002      	beq.n	80136ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80136c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80136cc:	e001      	b.n	80136d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80136ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80136d2:	4618      	mov	r0, r3
 80136d4:	3720      	adds	r7, #32
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}
 80136da:	bf00      	nop
 80136dc:	24000000 	.word	0x24000000
 80136e0:	10624dd3 	.word	0x10624dd3
 80136e4:	00200045 	.word	0x00200045
 80136e8:	002000c5 	.word	0x002000c5
 80136ec:	fdffe008 	.word	0xfdffe008

080136f0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80136f0:	b480      	push	{r7}
 80136f2:	b085      	sub	sp, #20
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80136f8:	4b1f      	ldr	r3, [pc, #124]	; (8013778 <SDMMC_GetCmdResp2+0x88>)
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	4a1f      	ldr	r2, [pc, #124]	; (801377c <SDMMC_GetCmdResp2+0x8c>)
 80136fe:	fba2 2303 	umull	r2, r3, r2, r3
 8013702:	0a5b      	lsrs	r3, r3, #9
 8013704:	f241 3288 	movw	r2, #5000	; 0x1388
 8013708:	fb02 f303 	mul.w	r3, r2, r3
 801370c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	1e5a      	subs	r2, r3, #1
 8013712:	60fa      	str	r2, [r7, #12]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d102      	bne.n	801371e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013718:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801371c:	e026      	b.n	801376c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013722:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013724:	68bb      	ldr	r3, [r7, #8]
 8013726:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801372a:	2b00      	cmp	r3, #0
 801372c:	d0ef      	beq.n	801370e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801372e:	68bb      	ldr	r3, [r7, #8]
 8013730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013734:	2b00      	cmp	r3, #0
 8013736:	d1ea      	bne.n	801370e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801373c:	f003 0304 	and.w	r3, r3, #4
 8013740:	2b00      	cmp	r3, #0
 8013742:	d004      	beq.n	801374e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2204      	movs	r2, #4
 8013748:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801374a:	2304      	movs	r3, #4
 801374c:	e00e      	b.n	801376c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013752:	f003 0301 	and.w	r3, r3, #1
 8013756:	2b00      	cmp	r3, #0
 8013758:	d004      	beq.n	8013764 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2201      	movs	r2, #1
 801375e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013760:	2301      	movs	r3, #1
 8013762:	e003      	b.n	801376c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	4a06      	ldr	r2, [pc, #24]	; (8013780 <SDMMC_GetCmdResp2+0x90>)
 8013768:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801376a:	2300      	movs	r3, #0
}
 801376c:	4618      	mov	r0, r3
 801376e:	3714      	adds	r7, #20
 8013770:	46bd      	mov	sp, r7
 8013772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013776:	4770      	bx	lr
 8013778:	24000000 	.word	0x24000000
 801377c:	10624dd3 	.word	0x10624dd3
 8013780:	002000c5 	.word	0x002000c5

08013784 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013784:	b480      	push	{r7}
 8013786:	b085      	sub	sp, #20
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801378c:	4b1a      	ldr	r3, [pc, #104]	; (80137f8 <SDMMC_GetCmdResp3+0x74>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	4a1a      	ldr	r2, [pc, #104]	; (80137fc <SDMMC_GetCmdResp3+0x78>)
 8013792:	fba2 2303 	umull	r2, r3, r2, r3
 8013796:	0a5b      	lsrs	r3, r3, #9
 8013798:	f241 3288 	movw	r2, #5000	; 0x1388
 801379c:	fb02 f303 	mul.w	r3, r2, r3
 80137a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	1e5a      	subs	r2, r3, #1
 80137a6:	60fa      	str	r2, [r7, #12]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d102      	bne.n	80137b2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80137ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80137b0:	e01b      	b.n	80137ea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137b6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80137b8:	68bb      	ldr	r3, [r7, #8]
 80137ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d0ef      	beq.n	80137a2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d1ea      	bne.n	80137a2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137d0:	f003 0304 	and.w	r3, r3, #4
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d004      	beq.n	80137e2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	2204      	movs	r2, #4
 80137dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80137de:	2304      	movs	r3, #4
 80137e0:	e003      	b.n	80137ea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	4a06      	ldr	r2, [pc, #24]	; (8013800 <SDMMC_GetCmdResp3+0x7c>)
 80137e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80137e8:	2300      	movs	r3, #0
}
 80137ea:	4618      	mov	r0, r3
 80137ec:	3714      	adds	r7, #20
 80137ee:	46bd      	mov	sp, r7
 80137f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f4:	4770      	bx	lr
 80137f6:	bf00      	nop
 80137f8:	24000000 	.word	0x24000000
 80137fc:	10624dd3 	.word	0x10624dd3
 8013800:	002000c5 	.word	0x002000c5

08013804 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b088      	sub	sp, #32
 8013808:	af00      	add	r7, sp, #0
 801380a:	60f8      	str	r0, [r7, #12]
 801380c:	460b      	mov	r3, r1
 801380e:	607a      	str	r2, [r7, #4]
 8013810:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013812:	4b35      	ldr	r3, [pc, #212]	; (80138e8 <SDMMC_GetCmdResp6+0xe4>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	4a35      	ldr	r2, [pc, #212]	; (80138ec <SDMMC_GetCmdResp6+0xe8>)
 8013818:	fba2 2303 	umull	r2, r3, r2, r3
 801381c:	0a5b      	lsrs	r3, r3, #9
 801381e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013822:	fb02 f303 	mul.w	r3, r2, r3
 8013826:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013828:	69fb      	ldr	r3, [r7, #28]
 801382a:	1e5a      	subs	r2, r3, #1
 801382c:	61fa      	str	r2, [r7, #28]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d102      	bne.n	8013838 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013832:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013836:	e052      	b.n	80138de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801383c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801383e:	69bb      	ldr	r3, [r7, #24]
 8013840:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013844:	2b00      	cmp	r3, #0
 8013846:	d0ef      	beq.n	8013828 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013848:	69bb      	ldr	r3, [r7, #24]
 801384a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801384e:	2b00      	cmp	r3, #0
 8013850:	d1ea      	bne.n	8013828 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013856:	f003 0304 	and.w	r3, r3, #4
 801385a:	2b00      	cmp	r3, #0
 801385c:	d004      	beq.n	8013868 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	2204      	movs	r2, #4
 8013862:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013864:	2304      	movs	r3, #4
 8013866:	e03a      	b.n	80138de <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801386c:	f003 0301 	and.w	r3, r3, #1
 8013870:	2b00      	cmp	r3, #0
 8013872:	d004      	beq.n	801387e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	2201      	movs	r2, #1
 8013878:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801387a:	2301      	movs	r3, #1
 801387c:	e02f      	b.n	80138de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801387e:	68f8      	ldr	r0, [r7, #12]
 8013880:	f7ff fb7c 	bl	8012f7c <SDMMC_GetCommandResponse>
 8013884:	4603      	mov	r3, r0
 8013886:	461a      	mov	r2, r3
 8013888:	7afb      	ldrb	r3, [r7, #11]
 801388a:	4293      	cmp	r3, r2
 801388c:	d001      	beq.n	8013892 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801388e:	2301      	movs	r3, #1
 8013890:	e025      	b.n	80138de <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	4a16      	ldr	r2, [pc, #88]	; (80138f0 <SDMMC_GetCmdResp6+0xec>)
 8013896:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013898:	2100      	movs	r1, #0
 801389a:	68f8      	ldr	r0, [r7, #12]
 801389c:	f7ff fb7b 	bl	8012f96 <SDMMC_GetResponse>
 80138a0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d106      	bne.n	80138ba <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80138ac:	697b      	ldr	r3, [r7, #20]
 80138ae:	0c1b      	lsrs	r3, r3, #16
 80138b0:	b29a      	uxth	r2, r3
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80138b6:	2300      	movs	r3, #0
 80138b8:	e011      	b.n	80138de <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80138ba:	697b      	ldr	r3, [r7, #20]
 80138bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d002      	beq.n	80138ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80138c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80138c8:	e009      	b.n	80138de <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d002      	beq.n	80138da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80138d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80138d8:	e001      	b.n	80138de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80138da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80138de:	4618      	mov	r0, r3
 80138e0:	3720      	adds	r7, #32
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	24000000 	.word	0x24000000
 80138ec:	10624dd3 	.word	0x10624dd3
 80138f0:	002000c5 	.word	0x002000c5

080138f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80138f4:	b480      	push	{r7}
 80138f6:	b085      	sub	sp, #20
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80138fc:	4b22      	ldr	r3, [pc, #136]	; (8013988 <SDMMC_GetCmdResp7+0x94>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	4a22      	ldr	r2, [pc, #136]	; (801398c <SDMMC_GetCmdResp7+0x98>)
 8013902:	fba2 2303 	umull	r2, r3, r2, r3
 8013906:	0a5b      	lsrs	r3, r3, #9
 8013908:	f241 3288 	movw	r2, #5000	; 0x1388
 801390c:	fb02 f303 	mul.w	r3, r2, r3
 8013910:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	1e5a      	subs	r2, r3, #1
 8013916:	60fa      	str	r2, [r7, #12]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d102      	bne.n	8013922 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801391c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013920:	e02c      	b.n	801397c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013926:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801392e:	2b00      	cmp	r3, #0
 8013930:	d0ef      	beq.n	8013912 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013932:	68bb      	ldr	r3, [r7, #8]
 8013934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013938:	2b00      	cmp	r3, #0
 801393a:	d1ea      	bne.n	8013912 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013940:	f003 0304 	and.w	r3, r3, #4
 8013944:	2b00      	cmp	r3, #0
 8013946:	d004      	beq.n	8013952 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2204      	movs	r2, #4
 801394c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801394e:	2304      	movs	r3, #4
 8013950:	e014      	b.n	801397c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013956:	f003 0301 	and.w	r3, r3, #1
 801395a:	2b00      	cmp	r3, #0
 801395c:	d004      	beq.n	8013968 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	2201      	movs	r2, #1
 8013962:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013964:	2301      	movs	r3, #1
 8013966:	e009      	b.n	801397c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013970:	2b00      	cmp	r3, #0
 8013972:	d002      	beq.n	801397a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	2240      	movs	r2, #64	; 0x40
 8013978:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801397a:	2300      	movs	r3, #0

}
 801397c:	4618      	mov	r0, r3
 801397e:	3714      	adds	r7, #20
 8013980:	46bd      	mov	sp, r7
 8013982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013986:	4770      	bx	lr
 8013988:	24000000 	.word	0x24000000
 801398c:	10624dd3 	.word	0x10624dd3

08013990 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013990:	b480      	push	{r7}
 8013992:	b085      	sub	sp, #20
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013998:	4b11      	ldr	r3, [pc, #68]	; (80139e0 <SDMMC_GetCmdError+0x50>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	4a11      	ldr	r2, [pc, #68]	; (80139e4 <SDMMC_GetCmdError+0x54>)
 801399e:	fba2 2303 	umull	r2, r3, r2, r3
 80139a2:	0a5b      	lsrs	r3, r3, #9
 80139a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80139a8:	fb02 f303 	mul.w	r3, r2, r3
 80139ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	1e5a      	subs	r2, r3, #1
 80139b2:	60fa      	str	r2, [r7, #12]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d102      	bne.n	80139be <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80139b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80139bc:	e009      	b.n	80139d2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d0f1      	beq.n	80139ae <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	4a06      	ldr	r2, [pc, #24]	; (80139e8 <SDMMC_GetCmdError+0x58>)
 80139ce:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80139d0:	2300      	movs	r3, #0
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3714      	adds	r7, #20
 80139d6:	46bd      	mov	sp, r7
 80139d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139dc:	4770      	bx	lr
 80139de:	bf00      	nop
 80139e0:	24000000 	.word	0x24000000
 80139e4:	10624dd3 	.word	0x10624dd3
 80139e8:	002000c5 	.word	0x002000c5

080139ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80139ec:	b084      	sub	sp, #16
 80139ee:	b580      	push	{r7, lr}
 80139f0:	b084      	sub	sp, #16
 80139f2:	af00      	add	r7, sp, #0
 80139f4:	6078      	str	r0, [r7, #4]
 80139f6:	f107 001c 	add.w	r0, r7, #28
 80139fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80139fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a00:	2b01      	cmp	r3, #1
 8013a02:	d120      	bne.n	8013a46 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	68da      	ldr	r2, [r3, #12]
 8013a14:	4b2a      	ldr	r3, [pc, #168]	; (8013ac0 <USB_CoreInit+0xd4>)
 8013a16:	4013      	ands	r3, r2
 8013a18:	687a      	ldr	r2, [r7, #4]
 8013a1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	68db      	ldr	r3, [r3, #12]
 8013a20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a2a:	2b01      	cmp	r3, #1
 8013a2c:	d105      	bne.n	8013a3a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	68db      	ldr	r3, [r3, #12]
 8013a32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013a3a:	6878      	ldr	r0, [r7, #4]
 8013a3c:	f001 faf8 	bl	8015030 <USB_CoreReset>
 8013a40:	4603      	mov	r3, r0
 8013a42:	73fb      	strb	r3, [r7, #15]
 8013a44:	e01a      	b.n	8013a7c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	68db      	ldr	r3, [r3, #12]
 8013a4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f001 faec 	bl	8015030 <USB_CoreReset>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d106      	bne.n	8013a70 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	639a      	str	r2, [r3, #56]	; 0x38
 8013a6e:	e005      	b.n	8013a7c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a7e:	2b01      	cmp	r3, #1
 8013a80:	d116      	bne.n	8013ab0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013a86:	b29a      	uxth	r2, r3
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013a90:	4b0c      	ldr	r3, [pc, #48]	; (8013ac4 <USB_CoreInit+0xd8>)
 8013a92:	4313      	orrs	r3, r2
 8013a94:	687a      	ldr	r2, [r7, #4]
 8013a96:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	689b      	ldr	r3, [r3, #8]
 8013a9c:	f043 0206 	orr.w	r2, r3, #6
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	689b      	ldr	r3, [r3, #8]
 8013aa8:	f043 0220 	orr.w	r2, r3, #32
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	3710      	adds	r7, #16
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013abc:	b004      	add	sp, #16
 8013abe:	4770      	bx	lr
 8013ac0:	ffbdffbf 	.word	0xffbdffbf
 8013ac4:	03ee0000 	.word	0x03ee0000

08013ac8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013ac8:	b480      	push	{r7}
 8013aca:	b087      	sub	sp, #28
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	60f8      	str	r0, [r7, #12]
 8013ad0:	60b9      	str	r1, [r7, #8]
 8013ad2:	4613      	mov	r3, r2
 8013ad4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013ad6:	79fb      	ldrb	r3, [r7, #7]
 8013ad8:	2b02      	cmp	r3, #2
 8013ada:	d165      	bne.n	8013ba8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	4a41      	ldr	r2, [pc, #260]	; (8013be4 <USB_SetTurnaroundTime+0x11c>)
 8013ae0:	4293      	cmp	r3, r2
 8013ae2:	d906      	bls.n	8013af2 <USB_SetTurnaroundTime+0x2a>
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	4a40      	ldr	r2, [pc, #256]	; (8013be8 <USB_SetTurnaroundTime+0x120>)
 8013ae8:	4293      	cmp	r3, r2
 8013aea:	d202      	bcs.n	8013af2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013aec:	230f      	movs	r3, #15
 8013aee:	617b      	str	r3, [r7, #20]
 8013af0:	e062      	b.n	8013bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013af2:	68bb      	ldr	r3, [r7, #8]
 8013af4:	4a3c      	ldr	r2, [pc, #240]	; (8013be8 <USB_SetTurnaroundTime+0x120>)
 8013af6:	4293      	cmp	r3, r2
 8013af8:	d306      	bcc.n	8013b08 <USB_SetTurnaroundTime+0x40>
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	4a3b      	ldr	r2, [pc, #236]	; (8013bec <USB_SetTurnaroundTime+0x124>)
 8013afe:	4293      	cmp	r3, r2
 8013b00:	d202      	bcs.n	8013b08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013b02:	230e      	movs	r3, #14
 8013b04:	617b      	str	r3, [r7, #20]
 8013b06:	e057      	b.n	8013bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	4a38      	ldr	r2, [pc, #224]	; (8013bec <USB_SetTurnaroundTime+0x124>)
 8013b0c:	4293      	cmp	r3, r2
 8013b0e:	d306      	bcc.n	8013b1e <USB_SetTurnaroundTime+0x56>
 8013b10:	68bb      	ldr	r3, [r7, #8]
 8013b12:	4a37      	ldr	r2, [pc, #220]	; (8013bf0 <USB_SetTurnaroundTime+0x128>)
 8013b14:	4293      	cmp	r3, r2
 8013b16:	d202      	bcs.n	8013b1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013b18:	230d      	movs	r3, #13
 8013b1a:	617b      	str	r3, [r7, #20]
 8013b1c:	e04c      	b.n	8013bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013b1e:	68bb      	ldr	r3, [r7, #8]
 8013b20:	4a33      	ldr	r2, [pc, #204]	; (8013bf0 <USB_SetTurnaroundTime+0x128>)
 8013b22:	4293      	cmp	r3, r2
 8013b24:	d306      	bcc.n	8013b34 <USB_SetTurnaroundTime+0x6c>
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	4a32      	ldr	r2, [pc, #200]	; (8013bf4 <USB_SetTurnaroundTime+0x12c>)
 8013b2a:	4293      	cmp	r3, r2
 8013b2c:	d802      	bhi.n	8013b34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013b2e:	230c      	movs	r3, #12
 8013b30:	617b      	str	r3, [r7, #20]
 8013b32:	e041      	b.n	8013bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	4a2f      	ldr	r2, [pc, #188]	; (8013bf4 <USB_SetTurnaroundTime+0x12c>)
 8013b38:	4293      	cmp	r3, r2
 8013b3a:	d906      	bls.n	8013b4a <USB_SetTurnaroundTime+0x82>
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	4a2e      	ldr	r2, [pc, #184]	; (8013bf8 <USB_SetTurnaroundTime+0x130>)
 8013b40:	4293      	cmp	r3, r2
 8013b42:	d802      	bhi.n	8013b4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013b44:	230b      	movs	r3, #11
 8013b46:	617b      	str	r3, [r7, #20]
 8013b48:	e036      	b.n	8013bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013b4a:	68bb      	ldr	r3, [r7, #8]
 8013b4c:	4a2a      	ldr	r2, [pc, #168]	; (8013bf8 <USB_SetTurnaroundTime+0x130>)
 8013b4e:	4293      	cmp	r3, r2
 8013b50:	d906      	bls.n	8013b60 <USB_SetTurnaroundTime+0x98>
 8013b52:	68bb      	ldr	r3, [r7, #8]
 8013b54:	4a29      	ldr	r2, [pc, #164]	; (8013bfc <USB_SetTurnaroundTime+0x134>)
 8013b56:	4293      	cmp	r3, r2
 8013b58:	d802      	bhi.n	8013b60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013b5a:	230a      	movs	r3, #10
 8013b5c:	617b      	str	r3, [r7, #20]
 8013b5e:	e02b      	b.n	8013bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013b60:	68bb      	ldr	r3, [r7, #8]
 8013b62:	4a26      	ldr	r2, [pc, #152]	; (8013bfc <USB_SetTurnaroundTime+0x134>)
 8013b64:	4293      	cmp	r3, r2
 8013b66:	d906      	bls.n	8013b76 <USB_SetTurnaroundTime+0xae>
 8013b68:	68bb      	ldr	r3, [r7, #8]
 8013b6a:	4a25      	ldr	r2, [pc, #148]	; (8013c00 <USB_SetTurnaroundTime+0x138>)
 8013b6c:	4293      	cmp	r3, r2
 8013b6e:	d202      	bcs.n	8013b76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013b70:	2309      	movs	r3, #9
 8013b72:	617b      	str	r3, [r7, #20]
 8013b74:	e020      	b.n	8013bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013b76:	68bb      	ldr	r3, [r7, #8]
 8013b78:	4a21      	ldr	r2, [pc, #132]	; (8013c00 <USB_SetTurnaroundTime+0x138>)
 8013b7a:	4293      	cmp	r3, r2
 8013b7c:	d306      	bcc.n	8013b8c <USB_SetTurnaroundTime+0xc4>
 8013b7e:	68bb      	ldr	r3, [r7, #8]
 8013b80:	4a20      	ldr	r2, [pc, #128]	; (8013c04 <USB_SetTurnaroundTime+0x13c>)
 8013b82:	4293      	cmp	r3, r2
 8013b84:	d802      	bhi.n	8013b8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013b86:	2308      	movs	r3, #8
 8013b88:	617b      	str	r3, [r7, #20]
 8013b8a:	e015      	b.n	8013bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013b8c:	68bb      	ldr	r3, [r7, #8]
 8013b8e:	4a1d      	ldr	r2, [pc, #116]	; (8013c04 <USB_SetTurnaroundTime+0x13c>)
 8013b90:	4293      	cmp	r3, r2
 8013b92:	d906      	bls.n	8013ba2 <USB_SetTurnaroundTime+0xda>
 8013b94:	68bb      	ldr	r3, [r7, #8]
 8013b96:	4a1c      	ldr	r2, [pc, #112]	; (8013c08 <USB_SetTurnaroundTime+0x140>)
 8013b98:	4293      	cmp	r3, r2
 8013b9a:	d202      	bcs.n	8013ba2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013b9c:	2307      	movs	r3, #7
 8013b9e:	617b      	str	r3, [r7, #20]
 8013ba0:	e00a      	b.n	8013bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013ba2:	2306      	movs	r3, #6
 8013ba4:	617b      	str	r3, [r7, #20]
 8013ba6:	e007      	b.n	8013bb8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013ba8:	79fb      	ldrb	r3, [r7, #7]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d102      	bne.n	8013bb4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013bae:	2309      	movs	r3, #9
 8013bb0:	617b      	str	r3, [r7, #20]
 8013bb2:	e001      	b.n	8013bb8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013bb4:	2309      	movs	r3, #9
 8013bb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	68db      	ldr	r3, [r3, #12]
 8013bbc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	68da      	ldr	r2, [r3, #12]
 8013bc8:	697b      	ldr	r3, [r7, #20]
 8013bca:	029b      	lsls	r3, r3, #10
 8013bcc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013bd0:	431a      	orrs	r2, r3
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013bd6:	2300      	movs	r3, #0
}
 8013bd8:	4618      	mov	r0, r3
 8013bda:	371c      	adds	r7, #28
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be2:	4770      	bx	lr
 8013be4:	00d8acbf 	.word	0x00d8acbf
 8013be8:	00e4e1c0 	.word	0x00e4e1c0
 8013bec:	00f42400 	.word	0x00f42400
 8013bf0:	01067380 	.word	0x01067380
 8013bf4:	011a499f 	.word	0x011a499f
 8013bf8:	01312cff 	.word	0x01312cff
 8013bfc:	014ca43f 	.word	0x014ca43f
 8013c00:	016e3600 	.word	0x016e3600
 8013c04:	01a6ab1f 	.word	0x01a6ab1f
 8013c08:	01e84800 	.word	0x01e84800

08013c0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013c0c:	b480      	push	{r7}
 8013c0e:	b083      	sub	sp, #12
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	689b      	ldr	r3, [r3, #8]
 8013c18:	f043 0201 	orr.w	r2, r3, #1
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013c20:	2300      	movs	r3, #0
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	370c      	adds	r7, #12
 8013c26:	46bd      	mov	sp, r7
 8013c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2c:	4770      	bx	lr

08013c2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013c2e:	b480      	push	{r7}
 8013c30:	b083      	sub	sp, #12
 8013c32:	af00      	add	r7, sp, #0
 8013c34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	689b      	ldr	r3, [r3, #8]
 8013c3a:	f023 0201 	bic.w	r2, r3, #1
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013c42:	2300      	movs	r3, #0
}
 8013c44:	4618      	mov	r0, r3
 8013c46:	370c      	adds	r7, #12
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4e:	4770      	bx	lr

08013c50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b084      	sub	sp, #16
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
 8013c58:	460b      	mov	r3, r1
 8013c5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	68db      	ldr	r3, [r3, #12]
 8013c64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013c6c:	78fb      	ldrb	r3, [r7, #3]
 8013c6e:	2b01      	cmp	r3, #1
 8013c70:	d115      	bne.n	8013c9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	68db      	ldr	r3, [r3, #12]
 8013c76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013c7e:	2001      	movs	r0, #1
 8013c80:	f7f0 fa5a 	bl	8004138 <HAL_Delay>
      ms++;
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	3301      	adds	r3, #1
 8013c88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f001 f93f 	bl	8014f0e <USB_GetMode>
 8013c90:	4603      	mov	r3, r0
 8013c92:	2b01      	cmp	r3, #1
 8013c94:	d01e      	beq.n	8013cd4 <USB_SetCurrentMode+0x84>
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	2b31      	cmp	r3, #49	; 0x31
 8013c9a:	d9f0      	bls.n	8013c7e <USB_SetCurrentMode+0x2e>
 8013c9c:	e01a      	b.n	8013cd4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013c9e:	78fb      	ldrb	r3, [r7, #3]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d115      	bne.n	8013cd0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	68db      	ldr	r3, [r3, #12]
 8013ca8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013cb0:	2001      	movs	r0, #1
 8013cb2:	f7f0 fa41 	bl	8004138 <HAL_Delay>
      ms++;
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	3301      	adds	r3, #1
 8013cba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013cbc:	6878      	ldr	r0, [r7, #4]
 8013cbe:	f001 f926 	bl	8014f0e <USB_GetMode>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d005      	beq.n	8013cd4 <USB_SetCurrentMode+0x84>
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	2b31      	cmp	r3, #49	; 0x31
 8013ccc:	d9f0      	bls.n	8013cb0 <USB_SetCurrentMode+0x60>
 8013cce:	e001      	b.n	8013cd4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	e005      	b.n	8013ce0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	2b32      	cmp	r3, #50	; 0x32
 8013cd8:	d101      	bne.n	8013cde <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013cda:	2301      	movs	r3, #1
 8013cdc:	e000      	b.n	8013ce0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013cde:	2300      	movs	r3, #0
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3710      	adds	r7, #16
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}

08013ce8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013ce8:	b084      	sub	sp, #16
 8013cea:	b580      	push	{r7, lr}
 8013cec:	b086      	sub	sp, #24
 8013cee:	af00      	add	r7, sp, #0
 8013cf0:	6078      	str	r0, [r7, #4]
 8013cf2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013d02:	2300      	movs	r3, #0
 8013d04:	613b      	str	r3, [r7, #16]
 8013d06:	e009      	b.n	8013d1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013d08:	687a      	ldr	r2, [r7, #4]
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	3340      	adds	r3, #64	; 0x40
 8013d0e:	009b      	lsls	r3, r3, #2
 8013d10:	4413      	add	r3, r2
 8013d12:	2200      	movs	r2, #0
 8013d14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013d16:	693b      	ldr	r3, [r7, #16]
 8013d18:	3301      	adds	r3, #1
 8013d1a:	613b      	str	r3, [r7, #16]
 8013d1c:	693b      	ldr	r3, [r7, #16]
 8013d1e:	2b0e      	cmp	r3, #14
 8013d20:	d9f2      	bls.n	8013d08 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d11c      	bne.n	8013d62 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d2e:	685b      	ldr	r3, [r3, #4]
 8013d30:	68fa      	ldr	r2, [r7, #12]
 8013d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013d36:	f043 0302 	orr.w	r3, r3, #2
 8013d3a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	601a      	str	r2, [r3, #0]
 8013d60:	e005      	b.n	8013d6e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013d74:	461a      	mov	r2, r3
 8013d76:	2300      	movs	r3, #0
 8013d78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d80:	4619      	mov	r1, r3
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d88:	461a      	mov	r2, r3
 8013d8a:	680b      	ldr	r3, [r1, #0]
 8013d8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d90:	2b01      	cmp	r3, #1
 8013d92:	d10c      	bne.n	8013dae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d104      	bne.n	8013da4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013d9a:	2100      	movs	r1, #0
 8013d9c:	6878      	ldr	r0, [r7, #4]
 8013d9e:	f000 f965 	bl	801406c <USB_SetDevSpeed>
 8013da2:	e008      	b.n	8013db6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013da4:	2101      	movs	r1, #1
 8013da6:	6878      	ldr	r0, [r7, #4]
 8013da8:	f000 f960 	bl	801406c <USB_SetDevSpeed>
 8013dac:	e003      	b.n	8013db6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013dae:	2103      	movs	r1, #3
 8013db0:	6878      	ldr	r0, [r7, #4]
 8013db2:	f000 f95b 	bl	801406c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013db6:	2110      	movs	r1, #16
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f000 f8f3 	bl	8013fa4 <USB_FlushTxFifo>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d001      	beq.n	8013dc8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013dc8:	6878      	ldr	r0, [r7, #4]
 8013dca:	f000 f91f 	bl	801400c <USB_FlushRxFifo>
 8013dce:	4603      	mov	r3, r0
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d001      	beq.n	8013dd8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013dd4:	2301      	movs	r3, #1
 8013dd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dde:	461a      	mov	r2, r3
 8013de0:	2300      	movs	r3, #0
 8013de2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dea:	461a      	mov	r2, r3
 8013dec:	2300      	movs	r3, #0
 8013dee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013df6:	461a      	mov	r2, r3
 8013df8:	2300      	movs	r3, #0
 8013dfa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	613b      	str	r3, [r7, #16]
 8013e00:	e043      	b.n	8013e8a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	015a      	lsls	r2, r3, #5
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	4413      	add	r3, r2
 8013e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013e18:	d118      	bne.n	8013e4c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013e1a:	693b      	ldr	r3, [r7, #16]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d10a      	bne.n	8013e36 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013e20:	693b      	ldr	r3, [r7, #16]
 8013e22:	015a      	lsls	r2, r3, #5
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	4413      	add	r3, r2
 8013e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e2c:	461a      	mov	r2, r3
 8013e2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013e32:	6013      	str	r3, [r2, #0]
 8013e34:	e013      	b.n	8013e5e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013e36:	693b      	ldr	r3, [r7, #16]
 8013e38:	015a      	lsls	r2, r3, #5
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	4413      	add	r3, r2
 8013e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e42:	461a      	mov	r2, r3
 8013e44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013e48:	6013      	str	r3, [r2, #0]
 8013e4a:	e008      	b.n	8013e5e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013e4c:	693b      	ldr	r3, [r7, #16]
 8013e4e:	015a      	lsls	r2, r3, #5
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	4413      	add	r3, r2
 8013e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e58:	461a      	mov	r2, r3
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013e5e:	693b      	ldr	r3, [r7, #16]
 8013e60:	015a      	lsls	r2, r3, #5
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	4413      	add	r3, r2
 8013e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e6a:	461a      	mov	r2, r3
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013e70:	693b      	ldr	r3, [r7, #16]
 8013e72:	015a      	lsls	r2, r3, #5
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	4413      	add	r3, r2
 8013e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e7c:	461a      	mov	r2, r3
 8013e7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013e82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013e84:	693b      	ldr	r3, [r7, #16]
 8013e86:	3301      	adds	r3, #1
 8013e88:	613b      	str	r3, [r7, #16]
 8013e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e8c:	693a      	ldr	r2, [r7, #16]
 8013e8e:	429a      	cmp	r2, r3
 8013e90:	d3b7      	bcc.n	8013e02 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013e92:	2300      	movs	r3, #0
 8013e94:	613b      	str	r3, [r7, #16]
 8013e96:	e043      	b.n	8013f20 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013e98:	693b      	ldr	r3, [r7, #16]
 8013e9a:	015a      	lsls	r2, r3, #5
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	4413      	add	r3, r2
 8013ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013eae:	d118      	bne.n	8013ee2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8013eb0:	693b      	ldr	r3, [r7, #16]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d10a      	bne.n	8013ecc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	015a      	lsls	r2, r3, #5
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	4413      	add	r3, r2
 8013ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ec2:	461a      	mov	r2, r3
 8013ec4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013ec8:	6013      	str	r3, [r2, #0]
 8013eca:	e013      	b.n	8013ef4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	015a      	lsls	r2, r3, #5
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	4413      	add	r3, r2
 8013ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ed8:	461a      	mov	r2, r3
 8013eda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013ede:	6013      	str	r3, [r2, #0]
 8013ee0:	e008      	b.n	8013ef4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	015a      	lsls	r2, r3, #5
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	4413      	add	r3, r2
 8013eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eee:	461a      	mov	r2, r3
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013ef4:	693b      	ldr	r3, [r7, #16]
 8013ef6:	015a      	lsls	r2, r3, #5
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	4413      	add	r3, r2
 8013efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f00:	461a      	mov	r2, r3
 8013f02:	2300      	movs	r3, #0
 8013f04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013f06:	693b      	ldr	r3, [r7, #16]
 8013f08:	015a      	lsls	r2, r3, #5
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	4413      	add	r3, r2
 8013f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f12:	461a      	mov	r2, r3
 8013f14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013f18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013f1a:	693b      	ldr	r3, [r7, #16]
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	613b      	str	r3, [r7, #16]
 8013f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f22:	693a      	ldr	r2, [r7, #16]
 8013f24:	429a      	cmp	r2, r3
 8013f26:	d3b7      	bcc.n	8013e98 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f2e:	691b      	ldr	r3, [r3, #16]
 8013f30:	68fa      	ldr	r2, [r7, #12]
 8013f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013f3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2200      	movs	r2, #0
 8013f40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013f48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d105      	bne.n	8013f5c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	699b      	ldr	r3, [r3, #24]
 8013f54:	f043 0210 	orr.w	r2, r3, #16
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	699a      	ldr	r2, [r3, #24]
 8013f60:	4b0e      	ldr	r3, [pc, #56]	; (8013f9c <USB_DevInit+0x2b4>)
 8013f62:	4313      	orrs	r3, r2
 8013f64:	687a      	ldr	r2, [r7, #4]
 8013f66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d005      	beq.n	8013f7a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	699b      	ldr	r3, [r3, #24]
 8013f72:	f043 0208 	orr.w	r2, r3, #8
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f7c:	2b01      	cmp	r3, #1
 8013f7e:	d105      	bne.n	8013f8c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	699a      	ldr	r2, [r3, #24]
 8013f84:	4b06      	ldr	r3, [pc, #24]	; (8013fa0 <USB_DevInit+0x2b8>)
 8013f86:	4313      	orrs	r3, r2
 8013f88:	687a      	ldr	r2, [r7, #4]
 8013f8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3718      	adds	r7, #24
 8013f92:	46bd      	mov	sp, r7
 8013f94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013f98:	b004      	add	sp, #16
 8013f9a:	4770      	bx	lr
 8013f9c:	803c3800 	.word	0x803c3800
 8013fa0:	40000004 	.word	0x40000004

08013fa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013fa4:	b480      	push	{r7}
 8013fa6:	b085      	sub	sp, #20
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
 8013fac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013fae:	2300      	movs	r3, #0
 8013fb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	3301      	adds	r3, #1
 8013fb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	4a13      	ldr	r2, [pc, #76]	; (8014008 <USB_FlushTxFifo+0x64>)
 8013fbc:	4293      	cmp	r3, r2
 8013fbe:	d901      	bls.n	8013fc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013fc0:	2303      	movs	r3, #3
 8013fc2:	e01b      	b.n	8013ffc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	691b      	ldr	r3, [r3, #16]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	daf2      	bge.n	8013fb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013fcc:	2300      	movs	r3, #0
 8013fce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	019b      	lsls	r3, r3, #6
 8013fd4:	f043 0220 	orr.w	r2, r3, #32
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	3301      	adds	r3, #1
 8013fe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	4a08      	ldr	r2, [pc, #32]	; (8014008 <USB_FlushTxFifo+0x64>)
 8013fe6:	4293      	cmp	r3, r2
 8013fe8:	d901      	bls.n	8013fee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013fea:	2303      	movs	r3, #3
 8013fec:	e006      	b.n	8013ffc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	691b      	ldr	r3, [r3, #16]
 8013ff2:	f003 0320 	and.w	r3, r3, #32
 8013ff6:	2b20      	cmp	r3, #32
 8013ff8:	d0f0      	beq.n	8013fdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013ffa:	2300      	movs	r3, #0
}
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	3714      	adds	r7, #20
 8014000:	46bd      	mov	sp, r7
 8014002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014006:	4770      	bx	lr
 8014008:	00030d40 	.word	0x00030d40

0801400c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801400c:	b480      	push	{r7}
 801400e:	b085      	sub	sp, #20
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014014:	2300      	movs	r3, #0
 8014016:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	3301      	adds	r3, #1
 801401c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	4a11      	ldr	r2, [pc, #68]	; (8014068 <USB_FlushRxFifo+0x5c>)
 8014022:	4293      	cmp	r3, r2
 8014024:	d901      	bls.n	801402a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8014026:	2303      	movs	r3, #3
 8014028:	e018      	b.n	801405c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	691b      	ldr	r3, [r3, #16]
 801402e:	2b00      	cmp	r3, #0
 8014030:	daf2      	bge.n	8014018 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014032:	2300      	movs	r3, #0
 8014034:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	2210      	movs	r2, #16
 801403a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	3301      	adds	r3, #1
 8014040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	4a08      	ldr	r2, [pc, #32]	; (8014068 <USB_FlushRxFifo+0x5c>)
 8014046:	4293      	cmp	r3, r2
 8014048:	d901      	bls.n	801404e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801404a:	2303      	movs	r3, #3
 801404c:	e006      	b.n	801405c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	691b      	ldr	r3, [r3, #16]
 8014052:	f003 0310 	and.w	r3, r3, #16
 8014056:	2b10      	cmp	r3, #16
 8014058:	d0f0      	beq.n	801403c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801405a:	2300      	movs	r3, #0
}
 801405c:	4618      	mov	r0, r3
 801405e:	3714      	adds	r7, #20
 8014060:	46bd      	mov	sp, r7
 8014062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014066:	4770      	bx	lr
 8014068:	00030d40 	.word	0x00030d40

0801406c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801406c:	b480      	push	{r7}
 801406e:	b085      	sub	sp, #20
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
 8014074:	460b      	mov	r3, r1
 8014076:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014082:	681a      	ldr	r2, [r3, #0]
 8014084:	78fb      	ldrb	r3, [r7, #3]
 8014086:	68f9      	ldr	r1, [r7, #12]
 8014088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801408c:	4313      	orrs	r3, r2
 801408e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014090:	2300      	movs	r3, #0
}
 8014092:	4618      	mov	r0, r3
 8014094:	3714      	adds	r7, #20
 8014096:	46bd      	mov	sp, r7
 8014098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409c:	4770      	bx	lr

0801409e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801409e:	b480      	push	{r7}
 80140a0:	b087      	sub	sp, #28
 80140a2:	af00      	add	r7, sp, #0
 80140a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80140aa:	693b      	ldr	r3, [r7, #16]
 80140ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140b0:	689b      	ldr	r3, [r3, #8]
 80140b2:	f003 0306 	and.w	r3, r3, #6
 80140b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d102      	bne.n	80140c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80140be:	2300      	movs	r3, #0
 80140c0:	75fb      	strb	r3, [r7, #23]
 80140c2:	e00a      	b.n	80140da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	2b02      	cmp	r3, #2
 80140c8:	d002      	beq.n	80140d0 <USB_GetDevSpeed+0x32>
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	2b06      	cmp	r3, #6
 80140ce:	d102      	bne.n	80140d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80140d0:	2302      	movs	r3, #2
 80140d2:	75fb      	strb	r3, [r7, #23]
 80140d4:	e001      	b.n	80140da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80140d6:	230f      	movs	r3, #15
 80140d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80140da:	7dfb      	ldrb	r3, [r7, #23]
}
 80140dc:	4618      	mov	r0, r3
 80140de:	371c      	adds	r7, #28
 80140e0:	46bd      	mov	sp, r7
 80140e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e6:	4770      	bx	lr

080140e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80140e8:	b480      	push	{r7}
 80140ea:	b085      	sub	sp, #20
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	781b      	ldrb	r3, [r3, #0]
 80140fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	785b      	ldrb	r3, [r3, #1]
 8014100:	2b01      	cmp	r3, #1
 8014102:	d139      	bne.n	8014178 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801410a:	69da      	ldr	r2, [r3, #28]
 801410c:	683b      	ldr	r3, [r7, #0]
 801410e:	781b      	ldrb	r3, [r3, #0]
 8014110:	f003 030f 	and.w	r3, r3, #15
 8014114:	2101      	movs	r1, #1
 8014116:	fa01 f303 	lsl.w	r3, r1, r3
 801411a:	b29b      	uxth	r3, r3
 801411c:	68f9      	ldr	r1, [r7, #12]
 801411e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014122:	4313      	orrs	r3, r2
 8014124:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014126:	68bb      	ldr	r3, [r7, #8]
 8014128:	015a      	lsls	r2, r3, #5
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	4413      	add	r3, r2
 801412e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014138:	2b00      	cmp	r3, #0
 801413a:	d153      	bne.n	80141e4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801413c:	68bb      	ldr	r3, [r7, #8]
 801413e:	015a      	lsls	r2, r3, #5
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	4413      	add	r3, r2
 8014144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014148:	681a      	ldr	r2, [r3, #0]
 801414a:	683b      	ldr	r3, [r7, #0]
 801414c:	689b      	ldr	r3, [r3, #8]
 801414e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	791b      	ldrb	r3, [r3, #4]
 8014156:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014158:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801415a:	68bb      	ldr	r3, [r7, #8]
 801415c:	059b      	lsls	r3, r3, #22
 801415e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014160:	431a      	orrs	r2, r3
 8014162:	68bb      	ldr	r3, [r7, #8]
 8014164:	0159      	lsls	r1, r3, #5
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	440b      	add	r3, r1
 801416a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801416e:	4619      	mov	r1, r3
 8014170:	4b20      	ldr	r3, [pc, #128]	; (80141f4 <USB_ActivateEndpoint+0x10c>)
 8014172:	4313      	orrs	r3, r2
 8014174:	600b      	str	r3, [r1, #0]
 8014176:	e035      	b.n	80141e4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801417e:	69da      	ldr	r2, [r3, #28]
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	781b      	ldrb	r3, [r3, #0]
 8014184:	f003 030f 	and.w	r3, r3, #15
 8014188:	2101      	movs	r1, #1
 801418a:	fa01 f303 	lsl.w	r3, r1, r3
 801418e:	041b      	lsls	r3, r3, #16
 8014190:	68f9      	ldr	r1, [r7, #12]
 8014192:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014196:	4313      	orrs	r3, r2
 8014198:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	015a      	lsls	r2, r3, #5
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	4413      	add	r3, r2
 80141a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d119      	bne.n	80141e4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	015a      	lsls	r2, r3, #5
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	4413      	add	r3, r2
 80141b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141bc:	681a      	ldr	r2, [r3, #0]
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	689b      	ldr	r3, [r3, #8]
 80141c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80141c6:	683b      	ldr	r3, [r7, #0]
 80141c8:	791b      	ldrb	r3, [r3, #4]
 80141ca:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80141cc:	430b      	orrs	r3, r1
 80141ce:	431a      	orrs	r2, r3
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	0159      	lsls	r1, r3, #5
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	440b      	add	r3, r1
 80141d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141dc:	4619      	mov	r1, r3
 80141de:	4b05      	ldr	r3, [pc, #20]	; (80141f4 <USB_ActivateEndpoint+0x10c>)
 80141e0:	4313      	orrs	r3, r2
 80141e2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80141e4:	2300      	movs	r3, #0
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	3714      	adds	r7, #20
 80141ea:	46bd      	mov	sp, r7
 80141ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f0:	4770      	bx	lr
 80141f2:	bf00      	nop
 80141f4:	10008000 	.word	0x10008000

080141f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80141f8:	b480      	push	{r7}
 80141fa:	b085      	sub	sp, #20
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
 8014200:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	781b      	ldrb	r3, [r3, #0]
 801420a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801420c:	683b      	ldr	r3, [r7, #0]
 801420e:	785b      	ldrb	r3, [r3, #1]
 8014210:	2b01      	cmp	r3, #1
 8014212:	d161      	bne.n	80142d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	015a      	lsls	r2, r3, #5
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	4413      	add	r3, r2
 801421c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801422a:	d11f      	bne.n	801426c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801422c:	68bb      	ldr	r3, [r7, #8]
 801422e:	015a      	lsls	r2, r3, #5
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	4413      	add	r3, r2
 8014234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	68ba      	ldr	r2, [r7, #8]
 801423c:	0151      	lsls	r1, r2, #5
 801423e:	68fa      	ldr	r2, [r7, #12]
 8014240:	440a      	add	r2, r1
 8014242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014246:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801424a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801424c:	68bb      	ldr	r3, [r7, #8]
 801424e:	015a      	lsls	r2, r3, #5
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	4413      	add	r3, r2
 8014254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	68ba      	ldr	r2, [r7, #8]
 801425c:	0151      	lsls	r1, r2, #5
 801425e:	68fa      	ldr	r2, [r7, #12]
 8014260:	440a      	add	r2, r1
 8014262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014266:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801426a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014274:	683b      	ldr	r3, [r7, #0]
 8014276:	781b      	ldrb	r3, [r3, #0]
 8014278:	f003 030f 	and.w	r3, r3, #15
 801427c:	2101      	movs	r1, #1
 801427e:	fa01 f303 	lsl.w	r3, r1, r3
 8014282:	b29b      	uxth	r3, r3
 8014284:	43db      	mvns	r3, r3
 8014286:	68f9      	ldr	r1, [r7, #12]
 8014288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801428c:	4013      	ands	r3, r2
 801428e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014296:	69da      	ldr	r2, [r3, #28]
 8014298:	683b      	ldr	r3, [r7, #0]
 801429a:	781b      	ldrb	r3, [r3, #0]
 801429c:	f003 030f 	and.w	r3, r3, #15
 80142a0:	2101      	movs	r1, #1
 80142a2:	fa01 f303 	lsl.w	r3, r1, r3
 80142a6:	b29b      	uxth	r3, r3
 80142a8:	43db      	mvns	r3, r3
 80142aa:	68f9      	ldr	r1, [r7, #12]
 80142ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80142b0:	4013      	ands	r3, r2
 80142b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80142b4:	68bb      	ldr	r3, [r7, #8]
 80142b6:	015a      	lsls	r2, r3, #5
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	4413      	add	r3, r2
 80142bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142c0:	681a      	ldr	r2, [r3, #0]
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	0159      	lsls	r1, r3, #5
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	440b      	add	r3, r1
 80142ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142ce:	4619      	mov	r1, r3
 80142d0:	4b35      	ldr	r3, [pc, #212]	; (80143a8 <USB_DeactivateEndpoint+0x1b0>)
 80142d2:	4013      	ands	r3, r2
 80142d4:	600b      	str	r3, [r1, #0]
 80142d6:	e060      	b.n	801439a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	015a      	lsls	r2, r3, #5
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	4413      	add	r3, r2
 80142e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80142ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80142ee:	d11f      	bne.n	8014330 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80142f0:	68bb      	ldr	r3, [r7, #8]
 80142f2:	015a      	lsls	r2, r3, #5
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	4413      	add	r3, r2
 80142f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	68ba      	ldr	r2, [r7, #8]
 8014300:	0151      	lsls	r1, r2, #5
 8014302:	68fa      	ldr	r2, [r7, #12]
 8014304:	440a      	add	r2, r1
 8014306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801430a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801430e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	015a      	lsls	r2, r3, #5
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	4413      	add	r3, r2
 8014318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	68ba      	ldr	r2, [r7, #8]
 8014320:	0151      	lsls	r1, r2, #5
 8014322:	68fa      	ldr	r2, [r7, #12]
 8014324:	440a      	add	r2, r1
 8014326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801432a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801432e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014338:	683b      	ldr	r3, [r7, #0]
 801433a:	781b      	ldrb	r3, [r3, #0]
 801433c:	f003 030f 	and.w	r3, r3, #15
 8014340:	2101      	movs	r1, #1
 8014342:	fa01 f303 	lsl.w	r3, r1, r3
 8014346:	041b      	lsls	r3, r3, #16
 8014348:	43db      	mvns	r3, r3
 801434a:	68f9      	ldr	r1, [r7, #12]
 801434c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014350:	4013      	ands	r3, r2
 8014352:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801435a:	69da      	ldr	r2, [r3, #28]
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	781b      	ldrb	r3, [r3, #0]
 8014360:	f003 030f 	and.w	r3, r3, #15
 8014364:	2101      	movs	r1, #1
 8014366:	fa01 f303 	lsl.w	r3, r1, r3
 801436a:	041b      	lsls	r3, r3, #16
 801436c:	43db      	mvns	r3, r3
 801436e:	68f9      	ldr	r1, [r7, #12]
 8014370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014374:	4013      	ands	r3, r2
 8014376:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	015a      	lsls	r2, r3, #5
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	4413      	add	r3, r2
 8014380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014384:	681a      	ldr	r2, [r3, #0]
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	0159      	lsls	r1, r3, #5
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	440b      	add	r3, r1
 801438e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014392:	4619      	mov	r1, r3
 8014394:	4b05      	ldr	r3, [pc, #20]	; (80143ac <USB_DeactivateEndpoint+0x1b4>)
 8014396:	4013      	ands	r3, r2
 8014398:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801439a:	2300      	movs	r3, #0
}
 801439c:	4618      	mov	r0, r3
 801439e:	3714      	adds	r7, #20
 80143a0:	46bd      	mov	sp, r7
 80143a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a6:	4770      	bx	lr
 80143a8:	ec337800 	.word	0xec337800
 80143ac:	eff37800 	.word	0xeff37800

080143b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b08a      	sub	sp, #40	; 0x28
 80143b4:	af02      	add	r7, sp, #8
 80143b6:	60f8      	str	r0, [r7, #12]
 80143b8:	60b9      	str	r1, [r7, #8]
 80143ba:	4613      	mov	r3, r2
 80143bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80143c2:	68bb      	ldr	r3, [r7, #8]
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	785b      	ldrb	r3, [r3, #1]
 80143cc:	2b01      	cmp	r3, #1
 80143ce:	f040 8181 	bne.w	80146d4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	691b      	ldr	r3, [r3, #16]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d132      	bne.n	8014440 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80143da:	69bb      	ldr	r3, [r7, #24]
 80143dc:	015a      	lsls	r2, r3, #5
 80143de:	69fb      	ldr	r3, [r7, #28]
 80143e0:	4413      	add	r3, r2
 80143e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143e6:	691a      	ldr	r2, [r3, #16]
 80143e8:	69bb      	ldr	r3, [r7, #24]
 80143ea:	0159      	lsls	r1, r3, #5
 80143ec:	69fb      	ldr	r3, [r7, #28]
 80143ee:	440b      	add	r3, r1
 80143f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143f4:	4619      	mov	r1, r3
 80143f6:	4ba5      	ldr	r3, [pc, #660]	; (801468c <USB_EPStartXfer+0x2dc>)
 80143f8:	4013      	ands	r3, r2
 80143fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80143fc:	69bb      	ldr	r3, [r7, #24]
 80143fe:	015a      	lsls	r2, r3, #5
 8014400:	69fb      	ldr	r3, [r7, #28]
 8014402:	4413      	add	r3, r2
 8014404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014408:	691b      	ldr	r3, [r3, #16]
 801440a:	69ba      	ldr	r2, [r7, #24]
 801440c:	0151      	lsls	r1, r2, #5
 801440e:	69fa      	ldr	r2, [r7, #28]
 8014410:	440a      	add	r2, r1
 8014412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014416:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801441a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801441c:	69bb      	ldr	r3, [r7, #24]
 801441e:	015a      	lsls	r2, r3, #5
 8014420:	69fb      	ldr	r3, [r7, #28]
 8014422:	4413      	add	r3, r2
 8014424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014428:	691a      	ldr	r2, [r3, #16]
 801442a:	69bb      	ldr	r3, [r7, #24]
 801442c:	0159      	lsls	r1, r3, #5
 801442e:	69fb      	ldr	r3, [r7, #28]
 8014430:	440b      	add	r3, r1
 8014432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014436:	4619      	mov	r1, r3
 8014438:	4b95      	ldr	r3, [pc, #596]	; (8014690 <USB_EPStartXfer+0x2e0>)
 801443a:	4013      	ands	r3, r2
 801443c:	610b      	str	r3, [r1, #16]
 801443e:	e092      	b.n	8014566 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014440:	69bb      	ldr	r3, [r7, #24]
 8014442:	015a      	lsls	r2, r3, #5
 8014444:	69fb      	ldr	r3, [r7, #28]
 8014446:	4413      	add	r3, r2
 8014448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801444c:	691a      	ldr	r2, [r3, #16]
 801444e:	69bb      	ldr	r3, [r7, #24]
 8014450:	0159      	lsls	r1, r3, #5
 8014452:	69fb      	ldr	r3, [r7, #28]
 8014454:	440b      	add	r3, r1
 8014456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801445a:	4619      	mov	r1, r3
 801445c:	4b8c      	ldr	r3, [pc, #560]	; (8014690 <USB_EPStartXfer+0x2e0>)
 801445e:	4013      	ands	r3, r2
 8014460:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014462:	69bb      	ldr	r3, [r7, #24]
 8014464:	015a      	lsls	r2, r3, #5
 8014466:	69fb      	ldr	r3, [r7, #28]
 8014468:	4413      	add	r3, r2
 801446a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801446e:	691a      	ldr	r2, [r3, #16]
 8014470:	69bb      	ldr	r3, [r7, #24]
 8014472:	0159      	lsls	r1, r3, #5
 8014474:	69fb      	ldr	r3, [r7, #28]
 8014476:	440b      	add	r3, r1
 8014478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801447c:	4619      	mov	r1, r3
 801447e:	4b83      	ldr	r3, [pc, #524]	; (801468c <USB_EPStartXfer+0x2dc>)
 8014480:	4013      	ands	r3, r2
 8014482:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014484:	69bb      	ldr	r3, [r7, #24]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d11a      	bne.n	80144c0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	691a      	ldr	r2, [r3, #16]
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	689b      	ldr	r3, [r3, #8]
 8014492:	429a      	cmp	r2, r3
 8014494:	d903      	bls.n	801449e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	689a      	ldr	r2, [r3, #8]
 801449a:	68bb      	ldr	r3, [r7, #8]
 801449c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801449e:	69bb      	ldr	r3, [r7, #24]
 80144a0:	015a      	lsls	r2, r3, #5
 80144a2:	69fb      	ldr	r3, [r7, #28]
 80144a4:	4413      	add	r3, r2
 80144a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144aa:	691b      	ldr	r3, [r3, #16]
 80144ac:	69ba      	ldr	r2, [r7, #24]
 80144ae:	0151      	lsls	r1, r2, #5
 80144b0:	69fa      	ldr	r2, [r7, #28]
 80144b2:	440a      	add	r2, r1
 80144b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80144bc:	6113      	str	r3, [r2, #16]
 80144be:	e01b      	b.n	80144f8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80144c0:	69bb      	ldr	r3, [r7, #24]
 80144c2:	015a      	lsls	r2, r3, #5
 80144c4:	69fb      	ldr	r3, [r7, #28]
 80144c6:	4413      	add	r3, r2
 80144c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144cc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80144ce:	68bb      	ldr	r3, [r7, #8]
 80144d0:	6919      	ldr	r1, [r3, #16]
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	689b      	ldr	r3, [r3, #8]
 80144d6:	440b      	add	r3, r1
 80144d8:	1e59      	subs	r1, r3, #1
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	689b      	ldr	r3, [r3, #8]
 80144de:	fbb1 f3f3 	udiv	r3, r1, r3
 80144e2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80144e4:	4b6b      	ldr	r3, [pc, #428]	; (8014694 <USB_EPStartXfer+0x2e4>)
 80144e6:	400b      	ands	r3, r1
 80144e8:	69b9      	ldr	r1, [r7, #24]
 80144ea:	0148      	lsls	r0, r1, #5
 80144ec:	69f9      	ldr	r1, [r7, #28]
 80144ee:	4401      	add	r1, r0
 80144f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80144f4:	4313      	orrs	r3, r2
 80144f6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80144f8:	69bb      	ldr	r3, [r7, #24]
 80144fa:	015a      	lsls	r2, r3, #5
 80144fc:	69fb      	ldr	r3, [r7, #28]
 80144fe:	4413      	add	r3, r2
 8014500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014504:	691a      	ldr	r2, [r3, #16]
 8014506:	68bb      	ldr	r3, [r7, #8]
 8014508:	691b      	ldr	r3, [r3, #16]
 801450a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801450e:	69b9      	ldr	r1, [r7, #24]
 8014510:	0148      	lsls	r0, r1, #5
 8014512:	69f9      	ldr	r1, [r7, #28]
 8014514:	4401      	add	r1, r0
 8014516:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801451a:	4313      	orrs	r3, r2
 801451c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	791b      	ldrb	r3, [r3, #4]
 8014522:	2b01      	cmp	r3, #1
 8014524:	d11f      	bne.n	8014566 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014526:	69bb      	ldr	r3, [r7, #24]
 8014528:	015a      	lsls	r2, r3, #5
 801452a:	69fb      	ldr	r3, [r7, #28]
 801452c:	4413      	add	r3, r2
 801452e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014532:	691b      	ldr	r3, [r3, #16]
 8014534:	69ba      	ldr	r2, [r7, #24]
 8014536:	0151      	lsls	r1, r2, #5
 8014538:	69fa      	ldr	r2, [r7, #28]
 801453a:	440a      	add	r2, r1
 801453c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014540:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014544:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014546:	69bb      	ldr	r3, [r7, #24]
 8014548:	015a      	lsls	r2, r3, #5
 801454a:	69fb      	ldr	r3, [r7, #28]
 801454c:	4413      	add	r3, r2
 801454e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014552:	691b      	ldr	r3, [r3, #16]
 8014554:	69ba      	ldr	r2, [r7, #24]
 8014556:	0151      	lsls	r1, r2, #5
 8014558:	69fa      	ldr	r2, [r7, #28]
 801455a:	440a      	add	r2, r1
 801455c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014560:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014564:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8014566:	79fb      	ldrb	r3, [r7, #7]
 8014568:	2b01      	cmp	r3, #1
 801456a:	d14b      	bne.n	8014604 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	69db      	ldr	r3, [r3, #28]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d009      	beq.n	8014588 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014574:	69bb      	ldr	r3, [r7, #24]
 8014576:	015a      	lsls	r2, r3, #5
 8014578:	69fb      	ldr	r3, [r7, #28]
 801457a:	4413      	add	r3, r2
 801457c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014580:	461a      	mov	r2, r3
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	69db      	ldr	r3, [r3, #28]
 8014586:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	791b      	ldrb	r3, [r3, #4]
 801458c:	2b01      	cmp	r3, #1
 801458e:	d128      	bne.n	80145e2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014590:	69fb      	ldr	r3, [r7, #28]
 8014592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014596:	689b      	ldr	r3, [r3, #8]
 8014598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801459c:	2b00      	cmp	r3, #0
 801459e:	d110      	bne.n	80145c2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80145a0:	69bb      	ldr	r3, [r7, #24]
 80145a2:	015a      	lsls	r2, r3, #5
 80145a4:	69fb      	ldr	r3, [r7, #28]
 80145a6:	4413      	add	r3, r2
 80145a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	69ba      	ldr	r2, [r7, #24]
 80145b0:	0151      	lsls	r1, r2, #5
 80145b2:	69fa      	ldr	r2, [r7, #28]
 80145b4:	440a      	add	r2, r1
 80145b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80145be:	6013      	str	r3, [r2, #0]
 80145c0:	e00f      	b.n	80145e2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80145c2:	69bb      	ldr	r3, [r7, #24]
 80145c4:	015a      	lsls	r2, r3, #5
 80145c6:	69fb      	ldr	r3, [r7, #28]
 80145c8:	4413      	add	r3, r2
 80145ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	69ba      	ldr	r2, [r7, #24]
 80145d2:	0151      	lsls	r1, r2, #5
 80145d4:	69fa      	ldr	r2, [r7, #28]
 80145d6:	440a      	add	r2, r1
 80145d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80145e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80145e2:	69bb      	ldr	r3, [r7, #24]
 80145e4:	015a      	lsls	r2, r3, #5
 80145e6:	69fb      	ldr	r3, [r7, #28]
 80145e8:	4413      	add	r3, r2
 80145ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	69ba      	ldr	r2, [r7, #24]
 80145f2:	0151      	lsls	r1, r2, #5
 80145f4:	69fa      	ldr	r2, [r7, #28]
 80145f6:	440a      	add	r2, r1
 80145f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014600:	6013      	str	r3, [r2, #0]
 8014602:	e16a      	b.n	80148da <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014604:	69bb      	ldr	r3, [r7, #24]
 8014606:	015a      	lsls	r2, r3, #5
 8014608:	69fb      	ldr	r3, [r7, #28]
 801460a:	4413      	add	r3, r2
 801460c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	69ba      	ldr	r2, [r7, #24]
 8014614:	0151      	lsls	r1, r2, #5
 8014616:	69fa      	ldr	r2, [r7, #28]
 8014618:	440a      	add	r2, r1
 801461a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801461e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014622:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	791b      	ldrb	r3, [r3, #4]
 8014628:	2b01      	cmp	r3, #1
 801462a:	d015      	beq.n	8014658 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801462c:	68bb      	ldr	r3, [r7, #8]
 801462e:	691b      	ldr	r3, [r3, #16]
 8014630:	2b00      	cmp	r3, #0
 8014632:	f000 8152 	beq.w	80148da <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014636:	69fb      	ldr	r3, [r7, #28]
 8014638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801463c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	781b      	ldrb	r3, [r3, #0]
 8014642:	f003 030f 	and.w	r3, r3, #15
 8014646:	2101      	movs	r1, #1
 8014648:	fa01 f303 	lsl.w	r3, r1, r3
 801464c:	69f9      	ldr	r1, [r7, #28]
 801464e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014652:	4313      	orrs	r3, r2
 8014654:	634b      	str	r3, [r1, #52]	; 0x34
 8014656:	e140      	b.n	80148da <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014658:	69fb      	ldr	r3, [r7, #28]
 801465a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801465e:	689b      	ldr	r3, [r3, #8]
 8014660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014664:	2b00      	cmp	r3, #0
 8014666:	d117      	bne.n	8014698 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014668:	69bb      	ldr	r3, [r7, #24]
 801466a:	015a      	lsls	r2, r3, #5
 801466c:	69fb      	ldr	r3, [r7, #28]
 801466e:	4413      	add	r3, r2
 8014670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	69ba      	ldr	r2, [r7, #24]
 8014678:	0151      	lsls	r1, r2, #5
 801467a:	69fa      	ldr	r2, [r7, #28]
 801467c:	440a      	add	r2, r1
 801467e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014682:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014686:	6013      	str	r3, [r2, #0]
 8014688:	e016      	b.n	80146b8 <USB_EPStartXfer+0x308>
 801468a:	bf00      	nop
 801468c:	e007ffff 	.word	0xe007ffff
 8014690:	fff80000 	.word	0xfff80000
 8014694:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014698:	69bb      	ldr	r3, [r7, #24]
 801469a:	015a      	lsls	r2, r3, #5
 801469c:	69fb      	ldr	r3, [r7, #28]
 801469e:	4413      	add	r3, r2
 80146a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	69ba      	ldr	r2, [r7, #24]
 80146a8:	0151      	lsls	r1, r2, #5
 80146aa:	69fa      	ldr	r2, [r7, #28]
 80146ac:	440a      	add	r2, r1
 80146ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80146b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80146b6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	68d9      	ldr	r1, [r3, #12]
 80146bc:	68bb      	ldr	r3, [r7, #8]
 80146be:	781a      	ldrb	r2, [r3, #0]
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	691b      	ldr	r3, [r3, #16]
 80146c4:	b298      	uxth	r0, r3
 80146c6:	79fb      	ldrb	r3, [r7, #7]
 80146c8:	9300      	str	r3, [sp, #0]
 80146ca:	4603      	mov	r3, r0
 80146cc:	68f8      	ldr	r0, [r7, #12]
 80146ce:	f000 f9b9 	bl	8014a44 <USB_WritePacket>
 80146d2:	e102      	b.n	80148da <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80146d4:	69bb      	ldr	r3, [r7, #24]
 80146d6:	015a      	lsls	r2, r3, #5
 80146d8:	69fb      	ldr	r3, [r7, #28]
 80146da:	4413      	add	r3, r2
 80146dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146e0:	691a      	ldr	r2, [r3, #16]
 80146e2:	69bb      	ldr	r3, [r7, #24]
 80146e4:	0159      	lsls	r1, r3, #5
 80146e6:	69fb      	ldr	r3, [r7, #28]
 80146e8:	440b      	add	r3, r1
 80146ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146ee:	4619      	mov	r1, r3
 80146f0:	4b7c      	ldr	r3, [pc, #496]	; (80148e4 <USB_EPStartXfer+0x534>)
 80146f2:	4013      	ands	r3, r2
 80146f4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80146f6:	69bb      	ldr	r3, [r7, #24]
 80146f8:	015a      	lsls	r2, r3, #5
 80146fa:	69fb      	ldr	r3, [r7, #28]
 80146fc:	4413      	add	r3, r2
 80146fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014702:	691a      	ldr	r2, [r3, #16]
 8014704:	69bb      	ldr	r3, [r7, #24]
 8014706:	0159      	lsls	r1, r3, #5
 8014708:	69fb      	ldr	r3, [r7, #28]
 801470a:	440b      	add	r3, r1
 801470c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014710:	4619      	mov	r1, r3
 8014712:	4b75      	ldr	r3, [pc, #468]	; (80148e8 <USB_EPStartXfer+0x538>)
 8014714:	4013      	ands	r3, r2
 8014716:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014718:	69bb      	ldr	r3, [r7, #24]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d12f      	bne.n	801477e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	691b      	ldr	r3, [r3, #16]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d003      	beq.n	801472e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8014726:	68bb      	ldr	r3, [r7, #8]
 8014728:	689a      	ldr	r2, [r3, #8]
 801472a:	68bb      	ldr	r3, [r7, #8]
 801472c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801472e:	68bb      	ldr	r3, [r7, #8]
 8014730:	689a      	ldr	r2, [r3, #8]
 8014732:	68bb      	ldr	r3, [r7, #8]
 8014734:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014736:	69bb      	ldr	r3, [r7, #24]
 8014738:	015a      	lsls	r2, r3, #5
 801473a:	69fb      	ldr	r3, [r7, #28]
 801473c:	4413      	add	r3, r2
 801473e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014742:	691a      	ldr	r2, [r3, #16]
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	6a1b      	ldr	r3, [r3, #32]
 8014748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801474c:	69b9      	ldr	r1, [r7, #24]
 801474e:	0148      	lsls	r0, r1, #5
 8014750:	69f9      	ldr	r1, [r7, #28]
 8014752:	4401      	add	r1, r0
 8014754:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014758:	4313      	orrs	r3, r2
 801475a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801475c:	69bb      	ldr	r3, [r7, #24]
 801475e:	015a      	lsls	r2, r3, #5
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	4413      	add	r3, r2
 8014764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014768:	691b      	ldr	r3, [r3, #16]
 801476a:	69ba      	ldr	r2, [r7, #24]
 801476c:	0151      	lsls	r1, r2, #5
 801476e:	69fa      	ldr	r2, [r7, #28]
 8014770:	440a      	add	r2, r1
 8014772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014776:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801477a:	6113      	str	r3, [r2, #16]
 801477c:	e05f      	b.n	801483e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	691b      	ldr	r3, [r3, #16]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d123      	bne.n	80147ce <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014786:	69bb      	ldr	r3, [r7, #24]
 8014788:	015a      	lsls	r2, r3, #5
 801478a:	69fb      	ldr	r3, [r7, #28]
 801478c:	4413      	add	r3, r2
 801478e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014792:	691a      	ldr	r2, [r3, #16]
 8014794:	68bb      	ldr	r3, [r7, #8]
 8014796:	689b      	ldr	r3, [r3, #8]
 8014798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801479c:	69b9      	ldr	r1, [r7, #24]
 801479e:	0148      	lsls	r0, r1, #5
 80147a0:	69f9      	ldr	r1, [r7, #28]
 80147a2:	4401      	add	r1, r0
 80147a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80147a8:	4313      	orrs	r3, r2
 80147aa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80147ac:	69bb      	ldr	r3, [r7, #24]
 80147ae:	015a      	lsls	r2, r3, #5
 80147b0:	69fb      	ldr	r3, [r7, #28]
 80147b2:	4413      	add	r3, r2
 80147b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147b8:	691b      	ldr	r3, [r3, #16]
 80147ba:	69ba      	ldr	r2, [r7, #24]
 80147bc:	0151      	lsls	r1, r2, #5
 80147be:	69fa      	ldr	r2, [r7, #28]
 80147c0:	440a      	add	r2, r1
 80147c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80147c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80147ca:	6113      	str	r3, [r2, #16]
 80147cc:	e037      	b.n	801483e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	691a      	ldr	r2, [r3, #16]
 80147d2:	68bb      	ldr	r3, [r7, #8]
 80147d4:	689b      	ldr	r3, [r3, #8]
 80147d6:	4413      	add	r3, r2
 80147d8:	1e5a      	subs	r2, r3, #1
 80147da:	68bb      	ldr	r3, [r7, #8]
 80147dc:	689b      	ldr	r3, [r3, #8]
 80147de:	fbb2 f3f3 	udiv	r3, r2, r3
 80147e2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80147e4:	68bb      	ldr	r3, [r7, #8]
 80147e6:	689b      	ldr	r3, [r3, #8]
 80147e8:	8afa      	ldrh	r2, [r7, #22]
 80147ea:	fb03 f202 	mul.w	r2, r3, r2
 80147ee:	68bb      	ldr	r3, [r7, #8]
 80147f0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80147f2:	69bb      	ldr	r3, [r7, #24]
 80147f4:	015a      	lsls	r2, r3, #5
 80147f6:	69fb      	ldr	r3, [r7, #28]
 80147f8:	4413      	add	r3, r2
 80147fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147fe:	691a      	ldr	r2, [r3, #16]
 8014800:	8afb      	ldrh	r3, [r7, #22]
 8014802:	04d9      	lsls	r1, r3, #19
 8014804:	4b39      	ldr	r3, [pc, #228]	; (80148ec <USB_EPStartXfer+0x53c>)
 8014806:	400b      	ands	r3, r1
 8014808:	69b9      	ldr	r1, [r7, #24]
 801480a:	0148      	lsls	r0, r1, #5
 801480c:	69f9      	ldr	r1, [r7, #28]
 801480e:	4401      	add	r1, r0
 8014810:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014814:	4313      	orrs	r3, r2
 8014816:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014818:	69bb      	ldr	r3, [r7, #24]
 801481a:	015a      	lsls	r2, r3, #5
 801481c:	69fb      	ldr	r3, [r7, #28]
 801481e:	4413      	add	r3, r2
 8014820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014824:	691a      	ldr	r2, [r3, #16]
 8014826:	68bb      	ldr	r3, [r7, #8]
 8014828:	6a1b      	ldr	r3, [r3, #32]
 801482a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801482e:	69b9      	ldr	r1, [r7, #24]
 8014830:	0148      	lsls	r0, r1, #5
 8014832:	69f9      	ldr	r1, [r7, #28]
 8014834:	4401      	add	r1, r0
 8014836:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801483a:	4313      	orrs	r3, r2
 801483c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801483e:	79fb      	ldrb	r3, [r7, #7]
 8014840:	2b01      	cmp	r3, #1
 8014842:	d10d      	bne.n	8014860 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	68db      	ldr	r3, [r3, #12]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d009      	beq.n	8014860 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801484c:	68bb      	ldr	r3, [r7, #8]
 801484e:	68d9      	ldr	r1, [r3, #12]
 8014850:	69bb      	ldr	r3, [r7, #24]
 8014852:	015a      	lsls	r2, r3, #5
 8014854:	69fb      	ldr	r3, [r7, #28]
 8014856:	4413      	add	r3, r2
 8014858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801485c:	460a      	mov	r2, r1
 801485e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014860:	68bb      	ldr	r3, [r7, #8]
 8014862:	791b      	ldrb	r3, [r3, #4]
 8014864:	2b01      	cmp	r3, #1
 8014866:	d128      	bne.n	80148ba <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014868:	69fb      	ldr	r3, [r7, #28]
 801486a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801486e:	689b      	ldr	r3, [r3, #8]
 8014870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014874:	2b00      	cmp	r3, #0
 8014876:	d110      	bne.n	801489a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014878:	69bb      	ldr	r3, [r7, #24]
 801487a:	015a      	lsls	r2, r3, #5
 801487c:	69fb      	ldr	r3, [r7, #28]
 801487e:	4413      	add	r3, r2
 8014880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	69ba      	ldr	r2, [r7, #24]
 8014888:	0151      	lsls	r1, r2, #5
 801488a:	69fa      	ldr	r2, [r7, #28]
 801488c:	440a      	add	r2, r1
 801488e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014892:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014896:	6013      	str	r3, [r2, #0]
 8014898:	e00f      	b.n	80148ba <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801489a:	69bb      	ldr	r3, [r7, #24]
 801489c:	015a      	lsls	r2, r3, #5
 801489e:	69fb      	ldr	r3, [r7, #28]
 80148a0:	4413      	add	r3, r2
 80148a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	69ba      	ldr	r2, [r7, #24]
 80148aa:	0151      	lsls	r1, r2, #5
 80148ac:	69fa      	ldr	r2, [r7, #28]
 80148ae:	440a      	add	r2, r1
 80148b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80148b8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80148ba:	69bb      	ldr	r3, [r7, #24]
 80148bc:	015a      	lsls	r2, r3, #5
 80148be:	69fb      	ldr	r3, [r7, #28]
 80148c0:	4413      	add	r3, r2
 80148c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	69ba      	ldr	r2, [r7, #24]
 80148ca:	0151      	lsls	r1, r2, #5
 80148cc:	69fa      	ldr	r2, [r7, #28]
 80148ce:	440a      	add	r2, r1
 80148d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80148d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80148da:	2300      	movs	r3, #0
}
 80148dc:	4618      	mov	r0, r3
 80148de:	3720      	adds	r7, #32
 80148e0:	46bd      	mov	sp, r7
 80148e2:	bd80      	pop	{r7, pc}
 80148e4:	fff80000 	.word	0xfff80000
 80148e8:	e007ffff 	.word	0xe007ffff
 80148ec:	1ff80000 	.word	0x1ff80000

080148f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80148f0:	b480      	push	{r7}
 80148f2:	b087      	sub	sp, #28
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
 80148f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80148fa:	2300      	movs	r3, #0
 80148fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80148fe:	2300      	movs	r3, #0
 8014900:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	785b      	ldrb	r3, [r3, #1]
 801490a:	2b01      	cmp	r3, #1
 801490c:	d14a      	bne.n	80149a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	781b      	ldrb	r3, [r3, #0]
 8014912:	015a      	lsls	r2, r3, #5
 8014914:	693b      	ldr	r3, [r7, #16]
 8014916:	4413      	add	r3, r2
 8014918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014926:	f040 8086 	bne.w	8014a36 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	781b      	ldrb	r3, [r3, #0]
 801492e:	015a      	lsls	r2, r3, #5
 8014930:	693b      	ldr	r3, [r7, #16]
 8014932:	4413      	add	r3, r2
 8014934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	683a      	ldr	r2, [r7, #0]
 801493c:	7812      	ldrb	r2, [r2, #0]
 801493e:	0151      	lsls	r1, r2, #5
 8014940:	693a      	ldr	r2, [r7, #16]
 8014942:	440a      	add	r2, r1
 8014944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014948:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801494c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	781b      	ldrb	r3, [r3, #0]
 8014952:	015a      	lsls	r2, r3, #5
 8014954:	693b      	ldr	r3, [r7, #16]
 8014956:	4413      	add	r3, r2
 8014958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	683a      	ldr	r2, [r7, #0]
 8014960:	7812      	ldrb	r2, [r2, #0]
 8014962:	0151      	lsls	r1, r2, #5
 8014964:	693a      	ldr	r2, [r7, #16]
 8014966:	440a      	add	r2, r1
 8014968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801496c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014970:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	3301      	adds	r3, #1
 8014976:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	f242 7210 	movw	r2, #10000	; 0x2710
 801497e:	4293      	cmp	r3, r2
 8014980:	d902      	bls.n	8014988 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014982:	2301      	movs	r3, #1
 8014984:	75fb      	strb	r3, [r7, #23]
          break;
 8014986:	e056      	b.n	8014a36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014988:	683b      	ldr	r3, [r7, #0]
 801498a:	781b      	ldrb	r3, [r3, #0]
 801498c:	015a      	lsls	r2, r3, #5
 801498e:	693b      	ldr	r3, [r7, #16]
 8014990:	4413      	add	r3, r2
 8014992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801499c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80149a0:	d0e7      	beq.n	8014972 <USB_EPStopXfer+0x82>
 80149a2:	e048      	b.n	8014a36 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80149a4:	683b      	ldr	r3, [r7, #0]
 80149a6:	781b      	ldrb	r3, [r3, #0]
 80149a8:	015a      	lsls	r2, r3, #5
 80149aa:	693b      	ldr	r3, [r7, #16]
 80149ac:	4413      	add	r3, r2
 80149ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80149b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80149bc:	d13b      	bne.n	8014a36 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80149be:	683b      	ldr	r3, [r7, #0]
 80149c0:	781b      	ldrb	r3, [r3, #0]
 80149c2:	015a      	lsls	r2, r3, #5
 80149c4:	693b      	ldr	r3, [r7, #16]
 80149c6:	4413      	add	r3, r2
 80149c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	683a      	ldr	r2, [r7, #0]
 80149d0:	7812      	ldrb	r2, [r2, #0]
 80149d2:	0151      	lsls	r1, r2, #5
 80149d4:	693a      	ldr	r2, [r7, #16]
 80149d6:	440a      	add	r2, r1
 80149d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80149dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80149e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80149e2:	683b      	ldr	r3, [r7, #0]
 80149e4:	781b      	ldrb	r3, [r3, #0]
 80149e6:	015a      	lsls	r2, r3, #5
 80149e8:	693b      	ldr	r3, [r7, #16]
 80149ea:	4413      	add	r3, r2
 80149ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	683a      	ldr	r2, [r7, #0]
 80149f4:	7812      	ldrb	r2, [r2, #0]
 80149f6:	0151      	lsls	r1, r2, #5
 80149f8:	693a      	ldr	r2, [r7, #16]
 80149fa:	440a      	add	r2, r1
 80149fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014a00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014a04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	3301      	adds	r3, #1
 8014a0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8014a12:	4293      	cmp	r3, r2
 8014a14:	d902      	bls.n	8014a1c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014a16:	2301      	movs	r3, #1
 8014a18:	75fb      	strb	r3, [r7, #23]
          break;
 8014a1a:	e00c      	b.n	8014a36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	781b      	ldrb	r3, [r3, #0]
 8014a20:	015a      	lsls	r2, r3, #5
 8014a22:	693b      	ldr	r3, [r7, #16]
 8014a24:	4413      	add	r3, r2
 8014a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014a30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014a34:	d0e7      	beq.n	8014a06 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a38:	4618      	mov	r0, r3
 8014a3a:	371c      	adds	r7, #28
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a42:	4770      	bx	lr

08014a44 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014a44:	b480      	push	{r7}
 8014a46:	b089      	sub	sp, #36	; 0x24
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	60f8      	str	r0, [r7, #12]
 8014a4c:	60b9      	str	r1, [r7, #8]
 8014a4e:	4611      	mov	r1, r2
 8014a50:	461a      	mov	r2, r3
 8014a52:	460b      	mov	r3, r1
 8014a54:	71fb      	strb	r3, [r7, #7]
 8014a56:	4613      	mov	r3, r2
 8014a58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014a5e:	68bb      	ldr	r3, [r7, #8]
 8014a60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014a62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d123      	bne.n	8014ab2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014a6a:	88bb      	ldrh	r3, [r7, #4]
 8014a6c:	3303      	adds	r3, #3
 8014a6e:	089b      	lsrs	r3, r3, #2
 8014a70:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014a72:	2300      	movs	r3, #0
 8014a74:	61bb      	str	r3, [r7, #24]
 8014a76:	e018      	b.n	8014aaa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014a78:	79fb      	ldrb	r3, [r7, #7]
 8014a7a:	031a      	lsls	r2, r3, #12
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	4413      	add	r3, r2
 8014a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a84:	461a      	mov	r2, r3
 8014a86:	69fb      	ldr	r3, [r7, #28]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014a8c:	69fb      	ldr	r3, [r7, #28]
 8014a8e:	3301      	adds	r3, #1
 8014a90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014a92:	69fb      	ldr	r3, [r7, #28]
 8014a94:	3301      	adds	r3, #1
 8014a96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014a98:	69fb      	ldr	r3, [r7, #28]
 8014a9a:	3301      	adds	r3, #1
 8014a9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014a9e:	69fb      	ldr	r3, [r7, #28]
 8014aa0:	3301      	adds	r3, #1
 8014aa2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014aa4:	69bb      	ldr	r3, [r7, #24]
 8014aa6:	3301      	adds	r3, #1
 8014aa8:	61bb      	str	r3, [r7, #24]
 8014aaa:	69ba      	ldr	r2, [r7, #24]
 8014aac:	693b      	ldr	r3, [r7, #16]
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	d3e2      	bcc.n	8014a78 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014ab2:	2300      	movs	r3, #0
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3724      	adds	r7, #36	; 0x24
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abe:	4770      	bx	lr

08014ac0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014ac0:	b480      	push	{r7}
 8014ac2:	b08b      	sub	sp, #44	; 0x2c
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	60f8      	str	r0, [r7, #12]
 8014ac8:	60b9      	str	r1, [r7, #8]
 8014aca:	4613      	mov	r3, r2
 8014acc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014ad6:	88fb      	ldrh	r3, [r7, #6]
 8014ad8:	089b      	lsrs	r3, r3, #2
 8014ada:	b29b      	uxth	r3, r3
 8014adc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014ade:	88fb      	ldrh	r3, [r7, #6]
 8014ae0:	f003 0303 	and.w	r3, r3, #3
 8014ae4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	623b      	str	r3, [r7, #32]
 8014aea:	e014      	b.n	8014b16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014aec:	69bb      	ldr	r3, [r7, #24]
 8014aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014af2:	681a      	ldr	r2, [r3, #0]
 8014af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014af6:	601a      	str	r2, [r3, #0]
    pDest++;
 8014af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014afa:	3301      	adds	r3, #1
 8014afc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b00:	3301      	adds	r3, #1
 8014b02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b06:	3301      	adds	r3, #1
 8014b08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b0c:	3301      	adds	r3, #1
 8014b0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014b10:	6a3b      	ldr	r3, [r7, #32]
 8014b12:	3301      	adds	r3, #1
 8014b14:	623b      	str	r3, [r7, #32]
 8014b16:	6a3a      	ldr	r2, [r7, #32]
 8014b18:	697b      	ldr	r3, [r7, #20]
 8014b1a:	429a      	cmp	r2, r3
 8014b1c:	d3e6      	bcc.n	8014aec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014b1e:	8bfb      	ldrh	r3, [r7, #30]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d01e      	beq.n	8014b62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014b24:	2300      	movs	r3, #0
 8014b26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014b28:	69bb      	ldr	r3, [r7, #24]
 8014b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b2e:	461a      	mov	r2, r3
 8014b30:	f107 0310 	add.w	r3, r7, #16
 8014b34:	6812      	ldr	r2, [r2, #0]
 8014b36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014b38:	693a      	ldr	r2, [r7, #16]
 8014b3a:	6a3b      	ldr	r3, [r7, #32]
 8014b3c:	b2db      	uxtb	r3, r3
 8014b3e:	00db      	lsls	r3, r3, #3
 8014b40:	fa22 f303 	lsr.w	r3, r2, r3
 8014b44:	b2da      	uxtb	r2, r3
 8014b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b48:	701a      	strb	r2, [r3, #0]
      i++;
 8014b4a:	6a3b      	ldr	r3, [r7, #32]
 8014b4c:	3301      	adds	r3, #1
 8014b4e:	623b      	str	r3, [r7, #32]
      pDest++;
 8014b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b52:	3301      	adds	r3, #1
 8014b54:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014b56:	8bfb      	ldrh	r3, [r7, #30]
 8014b58:	3b01      	subs	r3, #1
 8014b5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014b5c:	8bfb      	ldrh	r3, [r7, #30]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d1ea      	bne.n	8014b38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014b64:	4618      	mov	r0, r3
 8014b66:	372c      	adds	r7, #44	; 0x2c
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6e:	4770      	bx	lr

08014b70 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014b70:	b480      	push	{r7}
 8014b72:	b085      	sub	sp, #20
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
 8014b78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	781b      	ldrb	r3, [r3, #0]
 8014b82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014b84:	683b      	ldr	r3, [r7, #0]
 8014b86:	785b      	ldrb	r3, [r3, #1]
 8014b88:	2b01      	cmp	r3, #1
 8014b8a:	d12c      	bne.n	8014be6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	015a      	lsls	r2, r3, #5
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	4413      	add	r3, r2
 8014b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	db12      	blt.n	8014bc4 <USB_EPSetStall+0x54>
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d00f      	beq.n	8014bc4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014ba4:	68bb      	ldr	r3, [r7, #8]
 8014ba6:	015a      	lsls	r2, r3, #5
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	4413      	add	r3, r2
 8014bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	68ba      	ldr	r2, [r7, #8]
 8014bb4:	0151      	lsls	r1, r2, #5
 8014bb6:	68fa      	ldr	r2, [r7, #12]
 8014bb8:	440a      	add	r2, r1
 8014bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014bbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014bc2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014bc4:	68bb      	ldr	r3, [r7, #8]
 8014bc6:	015a      	lsls	r2, r3, #5
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	4413      	add	r3, r2
 8014bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	68ba      	ldr	r2, [r7, #8]
 8014bd4:	0151      	lsls	r1, r2, #5
 8014bd6:	68fa      	ldr	r2, [r7, #12]
 8014bd8:	440a      	add	r2, r1
 8014bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014bde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014be2:	6013      	str	r3, [r2, #0]
 8014be4:	e02b      	b.n	8014c3e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	015a      	lsls	r2, r3, #5
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	4413      	add	r3, r2
 8014bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	db12      	blt.n	8014c1e <USB_EPSetStall+0xae>
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d00f      	beq.n	8014c1e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014bfe:	68bb      	ldr	r3, [r7, #8]
 8014c00:	015a      	lsls	r2, r3, #5
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	4413      	add	r3, r2
 8014c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	68ba      	ldr	r2, [r7, #8]
 8014c0e:	0151      	lsls	r1, r2, #5
 8014c10:	68fa      	ldr	r2, [r7, #12]
 8014c12:	440a      	add	r2, r1
 8014c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014c1c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014c1e:	68bb      	ldr	r3, [r7, #8]
 8014c20:	015a      	lsls	r2, r3, #5
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	4413      	add	r3, r2
 8014c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	68ba      	ldr	r2, [r7, #8]
 8014c2e:	0151      	lsls	r1, r2, #5
 8014c30:	68fa      	ldr	r2, [r7, #12]
 8014c32:	440a      	add	r2, r1
 8014c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014c3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014c3e:	2300      	movs	r3, #0
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	3714      	adds	r7, #20
 8014c44:	46bd      	mov	sp, r7
 8014c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4a:	4770      	bx	lr

08014c4c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014c4c:	b480      	push	{r7}
 8014c4e:	b085      	sub	sp, #20
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	6078      	str	r0, [r7, #4]
 8014c54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014c5a:	683b      	ldr	r3, [r7, #0]
 8014c5c:	781b      	ldrb	r3, [r3, #0]
 8014c5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014c60:	683b      	ldr	r3, [r7, #0]
 8014c62:	785b      	ldrb	r3, [r3, #1]
 8014c64:	2b01      	cmp	r3, #1
 8014c66:	d128      	bne.n	8014cba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014c68:	68bb      	ldr	r3, [r7, #8]
 8014c6a:	015a      	lsls	r2, r3, #5
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	4413      	add	r3, r2
 8014c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	68ba      	ldr	r2, [r7, #8]
 8014c78:	0151      	lsls	r1, r2, #5
 8014c7a:	68fa      	ldr	r2, [r7, #12]
 8014c7c:	440a      	add	r2, r1
 8014c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014c82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014c86:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014c88:	683b      	ldr	r3, [r7, #0]
 8014c8a:	791b      	ldrb	r3, [r3, #4]
 8014c8c:	2b03      	cmp	r3, #3
 8014c8e:	d003      	beq.n	8014c98 <USB_EPClearStall+0x4c>
 8014c90:	683b      	ldr	r3, [r7, #0]
 8014c92:	791b      	ldrb	r3, [r3, #4]
 8014c94:	2b02      	cmp	r3, #2
 8014c96:	d138      	bne.n	8014d0a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	015a      	lsls	r2, r3, #5
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	4413      	add	r3, r2
 8014ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	68ba      	ldr	r2, [r7, #8]
 8014ca8:	0151      	lsls	r1, r2, #5
 8014caa:	68fa      	ldr	r2, [r7, #12]
 8014cac:	440a      	add	r2, r1
 8014cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014cb6:	6013      	str	r3, [r2, #0]
 8014cb8:	e027      	b.n	8014d0a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014cba:	68bb      	ldr	r3, [r7, #8]
 8014cbc:	015a      	lsls	r2, r3, #5
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	4413      	add	r3, r2
 8014cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	68ba      	ldr	r2, [r7, #8]
 8014cca:	0151      	lsls	r1, r2, #5
 8014ccc:	68fa      	ldr	r2, [r7, #12]
 8014cce:	440a      	add	r2, r1
 8014cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014cd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014cd8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	791b      	ldrb	r3, [r3, #4]
 8014cde:	2b03      	cmp	r3, #3
 8014ce0:	d003      	beq.n	8014cea <USB_EPClearStall+0x9e>
 8014ce2:	683b      	ldr	r3, [r7, #0]
 8014ce4:	791b      	ldrb	r3, [r3, #4]
 8014ce6:	2b02      	cmp	r3, #2
 8014ce8:	d10f      	bne.n	8014d0a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	015a      	lsls	r2, r3, #5
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	4413      	add	r3, r2
 8014cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	68ba      	ldr	r2, [r7, #8]
 8014cfa:	0151      	lsls	r1, r2, #5
 8014cfc:	68fa      	ldr	r2, [r7, #12]
 8014cfe:	440a      	add	r2, r1
 8014d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014d08:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014d0a:	2300      	movs	r3, #0
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	3714      	adds	r7, #20
 8014d10:	46bd      	mov	sp, r7
 8014d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d16:	4770      	bx	lr

08014d18 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014d18:	b480      	push	{r7}
 8014d1a:	b085      	sub	sp, #20
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
 8014d20:	460b      	mov	r3, r1
 8014d22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	68fa      	ldr	r2, [r7, #12]
 8014d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014d36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014d3a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d42:	681a      	ldr	r2, [r3, #0]
 8014d44:	78fb      	ldrb	r3, [r7, #3]
 8014d46:	011b      	lsls	r3, r3, #4
 8014d48:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014d4c:	68f9      	ldr	r1, [r7, #12]
 8014d4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014d52:	4313      	orrs	r3, r2
 8014d54:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014d56:	2300      	movs	r3, #0
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	3714      	adds	r7, #20
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d62:	4770      	bx	lr

08014d64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014d64:	b480      	push	{r7}
 8014d66:	b085      	sub	sp, #20
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	68fa      	ldr	r2, [r7, #12]
 8014d7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014d7e:	f023 0303 	bic.w	r3, r3, #3
 8014d82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d8a:	685b      	ldr	r3, [r3, #4]
 8014d8c:	68fa      	ldr	r2, [r7, #12]
 8014d8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014d92:	f023 0302 	bic.w	r3, r3, #2
 8014d96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014d98:	2300      	movs	r3, #0
}
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	3714      	adds	r7, #20
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da4:	4770      	bx	lr

08014da6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014da6:	b480      	push	{r7}
 8014da8:	b085      	sub	sp, #20
 8014daa:	af00      	add	r7, sp, #0
 8014dac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	68fa      	ldr	r2, [r7, #12]
 8014dbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014dc0:	f023 0303 	bic.w	r3, r3, #3
 8014dc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014dcc:	685b      	ldr	r3, [r3, #4]
 8014dce:	68fa      	ldr	r2, [r7, #12]
 8014dd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014dd4:	f043 0302 	orr.w	r3, r3, #2
 8014dd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014dda:	2300      	movs	r3, #0
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3714      	adds	r7, #20
 8014de0:	46bd      	mov	sp, r7
 8014de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de6:	4770      	bx	lr

08014de8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014de8:	b480      	push	{r7}
 8014dea:	b085      	sub	sp, #20
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	695b      	ldr	r3, [r3, #20]
 8014df4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	699b      	ldr	r3, [r3, #24]
 8014dfa:	68fa      	ldr	r2, [r7, #12]
 8014dfc:	4013      	ands	r3, r2
 8014dfe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014e00:	68fb      	ldr	r3, [r7, #12]
}
 8014e02:	4618      	mov	r0, r3
 8014e04:	3714      	adds	r7, #20
 8014e06:	46bd      	mov	sp, r7
 8014e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0c:	4770      	bx	lr

08014e0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014e0e:	b480      	push	{r7}
 8014e10:	b085      	sub	sp, #20
 8014e12:	af00      	add	r7, sp, #0
 8014e14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e20:	699b      	ldr	r3, [r3, #24]
 8014e22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e2a:	69db      	ldr	r3, [r3, #28]
 8014e2c:	68ba      	ldr	r2, [r7, #8]
 8014e2e:	4013      	ands	r3, r2
 8014e30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014e32:	68bb      	ldr	r3, [r7, #8]
 8014e34:	0c1b      	lsrs	r3, r3, #16
}
 8014e36:	4618      	mov	r0, r3
 8014e38:	3714      	adds	r7, #20
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e40:	4770      	bx	lr

08014e42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014e42:	b480      	push	{r7}
 8014e44:	b085      	sub	sp, #20
 8014e46:	af00      	add	r7, sp, #0
 8014e48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e54:	699b      	ldr	r3, [r3, #24]
 8014e56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e5e:	69db      	ldr	r3, [r3, #28]
 8014e60:	68ba      	ldr	r2, [r7, #8]
 8014e62:	4013      	ands	r3, r2
 8014e64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014e66:	68bb      	ldr	r3, [r7, #8]
 8014e68:	b29b      	uxth	r3, r3
}
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	3714      	adds	r7, #20
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e74:	4770      	bx	lr

08014e76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014e76:	b480      	push	{r7}
 8014e78:	b085      	sub	sp, #20
 8014e7a:	af00      	add	r7, sp, #0
 8014e7c:	6078      	str	r0, [r7, #4]
 8014e7e:	460b      	mov	r3, r1
 8014e80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014e86:	78fb      	ldrb	r3, [r7, #3]
 8014e88:	015a      	lsls	r2, r3, #5
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	4413      	add	r3, r2
 8014e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e92:	689b      	ldr	r3, [r3, #8]
 8014e94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e9c:	695b      	ldr	r3, [r3, #20]
 8014e9e:	68ba      	ldr	r2, [r7, #8]
 8014ea0:	4013      	ands	r3, r2
 8014ea2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014ea4:	68bb      	ldr	r3, [r7, #8]
}
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	3714      	adds	r7, #20
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb0:	4770      	bx	lr

08014eb2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014eb2:	b480      	push	{r7}
 8014eb4:	b087      	sub	sp, #28
 8014eb6:	af00      	add	r7, sp, #0
 8014eb8:	6078      	str	r0, [r7, #4]
 8014eba:	460b      	mov	r3, r1
 8014ebc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014ec2:	697b      	ldr	r3, [r7, #20]
 8014ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ec8:	691b      	ldr	r3, [r3, #16]
 8014eca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014ecc:	697b      	ldr	r3, [r7, #20]
 8014ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ed4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014ed6:	78fb      	ldrb	r3, [r7, #3]
 8014ed8:	f003 030f 	and.w	r3, r3, #15
 8014edc:	68fa      	ldr	r2, [r7, #12]
 8014ede:	fa22 f303 	lsr.w	r3, r2, r3
 8014ee2:	01db      	lsls	r3, r3, #7
 8014ee4:	b2db      	uxtb	r3, r3
 8014ee6:	693a      	ldr	r2, [r7, #16]
 8014ee8:	4313      	orrs	r3, r2
 8014eea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014eec:	78fb      	ldrb	r3, [r7, #3]
 8014eee:	015a      	lsls	r2, r3, #5
 8014ef0:	697b      	ldr	r3, [r7, #20]
 8014ef2:	4413      	add	r3, r2
 8014ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ef8:	689b      	ldr	r3, [r3, #8]
 8014efa:	693a      	ldr	r2, [r7, #16]
 8014efc:	4013      	ands	r3, r2
 8014efe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014f00:	68bb      	ldr	r3, [r7, #8]
}
 8014f02:	4618      	mov	r0, r3
 8014f04:	371c      	adds	r7, #28
 8014f06:	46bd      	mov	sp, r7
 8014f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0c:	4770      	bx	lr

08014f0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014f0e:	b480      	push	{r7}
 8014f10:	b083      	sub	sp, #12
 8014f12:	af00      	add	r7, sp, #0
 8014f14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	695b      	ldr	r3, [r3, #20]
 8014f1a:	f003 0301 	and.w	r3, r3, #1
}
 8014f1e:	4618      	mov	r0, r3
 8014f20:	370c      	adds	r7, #12
 8014f22:	46bd      	mov	sp, r7
 8014f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f28:	4770      	bx	lr
	...

08014f2c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	b085      	sub	sp, #20
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f3e:	681a      	ldr	r2, [r3, #0]
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f46:	4619      	mov	r1, r3
 8014f48:	4b09      	ldr	r3, [pc, #36]	; (8014f70 <USB_ActivateSetup+0x44>)
 8014f4a:	4013      	ands	r3, r2
 8014f4c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f54:	685b      	ldr	r3, [r3, #4]
 8014f56:	68fa      	ldr	r2, [r7, #12]
 8014f58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014f60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014f62:	2300      	movs	r3, #0
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	3714      	adds	r7, #20
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6e:	4770      	bx	lr
 8014f70:	fffff800 	.word	0xfffff800

08014f74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014f74:	b480      	push	{r7}
 8014f76:	b087      	sub	sp, #28
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	60f8      	str	r0, [r7, #12]
 8014f7c:	460b      	mov	r3, r1
 8014f7e:	607a      	str	r2, [r7, #4]
 8014f80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	333c      	adds	r3, #60	; 0x3c
 8014f8a:	3304      	adds	r3, #4
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014f90:	693b      	ldr	r3, [r7, #16]
 8014f92:	4a26      	ldr	r2, [pc, #152]	; (801502c <USB_EP0_OutStart+0xb8>)
 8014f94:	4293      	cmp	r3, r2
 8014f96:	d90a      	bls.n	8014fae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014f98:	697b      	ldr	r3, [r7, #20]
 8014f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014fa8:	d101      	bne.n	8014fae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014faa:	2300      	movs	r3, #0
 8014fac:	e037      	b.n	801501e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fb4:	461a      	mov	r2, r3
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014fba:	697b      	ldr	r3, [r7, #20]
 8014fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fc0:	691b      	ldr	r3, [r3, #16]
 8014fc2:	697a      	ldr	r2, [r7, #20]
 8014fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014fc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014fcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014fce:	697b      	ldr	r3, [r7, #20]
 8014fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fd4:	691b      	ldr	r3, [r3, #16]
 8014fd6:	697a      	ldr	r2, [r7, #20]
 8014fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014fdc:	f043 0318 	orr.w	r3, r3, #24
 8014fe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014fe2:	697b      	ldr	r3, [r7, #20]
 8014fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fe8:	691b      	ldr	r3, [r3, #16]
 8014fea:	697a      	ldr	r2, [r7, #20]
 8014fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014ff0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014ff4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014ff6:	7afb      	ldrb	r3, [r7, #11]
 8014ff8:	2b01      	cmp	r3, #1
 8014ffa:	d10f      	bne.n	801501c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014ffc:	697b      	ldr	r3, [r7, #20]
 8014ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015002:	461a      	mov	r2, r3
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015008:	697b      	ldr	r3, [r7, #20]
 801500a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	697a      	ldr	r2, [r7, #20]
 8015012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015016:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801501a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801501c:	2300      	movs	r3, #0
}
 801501e:	4618      	mov	r0, r3
 8015020:	371c      	adds	r7, #28
 8015022:	46bd      	mov	sp, r7
 8015024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015028:	4770      	bx	lr
 801502a:	bf00      	nop
 801502c:	4f54300a 	.word	0x4f54300a

08015030 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015030:	b480      	push	{r7}
 8015032:	b085      	sub	sp, #20
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015038:	2300      	movs	r3, #0
 801503a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	3301      	adds	r3, #1
 8015040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	4a13      	ldr	r2, [pc, #76]	; (8015094 <USB_CoreReset+0x64>)
 8015046:	4293      	cmp	r3, r2
 8015048:	d901      	bls.n	801504e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801504a:	2303      	movs	r3, #3
 801504c:	e01b      	b.n	8015086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	691b      	ldr	r3, [r3, #16]
 8015052:	2b00      	cmp	r3, #0
 8015054:	daf2      	bge.n	801503c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8015056:	2300      	movs	r3, #0
 8015058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	691b      	ldr	r3, [r3, #16]
 801505e:	f043 0201 	orr.w	r2, r3, #1
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	3301      	adds	r3, #1
 801506a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	4a09      	ldr	r2, [pc, #36]	; (8015094 <USB_CoreReset+0x64>)
 8015070:	4293      	cmp	r3, r2
 8015072:	d901      	bls.n	8015078 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8015074:	2303      	movs	r3, #3
 8015076:	e006      	b.n	8015086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	691b      	ldr	r3, [r3, #16]
 801507c:	f003 0301 	and.w	r3, r3, #1
 8015080:	2b01      	cmp	r3, #1
 8015082:	d0f0      	beq.n	8015066 <USB_CoreReset+0x36>

  return HAL_OK;
 8015084:	2300      	movs	r3, #0
}
 8015086:	4618      	mov	r0, r3
 8015088:	3714      	adds	r7, #20
 801508a:	46bd      	mov	sp, r7
 801508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015090:	4770      	bx	lr
 8015092:	bf00      	nop
 8015094:	00030d40 	.word	0x00030d40

08015098 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801509c:	4904      	ldr	r1, [pc, #16]	; (80150b0 <MX_FATFS_Init+0x18>)
 801509e:	4805      	ldr	r0, [pc, #20]	; (80150b4 <MX_FATFS_Init+0x1c>)
 80150a0:	f005 f904 	bl	801a2ac <FATFS_LinkDriver>
 80150a4:	4603      	mov	r3, r0
 80150a6:	461a      	mov	r2, r3
 80150a8:	4b03      	ldr	r3, [pc, #12]	; (80150b8 <MX_FATFS_Init+0x20>)
 80150aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80150ac:	bf00      	nop
 80150ae:	bd80      	pop	{r7, pc}
 80150b0:	24001698 	.word	0x24001698
 80150b4:	0801fff0 	.word	0x0801fff0
 80150b8:	24001694 	.word	0x24001694

080150bc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80150bc:	b480      	push	{r7}
 80150be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80150c0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80150c2:	4618      	mov	r0, r3
 80150c4:	46bd      	mov	sp, r7
 80150c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ca:	4770      	bx	lr

080150cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b082      	sub	sp, #8
 80150d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80150d2:	2300      	movs	r3, #0
 80150d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80150d6:	f000 f885 	bl	80151e4 <BSP_SD_IsDetected>
 80150da:	4603      	mov	r3, r0
 80150dc:	2b01      	cmp	r3, #1
 80150de:	d001      	beq.n	80150e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80150e0:	2302      	movs	r3, #2
 80150e2:	e012      	b.n	801510a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80150e4:	480b      	ldr	r0, [pc, #44]	; (8015114 <BSP_SD_Init+0x48>)
 80150e6:	f7f8 ff39 	bl	800df5c <HAL_SD_Init>
 80150ea:	4603      	mov	r3, r0
 80150ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80150ee:	79fb      	ldrb	r3, [r7, #7]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d109      	bne.n	8015108 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80150f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80150f8:	4806      	ldr	r0, [pc, #24]	; (8015114 <BSP_SD_Init+0x48>)
 80150fa:	f7f9 fdef 	bl	800ecdc <HAL_SD_ConfigWideBusOperation>
 80150fe:	4603      	mov	r3, r0
 8015100:	2b00      	cmp	r3, #0
 8015102:	d001      	beq.n	8015108 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8015104:	2301      	movs	r3, #1
 8015106:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8015108:	79fb      	ldrb	r3, [r7, #7]
}
 801510a:	4618      	mov	r0, r3
 801510c:	3708      	adds	r7, #8
 801510e:	46bd      	mov	sp, r7
 8015110:	bd80      	pop	{r7, pc}
 8015112:	bf00      	nop
 8015114:	24000f30 	.word	0x24000f30

08015118 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b086      	sub	sp, #24
 801511c:	af00      	add	r7, sp, #0
 801511e:	60f8      	str	r0, [r7, #12]
 8015120:	60b9      	str	r1, [r7, #8]
 8015122:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015124:	2300      	movs	r3, #0
 8015126:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	68ba      	ldr	r2, [r7, #8]
 801512c:	68f9      	ldr	r1, [r7, #12]
 801512e:	4806      	ldr	r0, [pc, #24]	; (8015148 <BSP_SD_ReadBlocks_DMA+0x30>)
 8015130:	f7f9 f834 	bl	800e19c <HAL_SD_ReadBlocks_DMA>
 8015134:	4603      	mov	r3, r0
 8015136:	2b00      	cmp	r3, #0
 8015138:	d001      	beq.n	801513e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801513a:	2301      	movs	r3, #1
 801513c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801513e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015140:	4618      	mov	r0, r3
 8015142:	3718      	adds	r7, #24
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}
 8015148:	24000f30 	.word	0x24000f30

0801514c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b086      	sub	sp, #24
 8015150:	af00      	add	r7, sp, #0
 8015152:	60f8      	str	r0, [r7, #12]
 8015154:	60b9      	str	r1, [r7, #8]
 8015156:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015158:	2300      	movs	r3, #0
 801515a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	68ba      	ldr	r2, [r7, #8]
 8015160:	68f9      	ldr	r1, [r7, #12]
 8015162:	4806      	ldr	r0, [pc, #24]	; (801517c <BSP_SD_WriteBlocks_DMA+0x30>)
 8015164:	f7f9 f8c2 	bl	800e2ec <HAL_SD_WriteBlocks_DMA>
 8015168:	4603      	mov	r3, r0
 801516a:	2b00      	cmp	r3, #0
 801516c:	d001      	beq.n	8015172 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801516e:	2301      	movs	r3, #1
 8015170:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8015172:	7dfb      	ldrb	r3, [r7, #23]
}
 8015174:	4618      	mov	r0, r3
 8015176:	3718      	adds	r7, #24
 8015178:	46bd      	mov	sp, r7
 801517a:	bd80      	pop	{r7, pc}
 801517c:	24000f30 	.word	0x24000f30

08015180 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8015184:	4805      	ldr	r0, [pc, #20]	; (801519c <BSP_SD_GetCardState+0x1c>)
 8015186:	f7f9 febb 	bl	800ef00 <HAL_SD_GetCardState>
 801518a:	4603      	mov	r3, r0
 801518c:	2b04      	cmp	r3, #4
 801518e:	bf14      	ite	ne
 8015190:	2301      	movne	r3, #1
 8015192:	2300      	moveq	r3, #0
 8015194:	b2db      	uxtb	r3, r3
}
 8015196:	4618      	mov	r0, r3
 8015198:	bd80      	pop	{r7, pc}
 801519a:	bf00      	nop
 801519c:	24000f30 	.word	0x24000f30

080151a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b082      	sub	sp, #8
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80151a8:	6879      	ldr	r1, [r7, #4]
 80151aa:	4803      	ldr	r0, [pc, #12]	; (80151b8 <BSP_SD_GetCardInfo+0x18>)
 80151ac:	f7f9 fd6a 	bl	800ec84 <HAL_SD_GetCardInfo>
}
 80151b0:	bf00      	nop
 80151b2:	3708      	adds	r7, #8
 80151b4:	46bd      	mov	sp, r7
 80151b6:	bd80      	pop	{r7, pc}
 80151b8:	24000f30 	.word	0x24000f30

080151bc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b082      	sub	sp, #8
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80151c4:	f000 f984 	bl	80154d0 <BSP_SD_WriteCpltCallback>
}
 80151c8:	bf00      	nop
 80151ca:	3708      	adds	r7, #8
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}

080151d0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b082      	sub	sp, #8
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80151d8:	f000 f986 	bl	80154e8 <BSP_SD_ReadCpltCallback>
}
 80151dc:	bf00      	nop
 80151de:	3708      	adds	r7, #8
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}

080151e4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80151e4:	b480      	push	{r7}
 80151e6:	b083      	sub	sp, #12
 80151e8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80151ea:	2301      	movs	r3, #1
 80151ec:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 80151ee:	79fb      	ldrb	r3, [r7, #7]
 80151f0:	b2db      	uxtb	r3, r3
}
 80151f2:	4618      	mov	r0, r3
 80151f4:	370c      	adds	r7, #12
 80151f6:	46bd      	mov	sp, r7
 80151f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fc:	4770      	bx	lr

080151fe <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80151fe:	b580      	push	{r7, lr}
 8015200:	b084      	sub	sp, #16
 8015202:	af00      	add	r7, sp, #0
 8015204:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8015206:	f7ee ff8b 	bl	8004120 <HAL_GetTick>
 801520a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801520c:	e006      	b.n	801521c <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801520e:	f7ff ffb7 	bl	8015180 <BSP_SD_GetCardState>
 8015212:	4603      	mov	r3, r0
 8015214:	2b00      	cmp	r3, #0
 8015216:	d101      	bne.n	801521c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8015218:	2300      	movs	r3, #0
 801521a:	e009      	b.n	8015230 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801521c:	f7ee ff80 	bl	8004120 <HAL_GetTick>
 8015220:	4602      	mov	r2, r0
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	1ad3      	subs	r3, r2, r3
 8015226:	687a      	ldr	r2, [r7, #4]
 8015228:	429a      	cmp	r2, r3
 801522a:	d8f0      	bhi.n	801520e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801522c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015230:	4618      	mov	r0, r3
 8015232:	3710      	adds	r7, #16
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}

08015238 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b082      	sub	sp, #8
 801523c:	af00      	add	r7, sp, #0
 801523e:	4603      	mov	r3, r0
 8015240:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8015242:	4b0b      	ldr	r3, [pc, #44]	; (8015270 <SD_CheckStatus+0x38>)
 8015244:	2201      	movs	r2, #1
 8015246:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8015248:	f7ff ff9a 	bl	8015180 <BSP_SD_GetCardState>
 801524c:	4603      	mov	r3, r0
 801524e:	2b00      	cmp	r3, #0
 8015250:	d107      	bne.n	8015262 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8015252:	4b07      	ldr	r3, [pc, #28]	; (8015270 <SD_CheckStatus+0x38>)
 8015254:	781b      	ldrb	r3, [r3, #0]
 8015256:	b2db      	uxtb	r3, r3
 8015258:	f023 0301 	bic.w	r3, r3, #1
 801525c:	b2da      	uxtb	r2, r3
 801525e:	4b04      	ldr	r3, [pc, #16]	; (8015270 <SD_CheckStatus+0x38>)
 8015260:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8015262:	4b03      	ldr	r3, [pc, #12]	; (8015270 <SD_CheckStatus+0x38>)
 8015264:	781b      	ldrb	r3, [r3, #0]
 8015266:	b2db      	uxtb	r3, r3
}
 8015268:	4618      	mov	r0, r3
 801526a:	3708      	adds	r7, #8
 801526c:	46bd      	mov	sp, r7
 801526e:	bd80      	pop	{r7, pc}
 8015270:	2400000d 	.word	0x2400000d

08015274 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b082      	sub	sp, #8
 8015278:	af00      	add	r7, sp, #0
 801527a:	4603      	mov	r3, r0
 801527c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801527e:	f7ff ff25 	bl	80150cc <BSP_SD_Init>
 8015282:	4603      	mov	r3, r0
 8015284:	2b00      	cmp	r3, #0
 8015286:	d107      	bne.n	8015298 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8015288:	79fb      	ldrb	r3, [r7, #7]
 801528a:	4618      	mov	r0, r3
 801528c:	f7ff ffd4 	bl	8015238 <SD_CheckStatus>
 8015290:	4603      	mov	r3, r0
 8015292:	461a      	mov	r2, r3
 8015294:	4b04      	ldr	r3, [pc, #16]	; (80152a8 <SD_initialize+0x34>)
 8015296:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8015298:	4b03      	ldr	r3, [pc, #12]	; (80152a8 <SD_initialize+0x34>)
 801529a:	781b      	ldrb	r3, [r3, #0]
 801529c:	b2db      	uxtb	r3, r3
}
 801529e:	4618      	mov	r0, r3
 80152a0:	3708      	adds	r7, #8
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}
 80152a6:	bf00      	nop
 80152a8:	2400000d 	.word	0x2400000d

080152ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b082      	sub	sp, #8
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	4603      	mov	r3, r0
 80152b4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80152b6:	79fb      	ldrb	r3, [r7, #7]
 80152b8:	4618      	mov	r0, r3
 80152ba:	f7ff ffbd 	bl	8015238 <SD_CheckStatus>
 80152be:	4603      	mov	r3, r0
}
 80152c0:	4618      	mov	r0, r3
 80152c2:	3708      	adds	r7, #8
 80152c4:	46bd      	mov	sp, r7
 80152c6:	bd80      	pop	{r7, pc}

080152c8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b086      	sub	sp, #24
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	60b9      	str	r1, [r7, #8]
 80152d0:	607a      	str	r2, [r7, #4]
 80152d2:	603b      	str	r3, [r7, #0]
 80152d4:	4603      	mov	r3, r0
 80152d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80152d8:	2301      	movs	r3, #1
 80152da:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80152dc:	f247 5030 	movw	r0, #30000	; 0x7530
 80152e0:	f7ff ff8d 	bl	80151fe <SD_CheckStatusWithTimeout>
 80152e4:	4603      	mov	r3, r0
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	da01      	bge.n	80152ee <SD_read+0x26>
  {
    return res;
 80152ea:	7dfb      	ldrb	r3, [r7, #23]
 80152ec:	e03b      	b.n	8015366 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80152ee:	683a      	ldr	r2, [r7, #0]
 80152f0:	6879      	ldr	r1, [r7, #4]
 80152f2:	68b8      	ldr	r0, [r7, #8]
 80152f4:	f7ff ff10 	bl	8015118 <BSP_SD_ReadBlocks_DMA>
 80152f8:	4603      	mov	r3, r0
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d132      	bne.n	8015364 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80152fe:	4b1c      	ldr	r3, [pc, #112]	; (8015370 <SD_read+0xa8>)
 8015300:	2200      	movs	r2, #0
 8015302:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8015304:	f7ee ff0c 	bl	8004120 <HAL_GetTick>
 8015308:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801530a:	bf00      	nop
 801530c:	4b18      	ldr	r3, [pc, #96]	; (8015370 <SD_read+0xa8>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d108      	bne.n	8015326 <SD_read+0x5e>
 8015314:	f7ee ff04 	bl	8004120 <HAL_GetTick>
 8015318:	4602      	mov	r2, r0
 801531a:	693b      	ldr	r3, [r7, #16]
 801531c:	1ad3      	subs	r3, r2, r3
 801531e:	f247 522f 	movw	r2, #29999	; 0x752f
 8015322:	4293      	cmp	r3, r2
 8015324:	d9f2      	bls.n	801530c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8015326:	4b12      	ldr	r3, [pc, #72]	; (8015370 <SD_read+0xa8>)
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d102      	bne.n	8015334 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801532e:	2301      	movs	r3, #1
 8015330:	75fb      	strb	r3, [r7, #23]
 8015332:	e017      	b.n	8015364 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8015334:	4b0e      	ldr	r3, [pc, #56]	; (8015370 <SD_read+0xa8>)
 8015336:	2200      	movs	r2, #0
 8015338:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801533a:	f7ee fef1 	bl	8004120 <HAL_GetTick>
 801533e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015340:	e007      	b.n	8015352 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015342:	f7ff ff1d 	bl	8015180 <BSP_SD_GetCardState>
 8015346:	4603      	mov	r3, r0
 8015348:	2b00      	cmp	r3, #0
 801534a:	d102      	bne.n	8015352 <SD_read+0x8a>
          {
            res = RES_OK;
 801534c:	2300      	movs	r3, #0
 801534e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8015350:	e008      	b.n	8015364 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015352:	f7ee fee5 	bl	8004120 <HAL_GetTick>
 8015356:	4602      	mov	r2, r0
 8015358:	693b      	ldr	r3, [r7, #16]
 801535a:	1ad3      	subs	r3, r2, r3
 801535c:	f247 522f 	movw	r2, #29999	; 0x752f
 8015360:	4293      	cmp	r3, r2
 8015362:	d9ee      	bls.n	8015342 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8015364:	7dfb      	ldrb	r3, [r7, #23]
}
 8015366:	4618      	mov	r0, r3
 8015368:	3718      	adds	r7, #24
 801536a:	46bd      	mov	sp, r7
 801536c:	bd80      	pop	{r7, pc}
 801536e:	bf00      	nop
 8015370:	240016a0 	.word	0x240016a0

08015374 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b086      	sub	sp, #24
 8015378:	af00      	add	r7, sp, #0
 801537a:	60b9      	str	r1, [r7, #8]
 801537c:	607a      	str	r2, [r7, #4]
 801537e:	603b      	str	r3, [r7, #0]
 8015380:	4603      	mov	r3, r0
 8015382:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015384:	2301      	movs	r3, #1
 8015386:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8015388:	4b24      	ldr	r3, [pc, #144]	; (801541c <SD_write+0xa8>)
 801538a:	2200      	movs	r2, #0
 801538c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801538e:	f247 5030 	movw	r0, #30000	; 0x7530
 8015392:	f7ff ff34 	bl	80151fe <SD_CheckStatusWithTimeout>
 8015396:	4603      	mov	r3, r0
 8015398:	2b00      	cmp	r3, #0
 801539a:	da01      	bge.n	80153a0 <SD_write+0x2c>
  {
    return res;
 801539c:	7dfb      	ldrb	r3, [r7, #23]
 801539e:	e038      	b.n	8015412 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80153a0:	683a      	ldr	r2, [r7, #0]
 80153a2:	6879      	ldr	r1, [r7, #4]
 80153a4:	68b8      	ldr	r0, [r7, #8]
 80153a6:	f7ff fed1 	bl	801514c <BSP_SD_WriteBlocks_DMA>
 80153aa:	4603      	mov	r3, r0
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d12f      	bne.n	8015410 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80153b0:	f7ee feb6 	bl	8004120 <HAL_GetTick>
 80153b4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80153b6:	bf00      	nop
 80153b8:	4b18      	ldr	r3, [pc, #96]	; (801541c <SD_write+0xa8>)
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d108      	bne.n	80153d2 <SD_write+0x5e>
 80153c0:	f7ee feae 	bl	8004120 <HAL_GetTick>
 80153c4:	4602      	mov	r2, r0
 80153c6:	693b      	ldr	r3, [r7, #16]
 80153c8:	1ad3      	subs	r3, r2, r3
 80153ca:	f247 522f 	movw	r2, #29999	; 0x752f
 80153ce:	4293      	cmp	r3, r2
 80153d0:	d9f2      	bls.n	80153b8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80153d2:	4b12      	ldr	r3, [pc, #72]	; (801541c <SD_write+0xa8>)
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d102      	bne.n	80153e0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80153da:	2301      	movs	r3, #1
 80153dc:	75fb      	strb	r3, [r7, #23]
 80153de:	e017      	b.n	8015410 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80153e0:	4b0e      	ldr	r3, [pc, #56]	; (801541c <SD_write+0xa8>)
 80153e2:	2200      	movs	r2, #0
 80153e4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80153e6:	f7ee fe9b 	bl	8004120 <HAL_GetTick>
 80153ea:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80153ec:	e007      	b.n	80153fe <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80153ee:	f7ff fec7 	bl	8015180 <BSP_SD_GetCardState>
 80153f2:	4603      	mov	r3, r0
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d102      	bne.n	80153fe <SD_write+0x8a>
          {
            res = RES_OK;
 80153f8:	2300      	movs	r3, #0
 80153fa:	75fb      	strb	r3, [r7, #23]
            break;
 80153fc:	e008      	b.n	8015410 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80153fe:	f7ee fe8f 	bl	8004120 <HAL_GetTick>
 8015402:	4602      	mov	r2, r0
 8015404:	693b      	ldr	r3, [r7, #16]
 8015406:	1ad3      	subs	r3, r2, r3
 8015408:	f247 522f 	movw	r2, #29999	; 0x752f
 801540c:	4293      	cmp	r3, r2
 801540e:	d9ee      	bls.n	80153ee <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8015410:	7dfb      	ldrb	r3, [r7, #23]
}
 8015412:	4618      	mov	r0, r3
 8015414:	3718      	adds	r7, #24
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}
 801541a:	bf00      	nop
 801541c:	2400169c 	.word	0x2400169c

08015420 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b08c      	sub	sp, #48	; 0x30
 8015424:	af00      	add	r7, sp, #0
 8015426:	4603      	mov	r3, r0
 8015428:	603a      	str	r2, [r7, #0]
 801542a:	71fb      	strb	r3, [r7, #7]
 801542c:	460b      	mov	r3, r1
 801542e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015430:	2301      	movs	r3, #1
 8015432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8015436:	4b25      	ldr	r3, [pc, #148]	; (80154cc <SD_ioctl+0xac>)
 8015438:	781b      	ldrb	r3, [r3, #0]
 801543a:	b2db      	uxtb	r3, r3
 801543c:	f003 0301 	and.w	r3, r3, #1
 8015440:	2b00      	cmp	r3, #0
 8015442:	d001      	beq.n	8015448 <SD_ioctl+0x28>
 8015444:	2303      	movs	r3, #3
 8015446:	e03c      	b.n	80154c2 <SD_ioctl+0xa2>

  switch (cmd)
 8015448:	79bb      	ldrb	r3, [r7, #6]
 801544a:	2b03      	cmp	r3, #3
 801544c:	d834      	bhi.n	80154b8 <SD_ioctl+0x98>
 801544e:	a201      	add	r2, pc, #4	; (adr r2, 8015454 <SD_ioctl+0x34>)
 8015450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015454:	08015465 	.word	0x08015465
 8015458:	0801546d 	.word	0x0801546d
 801545c:	08015485 	.word	0x08015485
 8015460:	0801549f 	.word	0x0801549f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8015464:	2300      	movs	r3, #0
 8015466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801546a:	e028      	b.n	80154be <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801546c:	f107 0308 	add.w	r3, r7, #8
 8015470:	4618      	mov	r0, r3
 8015472:	f7ff fe95 	bl	80151a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8015476:	6a3a      	ldr	r2, [r7, #32]
 8015478:	683b      	ldr	r3, [r7, #0]
 801547a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801547c:	2300      	movs	r3, #0
 801547e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015482:	e01c      	b.n	80154be <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015484:	f107 0308 	add.w	r3, r7, #8
 8015488:	4618      	mov	r0, r3
 801548a:	f7ff fe89 	bl	80151a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015490:	b29a      	uxth	r2, r3
 8015492:	683b      	ldr	r3, [r7, #0]
 8015494:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8015496:	2300      	movs	r3, #0
 8015498:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801549c:	e00f      	b.n	80154be <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801549e:	f107 0308 	add.w	r3, r7, #8
 80154a2:	4618      	mov	r0, r3
 80154a4:	f7ff fe7c 	bl	80151a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80154a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154aa:	0a5a      	lsrs	r2, r3, #9
 80154ac:	683b      	ldr	r3, [r7, #0]
 80154ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80154b0:	2300      	movs	r3, #0
 80154b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80154b6:	e002      	b.n	80154be <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80154b8:	2304      	movs	r3, #4
 80154ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80154be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80154c2:	4618      	mov	r0, r3
 80154c4:	3730      	adds	r7, #48	; 0x30
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bd80      	pop	{r7, pc}
 80154ca:	bf00      	nop
 80154cc:	2400000d 	.word	0x2400000d

080154d0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80154d0:	b480      	push	{r7}
 80154d2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80154d4:	4b03      	ldr	r3, [pc, #12]	; (80154e4 <BSP_SD_WriteCpltCallback+0x14>)
 80154d6:	2201      	movs	r2, #1
 80154d8:	601a      	str	r2, [r3, #0]
}
 80154da:	bf00      	nop
 80154dc:	46bd      	mov	sp, r7
 80154de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e2:	4770      	bx	lr
 80154e4:	2400169c 	.word	0x2400169c

080154e8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80154e8:	b480      	push	{r7}
 80154ea:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80154ec:	4b03      	ldr	r3, [pc, #12]	; (80154fc <BSP_SD_ReadCpltCallback+0x14>)
 80154ee:	2201      	movs	r2, #1
 80154f0:	601a      	str	r2, [r3, #0]
}
 80154f2:	bf00      	nop
 80154f4:	46bd      	mov	sp, r7
 80154f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fa:	4770      	bx	lr
 80154fc:	240016a0 	.word	0x240016a0

08015500 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b084      	sub	sp, #16
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
 8015508:	460b      	mov	r3, r1
 801550a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801550c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015510:	f005 fc72 	bl	801adf8 <USBD_static_malloc>
 8015514:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d109      	bne.n	8015530 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	32b0      	adds	r2, #176	; 0xb0
 8015526:	2100      	movs	r1, #0
 8015528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801552c:	2302      	movs	r3, #2
 801552e:	e0d4      	b.n	80156da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015530:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8015534:	2100      	movs	r1, #0
 8015536:	68f8      	ldr	r0, [r7, #12]
 8015538:	f006 fc33 	bl	801bda2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	32b0      	adds	r2, #176	; 0xb0
 8015546:	68f9      	ldr	r1, [r7, #12]
 8015548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	32b0      	adds	r2, #176	; 0xb0
 8015556:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	7c1b      	ldrb	r3, [r3, #16]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d138      	bne.n	80155da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015568:	4b5e      	ldr	r3, [pc, #376]	; (80156e4 <USBD_CDC_Init+0x1e4>)
 801556a:	7819      	ldrb	r1, [r3, #0]
 801556c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015570:	2202      	movs	r2, #2
 8015572:	6878      	ldr	r0, [r7, #4]
 8015574:	f005 fb1d 	bl	801abb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015578:	4b5a      	ldr	r3, [pc, #360]	; (80156e4 <USBD_CDC_Init+0x1e4>)
 801557a:	781b      	ldrb	r3, [r3, #0]
 801557c:	f003 020f 	and.w	r2, r3, #15
 8015580:	6879      	ldr	r1, [r7, #4]
 8015582:	4613      	mov	r3, r2
 8015584:	009b      	lsls	r3, r3, #2
 8015586:	4413      	add	r3, r2
 8015588:	009b      	lsls	r3, r3, #2
 801558a:	440b      	add	r3, r1
 801558c:	3324      	adds	r3, #36	; 0x24
 801558e:	2201      	movs	r2, #1
 8015590:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015592:	4b55      	ldr	r3, [pc, #340]	; (80156e8 <USBD_CDC_Init+0x1e8>)
 8015594:	7819      	ldrb	r1, [r3, #0]
 8015596:	f44f 7300 	mov.w	r3, #512	; 0x200
 801559a:	2202      	movs	r2, #2
 801559c:	6878      	ldr	r0, [r7, #4]
 801559e:	f005 fb08 	bl	801abb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80155a2:	4b51      	ldr	r3, [pc, #324]	; (80156e8 <USBD_CDC_Init+0x1e8>)
 80155a4:	781b      	ldrb	r3, [r3, #0]
 80155a6:	f003 020f 	and.w	r2, r3, #15
 80155aa:	6879      	ldr	r1, [r7, #4]
 80155ac:	4613      	mov	r3, r2
 80155ae:	009b      	lsls	r3, r3, #2
 80155b0:	4413      	add	r3, r2
 80155b2:	009b      	lsls	r3, r3, #2
 80155b4:	440b      	add	r3, r1
 80155b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80155ba:	2201      	movs	r2, #1
 80155bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80155be:	4b4b      	ldr	r3, [pc, #300]	; (80156ec <USBD_CDC_Init+0x1ec>)
 80155c0:	781b      	ldrb	r3, [r3, #0]
 80155c2:	f003 020f 	and.w	r2, r3, #15
 80155c6:	6879      	ldr	r1, [r7, #4]
 80155c8:	4613      	mov	r3, r2
 80155ca:	009b      	lsls	r3, r3, #2
 80155cc:	4413      	add	r3, r2
 80155ce:	009b      	lsls	r3, r3, #2
 80155d0:	440b      	add	r3, r1
 80155d2:	3326      	adds	r3, #38	; 0x26
 80155d4:	2210      	movs	r2, #16
 80155d6:	801a      	strh	r2, [r3, #0]
 80155d8:	e035      	b.n	8015646 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80155da:	4b42      	ldr	r3, [pc, #264]	; (80156e4 <USBD_CDC_Init+0x1e4>)
 80155dc:	7819      	ldrb	r1, [r3, #0]
 80155de:	2340      	movs	r3, #64	; 0x40
 80155e0:	2202      	movs	r2, #2
 80155e2:	6878      	ldr	r0, [r7, #4]
 80155e4:	f005 fae5 	bl	801abb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80155e8:	4b3e      	ldr	r3, [pc, #248]	; (80156e4 <USBD_CDC_Init+0x1e4>)
 80155ea:	781b      	ldrb	r3, [r3, #0]
 80155ec:	f003 020f 	and.w	r2, r3, #15
 80155f0:	6879      	ldr	r1, [r7, #4]
 80155f2:	4613      	mov	r3, r2
 80155f4:	009b      	lsls	r3, r3, #2
 80155f6:	4413      	add	r3, r2
 80155f8:	009b      	lsls	r3, r3, #2
 80155fa:	440b      	add	r3, r1
 80155fc:	3324      	adds	r3, #36	; 0x24
 80155fe:	2201      	movs	r2, #1
 8015600:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015602:	4b39      	ldr	r3, [pc, #228]	; (80156e8 <USBD_CDC_Init+0x1e8>)
 8015604:	7819      	ldrb	r1, [r3, #0]
 8015606:	2340      	movs	r3, #64	; 0x40
 8015608:	2202      	movs	r2, #2
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f005 fad1 	bl	801abb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015610:	4b35      	ldr	r3, [pc, #212]	; (80156e8 <USBD_CDC_Init+0x1e8>)
 8015612:	781b      	ldrb	r3, [r3, #0]
 8015614:	f003 020f 	and.w	r2, r3, #15
 8015618:	6879      	ldr	r1, [r7, #4]
 801561a:	4613      	mov	r3, r2
 801561c:	009b      	lsls	r3, r3, #2
 801561e:	4413      	add	r3, r2
 8015620:	009b      	lsls	r3, r3, #2
 8015622:	440b      	add	r3, r1
 8015624:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015628:	2201      	movs	r2, #1
 801562a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801562c:	4b2f      	ldr	r3, [pc, #188]	; (80156ec <USBD_CDC_Init+0x1ec>)
 801562e:	781b      	ldrb	r3, [r3, #0]
 8015630:	f003 020f 	and.w	r2, r3, #15
 8015634:	6879      	ldr	r1, [r7, #4]
 8015636:	4613      	mov	r3, r2
 8015638:	009b      	lsls	r3, r3, #2
 801563a:	4413      	add	r3, r2
 801563c:	009b      	lsls	r3, r3, #2
 801563e:	440b      	add	r3, r1
 8015640:	3326      	adds	r3, #38	; 0x26
 8015642:	2210      	movs	r2, #16
 8015644:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015646:	4b29      	ldr	r3, [pc, #164]	; (80156ec <USBD_CDC_Init+0x1ec>)
 8015648:	7819      	ldrb	r1, [r3, #0]
 801564a:	2308      	movs	r3, #8
 801564c:	2203      	movs	r2, #3
 801564e:	6878      	ldr	r0, [r7, #4]
 8015650:	f005 faaf 	bl	801abb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015654:	4b25      	ldr	r3, [pc, #148]	; (80156ec <USBD_CDC_Init+0x1ec>)
 8015656:	781b      	ldrb	r3, [r3, #0]
 8015658:	f003 020f 	and.w	r2, r3, #15
 801565c:	6879      	ldr	r1, [r7, #4]
 801565e:	4613      	mov	r3, r2
 8015660:	009b      	lsls	r3, r3, #2
 8015662:	4413      	add	r3, r2
 8015664:	009b      	lsls	r3, r3, #2
 8015666:	440b      	add	r3, r1
 8015668:	3324      	adds	r3, #36	; 0x24
 801566a:	2201      	movs	r2, #1
 801566c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	2200      	movs	r2, #0
 8015672:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801567c:	687a      	ldr	r2, [r7, #4]
 801567e:	33b0      	adds	r3, #176	; 0xb0
 8015680:	009b      	lsls	r3, r3, #2
 8015682:	4413      	add	r3, r2
 8015684:	685b      	ldr	r3, [r3, #4]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	2200      	movs	r2, #0
 801568e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	2200      	movs	r2, #0
 8015696:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d101      	bne.n	80156a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80156a4:	2302      	movs	r3, #2
 80156a6:	e018      	b.n	80156da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	7c1b      	ldrb	r3, [r3, #16]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d10a      	bne.n	80156c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80156b0:	4b0d      	ldr	r3, [pc, #52]	; (80156e8 <USBD_CDC_Init+0x1e8>)
 80156b2:	7819      	ldrb	r1, [r3, #0]
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80156ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80156be:	6878      	ldr	r0, [r7, #4]
 80156c0:	f005 fb66 	bl	801ad90 <USBD_LL_PrepareReceive>
 80156c4:	e008      	b.n	80156d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80156c6:	4b08      	ldr	r3, [pc, #32]	; (80156e8 <USBD_CDC_Init+0x1e8>)
 80156c8:	7819      	ldrb	r1, [r3, #0]
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80156d0:	2340      	movs	r3, #64	; 0x40
 80156d2:	6878      	ldr	r0, [r7, #4]
 80156d4:	f005 fb5c 	bl	801ad90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80156d8:	2300      	movs	r3, #0
}
 80156da:	4618      	mov	r0, r3
 80156dc:	3710      	adds	r7, #16
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}
 80156e2:	bf00      	nop
 80156e4:	24000097 	.word	0x24000097
 80156e8:	24000098 	.word	0x24000098
 80156ec:	24000099 	.word	0x24000099

080156f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b082      	sub	sp, #8
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
 80156f8:	460b      	mov	r3, r1
 80156fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80156fc:	4b3a      	ldr	r3, [pc, #232]	; (80157e8 <USBD_CDC_DeInit+0xf8>)
 80156fe:	781b      	ldrb	r3, [r3, #0]
 8015700:	4619      	mov	r1, r3
 8015702:	6878      	ldr	r0, [r7, #4]
 8015704:	f005 fa7b 	bl	801abfe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015708:	4b37      	ldr	r3, [pc, #220]	; (80157e8 <USBD_CDC_DeInit+0xf8>)
 801570a:	781b      	ldrb	r3, [r3, #0]
 801570c:	f003 020f 	and.w	r2, r3, #15
 8015710:	6879      	ldr	r1, [r7, #4]
 8015712:	4613      	mov	r3, r2
 8015714:	009b      	lsls	r3, r3, #2
 8015716:	4413      	add	r3, r2
 8015718:	009b      	lsls	r3, r3, #2
 801571a:	440b      	add	r3, r1
 801571c:	3324      	adds	r3, #36	; 0x24
 801571e:	2200      	movs	r2, #0
 8015720:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015722:	4b32      	ldr	r3, [pc, #200]	; (80157ec <USBD_CDC_DeInit+0xfc>)
 8015724:	781b      	ldrb	r3, [r3, #0]
 8015726:	4619      	mov	r1, r3
 8015728:	6878      	ldr	r0, [r7, #4]
 801572a:	f005 fa68 	bl	801abfe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801572e:	4b2f      	ldr	r3, [pc, #188]	; (80157ec <USBD_CDC_DeInit+0xfc>)
 8015730:	781b      	ldrb	r3, [r3, #0]
 8015732:	f003 020f 	and.w	r2, r3, #15
 8015736:	6879      	ldr	r1, [r7, #4]
 8015738:	4613      	mov	r3, r2
 801573a:	009b      	lsls	r3, r3, #2
 801573c:	4413      	add	r3, r2
 801573e:	009b      	lsls	r3, r3, #2
 8015740:	440b      	add	r3, r1
 8015742:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015746:	2200      	movs	r2, #0
 8015748:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801574a:	4b29      	ldr	r3, [pc, #164]	; (80157f0 <USBD_CDC_DeInit+0x100>)
 801574c:	781b      	ldrb	r3, [r3, #0]
 801574e:	4619      	mov	r1, r3
 8015750:	6878      	ldr	r0, [r7, #4]
 8015752:	f005 fa54 	bl	801abfe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015756:	4b26      	ldr	r3, [pc, #152]	; (80157f0 <USBD_CDC_DeInit+0x100>)
 8015758:	781b      	ldrb	r3, [r3, #0]
 801575a:	f003 020f 	and.w	r2, r3, #15
 801575e:	6879      	ldr	r1, [r7, #4]
 8015760:	4613      	mov	r3, r2
 8015762:	009b      	lsls	r3, r3, #2
 8015764:	4413      	add	r3, r2
 8015766:	009b      	lsls	r3, r3, #2
 8015768:	440b      	add	r3, r1
 801576a:	3324      	adds	r3, #36	; 0x24
 801576c:	2200      	movs	r2, #0
 801576e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015770:	4b1f      	ldr	r3, [pc, #124]	; (80157f0 <USBD_CDC_DeInit+0x100>)
 8015772:	781b      	ldrb	r3, [r3, #0]
 8015774:	f003 020f 	and.w	r2, r3, #15
 8015778:	6879      	ldr	r1, [r7, #4]
 801577a:	4613      	mov	r3, r2
 801577c:	009b      	lsls	r3, r3, #2
 801577e:	4413      	add	r3, r2
 8015780:	009b      	lsls	r3, r3, #2
 8015782:	440b      	add	r3, r1
 8015784:	3326      	adds	r3, #38	; 0x26
 8015786:	2200      	movs	r2, #0
 8015788:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	32b0      	adds	r2, #176	; 0xb0
 8015794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d01f      	beq.n	80157dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80157a2:	687a      	ldr	r2, [r7, #4]
 80157a4:	33b0      	adds	r3, #176	; 0xb0
 80157a6:	009b      	lsls	r3, r3, #2
 80157a8:	4413      	add	r3, r2
 80157aa:	685b      	ldr	r3, [r3, #4]
 80157ac:	685b      	ldr	r3, [r3, #4]
 80157ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	32b0      	adds	r2, #176	; 0xb0
 80157ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157be:	4618      	mov	r0, r3
 80157c0:	f005 fb28 	bl	801ae14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	32b0      	adds	r2, #176	; 0xb0
 80157ce:	2100      	movs	r1, #0
 80157d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	2200      	movs	r2, #0
 80157d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80157dc:	2300      	movs	r3, #0
}
 80157de:	4618      	mov	r0, r3
 80157e0:	3708      	adds	r7, #8
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}
 80157e6:	bf00      	nop
 80157e8:	24000097 	.word	0x24000097
 80157ec:	24000098 	.word	0x24000098
 80157f0:	24000099 	.word	0x24000099

080157f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b086      	sub	sp, #24
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	6078      	str	r0, [r7, #4]
 80157fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	32b0      	adds	r2, #176	; 0xb0
 8015808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801580c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801580e:	2300      	movs	r3, #0
 8015810:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015812:	2300      	movs	r3, #0
 8015814:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015816:	2300      	movs	r3, #0
 8015818:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801581a:	693b      	ldr	r3, [r7, #16]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d101      	bne.n	8015824 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015820:	2303      	movs	r3, #3
 8015822:	e0bf      	b.n	80159a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015824:	683b      	ldr	r3, [r7, #0]
 8015826:	781b      	ldrb	r3, [r3, #0]
 8015828:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801582c:	2b00      	cmp	r3, #0
 801582e:	d050      	beq.n	80158d2 <USBD_CDC_Setup+0xde>
 8015830:	2b20      	cmp	r3, #32
 8015832:	f040 80af 	bne.w	8015994 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015836:	683b      	ldr	r3, [r7, #0]
 8015838:	88db      	ldrh	r3, [r3, #6]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d03a      	beq.n	80158b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	781b      	ldrb	r3, [r3, #0]
 8015842:	b25b      	sxtb	r3, r3
 8015844:	2b00      	cmp	r3, #0
 8015846:	da1b      	bge.n	8015880 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801584e:	687a      	ldr	r2, [r7, #4]
 8015850:	33b0      	adds	r3, #176	; 0xb0
 8015852:	009b      	lsls	r3, r3, #2
 8015854:	4413      	add	r3, r2
 8015856:	685b      	ldr	r3, [r3, #4]
 8015858:	689b      	ldr	r3, [r3, #8]
 801585a:	683a      	ldr	r2, [r7, #0]
 801585c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801585e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015860:	683a      	ldr	r2, [r7, #0]
 8015862:	88d2      	ldrh	r2, [r2, #6]
 8015864:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015866:	683b      	ldr	r3, [r7, #0]
 8015868:	88db      	ldrh	r3, [r3, #6]
 801586a:	2b07      	cmp	r3, #7
 801586c:	bf28      	it	cs
 801586e:	2307      	movcs	r3, #7
 8015870:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015872:	693b      	ldr	r3, [r7, #16]
 8015874:	89fa      	ldrh	r2, [r7, #14]
 8015876:	4619      	mov	r1, r3
 8015878:	6878      	ldr	r0, [r7, #4]
 801587a:	f001 fd89 	bl	8017390 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801587e:	e090      	b.n	80159a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015880:	683b      	ldr	r3, [r7, #0]
 8015882:	785a      	ldrb	r2, [r3, #1]
 8015884:	693b      	ldr	r3, [r7, #16]
 8015886:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801588a:	683b      	ldr	r3, [r7, #0]
 801588c:	88db      	ldrh	r3, [r3, #6]
 801588e:	2b3f      	cmp	r3, #63	; 0x3f
 8015890:	d803      	bhi.n	801589a <USBD_CDC_Setup+0xa6>
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	88db      	ldrh	r3, [r3, #6]
 8015896:	b2da      	uxtb	r2, r3
 8015898:	e000      	b.n	801589c <USBD_CDC_Setup+0xa8>
 801589a:	2240      	movs	r2, #64	; 0x40
 801589c:	693b      	ldr	r3, [r7, #16]
 801589e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80158a2:	6939      	ldr	r1, [r7, #16]
 80158a4:	693b      	ldr	r3, [r7, #16]
 80158a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80158aa:	461a      	mov	r2, r3
 80158ac:	6878      	ldr	r0, [r7, #4]
 80158ae:	f001 fd9b 	bl	80173e8 <USBD_CtlPrepareRx>
      break;
 80158b2:	e076      	b.n	80159a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80158ba:	687a      	ldr	r2, [r7, #4]
 80158bc:	33b0      	adds	r3, #176	; 0xb0
 80158be:	009b      	lsls	r3, r3, #2
 80158c0:	4413      	add	r3, r2
 80158c2:	685b      	ldr	r3, [r3, #4]
 80158c4:	689b      	ldr	r3, [r3, #8]
 80158c6:	683a      	ldr	r2, [r7, #0]
 80158c8:	7850      	ldrb	r0, [r2, #1]
 80158ca:	2200      	movs	r2, #0
 80158cc:	6839      	ldr	r1, [r7, #0]
 80158ce:	4798      	blx	r3
      break;
 80158d0:	e067      	b.n	80159a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80158d2:	683b      	ldr	r3, [r7, #0]
 80158d4:	785b      	ldrb	r3, [r3, #1]
 80158d6:	2b0b      	cmp	r3, #11
 80158d8:	d851      	bhi.n	801597e <USBD_CDC_Setup+0x18a>
 80158da:	a201      	add	r2, pc, #4	; (adr r2, 80158e0 <USBD_CDC_Setup+0xec>)
 80158dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158e0:	08015911 	.word	0x08015911
 80158e4:	0801598d 	.word	0x0801598d
 80158e8:	0801597f 	.word	0x0801597f
 80158ec:	0801597f 	.word	0x0801597f
 80158f0:	0801597f 	.word	0x0801597f
 80158f4:	0801597f 	.word	0x0801597f
 80158f8:	0801597f 	.word	0x0801597f
 80158fc:	0801597f 	.word	0x0801597f
 8015900:	0801597f 	.word	0x0801597f
 8015904:	0801597f 	.word	0x0801597f
 8015908:	0801593b 	.word	0x0801593b
 801590c:	08015965 	.word	0x08015965
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015916:	b2db      	uxtb	r3, r3
 8015918:	2b03      	cmp	r3, #3
 801591a:	d107      	bne.n	801592c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801591c:	f107 030a 	add.w	r3, r7, #10
 8015920:	2202      	movs	r2, #2
 8015922:	4619      	mov	r1, r3
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	f001 fd33 	bl	8017390 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801592a:	e032      	b.n	8015992 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801592c:	6839      	ldr	r1, [r7, #0]
 801592e:	6878      	ldr	r0, [r7, #4]
 8015930:	f001 fcbd 	bl	80172ae <USBD_CtlError>
            ret = USBD_FAIL;
 8015934:	2303      	movs	r3, #3
 8015936:	75fb      	strb	r3, [r7, #23]
          break;
 8015938:	e02b      	b.n	8015992 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015940:	b2db      	uxtb	r3, r3
 8015942:	2b03      	cmp	r3, #3
 8015944:	d107      	bne.n	8015956 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015946:	f107 030d 	add.w	r3, r7, #13
 801594a:	2201      	movs	r2, #1
 801594c:	4619      	mov	r1, r3
 801594e:	6878      	ldr	r0, [r7, #4]
 8015950:	f001 fd1e 	bl	8017390 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015954:	e01d      	b.n	8015992 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015956:	6839      	ldr	r1, [r7, #0]
 8015958:	6878      	ldr	r0, [r7, #4]
 801595a:	f001 fca8 	bl	80172ae <USBD_CtlError>
            ret = USBD_FAIL;
 801595e:	2303      	movs	r3, #3
 8015960:	75fb      	strb	r3, [r7, #23]
          break;
 8015962:	e016      	b.n	8015992 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801596a:	b2db      	uxtb	r3, r3
 801596c:	2b03      	cmp	r3, #3
 801596e:	d00f      	beq.n	8015990 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015970:	6839      	ldr	r1, [r7, #0]
 8015972:	6878      	ldr	r0, [r7, #4]
 8015974:	f001 fc9b 	bl	80172ae <USBD_CtlError>
            ret = USBD_FAIL;
 8015978:	2303      	movs	r3, #3
 801597a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801597c:	e008      	b.n	8015990 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801597e:	6839      	ldr	r1, [r7, #0]
 8015980:	6878      	ldr	r0, [r7, #4]
 8015982:	f001 fc94 	bl	80172ae <USBD_CtlError>
          ret = USBD_FAIL;
 8015986:	2303      	movs	r3, #3
 8015988:	75fb      	strb	r3, [r7, #23]
          break;
 801598a:	e002      	b.n	8015992 <USBD_CDC_Setup+0x19e>
          break;
 801598c:	bf00      	nop
 801598e:	e008      	b.n	80159a2 <USBD_CDC_Setup+0x1ae>
          break;
 8015990:	bf00      	nop
      }
      break;
 8015992:	e006      	b.n	80159a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015994:	6839      	ldr	r1, [r7, #0]
 8015996:	6878      	ldr	r0, [r7, #4]
 8015998:	f001 fc89 	bl	80172ae <USBD_CtlError>
      ret = USBD_FAIL;
 801599c:	2303      	movs	r3, #3
 801599e:	75fb      	strb	r3, [r7, #23]
      break;
 80159a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80159a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80159a4:	4618      	mov	r0, r3
 80159a6:	3718      	adds	r7, #24
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}

080159ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b084      	sub	sp, #16
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
 80159b4:	460b      	mov	r3, r1
 80159b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80159be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	32b0      	adds	r2, #176	; 0xb0
 80159ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d101      	bne.n	80159d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80159d2:	2303      	movs	r3, #3
 80159d4:	e065      	b.n	8015aa2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	32b0      	adds	r2, #176	; 0xb0
 80159e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80159e6:	78fb      	ldrb	r3, [r7, #3]
 80159e8:	f003 020f 	and.w	r2, r3, #15
 80159ec:	6879      	ldr	r1, [r7, #4]
 80159ee:	4613      	mov	r3, r2
 80159f0:	009b      	lsls	r3, r3, #2
 80159f2:	4413      	add	r3, r2
 80159f4:	009b      	lsls	r3, r3, #2
 80159f6:	440b      	add	r3, r1
 80159f8:	3318      	adds	r3, #24
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d02f      	beq.n	8015a60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015a00:	78fb      	ldrb	r3, [r7, #3]
 8015a02:	f003 020f 	and.w	r2, r3, #15
 8015a06:	6879      	ldr	r1, [r7, #4]
 8015a08:	4613      	mov	r3, r2
 8015a0a:	009b      	lsls	r3, r3, #2
 8015a0c:	4413      	add	r3, r2
 8015a0e:	009b      	lsls	r3, r3, #2
 8015a10:	440b      	add	r3, r1
 8015a12:	3318      	adds	r3, #24
 8015a14:	681a      	ldr	r2, [r3, #0]
 8015a16:	78fb      	ldrb	r3, [r7, #3]
 8015a18:	f003 010f 	and.w	r1, r3, #15
 8015a1c:	68f8      	ldr	r0, [r7, #12]
 8015a1e:	460b      	mov	r3, r1
 8015a20:	00db      	lsls	r3, r3, #3
 8015a22:	440b      	add	r3, r1
 8015a24:	009b      	lsls	r3, r3, #2
 8015a26:	4403      	add	r3, r0
 8015a28:	3344      	adds	r3, #68	; 0x44
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8015a30:	fb01 f303 	mul.w	r3, r1, r3
 8015a34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d112      	bne.n	8015a60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015a3a:	78fb      	ldrb	r3, [r7, #3]
 8015a3c:	f003 020f 	and.w	r2, r3, #15
 8015a40:	6879      	ldr	r1, [r7, #4]
 8015a42:	4613      	mov	r3, r2
 8015a44:	009b      	lsls	r3, r3, #2
 8015a46:	4413      	add	r3, r2
 8015a48:	009b      	lsls	r3, r3, #2
 8015a4a:	440b      	add	r3, r1
 8015a4c:	3318      	adds	r3, #24
 8015a4e:	2200      	movs	r2, #0
 8015a50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015a52:	78f9      	ldrb	r1, [r7, #3]
 8015a54:	2300      	movs	r3, #0
 8015a56:	2200      	movs	r2, #0
 8015a58:	6878      	ldr	r0, [r7, #4]
 8015a5a:	f005 f978 	bl	801ad4e <USBD_LL_Transmit>
 8015a5e:	e01f      	b.n	8015aa0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015a60:	68bb      	ldr	r3, [r7, #8]
 8015a62:	2200      	movs	r2, #0
 8015a64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015a6e:	687a      	ldr	r2, [r7, #4]
 8015a70:	33b0      	adds	r3, #176	; 0xb0
 8015a72:	009b      	lsls	r3, r3, #2
 8015a74:	4413      	add	r3, r2
 8015a76:	685b      	ldr	r3, [r3, #4]
 8015a78:	691b      	ldr	r3, [r3, #16]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d010      	beq.n	8015aa0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015a84:	687a      	ldr	r2, [r7, #4]
 8015a86:	33b0      	adds	r3, #176	; 0xb0
 8015a88:	009b      	lsls	r3, r3, #2
 8015a8a:	4413      	add	r3, r2
 8015a8c:	685b      	ldr	r3, [r3, #4]
 8015a8e:	691b      	ldr	r3, [r3, #16]
 8015a90:	68ba      	ldr	r2, [r7, #8]
 8015a92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8015a96:	68ba      	ldr	r2, [r7, #8]
 8015a98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015a9c:	78fa      	ldrb	r2, [r7, #3]
 8015a9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015aa0:	2300      	movs	r3, #0
}
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	3710      	adds	r7, #16
 8015aa6:	46bd      	mov	sp, r7
 8015aa8:	bd80      	pop	{r7, pc}

08015aaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015aaa:	b580      	push	{r7, lr}
 8015aac:	b084      	sub	sp, #16
 8015aae:	af00      	add	r7, sp, #0
 8015ab0:	6078      	str	r0, [r7, #4]
 8015ab2:	460b      	mov	r3, r1
 8015ab4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	32b0      	adds	r2, #176	; 0xb0
 8015ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ac4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	32b0      	adds	r2, #176	; 0xb0
 8015ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d101      	bne.n	8015adc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015ad8:	2303      	movs	r3, #3
 8015ada:	e01a      	b.n	8015b12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015adc:	78fb      	ldrb	r3, [r7, #3]
 8015ade:	4619      	mov	r1, r3
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f005 f976 	bl	801add2 <USBD_LL_GetRxDataSize>
 8015ae6:	4602      	mov	r2, r0
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015af4:	687a      	ldr	r2, [r7, #4]
 8015af6:	33b0      	adds	r3, #176	; 0xb0
 8015af8:	009b      	lsls	r3, r3, #2
 8015afa:	4413      	add	r3, r2
 8015afc:	685b      	ldr	r3, [r3, #4]
 8015afe:	68db      	ldr	r3, [r3, #12]
 8015b00:	68fa      	ldr	r2, [r7, #12]
 8015b02:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8015b06:	68fa      	ldr	r2, [r7, #12]
 8015b08:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015b0c:	4611      	mov	r1, r2
 8015b0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015b10:	2300      	movs	r3, #0
}
 8015b12:	4618      	mov	r0, r3
 8015b14:	3710      	adds	r7, #16
 8015b16:	46bd      	mov	sp, r7
 8015b18:	bd80      	pop	{r7, pc}

08015b1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015b1a:	b580      	push	{r7, lr}
 8015b1c:	b084      	sub	sp, #16
 8015b1e:	af00      	add	r7, sp, #0
 8015b20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	32b0      	adds	r2, #176	; 0xb0
 8015b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d101      	bne.n	8015b3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015b38:	2303      	movs	r3, #3
 8015b3a:	e025      	b.n	8015b88 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015b42:	687a      	ldr	r2, [r7, #4]
 8015b44:	33b0      	adds	r3, #176	; 0xb0
 8015b46:	009b      	lsls	r3, r3, #2
 8015b48:	4413      	add	r3, r2
 8015b4a:	685b      	ldr	r3, [r3, #4]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d01a      	beq.n	8015b86 <USBD_CDC_EP0_RxReady+0x6c>
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015b56:	2bff      	cmp	r3, #255	; 0xff
 8015b58:	d015      	beq.n	8015b86 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015b60:	687a      	ldr	r2, [r7, #4]
 8015b62:	33b0      	adds	r3, #176	; 0xb0
 8015b64:	009b      	lsls	r3, r3, #2
 8015b66:	4413      	add	r3, r2
 8015b68:	685b      	ldr	r3, [r3, #4]
 8015b6a:	689b      	ldr	r3, [r3, #8]
 8015b6c:	68fa      	ldr	r2, [r7, #12]
 8015b6e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8015b72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015b74:	68fa      	ldr	r2, [r7, #12]
 8015b76:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015b7a:	b292      	uxth	r2, r2
 8015b7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	22ff      	movs	r2, #255	; 0xff
 8015b82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015b86:	2300      	movs	r3, #0
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3710      	adds	r7, #16
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd80      	pop	{r7, pc}

08015b90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b086      	sub	sp, #24
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015b98:	2182      	movs	r1, #130	; 0x82
 8015b9a:	4818      	ldr	r0, [pc, #96]	; (8015bfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015b9c:	f000 fd4f 	bl	801663e <USBD_GetEpDesc>
 8015ba0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015ba2:	2101      	movs	r1, #1
 8015ba4:	4815      	ldr	r0, [pc, #84]	; (8015bfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015ba6:	f000 fd4a 	bl	801663e <USBD_GetEpDesc>
 8015baa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015bac:	2181      	movs	r1, #129	; 0x81
 8015bae:	4813      	ldr	r0, [pc, #76]	; (8015bfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015bb0:	f000 fd45 	bl	801663e <USBD_GetEpDesc>
 8015bb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015bb6:	697b      	ldr	r3, [r7, #20]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d002      	beq.n	8015bc2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015bbc:	697b      	ldr	r3, [r7, #20]
 8015bbe:	2210      	movs	r2, #16
 8015bc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015bc2:	693b      	ldr	r3, [r7, #16]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d006      	beq.n	8015bd6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015bc8:	693b      	ldr	r3, [r7, #16]
 8015bca:	2200      	movs	r2, #0
 8015bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015bd0:	711a      	strb	r2, [r3, #4]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d006      	beq.n	8015bea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	2200      	movs	r2, #0
 8015be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015be4:	711a      	strb	r2, [r3, #4]
 8015be6:	2200      	movs	r2, #0
 8015be8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	2243      	movs	r2, #67	; 0x43
 8015bee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015bf0:	4b02      	ldr	r3, [pc, #8]	; (8015bfc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	3718      	adds	r7, #24
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}
 8015bfa:	bf00      	nop
 8015bfc:	24000054 	.word	0x24000054

08015c00 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b086      	sub	sp, #24
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015c08:	2182      	movs	r1, #130	; 0x82
 8015c0a:	4818      	ldr	r0, [pc, #96]	; (8015c6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015c0c:	f000 fd17 	bl	801663e <USBD_GetEpDesc>
 8015c10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015c12:	2101      	movs	r1, #1
 8015c14:	4815      	ldr	r0, [pc, #84]	; (8015c6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015c16:	f000 fd12 	bl	801663e <USBD_GetEpDesc>
 8015c1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015c1c:	2181      	movs	r1, #129	; 0x81
 8015c1e:	4813      	ldr	r0, [pc, #76]	; (8015c6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015c20:	f000 fd0d 	bl	801663e <USBD_GetEpDesc>
 8015c24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015c26:	697b      	ldr	r3, [r7, #20]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d002      	beq.n	8015c32 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015c2c:	697b      	ldr	r3, [r7, #20]
 8015c2e:	2210      	movs	r2, #16
 8015c30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015c32:	693b      	ldr	r3, [r7, #16]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d006      	beq.n	8015c46 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015c38:	693b      	ldr	r3, [r7, #16]
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	711a      	strb	r2, [r3, #4]
 8015c3e:	2200      	movs	r2, #0
 8015c40:	f042 0202 	orr.w	r2, r2, #2
 8015c44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d006      	beq.n	8015c5a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	2200      	movs	r2, #0
 8015c50:	711a      	strb	r2, [r3, #4]
 8015c52:	2200      	movs	r2, #0
 8015c54:	f042 0202 	orr.w	r2, r2, #2
 8015c58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	2243      	movs	r2, #67	; 0x43
 8015c5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015c60:	4b02      	ldr	r3, [pc, #8]	; (8015c6c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015c62:	4618      	mov	r0, r3
 8015c64:	3718      	adds	r7, #24
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd80      	pop	{r7, pc}
 8015c6a:	bf00      	nop
 8015c6c:	24000054 	.word	0x24000054

08015c70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b086      	sub	sp, #24
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015c78:	2182      	movs	r1, #130	; 0x82
 8015c7a:	4818      	ldr	r0, [pc, #96]	; (8015cdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015c7c:	f000 fcdf 	bl	801663e <USBD_GetEpDesc>
 8015c80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015c82:	2101      	movs	r1, #1
 8015c84:	4815      	ldr	r0, [pc, #84]	; (8015cdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015c86:	f000 fcda 	bl	801663e <USBD_GetEpDesc>
 8015c8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015c8c:	2181      	movs	r1, #129	; 0x81
 8015c8e:	4813      	ldr	r0, [pc, #76]	; (8015cdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015c90:	f000 fcd5 	bl	801663e <USBD_GetEpDesc>
 8015c94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015c96:	697b      	ldr	r3, [r7, #20]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d002      	beq.n	8015ca2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015c9c:	697b      	ldr	r3, [r7, #20]
 8015c9e:	2210      	movs	r2, #16
 8015ca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015ca2:	693b      	ldr	r3, [r7, #16]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d006      	beq.n	8015cb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015ca8:	693b      	ldr	r3, [r7, #16]
 8015caa:	2200      	movs	r2, #0
 8015cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015cb0:	711a      	strb	r2, [r3, #4]
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d006      	beq.n	8015cca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	2200      	movs	r2, #0
 8015cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015cc4:	711a      	strb	r2, [r3, #4]
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2243      	movs	r2, #67	; 0x43
 8015cce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015cd0:	4b02      	ldr	r3, [pc, #8]	; (8015cdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	3718      	adds	r7, #24
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	bd80      	pop	{r7, pc}
 8015cda:	bf00      	nop
 8015cdc:	24000054 	.word	0x24000054

08015ce0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015ce0:	b480      	push	{r7}
 8015ce2:	b083      	sub	sp, #12
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	220a      	movs	r2, #10
 8015cec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015cee:	4b03      	ldr	r3, [pc, #12]	; (8015cfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	370c      	adds	r7, #12
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cfa:	4770      	bx	lr
 8015cfc:	24000010 	.word	0x24000010

08015d00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015d00:	b480      	push	{r7}
 8015d02:	b083      	sub	sp, #12
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
 8015d08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015d0a:	683b      	ldr	r3, [r7, #0]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d101      	bne.n	8015d14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015d10:	2303      	movs	r3, #3
 8015d12:	e009      	b.n	8015d28 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015d1a:	687a      	ldr	r2, [r7, #4]
 8015d1c:	33b0      	adds	r3, #176	; 0xb0
 8015d1e:	009b      	lsls	r3, r3, #2
 8015d20:	4413      	add	r3, r2
 8015d22:	683a      	ldr	r2, [r7, #0]
 8015d24:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015d26:	2300      	movs	r3, #0
}
 8015d28:	4618      	mov	r0, r3
 8015d2a:	370c      	adds	r7, #12
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d32:	4770      	bx	lr

08015d34 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015d34:	b480      	push	{r7}
 8015d36:	b087      	sub	sp, #28
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	60f8      	str	r0, [r7, #12]
 8015d3c:	60b9      	str	r1, [r7, #8]
 8015d3e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	32b0      	adds	r2, #176	; 0xb0
 8015d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d4e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015d50:	697b      	ldr	r3, [r7, #20]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d101      	bne.n	8015d5a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015d56:	2303      	movs	r3, #3
 8015d58:	e008      	b.n	8015d6c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015d5a:	697b      	ldr	r3, [r7, #20]
 8015d5c:	68ba      	ldr	r2, [r7, #8]
 8015d5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015d62:	697b      	ldr	r3, [r7, #20]
 8015d64:	687a      	ldr	r2, [r7, #4]
 8015d66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015d6a:	2300      	movs	r3, #0
}
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	371c      	adds	r7, #28
 8015d70:	46bd      	mov	sp, r7
 8015d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d76:	4770      	bx	lr

08015d78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015d78:	b480      	push	{r7}
 8015d7a:	b085      	sub	sp, #20
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
 8015d80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	32b0      	adds	r2, #176	; 0xb0
 8015d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d101      	bne.n	8015d9c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015d98:	2303      	movs	r3, #3
 8015d9a:	e004      	b.n	8015da6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	683a      	ldr	r2, [r7, #0]
 8015da0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015da4:	2300      	movs	r3, #0
}
 8015da6:	4618      	mov	r0, r3
 8015da8:	3714      	adds	r7, #20
 8015daa:	46bd      	mov	sp, r7
 8015dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db0:	4770      	bx	lr
	...

08015db4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b084      	sub	sp, #16
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	32b0      	adds	r2, #176	; 0xb0
 8015dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015dca:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015dcc:	2301      	movs	r3, #1
 8015dce:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015dd0:	68bb      	ldr	r3, [r7, #8]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d101      	bne.n	8015dda <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015dd6:	2303      	movs	r3, #3
 8015dd8:	e025      	b.n	8015e26 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015dda:	68bb      	ldr	r3, [r7, #8]
 8015ddc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d11f      	bne.n	8015e24 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015de4:	68bb      	ldr	r3, [r7, #8]
 8015de6:	2201      	movs	r2, #1
 8015de8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015dec:	4b10      	ldr	r3, [pc, #64]	; (8015e30 <USBD_CDC_TransmitPacket+0x7c>)
 8015dee:	781b      	ldrb	r3, [r3, #0]
 8015df0:	f003 020f 	and.w	r2, r3, #15
 8015df4:	68bb      	ldr	r3, [r7, #8]
 8015df6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8015dfa:	6878      	ldr	r0, [r7, #4]
 8015dfc:	4613      	mov	r3, r2
 8015dfe:	009b      	lsls	r3, r3, #2
 8015e00:	4413      	add	r3, r2
 8015e02:	009b      	lsls	r3, r3, #2
 8015e04:	4403      	add	r3, r0
 8015e06:	3318      	adds	r3, #24
 8015e08:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015e0a:	4b09      	ldr	r3, [pc, #36]	; (8015e30 <USBD_CDC_TransmitPacket+0x7c>)
 8015e0c:	7819      	ldrb	r1, [r3, #0]
 8015e0e:	68bb      	ldr	r3, [r7, #8]
 8015e10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015e14:	68bb      	ldr	r3, [r7, #8]
 8015e16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015e1a:	6878      	ldr	r0, [r7, #4]
 8015e1c:	f004 ff97 	bl	801ad4e <USBD_LL_Transmit>

    ret = USBD_OK;
 8015e20:	2300      	movs	r3, #0
 8015e22:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e26:	4618      	mov	r0, r3
 8015e28:	3710      	adds	r7, #16
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	bd80      	pop	{r7, pc}
 8015e2e:	bf00      	nop
 8015e30:	24000097 	.word	0x24000097

08015e34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b084      	sub	sp, #16
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	32b0      	adds	r2, #176	; 0xb0
 8015e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e4a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	32b0      	adds	r2, #176	; 0xb0
 8015e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d101      	bne.n	8015e62 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015e5e:	2303      	movs	r3, #3
 8015e60:	e018      	b.n	8015e94 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	7c1b      	ldrb	r3, [r3, #16]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d10a      	bne.n	8015e80 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015e6a:	4b0c      	ldr	r3, [pc, #48]	; (8015e9c <USBD_CDC_ReceivePacket+0x68>)
 8015e6c:	7819      	ldrb	r1, [r3, #0]
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015e78:	6878      	ldr	r0, [r7, #4]
 8015e7a:	f004 ff89 	bl	801ad90 <USBD_LL_PrepareReceive>
 8015e7e:	e008      	b.n	8015e92 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015e80:	4b06      	ldr	r3, [pc, #24]	; (8015e9c <USBD_CDC_ReceivePacket+0x68>)
 8015e82:	7819      	ldrb	r1, [r3, #0]
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015e8a:	2340      	movs	r3, #64	; 0x40
 8015e8c:	6878      	ldr	r0, [r7, #4]
 8015e8e:	f004 ff7f 	bl	801ad90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015e92:	2300      	movs	r3, #0
}
 8015e94:	4618      	mov	r0, r3
 8015e96:	3710      	adds	r7, #16
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	bd80      	pop	{r7, pc}
 8015e9c:	24000098 	.word	0x24000098

08015ea0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015ea0:	b580      	push	{r7, lr}
 8015ea2:	b086      	sub	sp, #24
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	60f8      	str	r0, [r7, #12]
 8015ea8:	60b9      	str	r1, [r7, #8]
 8015eaa:	4613      	mov	r3, r2
 8015eac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d101      	bne.n	8015eb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015eb4:	2303      	movs	r3, #3
 8015eb6:	e01f      	b.n	8015ef8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	2200      	movs	r2, #0
 8015ebc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	2200      	movs	r2, #0
 8015ecc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015ed0:	68bb      	ldr	r3, [r7, #8]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d003      	beq.n	8015ede <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	68ba      	ldr	r2, [r7, #8]
 8015eda:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	2201      	movs	r2, #1
 8015ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	79fa      	ldrb	r2, [r7, #7]
 8015eea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015eec:	68f8      	ldr	r0, [r7, #12]
 8015eee:	f004 fdf3 	bl	801aad8 <USBD_LL_Init>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ef8:	4618      	mov	r0, r3
 8015efa:	3718      	adds	r7, #24
 8015efc:	46bd      	mov	sp, r7
 8015efe:	bd80      	pop	{r7, pc}

08015f00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b084      	sub	sp, #16
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	6078      	str	r0, [r7, #4]
 8015f08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015f0e:	683b      	ldr	r3, [r7, #0]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d101      	bne.n	8015f18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015f14:	2303      	movs	r3, #3
 8015f16:	e025      	b.n	8015f64 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	683a      	ldr	r2, [r7, #0]
 8015f1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	32ae      	adds	r2, #174	; 0xae
 8015f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d00f      	beq.n	8015f54 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	32ae      	adds	r2, #174	; 0xae
 8015f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f44:	f107 020e 	add.w	r2, r7, #14
 8015f48:	4610      	mov	r0, r2
 8015f4a:	4798      	blx	r3
 8015f4c:	4602      	mov	r2, r0
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015f5a:	1c5a      	adds	r2, r3, #1
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015f62:	2300      	movs	r3, #0
}
 8015f64:	4618      	mov	r0, r3
 8015f66:	3710      	adds	r7, #16
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	bd80      	pop	{r7, pc}

08015f6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b082      	sub	sp, #8
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f004 fe01 	bl	801ab7c <USBD_LL_Start>
 8015f7a:	4603      	mov	r3, r0
}
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	3708      	adds	r7, #8
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bd80      	pop	{r7, pc}

08015f84 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015f84:	b480      	push	{r7}
 8015f86:	b083      	sub	sp, #12
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015f8c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015f8e:	4618      	mov	r0, r3
 8015f90:	370c      	adds	r7, #12
 8015f92:	46bd      	mov	sp, r7
 8015f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f98:	4770      	bx	lr

08015f9a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015f9a:	b580      	push	{r7, lr}
 8015f9c:	b084      	sub	sp, #16
 8015f9e:	af00      	add	r7, sp, #0
 8015fa0:	6078      	str	r0, [r7, #4]
 8015fa2:	460b      	mov	r3, r1
 8015fa4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d009      	beq.n	8015fc8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	78fa      	ldrb	r2, [r7, #3]
 8015fbe:	4611      	mov	r1, r2
 8015fc0:	6878      	ldr	r0, [r7, #4]
 8015fc2:	4798      	blx	r3
 8015fc4:	4603      	mov	r3, r0
 8015fc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fca:	4618      	mov	r0, r3
 8015fcc:	3710      	adds	r7, #16
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	bd80      	pop	{r7, pc}

08015fd2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015fd2:	b580      	push	{r7, lr}
 8015fd4:	b084      	sub	sp, #16
 8015fd6:	af00      	add	r7, sp, #0
 8015fd8:	6078      	str	r0, [r7, #4]
 8015fda:	460b      	mov	r3, r1
 8015fdc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015fde:	2300      	movs	r3, #0
 8015fe0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fe8:	685b      	ldr	r3, [r3, #4]
 8015fea:	78fa      	ldrb	r2, [r7, #3]
 8015fec:	4611      	mov	r1, r2
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	4798      	blx	r3
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d001      	beq.n	8015ffc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015ff8:	2303      	movs	r3, #3
 8015ffa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ffe:	4618      	mov	r0, r3
 8016000:	3710      	adds	r7, #16
 8016002:	46bd      	mov	sp, r7
 8016004:	bd80      	pop	{r7, pc}

08016006 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016006:	b580      	push	{r7, lr}
 8016008:	b084      	sub	sp, #16
 801600a:	af00      	add	r7, sp, #0
 801600c:	6078      	str	r0, [r7, #4]
 801600e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016016:	6839      	ldr	r1, [r7, #0]
 8016018:	4618      	mov	r0, r3
 801601a:	f001 f90e 	bl	801723a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	2201      	movs	r2, #1
 8016022:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801602c:	461a      	mov	r2, r3
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801603a:	f003 031f 	and.w	r3, r3, #31
 801603e:	2b02      	cmp	r3, #2
 8016040:	d01a      	beq.n	8016078 <USBD_LL_SetupStage+0x72>
 8016042:	2b02      	cmp	r3, #2
 8016044:	d822      	bhi.n	801608c <USBD_LL_SetupStage+0x86>
 8016046:	2b00      	cmp	r3, #0
 8016048:	d002      	beq.n	8016050 <USBD_LL_SetupStage+0x4a>
 801604a:	2b01      	cmp	r3, #1
 801604c:	d00a      	beq.n	8016064 <USBD_LL_SetupStage+0x5e>
 801604e:	e01d      	b.n	801608c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016056:	4619      	mov	r1, r3
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	f000 fb65 	bl	8016728 <USBD_StdDevReq>
 801605e:	4603      	mov	r3, r0
 8016060:	73fb      	strb	r3, [r7, #15]
      break;
 8016062:	e020      	b.n	80160a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801606a:	4619      	mov	r1, r3
 801606c:	6878      	ldr	r0, [r7, #4]
 801606e:	f000 fbcd 	bl	801680c <USBD_StdItfReq>
 8016072:	4603      	mov	r3, r0
 8016074:	73fb      	strb	r3, [r7, #15]
      break;
 8016076:	e016      	b.n	80160a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801607e:	4619      	mov	r1, r3
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f000 fc2f 	bl	80168e4 <USBD_StdEPReq>
 8016086:	4603      	mov	r3, r0
 8016088:	73fb      	strb	r3, [r7, #15]
      break;
 801608a:	e00c      	b.n	80160a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016092:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016096:	b2db      	uxtb	r3, r3
 8016098:	4619      	mov	r1, r3
 801609a:	6878      	ldr	r0, [r7, #4]
 801609c:	f004 fdce 	bl	801ac3c <USBD_LL_StallEP>
 80160a0:	4603      	mov	r3, r0
 80160a2:	73fb      	strb	r3, [r7, #15]
      break;
 80160a4:	bf00      	nop
  }

  return ret;
 80160a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80160a8:	4618      	mov	r0, r3
 80160aa:	3710      	adds	r7, #16
 80160ac:	46bd      	mov	sp, r7
 80160ae:	bd80      	pop	{r7, pc}

080160b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b086      	sub	sp, #24
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	60f8      	str	r0, [r7, #12]
 80160b8:	460b      	mov	r3, r1
 80160ba:	607a      	str	r2, [r7, #4]
 80160bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80160be:	2300      	movs	r3, #0
 80160c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80160c2:	7afb      	ldrb	r3, [r7, #11]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d16e      	bne.n	80161a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80160ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80160d6:	2b03      	cmp	r3, #3
 80160d8:	f040 8098 	bne.w	801620c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80160dc:	693b      	ldr	r3, [r7, #16]
 80160de:	689a      	ldr	r2, [r3, #8]
 80160e0:	693b      	ldr	r3, [r7, #16]
 80160e2:	68db      	ldr	r3, [r3, #12]
 80160e4:	429a      	cmp	r2, r3
 80160e6:	d913      	bls.n	8016110 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80160e8:	693b      	ldr	r3, [r7, #16]
 80160ea:	689a      	ldr	r2, [r3, #8]
 80160ec:	693b      	ldr	r3, [r7, #16]
 80160ee:	68db      	ldr	r3, [r3, #12]
 80160f0:	1ad2      	subs	r2, r2, r3
 80160f2:	693b      	ldr	r3, [r7, #16]
 80160f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80160f6:	693b      	ldr	r3, [r7, #16]
 80160f8:	68da      	ldr	r2, [r3, #12]
 80160fa:	693b      	ldr	r3, [r7, #16]
 80160fc:	689b      	ldr	r3, [r3, #8]
 80160fe:	4293      	cmp	r3, r2
 8016100:	bf28      	it	cs
 8016102:	4613      	movcs	r3, r2
 8016104:	461a      	mov	r2, r3
 8016106:	6879      	ldr	r1, [r7, #4]
 8016108:	68f8      	ldr	r0, [r7, #12]
 801610a:	f001 f98a 	bl	8017422 <USBD_CtlContinueRx>
 801610e:	e07d      	b.n	801620c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016116:	f003 031f 	and.w	r3, r3, #31
 801611a:	2b02      	cmp	r3, #2
 801611c:	d014      	beq.n	8016148 <USBD_LL_DataOutStage+0x98>
 801611e:	2b02      	cmp	r3, #2
 8016120:	d81d      	bhi.n	801615e <USBD_LL_DataOutStage+0xae>
 8016122:	2b00      	cmp	r3, #0
 8016124:	d002      	beq.n	801612c <USBD_LL_DataOutStage+0x7c>
 8016126:	2b01      	cmp	r3, #1
 8016128:	d003      	beq.n	8016132 <USBD_LL_DataOutStage+0x82>
 801612a:	e018      	b.n	801615e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801612c:	2300      	movs	r3, #0
 801612e:	75bb      	strb	r3, [r7, #22]
            break;
 8016130:	e018      	b.n	8016164 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016138:	b2db      	uxtb	r3, r3
 801613a:	4619      	mov	r1, r3
 801613c:	68f8      	ldr	r0, [r7, #12]
 801613e:	f000 fa64 	bl	801660a <USBD_CoreFindIF>
 8016142:	4603      	mov	r3, r0
 8016144:	75bb      	strb	r3, [r7, #22]
            break;
 8016146:	e00d      	b.n	8016164 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801614e:	b2db      	uxtb	r3, r3
 8016150:	4619      	mov	r1, r3
 8016152:	68f8      	ldr	r0, [r7, #12]
 8016154:	f000 fa66 	bl	8016624 <USBD_CoreFindEP>
 8016158:	4603      	mov	r3, r0
 801615a:	75bb      	strb	r3, [r7, #22]
            break;
 801615c:	e002      	b.n	8016164 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801615e:	2300      	movs	r3, #0
 8016160:	75bb      	strb	r3, [r7, #22]
            break;
 8016162:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016164:	7dbb      	ldrb	r3, [r7, #22]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d119      	bne.n	801619e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016170:	b2db      	uxtb	r3, r3
 8016172:	2b03      	cmp	r3, #3
 8016174:	d113      	bne.n	801619e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8016176:	7dba      	ldrb	r2, [r7, #22]
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	32ae      	adds	r2, #174	; 0xae
 801617c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016180:	691b      	ldr	r3, [r3, #16]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d00b      	beq.n	801619e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8016186:	7dba      	ldrb	r2, [r7, #22]
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801618e:	7dba      	ldrb	r2, [r7, #22]
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	32ae      	adds	r2, #174	; 0xae
 8016194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016198:	691b      	ldr	r3, [r3, #16]
 801619a:	68f8      	ldr	r0, [r7, #12]
 801619c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801619e:	68f8      	ldr	r0, [r7, #12]
 80161a0:	f001 f950 	bl	8017444 <USBD_CtlSendStatus>
 80161a4:	e032      	b.n	801620c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80161a6:	7afb      	ldrb	r3, [r7, #11]
 80161a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80161ac:	b2db      	uxtb	r3, r3
 80161ae:	4619      	mov	r1, r3
 80161b0:	68f8      	ldr	r0, [r7, #12]
 80161b2:	f000 fa37 	bl	8016624 <USBD_CoreFindEP>
 80161b6:	4603      	mov	r3, r0
 80161b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80161ba:	7dbb      	ldrb	r3, [r7, #22]
 80161bc:	2bff      	cmp	r3, #255	; 0xff
 80161be:	d025      	beq.n	801620c <USBD_LL_DataOutStage+0x15c>
 80161c0:	7dbb      	ldrb	r3, [r7, #22]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d122      	bne.n	801620c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161cc:	b2db      	uxtb	r3, r3
 80161ce:	2b03      	cmp	r3, #3
 80161d0:	d117      	bne.n	8016202 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80161d2:	7dba      	ldrb	r2, [r7, #22]
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	32ae      	adds	r2, #174	; 0xae
 80161d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161dc:	699b      	ldr	r3, [r3, #24]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d00f      	beq.n	8016202 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80161e2:	7dba      	ldrb	r2, [r7, #22]
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80161ea:	7dba      	ldrb	r2, [r7, #22]
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	32ae      	adds	r2, #174	; 0xae
 80161f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161f4:	699b      	ldr	r3, [r3, #24]
 80161f6:	7afa      	ldrb	r2, [r7, #11]
 80161f8:	4611      	mov	r1, r2
 80161fa:	68f8      	ldr	r0, [r7, #12]
 80161fc:	4798      	blx	r3
 80161fe:	4603      	mov	r3, r0
 8016200:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8016202:	7dfb      	ldrb	r3, [r7, #23]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d001      	beq.n	801620c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016208:	7dfb      	ldrb	r3, [r7, #23]
 801620a:	e000      	b.n	801620e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801620c:	2300      	movs	r3, #0
}
 801620e:	4618      	mov	r0, r3
 8016210:	3718      	adds	r7, #24
 8016212:	46bd      	mov	sp, r7
 8016214:	bd80      	pop	{r7, pc}

08016216 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016216:	b580      	push	{r7, lr}
 8016218:	b086      	sub	sp, #24
 801621a:	af00      	add	r7, sp, #0
 801621c:	60f8      	str	r0, [r7, #12]
 801621e:	460b      	mov	r3, r1
 8016220:	607a      	str	r2, [r7, #4]
 8016222:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016224:	7afb      	ldrb	r3, [r7, #11]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d16f      	bne.n	801630a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	3314      	adds	r3, #20
 801622e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016236:	2b02      	cmp	r3, #2
 8016238:	d15a      	bne.n	80162f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801623a:	693b      	ldr	r3, [r7, #16]
 801623c:	689a      	ldr	r2, [r3, #8]
 801623e:	693b      	ldr	r3, [r7, #16]
 8016240:	68db      	ldr	r3, [r3, #12]
 8016242:	429a      	cmp	r2, r3
 8016244:	d914      	bls.n	8016270 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016246:	693b      	ldr	r3, [r7, #16]
 8016248:	689a      	ldr	r2, [r3, #8]
 801624a:	693b      	ldr	r3, [r7, #16]
 801624c:	68db      	ldr	r3, [r3, #12]
 801624e:	1ad2      	subs	r2, r2, r3
 8016250:	693b      	ldr	r3, [r7, #16]
 8016252:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016254:	693b      	ldr	r3, [r7, #16]
 8016256:	689b      	ldr	r3, [r3, #8]
 8016258:	461a      	mov	r2, r3
 801625a:	6879      	ldr	r1, [r7, #4]
 801625c:	68f8      	ldr	r0, [r7, #12]
 801625e:	f001 f8b2 	bl	80173c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016262:	2300      	movs	r3, #0
 8016264:	2200      	movs	r2, #0
 8016266:	2100      	movs	r1, #0
 8016268:	68f8      	ldr	r0, [r7, #12]
 801626a:	f004 fd91 	bl	801ad90 <USBD_LL_PrepareReceive>
 801626e:	e03f      	b.n	80162f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016270:	693b      	ldr	r3, [r7, #16]
 8016272:	68da      	ldr	r2, [r3, #12]
 8016274:	693b      	ldr	r3, [r7, #16]
 8016276:	689b      	ldr	r3, [r3, #8]
 8016278:	429a      	cmp	r2, r3
 801627a:	d11c      	bne.n	80162b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801627c:	693b      	ldr	r3, [r7, #16]
 801627e:	685a      	ldr	r2, [r3, #4]
 8016280:	693b      	ldr	r3, [r7, #16]
 8016282:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016284:	429a      	cmp	r2, r3
 8016286:	d316      	bcc.n	80162b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016288:	693b      	ldr	r3, [r7, #16]
 801628a:	685a      	ldr	r2, [r3, #4]
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016292:	429a      	cmp	r2, r3
 8016294:	d20f      	bcs.n	80162b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016296:	2200      	movs	r2, #0
 8016298:	2100      	movs	r1, #0
 801629a:	68f8      	ldr	r0, [r7, #12]
 801629c:	f001 f893 	bl	80173c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	2200      	movs	r2, #0
 80162a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80162a8:	2300      	movs	r3, #0
 80162aa:	2200      	movs	r2, #0
 80162ac:	2100      	movs	r1, #0
 80162ae:	68f8      	ldr	r0, [r7, #12]
 80162b0:	f004 fd6e 	bl	801ad90 <USBD_LL_PrepareReceive>
 80162b4:	e01c      	b.n	80162f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162bc:	b2db      	uxtb	r3, r3
 80162be:	2b03      	cmp	r3, #3
 80162c0:	d10f      	bne.n	80162e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162c8:	68db      	ldr	r3, [r3, #12]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d009      	beq.n	80162e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	2200      	movs	r2, #0
 80162d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162dc:	68db      	ldr	r3, [r3, #12]
 80162de:	68f8      	ldr	r0, [r7, #12]
 80162e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80162e2:	2180      	movs	r1, #128	; 0x80
 80162e4:	68f8      	ldr	r0, [r7, #12]
 80162e6:	f004 fca9 	bl	801ac3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80162ea:	68f8      	ldr	r0, [r7, #12]
 80162ec:	f001 f8bd 	bl	801746a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d03a      	beq.n	8016370 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80162fa:	68f8      	ldr	r0, [r7, #12]
 80162fc:	f7ff fe42 	bl	8015f84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	2200      	movs	r2, #0
 8016304:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016308:	e032      	b.n	8016370 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801630a:	7afb      	ldrb	r3, [r7, #11]
 801630c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016310:	b2db      	uxtb	r3, r3
 8016312:	4619      	mov	r1, r3
 8016314:	68f8      	ldr	r0, [r7, #12]
 8016316:	f000 f985 	bl	8016624 <USBD_CoreFindEP>
 801631a:	4603      	mov	r3, r0
 801631c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801631e:	7dfb      	ldrb	r3, [r7, #23]
 8016320:	2bff      	cmp	r3, #255	; 0xff
 8016322:	d025      	beq.n	8016370 <USBD_LL_DataInStage+0x15a>
 8016324:	7dfb      	ldrb	r3, [r7, #23]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d122      	bne.n	8016370 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016330:	b2db      	uxtb	r3, r3
 8016332:	2b03      	cmp	r3, #3
 8016334:	d11c      	bne.n	8016370 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016336:	7dfa      	ldrb	r2, [r7, #23]
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	32ae      	adds	r2, #174	; 0xae
 801633c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016340:	695b      	ldr	r3, [r3, #20]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d014      	beq.n	8016370 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8016346:	7dfa      	ldrb	r2, [r7, #23]
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801634e:	7dfa      	ldrb	r2, [r7, #23]
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	32ae      	adds	r2, #174	; 0xae
 8016354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016358:	695b      	ldr	r3, [r3, #20]
 801635a:	7afa      	ldrb	r2, [r7, #11]
 801635c:	4611      	mov	r1, r2
 801635e:	68f8      	ldr	r0, [r7, #12]
 8016360:	4798      	blx	r3
 8016362:	4603      	mov	r3, r0
 8016364:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8016366:	7dbb      	ldrb	r3, [r7, #22]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d001      	beq.n	8016370 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801636c:	7dbb      	ldrb	r3, [r7, #22]
 801636e:	e000      	b.n	8016372 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016370:	2300      	movs	r3, #0
}
 8016372:	4618      	mov	r0, r3
 8016374:	3718      	adds	r7, #24
 8016376:	46bd      	mov	sp, r7
 8016378:	bd80      	pop	{r7, pc}

0801637a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801637a:	b580      	push	{r7, lr}
 801637c:	b084      	sub	sp, #16
 801637e:	af00      	add	r7, sp, #0
 8016380:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016382:	2300      	movs	r3, #0
 8016384:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	2201      	movs	r2, #1
 801638a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	2200      	movs	r2, #0
 8016392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	2200      	movs	r2, #0
 801639a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	2200      	movs	r2, #0
 80163a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	2200      	movs	r2, #0
 80163a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d014      	beq.n	80163e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163bc:	685b      	ldr	r3, [r3, #4]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d00e      	beq.n	80163e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163c8:	685b      	ldr	r3, [r3, #4]
 80163ca:	687a      	ldr	r2, [r7, #4]
 80163cc:	6852      	ldr	r2, [r2, #4]
 80163ce:	b2d2      	uxtb	r2, r2
 80163d0:	4611      	mov	r1, r2
 80163d2:	6878      	ldr	r0, [r7, #4]
 80163d4:	4798      	blx	r3
 80163d6:	4603      	mov	r3, r0
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d001      	beq.n	80163e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80163dc:	2303      	movs	r3, #3
 80163de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80163e0:	2340      	movs	r3, #64	; 0x40
 80163e2:	2200      	movs	r2, #0
 80163e4:	2100      	movs	r1, #0
 80163e6:	6878      	ldr	r0, [r7, #4]
 80163e8:	f004 fbe3 	bl	801abb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	2201      	movs	r2, #1
 80163f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2240      	movs	r2, #64	; 0x40
 80163f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80163fc:	2340      	movs	r3, #64	; 0x40
 80163fe:	2200      	movs	r2, #0
 8016400:	2180      	movs	r1, #128	; 0x80
 8016402:	6878      	ldr	r0, [r7, #4]
 8016404:	f004 fbd5 	bl	801abb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	2201      	movs	r2, #1
 801640c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	2240      	movs	r2, #64	; 0x40
 8016412:	621a      	str	r2, [r3, #32]

  return ret;
 8016414:	7bfb      	ldrb	r3, [r7, #15]
}
 8016416:	4618      	mov	r0, r3
 8016418:	3710      	adds	r7, #16
 801641a:	46bd      	mov	sp, r7
 801641c:	bd80      	pop	{r7, pc}

0801641e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801641e:	b480      	push	{r7}
 8016420:	b083      	sub	sp, #12
 8016422:	af00      	add	r7, sp, #0
 8016424:	6078      	str	r0, [r7, #4]
 8016426:	460b      	mov	r3, r1
 8016428:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	78fa      	ldrb	r2, [r7, #3]
 801642e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016430:	2300      	movs	r3, #0
}
 8016432:	4618      	mov	r0, r3
 8016434:	370c      	adds	r7, #12
 8016436:	46bd      	mov	sp, r7
 8016438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801643c:	4770      	bx	lr

0801643e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801643e:	b480      	push	{r7}
 8016440:	b083      	sub	sp, #12
 8016442:	af00      	add	r7, sp, #0
 8016444:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801644c:	b2db      	uxtb	r3, r3
 801644e:	2b04      	cmp	r3, #4
 8016450:	d006      	beq.n	8016460 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016458:	b2da      	uxtb	r2, r3
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	2204      	movs	r2, #4
 8016464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016468:	2300      	movs	r3, #0
}
 801646a:	4618      	mov	r0, r3
 801646c:	370c      	adds	r7, #12
 801646e:	46bd      	mov	sp, r7
 8016470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016474:	4770      	bx	lr

08016476 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016476:	b480      	push	{r7}
 8016478:	b083      	sub	sp, #12
 801647a:	af00      	add	r7, sp, #0
 801647c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016484:	b2db      	uxtb	r3, r3
 8016486:	2b04      	cmp	r3, #4
 8016488:	d106      	bne.n	8016498 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8016490:	b2da      	uxtb	r2, r3
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8016498:	2300      	movs	r3, #0
}
 801649a:	4618      	mov	r0, r3
 801649c:	370c      	adds	r7, #12
 801649e:	46bd      	mov	sp, r7
 80164a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a4:	4770      	bx	lr

080164a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80164a6:	b580      	push	{r7, lr}
 80164a8:	b082      	sub	sp, #8
 80164aa:	af00      	add	r7, sp, #0
 80164ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164b4:	b2db      	uxtb	r3, r3
 80164b6:	2b03      	cmp	r3, #3
 80164b8:	d110      	bne.n	80164dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d00b      	beq.n	80164dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164ca:	69db      	ldr	r3, [r3, #28]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d005      	beq.n	80164dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164d6:	69db      	ldr	r3, [r3, #28]
 80164d8:	6878      	ldr	r0, [r7, #4]
 80164da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80164dc:	2300      	movs	r3, #0
}
 80164de:	4618      	mov	r0, r3
 80164e0:	3708      	adds	r7, #8
 80164e2:	46bd      	mov	sp, r7
 80164e4:	bd80      	pop	{r7, pc}

080164e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80164e6:	b580      	push	{r7, lr}
 80164e8:	b082      	sub	sp, #8
 80164ea:	af00      	add	r7, sp, #0
 80164ec:	6078      	str	r0, [r7, #4]
 80164ee:	460b      	mov	r3, r1
 80164f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	32ae      	adds	r2, #174	; 0xae
 80164fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d101      	bne.n	8016508 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016504:	2303      	movs	r3, #3
 8016506:	e01c      	b.n	8016542 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801650e:	b2db      	uxtb	r3, r3
 8016510:	2b03      	cmp	r3, #3
 8016512:	d115      	bne.n	8016540 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	32ae      	adds	r2, #174	; 0xae
 801651e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016522:	6a1b      	ldr	r3, [r3, #32]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d00b      	beq.n	8016540 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	32ae      	adds	r2, #174	; 0xae
 8016532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016536:	6a1b      	ldr	r3, [r3, #32]
 8016538:	78fa      	ldrb	r2, [r7, #3]
 801653a:	4611      	mov	r1, r2
 801653c:	6878      	ldr	r0, [r7, #4]
 801653e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016540:	2300      	movs	r3, #0
}
 8016542:	4618      	mov	r0, r3
 8016544:	3708      	adds	r7, #8
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}

0801654a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801654a:	b580      	push	{r7, lr}
 801654c:	b082      	sub	sp, #8
 801654e:	af00      	add	r7, sp, #0
 8016550:	6078      	str	r0, [r7, #4]
 8016552:	460b      	mov	r3, r1
 8016554:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	32ae      	adds	r2, #174	; 0xae
 8016560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d101      	bne.n	801656c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016568:	2303      	movs	r3, #3
 801656a:	e01c      	b.n	80165a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016572:	b2db      	uxtb	r3, r3
 8016574:	2b03      	cmp	r3, #3
 8016576:	d115      	bne.n	80165a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	32ae      	adds	r2, #174	; 0xae
 8016582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016588:	2b00      	cmp	r3, #0
 801658a:	d00b      	beq.n	80165a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	32ae      	adds	r2, #174	; 0xae
 8016596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801659c:	78fa      	ldrb	r2, [r7, #3]
 801659e:	4611      	mov	r1, r2
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80165a4:	2300      	movs	r3, #0
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3708      	adds	r7, #8
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}

080165ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80165ae:	b480      	push	{r7}
 80165b0:	b083      	sub	sp, #12
 80165b2:	af00      	add	r7, sp, #0
 80165b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80165b6:	2300      	movs	r3, #0
}
 80165b8:	4618      	mov	r0, r3
 80165ba:	370c      	adds	r7, #12
 80165bc:	46bd      	mov	sp, r7
 80165be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c2:	4770      	bx	lr

080165c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80165c4:	b580      	push	{r7, lr}
 80165c6:	b084      	sub	sp, #16
 80165c8:	af00      	add	r7, sp, #0
 80165ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80165cc:	2300      	movs	r3, #0
 80165ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	2201      	movs	r2, #1
 80165d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d00e      	beq.n	8016600 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80165e8:	685b      	ldr	r3, [r3, #4]
 80165ea:	687a      	ldr	r2, [r7, #4]
 80165ec:	6852      	ldr	r2, [r2, #4]
 80165ee:	b2d2      	uxtb	r2, r2
 80165f0:	4611      	mov	r1, r2
 80165f2:	6878      	ldr	r0, [r7, #4]
 80165f4:	4798      	blx	r3
 80165f6:	4603      	mov	r3, r0
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d001      	beq.n	8016600 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80165fc:	2303      	movs	r3, #3
 80165fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016600:	7bfb      	ldrb	r3, [r7, #15]
}
 8016602:	4618      	mov	r0, r3
 8016604:	3710      	adds	r7, #16
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}

0801660a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801660a:	b480      	push	{r7}
 801660c:	b083      	sub	sp, #12
 801660e:	af00      	add	r7, sp, #0
 8016610:	6078      	str	r0, [r7, #4]
 8016612:	460b      	mov	r3, r1
 8016614:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016616:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016618:	4618      	mov	r0, r3
 801661a:	370c      	adds	r7, #12
 801661c:	46bd      	mov	sp, r7
 801661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016622:	4770      	bx	lr

08016624 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016624:	b480      	push	{r7}
 8016626:	b083      	sub	sp, #12
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
 801662c:	460b      	mov	r3, r1
 801662e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016630:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016632:	4618      	mov	r0, r3
 8016634:	370c      	adds	r7, #12
 8016636:	46bd      	mov	sp, r7
 8016638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663c:	4770      	bx	lr

0801663e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801663e:	b580      	push	{r7, lr}
 8016640:	b086      	sub	sp, #24
 8016642:	af00      	add	r7, sp, #0
 8016644:	6078      	str	r0, [r7, #4]
 8016646:	460b      	mov	r3, r1
 8016648:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016652:	2300      	movs	r3, #0
 8016654:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	885b      	ldrh	r3, [r3, #2]
 801665a:	b29a      	uxth	r2, r3
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	781b      	ldrb	r3, [r3, #0]
 8016660:	b29b      	uxth	r3, r3
 8016662:	429a      	cmp	r2, r3
 8016664:	d920      	bls.n	80166a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	781b      	ldrb	r3, [r3, #0]
 801666a:	b29b      	uxth	r3, r3
 801666c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801666e:	e013      	b.n	8016698 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016670:	f107 030a 	add.w	r3, r7, #10
 8016674:	4619      	mov	r1, r3
 8016676:	6978      	ldr	r0, [r7, #20]
 8016678:	f000 f81b 	bl	80166b2 <USBD_GetNextDesc>
 801667c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801667e:	697b      	ldr	r3, [r7, #20]
 8016680:	785b      	ldrb	r3, [r3, #1]
 8016682:	2b05      	cmp	r3, #5
 8016684:	d108      	bne.n	8016698 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016686:	697b      	ldr	r3, [r7, #20]
 8016688:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801668a:	693b      	ldr	r3, [r7, #16]
 801668c:	789b      	ldrb	r3, [r3, #2]
 801668e:	78fa      	ldrb	r2, [r7, #3]
 8016690:	429a      	cmp	r2, r3
 8016692:	d008      	beq.n	80166a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016694:	2300      	movs	r3, #0
 8016696:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	885b      	ldrh	r3, [r3, #2]
 801669c:	b29a      	uxth	r2, r3
 801669e:	897b      	ldrh	r3, [r7, #10]
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d8e5      	bhi.n	8016670 <USBD_GetEpDesc+0x32>
 80166a4:	e000      	b.n	80166a8 <USBD_GetEpDesc+0x6a>
          break;
 80166a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80166a8:	693b      	ldr	r3, [r7, #16]
}
 80166aa:	4618      	mov	r0, r3
 80166ac:	3718      	adds	r7, #24
 80166ae:	46bd      	mov	sp, r7
 80166b0:	bd80      	pop	{r7, pc}

080166b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80166b2:	b480      	push	{r7}
 80166b4:	b085      	sub	sp, #20
 80166b6:	af00      	add	r7, sp, #0
 80166b8:	6078      	str	r0, [r7, #4]
 80166ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80166c0:	683b      	ldr	r3, [r7, #0]
 80166c2:	881a      	ldrh	r2, [r3, #0]
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	781b      	ldrb	r3, [r3, #0]
 80166c8:	b29b      	uxth	r3, r3
 80166ca:	4413      	add	r3, r2
 80166cc:	b29a      	uxth	r2, r3
 80166ce:	683b      	ldr	r3, [r7, #0]
 80166d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	781b      	ldrb	r3, [r3, #0]
 80166d6:	461a      	mov	r2, r3
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	4413      	add	r3, r2
 80166dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80166de:	68fb      	ldr	r3, [r7, #12]
}
 80166e0:	4618      	mov	r0, r3
 80166e2:	3714      	adds	r7, #20
 80166e4:	46bd      	mov	sp, r7
 80166e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ea:	4770      	bx	lr

080166ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80166ec:	b480      	push	{r7}
 80166ee:	b087      	sub	sp, #28
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80166f8:	697b      	ldr	r3, [r7, #20]
 80166fa:	781b      	ldrb	r3, [r3, #0]
 80166fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80166fe:	697b      	ldr	r3, [r7, #20]
 8016700:	3301      	adds	r3, #1
 8016702:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016704:	697b      	ldr	r3, [r7, #20]
 8016706:	781b      	ldrb	r3, [r3, #0]
 8016708:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801670a:	8a3b      	ldrh	r3, [r7, #16]
 801670c:	021b      	lsls	r3, r3, #8
 801670e:	b21a      	sxth	r2, r3
 8016710:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016714:	4313      	orrs	r3, r2
 8016716:	b21b      	sxth	r3, r3
 8016718:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801671a:	89fb      	ldrh	r3, [r7, #14]
}
 801671c:	4618      	mov	r0, r3
 801671e:	371c      	adds	r7, #28
 8016720:	46bd      	mov	sp, r7
 8016722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016726:	4770      	bx	lr

08016728 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b084      	sub	sp, #16
 801672c:	af00      	add	r7, sp, #0
 801672e:	6078      	str	r0, [r7, #4]
 8016730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016732:	2300      	movs	r3, #0
 8016734:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016736:	683b      	ldr	r3, [r7, #0]
 8016738:	781b      	ldrb	r3, [r3, #0]
 801673a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801673e:	2b40      	cmp	r3, #64	; 0x40
 8016740:	d005      	beq.n	801674e <USBD_StdDevReq+0x26>
 8016742:	2b40      	cmp	r3, #64	; 0x40
 8016744:	d857      	bhi.n	80167f6 <USBD_StdDevReq+0xce>
 8016746:	2b00      	cmp	r3, #0
 8016748:	d00f      	beq.n	801676a <USBD_StdDevReq+0x42>
 801674a:	2b20      	cmp	r3, #32
 801674c:	d153      	bne.n	80167f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	32ae      	adds	r2, #174	; 0xae
 8016758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801675c:	689b      	ldr	r3, [r3, #8]
 801675e:	6839      	ldr	r1, [r7, #0]
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	4798      	blx	r3
 8016764:	4603      	mov	r3, r0
 8016766:	73fb      	strb	r3, [r7, #15]
      break;
 8016768:	e04a      	b.n	8016800 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801676a:	683b      	ldr	r3, [r7, #0]
 801676c:	785b      	ldrb	r3, [r3, #1]
 801676e:	2b09      	cmp	r3, #9
 8016770:	d83b      	bhi.n	80167ea <USBD_StdDevReq+0xc2>
 8016772:	a201      	add	r2, pc, #4	; (adr r2, 8016778 <USBD_StdDevReq+0x50>)
 8016774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016778:	080167cd 	.word	0x080167cd
 801677c:	080167e1 	.word	0x080167e1
 8016780:	080167eb 	.word	0x080167eb
 8016784:	080167d7 	.word	0x080167d7
 8016788:	080167eb 	.word	0x080167eb
 801678c:	080167ab 	.word	0x080167ab
 8016790:	080167a1 	.word	0x080167a1
 8016794:	080167eb 	.word	0x080167eb
 8016798:	080167c3 	.word	0x080167c3
 801679c:	080167b5 	.word	0x080167b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80167a0:	6839      	ldr	r1, [r7, #0]
 80167a2:	6878      	ldr	r0, [r7, #4]
 80167a4:	f000 fa3c 	bl	8016c20 <USBD_GetDescriptor>
          break;
 80167a8:	e024      	b.n	80167f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80167aa:	6839      	ldr	r1, [r7, #0]
 80167ac:	6878      	ldr	r0, [r7, #4]
 80167ae:	f000 fba1 	bl	8016ef4 <USBD_SetAddress>
          break;
 80167b2:	e01f      	b.n	80167f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80167b4:	6839      	ldr	r1, [r7, #0]
 80167b6:	6878      	ldr	r0, [r7, #4]
 80167b8:	f000 fbe0 	bl	8016f7c <USBD_SetConfig>
 80167bc:	4603      	mov	r3, r0
 80167be:	73fb      	strb	r3, [r7, #15]
          break;
 80167c0:	e018      	b.n	80167f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80167c2:	6839      	ldr	r1, [r7, #0]
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	f000 fc83 	bl	80170d0 <USBD_GetConfig>
          break;
 80167ca:	e013      	b.n	80167f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80167cc:	6839      	ldr	r1, [r7, #0]
 80167ce:	6878      	ldr	r0, [r7, #4]
 80167d0:	f000 fcb4 	bl	801713c <USBD_GetStatus>
          break;
 80167d4:	e00e      	b.n	80167f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80167d6:	6839      	ldr	r1, [r7, #0]
 80167d8:	6878      	ldr	r0, [r7, #4]
 80167da:	f000 fce3 	bl	80171a4 <USBD_SetFeature>
          break;
 80167de:	e009      	b.n	80167f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80167e0:	6839      	ldr	r1, [r7, #0]
 80167e2:	6878      	ldr	r0, [r7, #4]
 80167e4:	f000 fd07 	bl	80171f6 <USBD_ClrFeature>
          break;
 80167e8:	e004      	b.n	80167f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80167ea:	6839      	ldr	r1, [r7, #0]
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f000 fd5e 	bl	80172ae <USBD_CtlError>
          break;
 80167f2:	bf00      	nop
      }
      break;
 80167f4:	e004      	b.n	8016800 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80167f6:	6839      	ldr	r1, [r7, #0]
 80167f8:	6878      	ldr	r0, [r7, #4]
 80167fa:	f000 fd58 	bl	80172ae <USBD_CtlError>
      break;
 80167fe:	bf00      	nop
  }

  return ret;
 8016800:	7bfb      	ldrb	r3, [r7, #15]
}
 8016802:	4618      	mov	r0, r3
 8016804:	3710      	adds	r7, #16
 8016806:	46bd      	mov	sp, r7
 8016808:	bd80      	pop	{r7, pc}
 801680a:	bf00      	nop

0801680c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b084      	sub	sp, #16
 8016810:	af00      	add	r7, sp, #0
 8016812:	6078      	str	r0, [r7, #4]
 8016814:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016816:	2300      	movs	r3, #0
 8016818:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801681a:	683b      	ldr	r3, [r7, #0]
 801681c:	781b      	ldrb	r3, [r3, #0]
 801681e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016822:	2b40      	cmp	r3, #64	; 0x40
 8016824:	d005      	beq.n	8016832 <USBD_StdItfReq+0x26>
 8016826:	2b40      	cmp	r3, #64	; 0x40
 8016828:	d852      	bhi.n	80168d0 <USBD_StdItfReq+0xc4>
 801682a:	2b00      	cmp	r3, #0
 801682c:	d001      	beq.n	8016832 <USBD_StdItfReq+0x26>
 801682e:	2b20      	cmp	r3, #32
 8016830:	d14e      	bne.n	80168d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016838:	b2db      	uxtb	r3, r3
 801683a:	3b01      	subs	r3, #1
 801683c:	2b02      	cmp	r3, #2
 801683e:	d840      	bhi.n	80168c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016840:	683b      	ldr	r3, [r7, #0]
 8016842:	889b      	ldrh	r3, [r3, #4]
 8016844:	b2db      	uxtb	r3, r3
 8016846:	2b01      	cmp	r3, #1
 8016848:	d836      	bhi.n	80168b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801684a:	683b      	ldr	r3, [r7, #0]
 801684c:	889b      	ldrh	r3, [r3, #4]
 801684e:	b2db      	uxtb	r3, r3
 8016850:	4619      	mov	r1, r3
 8016852:	6878      	ldr	r0, [r7, #4]
 8016854:	f7ff fed9 	bl	801660a <USBD_CoreFindIF>
 8016858:	4603      	mov	r3, r0
 801685a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801685c:	7bbb      	ldrb	r3, [r7, #14]
 801685e:	2bff      	cmp	r3, #255	; 0xff
 8016860:	d01d      	beq.n	801689e <USBD_StdItfReq+0x92>
 8016862:	7bbb      	ldrb	r3, [r7, #14]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d11a      	bne.n	801689e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016868:	7bba      	ldrb	r2, [r7, #14]
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	32ae      	adds	r2, #174	; 0xae
 801686e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016872:	689b      	ldr	r3, [r3, #8]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d00f      	beq.n	8016898 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016878:	7bba      	ldrb	r2, [r7, #14]
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016880:	7bba      	ldrb	r2, [r7, #14]
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	32ae      	adds	r2, #174	; 0xae
 8016886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801688a:	689b      	ldr	r3, [r3, #8]
 801688c:	6839      	ldr	r1, [r7, #0]
 801688e:	6878      	ldr	r0, [r7, #4]
 8016890:	4798      	blx	r3
 8016892:	4603      	mov	r3, r0
 8016894:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016896:	e004      	b.n	80168a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016898:	2303      	movs	r3, #3
 801689a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801689c:	e001      	b.n	80168a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801689e:	2303      	movs	r3, #3
 80168a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80168a2:	683b      	ldr	r3, [r7, #0]
 80168a4:	88db      	ldrh	r3, [r3, #6]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d110      	bne.n	80168cc <USBD_StdItfReq+0xc0>
 80168aa:	7bfb      	ldrb	r3, [r7, #15]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d10d      	bne.n	80168cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80168b0:	6878      	ldr	r0, [r7, #4]
 80168b2:	f000 fdc7 	bl	8017444 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80168b6:	e009      	b.n	80168cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80168b8:	6839      	ldr	r1, [r7, #0]
 80168ba:	6878      	ldr	r0, [r7, #4]
 80168bc:	f000 fcf7 	bl	80172ae <USBD_CtlError>
          break;
 80168c0:	e004      	b.n	80168cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80168c2:	6839      	ldr	r1, [r7, #0]
 80168c4:	6878      	ldr	r0, [r7, #4]
 80168c6:	f000 fcf2 	bl	80172ae <USBD_CtlError>
          break;
 80168ca:	e000      	b.n	80168ce <USBD_StdItfReq+0xc2>
          break;
 80168cc:	bf00      	nop
      }
      break;
 80168ce:	e004      	b.n	80168da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80168d0:	6839      	ldr	r1, [r7, #0]
 80168d2:	6878      	ldr	r0, [r7, #4]
 80168d4:	f000 fceb 	bl	80172ae <USBD_CtlError>
      break;
 80168d8:	bf00      	nop
  }

  return ret;
 80168da:	7bfb      	ldrb	r3, [r7, #15]
}
 80168dc:	4618      	mov	r0, r3
 80168de:	3710      	adds	r7, #16
 80168e0:	46bd      	mov	sp, r7
 80168e2:	bd80      	pop	{r7, pc}

080168e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b084      	sub	sp, #16
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	6078      	str	r0, [r7, #4]
 80168ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80168ee:	2300      	movs	r3, #0
 80168f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80168f2:	683b      	ldr	r3, [r7, #0]
 80168f4:	889b      	ldrh	r3, [r3, #4]
 80168f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80168f8:	683b      	ldr	r3, [r7, #0]
 80168fa:	781b      	ldrb	r3, [r3, #0]
 80168fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016900:	2b40      	cmp	r3, #64	; 0x40
 8016902:	d007      	beq.n	8016914 <USBD_StdEPReq+0x30>
 8016904:	2b40      	cmp	r3, #64	; 0x40
 8016906:	f200 817f 	bhi.w	8016c08 <USBD_StdEPReq+0x324>
 801690a:	2b00      	cmp	r3, #0
 801690c:	d02a      	beq.n	8016964 <USBD_StdEPReq+0x80>
 801690e:	2b20      	cmp	r3, #32
 8016910:	f040 817a 	bne.w	8016c08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016914:	7bbb      	ldrb	r3, [r7, #14]
 8016916:	4619      	mov	r1, r3
 8016918:	6878      	ldr	r0, [r7, #4]
 801691a:	f7ff fe83 	bl	8016624 <USBD_CoreFindEP>
 801691e:	4603      	mov	r3, r0
 8016920:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016922:	7b7b      	ldrb	r3, [r7, #13]
 8016924:	2bff      	cmp	r3, #255	; 0xff
 8016926:	f000 8174 	beq.w	8016c12 <USBD_StdEPReq+0x32e>
 801692a:	7b7b      	ldrb	r3, [r7, #13]
 801692c:	2b00      	cmp	r3, #0
 801692e:	f040 8170 	bne.w	8016c12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016932:	7b7a      	ldrb	r2, [r7, #13]
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801693a:	7b7a      	ldrb	r2, [r7, #13]
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	32ae      	adds	r2, #174	; 0xae
 8016940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016944:	689b      	ldr	r3, [r3, #8]
 8016946:	2b00      	cmp	r3, #0
 8016948:	f000 8163 	beq.w	8016c12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801694c:	7b7a      	ldrb	r2, [r7, #13]
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	32ae      	adds	r2, #174	; 0xae
 8016952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016956:	689b      	ldr	r3, [r3, #8]
 8016958:	6839      	ldr	r1, [r7, #0]
 801695a:	6878      	ldr	r0, [r7, #4]
 801695c:	4798      	blx	r3
 801695e:	4603      	mov	r3, r0
 8016960:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016962:	e156      	b.n	8016c12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016964:	683b      	ldr	r3, [r7, #0]
 8016966:	785b      	ldrb	r3, [r3, #1]
 8016968:	2b03      	cmp	r3, #3
 801696a:	d008      	beq.n	801697e <USBD_StdEPReq+0x9a>
 801696c:	2b03      	cmp	r3, #3
 801696e:	f300 8145 	bgt.w	8016bfc <USBD_StdEPReq+0x318>
 8016972:	2b00      	cmp	r3, #0
 8016974:	f000 809b 	beq.w	8016aae <USBD_StdEPReq+0x1ca>
 8016978:	2b01      	cmp	r3, #1
 801697a:	d03c      	beq.n	80169f6 <USBD_StdEPReq+0x112>
 801697c:	e13e      	b.n	8016bfc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016984:	b2db      	uxtb	r3, r3
 8016986:	2b02      	cmp	r3, #2
 8016988:	d002      	beq.n	8016990 <USBD_StdEPReq+0xac>
 801698a:	2b03      	cmp	r3, #3
 801698c:	d016      	beq.n	80169bc <USBD_StdEPReq+0xd8>
 801698e:	e02c      	b.n	80169ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016990:	7bbb      	ldrb	r3, [r7, #14]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d00d      	beq.n	80169b2 <USBD_StdEPReq+0xce>
 8016996:	7bbb      	ldrb	r3, [r7, #14]
 8016998:	2b80      	cmp	r3, #128	; 0x80
 801699a:	d00a      	beq.n	80169b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801699c:	7bbb      	ldrb	r3, [r7, #14]
 801699e:	4619      	mov	r1, r3
 80169a0:	6878      	ldr	r0, [r7, #4]
 80169a2:	f004 f94b 	bl	801ac3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80169a6:	2180      	movs	r1, #128	; 0x80
 80169a8:	6878      	ldr	r0, [r7, #4]
 80169aa:	f004 f947 	bl	801ac3c <USBD_LL_StallEP>
 80169ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80169b0:	e020      	b.n	80169f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80169b2:	6839      	ldr	r1, [r7, #0]
 80169b4:	6878      	ldr	r0, [r7, #4]
 80169b6:	f000 fc7a 	bl	80172ae <USBD_CtlError>
              break;
 80169ba:	e01b      	b.n	80169f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80169bc:	683b      	ldr	r3, [r7, #0]
 80169be:	885b      	ldrh	r3, [r3, #2]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d10e      	bne.n	80169e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80169c4:	7bbb      	ldrb	r3, [r7, #14]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d00b      	beq.n	80169e2 <USBD_StdEPReq+0xfe>
 80169ca:	7bbb      	ldrb	r3, [r7, #14]
 80169cc:	2b80      	cmp	r3, #128	; 0x80
 80169ce:	d008      	beq.n	80169e2 <USBD_StdEPReq+0xfe>
 80169d0:	683b      	ldr	r3, [r7, #0]
 80169d2:	88db      	ldrh	r3, [r3, #6]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d104      	bne.n	80169e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80169d8:	7bbb      	ldrb	r3, [r7, #14]
 80169da:	4619      	mov	r1, r3
 80169dc:	6878      	ldr	r0, [r7, #4]
 80169de:	f004 f92d 	bl	801ac3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80169e2:	6878      	ldr	r0, [r7, #4]
 80169e4:	f000 fd2e 	bl	8017444 <USBD_CtlSendStatus>

              break;
 80169e8:	e004      	b.n	80169f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80169ea:	6839      	ldr	r1, [r7, #0]
 80169ec:	6878      	ldr	r0, [r7, #4]
 80169ee:	f000 fc5e 	bl	80172ae <USBD_CtlError>
              break;
 80169f2:	bf00      	nop
          }
          break;
 80169f4:	e107      	b.n	8016c06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169fc:	b2db      	uxtb	r3, r3
 80169fe:	2b02      	cmp	r3, #2
 8016a00:	d002      	beq.n	8016a08 <USBD_StdEPReq+0x124>
 8016a02:	2b03      	cmp	r3, #3
 8016a04:	d016      	beq.n	8016a34 <USBD_StdEPReq+0x150>
 8016a06:	e04b      	b.n	8016aa0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016a08:	7bbb      	ldrb	r3, [r7, #14]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d00d      	beq.n	8016a2a <USBD_StdEPReq+0x146>
 8016a0e:	7bbb      	ldrb	r3, [r7, #14]
 8016a10:	2b80      	cmp	r3, #128	; 0x80
 8016a12:	d00a      	beq.n	8016a2a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016a14:	7bbb      	ldrb	r3, [r7, #14]
 8016a16:	4619      	mov	r1, r3
 8016a18:	6878      	ldr	r0, [r7, #4]
 8016a1a:	f004 f90f 	bl	801ac3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016a1e:	2180      	movs	r1, #128	; 0x80
 8016a20:	6878      	ldr	r0, [r7, #4]
 8016a22:	f004 f90b 	bl	801ac3c <USBD_LL_StallEP>
 8016a26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016a28:	e040      	b.n	8016aac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016a2a:	6839      	ldr	r1, [r7, #0]
 8016a2c:	6878      	ldr	r0, [r7, #4]
 8016a2e:	f000 fc3e 	bl	80172ae <USBD_CtlError>
              break;
 8016a32:	e03b      	b.n	8016aac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016a34:	683b      	ldr	r3, [r7, #0]
 8016a36:	885b      	ldrh	r3, [r3, #2]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d136      	bne.n	8016aaa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016a3c:	7bbb      	ldrb	r3, [r7, #14]
 8016a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d004      	beq.n	8016a50 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016a46:	7bbb      	ldrb	r3, [r7, #14]
 8016a48:	4619      	mov	r1, r3
 8016a4a:	6878      	ldr	r0, [r7, #4]
 8016a4c:	f004 f915 	bl	801ac7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016a50:	6878      	ldr	r0, [r7, #4]
 8016a52:	f000 fcf7 	bl	8017444 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016a56:	7bbb      	ldrb	r3, [r7, #14]
 8016a58:	4619      	mov	r1, r3
 8016a5a:	6878      	ldr	r0, [r7, #4]
 8016a5c:	f7ff fde2 	bl	8016624 <USBD_CoreFindEP>
 8016a60:	4603      	mov	r3, r0
 8016a62:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016a64:	7b7b      	ldrb	r3, [r7, #13]
 8016a66:	2bff      	cmp	r3, #255	; 0xff
 8016a68:	d01f      	beq.n	8016aaa <USBD_StdEPReq+0x1c6>
 8016a6a:	7b7b      	ldrb	r3, [r7, #13]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d11c      	bne.n	8016aaa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016a70:	7b7a      	ldrb	r2, [r7, #13]
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016a78:	7b7a      	ldrb	r2, [r7, #13]
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	32ae      	adds	r2, #174	; 0xae
 8016a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a82:	689b      	ldr	r3, [r3, #8]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d010      	beq.n	8016aaa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016a88:	7b7a      	ldrb	r2, [r7, #13]
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	32ae      	adds	r2, #174	; 0xae
 8016a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a92:	689b      	ldr	r3, [r3, #8]
 8016a94:	6839      	ldr	r1, [r7, #0]
 8016a96:	6878      	ldr	r0, [r7, #4]
 8016a98:	4798      	blx	r3
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016a9e:	e004      	b.n	8016aaa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016aa0:	6839      	ldr	r1, [r7, #0]
 8016aa2:	6878      	ldr	r0, [r7, #4]
 8016aa4:	f000 fc03 	bl	80172ae <USBD_CtlError>
              break;
 8016aa8:	e000      	b.n	8016aac <USBD_StdEPReq+0x1c8>
              break;
 8016aaa:	bf00      	nop
          }
          break;
 8016aac:	e0ab      	b.n	8016c06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ab4:	b2db      	uxtb	r3, r3
 8016ab6:	2b02      	cmp	r3, #2
 8016ab8:	d002      	beq.n	8016ac0 <USBD_StdEPReq+0x1dc>
 8016aba:	2b03      	cmp	r3, #3
 8016abc:	d032      	beq.n	8016b24 <USBD_StdEPReq+0x240>
 8016abe:	e097      	b.n	8016bf0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016ac0:	7bbb      	ldrb	r3, [r7, #14]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d007      	beq.n	8016ad6 <USBD_StdEPReq+0x1f2>
 8016ac6:	7bbb      	ldrb	r3, [r7, #14]
 8016ac8:	2b80      	cmp	r3, #128	; 0x80
 8016aca:	d004      	beq.n	8016ad6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016acc:	6839      	ldr	r1, [r7, #0]
 8016ace:	6878      	ldr	r0, [r7, #4]
 8016ad0:	f000 fbed 	bl	80172ae <USBD_CtlError>
                break;
 8016ad4:	e091      	b.n	8016bfa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016ad6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	da0b      	bge.n	8016af6 <USBD_StdEPReq+0x212>
 8016ade:	7bbb      	ldrb	r3, [r7, #14]
 8016ae0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016ae4:	4613      	mov	r3, r2
 8016ae6:	009b      	lsls	r3, r3, #2
 8016ae8:	4413      	add	r3, r2
 8016aea:	009b      	lsls	r3, r3, #2
 8016aec:	3310      	adds	r3, #16
 8016aee:	687a      	ldr	r2, [r7, #4]
 8016af0:	4413      	add	r3, r2
 8016af2:	3304      	adds	r3, #4
 8016af4:	e00b      	b.n	8016b0e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016af6:	7bbb      	ldrb	r3, [r7, #14]
 8016af8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016afc:	4613      	mov	r3, r2
 8016afe:	009b      	lsls	r3, r3, #2
 8016b00:	4413      	add	r3, r2
 8016b02:	009b      	lsls	r3, r3, #2
 8016b04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016b08:	687a      	ldr	r2, [r7, #4]
 8016b0a:	4413      	add	r3, r2
 8016b0c:	3304      	adds	r3, #4
 8016b0e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016b10:	68bb      	ldr	r3, [r7, #8]
 8016b12:	2200      	movs	r2, #0
 8016b14:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016b16:	68bb      	ldr	r3, [r7, #8]
 8016b18:	2202      	movs	r2, #2
 8016b1a:	4619      	mov	r1, r3
 8016b1c:	6878      	ldr	r0, [r7, #4]
 8016b1e:	f000 fc37 	bl	8017390 <USBD_CtlSendData>
              break;
 8016b22:	e06a      	b.n	8016bfa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	da11      	bge.n	8016b50 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016b2c:	7bbb      	ldrb	r3, [r7, #14]
 8016b2e:	f003 020f 	and.w	r2, r3, #15
 8016b32:	6879      	ldr	r1, [r7, #4]
 8016b34:	4613      	mov	r3, r2
 8016b36:	009b      	lsls	r3, r3, #2
 8016b38:	4413      	add	r3, r2
 8016b3a:	009b      	lsls	r3, r3, #2
 8016b3c:	440b      	add	r3, r1
 8016b3e:	3324      	adds	r3, #36	; 0x24
 8016b40:	881b      	ldrh	r3, [r3, #0]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d117      	bne.n	8016b76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016b46:	6839      	ldr	r1, [r7, #0]
 8016b48:	6878      	ldr	r0, [r7, #4]
 8016b4a:	f000 fbb0 	bl	80172ae <USBD_CtlError>
                  break;
 8016b4e:	e054      	b.n	8016bfa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016b50:	7bbb      	ldrb	r3, [r7, #14]
 8016b52:	f003 020f 	and.w	r2, r3, #15
 8016b56:	6879      	ldr	r1, [r7, #4]
 8016b58:	4613      	mov	r3, r2
 8016b5a:	009b      	lsls	r3, r3, #2
 8016b5c:	4413      	add	r3, r2
 8016b5e:	009b      	lsls	r3, r3, #2
 8016b60:	440b      	add	r3, r1
 8016b62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016b66:	881b      	ldrh	r3, [r3, #0]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d104      	bne.n	8016b76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016b6c:	6839      	ldr	r1, [r7, #0]
 8016b6e:	6878      	ldr	r0, [r7, #4]
 8016b70:	f000 fb9d 	bl	80172ae <USBD_CtlError>
                  break;
 8016b74:	e041      	b.n	8016bfa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016b76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	da0b      	bge.n	8016b96 <USBD_StdEPReq+0x2b2>
 8016b7e:	7bbb      	ldrb	r3, [r7, #14]
 8016b80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b84:	4613      	mov	r3, r2
 8016b86:	009b      	lsls	r3, r3, #2
 8016b88:	4413      	add	r3, r2
 8016b8a:	009b      	lsls	r3, r3, #2
 8016b8c:	3310      	adds	r3, #16
 8016b8e:	687a      	ldr	r2, [r7, #4]
 8016b90:	4413      	add	r3, r2
 8016b92:	3304      	adds	r3, #4
 8016b94:	e00b      	b.n	8016bae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016b96:	7bbb      	ldrb	r3, [r7, #14]
 8016b98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016b9c:	4613      	mov	r3, r2
 8016b9e:	009b      	lsls	r3, r3, #2
 8016ba0:	4413      	add	r3, r2
 8016ba2:	009b      	lsls	r3, r3, #2
 8016ba4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016ba8:	687a      	ldr	r2, [r7, #4]
 8016baa:	4413      	add	r3, r2
 8016bac:	3304      	adds	r3, #4
 8016bae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016bb0:	7bbb      	ldrb	r3, [r7, #14]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d002      	beq.n	8016bbc <USBD_StdEPReq+0x2d8>
 8016bb6:	7bbb      	ldrb	r3, [r7, #14]
 8016bb8:	2b80      	cmp	r3, #128	; 0x80
 8016bba:	d103      	bne.n	8016bc4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016bbc:	68bb      	ldr	r3, [r7, #8]
 8016bbe:	2200      	movs	r2, #0
 8016bc0:	601a      	str	r2, [r3, #0]
 8016bc2:	e00e      	b.n	8016be2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016bc4:	7bbb      	ldrb	r3, [r7, #14]
 8016bc6:	4619      	mov	r1, r3
 8016bc8:	6878      	ldr	r0, [r7, #4]
 8016bca:	f004 f875 	bl	801acb8 <USBD_LL_IsStallEP>
 8016bce:	4603      	mov	r3, r0
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d003      	beq.n	8016bdc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016bd4:	68bb      	ldr	r3, [r7, #8]
 8016bd6:	2201      	movs	r2, #1
 8016bd8:	601a      	str	r2, [r3, #0]
 8016bda:	e002      	b.n	8016be2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016bdc:	68bb      	ldr	r3, [r7, #8]
 8016bde:	2200      	movs	r2, #0
 8016be0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016be2:	68bb      	ldr	r3, [r7, #8]
 8016be4:	2202      	movs	r2, #2
 8016be6:	4619      	mov	r1, r3
 8016be8:	6878      	ldr	r0, [r7, #4]
 8016bea:	f000 fbd1 	bl	8017390 <USBD_CtlSendData>
              break;
 8016bee:	e004      	b.n	8016bfa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016bf0:	6839      	ldr	r1, [r7, #0]
 8016bf2:	6878      	ldr	r0, [r7, #4]
 8016bf4:	f000 fb5b 	bl	80172ae <USBD_CtlError>
              break;
 8016bf8:	bf00      	nop
          }
          break;
 8016bfa:	e004      	b.n	8016c06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016bfc:	6839      	ldr	r1, [r7, #0]
 8016bfe:	6878      	ldr	r0, [r7, #4]
 8016c00:	f000 fb55 	bl	80172ae <USBD_CtlError>
          break;
 8016c04:	bf00      	nop
      }
      break;
 8016c06:	e005      	b.n	8016c14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016c08:	6839      	ldr	r1, [r7, #0]
 8016c0a:	6878      	ldr	r0, [r7, #4]
 8016c0c:	f000 fb4f 	bl	80172ae <USBD_CtlError>
      break;
 8016c10:	e000      	b.n	8016c14 <USBD_StdEPReq+0x330>
      break;
 8016c12:	bf00      	nop
  }

  return ret;
 8016c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c16:	4618      	mov	r0, r3
 8016c18:	3710      	adds	r7, #16
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	bd80      	pop	{r7, pc}
	...

08016c20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b084      	sub	sp, #16
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
 8016c28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016c2e:	2300      	movs	r3, #0
 8016c30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016c32:	2300      	movs	r3, #0
 8016c34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016c36:	683b      	ldr	r3, [r7, #0]
 8016c38:	885b      	ldrh	r3, [r3, #2]
 8016c3a:	0a1b      	lsrs	r3, r3, #8
 8016c3c:	b29b      	uxth	r3, r3
 8016c3e:	3b01      	subs	r3, #1
 8016c40:	2b06      	cmp	r3, #6
 8016c42:	f200 8128 	bhi.w	8016e96 <USBD_GetDescriptor+0x276>
 8016c46:	a201      	add	r2, pc, #4	; (adr r2, 8016c4c <USBD_GetDescriptor+0x2c>)
 8016c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c4c:	08016c69 	.word	0x08016c69
 8016c50:	08016c81 	.word	0x08016c81
 8016c54:	08016cc1 	.word	0x08016cc1
 8016c58:	08016e97 	.word	0x08016e97
 8016c5c:	08016e97 	.word	0x08016e97
 8016c60:	08016e37 	.word	0x08016e37
 8016c64:	08016e63 	.word	0x08016e63
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	687a      	ldr	r2, [r7, #4]
 8016c72:	7c12      	ldrb	r2, [r2, #16]
 8016c74:	f107 0108 	add.w	r1, r7, #8
 8016c78:	4610      	mov	r0, r2
 8016c7a:	4798      	blx	r3
 8016c7c:	60f8      	str	r0, [r7, #12]
      break;
 8016c7e:	e112      	b.n	8016ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	7c1b      	ldrb	r3, [r3, #16]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d10d      	bne.n	8016ca4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c90:	f107 0208 	add.w	r2, r7, #8
 8016c94:	4610      	mov	r0, r2
 8016c96:	4798      	blx	r3
 8016c98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	3301      	adds	r3, #1
 8016c9e:	2202      	movs	r2, #2
 8016ca0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016ca2:	e100      	b.n	8016ea6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cac:	f107 0208 	add.w	r2, r7, #8
 8016cb0:	4610      	mov	r0, r2
 8016cb2:	4798      	blx	r3
 8016cb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	3301      	adds	r3, #1
 8016cba:	2202      	movs	r2, #2
 8016cbc:	701a      	strb	r2, [r3, #0]
      break;
 8016cbe:	e0f2      	b.n	8016ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016cc0:	683b      	ldr	r3, [r7, #0]
 8016cc2:	885b      	ldrh	r3, [r3, #2]
 8016cc4:	b2db      	uxtb	r3, r3
 8016cc6:	2b05      	cmp	r3, #5
 8016cc8:	f200 80ac 	bhi.w	8016e24 <USBD_GetDescriptor+0x204>
 8016ccc:	a201      	add	r2, pc, #4	; (adr r2, 8016cd4 <USBD_GetDescriptor+0xb4>)
 8016cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cd2:	bf00      	nop
 8016cd4:	08016ced 	.word	0x08016ced
 8016cd8:	08016d21 	.word	0x08016d21
 8016cdc:	08016d55 	.word	0x08016d55
 8016ce0:	08016d89 	.word	0x08016d89
 8016ce4:	08016dbd 	.word	0x08016dbd
 8016ce8:	08016df1 	.word	0x08016df1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cf2:	685b      	ldr	r3, [r3, #4]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d00b      	beq.n	8016d10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cfe:	685b      	ldr	r3, [r3, #4]
 8016d00:	687a      	ldr	r2, [r7, #4]
 8016d02:	7c12      	ldrb	r2, [r2, #16]
 8016d04:	f107 0108 	add.w	r1, r7, #8
 8016d08:	4610      	mov	r0, r2
 8016d0a:	4798      	blx	r3
 8016d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d0e:	e091      	b.n	8016e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016d10:	6839      	ldr	r1, [r7, #0]
 8016d12:	6878      	ldr	r0, [r7, #4]
 8016d14:	f000 facb 	bl	80172ae <USBD_CtlError>
            err++;
 8016d18:	7afb      	ldrb	r3, [r7, #11]
 8016d1a:	3301      	adds	r3, #1
 8016d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8016d1e:	e089      	b.n	8016e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d26:	689b      	ldr	r3, [r3, #8]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d00b      	beq.n	8016d44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d32:	689b      	ldr	r3, [r3, #8]
 8016d34:	687a      	ldr	r2, [r7, #4]
 8016d36:	7c12      	ldrb	r2, [r2, #16]
 8016d38:	f107 0108 	add.w	r1, r7, #8
 8016d3c:	4610      	mov	r0, r2
 8016d3e:	4798      	blx	r3
 8016d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d42:	e077      	b.n	8016e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016d44:	6839      	ldr	r1, [r7, #0]
 8016d46:	6878      	ldr	r0, [r7, #4]
 8016d48:	f000 fab1 	bl	80172ae <USBD_CtlError>
            err++;
 8016d4c:	7afb      	ldrb	r3, [r7, #11]
 8016d4e:	3301      	adds	r3, #1
 8016d50:	72fb      	strb	r3, [r7, #11]
          break;
 8016d52:	e06f      	b.n	8016e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d5a:	68db      	ldr	r3, [r3, #12]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d00b      	beq.n	8016d78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d66:	68db      	ldr	r3, [r3, #12]
 8016d68:	687a      	ldr	r2, [r7, #4]
 8016d6a:	7c12      	ldrb	r2, [r2, #16]
 8016d6c:	f107 0108 	add.w	r1, r7, #8
 8016d70:	4610      	mov	r0, r2
 8016d72:	4798      	blx	r3
 8016d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d76:	e05d      	b.n	8016e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016d78:	6839      	ldr	r1, [r7, #0]
 8016d7a:	6878      	ldr	r0, [r7, #4]
 8016d7c:	f000 fa97 	bl	80172ae <USBD_CtlError>
            err++;
 8016d80:	7afb      	ldrb	r3, [r7, #11]
 8016d82:	3301      	adds	r3, #1
 8016d84:	72fb      	strb	r3, [r7, #11]
          break;
 8016d86:	e055      	b.n	8016e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d8e:	691b      	ldr	r3, [r3, #16]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d00b      	beq.n	8016dac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d9a:	691b      	ldr	r3, [r3, #16]
 8016d9c:	687a      	ldr	r2, [r7, #4]
 8016d9e:	7c12      	ldrb	r2, [r2, #16]
 8016da0:	f107 0108 	add.w	r1, r7, #8
 8016da4:	4610      	mov	r0, r2
 8016da6:	4798      	blx	r3
 8016da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016daa:	e043      	b.n	8016e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016dac:	6839      	ldr	r1, [r7, #0]
 8016dae:	6878      	ldr	r0, [r7, #4]
 8016db0:	f000 fa7d 	bl	80172ae <USBD_CtlError>
            err++;
 8016db4:	7afb      	ldrb	r3, [r7, #11]
 8016db6:	3301      	adds	r3, #1
 8016db8:	72fb      	strb	r3, [r7, #11]
          break;
 8016dba:	e03b      	b.n	8016e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016dc2:	695b      	ldr	r3, [r3, #20]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d00b      	beq.n	8016de0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016dce:	695b      	ldr	r3, [r3, #20]
 8016dd0:	687a      	ldr	r2, [r7, #4]
 8016dd2:	7c12      	ldrb	r2, [r2, #16]
 8016dd4:	f107 0108 	add.w	r1, r7, #8
 8016dd8:	4610      	mov	r0, r2
 8016dda:	4798      	blx	r3
 8016ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016dde:	e029      	b.n	8016e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016de0:	6839      	ldr	r1, [r7, #0]
 8016de2:	6878      	ldr	r0, [r7, #4]
 8016de4:	f000 fa63 	bl	80172ae <USBD_CtlError>
            err++;
 8016de8:	7afb      	ldrb	r3, [r7, #11]
 8016dea:	3301      	adds	r3, #1
 8016dec:	72fb      	strb	r3, [r7, #11]
          break;
 8016dee:	e021      	b.n	8016e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016df6:	699b      	ldr	r3, [r3, #24]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d00b      	beq.n	8016e14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e02:	699b      	ldr	r3, [r3, #24]
 8016e04:	687a      	ldr	r2, [r7, #4]
 8016e06:	7c12      	ldrb	r2, [r2, #16]
 8016e08:	f107 0108 	add.w	r1, r7, #8
 8016e0c:	4610      	mov	r0, r2
 8016e0e:	4798      	blx	r3
 8016e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016e12:	e00f      	b.n	8016e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016e14:	6839      	ldr	r1, [r7, #0]
 8016e16:	6878      	ldr	r0, [r7, #4]
 8016e18:	f000 fa49 	bl	80172ae <USBD_CtlError>
            err++;
 8016e1c:	7afb      	ldrb	r3, [r7, #11]
 8016e1e:	3301      	adds	r3, #1
 8016e20:	72fb      	strb	r3, [r7, #11]
          break;
 8016e22:	e007      	b.n	8016e34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016e24:	6839      	ldr	r1, [r7, #0]
 8016e26:	6878      	ldr	r0, [r7, #4]
 8016e28:	f000 fa41 	bl	80172ae <USBD_CtlError>
          err++;
 8016e2c:	7afb      	ldrb	r3, [r7, #11]
 8016e2e:	3301      	adds	r3, #1
 8016e30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016e32:	bf00      	nop
      }
      break;
 8016e34:	e037      	b.n	8016ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	7c1b      	ldrb	r3, [r3, #16]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d109      	bne.n	8016e52 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e46:	f107 0208 	add.w	r2, r7, #8
 8016e4a:	4610      	mov	r0, r2
 8016e4c:	4798      	blx	r3
 8016e4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016e50:	e029      	b.n	8016ea6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016e52:	6839      	ldr	r1, [r7, #0]
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f000 fa2a 	bl	80172ae <USBD_CtlError>
        err++;
 8016e5a:	7afb      	ldrb	r3, [r7, #11]
 8016e5c:	3301      	adds	r3, #1
 8016e5e:	72fb      	strb	r3, [r7, #11]
      break;
 8016e60:	e021      	b.n	8016ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	7c1b      	ldrb	r3, [r3, #16]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d10d      	bne.n	8016e86 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e72:	f107 0208 	add.w	r2, r7, #8
 8016e76:	4610      	mov	r0, r2
 8016e78:	4798      	blx	r3
 8016e7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	3301      	adds	r3, #1
 8016e80:	2207      	movs	r2, #7
 8016e82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016e84:	e00f      	b.n	8016ea6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016e86:	6839      	ldr	r1, [r7, #0]
 8016e88:	6878      	ldr	r0, [r7, #4]
 8016e8a:	f000 fa10 	bl	80172ae <USBD_CtlError>
        err++;
 8016e8e:	7afb      	ldrb	r3, [r7, #11]
 8016e90:	3301      	adds	r3, #1
 8016e92:	72fb      	strb	r3, [r7, #11]
      break;
 8016e94:	e007      	b.n	8016ea6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016e96:	6839      	ldr	r1, [r7, #0]
 8016e98:	6878      	ldr	r0, [r7, #4]
 8016e9a:	f000 fa08 	bl	80172ae <USBD_CtlError>
      err++;
 8016e9e:	7afb      	ldrb	r3, [r7, #11]
 8016ea0:	3301      	adds	r3, #1
 8016ea2:	72fb      	strb	r3, [r7, #11]
      break;
 8016ea4:	bf00      	nop
  }

  if (err != 0U)
 8016ea6:	7afb      	ldrb	r3, [r7, #11]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d11e      	bne.n	8016eea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016eac:	683b      	ldr	r3, [r7, #0]
 8016eae:	88db      	ldrh	r3, [r3, #6]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d016      	beq.n	8016ee2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016eb4:	893b      	ldrh	r3, [r7, #8]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d00e      	beq.n	8016ed8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016eba:	683b      	ldr	r3, [r7, #0]
 8016ebc:	88da      	ldrh	r2, [r3, #6]
 8016ebe:	893b      	ldrh	r3, [r7, #8]
 8016ec0:	4293      	cmp	r3, r2
 8016ec2:	bf28      	it	cs
 8016ec4:	4613      	movcs	r3, r2
 8016ec6:	b29b      	uxth	r3, r3
 8016ec8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016eca:	893b      	ldrh	r3, [r7, #8]
 8016ecc:	461a      	mov	r2, r3
 8016ece:	68f9      	ldr	r1, [r7, #12]
 8016ed0:	6878      	ldr	r0, [r7, #4]
 8016ed2:	f000 fa5d 	bl	8017390 <USBD_CtlSendData>
 8016ed6:	e009      	b.n	8016eec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016ed8:	6839      	ldr	r1, [r7, #0]
 8016eda:	6878      	ldr	r0, [r7, #4]
 8016edc:	f000 f9e7 	bl	80172ae <USBD_CtlError>
 8016ee0:	e004      	b.n	8016eec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016ee2:	6878      	ldr	r0, [r7, #4]
 8016ee4:	f000 faae 	bl	8017444 <USBD_CtlSendStatus>
 8016ee8:	e000      	b.n	8016eec <USBD_GetDescriptor+0x2cc>
    return;
 8016eea:	bf00      	nop
  }
}
 8016eec:	3710      	adds	r7, #16
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	bd80      	pop	{r7, pc}
 8016ef2:	bf00      	nop

08016ef4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ef4:	b580      	push	{r7, lr}
 8016ef6:	b084      	sub	sp, #16
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	6078      	str	r0, [r7, #4]
 8016efc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016efe:	683b      	ldr	r3, [r7, #0]
 8016f00:	889b      	ldrh	r3, [r3, #4]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d131      	bne.n	8016f6a <USBD_SetAddress+0x76>
 8016f06:	683b      	ldr	r3, [r7, #0]
 8016f08:	88db      	ldrh	r3, [r3, #6]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d12d      	bne.n	8016f6a <USBD_SetAddress+0x76>
 8016f0e:	683b      	ldr	r3, [r7, #0]
 8016f10:	885b      	ldrh	r3, [r3, #2]
 8016f12:	2b7f      	cmp	r3, #127	; 0x7f
 8016f14:	d829      	bhi.n	8016f6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016f16:	683b      	ldr	r3, [r7, #0]
 8016f18:	885b      	ldrh	r3, [r3, #2]
 8016f1a:	b2db      	uxtb	r3, r3
 8016f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016f20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f28:	b2db      	uxtb	r3, r3
 8016f2a:	2b03      	cmp	r3, #3
 8016f2c:	d104      	bne.n	8016f38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016f2e:	6839      	ldr	r1, [r7, #0]
 8016f30:	6878      	ldr	r0, [r7, #4]
 8016f32:	f000 f9bc 	bl	80172ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f36:	e01d      	b.n	8016f74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	7bfa      	ldrb	r2, [r7, #15]
 8016f3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016f40:	7bfb      	ldrb	r3, [r7, #15]
 8016f42:	4619      	mov	r1, r3
 8016f44:	6878      	ldr	r0, [r7, #4]
 8016f46:	f003 fee3 	bl	801ad10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016f4a:	6878      	ldr	r0, [r7, #4]
 8016f4c:	f000 fa7a 	bl	8017444 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016f50:	7bfb      	ldrb	r3, [r7, #15]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d004      	beq.n	8016f60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	2202      	movs	r2, #2
 8016f5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f5e:	e009      	b.n	8016f74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	2201      	movs	r2, #1
 8016f64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f68:	e004      	b.n	8016f74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016f6a:	6839      	ldr	r1, [r7, #0]
 8016f6c:	6878      	ldr	r0, [r7, #4]
 8016f6e:	f000 f99e 	bl	80172ae <USBD_CtlError>
  }
}
 8016f72:	bf00      	nop
 8016f74:	bf00      	nop
 8016f76:	3710      	adds	r7, #16
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	bd80      	pop	{r7, pc}

08016f7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016f7c:	b580      	push	{r7, lr}
 8016f7e:	b084      	sub	sp, #16
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	6078      	str	r0, [r7, #4]
 8016f84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016f86:	2300      	movs	r3, #0
 8016f88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016f8a:	683b      	ldr	r3, [r7, #0]
 8016f8c:	885b      	ldrh	r3, [r3, #2]
 8016f8e:	b2da      	uxtb	r2, r3
 8016f90:	4b4e      	ldr	r3, [pc, #312]	; (80170cc <USBD_SetConfig+0x150>)
 8016f92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016f94:	4b4d      	ldr	r3, [pc, #308]	; (80170cc <USBD_SetConfig+0x150>)
 8016f96:	781b      	ldrb	r3, [r3, #0]
 8016f98:	2b01      	cmp	r3, #1
 8016f9a:	d905      	bls.n	8016fa8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016f9c:	6839      	ldr	r1, [r7, #0]
 8016f9e:	6878      	ldr	r0, [r7, #4]
 8016fa0:	f000 f985 	bl	80172ae <USBD_CtlError>
    return USBD_FAIL;
 8016fa4:	2303      	movs	r3, #3
 8016fa6:	e08c      	b.n	80170c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016fae:	b2db      	uxtb	r3, r3
 8016fb0:	2b02      	cmp	r3, #2
 8016fb2:	d002      	beq.n	8016fba <USBD_SetConfig+0x3e>
 8016fb4:	2b03      	cmp	r3, #3
 8016fb6:	d029      	beq.n	801700c <USBD_SetConfig+0x90>
 8016fb8:	e075      	b.n	80170a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016fba:	4b44      	ldr	r3, [pc, #272]	; (80170cc <USBD_SetConfig+0x150>)
 8016fbc:	781b      	ldrb	r3, [r3, #0]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d020      	beq.n	8017004 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016fc2:	4b42      	ldr	r3, [pc, #264]	; (80170cc <USBD_SetConfig+0x150>)
 8016fc4:	781b      	ldrb	r3, [r3, #0]
 8016fc6:	461a      	mov	r2, r3
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016fcc:	4b3f      	ldr	r3, [pc, #252]	; (80170cc <USBD_SetConfig+0x150>)
 8016fce:	781b      	ldrb	r3, [r3, #0]
 8016fd0:	4619      	mov	r1, r3
 8016fd2:	6878      	ldr	r0, [r7, #4]
 8016fd4:	f7fe ffe1 	bl	8015f9a <USBD_SetClassConfig>
 8016fd8:	4603      	mov	r3, r0
 8016fda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016fdc:	7bfb      	ldrb	r3, [r7, #15]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d008      	beq.n	8016ff4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016fe2:	6839      	ldr	r1, [r7, #0]
 8016fe4:	6878      	ldr	r0, [r7, #4]
 8016fe6:	f000 f962 	bl	80172ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	2202      	movs	r2, #2
 8016fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016ff2:	e065      	b.n	80170c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016ff4:	6878      	ldr	r0, [r7, #4]
 8016ff6:	f000 fa25 	bl	8017444 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	2203      	movs	r2, #3
 8016ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017002:	e05d      	b.n	80170c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017004:	6878      	ldr	r0, [r7, #4]
 8017006:	f000 fa1d 	bl	8017444 <USBD_CtlSendStatus>
      break;
 801700a:	e059      	b.n	80170c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801700c:	4b2f      	ldr	r3, [pc, #188]	; (80170cc <USBD_SetConfig+0x150>)
 801700e:	781b      	ldrb	r3, [r3, #0]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d112      	bne.n	801703a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	2202      	movs	r2, #2
 8017018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801701c:	4b2b      	ldr	r3, [pc, #172]	; (80170cc <USBD_SetConfig+0x150>)
 801701e:	781b      	ldrb	r3, [r3, #0]
 8017020:	461a      	mov	r2, r3
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017026:	4b29      	ldr	r3, [pc, #164]	; (80170cc <USBD_SetConfig+0x150>)
 8017028:	781b      	ldrb	r3, [r3, #0]
 801702a:	4619      	mov	r1, r3
 801702c:	6878      	ldr	r0, [r7, #4]
 801702e:	f7fe ffd0 	bl	8015fd2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017032:	6878      	ldr	r0, [r7, #4]
 8017034:	f000 fa06 	bl	8017444 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017038:	e042      	b.n	80170c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801703a:	4b24      	ldr	r3, [pc, #144]	; (80170cc <USBD_SetConfig+0x150>)
 801703c:	781b      	ldrb	r3, [r3, #0]
 801703e:	461a      	mov	r2, r3
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	685b      	ldr	r3, [r3, #4]
 8017044:	429a      	cmp	r2, r3
 8017046:	d02a      	beq.n	801709e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	685b      	ldr	r3, [r3, #4]
 801704c:	b2db      	uxtb	r3, r3
 801704e:	4619      	mov	r1, r3
 8017050:	6878      	ldr	r0, [r7, #4]
 8017052:	f7fe ffbe 	bl	8015fd2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017056:	4b1d      	ldr	r3, [pc, #116]	; (80170cc <USBD_SetConfig+0x150>)
 8017058:	781b      	ldrb	r3, [r3, #0]
 801705a:	461a      	mov	r2, r3
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017060:	4b1a      	ldr	r3, [pc, #104]	; (80170cc <USBD_SetConfig+0x150>)
 8017062:	781b      	ldrb	r3, [r3, #0]
 8017064:	4619      	mov	r1, r3
 8017066:	6878      	ldr	r0, [r7, #4]
 8017068:	f7fe ff97 	bl	8015f9a <USBD_SetClassConfig>
 801706c:	4603      	mov	r3, r0
 801706e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017070:	7bfb      	ldrb	r3, [r7, #15]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d00f      	beq.n	8017096 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8017076:	6839      	ldr	r1, [r7, #0]
 8017078:	6878      	ldr	r0, [r7, #4]
 801707a:	f000 f918 	bl	80172ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	685b      	ldr	r3, [r3, #4]
 8017082:	b2db      	uxtb	r3, r3
 8017084:	4619      	mov	r1, r3
 8017086:	6878      	ldr	r0, [r7, #4]
 8017088:	f7fe ffa3 	bl	8015fd2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	2202      	movs	r2, #2
 8017090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017094:	e014      	b.n	80170c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017096:	6878      	ldr	r0, [r7, #4]
 8017098:	f000 f9d4 	bl	8017444 <USBD_CtlSendStatus>
      break;
 801709c:	e010      	b.n	80170c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801709e:	6878      	ldr	r0, [r7, #4]
 80170a0:	f000 f9d0 	bl	8017444 <USBD_CtlSendStatus>
      break;
 80170a4:	e00c      	b.n	80170c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80170a6:	6839      	ldr	r1, [r7, #0]
 80170a8:	6878      	ldr	r0, [r7, #4]
 80170aa:	f000 f900 	bl	80172ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80170ae:	4b07      	ldr	r3, [pc, #28]	; (80170cc <USBD_SetConfig+0x150>)
 80170b0:	781b      	ldrb	r3, [r3, #0]
 80170b2:	4619      	mov	r1, r3
 80170b4:	6878      	ldr	r0, [r7, #4]
 80170b6:	f7fe ff8c 	bl	8015fd2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80170ba:	2303      	movs	r3, #3
 80170bc:	73fb      	strb	r3, [r7, #15]
      break;
 80170be:	bf00      	nop
  }

  return ret;
 80170c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80170c2:	4618      	mov	r0, r3
 80170c4:	3710      	adds	r7, #16
 80170c6:	46bd      	mov	sp, r7
 80170c8:	bd80      	pop	{r7, pc}
 80170ca:	bf00      	nop
 80170cc:	240016a4 	.word	0x240016a4

080170d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b082      	sub	sp, #8
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
 80170d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80170da:	683b      	ldr	r3, [r7, #0]
 80170dc:	88db      	ldrh	r3, [r3, #6]
 80170de:	2b01      	cmp	r3, #1
 80170e0:	d004      	beq.n	80170ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80170e2:	6839      	ldr	r1, [r7, #0]
 80170e4:	6878      	ldr	r0, [r7, #4]
 80170e6:	f000 f8e2 	bl	80172ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80170ea:	e023      	b.n	8017134 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80170f2:	b2db      	uxtb	r3, r3
 80170f4:	2b02      	cmp	r3, #2
 80170f6:	dc02      	bgt.n	80170fe <USBD_GetConfig+0x2e>
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	dc03      	bgt.n	8017104 <USBD_GetConfig+0x34>
 80170fc:	e015      	b.n	801712a <USBD_GetConfig+0x5a>
 80170fe:	2b03      	cmp	r3, #3
 8017100:	d00b      	beq.n	801711a <USBD_GetConfig+0x4a>
 8017102:	e012      	b.n	801712a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	2200      	movs	r2, #0
 8017108:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	3308      	adds	r3, #8
 801710e:	2201      	movs	r2, #1
 8017110:	4619      	mov	r1, r3
 8017112:	6878      	ldr	r0, [r7, #4]
 8017114:	f000 f93c 	bl	8017390 <USBD_CtlSendData>
        break;
 8017118:	e00c      	b.n	8017134 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	3304      	adds	r3, #4
 801711e:	2201      	movs	r2, #1
 8017120:	4619      	mov	r1, r3
 8017122:	6878      	ldr	r0, [r7, #4]
 8017124:	f000 f934 	bl	8017390 <USBD_CtlSendData>
        break;
 8017128:	e004      	b.n	8017134 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801712a:	6839      	ldr	r1, [r7, #0]
 801712c:	6878      	ldr	r0, [r7, #4]
 801712e:	f000 f8be 	bl	80172ae <USBD_CtlError>
        break;
 8017132:	bf00      	nop
}
 8017134:	bf00      	nop
 8017136:	3708      	adds	r7, #8
 8017138:	46bd      	mov	sp, r7
 801713a:	bd80      	pop	{r7, pc}

0801713c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b082      	sub	sp, #8
 8017140:	af00      	add	r7, sp, #0
 8017142:	6078      	str	r0, [r7, #4]
 8017144:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801714c:	b2db      	uxtb	r3, r3
 801714e:	3b01      	subs	r3, #1
 8017150:	2b02      	cmp	r3, #2
 8017152:	d81e      	bhi.n	8017192 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017154:	683b      	ldr	r3, [r7, #0]
 8017156:	88db      	ldrh	r3, [r3, #6]
 8017158:	2b02      	cmp	r3, #2
 801715a:	d004      	beq.n	8017166 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801715c:	6839      	ldr	r1, [r7, #0]
 801715e:	6878      	ldr	r0, [r7, #4]
 8017160:	f000 f8a5 	bl	80172ae <USBD_CtlError>
        break;
 8017164:	e01a      	b.n	801719c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	2201      	movs	r2, #1
 801716a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8017172:	2b00      	cmp	r3, #0
 8017174:	d005      	beq.n	8017182 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	68db      	ldr	r3, [r3, #12]
 801717a:	f043 0202 	orr.w	r2, r3, #2
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	330c      	adds	r3, #12
 8017186:	2202      	movs	r2, #2
 8017188:	4619      	mov	r1, r3
 801718a:	6878      	ldr	r0, [r7, #4]
 801718c:	f000 f900 	bl	8017390 <USBD_CtlSendData>
      break;
 8017190:	e004      	b.n	801719c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017192:	6839      	ldr	r1, [r7, #0]
 8017194:	6878      	ldr	r0, [r7, #4]
 8017196:	f000 f88a 	bl	80172ae <USBD_CtlError>
      break;
 801719a:	bf00      	nop
  }
}
 801719c:	bf00      	nop
 801719e:	3708      	adds	r7, #8
 80171a0:	46bd      	mov	sp, r7
 80171a2:	bd80      	pop	{r7, pc}

080171a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171a4:	b580      	push	{r7, lr}
 80171a6:	b082      	sub	sp, #8
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
 80171ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80171ae:	683b      	ldr	r3, [r7, #0]
 80171b0:	885b      	ldrh	r3, [r3, #2]
 80171b2:	2b01      	cmp	r3, #1
 80171b4:	d107      	bne.n	80171c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	2201      	movs	r2, #1
 80171ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80171be:	6878      	ldr	r0, [r7, #4]
 80171c0:	f000 f940 	bl	8017444 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80171c4:	e013      	b.n	80171ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80171c6:	683b      	ldr	r3, [r7, #0]
 80171c8:	885b      	ldrh	r3, [r3, #2]
 80171ca:	2b02      	cmp	r3, #2
 80171cc:	d10b      	bne.n	80171e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80171ce:	683b      	ldr	r3, [r7, #0]
 80171d0:	889b      	ldrh	r3, [r3, #4]
 80171d2:	0a1b      	lsrs	r3, r3, #8
 80171d4:	b29b      	uxth	r3, r3
 80171d6:	b2da      	uxtb	r2, r3
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80171de:	6878      	ldr	r0, [r7, #4]
 80171e0:	f000 f930 	bl	8017444 <USBD_CtlSendStatus>
}
 80171e4:	e003      	b.n	80171ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80171e6:	6839      	ldr	r1, [r7, #0]
 80171e8:	6878      	ldr	r0, [r7, #4]
 80171ea:	f000 f860 	bl	80172ae <USBD_CtlError>
}
 80171ee:	bf00      	nop
 80171f0:	3708      	adds	r7, #8
 80171f2:	46bd      	mov	sp, r7
 80171f4:	bd80      	pop	{r7, pc}

080171f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171f6:	b580      	push	{r7, lr}
 80171f8:	b082      	sub	sp, #8
 80171fa:	af00      	add	r7, sp, #0
 80171fc:	6078      	str	r0, [r7, #4]
 80171fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017206:	b2db      	uxtb	r3, r3
 8017208:	3b01      	subs	r3, #1
 801720a:	2b02      	cmp	r3, #2
 801720c:	d80b      	bhi.n	8017226 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801720e:	683b      	ldr	r3, [r7, #0]
 8017210:	885b      	ldrh	r3, [r3, #2]
 8017212:	2b01      	cmp	r3, #1
 8017214:	d10c      	bne.n	8017230 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	2200      	movs	r2, #0
 801721a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801721e:	6878      	ldr	r0, [r7, #4]
 8017220:	f000 f910 	bl	8017444 <USBD_CtlSendStatus>
      }
      break;
 8017224:	e004      	b.n	8017230 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017226:	6839      	ldr	r1, [r7, #0]
 8017228:	6878      	ldr	r0, [r7, #4]
 801722a:	f000 f840 	bl	80172ae <USBD_CtlError>
      break;
 801722e:	e000      	b.n	8017232 <USBD_ClrFeature+0x3c>
      break;
 8017230:	bf00      	nop
  }
}
 8017232:	bf00      	nop
 8017234:	3708      	adds	r7, #8
 8017236:	46bd      	mov	sp, r7
 8017238:	bd80      	pop	{r7, pc}

0801723a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801723a:	b580      	push	{r7, lr}
 801723c:	b084      	sub	sp, #16
 801723e:	af00      	add	r7, sp, #0
 8017240:	6078      	str	r0, [r7, #4]
 8017242:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017244:	683b      	ldr	r3, [r7, #0]
 8017246:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	781a      	ldrb	r2, [r3, #0]
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	3301      	adds	r3, #1
 8017254:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	781a      	ldrb	r2, [r3, #0]
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	3301      	adds	r3, #1
 8017262:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017264:	68f8      	ldr	r0, [r7, #12]
 8017266:	f7ff fa41 	bl	80166ec <SWAPBYTE>
 801726a:	4603      	mov	r3, r0
 801726c:	461a      	mov	r2, r3
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	3301      	adds	r3, #1
 8017276:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	3301      	adds	r3, #1
 801727c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801727e:	68f8      	ldr	r0, [r7, #12]
 8017280:	f7ff fa34 	bl	80166ec <SWAPBYTE>
 8017284:	4603      	mov	r3, r0
 8017286:	461a      	mov	r2, r3
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	3301      	adds	r3, #1
 8017290:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	3301      	adds	r3, #1
 8017296:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017298:	68f8      	ldr	r0, [r7, #12]
 801729a:	f7ff fa27 	bl	80166ec <SWAPBYTE>
 801729e:	4603      	mov	r3, r0
 80172a0:	461a      	mov	r2, r3
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	80da      	strh	r2, [r3, #6]
}
 80172a6:	bf00      	nop
 80172a8:	3710      	adds	r7, #16
 80172aa:	46bd      	mov	sp, r7
 80172ac:	bd80      	pop	{r7, pc}

080172ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80172ae:	b580      	push	{r7, lr}
 80172b0:	b082      	sub	sp, #8
 80172b2:	af00      	add	r7, sp, #0
 80172b4:	6078      	str	r0, [r7, #4]
 80172b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80172b8:	2180      	movs	r1, #128	; 0x80
 80172ba:	6878      	ldr	r0, [r7, #4]
 80172bc:	f003 fcbe 	bl	801ac3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80172c0:	2100      	movs	r1, #0
 80172c2:	6878      	ldr	r0, [r7, #4]
 80172c4:	f003 fcba 	bl	801ac3c <USBD_LL_StallEP>
}
 80172c8:	bf00      	nop
 80172ca:	3708      	adds	r7, #8
 80172cc:	46bd      	mov	sp, r7
 80172ce:	bd80      	pop	{r7, pc}

080172d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b086      	sub	sp, #24
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	60f8      	str	r0, [r7, #12]
 80172d8:	60b9      	str	r1, [r7, #8]
 80172da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80172dc:	2300      	movs	r3, #0
 80172de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d036      	beq.n	8017354 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80172ea:	6938      	ldr	r0, [r7, #16]
 80172ec:	f000 f836 	bl	801735c <USBD_GetLen>
 80172f0:	4603      	mov	r3, r0
 80172f2:	3301      	adds	r3, #1
 80172f4:	b29b      	uxth	r3, r3
 80172f6:	005b      	lsls	r3, r3, #1
 80172f8:	b29a      	uxth	r2, r3
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80172fe:	7dfb      	ldrb	r3, [r7, #23]
 8017300:	68ba      	ldr	r2, [r7, #8]
 8017302:	4413      	add	r3, r2
 8017304:	687a      	ldr	r2, [r7, #4]
 8017306:	7812      	ldrb	r2, [r2, #0]
 8017308:	701a      	strb	r2, [r3, #0]
  idx++;
 801730a:	7dfb      	ldrb	r3, [r7, #23]
 801730c:	3301      	adds	r3, #1
 801730e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017310:	7dfb      	ldrb	r3, [r7, #23]
 8017312:	68ba      	ldr	r2, [r7, #8]
 8017314:	4413      	add	r3, r2
 8017316:	2203      	movs	r2, #3
 8017318:	701a      	strb	r2, [r3, #0]
  idx++;
 801731a:	7dfb      	ldrb	r3, [r7, #23]
 801731c:	3301      	adds	r3, #1
 801731e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017320:	e013      	b.n	801734a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017322:	7dfb      	ldrb	r3, [r7, #23]
 8017324:	68ba      	ldr	r2, [r7, #8]
 8017326:	4413      	add	r3, r2
 8017328:	693a      	ldr	r2, [r7, #16]
 801732a:	7812      	ldrb	r2, [r2, #0]
 801732c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801732e:	693b      	ldr	r3, [r7, #16]
 8017330:	3301      	adds	r3, #1
 8017332:	613b      	str	r3, [r7, #16]
    idx++;
 8017334:	7dfb      	ldrb	r3, [r7, #23]
 8017336:	3301      	adds	r3, #1
 8017338:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801733a:	7dfb      	ldrb	r3, [r7, #23]
 801733c:	68ba      	ldr	r2, [r7, #8]
 801733e:	4413      	add	r3, r2
 8017340:	2200      	movs	r2, #0
 8017342:	701a      	strb	r2, [r3, #0]
    idx++;
 8017344:	7dfb      	ldrb	r3, [r7, #23]
 8017346:	3301      	adds	r3, #1
 8017348:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801734a:	693b      	ldr	r3, [r7, #16]
 801734c:	781b      	ldrb	r3, [r3, #0]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d1e7      	bne.n	8017322 <USBD_GetString+0x52>
 8017352:	e000      	b.n	8017356 <USBD_GetString+0x86>
    return;
 8017354:	bf00      	nop
  }
}
 8017356:	3718      	adds	r7, #24
 8017358:	46bd      	mov	sp, r7
 801735a:	bd80      	pop	{r7, pc}

0801735c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801735c:	b480      	push	{r7}
 801735e:	b085      	sub	sp, #20
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017364:	2300      	movs	r3, #0
 8017366:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801736c:	e005      	b.n	801737a <USBD_GetLen+0x1e>
  {
    len++;
 801736e:	7bfb      	ldrb	r3, [r7, #15]
 8017370:	3301      	adds	r3, #1
 8017372:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017374:	68bb      	ldr	r3, [r7, #8]
 8017376:	3301      	adds	r3, #1
 8017378:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801737a:	68bb      	ldr	r3, [r7, #8]
 801737c:	781b      	ldrb	r3, [r3, #0]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d1f5      	bne.n	801736e <USBD_GetLen+0x12>
  }

  return len;
 8017382:	7bfb      	ldrb	r3, [r7, #15]
}
 8017384:	4618      	mov	r0, r3
 8017386:	3714      	adds	r7, #20
 8017388:	46bd      	mov	sp, r7
 801738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801738e:	4770      	bx	lr

08017390 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017390:	b580      	push	{r7, lr}
 8017392:	b084      	sub	sp, #16
 8017394:	af00      	add	r7, sp, #0
 8017396:	60f8      	str	r0, [r7, #12]
 8017398:	60b9      	str	r1, [r7, #8]
 801739a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	2202      	movs	r2, #2
 80173a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	687a      	ldr	r2, [r7, #4]
 80173a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	687a      	ldr	r2, [r7, #4]
 80173ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	68ba      	ldr	r2, [r7, #8]
 80173b4:	2100      	movs	r1, #0
 80173b6:	68f8      	ldr	r0, [r7, #12]
 80173b8:	f003 fcc9 	bl	801ad4e <USBD_LL_Transmit>

  return USBD_OK;
 80173bc:	2300      	movs	r3, #0
}
 80173be:	4618      	mov	r0, r3
 80173c0:	3710      	adds	r7, #16
 80173c2:	46bd      	mov	sp, r7
 80173c4:	bd80      	pop	{r7, pc}

080173c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80173c6:	b580      	push	{r7, lr}
 80173c8:	b084      	sub	sp, #16
 80173ca:	af00      	add	r7, sp, #0
 80173cc:	60f8      	str	r0, [r7, #12]
 80173ce:	60b9      	str	r1, [r7, #8]
 80173d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	68ba      	ldr	r2, [r7, #8]
 80173d6:	2100      	movs	r1, #0
 80173d8:	68f8      	ldr	r0, [r7, #12]
 80173da:	f003 fcb8 	bl	801ad4e <USBD_LL_Transmit>

  return USBD_OK;
 80173de:	2300      	movs	r3, #0
}
 80173e0:	4618      	mov	r0, r3
 80173e2:	3710      	adds	r7, #16
 80173e4:	46bd      	mov	sp, r7
 80173e6:	bd80      	pop	{r7, pc}

080173e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80173e8:	b580      	push	{r7, lr}
 80173ea:	b084      	sub	sp, #16
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	60f8      	str	r0, [r7, #12]
 80173f0:	60b9      	str	r1, [r7, #8]
 80173f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	2203      	movs	r2, #3
 80173f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	687a      	ldr	r2, [r7, #4]
 8017400:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	687a      	ldr	r2, [r7, #4]
 8017408:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	68ba      	ldr	r2, [r7, #8]
 8017410:	2100      	movs	r1, #0
 8017412:	68f8      	ldr	r0, [r7, #12]
 8017414:	f003 fcbc 	bl	801ad90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017418:	2300      	movs	r3, #0
}
 801741a:	4618      	mov	r0, r3
 801741c:	3710      	adds	r7, #16
 801741e:	46bd      	mov	sp, r7
 8017420:	bd80      	pop	{r7, pc}

08017422 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017422:	b580      	push	{r7, lr}
 8017424:	b084      	sub	sp, #16
 8017426:	af00      	add	r7, sp, #0
 8017428:	60f8      	str	r0, [r7, #12]
 801742a:	60b9      	str	r1, [r7, #8]
 801742c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	68ba      	ldr	r2, [r7, #8]
 8017432:	2100      	movs	r1, #0
 8017434:	68f8      	ldr	r0, [r7, #12]
 8017436:	f003 fcab 	bl	801ad90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801743a:	2300      	movs	r3, #0
}
 801743c:	4618      	mov	r0, r3
 801743e:	3710      	adds	r7, #16
 8017440:	46bd      	mov	sp, r7
 8017442:	bd80      	pop	{r7, pc}

08017444 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b082      	sub	sp, #8
 8017448:	af00      	add	r7, sp, #0
 801744a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	2204      	movs	r2, #4
 8017450:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017454:	2300      	movs	r3, #0
 8017456:	2200      	movs	r2, #0
 8017458:	2100      	movs	r1, #0
 801745a:	6878      	ldr	r0, [r7, #4]
 801745c:	f003 fc77 	bl	801ad4e <USBD_LL_Transmit>

  return USBD_OK;
 8017460:	2300      	movs	r3, #0
}
 8017462:	4618      	mov	r0, r3
 8017464:	3708      	adds	r7, #8
 8017466:	46bd      	mov	sp, r7
 8017468:	bd80      	pop	{r7, pc}

0801746a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801746a:	b580      	push	{r7, lr}
 801746c:	b082      	sub	sp, #8
 801746e:	af00      	add	r7, sp, #0
 8017470:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	2205      	movs	r2, #5
 8017476:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801747a:	2300      	movs	r3, #0
 801747c:	2200      	movs	r2, #0
 801747e:	2100      	movs	r1, #0
 8017480:	6878      	ldr	r0, [r7, #4]
 8017482:	f003 fc85 	bl	801ad90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017486:	2300      	movs	r3, #0
}
 8017488:	4618      	mov	r0, r3
 801748a:	3708      	adds	r7, #8
 801748c:	46bd      	mov	sp, r7
 801748e:	bd80      	pop	{r7, pc}

08017490 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8017490:	b580      	push	{r7, lr}
 8017492:	b084      	sub	sp, #16
 8017494:	af00      	add	r7, sp, #0
 8017496:	4603      	mov	r3, r0
 8017498:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801749a:	79fb      	ldrb	r3, [r7, #7]
 801749c:	4a08      	ldr	r2, [pc, #32]	; (80174c0 <disk_status+0x30>)
 801749e:	009b      	lsls	r3, r3, #2
 80174a0:	4413      	add	r3, r2
 80174a2:	685b      	ldr	r3, [r3, #4]
 80174a4:	685b      	ldr	r3, [r3, #4]
 80174a6:	79fa      	ldrb	r2, [r7, #7]
 80174a8:	4905      	ldr	r1, [pc, #20]	; (80174c0 <disk_status+0x30>)
 80174aa:	440a      	add	r2, r1
 80174ac:	7a12      	ldrb	r2, [r2, #8]
 80174ae:	4610      	mov	r0, r2
 80174b0:	4798      	blx	r3
 80174b2:	4603      	mov	r3, r0
 80174b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80174b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80174b8:	4618      	mov	r0, r3
 80174ba:	3710      	adds	r7, #16
 80174bc:	46bd      	mov	sp, r7
 80174be:	bd80      	pop	{r7, pc}
 80174c0:	240018d0 	.word	0x240018d0

080174c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b084      	sub	sp, #16
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	4603      	mov	r3, r0
 80174cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80174ce:	2300      	movs	r3, #0
 80174d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80174d2:	79fb      	ldrb	r3, [r7, #7]
 80174d4:	4a0d      	ldr	r2, [pc, #52]	; (801750c <disk_initialize+0x48>)
 80174d6:	5cd3      	ldrb	r3, [r2, r3]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d111      	bne.n	8017500 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80174dc:	79fb      	ldrb	r3, [r7, #7]
 80174de:	4a0b      	ldr	r2, [pc, #44]	; (801750c <disk_initialize+0x48>)
 80174e0:	2101      	movs	r1, #1
 80174e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80174e4:	79fb      	ldrb	r3, [r7, #7]
 80174e6:	4a09      	ldr	r2, [pc, #36]	; (801750c <disk_initialize+0x48>)
 80174e8:	009b      	lsls	r3, r3, #2
 80174ea:	4413      	add	r3, r2
 80174ec:	685b      	ldr	r3, [r3, #4]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	79fa      	ldrb	r2, [r7, #7]
 80174f2:	4906      	ldr	r1, [pc, #24]	; (801750c <disk_initialize+0x48>)
 80174f4:	440a      	add	r2, r1
 80174f6:	7a12      	ldrb	r2, [r2, #8]
 80174f8:	4610      	mov	r0, r2
 80174fa:	4798      	blx	r3
 80174fc:	4603      	mov	r3, r0
 80174fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8017500:	7bfb      	ldrb	r3, [r7, #15]
}
 8017502:	4618      	mov	r0, r3
 8017504:	3710      	adds	r7, #16
 8017506:	46bd      	mov	sp, r7
 8017508:	bd80      	pop	{r7, pc}
 801750a:	bf00      	nop
 801750c:	240018d0 	.word	0x240018d0

08017510 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8017510:	b590      	push	{r4, r7, lr}
 8017512:	b087      	sub	sp, #28
 8017514:	af00      	add	r7, sp, #0
 8017516:	60b9      	str	r1, [r7, #8]
 8017518:	607a      	str	r2, [r7, #4]
 801751a:	603b      	str	r3, [r7, #0]
 801751c:	4603      	mov	r3, r0
 801751e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8017520:	7bfb      	ldrb	r3, [r7, #15]
 8017522:	4a0a      	ldr	r2, [pc, #40]	; (801754c <disk_read+0x3c>)
 8017524:	009b      	lsls	r3, r3, #2
 8017526:	4413      	add	r3, r2
 8017528:	685b      	ldr	r3, [r3, #4]
 801752a:	689c      	ldr	r4, [r3, #8]
 801752c:	7bfb      	ldrb	r3, [r7, #15]
 801752e:	4a07      	ldr	r2, [pc, #28]	; (801754c <disk_read+0x3c>)
 8017530:	4413      	add	r3, r2
 8017532:	7a18      	ldrb	r0, [r3, #8]
 8017534:	683b      	ldr	r3, [r7, #0]
 8017536:	687a      	ldr	r2, [r7, #4]
 8017538:	68b9      	ldr	r1, [r7, #8]
 801753a:	47a0      	blx	r4
 801753c:	4603      	mov	r3, r0
 801753e:	75fb      	strb	r3, [r7, #23]
  return res;
 8017540:	7dfb      	ldrb	r3, [r7, #23]
}
 8017542:	4618      	mov	r0, r3
 8017544:	371c      	adds	r7, #28
 8017546:	46bd      	mov	sp, r7
 8017548:	bd90      	pop	{r4, r7, pc}
 801754a:	bf00      	nop
 801754c:	240018d0 	.word	0x240018d0

08017550 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8017550:	b590      	push	{r4, r7, lr}
 8017552:	b087      	sub	sp, #28
 8017554:	af00      	add	r7, sp, #0
 8017556:	60b9      	str	r1, [r7, #8]
 8017558:	607a      	str	r2, [r7, #4]
 801755a:	603b      	str	r3, [r7, #0]
 801755c:	4603      	mov	r3, r0
 801755e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8017560:	7bfb      	ldrb	r3, [r7, #15]
 8017562:	4a0a      	ldr	r2, [pc, #40]	; (801758c <disk_write+0x3c>)
 8017564:	009b      	lsls	r3, r3, #2
 8017566:	4413      	add	r3, r2
 8017568:	685b      	ldr	r3, [r3, #4]
 801756a:	68dc      	ldr	r4, [r3, #12]
 801756c:	7bfb      	ldrb	r3, [r7, #15]
 801756e:	4a07      	ldr	r2, [pc, #28]	; (801758c <disk_write+0x3c>)
 8017570:	4413      	add	r3, r2
 8017572:	7a18      	ldrb	r0, [r3, #8]
 8017574:	683b      	ldr	r3, [r7, #0]
 8017576:	687a      	ldr	r2, [r7, #4]
 8017578:	68b9      	ldr	r1, [r7, #8]
 801757a:	47a0      	blx	r4
 801757c:	4603      	mov	r3, r0
 801757e:	75fb      	strb	r3, [r7, #23]
  return res;
 8017580:	7dfb      	ldrb	r3, [r7, #23]
}
 8017582:	4618      	mov	r0, r3
 8017584:	371c      	adds	r7, #28
 8017586:	46bd      	mov	sp, r7
 8017588:	bd90      	pop	{r4, r7, pc}
 801758a:	bf00      	nop
 801758c:	240018d0 	.word	0x240018d0

08017590 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b084      	sub	sp, #16
 8017594:	af00      	add	r7, sp, #0
 8017596:	4603      	mov	r3, r0
 8017598:	603a      	str	r2, [r7, #0]
 801759a:	71fb      	strb	r3, [r7, #7]
 801759c:	460b      	mov	r3, r1
 801759e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80175a0:	79fb      	ldrb	r3, [r7, #7]
 80175a2:	4a09      	ldr	r2, [pc, #36]	; (80175c8 <disk_ioctl+0x38>)
 80175a4:	009b      	lsls	r3, r3, #2
 80175a6:	4413      	add	r3, r2
 80175a8:	685b      	ldr	r3, [r3, #4]
 80175aa:	691b      	ldr	r3, [r3, #16]
 80175ac:	79fa      	ldrb	r2, [r7, #7]
 80175ae:	4906      	ldr	r1, [pc, #24]	; (80175c8 <disk_ioctl+0x38>)
 80175b0:	440a      	add	r2, r1
 80175b2:	7a10      	ldrb	r0, [r2, #8]
 80175b4:	79b9      	ldrb	r1, [r7, #6]
 80175b6:	683a      	ldr	r2, [r7, #0]
 80175b8:	4798      	blx	r3
 80175ba:	4603      	mov	r3, r0
 80175bc:	73fb      	strb	r3, [r7, #15]
  return res;
 80175be:	7bfb      	ldrb	r3, [r7, #15]
}
 80175c0:	4618      	mov	r0, r3
 80175c2:	3710      	adds	r7, #16
 80175c4:	46bd      	mov	sp, r7
 80175c6:	bd80      	pop	{r7, pc}
 80175c8:	240018d0 	.word	0x240018d0

080175cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80175cc:	b480      	push	{r7}
 80175ce:	b085      	sub	sp, #20
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	3301      	adds	r3, #1
 80175d8:	781b      	ldrb	r3, [r3, #0]
 80175da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80175dc:	89fb      	ldrh	r3, [r7, #14]
 80175de:	021b      	lsls	r3, r3, #8
 80175e0:	b21a      	sxth	r2, r3
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	781b      	ldrb	r3, [r3, #0]
 80175e6:	b21b      	sxth	r3, r3
 80175e8:	4313      	orrs	r3, r2
 80175ea:	b21b      	sxth	r3, r3
 80175ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 80175ee:	89fb      	ldrh	r3, [r7, #14]
}
 80175f0:	4618      	mov	r0, r3
 80175f2:	3714      	adds	r7, #20
 80175f4:	46bd      	mov	sp, r7
 80175f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fa:	4770      	bx	lr

080175fc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80175fc:	b480      	push	{r7}
 80175fe:	b085      	sub	sp, #20
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	3303      	adds	r3, #3
 8017608:	781b      	ldrb	r3, [r3, #0]
 801760a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	021b      	lsls	r3, r3, #8
 8017610:	687a      	ldr	r2, [r7, #4]
 8017612:	3202      	adds	r2, #2
 8017614:	7812      	ldrb	r2, [r2, #0]
 8017616:	4313      	orrs	r3, r2
 8017618:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	021b      	lsls	r3, r3, #8
 801761e:	687a      	ldr	r2, [r7, #4]
 8017620:	3201      	adds	r2, #1
 8017622:	7812      	ldrb	r2, [r2, #0]
 8017624:	4313      	orrs	r3, r2
 8017626:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	021b      	lsls	r3, r3, #8
 801762c:	687a      	ldr	r2, [r7, #4]
 801762e:	7812      	ldrb	r2, [r2, #0]
 8017630:	4313      	orrs	r3, r2
 8017632:	60fb      	str	r3, [r7, #12]
	return rv;
 8017634:	68fb      	ldr	r3, [r7, #12]
}
 8017636:	4618      	mov	r0, r3
 8017638:	3714      	adds	r7, #20
 801763a:	46bd      	mov	sp, r7
 801763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017640:	4770      	bx	lr

08017642 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8017642:	b480      	push	{r7}
 8017644:	b083      	sub	sp, #12
 8017646:	af00      	add	r7, sp, #0
 8017648:	6078      	str	r0, [r7, #4]
 801764a:	460b      	mov	r3, r1
 801764c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	1c5a      	adds	r2, r3, #1
 8017652:	607a      	str	r2, [r7, #4]
 8017654:	887a      	ldrh	r2, [r7, #2]
 8017656:	b2d2      	uxtb	r2, r2
 8017658:	701a      	strb	r2, [r3, #0]
 801765a:	887b      	ldrh	r3, [r7, #2]
 801765c:	0a1b      	lsrs	r3, r3, #8
 801765e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	1c5a      	adds	r2, r3, #1
 8017664:	607a      	str	r2, [r7, #4]
 8017666:	887a      	ldrh	r2, [r7, #2]
 8017668:	b2d2      	uxtb	r2, r2
 801766a:	701a      	strb	r2, [r3, #0]
}
 801766c:	bf00      	nop
 801766e:	370c      	adds	r7, #12
 8017670:	46bd      	mov	sp, r7
 8017672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017676:	4770      	bx	lr

08017678 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8017678:	b480      	push	{r7}
 801767a:	b083      	sub	sp, #12
 801767c:	af00      	add	r7, sp, #0
 801767e:	6078      	str	r0, [r7, #4]
 8017680:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	1c5a      	adds	r2, r3, #1
 8017686:	607a      	str	r2, [r7, #4]
 8017688:	683a      	ldr	r2, [r7, #0]
 801768a:	b2d2      	uxtb	r2, r2
 801768c:	701a      	strb	r2, [r3, #0]
 801768e:	683b      	ldr	r3, [r7, #0]
 8017690:	0a1b      	lsrs	r3, r3, #8
 8017692:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	1c5a      	adds	r2, r3, #1
 8017698:	607a      	str	r2, [r7, #4]
 801769a:	683a      	ldr	r2, [r7, #0]
 801769c:	b2d2      	uxtb	r2, r2
 801769e:	701a      	strb	r2, [r3, #0]
 80176a0:	683b      	ldr	r3, [r7, #0]
 80176a2:	0a1b      	lsrs	r3, r3, #8
 80176a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	1c5a      	adds	r2, r3, #1
 80176aa:	607a      	str	r2, [r7, #4]
 80176ac:	683a      	ldr	r2, [r7, #0]
 80176ae:	b2d2      	uxtb	r2, r2
 80176b0:	701a      	strb	r2, [r3, #0]
 80176b2:	683b      	ldr	r3, [r7, #0]
 80176b4:	0a1b      	lsrs	r3, r3, #8
 80176b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	1c5a      	adds	r2, r3, #1
 80176bc:	607a      	str	r2, [r7, #4]
 80176be:	683a      	ldr	r2, [r7, #0]
 80176c0:	b2d2      	uxtb	r2, r2
 80176c2:	701a      	strb	r2, [r3, #0]
}
 80176c4:	bf00      	nop
 80176c6:	370c      	adds	r7, #12
 80176c8:	46bd      	mov	sp, r7
 80176ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ce:	4770      	bx	lr

080176d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80176d0:	b480      	push	{r7}
 80176d2:	b087      	sub	sp, #28
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	60f8      	str	r0, [r7, #12]
 80176d8:	60b9      	str	r1, [r7, #8]
 80176da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80176e0:	68bb      	ldr	r3, [r7, #8]
 80176e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d00d      	beq.n	8017706 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80176ea:	693a      	ldr	r2, [r7, #16]
 80176ec:	1c53      	adds	r3, r2, #1
 80176ee:	613b      	str	r3, [r7, #16]
 80176f0:	697b      	ldr	r3, [r7, #20]
 80176f2:	1c59      	adds	r1, r3, #1
 80176f4:	6179      	str	r1, [r7, #20]
 80176f6:	7812      	ldrb	r2, [r2, #0]
 80176f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	3b01      	subs	r3, #1
 80176fe:	607b      	str	r3, [r7, #4]
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d1f1      	bne.n	80176ea <mem_cpy+0x1a>
	}
}
 8017706:	bf00      	nop
 8017708:	371c      	adds	r7, #28
 801770a:	46bd      	mov	sp, r7
 801770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017710:	4770      	bx	lr

08017712 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8017712:	b480      	push	{r7}
 8017714:	b087      	sub	sp, #28
 8017716:	af00      	add	r7, sp, #0
 8017718:	60f8      	str	r0, [r7, #12]
 801771a:	60b9      	str	r1, [r7, #8]
 801771c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8017722:	697b      	ldr	r3, [r7, #20]
 8017724:	1c5a      	adds	r2, r3, #1
 8017726:	617a      	str	r2, [r7, #20]
 8017728:	68ba      	ldr	r2, [r7, #8]
 801772a:	b2d2      	uxtb	r2, r2
 801772c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	3b01      	subs	r3, #1
 8017732:	607b      	str	r3, [r7, #4]
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	2b00      	cmp	r3, #0
 8017738:	d1f3      	bne.n	8017722 <mem_set+0x10>
}
 801773a:	bf00      	nop
 801773c:	bf00      	nop
 801773e:	371c      	adds	r7, #28
 8017740:	46bd      	mov	sp, r7
 8017742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017746:	4770      	bx	lr

08017748 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8017748:	b480      	push	{r7}
 801774a:	b089      	sub	sp, #36	; 0x24
 801774c:	af00      	add	r7, sp, #0
 801774e:	60f8      	str	r0, [r7, #12]
 8017750:	60b9      	str	r1, [r7, #8]
 8017752:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	61fb      	str	r3, [r7, #28]
 8017758:	68bb      	ldr	r3, [r7, #8]
 801775a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801775c:	2300      	movs	r3, #0
 801775e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8017760:	69fb      	ldr	r3, [r7, #28]
 8017762:	1c5a      	adds	r2, r3, #1
 8017764:	61fa      	str	r2, [r7, #28]
 8017766:	781b      	ldrb	r3, [r3, #0]
 8017768:	4619      	mov	r1, r3
 801776a:	69bb      	ldr	r3, [r7, #24]
 801776c:	1c5a      	adds	r2, r3, #1
 801776e:	61ba      	str	r2, [r7, #24]
 8017770:	781b      	ldrb	r3, [r3, #0]
 8017772:	1acb      	subs	r3, r1, r3
 8017774:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	3b01      	subs	r3, #1
 801777a:	607b      	str	r3, [r7, #4]
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d002      	beq.n	8017788 <mem_cmp+0x40>
 8017782:	697b      	ldr	r3, [r7, #20]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d0eb      	beq.n	8017760 <mem_cmp+0x18>

	return r;
 8017788:	697b      	ldr	r3, [r7, #20]
}
 801778a:	4618      	mov	r0, r3
 801778c:	3724      	adds	r7, #36	; 0x24
 801778e:	46bd      	mov	sp, r7
 8017790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017794:	4770      	bx	lr

08017796 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8017796:	b480      	push	{r7}
 8017798:	b083      	sub	sp, #12
 801779a:	af00      	add	r7, sp, #0
 801779c:	6078      	str	r0, [r7, #4]
 801779e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80177a0:	e002      	b.n	80177a8 <chk_chr+0x12>
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	3301      	adds	r3, #1
 80177a6:	607b      	str	r3, [r7, #4]
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	781b      	ldrb	r3, [r3, #0]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d005      	beq.n	80177bc <chk_chr+0x26>
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	781b      	ldrb	r3, [r3, #0]
 80177b4:	461a      	mov	r2, r3
 80177b6:	683b      	ldr	r3, [r7, #0]
 80177b8:	4293      	cmp	r3, r2
 80177ba:	d1f2      	bne.n	80177a2 <chk_chr+0xc>
	return *str;
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	781b      	ldrb	r3, [r3, #0]
}
 80177c0:	4618      	mov	r0, r3
 80177c2:	370c      	adds	r7, #12
 80177c4:	46bd      	mov	sp, r7
 80177c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ca:	4770      	bx	lr

080177cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80177cc:	b480      	push	{r7}
 80177ce:	b085      	sub	sp, #20
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
 80177d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80177d6:	2300      	movs	r3, #0
 80177d8:	60bb      	str	r3, [r7, #8]
 80177da:	68bb      	ldr	r3, [r7, #8]
 80177dc:	60fb      	str	r3, [r7, #12]
 80177de:	e029      	b.n	8017834 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80177e0:	4a27      	ldr	r2, [pc, #156]	; (8017880 <chk_lock+0xb4>)
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	011b      	lsls	r3, r3, #4
 80177e6:	4413      	add	r3, r2
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d01d      	beq.n	801782a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80177ee:	4a24      	ldr	r2, [pc, #144]	; (8017880 <chk_lock+0xb4>)
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	011b      	lsls	r3, r3, #4
 80177f4:	4413      	add	r3, r2
 80177f6:	681a      	ldr	r2, [r3, #0]
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	429a      	cmp	r2, r3
 80177fe:	d116      	bne.n	801782e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8017800:	4a1f      	ldr	r2, [pc, #124]	; (8017880 <chk_lock+0xb4>)
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	011b      	lsls	r3, r3, #4
 8017806:	4413      	add	r3, r2
 8017808:	3304      	adds	r3, #4
 801780a:	681a      	ldr	r2, [r3, #0]
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017810:	429a      	cmp	r2, r3
 8017812:	d10c      	bne.n	801782e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017814:	4a1a      	ldr	r2, [pc, #104]	; (8017880 <chk_lock+0xb4>)
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	011b      	lsls	r3, r3, #4
 801781a:	4413      	add	r3, r2
 801781c:	3308      	adds	r3, #8
 801781e:	681a      	ldr	r2, [r3, #0]
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8017824:	429a      	cmp	r2, r3
 8017826:	d102      	bne.n	801782e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017828:	e007      	b.n	801783a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801782a:	2301      	movs	r3, #1
 801782c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	3301      	adds	r3, #1
 8017832:	60fb      	str	r3, [r7, #12]
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	2b01      	cmp	r3, #1
 8017838:	d9d2      	bls.n	80177e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	2b02      	cmp	r3, #2
 801783e:	d109      	bne.n	8017854 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017840:	68bb      	ldr	r3, [r7, #8]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d102      	bne.n	801784c <chk_lock+0x80>
 8017846:	683b      	ldr	r3, [r7, #0]
 8017848:	2b02      	cmp	r3, #2
 801784a:	d101      	bne.n	8017850 <chk_lock+0x84>
 801784c:	2300      	movs	r3, #0
 801784e:	e010      	b.n	8017872 <chk_lock+0xa6>
 8017850:	2312      	movs	r3, #18
 8017852:	e00e      	b.n	8017872 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017854:	683b      	ldr	r3, [r7, #0]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d108      	bne.n	801786c <chk_lock+0xa0>
 801785a:	4a09      	ldr	r2, [pc, #36]	; (8017880 <chk_lock+0xb4>)
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	011b      	lsls	r3, r3, #4
 8017860:	4413      	add	r3, r2
 8017862:	330c      	adds	r3, #12
 8017864:	881b      	ldrh	r3, [r3, #0]
 8017866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801786a:	d101      	bne.n	8017870 <chk_lock+0xa4>
 801786c:	2310      	movs	r3, #16
 801786e:	e000      	b.n	8017872 <chk_lock+0xa6>
 8017870:	2300      	movs	r3, #0
}
 8017872:	4618      	mov	r0, r3
 8017874:	3714      	adds	r7, #20
 8017876:	46bd      	mov	sp, r7
 8017878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801787c:	4770      	bx	lr
 801787e:	bf00      	nop
 8017880:	240016b0 	.word	0x240016b0

08017884 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8017884:	b480      	push	{r7}
 8017886:	b083      	sub	sp, #12
 8017888:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801788a:	2300      	movs	r3, #0
 801788c:	607b      	str	r3, [r7, #4]
 801788e:	e002      	b.n	8017896 <enq_lock+0x12>
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	3301      	adds	r3, #1
 8017894:	607b      	str	r3, [r7, #4]
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	2b01      	cmp	r3, #1
 801789a:	d806      	bhi.n	80178aa <enq_lock+0x26>
 801789c:	4a09      	ldr	r2, [pc, #36]	; (80178c4 <enq_lock+0x40>)
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	011b      	lsls	r3, r3, #4
 80178a2:	4413      	add	r3, r2
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d1f2      	bne.n	8017890 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	2b02      	cmp	r3, #2
 80178ae:	bf14      	ite	ne
 80178b0:	2301      	movne	r3, #1
 80178b2:	2300      	moveq	r3, #0
 80178b4:	b2db      	uxtb	r3, r3
}
 80178b6:	4618      	mov	r0, r3
 80178b8:	370c      	adds	r7, #12
 80178ba:	46bd      	mov	sp, r7
 80178bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c0:	4770      	bx	lr
 80178c2:	bf00      	nop
 80178c4:	240016b0 	.word	0x240016b0

080178c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80178c8:	b480      	push	{r7}
 80178ca:	b085      	sub	sp, #20
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]
 80178d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80178d2:	2300      	movs	r3, #0
 80178d4:	60fb      	str	r3, [r7, #12]
 80178d6:	e01f      	b.n	8017918 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80178d8:	4a41      	ldr	r2, [pc, #260]	; (80179e0 <inc_lock+0x118>)
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	011b      	lsls	r3, r3, #4
 80178de:	4413      	add	r3, r2
 80178e0:	681a      	ldr	r2, [r3, #0]
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	429a      	cmp	r2, r3
 80178e8:	d113      	bne.n	8017912 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80178ea:	4a3d      	ldr	r2, [pc, #244]	; (80179e0 <inc_lock+0x118>)
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	011b      	lsls	r3, r3, #4
 80178f0:	4413      	add	r3, r2
 80178f2:	3304      	adds	r3, #4
 80178f4:	681a      	ldr	r2, [r3, #0]
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80178fa:	429a      	cmp	r2, r3
 80178fc:	d109      	bne.n	8017912 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80178fe:	4a38      	ldr	r2, [pc, #224]	; (80179e0 <inc_lock+0x118>)
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	011b      	lsls	r3, r3, #4
 8017904:	4413      	add	r3, r2
 8017906:	3308      	adds	r3, #8
 8017908:	681a      	ldr	r2, [r3, #0]
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801790e:	429a      	cmp	r2, r3
 8017910:	d006      	beq.n	8017920 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	3301      	adds	r3, #1
 8017916:	60fb      	str	r3, [r7, #12]
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	2b01      	cmp	r3, #1
 801791c:	d9dc      	bls.n	80178d8 <inc_lock+0x10>
 801791e:	e000      	b.n	8017922 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8017920:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	2b02      	cmp	r3, #2
 8017926:	d132      	bne.n	801798e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017928:	2300      	movs	r3, #0
 801792a:	60fb      	str	r3, [r7, #12]
 801792c:	e002      	b.n	8017934 <inc_lock+0x6c>
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	3301      	adds	r3, #1
 8017932:	60fb      	str	r3, [r7, #12]
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	2b01      	cmp	r3, #1
 8017938:	d806      	bhi.n	8017948 <inc_lock+0x80>
 801793a:	4a29      	ldr	r2, [pc, #164]	; (80179e0 <inc_lock+0x118>)
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	011b      	lsls	r3, r3, #4
 8017940:	4413      	add	r3, r2
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d1f2      	bne.n	801792e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	2b02      	cmp	r3, #2
 801794c:	d101      	bne.n	8017952 <inc_lock+0x8a>
 801794e:	2300      	movs	r3, #0
 8017950:	e040      	b.n	80179d4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	681a      	ldr	r2, [r3, #0]
 8017956:	4922      	ldr	r1, [pc, #136]	; (80179e0 <inc_lock+0x118>)
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	011b      	lsls	r3, r3, #4
 801795c:	440b      	add	r3, r1
 801795e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	689a      	ldr	r2, [r3, #8]
 8017964:	491e      	ldr	r1, [pc, #120]	; (80179e0 <inc_lock+0x118>)
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	011b      	lsls	r3, r3, #4
 801796a:	440b      	add	r3, r1
 801796c:	3304      	adds	r3, #4
 801796e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	695a      	ldr	r2, [r3, #20]
 8017974:	491a      	ldr	r1, [pc, #104]	; (80179e0 <inc_lock+0x118>)
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	011b      	lsls	r3, r3, #4
 801797a:	440b      	add	r3, r1
 801797c:	3308      	adds	r3, #8
 801797e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017980:	4a17      	ldr	r2, [pc, #92]	; (80179e0 <inc_lock+0x118>)
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	011b      	lsls	r3, r3, #4
 8017986:	4413      	add	r3, r2
 8017988:	330c      	adds	r3, #12
 801798a:	2200      	movs	r2, #0
 801798c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801798e:	683b      	ldr	r3, [r7, #0]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d009      	beq.n	80179a8 <inc_lock+0xe0>
 8017994:	4a12      	ldr	r2, [pc, #72]	; (80179e0 <inc_lock+0x118>)
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	011b      	lsls	r3, r3, #4
 801799a:	4413      	add	r3, r2
 801799c:	330c      	adds	r3, #12
 801799e:	881b      	ldrh	r3, [r3, #0]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d001      	beq.n	80179a8 <inc_lock+0xe0>
 80179a4:	2300      	movs	r3, #0
 80179a6:	e015      	b.n	80179d4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80179a8:	683b      	ldr	r3, [r7, #0]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d108      	bne.n	80179c0 <inc_lock+0xf8>
 80179ae:	4a0c      	ldr	r2, [pc, #48]	; (80179e0 <inc_lock+0x118>)
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	011b      	lsls	r3, r3, #4
 80179b4:	4413      	add	r3, r2
 80179b6:	330c      	adds	r3, #12
 80179b8:	881b      	ldrh	r3, [r3, #0]
 80179ba:	3301      	adds	r3, #1
 80179bc:	b29a      	uxth	r2, r3
 80179be:	e001      	b.n	80179c4 <inc_lock+0xfc>
 80179c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80179c4:	4906      	ldr	r1, [pc, #24]	; (80179e0 <inc_lock+0x118>)
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	011b      	lsls	r3, r3, #4
 80179ca:	440b      	add	r3, r1
 80179cc:	330c      	adds	r3, #12
 80179ce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	3301      	adds	r3, #1
}
 80179d4:	4618      	mov	r0, r3
 80179d6:	3714      	adds	r7, #20
 80179d8:	46bd      	mov	sp, r7
 80179da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179de:	4770      	bx	lr
 80179e0:	240016b0 	.word	0x240016b0

080179e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80179e4:	b480      	push	{r7}
 80179e6:	b085      	sub	sp, #20
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	3b01      	subs	r3, #1
 80179f0:	607b      	str	r3, [r7, #4]
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	2b01      	cmp	r3, #1
 80179f6:	d825      	bhi.n	8017a44 <dec_lock+0x60>
		n = Files[i].ctr;
 80179f8:	4a17      	ldr	r2, [pc, #92]	; (8017a58 <dec_lock+0x74>)
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	011b      	lsls	r3, r3, #4
 80179fe:	4413      	add	r3, r2
 8017a00:	330c      	adds	r3, #12
 8017a02:	881b      	ldrh	r3, [r3, #0]
 8017a04:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017a06:	89fb      	ldrh	r3, [r7, #14]
 8017a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017a0c:	d101      	bne.n	8017a12 <dec_lock+0x2e>
 8017a0e:	2300      	movs	r3, #0
 8017a10:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8017a12:	89fb      	ldrh	r3, [r7, #14]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d002      	beq.n	8017a1e <dec_lock+0x3a>
 8017a18:	89fb      	ldrh	r3, [r7, #14]
 8017a1a:	3b01      	subs	r3, #1
 8017a1c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8017a1e:	4a0e      	ldr	r2, [pc, #56]	; (8017a58 <dec_lock+0x74>)
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	011b      	lsls	r3, r3, #4
 8017a24:	4413      	add	r3, r2
 8017a26:	330c      	adds	r3, #12
 8017a28:	89fa      	ldrh	r2, [r7, #14]
 8017a2a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017a2c:	89fb      	ldrh	r3, [r7, #14]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d105      	bne.n	8017a3e <dec_lock+0x5a>
 8017a32:	4a09      	ldr	r2, [pc, #36]	; (8017a58 <dec_lock+0x74>)
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	011b      	lsls	r3, r3, #4
 8017a38:	4413      	add	r3, r2
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8017a3e:	2300      	movs	r3, #0
 8017a40:	737b      	strb	r3, [r7, #13]
 8017a42:	e001      	b.n	8017a48 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017a44:	2302      	movs	r3, #2
 8017a46:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017a48:	7b7b      	ldrb	r3, [r7, #13]
}
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	3714      	adds	r7, #20
 8017a4e:	46bd      	mov	sp, r7
 8017a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a54:	4770      	bx	lr
 8017a56:	bf00      	nop
 8017a58:	240016b0 	.word	0x240016b0

08017a5c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017a5c:	b480      	push	{r7}
 8017a5e:	b085      	sub	sp, #20
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017a64:	2300      	movs	r3, #0
 8017a66:	60fb      	str	r3, [r7, #12]
 8017a68:	e010      	b.n	8017a8c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017a6a:	4a0d      	ldr	r2, [pc, #52]	; (8017aa0 <clear_lock+0x44>)
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	011b      	lsls	r3, r3, #4
 8017a70:	4413      	add	r3, r2
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	687a      	ldr	r2, [r7, #4]
 8017a76:	429a      	cmp	r2, r3
 8017a78:	d105      	bne.n	8017a86 <clear_lock+0x2a>
 8017a7a:	4a09      	ldr	r2, [pc, #36]	; (8017aa0 <clear_lock+0x44>)
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	011b      	lsls	r3, r3, #4
 8017a80:	4413      	add	r3, r2
 8017a82:	2200      	movs	r2, #0
 8017a84:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	3301      	adds	r3, #1
 8017a8a:	60fb      	str	r3, [r7, #12]
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	2b01      	cmp	r3, #1
 8017a90:	d9eb      	bls.n	8017a6a <clear_lock+0xe>
	}
}
 8017a92:	bf00      	nop
 8017a94:	bf00      	nop
 8017a96:	3714      	adds	r7, #20
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a9e:	4770      	bx	lr
 8017aa0:	240016b0 	.word	0x240016b0

08017aa4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b086      	sub	sp, #24
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017aac:	2300      	movs	r3, #0
 8017aae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	78db      	ldrb	r3, [r3, #3]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d034      	beq.n	8017b22 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017abc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	7858      	ldrb	r0, [r3, #1]
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017ac8:	2301      	movs	r3, #1
 8017aca:	697a      	ldr	r2, [r7, #20]
 8017acc:	f7ff fd40 	bl	8017550 <disk_write>
 8017ad0:	4603      	mov	r3, r0
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d002      	beq.n	8017adc <sync_window+0x38>
			res = FR_DISK_ERR;
 8017ad6:	2301      	movs	r3, #1
 8017ad8:	73fb      	strb	r3, [r7, #15]
 8017ada:	e022      	b.n	8017b22 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	2200      	movs	r2, #0
 8017ae0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ae6:	697a      	ldr	r2, [r7, #20]
 8017ae8:	1ad2      	subs	r2, r2, r3
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	6a1b      	ldr	r3, [r3, #32]
 8017aee:	429a      	cmp	r2, r3
 8017af0:	d217      	bcs.n	8017b22 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	789b      	ldrb	r3, [r3, #2]
 8017af6:	613b      	str	r3, [r7, #16]
 8017af8:	e010      	b.n	8017b1c <sync_window+0x78>
					wsect += fs->fsize;
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	6a1b      	ldr	r3, [r3, #32]
 8017afe:	697a      	ldr	r2, [r7, #20]
 8017b00:	4413      	add	r3, r2
 8017b02:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	7858      	ldrb	r0, [r3, #1]
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017b0e:	2301      	movs	r3, #1
 8017b10:	697a      	ldr	r2, [r7, #20]
 8017b12:	f7ff fd1d 	bl	8017550 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017b16:	693b      	ldr	r3, [r7, #16]
 8017b18:	3b01      	subs	r3, #1
 8017b1a:	613b      	str	r3, [r7, #16]
 8017b1c:	693b      	ldr	r3, [r7, #16]
 8017b1e:	2b01      	cmp	r3, #1
 8017b20:	d8eb      	bhi.n	8017afa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b24:	4618      	mov	r0, r3
 8017b26:	3718      	adds	r7, #24
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	bd80      	pop	{r7, pc}

08017b2c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017b2c:	b580      	push	{r7, lr}
 8017b2e:	b084      	sub	sp, #16
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	6078      	str	r0, [r7, #4]
 8017b34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017b36:	2300      	movs	r3, #0
 8017b38:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b3e:	683a      	ldr	r2, [r7, #0]
 8017b40:	429a      	cmp	r2, r3
 8017b42:	d01b      	beq.n	8017b7c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017b44:	6878      	ldr	r0, [r7, #4]
 8017b46:	f7ff ffad 	bl	8017aa4 <sync_window>
 8017b4a:	4603      	mov	r3, r0
 8017b4c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017b4e:	7bfb      	ldrb	r3, [r7, #15]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d113      	bne.n	8017b7c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	7858      	ldrb	r0, [r3, #1]
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017b5e:	2301      	movs	r3, #1
 8017b60:	683a      	ldr	r2, [r7, #0]
 8017b62:	f7ff fcd5 	bl	8017510 <disk_read>
 8017b66:	4603      	mov	r3, r0
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d004      	beq.n	8017b76 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b70:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017b72:	2301      	movs	r3, #1
 8017b74:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	683a      	ldr	r2, [r7, #0]
 8017b7a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8017b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b7e:	4618      	mov	r0, r3
 8017b80:	3710      	adds	r7, #16
 8017b82:	46bd      	mov	sp, r7
 8017b84:	bd80      	pop	{r7, pc}
	...

08017b88 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b084      	sub	sp, #16
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017b90:	6878      	ldr	r0, [r7, #4]
 8017b92:	f7ff ff87 	bl	8017aa4 <sync_window>
 8017b96:	4603      	mov	r3, r0
 8017b98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017b9a:	7bfb      	ldrb	r3, [r7, #15]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d159      	bne.n	8017c54 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	781b      	ldrb	r3, [r3, #0]
 8017ba4:	2b03      	cmp	r3, #3
 8017ba6:	d149      	bne.n	8017c3c <sync_fs+0xb4>
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	791b      	ldrb	r3, [r3, #4]
 8017bac:	2b01      	cmp	r3, #1
 8017bae:	d145      	bne.n	8017c3c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	899b      	ldrh	r3, [r3, #12]
 8017bba:	461a      	mov	r2, r3
 8017bbc:	2100      	movs	r1, #0
 8017bbe:	f7ff fda8 	bl	8017712 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	3338      	adds	r3, #56	; 0x38
 8017bc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017bca:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f7ff fd37 	bl	8017642 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	3338      	adds	r3, #56	; 0x38
 8017bd8:	4921      	ldr	r1, [pc, #132]	; (8017c60 <sync_fs+0xd8>)
 8017bda:	4618      	mov	r0, r3
 8017bdc:	f7ff fd4c 	bl	8017678 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	3338      	adds	r3, #56	; 0x38
 8017be4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017be8:	491e      	ldr	r1, [pc, #120]	; (8017c64 <sync_fs+0xdc>)
 8017bea:	4618      	mov	r0, r3
 8017bec:	f7ff fd44 	bl	8017678 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	3338      	adds	r3, #56	; 0x38
 8017bf4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	699b      	ldr	r3, [r3, #24]
 8017bfc:	4619      	mov	r1, r3
 8017bfe:	4610      	mov	r0, r2
 8017c00:	f7ff fd3a 	bl	8017678 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	3338      	adds	r3, #56	; 0x38
 8017c08:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	695b      	ldr	r3, [r3, #20]
 8017c10:	4619      	mov	r1, r3
 8017c12:	4610      	mov	r0, r2
 8017c14:	f7ff fd30 	bl	8017678 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c1c:	1c5a      	adds	r2, r3, #1
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	7858      	ldrb	r0, [r3, #1]
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017c30:	2301      	movs	r3, #1
 8017c32:	f7ff fc8d 	bl	8017550 <disk_write>
			fs->fsi_flag = 0;
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	2200      	movs	r2, #0
 8017c3a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	785b      	ldrb	r3, [r3, #1]
 8017c40:	2200      	movs	r2, #0
 8017c42:	2100      	movs	r1, #0
 8017c44:	4618      	mov	r0, r3
 8017c46:	f7ff fca3 	bl	8017590 <disk_ioctl>
 8017c4a:	4603      	mov	r3, r0
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d001      	beq.n	8017c54 <sync_fs+0xcc>
 8017c50:	2301      	movs	r3, #1
 8017c52:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c56:	4618      	mov	r0, r3
 8017c58:	3710      	adds	r7, #16
 8017c5a:	46bd      	mov	sp, r7
 8017c5c:	bd80      	pop	{r7, pc}
 8017c5e:	bf00      	nop
 8017c60:	41615252 	.word	0x41615252
 8017c64:	61417272 	.word	0x61417272

08017c68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017c68:	b480      	push	{r7}
 8017c6a:	b083      	sub	sp, #12
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
 8017c70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8017c72:	683b      	ldr	r3, [r7, #0]
 8017c74:	3b02      	subs	r3, #2
 8017c76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	69db      	ldr	r3, [r3, #28]
 8017c7c:	3b02      	subs	r3, #2
 8017c7e:	683a      	ldr	r2, [r7, #0]
 8017c80:	429a      	cmp	r2, r3
 8017c82:	d301      	bcc.n	8017c88 <clust2sect+0x20>
 8017c84:	2300      	movs	r3, #0
 8017c86:	e008      	b.n	8017c9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	895b      	ldrh	r3, [r3, #10]
 8017c8c:	461a      	mov	r2, r3
 8017c8e:	683b      	ldr	r3, [r7, #0]
 8017c90:	fb03 f202 	mul.w	r2, r3, r2
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c98:	4413      	add	r3, r2
}
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	370c      	adds	r7, #12
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca4:	4770      	bx	lr

08017ca6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017ca6:	b580      	push	{r7, lr}
 8017ca8:	b086      	sub	sp, #24
 8017caa:	af00      	add	r7, sp, #0
 8017cac:	6078      	str	r0, [r7, #4]
 8017cae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017cb6:	683b      	ldr	r3, [r7, #0]
 8017cb8:	2b01      	cmp	r3, #1
 8017cba:	d904      	bls.n	8017cc6 <get_fat+0x20>
 8017cbc:	693b      	ldr	r3, [r7, #16]
 8017cbe:	69db      	ldr	r3, [r3, #28]
 8017cc0:	683a      	ldr	r2, [r7, #0]
 8017cc2:	429a      	cmp	r2, r3
 8017cc4:	d302      	bcc.n	8017ccc <get_fat+0x26>
		val = 1;	/* Internal error */
 8017cc6:	2301      	movs	r3, #1
 8017cc8:	617b      	str	r3, [r7, #20]
 8017cca:	e0bb      	b.n	8017e44 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8017cd0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017cd2:	693b      	ldr	r3, [r7, #16]
 8017cd4:	781b      	ldrb	r3, [r3, #0]
 8017cd6:	2b03      	cmp	r3, #3
 8017cd8:	f000 8083 	beq.w	8017de2 <get_fat+0x13c>
 8017cdc:	2b03      	cmp	r3, #3
 8017cde:	f300 80a7 	bgt.w	8017e30 <get_fat+0x18a>
 8017ce2:	2b01      	cmp	r3, #1
 8017ce4:	d002      	beq.n	8017cec <get_fat+0x46>
 8017ce6:	2b02      	cmp	r3, #2
 8017ce8:	d056      	beq.n	8017d98 <get_fat+0xf2>
 8017cea:	e0a1      	b.n	8017e30 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017cec:	683b      	ldr	r3, [r7, #0]
 8017cee:	60fb      	str	r3, [r7, #12]
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	085b      	lsrs	r3, r3, #1
 8017cf4:	68fa      	ldr	r2, [r7, #12]
 8017cf6:	4413      	add	r3, r2
 8017cf8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017cfa:	693b      	ldr	r3, [r7, #16]
 8017cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017cfe:	693b      	ldr	r3, [r7, #16]
 8017d00:	899b      	ldrh	r3, [r3, #12]
 8017d02:	4619      	mov	r1, r3
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8017d0a:	4413      	add	r3, r2
 8017d0c:	4619      	mov	r1, r3
 8017d0e:	6938      	ldr	r0, [r7, #16]
 8017d10:	f7ff ff0c 	bl	8017b2c <move_window>
 8017d14:	4603      	mov	r3, r0
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	f040 808d 	bne.w	8017e36 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	1c5a      	adds	r2, r3, #1
 8017d20:	60fa      	str	r2, [r7, #12]
 8017d22:	693a      	ldr	r2, [r7, #16]
 8017d24:	8992      	ldrh	r2, [r2, #12]
 8017d26:	fbb3 f1f2 	udiv	r1, r3, r2
 8017d2a:	fb01 f202 	mul.w	r2, r1, r2
 8017d2e:	1a9b      	subs	r3, r3, r2
 8017d30:	693a      	ldr	r2, [r7, #16]
 8017d32:	4413      	add	r3, r2
 8017d34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017d38:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017d3a:	693b      	ldr	r3, [r7, #16]
 8017d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d3e:	693b      	ldr	r3, [r7, #16]
 8017d40:	899b      	ldrh	r3, [r3, #12]
 8017d42:	4619      	mov	r1, r3
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8017d4a:	4413      	add	r3, r2
 8017d4c:	4619      	mov	r1, r3
 8017d4e:	6938      	ldr	r0, [r7, #16]
 8017d50:	f7ff feec 	bl	8017b2c <move_window>
 8017d54:	4603      	mov	r3, r0
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d16f      	bne.n	8017e3a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8017d5a:	693b      	ldr	r3, [r7, #16]
 8017d5c:	899b      	ldrh	r3, [r3, #12]
 8017d5e:	461a      	mov	r2, r3
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	fbb3 f1f2 	udiv	r1, r3, r2
 8017d66:	fb01 f202 	mul.w	r2, r1, r2
 8017d6a:	1a9b      	subs	r3, r3, r2
 8017d6c:	693a      	ldr	r2, [r7, #16]
 8017d6e:	4413      	add	r3, r2
 8017d70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017d74:	021b      	lsls	r3, r3, #8
 8017d76:	461a      	mov	r2, r3
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	4313      	orrs	r3, r2
 8017d7c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017d7e:	683b      	ldr	r3, [r7, #0]
 8017d80:	f003 0301 	and.w	r3, r3, #1
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d002      	beq.n	8017d8e <get_fat+0xe8>
 8017d88:	68bb      	ldr	r3, [r7, #8]
 8017d8a:	091b      	lsrs	r3, r3, #4
 8017d8c:	e002      	b.n	8017d94 <get_fat+0xee>
 8017d8e:	68bb      	ldr	r3, [r7, #8]
 8017d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017d94:	617b      	str	r3, [r7, #20]
			break;
 8017d96:	e055      	b.n	8017e44 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017d98:	693b      	ldr	r3, [r7, #16]
 8017d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d9c:	693b      	ldr	r3, [r7, #16]
 8017d9e:	899b      	ldrh	r3, [r3, #12]
 8017da0:	085b      	lsrs	r3, r3, #1
 8017da2:	b29b      	uxth	r3, r3
 8017da4:	4619      	mov	r1, r3
 8017da6:	683b      	ldr	r3, [r7, #0]
 8017da8:	fbb3 f3f1 	udiv	r3, r3, r1
 8017dac:	4413      	add	r3, r2
 8017dae:	4619      	mov	r1, r3
 8017db0:	6938      	ldr	r0, [r7, #16]
 8017db2:	f7ff febb 	bl	8017b2c <move_window>
 8017db6:	4603      	mov	r3, r0
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d140      	bne.n	8017e3e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017dbc:	693b      	ldr	r3, [r7, #16]
 8017dbe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017dc2:	683b      	ldr	r3, [r7, #0]
 8017dc4:	005b      	lsls	r3, r3, #1
 8017dc6:	693a      	ldr	r2, [r7, #16]
 8017dc8:	8992      	ldrh	r2, [r2, #12]
 8017dca:	fbb3 f0f2 	udiv	r0, r3, r2
 8017dce:	fb00 f202 	mul.w	r2, r0, r2
 8017dd2:	1a9b      	subs	r3, r3, r2
 8017dd4:	440b      	add	r3, r1
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	f7ff fbf8 	bl	80175cc <ld_word>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	617b      	str	r3, [r7, #20]
			break;
 8017de0:	e030      	b.n	8017e44 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017de2:	693b      	ldr	r3, [r7, #16]
 8017de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017de6:	693b      	ldr	r3, [r7, #16]
 8017de8:	899b      	ldrh	r3, [r3, #12]
 8017dea:	089b      	lsrs	r3, r3, #2
 8017dec:	b29b      	uxth	r3, r3
 8017dee:	4619      	mov	r1, r3
 8017df0:	683b      	ldr	r3, [r7, #0]
 8017df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8017df6:	4413      	add	r3, r2
 8017df8:	4619      	mov	r1, r3
 8017dfa:	6938      	ldr	r0, [r7, #16]
 8017dfc:	f7ff fe96 	bl	8017b2c <move_window>
 8017e00:	4603      	mov	r3, r0
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d11d      	bne.n	8017e42 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017e06:	693b      	ldr	r3, [r7, #16]
 8017e08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017e0c:	683b      	ldr	r3, [r7, #0]
 8017e0e:	009b      	lsls	r3, r3, #2
 8017e10:	693a      	ldr	r2, [r7, #16]
 8017e12:	8992      	ldrh	r2, [r2, #12]
 8017e14:	fbb3 f0f2 	udiv	r0, r3, r2
 8017e18:	fb00 f202 	mul.w	r2, r0, r2
 8017e1c:	1a9b      	subs	r3, r3, r2
 8017e1e:	440b      	add	r3, r1
 8017e20:	4618      	mov	r0, r3
 8017e22:	f7ff fbeb 	bl	80175fc <ld_dword>
 8017e26:	4603      	mov	r3, r0
 8017e28:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017e2c:	617b      	str	r3, [r7, #20]
			break;
 8017e2e:	e009      	b.n	8017e44 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017e30:	2301      	movs	r3, #1
 8017e32:	617b      	str	r3, [r7, #20]
 8017e34:	e006      	b.n	8017e44 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017e36:	bf00      	nop
 8017e38:	e004      	b.n	8017e44 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017e3a:	bf00      	nop
 8017e3c:	e002      	b.n	8017e44 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017e3e:	bf00      	nop
 8017e40:	e000      	b.n	8017e44 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017e42:	bf00      	nop
		}
	}

	return val;
 8017e44:	697b      	ldr	r3, [r7, #20]
}
 8017e46:	4618      	mov	r0, r3
 8017e48:	3718      	adds	r7, #24
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	bd80      	pop	{r7, pc}

08017e4e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8017e4e:	b590      	push	{r4, r7, lr}
 8017e50:	b089      	sub	sp, #36	; 0x24
 8017e52:	af00      	add	r7, sp, #0
 8017e54:	60f8      	str	r0, [r7, #12]
 8017e56:	60b9      	str	r1, [r7, #8]
 8017e58:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8017e5a:	2302      	movs	r3, #2
 8017e5c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017e5e:	68bb      	ldr	r3, [r7, #8]
 8017e60:	2b01      	cmp	r3, #1
 8017e62:	f240 8109 	bls.w	8018078 <put_fat+0x22a>
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	69db      	ldr	r3, [r3, #28]
 8017e6a:	68ba      	ldr	r2, [r7, #8]
 8017e6c:	429a      	cmp	r2, r3
 8017e6e:	f080 8103 	bcs.w	8018078 <put_fat+0x22a>
		switch (fs->fs_type) {
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	781b      	ldrb	r3, [r3, #0]
 8017e76:	2b03      	cmp	r3, #3
 8017e78:	f000 80b6 	beq.w	8017fe8 <put_fat+0x19a>
 8017e7c:	2b03      	cmp	r3, #3
 8017e7e:	f300 80fb 	bgt.w	8018078 <put_fat+0x22a>
 8017e82:	2b01      	cmp	r3, #1
 8017e84:	d003      	beq.n	8017e8e <put_fat+0x40>
 8017e86:	2b02      	cmp	r3, #2
 8017e88:	f000 8083 	beq.w	8017f92 <put_fat+0x144>
 8017e8c:	e0f4      	b.n	8018078 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8017e8e:	68bb      	ldr	r3, [r7, #8]
 8017e90:	61bb      	str	r3, [r7, #24]
 8017e92:	69bb      	ldr	r3, [r7, #24]
 8017e94:	085b      	lsrs	r3, r3, #1
 8017e96:	69ba      	ldr	r2, [r7, #24]
 8017e98:	4413      	add	r3, r2
 8017e9a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	899b      	ldrh	r3, [r3, #12]
 8017ea4:	4619      	mov	r1, r3
 8017ea6:	69bb      	ldr	r3, [r7, #24]
 8017ea8:	fbb3 f3f1 	udiv	r3, r3, r1
 8017eac:	4413      	add	r3, r2
 8017eae:	4619      	mov	r1, r3
 8017eb0:	68f8      	ldr	r0, [r7, #12]
 8017eb2:	f7ff fe3b 	bl	8017b2c <move_window>
 8017eb6:	4603      	mov	r3, r0
 8017eb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017eba:	7ffb      	ldrb	r3, [r7, #31]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	f040 80d4 	bne.w	801806a <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017ec8:	69bb      	ldr	r3, [r7, #24]
 8017eca:	1c5a      	adds	r2, r3, #1
 8017ecc:	61ba      	str	r2, [r7, #24]
 8017ece:	68fa      	ldr	r2, [r7, #12]
 8017ed0:	8992      	ldrh	r2, [r2, #12]
 8017ed2:	fbb3 f0f2 	udiv	r0, r3, r2
 8017ed6:	fb00 f202 	mul.w	r2, r0, r2
 8017eda:	1a9b      	subs	r3, r3, r2
 8017edc:	440b      	add	r3, r1
 8017ede:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017ee0:	68bb      	ldr	r3, [r7, #8]
 8017ee2:	f003 0301 	and.w	r3, r3, #1
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d00d      	beq.n	8017f06 <put_fat+0xb8>
 8017eea:	697b      	ldr	r3, [r7, #20]
 8017eec:	781b      	ldrb	r3, [r3, #0]
 8017eee:	b25b      	sxtb	r3, r3
 8017ef0:	f003 030f 	and.w	r3, r3, #15
 8017ef4:	b25a      	sxtb	r2, r3
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	b2db      	uxtb	r3, r3
 8017efa:	011b      	lsls	r3, r3, #4
 8017efc:	b25b      	sxtb	r3, r3
 8017efe:	4313      	orrs	r3, r2
 8017f00:	b25b      	sxtb	r3, r3
 8017f02:	b2db      	uxtb	r3, r3
 8017f04:	e001      	b.n	8017f0a <put_fat+0xbc>
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	b2db      	uxtb	r3, r3
 8017f0a:	697a      	ldr	r2, [r7, #20]
 8017f0c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	2201      	movs	r2, #1
 8017f12:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	899b      	ldrh	r3, [r3, #12]
 8017f1c:	4619      	mov	r1, r3
 8017f1e:	69bb      	ldr	r3, [r7, #24]
 8017f20:	fbb3 f3f1 	udiv	r3, r3, r1
 8017f24:	4413      	add	r3, r2
 8017f26:	4619      	mov	r1, r3
 8017f28:	68f8      	ldr	r0, [r7, #12]
 8017f2a:	f7ff fdff 	bl	8017b2c <move_window>
 8017f2e:	4603      	mov	r3, r0
 8017f30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017f32:	7ffb      	ldrb	r3, [r7, #31]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	f040 809a 	bne.w	801806e <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	899b      	ldrh	r3, [r3, #12]
 8017f44:	461a      	mov	r2, r3
 8017f46:	69bb      	ldr	r3, [r7, #24]
 8017f48:	fbb3 f0f2 	udiv	r0, r3, r2
 8017f4c:	fb00 f202 	mul.w	r2, r0, r2
 8017f50:	1a9b      	subs	r3, r3, r2
 8017f52:	440b      	add	r3, r1
 8017f54:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017f56:	68bb      	ldr	r3, [r7, #8]
 8017f58:	f003 0301 	and.w	r3, r3, #1
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d003      	beq.n	8017f68 <put_fat+0x11a>
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	091b      	lsrs	r3, r3, #4
 8017f64:	b2db      	uxtb	r3, r3
 8017f66:	e00e      	b.n	8017f86 <put_fat+0x138>
 8017f68:	697b      	ldr	r3, [r7, #20]
 8017f6a:	781b      	ldrb	r3, [r3, #0]
 8017f6c:	b25b      	sxtb	r3, r3
 8017f6e:	f023 030f 	bic.w	r3, r3, #15
 8017f72:	b25a      	sxtb	r2, r3
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	0a1b      	lsrs	r3, r3, #8
 8017f78:	b25b      	sxtb	r3, r3
 8017f7a:	f003 030f 	and.w	r3, r3, #15
 8017f7e:	b25b      	sxtb	r3, r3
 8017f80:	4313      	orrs	r3, r2
 8017f82:	b25b      	sxtb	r3, r3
 8017f84:	b2db      	uxtb	r3, r3
 8017f86:	697a      	ldr	r2, [r7, #20]
 8017f88:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	2201      	movs	r2, #1
 8017f8e:	70da      	strb	r2, [r3, #3]
			break;
 8017f90:	e072      	b.n	8018078 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	899b      	ldrh	r3, [r3, #12]
 8017f9a:	085b      	lsrs	r3, r3, #1
 8017f9c:	b29b      	uxth	r3, r3
 8017f9e:	4619      	mov	r1, r3
 8017fa0:	68bb      	ldr	r3, [r7, #8]
 8017fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8017fa6:	4413      	add	r3, r2
 8017fa8:	4619      	mov	r1, r3
 8017faa:	68f8      	ldr	r0, [r7, #12]
 8017fac:	f7ff fdbe 	bl	8017b2c <move_window>
 8017fb0:	4603      	mov	r3, r0
 8017fb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017fb4:	7ffb      	ldrb	r3, [r7, #31]
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d15b      	bne.n	8018072 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017fc0:	68bb      	ldr	r3, [r7, #8]
 8017fc2:	005b      	lsls	r3, r3, #1
 8017fc4:	68fa      	ldr	r2, [r7, #12]
 8017fc6:	8992      	ldrh	r2, [r2, #12]
 8017fc8:	fbb3 f0f2 	udiv	r0, r3, r2
 8017fcc:	fb00 f202 	mul.w	r2, r0, r2
 8017fd0:	1a9b      	subs	r3, r3, r2
 8017fd2:	440b      	add	r3, r1
 8017fd4:	687a      	ldr	r2, [r7, #4]
 8017fd6:	b292      	uxth	r2, r2
 8017fd8:	4611      	mov	r1, r2
 8017fda:	4618      	mov	r0, r3
 8017fdc:	f7ff fb31 	bl	8017642 <st_word>
			fs->wflag = 1;
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	2201      	movs	r2, #1
 8017fe4:	70da      	strb	r2, [r3, #3]
			break;
 8017fe6:	e047      	b.n	8018078 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	899b      	ldrh	r3, [r3, #12]
 8017ff0:	089b      	lsrs	r3, r3, #2
 8017ff2:	b29b      	uxth	r3, r3
 8017ff4:	4619      	mov	r1, r3
 8017ff6:	68bb      	ldr	r3, [r7, #8]
 8017ff8:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ffc:	4413      	add	r3, r2
 8017ffe:	4619      	mov	r1, r3
 8018000:	68f8      	ldr	r0, [r7, #12]
 8018002:	f7ff fd93 	bl	8017b2c <move_window>
 8018006:	4603      	mov	r3, r0
 8018008:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801800a:	7ffb      	ldrb	r3, [r7, #31]
 801800c:	2b00      	cmp	r3, #0
 801800e:	d132      	bne.n	8018076 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801801c:	68bb      	ldr	r3, [r7, #8]
 801801e:	009b      	lsls	r3, r3, #2
 8018020:	68fa      	ldr	r2, [r7, #12]
 8018022:	8992      	ldrh	r2, [r2, #12]
 8018024:	fbb3 f0f2 	udiv	r0, r3, r2
 8018028:	fb00 f202 	mul.w	r2, r0, r2
 801802c:	1a9b      	subs	r3, r3, r2
 801802e:	440b      	add	r3, r1
 8018030:	4618      	mov	r0, r3
 8018032:	f7ff fae3 	bl	80175fc <ld_dword>
 8018036:	4603      	mov	r3, r0
 8018038:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801803c:	4323      	orrs	r3, r4
 801803e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018046:	68bb      	ldr	r3, [r7, #8]
 8018048:	009b      	lsls	r3, r3, #2
 801804a:	68fa      	ldr	r2, [r7, #12]
 801804c:	8992      	ldrh	r2, [r2, #12]
 801804e:	fbb3 f0f2 	udiv	r0, r3, r2
 8018052:	fb00 f202 	mul.w	r2, r0, r2
 8018056:	1a9b      	subs	r3, r3, r2
 8018058:	440b      	add	r3, r1
 801805a:	6879      	ldr	r1, [r7, #4]
 801805c:	4618      	mov	r0, r3
 801805e:	f7ff fb0b 	bl	8017678 <st_dword>
			fs->wflag = 1;
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	2201      	movs	r2, #1
 8018066:	70da      	strb	r2, [r3, #3]
			break;
 8018068:	e006      	b.n	8018078 <put_fat+0x22a>
			if (res != FR_OK) break;
 801806a:	bf00      	nop
 801806c:	e004      	b.n	8018078 <put_fat+0x22a>
			if (res != FR_OK) break;
 801806e:	bf00      	nop
 8018070:	e002      	b.n	8018078 <put_fat+0x22a>
			if (res != FR_OK) break;
 8018072:	bf00      	nop
 8018074:	e000      	b.n	8018078 <put_fat+0x22a>
			if (res != FR_OK) break;
 8018076:	bf00      	nop
		}
	}
	return res;
 8018078:	7ffb      	ldrb	r3, [r7, #31]
}
 801807a:	4618      	mov	r0, r3
 801807c:	3724      	adds	r7, #36	; 0x24
 801807e:	46bd      	mov	sp, r7
 8018080:	bd90      	pop	{r4, r7, pc}

08018082 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8018082:	b580      	push	{r7, lr}
 8018084:	b088      	sub	sp, #32
 8018086:	af00      	add	r7, sp, #0
 8018088:	60f8      	str	r0, [r7, #12]
 801808a:	60b9      	str	r1, [r7, #8]
 801808c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801808e:	2300      	movs	r3, #0
 8018090:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8018098:	68bb      	ldr	r3, [r7, #8]
 801809a:	2b01      	cmp	r3, #1
 801809c:	d904      	bls.n	80180a8 <remove_chain+0x26>
 801809e:	69bb      	ldr	r3, [r7, #24]
 80180a0:	69db      	ldr	r3, [r3, #28]
 80180a2:	68ba      	ldr	r2, [r7, #8]
 80180a4:	429a      	cmp	r2, r3
 80180a6:	d301      	bcc.n	80180ac <remove_chain+0x2a>
 80180a8:	2302      	movs	r3, #2
 80180aa:	e04b      	b.n	8018144 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d00c      	beq.n	80180cc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80180b2:	f04f 32ff 	mov.w	r2, #4294967295
 80180b6:	6879      	ldr	r1, [r7, #4]
 80180b8:	69b8      	ldr	r0, [r7, #24]
 80180ba:	f7ff fec8 	bl	8017e4e <put_fat>
 80180be:	4603      	mov	r3, r0
 80180c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80180c2:	7ffb      	ldrb	r3, [r7, #31]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d001      	beq.n	80180cc <remove_chain+0x4a>
 80180c8:	7ffb      	ldrb	r3, [r7, #31]
 80180ca:	e03b      	b.n	8018144 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80180cc:	68b9      	ldr	r1, [r7, #8]
 80180ce:	68f8      	ldr	r0, [r7, #12]
 80180d0:	f7ff fde9 	bl	8017ca6 <get_fat>
 80180d4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80180d6:	697b      	ldr	r3, [r7, #20]
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d031      	beq.n	8018140 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80180dc:	697b      	ldr	r3, [r7, #20]
 80180de:	2b01      	cmp	r3, #1
 80180e0:	d101      	bne.n	80180e6 <remove_chain+0x64>
 80180e2:	2302      	movs	r3, #2
 80180e4:	e02e      	b.n	8018144 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80180e6:	697b      	ldr	r3, [r7, #20]
 80180e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180ec:	d101      	bne.n	80180f2 <remove_chain+0x70>
 80180ee:	2301      	movs	r3, #1
 80180f0:	e028      	b.n	8018144 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80180f2:	2200      	movs	r2, #0
 80180f4:	68b9      	ldr	r1, [r7, #8]
 80180f6:	69b8      	ldr	r0, [r7, #24]
 80180f8:	f7ff fea9 	bl	8017e4e <put_fat>
 80180fc:	4603      	mov	r3, r0
 80180fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8018100:	7ffb      	ldrb	r3, [r7, #31]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d001      	beq.n	801810a <remove_chain+0x88>
 8018106:	7ffb      	ldrb	r3, [r7, #31]
 8018108:	e01c      	b.n	8018144 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801810a:	69bb      	ldr	r3, [r7, #24]
 801810c:	699a      	ldr	r2, [r3, #24]
 801810e:	69bb      	ldr	r3, [r7, #24]
 8018110:	69db      	ldr	r3, [r3, #28]
 8018112:	3b02      	subs	r3, #2
 8018114:	429a      	cmp	r2, r3
 8018116:	d20b      	bcs.n	8018130 <remove_chain+0xae>
			fs->free_clst++;
 8018118:	69bb      	ldr	r3, [r7, #24]
 801811a:	699b      	ldr	r3, [r3, #24]
 801811c:	1c5a      	adds	r2, r3, #1
 801811e:	69bb      	ldr	r3, [r7, #24]
 8018120:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8018122:	69bb      	ldr	r3, [r7, #24]
 8018124:	791b      	ldrb	r3, [r3, #4]
 8018126:	f043 0301 	orr.w	r3, r3, #1
 801812a:	b2da      	uxtb	r2, r3
 801812c:	69bb      	ldr	r3, [r7, #24]
 801812e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8018130:	697b      	ldr	r3, [r7, #20]
 8018132:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8018134:	69bb      	ldr	r3, [r7, #24]
 8018136:	69db      	ldr	r3, [r3, #28]
 8018138:	68ba      	ldr	r2, [r7, #8]
 801813a:	429a      	cmp	r2, r3
 801813c:	d3c6      	bcc.n	80180cc <remove_chain+0x4a>
 801813e:	e000      	b.n	8018142 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8018140:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8018142:	2300      	movs	r3, #0
}
 8018144:	4618      	mov	r0, r3
 8018146:	3720      	adds	r7, #32
 8018148:	46bd      	mov	sp, r7
 801814a:	bd80      	pop	{r7, pc}

0801814c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b088      	sub	sp, #32
 8018150:	af00      	add	r7, sp, #0
 8018152:	6078      	str	r0, [r7, #4]
 8018154:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801815c:	683b      	ldr	r3, [r7, #0]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d10d      	bne.n	801817e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8018162:	693b      	ldr	r3, [r7, #16]
 8018164:	695b      	ldr	r3, [r3, #20]
 8018166:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8018168:	69bb      	ldr	r3, [r7, #24]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d004      	beq.n	8018178 <create_chain+0x2c>
 801816e:	693b      	ldr	r3, [r7, #16]
 8018170:	69db      	ldr	r3, [r3, #28]
 8018172:	69ba      	ldr	r2, [r7, #24]
 8018174:	429a      	cmp	r2, r3
 8018176:	d31b      	bcc.n	80181b0 <create_chain+0x64>
 8018178:	2301      	movs	r3, #1
 801817a:	61bb      	str	r3, [r7, #24]
 801817c:	e018      	b.n	80181b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801817e:	6839      	ldr	r1, [r7, #0]
 8018180:	6878      	ldr	r0, [r7, #4]
 8018182:	f7ff fd90 	bl	8017ca6 <get_fat>
 8018186:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	2b01      	cmp	r3, #1
 801818c:	d801      	bhi.n	8018192 <create_chain+0x46>
 801818e:	2301      	movs	r3, #1
 8018190:	e070      	b.n	8018274 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8018192:	68fb      	ldr	r3, [r7, #12]
 8018194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018198:	d101      	bne.n	801819e <create_chain+0x52>
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	e06a      	b.n	8018274 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801819e:	693b      	ldr	r3, [r7, #16]
 80181a0:	69db      	ldr	r3, [r3, #28]
 80181a2:	68fa      	ldr	r2, [r7, #12]
 80181a4:	429a      	cmp	r2, r3
 80181a6:	d201      	bcs.n	80181ac <create_chain+0x60>
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	e063      	b.n	8018274 <create_chain+0x128>
		scl = clst;
 80181ac:	683b      	ldr	r3, [r7, #0]
 80181ae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80181b0:	69bb      	ldr	r3, [r7, #24]
 80181b2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80181b4:	69fb      	ldr	r3, [r7, #28]
 80181b6:	3301      	adds	r3, #1
 80181b8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80181ba:	693b      	ldr	r3, [r7, #16]
 80181bc:	69db      	ldr	r3, [r3, #28]
 80181be:	69fa      	ldr	r2, [r7, #28]
 80181c0:	429a      	cmp	r2, r3
 80181c2:	d307      	bcc.n	80181d4 <create_chain+0x88>
				ncl = 2;
 80181c4:	2302      	movs	r3, #2
 80181c6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80181c8:	69fa      	ldr	r2, [r7, #28]
 80181ca:	69bb      	ldr	r3, [r7, #24]
 80181cc:	429a      	cmp	r2, r3
 80181ce:	d901      	bls.n	80181d4 <create_chain+0x88>
 80181d0:	2300      	movs	r3, #0
 80181d2:	e04f      	b.n	8018274 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80181d4:	69f9      	ldr	r1, [r7, #28]
 80181d6:	6878      	ldr	r0, [r7, #4]
 80181d8:	f7ff fd65 	bl	8017ca6 <get_fat>
 80181dc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d00e      	beq.n	8018202 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	2b01      	cmp	r3, #1
 80181e8:	d003      	beq.n	80181f2 <create_chain+0xa6>
 80181ea:	68fb      	ldr	r3, [r7, #12]
 80181ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181f0:	d101      	bne.n	80181f6 <create_chain+0xaa>
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	e03e      	b.n	8018274 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80181f6:	69fa      	ldr	r2, [r7, #28]
 80181f8:	69bb      	ldr	r3, [r7, #24]
 80181fa:	429a      	cmp	r2, r3
 80181fc:	d1da      	bne.n	80181b4 <create_chain+0x68>
 80181fe:	2300      	movs	r3, #0
 8018200:	e038      	b.n	8018274 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8018202:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8018204:	f04f 32ff 	mov.w	r2, #4294967295
 8018208:	69f9      	ldr	r1, [r7, #28]
 801820a:	6938      	ldr	r0, [r7, #16]
 801820c:	f7ff fe1f 	bl	8017e4e <put_fat>
 8018210:	4603      	mov	r3, r0
 8018212:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8018214:	7dfb      	ldrb	r3, [r7, #23]
 8018216:	2b00      	cmp	r3, #0
 8018218:	d109      	bne.n	801822e <create_chain+0xe2>
 801821a:	683b      	ldr	r3, [r7, #0]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d006      	beq.n	801822e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8018220:	69fa      	ldr	r2, [r7, #28]
 8018222:	6839      	ldr	r1, [r7, #0]
 8018224:	6938      	ldr	r0, [r7, #16]
 8018226:	f7ff fe12 	bl	8017e4e <put_fat>
 801822a:	4603      	mov	r3, r0
 801822c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801822e:	7dfb      	ldrb	r3, [r7, #23]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d116      	bne.n	8018262 <create_chain+0x116>
		fs->last_clst = ncl;
 8018234:	693b      	ldr	r3, [r7, #16]
 8018236:	69fa      	ldr	r2, [r7, #28]
 8018238:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801823a:	693b      	ldr	r3, [r7, #16]
 801823c:	699a      	ldr	r2, [r3, #24]
 801823e:	693b      	ldr	r3, [r7, #16]
 8018240:	69db      	ldr	r3, [r3, #28]
 8018242:	3b02      	subs	r3, #2
 8018244:	429a      	cmp	r2, r3
 8018246:	d804      	bhi.n	8018252 <create_chain+0x106>
 8018248:	693b      	ldr	r3, [r7, #16]
 801824a:	699b      	ldr	r3, [r3, #24]
 801824c:	1e5a      	subs	r2, r3, #1
 801824e:	693b      	ldr	r3, [r7, #16]
 8018250:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8018252:	693b      	ldr	r3, [r7, #16]
 8018254:	791b      	ldrb	r3, [r3, #4]
 8018256:	f043 0301 	orr.w	r3, r3, #1
 801825a:	b2da      	uxtb	r2, r3
 801825c:	693b      	ldr	r3, [r7, #16]
 801825e:	711a      	strb	r2, [r3, #4]
 8018260:	e007      	b.n	8018272 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8018262:	7dfb      	ldrb	r3, [r7, #23]
 8018264:	2b01      	cmp	r3, #1
 8018266:	d102      	bne.n	801826e <create_chain+0x122>
 8018268:	f04f 33ff 	mov.w	r3, #4294967295
 801826c:	e000      	b.n	8018270 <create_chain+0x124>
 801826e:	2301      	movs	r3, #1
 8018270:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8018272:	69fb      	ldr	r3, [r7, #28]
}
 8018274:	4618      	mov	r0, r3
 8018276:	3720      	adds	r7, #32
 8018278:	46bd      	mov	sp, r7
 801827a:	bd80      	pop	{r7, pc}

0801827c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801827c:	b480      	push	{r7}
 801827e:	b087      	sub	sp, #28
 8018280:	af00      	add	r7, sp, #0
 8018282:	6078      	str	r0, [r7, #4]
 8018284:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018290:	3304      	adds	r3, #4
 8018292:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	899b      	ldrh	r3, [r3, #12]
 8018298:	461a      	mov	r2, r3
 801829a:	683b      	ldr	r3, [r7, #0]
 801829c:	fbb3 f3f2 	udiv	r3, r3, r2
 80182a0:	68fa      	ldr	r2, [r7, #12]
 80182a2:	8952      	ldrh	r2, [r2, #10]
 80182a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80182a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80182aa:	693b      	ldr	r3, [r7, #16]
 80182ac:	1d1a      	adds	r2, r3, #4
 80182ae:	613a      	str	r2, [r7, #16]
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80182b4:	68bb      	ldr	r3, [r7, #8]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d101      	bne.n	80182be <clmt_clust+0x42>
 80182ba:	2300      	movs	r3, #0
 80182bc:	e010      	b.n	80182e0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80182be:	697a      	ldr	r2, [r7, #20]
 80182c0:	68bb      	ldr	r3, [r7, #8]
 80182c2:	429a      	cmp	r2, r3
 80182c4:	d307      	bcc.n	80182d6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80182c6:	697a      	ldr	r2, [r7, #20]
 80182c8:	68bb      	ldr	r3, [r7, #8]
 80182ca:	1ad3      	subs	r3, r2, r3
 80182cc:	617b      	str	r3, [r7, #20]
 80182ce:	693b      	ldr	r3, [r7, #16]
 80182d0:	3304      	adds	r3, #4
 80182d2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80182d4:	e7e9      	b.n	80182aa <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80182d6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80182d8:	693b      	ldr	r3, [r7, #16]
 80182da:	681a      	ldr	r2, [r3, #0]
 80182dc:	697b      	ldr	r3, [r7, #20]
 80182de:	4413      	add	r3, r2
}
 80182e0:	4618      	mov	r0, r3
 80182e2:	371c      	adds	r7, #28
 80182e4:	46bd      	mov	sp, r7
 80182e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ea:	4770      	bx	lr

080182ec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b086      	sub	sp, #24
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	6078      	str	r0, [r7, #4]
 80182f4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80182fc:	683b      	ldr	r3, [r7, #0]
 80182fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018302:	d204      	bcs.n	801830e <dir_sdi+0x22>
 8018304:	683b      	ldr	r3, [r7, #0]
 8018306:	f003 031f 	and.w	r3, r3, #31
 801830a:	2b00      	cmp	r3, #0
 801830c:	d001      	beq.n	8018312 <dir_sdi+0x26>
		return FR_INT_ERR;
 801830e:	2302      	movs	r3, #2
 8018310:	e071      	b.n	80183f6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	683a      	ldr	r2, [r7, #0]
 8018316:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	689b      	ldr	r3, [r3, #8]
 801831c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801831e:	697b      	ldr	r3, [r7, #20]
 8018320:	2b00      	cmp	r3, #0
 8018322:	d106      	bne.n	8018332 <dir_sdi+0x46>
 8018324:	693b      	ldr	r3, [r7, #16]
 8018326:	781b      	ldrb	r3, [r3, #0]
 8018328:	2b02      	cmp	r3, #2
 801832a:	d902      	bls.n	8018332 <dir_sdi+0x46>
		clst = fs->dirbase;
 801832c:	693b      	ldr	r3, [r7, #16]
 801832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018330:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8018332:	697b      	ldr	r3, [r7, #20]
 8018334:	2b00      	cmp	r3, #0
 8018336:	d10c      	bne.n	8018352 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8018338:	683b      	ldr	r3, [r7, #0]
 801833a:	095b      	lsrs	r3, r3, #5
 801833c:	693a      	ldr	r2, [r7, #16]
 801833e:	8912      	ldrh	r2, [r2, #8]
 8018340:	4293      	cmp	r3, r2
 8018342:	d301      	bcc.n	8018348 <dir_sdi+0x5c>
 8018344:	2302      	movs	r3, #2
 8018346:	e056      	b.n	80183f6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8018348:	693b      	ldr	r3, [r7, #16]
 801834a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	61da      	str	r2, [r3, #28]
 8018350:	e02d      	b.n	80183ae <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8018352:	693b      	ldr	r3, [r7, #16]
 8018354:	895b      	ldrh	r3, [r3, #10]
 8018356:	461a      	mov	r2, r3
 8018358:	693b      	ldr	r3, [r7, #16]
 801835a:	899b      	ldrh	r3, [r3, #12]
 801835c:	fb02 f303 	mul.w	r3, r2, r3
 8018360:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018362:	e019      	b.n	8018398 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	6979      	ldr	r1, [r7, #20]
 8018368:	4618      	mov	r0, r3
 801836a:	f7ff fc9c 	bl	8017ca6 <get_fat>
 801836e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018370:	697b      	ldr	r3, [r7, #20]
 8018372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018376:	d101      	bne.n	801837c <dir_sdi+0x90>
 8018378:	2301      	movs	r3, #1
 801837a:	e03c      	b.n	80183f6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801837c:	697b      	ldr	r3, [r7, #20]
 801837e:	2b01      	cmp	r3, #1
 8018380:	d904      	bls.n	801838c <dir_sdi+0xa0>
 8018382:	693b      	ldr	r3, [r7, #16]
 8018384:	69db      	ldr	r3, [r3, #28]
 8018386:	697a      	ldr	r2, [r7, #20]
 8018388:	429a      	cmp	r2, r3
 801838a:	d301      	bcc.n	8018390 <dir_sdi+0xa4>
 801838c:	2302      	movs	r3, #2
 801838e:	e032      	b.n	80183f6 <dir_sdi+0x10a>
			ofs -= csz;
 8018390:	683a      	ldr	r2, [r7, #0]
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	1ad3      	subs	r3, r2, r3
 8018396:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018398:	683a      	ldr	r2, [r7, #0]
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	429a      	cmp	r2, r3
 801839e:	d2e1      	bcs.n	8018364 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80183a0:	6979      	ldr	r1, [r7, #20]
 80183a2:	6938      	ldr	r0, [r7, #16]
 80183a4:	f7ff fc60 	bl	8017c68 <clust2sect>
 80183a8:	4602      	mov	r2, r0
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	697a      	ldr	r2, [r7, #20]
 80183b2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	69db      	ldr	r3, [r3, #28]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d101      	bne.n	80183c0 <dir_sdi+0xd4>
 80183bc:	2302      	movs	r3, #2
 80183be:	e01a      	b.n	80183f6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	69da      	ldr	r2, [r3, #28]
 80183c4:	693b      	ldr	r3, [r7, #16]
 80183c6:	899b      	ldrh	r3, [r3, #12]
 80183c8:	4619      	mov	r1, r3
 80183ca:	683b      	ldr	r3, [r7, #0]
 80183cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80183d0:	441a      	add	r2, r3
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80183d6:	693b      	ldr	r3, [r7, #16]
 80183d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80183dc:	693b      	ldr	r3, [r7, #16]
 80183de:	899b      	ldrh	r3, [r3, #12]
 80183e0:	461a      	mov	r2, r3
 80183e2:	683b      	ldr	r3, [r7, #0]
 80183e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80183e8:	fb00 f202 	mul.w	r2, r0, r2
 80183ec:	1a9b      	subs	r3, r3, r2
 80183ee:	18ca      	adds	r2, r1, r3
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80183f4:	2300      	movs	r3, #0
}
 80183f6:	4618      	mov	r0, r3
 80183f8:	3718      	adds	r7, #24
 80183fa:	46bd      	mov	sp, r7
 80183fc:	bd80      	pop	{r7, pc}

080183fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80183fe:	b580      	push	{r7, lr}
 8018400:	b086      	sub	sp, #24
 8018402:	af00      	add	r7, sp, #0
 8018404:	6078      	str	r0, [r7, #4]
 8018406:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	695b      	ldr	r3, [r3, #20]
 8018412:	3320      	adds	r3, #32
 8018414:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	69db      	ldr	r3, [r3, #28]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d003      	beq.n	8018426 <dir_next+0x28>
 801841e:	68bb      	ldr	r3, [r7, #8]
 8018420:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018424:	d301      	bcc.n	801842a <dir_next+0x2c>
 8018426:	2304      	movs	r3, #4
 8018428:	e0bb      	b.n	80185a2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	899b      	ldrh	r3, [r3, #12]
 801842e:	461a      	mov	r2, r3
 8018430:	68bb      	ldr	r3, [r7, #8]
 8018432:	fbb3 f1f2 	udiv	r1, r3, r2
 8018436:	fb01 f202 	mul.w	r2, r1, r2
 801843a:	1a9b      	subs	r3, r3, r2
 801843c:	2b00      	cmp	r3, #0
 801843e:	f040 809d 	bne.w	801857c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	69db      	ldr	r3, [r3, #28]
 8018446:	1c5a      	adds	r2, r3, #1
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	699b      	ldr	r3, [r3, #24]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d10b      	bne.n	801846c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8018454:	68bb      	ldr	r3, [r7, #8]
 8018456:	095b      	lsrs	r3, r3, #5
 8018458:	68fa      	ldr	r2, [r7, #12]
 801845a:	8912      	ldrh	r2, [r2, #8]
 801845c:	4293      	cmp	r3, r2
 801845e:	f0c0 808d 	bcc.w	801857c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	2200      	movs	r2, #0
 8018466:	61da      	str	r2, [r3, #28]
 8018468:	2304      	movs	r3, #4
 801846a:	e09a      	b.n	80185a2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	899b      	ldrh	r3, [r3, #12]
 8018470:	461a      	mov	r2, r3
 8018472:	68bb      	ldr	r3, [r7, #8]
 8018474:	fbb3 f3f2 	udiv	r3, r3, r2
 8018478:	68fa      	ldr	r2, [r7, #12]
 801847a:	8952      	ldrh	r2, [r2, #10]
 801847c:	3a01      	subs	r2, #1
 801847e:	4013      	ands	r3, r2
 8018480:	2b00      	cmp	r3, #0
 8018482:	d17b      	bne.n	801857c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8018484:	687a      	ldr	r2, [r7, #4]
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	699b      	ldr	r3, [r3, #24]
 801848a:	4619      	mov	r1, r3
 801848c:	4610      	mov	r0, r2
 801848e:	f7ff fc0a 	bl	8017ca6 <get_fat>
 8018492:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8018494:	697b      	ldr	r3, [r7, #20]
 8018496:	2b01      	cmp	r3, #1
 8018498:	d801      	bhi.n	801849e <dir_next+0xa0>
 801849a:	2302      	movs	r3, #2
 801849c:	e081      	b.n	80185a2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801849e:	697b      	ldr	r3, [r7, #20]
 80184a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184a4:	d101      	bne.n	80184aa <dir_next+0xac>
 80184a6:	2301      	movs	r3, #1
 80184a8:	e07b      	b.n	80185a2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	69db      	ldr	r3, [r3, #28]
 80184ae:	697a      	ldr	r2, [r7, #20]
 80184b0:	429a      	cmp	r2, r3
 80184b2:	d359      	bcc.n	8018568 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80184b4:	683b      	ldr	r3, [r7, #0]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d104      	bne.n	80184c4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	2200      	movs	r2, #0
 80184be:	61da      	str	r2, [r3, #28]
 80184c0:	2304      	movs	r3, #4
 80184c2:	e06e      	b.n	80185a2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80184c4:	687a      	ldr	r2, [r7, #4]
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	699b      	ldr	r3, [r3, #24]
 80184ca:	4619      	mov	r1, r3
 80184cc:	4610      	mov	r0, r2
 80184ce:	f7ff fe3d 	bl	801814c <create_chain>
 80184d2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80184d4:	697b      	ldr	r3, [r7, #20]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d101      	bne.n	80184de <dir_next+0xe0>
 80184da:	2307      	movs	r3, #7
 80184dc:	e061      	b.n	80185a2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80184de:	697b      	ldr	r3, [r7, #20]
 80184e0:	2b01      	cmp	r3, #1
 80184e2:	d101      	bne.n	80184e8 <dir_next+0xea>
 80184e4:	2302      	movs	r3, #2
 80184e6:	e05c      	b.n	80185a2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80184e8:	697b      	ldr	r3, [r7, #20]
 80184ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184ee:	d101      	bne.n	80184f4 <dir_next+0xf6>
 80184f0:	2301      	movs	r3, #1
 80184f2:	e056      	b.n	80185a2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80184f4:	68f8      	ldr	r0, [r7, #12]
 80184f6:	f7ff fad5 	bl	8017aa4 <sync_window>
 80184fa:	4603      	mov	r3, r0
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d001      	beq.n	8018504 <dir_next+0x106>
 8018500:	2301      	movs	r3, #1
 8018502:	e04e      	b.n	80185a2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	899b      	ldrh	r3, [r3, #12]
 801850e:	461a      	mov	r2, r3
 8018510:	2100      	movs	r1, #0
 8018512:	f7ff f8fe 	bl	8017712 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018516:	2300      	movs	r3, #0
 8018518:	613b      	str	r3, [r7, #16]
 801851a:	6979      	ldr	r1, [r7, #20]
 801851c:	68f8      	ldr	r0, [r7, #12]
 801851e:	f7ff fba3 	bl	8017c68 <clust2sect>
 8018522:	4602      	mov	r2, r0
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	635a      	str	r2, [r3, #52]	; 0x34
 8018528:	e012      	b.n	8018550 <dir_next+0x152>
						fs->wflag = 1;
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	2201      	movs	r2, #1
 801852e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8018530:	68f8      	ldr	r0, [r7, #12]
 8018532:	f7ff fab7 	bl	8017aa4 <sync_window>
 8018536:	4603      	mov	r3, r0
 8018538:	2b00      	cmp	r3, #0
 801853a:	d001      	beq.n	8018540 <dir_next+0x142>
 801853c:	2301      	movs	r3, #1
 801853e:	e030      	b.n	80185a2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018540:	693b      	ldr	r3, [r7, #16]
 8018542:	3301      	adds	r3, #1
 8018544:	613b      	str	r3, [r7, #16]
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801854a:	1c5a      	adds	r2, r3, #1
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	635a      	str	r2, [r3, #52]	; 0x34
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	895b      	ldrh	r3, [r3, #10]
 8018554:	461a      	mov	r2, r3
 8018556:	693b      	ldr	r3, [r7, #16]
 8018558:	4293      	cmp	r3, r2
 801855a:	d3e6      	bcc.n	801852a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018560:	693b      	ldr	r3, [r7, #16]
 8018562:	1ad2      	subs	r2, r2, r3
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	697a      	ldr	r2, [r7, #20]
 801856c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801856e:	6979      	ldr	r1, [r7, #20]
 8018570:	68f8      	ldr	r0, [r7, #12]
 8018572:	f7ff fb79 	bl	8017c68 <clust2sect>
 8018576:	4602      	mov	r2, r0
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	68ba      	ldr	r2, [r7, #8]
 8018580:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	899b      	ldrh	r3, [r3, #12]
 801858c:	461a      	mov	r2, r3
 801858e:	68bb      	ldr	r3, [r7, #8]
 8018590:	fbb3 f0f2 	udiv	r0, r3, r2
 8018594:	fb00 f202 	mul.w	r2, r0, r2
 8018598:	1a9b      	subs	r3, r3, r2
 801859a:	18ca      	adds	r2, r1, r3
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80185a0:	2300      	movs	r3, #0
}
 80185a2:	4618      	mov	r0, r3
 80185a4:	3718      	adds	r7, #24
 80185a6:	46bd      	mov	sp, r7
 80185a8:	bd80      	pop	{r7, pc}

080185aa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80185aa:	b580      	push	{r7, lr}
 80185ac:	b086      	sub	sp, #24
 80185ae:	af00      	add	r7, sp, #0
 80185b0:	6078      	str	r0, [r7, #4]
 80185b2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80185ba:	2100      	movs	r1, #0
 80185bc:	6878      	ldr	r0, [r7, #4]
 80185be:	f7ff fe95 	bl	80182ec <dir_sdi>
 80185c2:	4603      	mov	r3, r0
 80185c4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80185c6:	7dfb      	ldrb	r3, [r7, #23]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d12b      	bne.n	8018624 <dir_alloc+0x7a>
		n = 0;
 80185cc:	2300      	movs	r3, #0
 80185ce:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	69db      	ldr	r3, [r3, #28]
 80185d4:	4619      	mov	r1, r3
 80185d6:	68f8      	ldr	r0, [r7, #12]
 80185d8:	f7ff faa8 	bl	8017b2c <move_window>
 80185dc:	4603      	mov	r3, r0
 80185de:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80185e0:	7dfb      	ldrb	r3, [r7, #23]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d11d      	bne.n	8018622 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	6a1b      	ldr	r3, [r3, #32]
 80185ea:	781b      	ldrb	r3, [r3, #0]
 80185ec:	2be5      	cmp	r3, #229	; 0xe5
 80185ee:	d004      	beq.n	80185fa <dir_alloc+0x50>
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	6a1b      	ldr	r3, [r3, #32]
 80185f4:	781b      	ldrb	r3, [r3, #0]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d107      	bne.n	801860a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80185fa:	693b      	ldr	r3, [r7, #16]
 80185fc:	3301      	adds	r3, #1
 80185fe:	613b      	str	r3, [r7, #16]
 8018600:	693a      	ldr	r2, [r7, #16]
 8018602:	683b      	ldr	r3, [r7, #0]
 8018604:	429a      	cmp	r2, r3
 8018606:	d102      	bne.n	801860e <dir_alloc+0x64>
 8018608:	e00c      	b.n	8018624 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801860a:	2300      	movs	r3, #0
 801860c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801860e:	2101      	movs	r1, #1
 8018610:	6878      	ldr	r0, [r7, #4]
 8018612:	f7ff fef4 	bl	80183fe <dir_next>
 8018616:	4603      	mov	r3, r0
 8018618:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801861a:	7dfb      	ldrb	r3, [r7, #23]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d0d7      	beq.n	80185d0 <dir_alloc+0x26>
 8018620:	e000      	b.n	8018624 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8018622:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8018624:	7dfb      	ldrb	r3, [r7, #23]
 8018626:	2b04      	cmp	r3, #4
 8018628:	d101      	bne.n	801862e <dir_alloc+0x84>
 801862a:	2307      	movs	r3, #7
 801862c:	75fb      	strb	r3, [r7, #23]
	return res;
 801862e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018630:	4618      	mov	r0, r3
 8018632:	3718      	adds	r7, #24
 8018634:	46bd      	mov	sp, r7
 8018636:	bd80      	pop	{r7, pc}

08018638 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b084      	sub	sp, #16
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
 8018640:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8018642:	683b      	ldr	r3, [r7, #0]
 8018644:	331a      	adds	r3, #26
 8018646:	4618      	mov	r0, r3
 8018648:	f7fe ffc0 	bl	80175cc <ld_word>
 801864c:	4603      	mov	r3, r0
 801864e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	781b      	ldrb	r3, [r3, #0]
 8018654:	2b03      	cmp	r3, #3
 8018656:	d109      	bne.n	801866c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8018658:	683b      	ldr	r3, [r7, #0]
 801865a:	3314      	adds	r3, #20
 801865c:	4618      	mov	r0, r3
 801865e:	f7fe ffb5 	bl	80175cc <ld_word>
 8018662:	4603      	mov	r3, r0
 8018664:	041b      	lsls	r3, r3, #16
 8018666:	68fa      	ldr	r2, [r7, #12]
 8018668:	4313      	orrs	r3, r2
 801866a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801866c:	68fb      	ldr	r3, [r7, #12]
}
 801866e:	4618      	mov	r0, r3
 8018670:	3710      	adds	r7, #16
 8018672:	46bd      	mov	sp, r7
 8018674:	bd80      	pop	{r7, pc}

08018676 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8018676:	b580      	push	{r7, lr}
 8018678:	b084      	sub	sp, #16
 801867a:	af00      	add	r7, sp, #0
 801867c:	60f8      	str	r0, [r7, #12]
 801867e:	60b9      	str	r1, [r7, #8]
 8018680:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8018682:	68bb      	ldr	r3, [r7, #8]
 8018684:	331a      	adds	r3, #26
 8018686:	687a      	ldr	r2, [r7, #4]
 8018688:	b292      	uxth	r2, r2
 801868a:	4611      	mov	r1, r2
 801868c:	4618      	mov	r0, r3
 801868e:	f7fe ffd8 	bl	8017642 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	781b      	ldrb	r3, [r3, #0]
 8018696:	2b03      	cmp	r3, #3
 8018698:	d109      	bne.n	80186ae <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801869a:	68bb      	ldr	r3, [r7, #8]
 801869c:	f103 0214 	add.w	r2, r3, #20
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	0c1b      	lsrs	r3, r3, #16
 80186a4:	b29b      	uxth	r3, r3
 80186a6:	4619      	mov	r1, r3
 80186a8:	4610      	mov	r0, r2
 80186aa:	f7fe ffca 	bl	8017642 <st_word>
	}
}
 80186ae:	bf00      	nop
 80186b0:	3710      	adds	r7, #16
 80186b2:	46bd      	mov	sp, r7
 80186b4:	bd80      	pop	{r7, pc}
	...

080186b8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80186b8:	b590      	push	{r4, r7, lr}
 80186ba:	b087      	sub	sp, #28
 80186bc:	af00      	add	r7, sp, #0
 80186be:	6078      	str	r0, [r7, #4]
 80186c0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80186c2:	683b      	ldr	r3, [r7, #0]
 80186c4:	331a      	adds	r3, #26
 80186c6:	4618      	mov	r0, r3
 80186c8:	f7fe ff80 	bl	80175cc <ld_word>
 80186cc:	4603      	mov	r3, r0
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d001      	beq.n	80186d6 <cmp_lfn+0x1e>
 80186d2:	2300      	movs	r3, #0
 80186d4:	e059      	b.n	801878a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80186d6:	683b      	ldr	r3, [r7, #0]
 80186d8:	781b      	ldrb	r3, [r3, #0]
 80186da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80186de:	1e5a      	subs	r2, r3, #1
 80186e0:	4613      	mov	r3, r2
 80186e2:	005b      	lsls	r3, r3, #1
 80186e4:	4413      	add	r3, r2
 80186e6:	009b      	lsls	r3, r3, #2
 80186e8:	4413      	add	r3, r2
 80186ea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80186ec:	2301      	movs	r3, #1
 80186ee:	81fb      	strh	r3, [r7, #14]
 80186f0:	2300      	movs	r3, #0
 80186f2:	613b      	str	r3, [r7, #16]
 80186f4:	e033      	b.n	801875e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80186f6:	4a27      	ldr	r2, [pc, #156]	; (8018794 <cmp_lfn+0xdc>)
 80186f8:	693b      	ldr	r3, [r7, #16]
 80186fa:	4413      	add	r3, r2
 80186fc:	781b      	ldrb	r3, [r3, #0]
 80186fe:	461a      	mov	r2, r3
 8018700:	683b      	ldr	r3, [r7, #0]
 8018702:	4413      	add	r3, r2
 8018704:	4618      	mov	r0, r3
 8018706:	f7fe ff61 	bl	80175cc <ld_word>
 801870a:	4603      	mov	r3, r0
 801870c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801870e:	89fb      	ldrh	r3, [r7, #14]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d01a      	beq.n	801874a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8018714:	697b      	ldr	r3, [r7, #20]
 8018716:	2bfe      	cmp	r3, #254	; 0xfe
 8018718:	d812      	bhi.n	8018740 <cmp_lfn+0x88>
 801871a:	89bb      	ldrh	r3, [r7, #12]
 801871c:	4618      	mov	r0, r3
 801871e:	f001 fe11 	bl	801a344 <ff_wtoupper>
 8018722:	4603      	mov	r3, r0
 8018724:	461c      	mov	r4, r3
 8018726:	697b      	ldr	r3, [r7, #20]
 8018728:	1c5a      	adds	r2, r3, #1
 801872a:	617a      	str	r2, [r7, #20]
 801872c:	005b      	lsls	r3, r3, #1
 801872e:	687a      	ldr	r2, [r7, #4]
 8018730:	4413      	add	r3, r2
 8018732:	881b      	ldrh	r3, [r3, #0]
 8018734:	4618      	mov	r0, r3
 8018736:	f001 fe05 	bl	801a344 <ff_wtoupper>
 801873a:	4603      	mov	r3, r0
 801873c:	429c      	cmp	r4, r3
 801873e:	d001      	beq.n	8018744 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8018740:	2300      	movs	r3, #0
 8018742:	e022      	b.n	801878a <cmp_lfn+0xd2>
			}
			wc = uc;
 8018744:	89bb      	ldrh	r3, [r7, #12]
 8018746:	81fb      	strh	r3, [r7, #14]
 8018748:	e006      	b.n	8018758 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801874a:	89bb      	ldrh	r3, [r7, #12]
 801874c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018750:	4293      	cmp	r3, r2
 8018752:	d001      	beq.n	8018758 <cmp_lfn+0xa0>
 8018754:	2300      	movs	r3, #0
 8018756:	e018      	b.n	801878a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018758:	693b      	ldr	r3, [r7, #16]
 801875a:	3301      	adds	r3, #1
 801875c:	613b      	str	r3, [r7, #16]
 801875e:	693b      	ldr	r3, [r7, #16]
 8018760:	2b0c      	cmp	r3, #12
 8018762:	d9c8      	bls.n	80186f6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8018764:	683b      	ldr	r3, [r7, #0]
 8018766:	781b      	ldrb	r3, [r3, #0]
 8018768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801876c:	2b00      	cmp	r3, #0
 801876e:	d00b      	beq.n	8018788 <cmp_lfn+0xd0>
 8018770:	89fb      	ldrh	r3, [r7, #14]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d008      	beq.n	8018788 <cmp_lfn+0xd0>
 8018776:	697b      	ldr	r3, [r7, #20]
 8018778:	005b      	lsls	r3, r3, #1
 801877a:	687a      	ldr	r2, [r7, #4]
 801877c:	4413      	add	r3, r2
 801877e:	881b      	ldrh	r3, [r3, #0]
 8018780:	2b00      	cmp	r3, #0
 8018782:	d001      	beq.n	8018788 <cmp_lfn+0xd0>
 8018784:	2300      	movs	r3, #0
 8018786:	e000      	b.n	801878a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8018788:	2301      	movs	r3, #1
}
 801878a:	4618      	mov	r0, r3
 801878c:	371c      	adds	r7, #28
 801878e:	46bd      	mov	sp, r7
 8018790:	bd90      	pop	{r4, r7, pc}
 8018792:	bf00      	nop
 8018794:	08020084 	.word	0x08020084

08018798 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8018798:	b580      	push	{r7, lr}
 801879a:	b088      	sub	sp, #32
 801879c:	af00      	add	r7, sp, #0
 801879e:	60f8      	str	r0, [r7, #12]
 80187a0:	60b9      	str	r1, [r7, #8]
 80187a2:	4611      	mov	r1, r2
 80187a4:	461a      	mov	r2, r3
 80187a6:	460b      	mov	r3, r1
 80187a8:	71fb      	strb	r3, [r7, #7]
 80187aa:	4613      	mov	r3, r2
 80187ac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80187ae:	68bb      	ldr	r3, [r7, #8]
 80187b0:	330d      	adds	r3, #13
 80187b2:	79ba      	ldrb	r2, [r7, #6]
 80187b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80187b6:	68bb      	ldr	r3, [r7, #8]
 80187b8:	330b      	adds	r3, #11
 80187ba:	220f      	movs	r2, #15
 80187bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80187be:	68bb      	ldr	r3, [r7, #8]
 80187c0:	330c      	adds	r3, #12
 80187c2:	2200      	movs	r2, #0
 80187c4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80187c6:	68bb      	ldr	r3, [r7, #8]
 80187c8:	331a      	adds	r3, #26
 80187ca:	2100      	movs	r1, #0
 80187cc:	4618      	mov	r0, r3
 80187ce:	f7fe ff38 	bl	8017642 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80187d2:	79fb      	ldrb	r3, [r7, #7]
 80187d4:	1e5a      	subs	r2, r3, #1
 80187d6:	4613      	mov	r3, r2
 80187d8:	005b      	lsls	r3, r3, #1
 80187da:	4413      	add	r3, r2
 80187dc:	009b      	lsls	r3, r3, #2
 80187de:	4413      	add	r3, r2
 80187e0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80187e2:	2300      	movs	r3, #0
 80187e4:	82fb      	strh	r3, [r7, #22]
 80187e6:	2300      	movs	r3, #0
 80187e8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80187ea:	8afb      	ldrh	r3, [r7, #22]
 80187ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80187f0:	4293      	cmp	r3, r2
 80187f2:	d007      	beq.n	8018804 <put_lfn+0x6c>
 80187f4:	69fb      	ldr	r3, [r7, #28]
 80187f6:	1c5a      	adds	r2, r3, #1
 80187f8:	61fa      	str	r2, [r7, #28]
 80187fa:	005b      	lsls	r3, r3, #1
 80187fc:	68fa      	ldr	r2, [r7, #12]
 80187fe:	4413      	add	r3, r2
 8018800:	881b      	ldrh	r3, [r3, #0]
 8018802:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8018804:	4a17      	ldr	r2, [pc, #92]	; (8018864 <put_lfn+0xcc>)
 8018806:	69bb      	ldr	r3, [r7, #24]
 8018808:	4413      	add	r3, r2
 801880a:	781b      	ldrb	r3, [r3, #0]
 801880c:	461a      	mov	r2, r3
 801880e:	68bb      	ldr	r3, [r7, #8]
 8018810:	4413      	add	r3, r2
 8018812:	8afa      	ldrh	r2, [r7, #22]
 8018814:	4611      	mov	r1, r2
 8018816:	4618      	mov	r0, r3
 8018818:	f7fe ff13 	bl	8017642 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801881c:	8afb      	ldrh	r3, [r7, #22]
 801881e:	2b00      	cmp	r3, #0
 8018820:	d102      	bne.n	8018828 <put_lfn+0x90>
 8018822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018826:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8018828:	69bb      	ldr	r3, [r7, #24]
 801882a:	3301      	adds	r3, #1
 801882c:	61bb      	str	r3, [r7, #24]
 801882e:	69bb      	ldr	r3, [r7, #24]
 8018830:	2b0c      	cmp	r3, #12
 8018832:	d9da      	bls.n	80187ea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8018834:	8afb      	ldrh	r3, [r7, #22]
 8018836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801883a:	4293      	cmp	r3, r2
 801883c:	d006      	beq.n	801884c <put_lfn+0xb4>
 801883e:	69fb      	ldr	r3, [r7, #28]
 8018840:	005b      	lsls	r3, r3, #1
 8018842:	68fa      	ldr	r2, [r7, #12]
 8018844:	4413      	add	r3, r2
 8018846:	881b      	ldrh	r3, [r3, #0]
 8018848:	2b00      	cmp	r3, #0
 801884a:	d103      	bne.n	8018854 <put_lfn+0xbc>
 801884c:	79fb      	ldrb	r3, [r7, #7]
 801884e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018852:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8018854:	68bb      	ldr	r3, [r7, #8]
 8018856:	79fa      	ldrb	r2, [r7, #7]
 8018858:	701a      	strb	r2, [r3, #0]
}
 801885a:	bf00      	nop
 801885c:	3720      	adds	r7, #32
 801885e:	46bd      	mov	sp, r7
 8018860:	bd80      	pop	{r7, pc}
 8018862:	bf00      	nop
 8018864:	08020084 	.word	0x08020084

08018868 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8018868:	b580      	push	{r7, lr}
 801886a:	b08c      	sub	sp, #48	; 0x30
 801886c:	af00      	add	r7, sp, #0
 801886e:	60f8      	str	r0, [r7, #12]
 8018870:	60b9      	str	r1, [r7, #8]
 8018872:	607a      	str	r2, [r7, #4]
 8018874:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8018876:	220b      	movs	r2, #11
 8018878:	68b9      	ldr	r1, [r7, #8]
 801887a:	68f8      	ldr	r0, [r7, #12]
 801887c:	f7fe ff28 	bl	80176d0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8018880:	683b      	ldr	r3, [r7, #0]
 8018882:	2b05      	cmp	r3, #5
 8018884:	d929      	bls.n	80188da <gen_numname+0x72>
		sr = seq;
 8018886:	683b      	ldr	r3, [r7, #0]
 8018888:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801888a:	e020      	b.n	80188ce <gen_numname+0x66>
			wc = *lfn++;
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	1c9a      	adds	r2, r3, #2
 8018890:	607a      	str	r2, [r7, #4]
 8018892:	881b      	ldrh	r3, [r3, #0]
 8018894:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8018896:	2300      	movs	r3, #0
 8018898:	62bb      	str	r3, [r7, #40]	; 0x28
 801889a:	e015      	b.n	80188c8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801889c:	69fb      	ldr	r3, [r7, #28]
 801889e:	005a      	lsls	r2, r3, #1
 80188a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80188a2:	f003 0301 	and.w	r3, r3, #1
 80188a6:	4413      	add	r3, r2
 80188a8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80188aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80188ac:	085b      	lsrs	r3, r3, #1
 80188ae:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80188b0:	69fb      	ldr	r3, [r7, #28]
 80188b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d003      	beq.n	80188c2 <gen_numname+0x5a>
 80188ba:	69fa      	ldr	r2, [r7, #28]
 80188bc:	4b30      	ldr	r3, [pc, #192]	; (8018980 <gen_numname+0x118>)
 80188be:	4053      	eors	r3, r2
 80188c0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80188c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188c4:	3301      	adds	r3, #1
 80188c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80188c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188ca:	2b0f      	cmp	r3, #15
 80188cc:	d9e6      	bls.n	801889c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	881b      	ldrh	r3, [r3, #0]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d1da      	bne.n	801888c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80188d6:	69fb      	ldr	r3, [r7, #28]
 80188d8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80188da:	2307      	movs	r3, #7
 80188dc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80188de:	683b      	ldr	r3, [r7, #0]
 80188e0:	b2db      	uxtb	r3, r3
 80188e2:	f003 030f 	and.w	r3, r3, #15
 80188e6:	b2db      	uxtb	r3, r3
 80188e8:	3330      	adds	r3, #48	; 0x30
 80188ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80188ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80188f2:	2b39      	cmp	r3, #57	; 0x39
 80188f4:	d904      	bls.n	8018900 <gen_numname+0x98>
 80188f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80188fa:	3307      	adds	r3, #7
 80188fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8018900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018902:	1e5a      	subs	r2, r3, #1
 8018904:	62ba      	str	r2, [r7, #40]	; 0x28
 8018906:	3330      	adds	r3, #48	; 0x30
 8018908:	443b      	add	r3, r7
 801890a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801890e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8018912:	683b      	ldr	r3, [r7, #0]
 8018914:	091b      	lsrs	r3, r3, #4
 8018916:	603b      	str	r3, [r7, #0]
	} while (seq);
 8018918:	683b      	ldr	r3, [r7, #0]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d1df      	bne.n	80188de <gen_numname+0x76>
	ns[i] = '~';
 801891e:	f107 0214 	add.w	r2, r7, #20
 8018922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018924:	4413      	add	r3, r2
 8018926:	227e      	movs	r2, #126	; 0x7e
 8018928:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801892a:	2300      	movs	r3, #0
 801892c:	627b      	str	r3, [r7, #36]	; 0x24
 801892e:	e002      	b.n	8018936 <gen_numname+0xce>
 8018930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018932:	3301      	adds	r3, #1
 8018934:	627b      	str	r3, [r7, #36]	; 0x24
 8018936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801893a:	429a      	cmp	r2, r3
 801893c:	d205      	bcs.n	801894a <gen_numname+0xe2>
 801893e:	68fa      	ldr	r2, [r7, #12]
 8018940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018942:	4413      	add	r3, r2
 8018944:	781b      	ldrb	r3, [r3, #0]
 8018946:	2b20      	cmp	r3, #32
 8018948:	d1f2      	bne.n	8018930 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801894c:	2b07      	cmp	r3, #7
 801894e:	d807      	bhi.n	8018960 <gen_numname+0xf8>
 8018950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018952:	1c5a      	adds	r2, r3, #1
 8018954:	62ba      	str	r2, [r7, #40]	; 0x28
 8018956:	3330      	adds	r3, #48	; 0x30
 8018958:	443b      	add	r3, r7
 801895a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801895e:	e000      	b.n	8018962 <gen_numname+0xfa>
 8018960:	2120      	movs	r1, #32
 8018962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018964:	1c5a      	adds	r2, r3, #1
 8018966:	627a      	str	r2, [r7, #36]	; 0x24
 8018968:	68fa      	ldr	r2, [r7, #12]
 801896a:	4413      	add	r3, r2
 801896c:	460a      	mov	r2, r1
 801896e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8018970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018972:	2b07      	cmp	r3, #7
 8018974:	d9e9      	bls.n	801894a <gen_numname+0xe2>
}
 8018976:	bf00      	nop
 8018978:	bf00      	nop
 801897a:	3730      	adds	r7, #48	; 0x30
 801897c:	46bd      	mov	sp, r7
 801897e:	bd80      	pop	{r7, pc}
 8018980:	00011021 	.word	0x00011021

08018984 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8018984:	b480      	push	{r7}
 8018986:	b085      	sub	sp, #20
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801898c:	2300      	movs	r3, #0
 801898e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8018990:	230b      	movs	r3, #11
 8018992:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018994:	7bfb      	ldrb	r3, [r7, #15]
 8018996:	b2da      	uxtb	r2, r3
 8018998:	0852      	lsrs	r2, r2, #1
 801899a:	01db      	lsls	r3, r3, #7
 801899c:	4313      	orrs	r3, r2
 801899e:	b2da      	uxtb	r2, r3
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	1c59      	adds	r1, r3, #1
 80189a4:	6079      	str	r1, [r7, #4]
 80189a6:	781b      	ldrb	r3, [r3, #0]
 80189a8:	4413      	add	r3, r2
 80189aa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80189ac:	68bb      	ldr	r3, [r7, #8]
 80189ae:	3b01      	subs	r3, #1
 80189b0:	60bb      	str	r3, [r7, #8]
 80189b2:	68bb      	ldr	r3, [r7, #8]
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d1ed      	bne.n	8018994 <sum_sfn+0x10>
	return sum;
 80189b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80189ba:	4618      	mov	r0, r3
 80189bc:	3714      	adds	r7, #20
 80189be:	46bd      	mov	sp, r7
 80189c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c4:	4770      	bx	lr

080189c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80189c6:	b580      	push	{r7, lr}
 80189c8:	b086      	sub	sp, #24
 80189ca:	af00      	add	r7, sp, #0
 80189cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80189d4:	2100      	movs	r1, #0
 80189d6:	6878      	ldr	r0, [r7, #4]
 80189d8:	f7ff fc88 	bl	80182ec <dir_sdi>
 80189dc:	4603      	mov	r3, r0
 80189de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80189e0:	7dfb      	ldrb	r3, [r7, #23]
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d001      	beq.n	80189ea <dir_find+0x24>
 80189e6:	7dfb      	ldrb	r3, [r7, #23]
 80189e8:	e0a9      	b.n	8018b3e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80189ea:	23ff      	movs	r3, #255	; 0xff
 80189ec:	753b      	strb	r3, [r7, #20]
 80189ee:	7d3b      	ldrb	r3, [r7, #20]
 80189f0:	757b      	strb	r3, [r7, #21]
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	f04f 32ff 	mov.w	r2, #4294967295
 80189f8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	69db      	ldr	r3, [r3, #28]
 80189fe:	4619      	mov	r1, r3
 8018a00:	6938      	ldr	r0, [r7, #16]
 8018a02:	f7ff f893 	bl	8017b2c <move_window>
 8018a06:	4603      	mov	r3, r0
 8018a08:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8018a0a:	7dfb      	ldrb	r3, [r7, #23]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	f040 8090 	bne.w	8018b32 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	6a1b      	ldr	r3, [r3, #32]
 8018a16:	781b      	ldrb	r3, [r3, #0]
 8018a18:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018a1a:	7dbb      	ldrb	r3, [r7, #22]
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d102      	bne.n	8018a26 <dir_find+0x60>
 8018a20:	2304      	movs	r3, #4
 8018a22:	75fb      	strb	r3, [r7, #23]
 8018a24:	e08a      	b.n	8018b3c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	6a1b      	ldr	r3, [r3, #32]
 8018a2a:	330b      	adds	r3, #11
 8018a2c:	781b      	ldrb	r3, [r3, #0]
 8018a2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018a32:	73fb      	strb	r3, [r7, #15]
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	7bfa      	ldrb	r2, [r7, #15]
 8018a38:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8018a3a:	7dbb      	ldrb	r3, [r7, #22]
 8018a3c:	2be5      	cmp	r3, #229	; 0xe5
 8018a3e:	d007      	beq.n	8018a50 <dir_find+0x8a>
 8018a40:	7bfb      	ldrb	r3, [r7, #15]
 8018a42:	f003 0308 	and.w	r3, r3, #8
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d009      	beq.n	8018a5e <dir_find+0x98>
 8018a4a:	7bfb      	ldrb	r3, [r7, #15]
 8018a4c:	2b0f      	cmp	r3, #15
 8018a4e:	d006      	beq.n	8018a5e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018a50:	23ff      	movs	r3, #255	; 0xff
 8018a52:	757b      	strb	r3, [r7, #21]
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	f04f 32ff 	mov.w	r2, #4294967295
 8018a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8018a5c:	e05e      	b.n	8018b1c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8018a5e:	7bfb      	ldrb	r3, [r7, #15]
 8018a60:	2b0f      	cmp	r3, #15
 8018a62:	d136      	bne.n	8018ad2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d154      	bne.n	8018b1c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8018a72:	7dbb      	ldrb	r3, [r7, #22]
 8018a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d00d      	beq.n	8018a98 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	6a1b      	ldr	r3, [r3, #32]
 8018a80:	7b5b      	ldrb	r3, [r3, #13]
 8018a82:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8018a84:	7dbb      	ldrb	r3, [r7, #22]
 8018a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018a8a:	75bb      	strb	r3, [r7, #22]
 8018a8c:	7dbb      	ldrb	r3, [r7, #22]
 8018a8e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	695a      	ldr	r2, [r3, #20]
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018a98:	7dba      	ldrb	r2, [r7, #22]
 8018a9a:	7d7b      	ldrb	r3, [r7, #21]
 8018a9c:	429a      	cmp	r2, r3
 8018a9e:	d115      	bne.n	8018acc <dir_find+0x106>
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	6a1b      	ldr	r3, [r3, #32]
 8018aa4:	330d      	adds	r3, #13
 8018aa6:	781b      	ldrb	r3, [r3, #0]
 8018aa8:	7d3a      	ldrb	r2, [r7, #20]
 8018aaa:	429a      	cmp	r2, r3
 8018aac:	d10e      	bne.n	8018acc <dir_find+0x106>
 8018aae:	693b      	ldr	r3, [r7, #16]
 8018ab0:	691a      	ldr	r2, [r3, #16]
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	6a1b      	ldr	r3, [r3, #32]
 8018ab6:	4619      	mov	r1, r3
 8018ab8:	4610      	mov	r0, r2
 8018aba:	f7ff fdfd 	bl	80186b8 <cmp_lfn>
 8018abe:	4603      	mov	r3, r0
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d003      	beq.n	8018acc <dir_find+0x106>
 8018ac4:	7d7b      	ldrb	r3, [r7, #21]
 8018ac6:	3b01      	subs	r3, #1
 8018ac8:	b2db      	uxtb	r3, r3
 8018aca:	e000      	b.n	8018ace <dir_find+0x108>
 8018acc:	23ff      	movs	r3, #255	; 0xff
 8018ace:	757b      	strb	r3, [r7, #21]
 8018ad0:	e024      	b.n	8018b1c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018ad2:	7d7b      	ldrb	r3, [r7, #21]
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d109      	bne.n	8018aec <dir_find+0x126>
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	6a1b      	ldr	r3, [r3, #32]
 8018adc:	4618      	mov	r0, r3
 8018ade:	f7ff ff51 	bl	8018984 <sum_sfn>
 8018ae2:	4603      	mov	r3, r0
 8018ae4:	461a      	mov	r2, r3
 8018ae6:	7d3b      	ldrb	r3, [r7, #20]
 8018ae8:	4293      	cmp	r3, r2
 8018aea:	d024      	beq.n	8018b36 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018af2:	f003 0301 	and.w	r3, r3, #1
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d10a      	bne.n	8018b10 <dir_find+0x14a>
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	6a18      	ldr	r0, [r3, #32]
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	3324      	adds	r3, #36	; 0x24
 8018b02:	220b      	movs	r2, #11
 8018b04:	4619      	mov	r1, r3
 8018b06:	f7fe fe1f 	bl	8017748 <mem_cmp>
 8018b0a:	4603      	mov	r3, r0
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d014      	beq.n	8018b3a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018b10:	23ff      	movs	r3, #255	; 0xff
 8018b12:	757b      	strb	r3, [r7, #21]
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	f04f 32ff 	mov.w	r2, #4294967295
 8018b1a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8018b1c:	2100      	movs	r1, #0
 8018b1e:	6878      	ldr	r0, [r7, #4]
 8018b20:	f7ff fc6d 	bl	80183fe <dir_next>
 8018b24:	4603      	mov	r3, r0
 8018b26:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018b28:	7dfb      	ldrb	r3, [r7, #23]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	f43f af65 	beq.w	80189fa <dir_find+0x34>
 8018b30:	e004      	b.n	8018b3c <dir_find+0x176>
		if (res != FR_OK) break;
 8018b32:	bf00      	nop
 8018b34:	e002      	b.n	8018b3c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018b36:	bf00      	nop
 8018b38:	e000      	b.n	8018b3c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018b3a:	bf00      	nop

	return res;
 8018b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8018b3e:	4618      	mov	r0, r3
 8018b40:	3718      	adds	r7, #24
 8018b42:	46bd      	mov	sp, r7
 8018b44:	bd80      	pop	{r7, pc}
	...

08018b48 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b08c      	sub	sp, #48	; 0x30
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018b5c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d001      	beq.n	8018b68 <dir_register+0x20>
 8018b64:	2306      	movs	r3, #6
 8018b66:	e0e0      	b.n	8018d2a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018b68:	2300      	movs	r3, #0
 8018b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8018b6c:	e002      	b.n	8018b74 <dir_register+0x2c>
 8018b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b70:	3301      	adds	r3, #1
 8018b72:	627b      	str	r3, [r7, #36]	; 0x24
 8018b74:	69fb      	ldr	r3, [r7, #28]
 8018b76:	691a      	ldr	r2, [r3, #16]
 8018b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b7a:	005b      	lsls	r3, r3, #1
 8018b7c:	4413      	add	r3, r2
 8018b7e:	881b      	ldrh	r3, [r3, #0]
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d1f4      	bne.n	8018b6e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8018b8a:	f107 030c 	add.w	r3, r7, #12
 8018b8e:	220c      	movs	r2, #12
 8018b90:	4618      	mov	r0, r3
 8018b92:	f7fe fd9d 	bl	80176d0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8018b96:	7dfb      	ldrb	r3, [r7, #23]
 8018b98:	f003 0301 	and.w	r3, r3, #1
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d032      	beq.n	8018c06 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	2240      	movs	r2, #64	; 0x40
 8018ba4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8018ba8:	2301      	movs	r3, #1
 8018baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8018bac:	e016      	b.n	8018bdc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8018bb4:	69fb      	ldr	r3, [r7, #28]
 8018bb6:	691a      	ldr	r2, [r3, #16]
 8018bb8:	f107 010c 	add.w	r1, r7, #12
 8018bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bbe:	f7ff fe53 	bl	8018868 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8018bc2:	6878      	ldr	r0, [r7, #4]
 8018bc4:	f7ff feff 	bl	80189c6 <dir_find>
 8018bc8:	4603      	mov	r3, r0
 8018bca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8018bce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d106      	bne.n	8018be4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8018bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bd8:	3301      	adds	r3, #1
 8018bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8018bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bde:	2b63      	cmp	r3, #99	; 0x63
 8018be0:	d9e5      	bls.n	8018bae <dir_register+0x66>
 8018be2:	e000      	b.n	8018be6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8018be4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8018be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018be8:	2b64      	cmp	r3, #100	; 0x64
 8018bea:	d101      	bne.n	8018bf0 <dir_register+0xa8>
 8018bec:	2307      	movs	r3, #7
 8018bee:	e09c      	b.n	8018d2a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8018bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018bf4:	2b04      	cmp	r3, #4
 8018bf6:	d002      	beq.n	8018bfe <dir_register+0xb6>
 8018bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018bfc:	e095      	b.n	8018d2a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8018bfe:	7dfa      	ldrb	r2, [r7, #23]
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8018c06:	7dfb      	ldrb	r3, [r7, #23]
 8018c08:	f003 0302 	and.w	r3, r3, #2
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d007      	beq.n	8018c20 <dir_register+0xd8>
 8018c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c12:	330c      	adds	r3, #12
 8018c14:	4a47      	ldr	r2, [pc, #284]	; (8018d34 <dir_register+0x1ec>)
 8018c16:	fba2 2303 	umull	r2, r3, r2, r3
 8018c1a:	089b      	lsrs	r3, r3, #2
 8018c1c:	3301      	adds	r3, #1
 8018c1e:	e000      	b.n	8018c22 <dir_register+0xda>
 8018c20:	2301      	movs	r3, #1
 8018c22:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8018c24:	6a39      	ldr	r1, [r7, #32]
 8018c26:	6878      	ldr	r0, [r7, #4]
 8018c28:	f7ff fcbf 	bl	80185aa <dir_alloc>
 8018c2c:	4603      	mov	r3, r0
 8018c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8018c32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d148      	bne.n	8018ccc <dir_register+0x184>
 8018c3a:	6a3b      	ldr	r3, [r7, #32]
 8018c3c:	3b01      	subs	r3, #1
 8018c3e:	623b      	str	r3, [r7, #32]
 8018c40:	6a3b      	ldr	r3, [r7, #32]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d042      	beq.n	8018ccc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	695a      	ldr	r2, [r3, #20]
 8018c4a:	6a3b      	ldr	r3, [r7, #32]
 8018c4c:	015b      	lsls	r3, r3, #5
 8018c4e:	1ad3      	subs	r3, r2, r3
 8018c50:	4619      	mov	r1, r3
 8018c52:	6878      	ldr	r0, [r7, #4]
 8018c54:	f7ff fb4a 	bl	80182ec <dir_sdi>
 8018c58:	4603      	mov	r3, r0
 8018c5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d132      	bne.n	8018ccc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	3324      	adds	r3, #36	; 0x24
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	f7ff fe8a 	bl	8018984 <sum_sfn>
 8018c70:	4603      	mov	r3, r0
 8018c72:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	69db      	ldr	r3, [r3, #28]
 8018c78:	4619      	mov	r1, r3
 8018c7a:	69f8      	ldr	r0, [r7, #28]
 8018c7c:	f7fe ff56 	bl	8017b2c <move_window>
 8018c80:	4603      	mov	r3, r0
 8018c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8018c86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d11d      	bne.n	8018cca <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8018c8e:	69fb      	ldr	r3, [r7, #28]
 8018c90:	6918      	ldr	r0, [r3, #16]
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	6a19      	ldr	r1, [r3, #32]
 8018c96:	6a3b      	ldr	r3, [r7, #32]
 8018c98:	b2da      	uxtb	r2, r3
 8018c9a:	7efb      	ldrb	r3, [r7, #27]
 8018c9c:	f7ff fd7c 	bl	8018798 <put_lfn>
				fs->wflag = 1;
 8018ca0:	69fb      	ldr	r3, [r7, #28]
 8018ca2:	2201      	movs	r2, #1
 8018ca4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8018ca6:	2100      	movs	r1, #0
 8018ca8:	6878      	ldr	r0, [r7, #4]
 8018caa:	f7ff fba8 	bl	80183fe <dir_next>
 8018cae:	4603      	mov	r3, r0
 8018cb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8018cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d107      	bne.n	8018ccc <dir_register+0x184>
 8018cbc:	6a3b      	ldr	r3, [r7, #32]
 8018cbe:	3b01      	subs	r3, #1
 8018cc0:	623b      	str	r3, [r7, #32]
 8018cc2:	6a3b      	ldr	r3, [r7, #32]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d1d5      	bne.n	8018c74 <dir_register+0x12c>
 8018cc8:	e000      	b.n	8018ccc <dir_register+0x184>
				if (res != FR_OK) break;
 8018cca:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8018ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d128      	bne.n	8018d26 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	69db      	ldr	r3, [r3, #28]
 8018cd8:	4619      	mov	r1, r3
 8018cda:	69f8      	ldr	r0, [r7, #28]
 8018cdc:	f7fe ff26 	bl	8017b2c <move_window>
 8018ce0:	4603      	mov	r3, r0
 8018ce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d11b      	bne.n	8018d26 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	6a1b      	ldr	r3, [r3, #32]
 8018cf2:	2220      	movs	r2, #32
 8018cf4:	2100      	movs	r1, #0
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	f7fe fd0b 	bl	8017712 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	6a18      	ldr	r0, [r3, #32]
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	3324      	adds	r3, #36	; 0x24
 8018d04:	220b      	movs	r2, #11
 8018d06:	4619      	mov	r1, r3
 8018d08:	f7fe fce2 	bl	80176d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	6a1b      	ldr	r3, [r3, #32]
 8018d16:	330c      	adds	r3, #12
 8018d18:	f002 0218 	and.w	r2, r2, #24
 8018d1c:	b2d2      	uxtb	r2, r2
 8018d1e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8018d20:	69fb      	ldr	r3, [r7, #28]
 8018d22:	2201      	movs	r2, #1
 8018d24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8018d26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	3730      	adds	r7, #48	; 0x30
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	bd80      	pop	{r7, pc}
 8018d32:	bf00      	nop
 8018d34:	4ec4ec4f 	.word	0x4ec4ec4f

08018d38 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8018d38:	b580      	push	{r7, lr}
 8018d3a:	b08a      	sub	sp, #40	; 0x28
 8018d3c:	af00      	add	r7, sp, #0
 8018d3e:	6078      	str	r0, [r7, #4]
 8018d40:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8018d42:	683b      	ldr	r3, [r7, #0]
 8018d44:	681b      	ldr	r3, [r3, #0]
 8018d46:	613b      	str	r3, [r7, #16]
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	691b      	ldr	r3, [r3, #16]
 8018d4e:	60fb      	str	r3, [r7, #12]
 8018d50:	2300      	movs	r3, #0
 8018d52:	617b      	str	r3, [r7, #20]
 8018d54:	697b      	ldr	r3, [r7, #20]
 8018d56:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8018d58:	69bb      	ldr	r3, [r7, #24]
 8018d5a:	1c5a      	adds	r2, r3, #1
 8018d5c:	61ba      	str	r2, [r7, #24]
 8018d5e:	693a      	ldr	r2, [r7, #16]
 8018d60:	4413      	add	r3, r2
 8018d62:	781b      	ldrb	r3, [r3, #0]
 8018d64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8018d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d68:	2b1f      	cmp	r3, #31
 8018d6a:	d940      	bls.n	8018dee <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8018d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d6e:	2b2f      	cmp	r3, #47	; 0x2f
 8018d70:	d006      	beq.n	8018d80 <create_name+0x48>
 8018d72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d74:	2b5c      	cmp	r3, #92	; 0x5c
 8018d76:	d110      	bne.n	8018d9a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8018d78:	e002      	b.n	8018d80 <create_name+0x48>
 8018d7a:	69bb      	ldr	r3, [r7, #24]
 8018d7c:	3301      	adds	r3, #1
 8018d7e:	61bb      	str	r3, [r7, #24]
 8018d80:	693a      	ldr	r2, [r7, #16]
 8018d82:	69bb      	ldr	r3, [r7, #24]
 8018d84:	4413      	add	r3, r2
 8018d86:	781b      	ldrb	r3, [r3, #0]
 8018d88:	2b2f      	cmp	r3, #47	; 0x2f
 8018d8a:	d0f6      	beq.n	8018d7a <create_name+0x42>
 8018d8c:	693a      	ldr	r2, [r7, #16]
 8018d8e:	69bb      	ldr	r3, [r7, #24]
 8018d90:	4413      	add	r3, r2
 8018d92:	781b      	ldrb	r3, [r3, #0]
 8018d94:	2b5c      	cmp	r3, #92	; 0x5c
 8018d96:	d0f0      	beq.n	8018d7a <create_name+0x42>
			break;
 8018d98:	e02a      	b.n	8018df0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8018d9a:	697b      	ldr	r3, [r7, #20]
 8018d9c:	2bfe      	cmp	r3, #254	; 0xfe
 8018d9e:	d901      	bls.n	8018da4 <create_name+0x6c>
 8018da0:	2306      	movs	r3, #6
 8018da2:	e17d      	b.n	80190a0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8018da4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018da6:	b2db      	uxtb	r3, r3
 8018da8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8018daa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dac:	2101      	movs	r1, #1
 8018dae:	4618      	mov	r0, r3
 8018db0:	f001 fa8c 	bl	801a2cc <ff_convert>
 8018db4:	4603      	mov	r3, r0
 8018db6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8018db8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d101      	bne.n	8018dc2 <create_name+0x8a>
 8018dbe:	2306      	movs	r3, #6
 8018dc0:	e16e      	b.n	80190a0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8018dc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dc4:	2b7f      	cmp	r3, #127	; 0x7f
 8018dc6:	d809      	bhi.n	8018ddc <create_name+0xa4>
 8018dc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dca:	4619      	mov	r1, r3
 8018dcc:	488d      	ldr	r0, [pc, #564]	; (8019004 <create_name+0x2cc>)
 8018dce:	f7fe fce2 	bl	8017796 <chk_chr>
 8018dd2:	4603      	mov	r3, r0
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d001      	beq.n	8018ddc <create_name+0xa4>
 8018dd8:	2306      	movs	r3, #6
 8018dda:	e161      	b.n	80190a0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8018ddc:	697b      	ldr	r3, [r7, #20]
 8018dde:	1c5a      	adds	r2, r3, #1
 8018de0:	617a      	str	r2, [r7, #20]
 8018de2:	005b      	lsls	r3, r3, #1
 8018de4:	68fa      	ldr	r2, [r7, #12]
 8018de6:	4413      	add	r3, r2
 8018de8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018dea:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8018dec:	e7b4      	b.n	8018d58 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8018dee:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8018df0:	693a      	ldr	r2, [r7, #16]
 8018df2:	69bb      	ldr	r3, [r7, #24]
 8018df4:	441a      	add	r2, r3
 8018df6:	683b      	ldr	r3, [r7, #0]
 8018df8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8018dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dfc:	2b1f      	cmp	r3, #31
 8018dfe:	d801      	bhi.n	8018e04 <create_name+0xcc>
 8018e00:	2304      	movs	r3, #4
 8018e02:	e000      	b.n	8018e06 <create_name+0xce>
 8018e04:	2300      	movs	r3, #0
 8018e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018e0a:	e011      	b.n	8018e30 <create_name+0xf8>
		w = lfn[di - 1];
 8018e0c:	697a      	ldr	r2, [r7, #20]
 8018e0e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018e12:	4413      	add	r3, r2
 8018e14:	005b      	lsls	r3, r3, #1
 8018e16:	68fa      	ldr	r2, [r7, #12]
 8018e18:	4413      	add	r3, r2
 8018e1a:	881b      	ldrh	r3, [r3, #0]
 8018e1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8018e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e20:	2b20      	cmp	r3, #32
 8018e22:	d002      	beq.n	8018e2a <create_name+0xf2>
 8018e24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e26:	2b2e      	cmp	r3, #46	; 0x2e
 8018e28:	d106      	bne.n	8018e38 <create_name+0x100>
		di--;
 8018e2a:	697b      	ldr	r3, [r7, #20]
 8018e2c:	3b01      	subs	r3, #1
 8018e2e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018e30:	697b      	ldr	r3, [r7, #20]
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d1ea      	bne.n	8018e0c <create_name+0xd4>
 8018e36:	e000      	b.n	8018e3a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8018e38:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8018e3a:	697b      	ldr	r3, [r7, #20]
 8018e3c:	005b      	lsls	r3, r3, #1
 8018e3e:	68fa      	ldr	r2, [r7, #12]
 8018e40:	4413      	add	r3, r2
 8018e42:	2200      	movs	r2, #0
 8018e44:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8018e46:	697b      	ldr	r3, [r7, #20]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d101      	bne.n	8018e50 <create_name+0x118>
 8018e4c:	2306      	movs	r3, #6
 8018e4e:	e127      	b.n	80190a0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	3324      	adds	r3, #36	; 0x24
 8018e54:	220b      	movs	r2, #11
 8018e56:	2120      	movs	r1, #32
 8018e58:	4618      	mov	r0, r3
 8018e5a:	f7fe fc5a 	bl	8017712 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8018e5e:	2300      	movs	r3, #0
 8018e60:	61bb      	str	r3, [r7, #24]
 8018e62:	e002      	b.n	8018e6a <create_name+0x132>
 8018e64:	69bb      	ldr	r3, [r7, #24]
 8018e66:	3301      	adds	r3, #1
 8018e68:	61bb      	str	r3, [r7, #24]
 8018e6a:	69bb      	ldr	r3, [r7, #24]
 8018e6c:	005b      	lsls	r3, r3, #1
 8018e6e:	68fa      	ldr	r2, [r7, #12]
 8018e70:	4413      	add	r3, r2
 8018e72:	881b      	ldrh	r3, [r3, #0]
 8018e74:	2b20      	cmp	r3, #32
 8018e76:	d0f5      	beq.n	8018e64 <create_name+0x12c>
 8018e78:	69bb      	ldr	r3, [r7, #24]
 8018e7a:	005b      	lsls	r3, r3, #1
 8018e7c:	68fa      	ldr	r2, [r7, #12]
 8018e7e:	4413      	add	r3, r2
 8018e80:	881b      	ldrh	r3, [r3, #0]
 8018e82:	2b2e      	cmp	r3, #46	; 0x2e
 8018e84:	d0ee      	beq.n	8018e64 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8018e86:	69bb      	ldr	r3, [r7, #24]
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d009      	beq.n	8018ea0 <create_name+0x168>
 8018e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e90:	f043 0303 	orr.w	r3, r3, #3
 8018e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8018e98:	e002      	b.n	8018ea0 <create_name+0x168>
 8018e9a:	697b      	ldr	r3, [r7, #20]
 8018e9c:	3b01      	subs	r3, #1
 8018e9e:	617b      	str	r3, [r7, #20]
 8018ea0:	697b      	ldr	r3, [r7, #20]
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d009      	beq.n	8018eba <create_name+0x182>
 8018ea6:	697a      	ldr	r2, [r7, #20]
 8018ea8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018eac:	4413      	add	r3, r2
 8018eae:	005b      	lsls	r3, r3, #1
 8018eb0:	68fa      	ldr	r2, [r7, #12]
 8018eb2:	4413      	add	r3, r2
 8018eb4:	881b      	ldrh	r3, [r3, #0]
 8018eb6:	2b2e      	cmp	r3, #46	; 0x2e
 8018eb8:	d1ef      	bne.n	8018e9a <create_name+0x162>

	i = b = 0; ni = 8;
 8018eba:	2300      	movs	r3, #0
 8018ebc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018ec0:	2300      	movs	r3, #0
 8018ec2:	623b      	str	r3, [r7, #32]
 8018ec4:	2308      	movs	r3, #8
 8018ec6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8018ec8:	69bb      	ldr	r3, [r7, #24]
 8018eca:	1c5a      	adds	r2, r3, #1
 8018ecc:	61ba      	str	r2, [r7, #24]
 8018ece:	005b      	lsls	r3, r3, #1
 8018ed0:	68fa      	ldr	r2, [r7, #12]
 8018ed2:	4413      	add	r3, r2
 8018ed4:	881b      	ldrh	r3, [r3, #0]
 8018ed6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8018ed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	f000 8090 	beq.w	8019000 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8018ee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ee2:	2b20      	cmp	r3, #32
 8018ee4:	d006      	beq.n	8018ef4 <create_name+0x1bc>
 8018ee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ee8:	2b2e      	cmp	r3, #46	; 0x2e
 8018eea:	d10a      	bne.n	8018f02 <create_name+0x1ca>
 8018eec:	69ba      	ldr	r2, [r7, #24]
 8018eee:	697b      	ldr	r3, [r7, #20]
 8018ef0:	429a      	cmp	r2, r3
 8018ef2:	d006      	beq.n	8018f02 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8018ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ef8:	f043 0303 	orr.w	r3, r3, #3
 8018efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018f00:	e07d      	b.n	8018ffe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8018f02:	6a3a      	ldr	r2, [r7, #32]
 8018f04:	69fb      	ldr	r3, [r7, #28]
 8018f06:	429a      	cmp	r2, r3
 8018f08:	d203      	bcs.n	8018f12 <create_name+0x1da>
 8018f0a:	69ba      	ldr	r2, [r7, #24]
 8018f0c:	697b      	ldr	r3, [r7, #20]
 8018f0e:	429a      	cmp	r2, r3
 8018f10:	d123      	bne.n	8018f5a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8018f12:	69fb      	ldr	r3, [r7, #28]
 8018f14:	2b0b      	cmp	r3, #11
 8018f16:	d106      	bne.n	8018f26 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8018f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f1c:	f043 0303 	orr.w	r3, r3, #3
 8018f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018f24:	e075      	b.n	8019012 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8018f26:	69ba      	ldr	r2, [r7, #24]
 8018f28:	697b      	ldr	r3, [r7, #20]
 8018f2a:	429a      	cmp	r2, r3
 8018f2c:	d005      	beq.n	8018f3a <create_name+0x202>
 8018f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f32:	f043 0303 	orr.w	r3, r3, #3
 8018f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8018f3a:	69ba      	ldr	r2, [r7, #24]
 8018f3c:	697b      	ldr	r3, [r7, #20]
 8018f3e:	429a      	cmp	r2, r3
 8018f40:	d866      	bhi.n	8019010 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8018f42:	697b      	ldr	r3, [r7, #20]
 8018f44:	61bb      	str	r3, [r7, #24]
 8018f46:	2308      	movs	r3, #8
 8018f48:	623b      	str	r3, [r7, #32]
 8018f4a:	230b      	movs	r3, #11
 8018f4c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8018f4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f52:	009b      	lsls	r3, r3, #2
 8018f54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018f58:	e051      	b.n	8018ffe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8018f5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f5c:	2b7f      	cmp	r3, #127	; 0x7f
 8018f5e:	d914      	bls.n	8018f8a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8018f60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f62:	2100      	movs	r1, #0
 8018f64:	4618      	mov	r0, r3
 8018f66:	f001 f9b1 	bl	801a2cc <ff_convert>
 8018f6a:	4603      	mov	r3, r0
 8018f6c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8018f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d004      	beq.n	8018f7e <create_name+0x246>
 8018f74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f76:	3b80      	subs	r3, #128	; 0x80
 8018f78:	4a23      	ldr	r2, [pc, #140]	; (8019008 <create_name+0x2d0>)
 8018f7a:	5cd3      	ldrb	r3, [r2, r3]
 8018f7c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8018f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f82:	f043 0302 	orr.w	r3, r3, #2
 8018f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8018f8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d007      	beq.n	8018fa0 <create_name+0x268>
 8018f90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f92:	4619      	mov	r1, r3
 8018f94:	481d      	ldr	r0, [pc, #116]	; (801900c <create_name+0x2d4>)
 8018f96:	f7fe fbfe 	bl	8017796 <chk_chr>
 8018f9a:	4603      	mov	r3, r0
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d008      	beq.n	8018fb2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8018fa0:	235f      	movs	r3, #95	; 0x5f
 8018fa2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018fa8:	f043 0303 	orr.w	r3, r3, #3
 8018fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018fb0:	e01b      	b.n	8018fea <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8018fb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018fb4:	2b40      	cmp	r3, #64	; 0x40
 8018fb6:	d909      	bls.n	8018fcc <create_name+0x294>
 8018fb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018fba:	2b5a      	cmp	r3, #90	; 0x5a
 8018fbc:	d806      	bhi.n	8018fcc <create_name+0x294>
					b |= 2;
 8018fbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018fc2:	f043 0302 	orr.w	r3, r3, #2
 8018fc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018fca:	e00e      	b.n	8018fea <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8018fcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018fce:	2b60      	cmp	r3, #96	; 0x60
 8018fd0:	d90b      	bls.n	8018fea <create_name+0x2b2>
 8018fd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018fd4:	2b7a      	cmp	r3, #122	; 0x7a
 8018fd6:	d808      	bhi.n	8018fea <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8018fd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018fdc:	f043 0301 	orr.w	r3, r3, #1
 8018fe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018fe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018fe6:	3b20      	subs	r3, #32
 8018fe8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8018fea:	6a3b      	ldr	r3, [r7, #32]
 8018fec:	1c5a      	adds	r2, r3, #1
 8018fee:	623a      	str	r2, [r7, #32]
 8018ff0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018ff2:	b2d1      	uxtb	r1, r2
 8018ff4:	687a      	ldr	r2, [r7, #4]
 8018ff6:	4413      	add	r3, r2
 8018ff8:	460a      	mov	r2, r1
 8018ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8018ffe:	e763      	b.n	8018ec8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8019000:	bf00      	nop
 8019002:	e006      	b.n	8019012 <create_name+0x2da>
 8019004:	0801feb0 	.word	0x0801feb0
 8019008:	08020004 	.word	0x08020004
 801900c:	0801febc 	.word	0x0801febc
			if (si > di) break;			/* No extension */
 8019010:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019018:	2be5      	cmp	r3, #229	; 0xe5
 801901a:	d103      	bne.n	8019024 <create_name+0x2ec>
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	2205      	movs	r2, #5
 8019020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8019024:	69fb      	ldr	r3, [r7, #28]
 8019026:	2b08      	cmp	r3, #8
 8019028:	d104      	bne.n	8019034 <create_name+0x2fc>
 801902a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801902e:	009b      	lsls	r3, r3, #2
 8019030:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8019034:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019038:	f003 030c 	and.w	r3, r3, #12
 801903c:	2b0c      	cmp	r3, #12
 801903e:	d005      	beq.n	801904c <create_name+0x314>
 8019040:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019044:	f003 0303 	and.w	r3, r3, #3
 8019048:	2b03      	cmp	r3, #3
 801904a:	d105      	bne.n	8019058 <create_name+0x320>
 801904c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019050:	f043 0302 	orr.w	r3, r3, #2
 8019054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8019058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801905c:	f003 0302 	and.w	r3, r3, #2
 8019060:	2b00      	cmp	r3, #0
 8019062:	d117      	bne.n	8019094 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8019064:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019068:	f003 0303 	and.w	r3, r3, #3
 801906c:	2b01      	cmp	r3, #1
 801906e:	d105      	bne.n	801907c <create_name+0x344>
 8019070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019074:	f043 0310 	orr.w	r3, r3, #16
 8019078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801907c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019080:	f003 030c 	and.w	r3, r3, #12
 8019084:	2b04      	cmp	r3, #4
 8019086:	d105      	bne.n	8019094 <create_name+0x35c>
 8019088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801908c:	f043 0308 	orr.w	r3, r3, #8
 8019090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801909a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801909e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80190a0:	4618      	mov	r0, r3
 80190a2:	3728      	adds	r7, #40	; 0x28
 80190a4:	46bd      	mov	sp, r7
 80190a6:	bd80      	pop	{r7, pc}

080190a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b086      	sub	sp, #24
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	6078      	str	r0, [r7, #4]
 80190b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80190b6:	693b      	ldr	r3, [r7, #16]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80190bc:	e002      	b.n	80190c4 <follow_path+0x1c>
 80190be:	683b      	ldr	r3, [r7, #0]
 80190c0:	3301      	adds	r3, #1
 80190c2:	603b      	str	r3, [r7, #0]
 80190c4:	683b      	ldr	r3, [r7, #0]
 80190c6:	781b      	ldrb	r3, [r3, #0]
 80190c8:	2b2f      	cmp	r3, #47	; 0x2f
 80190ca:	d0f8      	beq.n	80190be <follow_path+0x16>
 80190cc:	683b      	ldr	r3, [r7, #0]
 80190ce:	781b      	ldrb	r3, [r3, #0]
 80190d0:	2b5c      	cmp	r3, #92	; 0x5c
 80190d2:	d0f4      	beq.n	80190be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80190d4:	693b      	ldr	r3, [r7, #16]
 80190d6:	2200      	movs	r2, #0
 80190d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80190da:	683b      	ldr	r3, [r7, #0]
 80190dc:	781b      	ldrb	r3, [r3, #0]
 80190de:	2b1f      	cmp	r3, #31
 80190e0:	d80a      	bhi.n	80190f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	2280      	movs	r2, #128	; 0x80
 80190e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80190ea:	2100      	movs	r1, #0
 80190ec:	6878      	ldr	r0, [r7, #4]
 80190ee:	f7ff f8fd 	bl	80182ec <dir_sdi>
 80190f2:	4603      	mov	r3, r0
 80190f4:	75fb      	strb	r3, [r7, #23]
 80190f6:	e048      	b.n	801918a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80190f8:	463b      	mov	r3, r7
 80190fa:	4619      	mov	r1, r3
 80190fc:	6878      	ldr	r0, [r7, #4]
 80190fe:	f7ff fe1b 	bl	8018d38 <create_name>
 8019102:	4603      	mov	r3, r0
 8019104:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8019106:	7dfb      	ldrb	r3, [r7, #23]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d139      	bne.n	8019180 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801910c:	6878      	ldr	r0, [r7, #4]
 801910e:	f7ff fc5a 	bl	80189c6 <dir_find>
 8019112:	4603      	mov	r3, r0
 8019114:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801911c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801911e:	7dfb      	ldrb	r3, [r7, #23]
 8019120:	2b00      	cmp	r3, #0
 8019122:	d00a      	beq.n	801913a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8019124:	7dfb      	ldrb	r3, [r7, #23]
 8019126:	2b04      	cmp	r3, #4
 8019128:	d12c      	bne.n	8019184 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801912a:	7afb      	ldrb	r3, [r7, #11]
 801912c:	f003 0304 	and.w	r3, r3, #4
 8019130:	2b00      	cmp	r3, #0
 8019132:	d127      	bne.n	8019184 <follow_path+0xdc>
 8019134:	2305      	movs	r3, #5
 8019136:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8019138:	e024      	b.n	8019184 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801913a:	7afb      	ldrb	r3, [r7, #11]
 801913c:	f003 0304 	and.w	r3, r3, #4
 8019140:	2b00      	cmp	r3, #0
 8019142:	d121      	bne.n	8019188 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8019144:	693b      	ldr	r3, [r7, #16]
 8019146:	799b      	ldrb	r3, [r3, #6]
 8019148:	f003 0310 	and.w	r3, r3, #16
 801914c:	2b00      	cmp	r3, #0
 801914e:	d102      	bne.n	8019156 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8019150:	2305      	movs	r3, #5
 8019152:	75fb      	strb	r3, [r7, #23]
 8019154:	e019      	b.n	801918a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	695b      	ldr	r3, [r3, #20]
 8019160:	68fa      	ldr	r2, [r7, #12]
 8019162:	8992      	ldrh	r2, [r2, #12]
 8019164:	fbb3 f0f2 	udiv	r0, r3, r2
 8019168:	fb00 f202 	mul.w	r2, r0, r2
 801916c:	1a9b      	subs	r3, r3, r2
 801916e:	440b      	add	r3, r1
 8019170:	4619      	mov	r1, r3
 8019172:	68f8      	ldr	r0, [r7, #12]
 8019174:	f7ff fa60 	bl	8018638 <ld_clust>
 8019178:	4602      	mov	r2, r0
 801917a:	693b      	ldr	r3, [r7, #16]
 801917c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801917e:	e7bb      	b.n	80190f8 <follow_path+0x50>
			if (res != FR_OK) break;
 8019180:	bf00      	nop
 8019182:	e002      	b.n	801918a <follow_path+0xe2>
				break;
 8019184:	bf00      	nop
 8019186:	e000      	b.n	801918a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8019188:	bf00      	nop
			}
		}
	}

	return res;
 801918a:	7dfb      	ldrb	r3, [r7, #23]
}
 801918c:	4618      	mov	r0, r3
 801918e:	3718      	adds	r7, #24
 8019190:	46bd      	mov	sp, r7
 8019192:	bd80      	pop	{r7, pc}

08019194 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8019194:	b480      	push	{r7}
 8019196:	b087      	sub	sp, #28
 8019198:	af00      	add	r7, sp, #0
 801919a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801919c:	f04f 33ff 	mov.w	r3, #4294967295
 80191a0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d031      	beq.n	801920e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	617b      	str	r3, [r7, #20]
 80191b0:	e002      	b.n	80191b8 <get_ldnumber+0x24>
 80191b2:	697b      	ldr	r3, [r7, #20]
 80191b4:	3301      	adds	r3, #1
 80191b6:	617b      	str	r3, [r7, #20]
 80191b8:	697b      	ldr	r3, [r7, #20]
 80191ba:	781b      	ldrb	r3, [r3, #0]
 80191bc:	2b1f      	cmp	r3, #31
 80191be:	d903      	bls.n	80191c8 <get_ldnumber+0x34>
 80191c0:	697b      	ldr	r3, [r7, #20]
 80191c2:	781b      	ldrb	r3, [r3, #0]
 80191c4:	2b3a      	cmp	r3, #58	; 0x3a
 80191c6:	d1f4      	bne.n	80191b2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80191c8:	697b      	ldr	r3, [r7, #20]
 80191ca:	781b      	ldrb	r3, [r3, #0]
 80191cc:	2b3a      	cmp	r3, #58	; 0x3a
 80191ce:	d11c      	bne.n	801920a <get_ldnumber+0x76>
			tp = *path;
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	1c5a      	adds	r2, r3, #1
 80191da:	60fa      	str	r2, [r7, #12]
 80191dc:	781b      	ldrb	r3, [r3, #0]
 80191de:	3b30      	subs	r3, #48	; 0x30
 80191e0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80191e2:	68bb      	ldr	r3, [r7, #8]
 80191e4:	2b09      	cmp	r3, #9
 80191e6:	d80e      	bhi.n	8019206 <get_ldnumber+0x72>
 80191e8:	68fa      	ldr	r2, [r7, #12]
 80191ea:	697b      	ldr	r3, [r7, #20]
 80191ec:	429a      	cmp	r2, r3
 80191ee:	d10a      	bne.n	8019206 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80191f0:	68bb      	ldr	r3, [r7, #8]
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d107      	bne.n	8019206 <get_ldnumber+0x72>
					vol = (int)i;
 80191f6:	68bb      	ldr	r3, [r7, #8]
 80191f8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80191fa:	697b      	ldr	r3, [r7, #20]
 80191fc:	3301      	adds	r3, #1
 80191fe:	617b      	str	r3, [r7, #20]
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	697a      	ldr	r2, [r7, #20]
 8019204:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8019206:	693b      	ldr	r3, [r7, #16]
 8019208:	e002      	b.n	8019210 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801920a:	2300      	movs	r3, #0
 801920c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801920e:	693b      	ldr	r3, [r7, #16]
}
 8019210:	4618      	mov	r0, r3
 8019212:	371c      	adds	r7, #28
 8019214:	46bd      	mov	sp, r7
 8019216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801921a:	4770      	bx	lr

0801921c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801921c:	b580      	push	{r7, lr}
 801921e:	b082      	sub	sp, #8
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
 8019224:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	2200      	movs	r2, #0
 801922a:	70da      	strb	r2, [r3, #3]
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	f04f 32ff 	mov.w	r2, #4294967295
 8019232:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8019234:	6839      	ldr	r1, [r7, #0]
 8019236:	6878      	ldr	r0, [r7, #4]
 8019238:	f7fe fc78 	bl	8017b2c <move_window>
 801923c:	4603      	mov	r3, r0
 801923e:	2b00      	cmp	r3, #0
 8019240:	d001      	beq.n	8019246 <check_fs+0x2a>
 8019242:	2304      	movs	r3, #4
 8019244:	e038      	b.n	80192b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	3338      	adds	r3, #56	; 0x38
 801924a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801924e:	4618      	mov	r0, r3
 8019250:	f7fe f9bc 	bl	80175cc <ld_word>
 8019254:	4603      	mov	r3, r0
 8019256:	461a      	mov	r2, r3
 8019258:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801925c:	429a      	cmp	r2, r3
 801925e:	d001      	beq.n	8019264 <check_fs+0x48>
 8019260:	2303      	movs	r3, #3
 8019262:	e029      	b.n	80192b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801926a:	2be9      	cmp	r3, #233	; 0xe9
 801926c:	d009      	beq.n	8019282 <check_fs+0x66>
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019274:	2beb      	cmp	r3, #235	; 0xeb
 8019276:	d11e      	bne.n	80192b6 <check_fs+0x9a>
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801927e:	2b90      	cmp	r3, #144	; 0x90
 8019280:	d119      	bne.n	80192b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	3338      	adds	r3, #56	; 0x38
 8019286:	3336      	adds	r3, #54	; 0x36
 8019288:	4618      	mov	r0, r3
 801928a:	f7fe f9b7 	bl	80175fc <ld_dword>
 801928e:	4603      	mov	r3, r0
 8019290:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8019294:	4a0a      	ldr	r2, [pc, #40]	; (80192c0 <check_fs+0xa4>)
 8019296:	4293      	cmp	r3, r2
 8019298:	d101      	bne.n	801929e <check_fs+0x82>
 801929a:	2300      	movs	r3, #0
 801929c:	e00c      	b.n	80192b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	3338      	adds	r3, #56	; 0x38
 80192a2:	3352      	adds	r3, #82	; 0x52
 80192a4:	4618      	mov	r0, r3
 80192a6:	f7fe f9a9 	bl	80175fc <ld_dword>
 80192aa:	4603      	mov	r3, r0
 80192ac:	4a05      	ldr	r2, [pc, #20]	; (80192c4 <check_fs+0xa8>)
 80192ae:	4293      	cmp	r3, r2
 80192b0:	d101      	bne.n	80192b6 <check_fs+0x9a>
 80192b2:	2300      	movs	r3, #0
 80192b4:	e000      	b.n	80192b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80192b6:	2302      	movs	r3, #2
}
 80192b8:	4618      	mov	r0, r3
 80192ba:	3708      	adds	r7, #8
 80192bc:	46bd      	mov	sp, r7
 80192be:	bd80      	pop	{r7, pc}
 80192c0:	00544146 	.word	0x00544146
 80192c4:	33544146 	.word	0x33544146

080192c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80192c8:	b580      	push	{r7, lr}
 80192ca:	b096      	sub	sp, #88	; 0x58
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	60f8      	str	r0, [r7, #12]
 80192d0:	60b9      	str	r1, [r7, #8]
 80192d2:	4613      	mov	r3, r2
 80192d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80192d6:	68bb      	ldr	r3, [r7, #8]
 80192d8:	2200      	movs	r2, #0
 80192da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80192dc:	68f8      	ldr	r0, [r7, #12]
 80192de:	f7ff ff59 	bl	8019194 <get_ldnumber>
 80192e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80192e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	da01      	bge.n	80192ee <find_volume+0x26>
 80192ea:	230b      	movs	r3, #11
 80192ec:	e265      	b.n	80197ba <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80192ee:	4a9f      	ldr	r2, [pc, #636]	; (801956c <find_volume+0x2a4>)
 80192f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80192f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80192f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d101      	bne.n	8019302 <find_volume+0x3a>
 80192fe:	230c      	movs	r3, #12
 8019300:	e25b      	b.n	80197ba <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8019302:	68bb      	ldr	r3, [r7, #8]
 8019304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019306:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8019308:	79fb      	ldrb	r3, [r7, #7]
 801930a:	f023 0301 	bic.w	r3, r3, #1
 801930e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8019310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019312:	781b      	ldrb	r3, [r3, #0]
 8019314:	2b00      	cmp	r3, #0
 8019316:	d01a      	beq.n	801934e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8019318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801931a:	785b      	ldrb	r3, [r3, #1]
 801931c:	4618      	mov	r0, r3
 801931e:	f7fe f8b7 	bl	8017490 <disk_status>
 8019322:	4603      	mov	r3, r0
 8019324:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8019328:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801932c:	f003 0301 	and.w	r3, r3, #1
 8019330:	2b00      	cmp	r3, #0
 8019332:	d10c      	bne.n	801934e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8019334:	79fb      	ldrb	r3, [r7, #7]
 8019336:	2b00      	cmp	r3, #0
 8019338:	d007      	beq.n	801934a <find_volume+0x82>
 801933a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801933e:	f003 0304 	and.w	r3, r3, #4
 8019342:	2b00      	cmp	r3, #0
 8019344:	d001      	beq.n	801934a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8019346:	230a      	movs	r3, #10
 8019348:	e237      	b.n	80197ba <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801934a:	2300      	movs	r3, #0
 801934c:	e235      	b.n	80197ba <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801934e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019350:	2200      	movs	r2, #0
 8019352:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8019354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019356:	b2da      	uxtb	r2, r3
 8019358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801935a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801935c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801935e:	785b      	ldrb	r3, [r3, #1]
 8019360:	4618      	mov	r0, r3
 8019362:	f7fe f8af 	bl	80174c4 <disk_initialize>
 8019366:	4603      	mov	r3, r0
 8019368:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801936c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019370:	f003 0301 	and.w	r3, r3, #1
 8019374:	2b00      	cmp	r3, #0
 8019376:	d001      	beq.n	801937c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8019378:	2303      	movs	r3, #3
 801937a:	e21e      	b.n	80197ba <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801937c:	79fb      	ldrb	r3, [r7, #7]
 801937e:	2b00      	cmp	r3, #0
 8019380:	d007      	beq.n	8019392 <find_volume+0xca>
 8019382:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019386:	f003 0304 	and.w	r3, r3, #4
 801938a:	2b00      	cmp	r3, #0
 801938c:	d001      	beq.n	8019392 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801938e:	230a      	movs	r3, #10
 8019390:	e213      	b.n	80197ba <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8019392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019394:	7858      	ldrb	r0, [r3, #1]
 8019396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019398:	330c      	adds	r3, #12
 801939a:	461a      	mov	r2, r3
 801939c:	2102      	movs	r1, #2
 801939e:	f7fe f8f7 	bl	8017590 <disk_ioctl>
 80193a2:	4603      	mov	r3, r0
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d001      	beq.n	80193ac <find_volume+0xe4>
 80193a8:	2301      	movs	r3, #1
 80193aa:	e206      	b.n	80197ba <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80193ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193ae:	899b      	ldrh	r3, [r3, #12]
 80193b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80193b4:	d80d      	bhi.n	80193d2 <find_volume+0x10a>
 80193b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193b8:	899b      	ldrh	r3, [r3, #12]
 80193ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80193be:	d308      	bcc.n	80193d2 <find_volume+0x10a>
 80193c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193c2:	899b      	ldrh	r3, [r3, #12]
 80193c4:	461a      	mov	r2, r3
 80193c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193c8:	899b      	ldrh	r3, [r3, #12]
 80193ca:	3b01      	subs	r3, #1
 80193cc:	4013      	ands	r3, r2
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d001      	beq.n	80193d6 <find_volume+0x10e>
 80193d2:	2301      	movs	r3, #1
 80193d4:	e1f1      	b.n	80197ba <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80193d6:	2300      	movs	r3, #0
 80193d8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80193da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80193dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80193de:	f7ff ff1d 	bl	801921c <check_fs>
 80193e2:	4603      	mov	r3, r0
 80193e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80193e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80193ec:	2b02      	cmp	r3, #2
 80193ee:	d149      	bne.n	8019484 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80193f0:	2300      	movs	r3, #0
 80193f2:	643b      	str	r3, [r7, #64]	; 0x40
 80193f4:	e01e      	b.n	8019434 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80193f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193f8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80193fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193fe:	011b      	lsls	r3, r3, #4
 8019400:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8019404:	4413      	add	r3, r2
 8019406:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8019408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801940a:	3304      	adds	r3, #4
 801940c:	781b      	ldrb	r3, [r3, #0]
 801940e:	2b00      	cmp	r3, #0
 8019410:	d006      	beq.n	8019420 <find_volume+0x158>
 8019412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019414:	3308      	adds	r3, #8
 8019416:	4618      	mov	r0, r3
 8019418:	f7fe f8f0 	bl	80175fc <ld_dword>
 801941c:	4602      	mov	r2, r0
 801941e:	e000      	b.n	8019422 <find_volume+0x15a>
 8019420:	2200      	movs	r2, #0
 8019422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019424:	009b      	lsls	r3, r3, #2
 8019426:	3358      	adds	r3, #88	; 0x58
 8019428:	443b      	add	r3, r7
 801942a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801942e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019430:	3301      	adds	r3, #1
 8019432:	643b      	str	r3, [r7, #64]	; 0x40
 8019434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019436:	2b03      	cmp	r3, #3
 8019438:	d9dd      	bls.n	80193f6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801943a:	2300      	movs	r3, #0
 801943c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801943e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019440:	2b00      	cmp	r3, #0
 8019442:	d002      	beq.n	801944a <find_volume+0x182>
 8019444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019446:	3b01      	subs	r3, #1
 8019448:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801944a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801944c:	009b      	lsls	r3, r3, #2
 801944e:	3358      	adds	r3, #88	; 0x58
 8019450:	443b      	add	r3, r7
 8019452:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8019456:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8019458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801945a:	2b00      	cmp	r3, #0
 801945c:	d005      	beq.n	801946a <find_volume+0x1a2>
 801945e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8019460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019462:	f7ff fedb 	bl	801921c <check_fs>
 8019466:	4603      	mov	r3, r0
 8019468:	e000      	b.n	801946c <find_volume+0x1a4>
 801946a:	2303      	movs	r3, #3
 801946c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8019470:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019474:	2b01      	cmp	r3, #1
 8019476:	d905      	bls.n	8019484 <find_volume+0x1bc>
 8019478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801947a:	3301      	adds	r3, #1
 801947c:	643b      	str	r3, [r7, #64]	; 0x40
 801947e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019480:	2b03      	cmp	r3, #3
 8019482:	d9e2      	bls.n	801944a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8019484:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019488:	2b04      	cmp	r3, #4
 801948a:	d101      	bne.n	8019490 <find_volume+0x1c8>
 801948c:	2301      	movs	r3, #1
 801948e:	e194      	b.n	80197ba <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8019490:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019494:	2b01      	cmp	r3, #1
 8019496:	d901      	bls.n	801949c <find_volume+0x1d4>
 8019498:	230d      	movs	r3, #13
 801949a:	e18e      	b.n	80197ba <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801949e:	3338      	adds	r3, #56	; 0x38
 80194a0:	330b      	adds	r3, #11
 80194a2:	4618      	mov	r0, r3
 80194a4:	f7fe f892 	bl	80175cc <ld_word>
 80194a8:	4603      	mov	r3, r0
 80194aa:	461a      	mov	r2, r3
 80194ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194ae:	899b      	ldrh	r3, [r3, #12]
 80194b0:	429a      	cmp	r2, r3
 80194b2:	d001      	beq.n	80194b8 <find_volume+0x1f0>
 80194b4:	230d      	movs	r3, #13
 80194b6:	e180      	b.n	80197ba <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80194b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194ba:	3338      	adds	r3, #56	; 0x38
 80194bc:	3316      	adds	r3, #22
 80194be:	4618      	mov	r0, r3
 80194c0:	f7fe f884 	bl	80175cc <ld_word>
 80194c4:	4603      	mov	r3, r0
 80194c6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80194c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d106      	bne.n	80194dc <find_volume+0x214>
 80194ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194d0:	3338      	adds	r3, #56	; 0x38
 80194d2:	3324      	adds	r3, #36	; 0x24
 80194d4:	4618      	mov	r0, r3
 80194d6:	f7fe f891 	bl	80175fc <ld_dword>
 80194da:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80194dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80194e0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80194e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194e4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80194e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194ea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80194ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194ee:	789b      	ldrb	r3, [r3, #2]
 80194f0:	2b01      	cmp	r3, #1
 80194f2:	d005      	beq.n	8019500 <find_volume+0x238>
 80194f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194f6:	789b      	ldrb	r3, [r3, #2]
 80194f8:	2b02      	cmp	r3, #2
 80194fa:	d001      	beq.n	8019500 <find_volume+0x238>
 80194fc:	230d      	movs	r3, #13
 80194fe:	e15c      	b.n	80197ba <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8019500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019502:	789b      	ldrb	r3, [r3, #2]
 8019504:	461a      	mov	r2, r3
 8019506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019508:	fb02 f303 	mul.w	r3, r2, r3
 801950c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801950e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019510:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019514:	b29a      	uxth	r2, r3
 8019516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019518:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801951a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801951c:	895b      	ldrh	r3, [r3, #10]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d008      	beq.n	8019534 <find_volume+0x26c>
 8019522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019524:	895b      	ldrh	r3, [r3, #10]
 8019526:	461a      	mov	r2, r3
 8019528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801952a:	895b      	ldrh	r3, [r3, #10]
 801952c:	3b01      	subs	r3, #1
 801952e:	4013      	ands	r3, r2
 8019530:	2b00      	cmp	r3, #0
 8019532:	d001      	beq.n	8019538 <find_volume+0x270>
 8019534:	230d      	movs	r3, #13
 8019536:	e140      	b.n	80197ba <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8019538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801953a:	3338      	adds	r3, #56	; 0x38
 801953c:	3311      	adds	r3, #17
 801953e:	4618      	mov	r0, r3
 8019540:	f7fe f844 	bl	80175cc <ld_word>
 8019544:	4603      	mov	r3, r0
 8019546:	461a      	mov	r2, r3
 8019548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801954a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801954c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801954e:	891b      	ldrh	r3, [r3, #8]
 8019550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019552:	8992      	ldrh	r2, [r2, #12]
 8019554:	0952      	lsrs	r2, r2, #5
 8019556:	b292      	uxth	r2, r2
 8019558:	fbb3 f1f2 	udiv	r1, r3, r2
 801955c:	fb01 f202 	mul.w	r2, r1, r2
 8019560:	1a9b      	subs	r3, r3, r2
 8019562:	b29b      	uxth	r3, r3
 8019564:	2b00      	cmp	r3, #0
 8019566:	d003      	beq.n	8019570 <find_volume+0x2a8>
 8019568:	230d      	movs	r3, #13
 801956a:	e126      	b.n	80197ba <find_volume+0x4f2>
 801956c:	240016a8 	.word	0x240016a8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8019570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019572:	3338      	adds	r3, #56	; 0x38
 8019574:	3313      	adds	r3, #19
 8019576:	4618      	mov	r0, r3
 8019578:	f7fe f828 	bl	80175cc <ld_word>
 801957c:	4603      	mov	r3, r0
 801957e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8019580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019582:	2b00      	cmp	r3, #0
 8019584:	d106      	bne.n	8019594 <find_volume+0x2cc>
 8019586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019588:	3338      	adds	r3, #56	; 0x38
 801958a:	3320      	adds	r3, #32
 801958c:	4618      	mov	r0, r3
 801958e:	f7fe f835 	bl	80175fc <ld_dword>
 8019592:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8019594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019596:	3338      	adds	r3, #56	; 0x38
 8019598:	330e      	adds	r3, #14
 801959a:	4618      	mov	r0, r3
 801959c:	f7fe f816 	bl	80175cc <ld_word>
 80195a0:	4603      	mov	r3, r0
 80195a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80195a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d101      	bne.n	80195ae <find_volume+0x2e6>
 80195aa:	230d      	movs	r3, #13
 80195ac:	e105      	b.n	80197ba <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80195ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80195b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80195b2:	4413      	add	r3, r2
 80195b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80195b6:	8911      	ldrh	r1, [r2, #8]
 80195b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80195ba:	8992      	ldrh	r2, [r2, #12]
 80195bc:	0952      	lsrs	r2, r2, #5
 80195be:	b292      	uxth	r2, r2
 80195c0:	fbb1 f2f2 	udiv	r2, r1, r2
 80195c4:	b292      	uxth	r2, r2
 80195c6:	4413      	add	r3, r2
 80195c8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80195ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80195cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195ce:	429a      	cmp	r2, r3
 80195d0:	d201      	bcs.n	80195d6 <find_volume+0x30e>
 80195d2:	230d      	movs	r3, #13
 80195d4:	e0f1      	b.n	80197ba <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80195d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80195d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195da:	1ad3      	subs	r3, r2, r3
 80195dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80195de:	8952      	ldrh	r2, [r2, #10]
 80195e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80195e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80195e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d101      	bne.n	80195f0 <find_volume+0x328>
 80195ec:	230d      	movs	r3, #13
 80195ee:	e0e4      	b.n	80197ba <find_volume+0x4f2>
		fmt = FS_FAT32;
 80195f0:	2303      	movs	r3, #3
 80195f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80195f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195f8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80195fc:	4293      	cmp	r3, r2
 80195fe:	d802      	bhi.n	8019606 <find_volume+0x33e>
 8019600:	2302      	movs	r3, #2
 8019602:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8019606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019608:	f640 72f5 	movw	r2, #4085	; 0xff5
 801960c:	4293      	cmp	r3, r2
 801960e:	d802      	bhi.n	8019616 <find_volume+0x34e>
 8019610:	2301      	movs	r3, #1
 8019612:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8019616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019618:	1c9a      	adds	r2, r3, #2
 801961a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801961c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801961e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019620:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019622:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8019624:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019628:	441a      	add	r2, r3
 801962a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801962c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801962e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019632:	441a      	add	r2, r3
 8019634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019636:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8019638:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801963c:	2b03      	cmp	r3, #3
 801963e:	d11e      	bne.n	801967e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8019640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019642:	3338      	adds	r3, #56	; 0x38
 8019644:	332a      	adds	r3, #42	; 0x2a
 8019646:	4618      	mov	r0, r3
 8019648:	f7fd ffc0 	bl	80175cc <ld_word>
 801964c:	4603      	mov	r3, r0
 801964e:	2b00      	cmp	r3, #0
 8019650:	d001      	beq.n	8019656 <find_volume+0x38e>
 8019652:	230d      	movs	r3, #13
 8019654:	e0b1      	b.n	80197ba <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8019656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019658:	891b      	ldrh	r3, [r3, #8]
 801965a:	2b00      	cmp	r3, #0
 801965c:	d001      	beq.n	8019662 <find_volume+0x39a>
 801965e:	230d      	movs	r3, #13
 8019660:	e0ab      	b.n	80197ba <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8019662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019664:	3338      	adds	r3, #56	; 0x38
 8019666:	332c      	adds	r3, #44	; 0x2c
 8019668:	4618      	mov	r0, r3
 801966a:	f7fd ffc7 	bl	80175fc <ld_dword>
 801966e:	4602      	mov	r2, r0
 8019670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019672:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8019674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019676:	69db      	ldr	r3, [r3, #28]
 8019678:	009b      	lsls	r3, r3, #2
 801967a:	647b      	str	r3, [r7, #68]	; 0x44
 801967c:	e01f      	b.n	80196be <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801967e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019680:	891b      	ldrh	r3, [r3, #8]
 8019682:	2b00      	cmp	r3, #0
 8019684:	d101      	bne.n	801968a <find_volume+0x3c2>
 8019686:	230d      	movs	r3, #13
 8019688:	e097      	b.n	80197ba <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801968a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801968c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801968e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019690:	441a      	add	r2, r3
 8019692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019694:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8019696:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801969a:	2b02      	cmp	r3, #2
 801969c:	d103      	bne.n	80196a6 <find_volume+0x3de>
 801969e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196a0:	69db      	ldr	r3, [r3, #28]
 80196a2:	005b      	lsls	r3, r3, #1
 80196a4:	e00a      	b.n	80196bc <find_volume+0x3f4>
 80196a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196a8:	69da      	ldr	r2, [r3, #28]
 80196aa:	4613      	mov	r3, r2
 80196ac:	005b      	lsls	r3, r3, #1
 80196ae:	4413      	add	r3, r2
 80196b0:	085a      	lsrs	r2, r3, #1
 80196b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196b4:	69db      	ldr	r3, [r3, #28]
 80196b6:	f003 0301 	and.w	r3, r3, #1
 80196ba:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80196bc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80196be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196c0:	6a1a      	ldr	r2, [r3, #32]
 80196c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196c4:	899b      	ldrh	r3, [r3, #12]
 80196c6:	4619      	mov	r1, r3
 80196c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80196ca:	440b      	add	r3, r1
 80196cc:	3b01      	subs	r3, #1
 80196ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80196d0:	8989      	ldrh	r1, [r1, #12]
 80196d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80196d6:	429a      	cmp	r2, r3
 80196d8:	d201      	bcs.n	80196de <find_volume+0x416>
 80196da:	230d      	movs	r3, #13
 80196dc:	e06d      	b.n	80197ba <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80196de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196e0:	f04f 32ff 	mov.w	r2, #4294967295
 80196e4:	619a      	str	r2, [r3, #24]
 80196e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196e8:	699a      	ldr	r2, [r3, #24]
 80196ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196ec:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80196ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196f0:	2280      	movs	r2, #128	; 0x80
 80196f2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80196f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80196f8:	2b03      	cmp	r3, #3
 80196fa:	d149      	bne.n	8019790 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80196fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196fe:	3338      	adds	r3, #56	; 0x38
 8019700:	3330      	adds	r3, #48	; 0x30
 8019702:	4618      	mov	r0, r3
 8019704:	f7fd ff62 	bl	80175cc <ld_word>
 8019708:	4603      	mov	r3, r0
 801970a:	2b01      	cmp	r3, #1
 801970c:	d140      	bne.n	8019790 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801970e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019710:	3301      	adds	r3, #1
 8019712:	4619      	mov	r1, r3
 8019714:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019716:	f7fe fa09 	bl	8017b2c <move_window>
 801971a:	4603      	mov	r3, r0
 801971c:	2b00      	cmp	r3, #0
 801971e:	d137      	bne.n	8019790 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8019720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019722:	2200      	movs	r2, #0
 8019724:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019728:	3338      	adds	r3, #56	; 0x38
 801972a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801972e:	4618      	mov	r0, r3
 8019730:	f7fd ff4c 	bl	80175cc <ld_word>
 8019734:	4603      	mov	r3, r0
 8019736:	461a      	mov	r2, r3
 8019738:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801973c:	429a      	cmp	r2, r3
 801973e:	d127      	bne.n	8019790 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8019740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019742:	3338      	adds	r3, #56	; 0x38
 8019744:	4618      	mov	r0, r3
 8019746:	f7fd ff59 	bl	80175fc <ld_dword>
 801974a:	4603      	mov	r3, r0
 801974c:	4a1d      	ldr	r2, [pc, #116]	; (80197c4 <find_volume+0x4fc>)
 801974e:	4293      	cmp	r3, r2
 8019750:	d11e      	bne.n	8019790 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8019752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019754:	3338      	adds	r3, #56	; 0x38
 8019756:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801975a:	4618      	mov	r0, r3
 801975c:	f7fd ff4e 	bl	80175fc <ld_dword>
 8019760:	4603      	mov	r3, r0
 8019762:	4a19      	ldr	r2, [pc, #100]	; (80197c8 <find_volume+0x500>)
 8019764:	4293      	cmp	r3, r2
 8019766:	d113      	bne.n	8019790 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801976a:	3338      	adds	r3, #56	; 0x38
 801976c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8019770:	4618      	mov	r0, r3
 8019772:	f7fd ff43 	bl	80175fc <ld_dword>
 8019776:	4602      	mov	r2, r0
 8019778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801977a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801977e:	3338      	adds	r3, #56	; 0x38
 8019780:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8019784:	4618      	mov	r0, r3
 8019786:	f7fd ff39 	bl	80175fc <ld_dword>
 801978a:	4602      	mov	r2, r0
 801978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801978e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8019790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019792:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8019796:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8019798:	4b0c      	ldr	r3, [pc, #48]	; (80197cc <find_volume+0x504>)
 801979a:	881b      	ldrh	r3, [r3, #0]
 801979c:	3301      	adds	r3, #1
 801979e:	b29a      	uxth	r2, r3
 80197a0:	4b0a      	ldr	r3, [pc, #40]	; (80197cc <find_volume+0x504>)
 80197a2:	801a      	strh	r2, [r3, #0]
 80197a4:	4b09      	ldr	r3, [pc, #36]	; (80197cc <find_volume+0x504>)
 80197a6:	881a      	ldrh	r2, [r3, #0]
 80197a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197aa:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80197ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197ae:	4a08      	ldr	r2, [pc, #32]	; (80197d0 <find_volume+0x508>)
 80197b0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80197b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80197b4:	f7fe f952 	bl	8017a5c <clear_lock>
#endif
	return FR_OK;
 80197b8:	2300      	movs	r3, #0
}
 80197ba:	4618      	mov	r0, r3
 80197bc:	3758      	adds	r7, #88	; 0x58
 80197be:	46bd      	mov	sp, r7
 80197c0:	bd80      	pop	{r7, pc}
 80197c2:	bf00      	nop
 80197c4:	41615252 	.word	0x41615252
 80197c8:	61417272 	.word	0x61417272
 80197cc:	240016ac 	.word	0x240016ac
 80197d0:	240016d0 	.word	0x240016d0

080197d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80197d4:	b580      	push	{r7, lr}
 80197d6:	b084      	sub	sp, #16
 80197d8:	af00      	add	r7, sp, #0
 80197da:	6078      	str	r0, [r7, #4]
 80197dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80197de:	2309      	movs	r3, #9
 80197e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d01c      	beq.n	8019822 <validate+0x4e>
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d018      	beq.n	8019822 <validate+0x4e>
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	781b      	ldrb	r3, [r3, #0]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d013      	beq.n	8019822 <validate+0x4e>
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	889a      	ldrh	r2, [r3, #4]
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	88db      	ldrh	r3, [r3, #6]
 8019804:	429a      	cmp	r2, r3
 8019806:	d10c      	bne.n	8019822 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	785b      	ldrb	r3, [r3, #1]
 801980e:	4618      	mov	r0, r3
 8019810:	f7fd fe3e 	bl	8017490 <disk_status>
 8019814:	4603      	mov	r3, r0
 8019816:	f003 0301 	and.w	r3, r3, #1
 801981a:	2b00      	cmp	r3, #0
 801981c:	d101      	bne.n	8019822 <validate+0x4e>
			res = FR_OK;
 801981e:	2300      	movs	r3, #0
 8019820:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8019822:	7bfb      	ldrb	r3, [r7, #15]
 8019824:	2b00      	cmp	r3, #0
 8019826:	d102      	bne.n	801982e <validate+0x5a>
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	e000      	b.n	8019830 <validate+0x5c>
 801982e:	2300      	movs	r3, #0
 8019830:	683a      	ldr	r2, [r7, #0]
 8019832:	6013      	str	r3, [r2, #0]
	return res;
 8019834:	7bfb      	ldrb	r3, [r7, #15]
}
 8019836:	4618      	mov	r0, r3
 8019838:	3710      	adds	r7, #16
 801983a:	46bd      	mov	sp, r7
 801983c:	bd80      	pop	{r7, pc}
	...

08019840 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019840:	b580      	push	{r7, lr}
 8019842:	b088      	sub	sp, #32
 8019844:	af00      	add	r7, sp, #0
 8019846:	60f8      	str	r0, [r7, #12]
 8019848:	60b9      	str	r1, [r7, #8]
 801984a:	4613      	mov	r3, r2
 801984c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801984e:	68bb      	ldr	r3, [r7, #8]
 8019850:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8019852:	f107 0310 	add.w	r3, r7, #16
 8019856:	4618      	mov	r0, r3
 8019858:	f7ff fc9c 	bl	8019194 <get_ldnumber>
 801985c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801985e:	69fb      	ldr	r3, [r7, #28]
 8019860:	2b00      	cmp	r3, #0
 8019862:	da01      	bge.n	8019868 <f_mount+0x28>
 8019864:	230b      	movs	r3, #11
 8019866:	e02b      	b.n	80198c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8019868:	4a17      	ldr	r2, [pc, #92]	; (80198c8 <f_mount+0x88>)
 801986a:	69fb      	ldr	r3, [r7, #28]
 801986c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019870:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8019872:	69bb      	ldr	r3, [r7, #24]
 8019874:	2b00      	cmp	r3, #0
 8019876:	d005      	beq.n	8019884 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8019878:	69b8      	ldr	r0, [r7, #24]
 801987a:	f7fe f8ef 	bl	8017a5c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801987e:	69bb      	ldr	r3, [r7, #24]
 8019880:	2200      	movs	r2, #0
 8019882:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8019884:	68fb      	ldr	r3, [r7, #12]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d002      	beq.n	8019890 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	2200      	movs	r2, #0
 801988e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8019890:	68fa      	ldr	r2, [r7, #12]
 8019892:	490d      	ldr	r1, [pc, #52]	; (80198c8 <f_mount+0x88>)
 8019894:	69fb      	ldr	r3, [r7, #28]
 8019896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801989a:	68fb      	ldr	r3, [r7, #12]
 801989c:	2b00      	cmp	r3, #0
 801989e:	d002      	beq.n	80198a6 <f_mount+0x66>
 80198a0:	79fb      	ldrb	r3, [r7, #7]
 80198a2:	2b01      	cmp	r3, #1
 80198a4:	d001      	beq.n	80198aa <f_mount+0x6a>
 80198a6:	2300      	movs	r3, #0
 80198a8:	e00a      	b.n	80198c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80198aa:	f107 010c 	add.w	r1, r7, #12
 80198ae:	f107 0308 	add.w	r3, r7, #8
 80198b2:	2200      	movs	r2, #0
 80198b4:	4618      	mov	r0, r3
 80198b6:	f7ff fd07 	bl	80192c8 <find_volume>
 80198ba:	4603      	mov	r3, r0
 80198bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80198be:	7dfb      	ldrb	r3, [r7, #23]
}
 80198c0:	4618      	mov	r0, r3
 80198c2:	3720      	adds	r7, #32
 80198c4:	46bd      	mov	sp, r7
 80198c6:	bd80      	pop	{r7, pc}
 80198c8:	240016a8 	.word	0x240016a8

080198cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80198cc:	b580      	push	{r7, lr}
 80198ce:	b09a      	sub	sp, #104	; 0x68
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	60f8      	str	r0, [r7, #12]
 80198d4:	60b9      	str	r1, [r7, #8]
 80198d6:	4613      	mov	r3, r2
 80198d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d101      	bne.n	80198e4 <f_open+0x18>
 80198e0:	2309      	movs	r3, #9
 80198e2:	e1bb      	b.n	8019c5c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80198e4:	79fb      	ldrb	r3, [r7, #7]
 80198e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80198ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80198ec:	79fa      	ldrb	r2, [r7, #7]
 80198ee:	f107 0114 	add.w	r1, r7, #20
 80198f2:	f107 0308 	add.w	r3, r7, #8
 80198f6:	4618      	mov	r0, r3
 80198f8:	f7ff fce6 	bl	80192c8 <find_volume>
 80198fc:	4603      	mov	r3, r0
 80198fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8019902:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019906:	2b00      	cmp	r3, #0
 8019908:	f040 819f 	bne.w	8019c4a <f_open+0x37e>
		dj.obj.fs = fs;
 801990c:	697b      	ldr	r3, [r7, #20]
 801990e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019910:	68ba      	ldr	r2, [r7, #8]
 8019912:	f107 0318 	add.w	r3, r7, #24
 8019916:	4611      	mov	r1, r2
 8019918:	4618      	mov	r0, r3
 801991a:	f7ff fbc5 	bl	80190a8 <follow_path>
 801991e:	4603      	mov	r3, r0
 8019920:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019924:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019928:	2b00      	cmp	r3, #0
 801992a:	d11a      	bne.n	8019962 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801992c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019930:	b25b      	sxtb	r3, r3
 8019932:	2b00      	cmp	r3, #0
 8019934:	da03      	bge.n	801993e <f_open+0x72>
				res = FR_INVALID_NAME;
 8019936:	2306      	movs	r3, #6
 8019938:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801993c:	e011      	b.n	8019962 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801993e:	79fb      	ldrb	r3, [r7, #7]
 8019940:	f023 0301 	bic.w	r3, r3, #1
 8019944:	2b00      	cmp	r3, #0
 8019946:	bf14      	ite	ne
 8019948:	2301      	movne	r3, #1
 801994a:	2300      	moveq	r3, #0
 801994c:	b2db      	uxtb	r3, r3
 801994e:	461a      	mov	r2, r3
 8019950:	f107 0318 	add.w	r3, r7, #24
 8019954:	4611      	mov	r1, r2
 8019956:	4618      	mov	r0, r3
 8019958:	f7fd ff38 	bl	80177cc <chk_lock>
 801995c:	4603      	mov	r3, r0
 801995e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019962:	79fb      	ldrb	r3, [r7, #7]
 8019964:	f003 031c 	and.w	r3, r3, #28
 8019968:	2b00      	cmp	r3, #0
 801996a:	d07f      	beq.n	8019a6c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801996c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019970:	2b00      	cmp	r3, #0
 8019972:	d017      	beq.n	80199a4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8019974:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019978:	2b04      	cmp	r3, #4
 801997a:	d10e      	bne.n	801999a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801997c:	f7fd ff82 	bl	8017884 <enq_lock>
 8019980:	4603      	mov	r3, r0
 8019982:	2b00      	cmp	r3, #0
 8019984:	d006      	beq.n	8019994 <f_open+0xc8>
 8019986:	f107 0318 	add.w	r3, r7, #24
 801998a:	4618      	mov	r0, r3
 801998c:	f7ff f8dc 	bl	8018b48 <dir_register>
 8019990:	4603      	mov	r3, r0
 8019992:	e000      	b.n	8019996 <f_open+0xca>
 8019994:	2312      	movs	r3, #18
 8019996:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801999a:	79fb      	ldrb	r3, [r7, #7]
 801999c:	f043 0308 	orr.w	r3, r3, #8
 80199a0:	71fb      	strb	r3, [r7, #7]
 80199a2:	e010      	b.n	80199c6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80199a4:	7fbb      	ldrb	r3, [r7, #30]
 80199a6:	f003 0311 	and.w	r3, r3, #17
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d003      	beq.n	80199b6 <f_open+0xea>
					res = FR_DENIED;
 80199ae:	2307      	movs	r3, #7
 80199b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80199b4:	e007      	b.n	80199c6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80199b6:	79fb      	ldrb	r3, [r7, #7]
 80199b8:	f003 0304 	and.w	r3, r3, #4
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d002      	beq.n	80199c6 <f_open+0xfa>
 80199c0:	2308      	movs	r3, #8
 80199c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80199c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d168      	bne.n	8019aa0 <f_open+0x1d4>
 80199ce:	79fb      	ldrb	r3, [r7, #7]
 80199d0:	f003 0308 	and.w	r3, r3, #8
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d063      	beq.n	8019aa0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80199d8:	f7fb fb70 	bl	80150bc <get_fattime>
 80199dc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80199de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199e0:	330e      	adds	r3, #14
 80199e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80199e4:	4618      	mov	r0, r3
 80199e6:	f7fd fe47 	bl	8017678 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80199ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199ec:	3316      	adds	r3, #22
 80199ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80199f0:	4618      	mov	r0, r3
 80199f2:	f7fd fe41 	bl	8017678 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80199f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199f8:	330b      	adds	r3, #11
 80199fa:	2220      	movs	r2, #32
 80199fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80199fe:	697b      	ldr	r3, [r7, #20]
 8019a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a02:	4611      	mov	r1, r2
 8019a04:	4618      	mov	r0, r3
 8019a06:	f7fe fe17 	bl	8018638 <ld_clust>
 8019a0a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8019a0c:	697b      	ldr	r3, [r7, #20]
 8019a0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019a10:	2200      	movs	r2, #0
 8019a12:	4618      	mov	r0, r3
 8019a14:	f7fe fe2f 	bl	8018676 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a1a:	331c      	adds	r3, #28
 8019a1c:	2100      	movs	r1, #0
 8019a1e:	4618      	mov	r0, r3
 8019a20:	f7fd fe2a 	bl	8017678 <st_dword>
					fs->wflag = 1;
 8019a24:	697b      	ldr	r3, [r7, #20]
 8019a26:	2201      	movs	r2, #1
 8019a28:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8019a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d037      	beq.n	8019aa0 <f_open+0x1d4>
						dw = fs->winsect;
 8019a30:	697b      	ldr	r3, [r7, #20]
 8019a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a34:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8019a36:	f107 0318 	add.w	r3, r7, #24
 8019a3a:	2200      	movs	r2, #0
 8019a3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8019a3e:	4618      	mov	r0, r3
 8019a40:	f7fe fb1f 	bl	8018082 <remove_chain>
 8019a44:	4603      	mov	r3, r0
 8019a46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8019a4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d126      	bne.n	8019aa0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8019a52:	697b      	ldr	r3, [r7, #20]
 8019a54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019a56:	4618      	mov	r0, r3
 8019a58:	f7fe f868 	bl	8017b2c <move_window>
 8019a5c:	4603      	mov	r3, r0
 8019a5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019a62:	697b      	ldr	r3, [r7, #20]
 8019a64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019a66:	3a01      	subs	r2, #1
 8019a68:	615a      	str	r2, [r3, #20]
 8019a6a:	e019      	b.n	8019aa0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8019a6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	d115      	bne.n	8019aa0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8019a74:	7fbb      	ldrb	r3, [r7, #30]
 8019a76:	f003 0310 	and.w	r3, r3, #16
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d003      	beq.n	8019a86 <f_open+0x1ba>
					res = FR_NO_FILE;
 8019a7e:	2304      	movs	r3, #4
 8019a80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019a84:	e00c      	b.n	8019aa0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8019a86:	79fb      	ldrb	r3, [r7, #7]
 8019a88:	f003 0302 	and.w	r3, r3, #2
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d007      	beq.n	8019aa0 <f_open+0x1d4>
 8019a90:	7fbb      	ldrb	r3, [r7, #30]
 8019a92:	f003 0301 	and.w	r3, r3, #1
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d002      	beq.n	8019aa0 <f_open+0x1d4>
						res = FR_DENIED;
 8019a9a:	2307      	movs	r3, #7
 8019a9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8019aa0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d128      	bne.n	8019afa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8019aa8:	79fb      	ldrb	r3, [r7, #7]
 8019aaa:	f003 0308 	and.w	r3, r3, #8
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d003      	beq.n	8019aba <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8019ab2:	79fb      	ldrb	r3, [r7, #7]
 8019ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ab8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8019aba:	697b      	ldr	r3, [r7, #20]
 8019abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019abe:	68fb      	ldr	r3, [r7, #12]
 8019ac0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8019ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019ac8:	79fb      	ldrb	r3, [r7, #7]
 8019aca:	f023 0301 	bic.w	r3, r3, #1
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	bf14      	ite	ne
 8019ad2:	2301      	movne	r3, #1
 8019ad4:	2300      	moveq	r3, #0
 8019ad6:	b2db      	uxtb	r3, r3
 8019ad8:	461a      	mov	r2, r3
 8019ada:	f107 0318 	add.w	r3, r7, #24
 8019ade:	4611      	mov	r1, r2
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	f7fd fef1 	bl	80178c8 <inc_lock>
 8019ae6:	4602      	mov	r2, r0
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	691b      	ldr	r3, [r3, #16]
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d102      	bne.n	8019afa <f_open+0x22e>
 8019af4:	2302      	movs	r3, #2
 8019af6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8019afa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	f040 80a3 	bne.w	8019c4a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8019b04:	697b      	ldr	r3, [r7, #20]
 8019b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019b08:	4611      	mov	r1, r2
 8019b0a:	4618      	mov	r0, r3
 8019b0c:	f7fe fd94 	bl	8018638 <ld_clust>
 8019b10:	4602      	mov	r2, r0
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b18:	331c      	adds	r3, #28
 8019b1a:	4618      	mov	r0, r3
 8019b1c:	f7fd fd6e 	bl	80175fc <ld_dword>
 8019b20:	4602      	mov	r2, r0
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	2200      	movs	r2, #0
 8019b2a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8019b2c:	697a      	ldr	r2, [r7, #20]
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019b32:	697b      	ldr	r3, [r7, #20]
 8019b34:	88da      	ldrh	r2, [r3, #6]
 8019b36:	68fb      	ldr	r3, [r7, #12]
 8019b38:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	79fa      	ldrb	r2, [r7, #7]
 8019b3e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019b40:	68fb      	ldr	r3, [r7, #12]
 8019b42:	2200      	movs	r2, #0
 8019b44:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	2200      	movs	r2, #0
 8019b4a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	2200      	movs	r2, #0
 8019b50:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	3330      	adds	r3, #48	; 0x30
 8019b56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019b5a:	2100      	movs	r1, #0
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	f7fd fdd8 	bl	8017712 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019b62:	79fb      	ldrb	r3, [r7, #7]
 8019b64:	f003 0320 	and.w	r3, r3, #32
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d06e      	beq.n	8019c4a <f_open+0x37e>
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	68db      	ldr	r3, [r3, #12]
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d06a      	beq.n	8019c4a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	68da      	ldr	r2, [r3, #12]
 8019b78:	68fb      	ldr	r3, [r7, #12]
 8019b7a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8019b7c:	697b      	ldr	r3, [r7, #20]
 8019b7e:	895b      	ldrh	r3, [r3, #10]
 8019b80:	461a      	mov	r2, r3
 8019b82:	697b      	ldr	r3, [r7, #20]
 8019b84:	899b      	ldrh	r3, [r3, #12]
 8019b86:	fb02 f303 	mul.w	r3, r2, r3
 8019b8a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	689b      	ldr	r3, [r3, #8]
 8019b90:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	68db      	ldr	r3, [r3, #12]
 8019b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019b98:	e016      	b.n	8019bc8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8019b9a:	68fb      	ldr	r3, [r7, #12]
 8019b9c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019b9e:	4618      	mov	r0, r3
 8019ba0:	f7fe f881 	bl	8017ca6 <get_fat>
 8019ba4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8019ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019ba8:	2b01      	cmp	r3, #1
 8019baa:	d802      	bhi.n	8019bb2 <f_open+0x2e6>
 8019bac:	2302      	movs	r3, #2
 8019bae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8019bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bb8:	d102      	bne.n	8019bc0 <f_open+0x2f4>
 8019bba:	2301      	movs	r3, #1
 8019bbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019bc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019bc4:	1ad3      	subs	r3, r2, r3
 8019bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019bc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d103      	bne.n	8019bd8 <f_open+0x30c>
 8019bd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019bd4:	429a      	cmp	r2, r3
 8019bd6:	d8e0      	bhi.n	8019b9a <f_open+0x2ce>
				}
				fp->clust = clst;
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019bdc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8019bde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d131      	bne.n	8019c4a <f_open+0x37e>
 8019be6:	697b      	ldr	r3, [r7, #20]
 8019be8:	899b      	ldrh	r3, [r3, #12]
 8019bea:	461a      	mov	r2, r3
 8019bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019bee:	fbb3 f1f2 	udiv	r1, r3, r2
 8019bf2:	fb01 f202 	mul.w	r2, r1, r2
 8019bf6:	1a9b      	subs	r3, r3, r2
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d026      	beq.n	8019c4a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8019bfc:	697b      	ldr	r3, [r7, #20]
 8019bfe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019c00:	4618      	mov	r0, r3
 8019c02:	f7fe f831 	bl	8017c68 <clust2sect>
 8019c06:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d103      	bne.n	8019c16 <f_open+0x34a>
						res = FR_INT_ERR;
 8019c0e:	2302      	movs	r3, #2
 8019c10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019c14:	e019      	b.n	8019c4a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8019c16:	697b      	ldr	r3, [r7, #20]
 8019c18:	899b      	ldrh	r3, [r3, #12]
 8019c1a:	461a      	mov	r2, r3
 8019c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8019c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019c24:	441a      	add	r2, r3
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8019c2a:	697b      	ldr	r3, [r7, #20]
 8019c2c:	7858      	ldrb	r0, [r3, #1]
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	6a1a      	ldr	r2, [r3, #32]
 8019c38:	2301      	movs	r3, #1
 8019c3a:	f7fd fc69 	bl	8017510 <disk_read>
 8019c3e:	4603      	mov	r3, r0
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	d002      	beq.n	8019c4a <f_open+0x37e>
 8019c44:	2301      	movs	r3, #1
 8019c46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8019c4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d002      	beq.n	8019c58 <f_open+0x38c>
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	2200      	movs	r2, #0
 8019c56:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019c58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8019c5c:	4618      	mov	r0, r3
 8019c5e:	3768      	adds	r7, #104	; 0x68
 8019c60:	46bd      	mov	sp, r7
 8019c62:	bd80      	pop	{r7, pc}

08019c64 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019c64:	b580      	push	{r7, lr}
 8019c66:	b08c      	sub	sp, #48	; 0x30
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	60f8      	str	r0, [r7, #12]
 8019c6c:	60b9      	str	r1, [r7, #8]
 8019c6e:	607a      	str	r2, [r7, #4]
 8019c70:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8019c72:	68bb      	ldr	r3, [r7, #8]
 8019c74:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8019c76:	683b      	ldr	r3, [r7, #0]
 8019c78:	2200      	movs	r2, #0
 8019c7a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	f107 0210 	add.w	r2, r7, #16
 8019c82:	4611      	mov	r1, r2
 8019c84:	4618      	mov	r0, r3
 8019c86:	f7ff fda5 	bl	80197d4 <validate>
 8019c8a:	4603      	mov	r3, r0
 8019c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8019c90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d107      	bne.n	8019ca8 <f_write+0x44>
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	7d5b      	ldrb	r3, [r3, #21]
 8019c9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019ca0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d002      	beq.n	8019cae <f_write+0x4a>
 8019ca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019cac:	e16a      	b.n	8019f84 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	7d1b      	ldrb	r3, [r3, #20]
 8019cb2:	f003 0302 	and.w	r3, r3, #2
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d101      	bne.n	8019cbe <f_write+0x5a>
 8019cba:	2307      	movs	r3, #7
 8019cbc:	e162      	b.n	8019f84 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	699a      	ldr	r2, [r3, #24]
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	441a      	add	r2, r3
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	699b      	ldr	r3, [r3, #24]
 8019cca:	429a      	cmp	r2, r3
 8019ccc:	f080 814c 	bcs.w	8019f68 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	699b      	ldr	r3, [r3, #24]
 8019cd4:	43db      	mvns	r3, r3
 8019cd6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8019cd8:	e146      	b.n	8019f68 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	699b      	ldr	r3, [r3, #24]
 8019cde:	693a      	ldr	r2, [r7, #16]
 8019ce0:	8992      	ldrh	r2, [r2, #12]
 8019ce2:	fbb3 f1f2 	udiv	r1, r3, r2
 8019ce6:	fb01 f202 	mul.w	r2, r1, r2
 8019cea:	1a9b      	subs	r3, r3, r2
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	f040 80f1 	bne.w	8019ed4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	699b      	ldr	r3, [r3, #24]
 8019cf6:	693a      	ldr	r2, [r7, #16]
 8019cf8:	8992      	ldrh	r2, [r2, #12]
 8019cfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8019cfe:	693a      	ldr	r2, [r7, #16]
 8019d00:	8952      	ldrh	r2, [r2, #10]
 8019d02:	3a01      	subs	r2, #1
 8019d04:	4013      	ands	r3, r2
 8019d06:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8019d08:	69bb      	ldr	r3, [r7, #24]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d143      	bne.n	8019d96 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	699b      	ldr	r3, [r3, #24]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d10c      	bne.n	8019d30 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	689b      	ldr	r3, [r3, #8]
 8019d1a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8019d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d11a      	bne.n	8019d58 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	2100      	movs	r1, #0
 8019d26:	4618      	mov	r0, r3
 8019d28:	f7fe fa10 	bl	801814c <create_chain>
 8019d2c:	62b8      	str	r0, [r7, #40]	; 0x28
 8019d2e:	e013      	b.n	8019d58 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d007      	beq.n	8019d48 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8019d38:	68fb      	ldr	r3, [r7, #12]
 8019d3a:	699b      	ldr	r3, [r3, #24]
 8019d3c:	4619      	mov	r1, r3
 8019d3e:	68f8      	ldr	r0, [r7, #12]
 8019d40:	f7fe fa9c 	bl	801827c <clmt_clust>
 8019d44:	62b8      	str	r0, [r7, #40]	; 0x28
 8019d46:	e007      	b.n	8019d58 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8019d48:	68fa      	ldr	r2, [r7, #12]
 8019d4a:	68fb      	ldr	r3, [r7, #12]
 8019d4c:	69db      	ldr	r3, [r3, #28]
 8019d4e:	4619      	mov	r1, r3
 8019d50:	4610      	mov	r0, r2
 8019d52:	f7fe f9fb 	bl	801814c <create_chain>
 8019d56:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	f000 8109 	beq.w	8019f72 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8019d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d62:	2b01      	cmp	r3, #1
 8019d64:	d104      	bne.n	8019d70 <f_write+0x10c>
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	2202      	movs	r2, #2
 8019d6a:	755a      	strb	r2, [r3, #21]
 8019d6c:	2302      	movs	r3, #2
 8019d6e:	e109      	b.n	8019f84 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8019d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d76:	d104      	bne.n	8019d82 <f_write+0x11e>
 8019d78:	68fb      	ldr	r3, [r7, #12]
 8019d7a:	2201      	movs	r2, #1
 8019d7c:	755a      	strb	r2, [r3, #21]
 8019d7e:	2301      	movs	r3, #1
 8019d80:	e100      	b.n	8019f84 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d86:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019d88:	68fb      	ldr	r3, [r7, #12]
 8019d8a:	689b      	ldr	r3, [r3, #8]
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d102      	bne.n	8019d96 <f_write+0x132>
 8019d90:	68fb      	ldr	r3, [r7, #12]
 8019d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d94:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	7d1b      	ldrb	r3, [r3, #20]
 8019d9a:	b25b      	sxtb	r3, r3
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	da18      	bge.n	8019dd2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019da0:	693b      	ldr	r3, [r7, #16]
 8019da2:	7858      	ldrb	r0, [r3, #1]
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019daa:	68fb      	ldr	r3, [r7, #12]
 8019dac:	6a1a      	ldr	r2, [r3, #32]
 8019dae:	2301      	movs	r3, #1
 8019db0:	f7fd fbce 	bl	8017550 <disk_write>
 8019db4:	4603      	mov	r3, r0
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d004      	beq.n	8019dc4 <f_write+0x160>
 8019dba:	68fb      	ldr	r3, [r7, #12]
 8019dbc:	2201      	movs	r2, #1
 8019dbe:	755a      	strb	r2, [r3, #21]
 8019dc0:	2301      	movs	r3, #1
 8019dc2:	e0df      	b.n	8019f84 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	7d1b      	ldrb	r3, [r3, #20]
 8019dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019dcc:	b2da      	uxtb	r2, r3
 8019dce:	68fb      	ldr	r3, [r7, #12]
 8019dd0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019dd2:	693a      	ldr	r2, [r7, #16]
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	69db      	ldr	r3, [r3, #28]
 8019dd8:	4619      	mov	r1, r3
 8019dda:	4610      	mov	r0, r2
 8019ddc:	f7fd ff44 	bl	8017c68 <clust2sect>
 8019de0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8019de2:	697b      	ldr	r3, [r7, #20]
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d104      	bne.n	8019df2 <f_write+0x18e>
 8019de8:	68fb      	ldr	r3, [r7, #12]
 8019dea:	2202      	movs	r2, #2
 8019dec:	755a      	strb	r2, [r3, #21]
 8019dee:	2302      	movs	r3, #2
 8019df0:	e0c8      	b.n	8019f84 <f_write+0x320>
			sect += csect;
 8019df2:	697a      	ldr	r2, [r7, #20]
 8019df4:	69bb      	ldr	r3, [r7, #24]
 8019df6:	4413      	add	r3, r2
 8019df8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8019dfa:	693b      	ldr	r3, [r7, #16]
 8019dfc:	899b      	ldrh	r3, [r3, #12]
 8019dfe:	461a      	mov	r2, r3
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8019e06:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8019e08:	6a3b      	ldr	r3, [r7, #32]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d043      	beq.n	8019e96 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8019e0e:	69ba      	ldr	r2, [r7, #24]
 8019e10:	6a3b      	ldr	r3, [r7, #32]
 8019e12:	4413      	add	r3, r2
 8019e14:	693a      	ldr	r2, [r7, #16]
 8019e16:	8952      	ldrh	r2, [r2, #10]
 8019e18:	4293      	cmp	r3, r2
 8019e1a:	d905      	bls.n	8019e28 <f_write+0x1c4>
					cc = fs->csize - csect;
 8019e1c:	693b      	ldr	r3, [r7, #16]
 8019e1e:	895b      	ldrh	r3, [r3, #10]
 8019e20:	461a      	mov	r2, r3
 8019e22:	69bb      	ldr	r3, [r7, #24]
 8019e24:	1ad3      	subs	r3, r2, r3
 8019e26:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019e28:	693b      	ldr	r3, [r7, #16]
 8019e2a:	7858      	ldrb	r0, [r3, #1]
 8019e2c:	6a3b      	ldr	r3, [r7, #32]
 8019e2e:	697a      	ldr	r2, [r7, #20]
 8019e30:	69f9      	ldr	r1, [r7, #28]
 8019e32:	f7fd fb8d 	bl	8017550 <disk_write>
 8019e36:	4603      	mov	r3, r0
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d004      	beq.n	8019e46 <f_write+0x1e2>
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	2201      	movs	r2, #1
 8019e40:	755a      	strb	r2, [r3, #21]
 8019e42:	2301      	movs	r3, #1
 8019e44:	e09e      	b.n	8019f84 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	6a1a      	ldr	r2, [r3, #32]
 8019e4a:	697b      	ldr	r3, [r7, #20]
 8019e4c:	1ad3      	subs	r3, r2, r3
 8019e4e:	6a3a      	ldr	r2, [r7, #32]
 8019e50:	429a      	cmp	r2, r3
 8019e52:	d918      	bls.n	8019e86 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8019e54:	68fb      	ldr	r3, [r7, #12]
 8019e56:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	6a1a      	ldr	r2, [r3, #32]
 8019e5e:	697b      	ldr	r3, [r7, #20]
 8019e60:	1ad3      	subs	r3, r2, r3
 8019e62:	693a      	ldr	r2, [r7, #16]
 8019e64:	8992      	ldrh	r2, [r2, #12]
 8019e66:	fb02 f303 	mul.w	r3, r2, r3
 8019e6a:	69fa      	ldr	r2, [r7, #28]
 8019e6c:	18d1      	adds	r1, r2, r3
 8019e6e:	693b      	ldr	r3, [r7, #16]
 8019e70:	899b      	ldrh	r3, [r3, #12]
 8019e72:	461a      	mov	r2, r3
 8019e74:	f7fd fc2c 	bl	80176d0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	7d1b      	ldrb	r3, [r3, #20]
 8019e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019e80:	b2da      	uxtb	r2, r3
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019e86:	693b      	ldr	r3, [r7, #16]
 8019e88:	899b      	ldrh	r3, [r3, #12]
 8019e8a:	461a      	mov	r2, r3
 8019e8c:	6a3b      	ldr	r3, [r7, #32]
 8019e8e:	fb02 f303 	mul.w	r3, r2, r3
 8019e92:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8019e94:	e04b      	b.n	8019f2e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	6a1b      	ldr	r3, [r3, #32]
 8019e9a:	697a      	ldr	r2, [r7, #20]
 8019e9c:	429a      	cmp	r2, r3
 8019e9e:	d016      	beq.n	8019ece <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	699a      	ldr	r2, [r3, #24]
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019ea8:	429a      	cmp	r2, r3
 8019eaa:	d210      	bcs.n	8019ece <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8019eac:	693b      	ldr	r3, [r7, #16]
 8019eae:	7858      	ldrb	r0, [r3, #1]
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019eb6:	2301      	movs	r3, #1
 8019eb8:	697a      	ldr	r2, [r7, #20]
 8019eba:	f7fd fb29 	bl	8017510 <disk_read>
 8019ebe:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d004      	beq.n	8019ece <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8019ec4:	68fb      	ldr	r3, [r7, #12]
 8019ec6:	2201      	movs	r2, #1
 8019ec8:	755a      	strb	r2, [r3, #21]
 8019eca:	2301      	movs	r3, #1
 8019ecc:	e05a      	b.n	8019f84 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	697a      	ldr	r2, [r7, #20]
 8019ed2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019ed4:	693b      	ldr	r3, [r7, #16]
 8019ed6:	899b      	ldrh	r3, [r3, #12]
 8019ed8:	4618      	mov	r0, r3
 8019eda:	68fb      	ldr	r3, [r7, #12]
 8019edc:	699b      	ldr	r3, [r3, #24]
 8019ede:	693a      	ldr	r2, [r7, #16]
 8019ee0:	8992      	ldrh	r2, [r2, #12]
 8019ee2:	fbb3 f1f2 	udiv	r1, r3, r2
 8019ee6:	fb01 f202 	mul.w	r2, r1, r2
 8019eea:	1a9b      	subs	r3, r3, r2
 8019eec:	1ac3      	subs	r3, r0, r3
 8019eee:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	429a      	cmp	r2, r3
 8019ef6:	d901      	bls.n	8019efc <f_write+0x298>
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019efc:	68fb      	ldr	r3, [r7, #12]
 8019efe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019f02:	68fb      	ldr	r3, [r7, #12]
 8019f04:	699b      	ldr	r3, [r3, #24]
 8019f06:	693a      	ldr	r2, [r7, #16]
 8019f08:	8992      	ldrh	r2, [r2, #12]
 8019f0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8019f0e:	fb00 f202 	mul.w	r2, r0, r2
 8019f12:	1a9b      	subs	r3, r3, r2
 8019f14:	440b      	add	r3, r1
 8019f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f18:	69f9      	ldr	r1, [r7, #28]
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	f7fd fbd8 	bl	80176d0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	7d1b      	ldrb	r3, [r3, #20]
 8019f24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019f28:	b2da      	uxtb	r2, r3
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8019f2e:	69fa      	ldr	r2, [r7, #28]
 8019f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f32:	4413      	add	r3, r2
 8019f34:	61fb      	str	r3, [r7, #28]
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	699a      	ldr	r2, [r3, #24]
 8019f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f3c:	441a      	add	r2, r3
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	619a      	str	r2, [r3, #24]
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	68da      	ldr	r2, [r3, #12]
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	699b      	ldr	r3, [r3, #24]
 8019f4a:	429a      	cmp	r2, r3
 8019f4c:	bf38      	it	cc
 8019f4e:	461a      	movcc	r2, r3
 8019f50:	68fb      	ldr	r3, [r7, #12]
 8019f52:	60da      	str	r2, [r3, #12]
 8019f54:	683b      	ldr	r3, [r7, #0]
 8019f56:	681a      	ldr	r2, [r3, #0]
 8019f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f5a:	441a      	add	r2, r3
 8019f5c:	683b      	ldr	r3, [r7, #0]
 8019f5e:	601a      	str	r2, [r3, #0]
 8019f60:	687a      	ldr	r2, [r7, #4]
 8019f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f64:	1ad3      	subs	r3, r2, r3
 8019f66:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	f47f aeb5 	bne.w	8019cda <f_write+0x76>
 8019f70:	e000      	b.n	8019f74 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019f72:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	7d1b      	ldrb	r3, [r3, #20]
 8019f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f7c:	b2da      	uxtb	r2, r3
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8019f82:	2300      	movs	r3, #0
}
 8019f84:	4618      	mov	r0, r3
 8019f86:	3730      	adds	r7, #48	; 0x30
 8019f88:	46bd      	mov	sp, r7
 8019f8a:	bd80      	pop	{r7, pc}

08019f8c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8019f8c:	b580      	push	{r7, lr}
 8019f8e:	b086      	sub	sp, #24
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	f107 0208 	add.w	r2, r7, #8
 8019f9a:	4611      	mov	r1, r2
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	f7ff fc19 	bl	80197d4 <validate>
 8019fa2:	4603      	mov	r3, r0
 8019fa4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019fa6:	7dfb      	ldrb	r3, [r7, #23]
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d168      	bne.n	801a07e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	7d1b      	ldrb	r3, [r3, #20]
 8019fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d062      	beq.n	801a07e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	7d1b      	ldrb	r3, [r3, #20]
 8019fbc:	b25b      	sxtb	r3, r3
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	da15      	bge.n	8019fee <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8019fc2:	68bb      	ldr	r3, [r7, #8]
 8019fc4:	7858      	ldrb	r0, [r3, #1]
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	6a1a      	ldr	r2, [r3, #32]
 8019fd0:	2301      	movs	r3, #1
 8019fd2:	f7fd fabd 	bl	8017550 <disk_write>
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d001      	beq.n	8019fe0 <f_sync+0x54>
 8019fdc:	2301      	movs	r3, #1
 8019fde:	e04f      	b.n	801a080 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	7d1b      	ldrb	r3, [r3, #20]
 8019fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019fe8:	b2da      	uxtb	r2, r3
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8019fee:	f7fb f865 	bl	80150bc <get_fattime>
 8019ff2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8019ff4:	68ba      	ldr	r2, [r7, #8]
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ffa:	4619      	mov	r1, r3
 8019ffc:	4610      	mov	r0, r2
 8019ffe:	f7fd fd95 	bl	8017b2c <move_window>
 801a002:	4603      	mov	r3, r0
 801a004:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801a006:	7dfb      	ldrb	r3, [r7, #23]
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d138      	bne.n	801a07e <f_sync+0xf2>
					dir = fp->dir_ptr;
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a010:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	330b      	adds	r3, #11
 801a016:	781a      	ldrb	r2, [r3, #0]
 801a018:	68fb      	ldr	r3, [r7, #12]
 801a01a:	330b      	adds	r3, #11
 801a01c:	f042 0220 	orr.w	r2, r2, #32
 801a020:	b2d2      	uxtb	r2, r2
 801a022:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	6818      	ldr	r0, [r3, #0]
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	689b      	ldr	r3, [r3, #8]
 801a02c:	461a      	mov	r2, r3
 801a02e:	68f9      	ldr	r1, [r7, #12]
 801a030:	f7fe fb21 	bl	8018676 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801a034:	68fb      	ldr	r3, [r7, #12]
 801a036:	f103 021c 	add.w	r2, r3, #28
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	68db      	ldr	r3, [r3, #12]
 801a03e:	4619      	mov	r1, r3
 801a040:	4610      	mov	r0, r2
 801a042:	f7fd fb19 	bl	8017678 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801a046:	68fb      	ldr	r3, [r7, #12]
 801a048:	3316      	adds	r3, #22
 801a04a:	6939      	ldr	r1, [r7, #16]
 801a04c:	4618      	mov	r0, r3
 801a04e:	f7fd fb13 	bl	8017678 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801a052:	68fb      	ldr	r3, [r7, #12]
 801a054:	3312      	adds	r3, #18
 801a056:	2100      	movs	r1, #0
 801a058:	4618      	mov	r0, r3
 801a05a:	f7fd faf2 	bl	8017642 <st_word>
					fs->wflag = 1;
 801a05e:	68bb      	ldr	r3, [r7, #8]
 801a060:	2201      	movs	r2, #1
 801a062:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801a064:	68bb      	ldr	r3, [r7, #8]
 801a066:	4618      	mov	r0, r3
 801a068:	f7fd fd8e 	bl	8017b88 <sync_fs>
 801a06c:	4603      	mov	r3, r0
 801a06e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	7d1b      	ldrb	r3, [r3, #20]
 801a074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a078:	b2da      	uxtb	r2, r3
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801a07e:	7dfb      	ldrb	r3, [r7, #23]
}
 801a080:	4618      	mov	r0, r3
 801a082:	3718      	adds	r7, #24
 801a084:	46bd      	mov	sp, r7
 801a086:	bd80      	pop	{r7, pc}

0801a088 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801a088:	b580      	push	{r7, lr}
 801a08a:	b084      	sub	sp, #16
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801a090:	6878      	ldr	r0, [r7, #4]
 801a092:	f7ff ff7b 	bl	8019f8c <f_sync>
 801a096:	4603      	mov	r3, r0
 801a098:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801a09a:	7bfb      	ldrb	r3, [r7, #15]
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d118      	bne.n	801a0d2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	f107 0208 	add.w	r2, r7, #8
 801a0a6:	4611      	mov	r1, r2
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	f7ff fb93 	bl	80197d4 <validate>
 801a0ae:	4603      	mov	r3, r0
 801a0b0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801a0b2:	7bfb      	ldrb	r3, [r7, #15]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d10c      	bne.n	801a0d2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	691b      	ldr	r3, [r3, #16]
 801a0bc:	4618      	mov	r0, r3
 801a0be:	f7fd fc91 	bl	80179e4 <dec_lock>
 801a0c2:	4603      	mov	r3, r0
 801a0c4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801a0c6:	7bfb      	ldrb	r3, [r7, #15]
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d102      	bne.n	801a0d2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	2200      	movs	r2, #0
 801a0d0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801a0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a0d4:	4618      	mov	r0, r3
 801a0d6:	3710      	adds	r7, #16
 801a0d8:	46bd      	mov	sp, r7
 801a0da:	bd80      	pop	{r7, pc}

0801a0dc <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801a0dc:	b580      	push	{r7, lr}
 801a0de:	b084      	sub	sp, #16
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	6078      	str	r0, [r7, #4]
 801a0e4:	460b      	mov	r3, r1
 801a0e6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801a0e8:	78fb      	ldrb	r3, [r7, #3]
 801a0ea:	2b0a      	cmp	r3, #10
 801a0ec:	d103      	bne.n	801a0f6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801a0ee:	210d      	movs	r1, #13
 801a0f0:	6878      	ldr	r0, [r7, #4]
 801a0f2:	f7ff fff3 	bl	801a0dc <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	685b      	ldr	r3, [r3, #4]
 801a0fa:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	db25      	blt.n	801a14e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801a102:	68fb      	ldr	r3, [r7, #12]
 801a104:	1c5a      	adds	r2, r3, #1
 801a106:	60fa      	str	r2, [r7, #12]
 801a108:	687a      	ldr	r2, [r7, #4]
 801a10a:	4413      	add	r3, r2
 801a10c:	78fa      	ldrb	r2, [r7, #3]
 801a10e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801a110:	68fb      	ldr	r3, [r7, #12]
 801a112:	2b3c      	cmp	r3, #60	; 0x3c
 801a114:	dd12      	ble.n	801a13c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	6818      	ldr	r0, [r3, #0]
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	f103 010c 	add.w	r1, r3, #12
 801a120:	68fa      	ldr	r2, [r7, #12]
 801a122:	f107 0308 	add.w	r3, r7, #8
 801a126:	f7ff fd9d 	bl	8019c64 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801a12a:	68ba      	ldr	r2, [r7, #8]
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	429a      	cmp	r2, r3
 801a130:	d101      	bne.n	801a136 <putc_bfd+0x5a>
 801a132:	2300      	movs	r3, #0
 801a134:	e001      	b.n	801a13a <putc_bfd+0x5e>
 801a136:	f04f 33ff 	mov.w	r3, #4294967295
 801a13a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	68fa      	ldr	r2, [r7, #12]
 801a140:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	689b      	ldr	r3, [r3, #8]
 801a146:	1c5a      	adds	r2, r3, #1
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	609a      	str	r2, [r3, #8]
 801a14c:	e000      	b.n	801a150 <putc_bfd+0x74>
	if (i < 0) return;
 801a14e:	bf00      	nop
}
 801a150:	3710      	adds	r7, #16
 801a152:	46bd      	mov	sp, r7
 801a154:	bd80      	pop	{r7, pc}

0801a156 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801a156:	b580      	push	{r7, lr}
 801a158:	b084      	sub	sp, #16
 801a15a:	af00      	add	r7, sp, #0
 801a15c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	685b      	ldr	r3, [r3, #4]
 801a162:	2b00      	cmp	r3, #0
 801a164:	db16      	blt.n	801a194 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	6818      	ldr	r0, [r3, #0]
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	f103 010c 	add.w	r1, r3, #12
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	685b      	ldr	r3, [r3, #4]
 801a174:	461a      	mov	r2, r3
 801a176:	f107 030c 	add.w	r3, r7, #12
 801a17a:	f7ff fd73 	bl	8019c64 <f_write>
 801a17e:	4603      	mov	r3, r0
 801a180:	2b00      	cmp	r3, #0
 801a182:	d107      	bne.n	801a194 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	685b      	ldr	r3, [r3, #4]
 801a188:	68fa      	ldr	r2, [r7, #12]
 801a18a:	4293      	cmp	r3, r2
 801a18c:	d102      	bne.n	801a194 <putc_flush+0x3e>
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	689b      	ldr	r3, [r3, #8]
 801a192:	e001      	b.n	801a198 <putc_flush+0x42>
	return EOF;
 801a194:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a198:	4618      	mov	r0, r3
 801a19a:	3710      	adds	r7, #16
 801a19c:	46bd      	mov	sp, r7
 801a19e:	bd80      	pop	{r7, pc}

0801a1a0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801a1a0:	b480      	push	{r7}
 801a1a2:	b083      	sub	sp, #12
 801a1a4:	af00      	add	r7, sp, #0
 801a1a6:	6078      	str	r0, [r7, #4]
 801a1a8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	683a      	ldr	r2, [r7, #0]
 801a1ae:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	2200      	movs	r2, #0
 801a1b4:	605a      	str	r2, [r3, #4]
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	685a      	ldr	r2, [r3, #4]
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	609a      	str	r2, [r3, #8]
}
 801a1be:	bf00      	nop
 801a1c0:	370c      	adds	r7, #12
 801a1c2:	46bd      	mov	sp, r7
 801a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c8:	4770      	bx	lr

0801a1ca <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801a1ca:	b580      	push	{r7, lr}
 801a1cc:	b096      	sub	sp, #88	; 0x58
 801a1ce:	af00      	add	r7, sp, #0
 801a1d0:	6078      	str	r0, [r7, #4]
 801a1d2:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801a1d4:	f107 030c 	add.w	r3, r7, #12
 801a1d8:	6839      	ldr	r1, [r7, #0]
 801a1da:	4618      	mov	r0, r3
 801a1dc:	f7ff ffe0 	bl	801a1a0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801a1e0:	e009      	b.n	801a1f6 <f_puts+0x2c>
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	1c5a      	adds	r2, r3, #1
 801a1e6:	607a      	str	r2, [r7, #4]
 801a1e8:	781a      	ldrb	r2, [r3, #0]
 801a1ea:	f107 030c 	add.w	r3, r7, #12
 801a1ee:	4611      	mov	r1, r2
 801a1f0:	4618      	mov	r0, r3
 801a1f2:	f7ff ff73 	bl	801a0dc <putc_bfd>
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	781b      	ldrb	r3, [r3, #0]
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d1f1      	bne.n	801a1e2 <f_puts+0x18>
	return putc_flush(&pb);
 801a1fe:	f107 030c 	add.w	r3, r7, #12
 801a202:	4618      	mov	r0, r3
 801a204:	f7ff ffa7 	bl	801a156 <putc_flush>
 801a208:	4603      	mov	r3, r0
}
 801a20a:	4618      	mov	r0, r3
 801a20c:	3758      	adds	r7, #88	; 0x58
 801a20e:	46bd      	mov	sp, r7
 801a210:	bd80      	pop	{r7, pc}
	...

0801a214 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a214:	b480      	push	{r7}
 801a216:	b087      	sub	sp, #28
 801a218:	af00      	add	r7, sp, #0
 801a21a:	60f8      	str	r0, [r7, #12]
 801a21c:	60b9      	str	r1, [r7, #8]
 801a21e:	4613      	mov	r3, r2
 801a220:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a222:	2301      	movs	r3, #1
 801a224:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a226:	2300      	movs	r3, #0
 801a228:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a22a:	4b1f      	ldr	r3, [pc, #124]	; (801a2a8 <FATFS_LinkDriverEx+0x94>)
 801a22c:	7a5b      	ldrb	r3, [r3, #9]
 801a22e:	b2db      	uxtb	r3, r3
 801a230:	2b00      	cmp	r3, #0
 801a232:	d131      	bne.n	801a298 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a234:	4b1c      	ldr	r3, [pc, #112]	; (801a2a8 <FATFS_LinkDriverEx+0x94>)
 801a236:	7a5b      	ldrb	r3, [r3, #9]
 801a238:	b2db      	uxtb	r3, r3
 801a23a:	461a      	mov	r2, r3
 801a23c:	4b1a      	ldr	r3, [pc, #104]	; (801a2a8 <FATFS_LinkDriverEx+0x94>)
 801a23e:	2100      	movs	r1, #0
 801a240:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a242:	4b19      	ldr	r3, [pc, #100]	; (801a2a8 <FATFS_LinkDriverEx+0x94>)
 801a244:	7a5b      	ldrb	r3, [r3, #9]
 801a246:	b2db      	uxtb	r3, r3
 801a248:	4a17      	ldr	r2, [pc, #92]	; (801a2a8 <FATFS_LinkDriverEx+0x94>)
 801a24a:	009b      	lsls	r3, r3, #2
 801a24c:	4413      	add	r3, r2
 801a24e:	68fa      	ldr	r2, [r7, #12]
 801a250:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a252:	4b15      	ldr	r3, [pc, #84]	; (801a2a8 <FATFS_LinkDriverEx+0x94>)
 801a254:	7a5b      	ldrb	r3, [r3, #9]
 801a256:	b2db      	uxtb	r3, r3
 801a258:	461a      	mov	r2, r3
 801a25a:	4b13      	ldr	r3, [pc, #76]	; (801a2a8 <FATFS_LinkDriverEx+0x94>)
 801a25c:	4413      	add	r3, r2
 801a25e:	79fa      	ldrb	r2, [r7, #7]
 801a260:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801a262:	4b11      	ldr	r3, [pc, #68]	; (801a2a8 <FATFS_LinkDriverEx+0x94>)
 801a264:	7a5b      	ldrb	r3, [r3, #9]
 801a266:	b2db      	uxtb	r3, r3
 801a268:	1c5a      	adds	r2, r3, #1
 801a26a:	b2d1      	uxtb	r1, r2
 801a26c:	4a0e      	ldr	r2, [pc, #56]	; (801a2a8 <FATFS_LinkDriverEx+0x94>)
 801a26e:	7251      	strb	r1, [r2, #9]
 801a270:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a272:	7dbb      	ldrb	r3, [r7, #22]
 801a274:	3330      	adds	r3, #48	; 0x30
 801a276:	b2da      	uxtb	r2, r3
 801a278:	68bb      	ldr	r3, [r7, #8]
 801a27a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a27c:	68bb      	ldr	r3, [r7, #8]
 801a27e:	3301      	adds	r3, #1
 801a280:	223a      	movs	r2, #58	; 0x3a
 801a282:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a284:	68bb      	ldr	r3, [r7, #8]
 801a286:	3302      	adds	r3, #2
 801a288:	222f      	movs	r2, #47	; 0x2f
 801a28a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a28c:	68bb      	ldr	r3, [r7, #8]
 801a28e:	3303      	adds	r3, #3
 801a290:	2200      	movs	r2, #0
 801a292:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a294:	2300      	movs	r3, #0
 801a296:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a298:	7dfb      	ldrb	r3, [r7, #23]
}
 801a29a:	4618      	mov	r0, r3
 801a29c:	371c      	adds	r7, #28
 801a29e:	46bd      	mov	sp, r7
 801a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2a4:	4770      	bx	lr
 801a2a6:	bf00      	nop
 801a2a8:	240018d0 	.word	0x240018d0

0801a2ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a2ac:	b580      	push	{r7, lr}
 801a2ae:	b082      	sub	sp, #8
 801a2b0:	af00      	add	r7, sp, #0
 801a2b2:	6078      	str	r0, [r7, #4]
 801a2b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a2b6:	2200      	movs	r2, #0
 801a2b8:	6839      	ldr	r1, [r7, #0]
 801a2ba:	6878      	ldr	r0, [r7, #4]
 801a2bc:	f7ff ffaa 	bl	801a214 <FATFS_LinkDriverEx>
 801a2c0:	4603      	mov	r3, r0
}
 801a2c2:	4618      	mov	r0, r3
 801a2c4:	3708      	adds	r7, #8
 801a2c6:	46bd      	mov	sp, r7
 801a2c8:	bd80      	pop	{r7, pc}
	...

0801a2cc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801a2cc:	b480      	push	{r7}
 801a2ce:	b085      	sub	sp, #20
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	4603      	mov	r3, r0
 801a2d4:	6039      	str	r1, [r7, #0]
 801a2d6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801a2d8:	88fb      	ldrh	r3, [r7, #6]
 801a2da:	2b7f      	cmp	r3, #127	; 0x7f
 801a2dc:	d802      	bhi.n	801a2e4 <ff_convert+0x18>
		c = chr;
 801a2de:	88fb      	ldrh	r3, [r7, #6]
 801a2e0:	81fb      	strh	r3, [r7, #14]
 801a2e2:	e025      	b.n	801a330 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801a2e4:	683b      	ldr	r3, [r7, #0]
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d00b      	beq.n	801a302 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801a2ea:	88fb      	ldrh	r3, [r7, #6]
 801a2ec:	2bff      	cmp	r3, #255	; 0xff
 801a2ee:	d805      	bhi.n	801a2fc <ff_convert+0x30>
 801a2f0:	88fb      	ldrh	r3, [r7, #6]
 801a2f2:	3b80      	subs	r3, #128	; 0x80
 801a2f4:	4a12      	ldr	r2, [pc, #72]	; (801a340 <ff_convert+0x74>)
 801a2f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a2fa:	e000      	b.n	801a2fe <ff_convert+0x32>
 801a2fc:	2300      	movs	r3, #0
 801a2fe:	81fb      	strh	r3, [r7, #14]
 801a300:	e016      	b.n	801a330 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801a302:	2300      	movs	r3, #0
 801a304:	81fb      	strh	r3, [r7, #14]
 801a306:	e009      	b.n	801a31c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801a308:	89fb      	ldrh	r3, [r7, #14]
 801a30a:	4a0d      	ldr	r2, [pc, #52]	; (801a340 <ff_convert+0x74>)
 801a30c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a310:	88fa      	ldrh	r2, [r7, #6]
 801a312:	429a      	cmp	r2, r3
 801a314:	d006      	beq.n	801a324 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801a316:	89fb      	ldrh	r3, [r7, #14]
 801a318:	3301      	adds	r3, #1
 801a31a:	81fb      	strh	r3, [r7, #14]
 801a31c:	89fb      	ldrh	r3, [r7, #14]
 801a31e:	2b7f      	cmp	r3, #127	; 0x7f
 801a320:	d9f2      	bls.n	801a308 <ff_convert+0x3c>
 801a322:	e000      	b.n	801a326 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801a324:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801a326:	89fb      	ldrh	r3, [r7, #14]
 801a328:	3380      	adds	r3, #128	; 0x80
 801a32a:	b29b      	uxth	r3, r3
 801a32c:	b2db      	uxtb	r3, r3
 801a32e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801a330:	89fb      	ldrh	r3, [r7, #14]
}
 801a332:	4618      	mov	r0, r3
 801a334:	3714      	adds	r7, #20
 801a336:	46bd      	mov	sp, r7
 801a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a33c:	4770      	bx	lr
 801a33e:	bf00      	nop
 801a340:	08020094 	.word	0x08020094

0801a344 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801a344:	b480      	push	{r7}
 801a346:	b087      	sub	sp, #28
 801a348:	af00      	add	r7, sp, #0
 801a34a:	4603      	mov	r3, r0
 801a34c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801a34e:	88fb      	ldrh	r3, [r7, #6]
 801a350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a354:	d201      	bcs.n	801a35a <ff_wtoupper+0x16>
 801a356:	4b3e      	ldr	r3, [pc, #248]	; (801a450 <ff_wtoupper+0x10c>)
 801a358:	e000      	b.n	801a35c <ff_wtoupper+0x18>
 801a35a:	4b3e      	ldr	r3, [pc, #248]	; (801a454 <ff_wtoupper+0x110>)
 801a35c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801a35e:	697b      	ldr	r3, [r7, #20]
 801a360:	1c9a      	adds	r2, r3, #2
 801a362:	617a      	str	r2, [r7, #20]
 801a364:	881b      	ldrh	r3, [r3, #0]
 801a366:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801a368:	8a7b      	ldrh	r3, [r7, #18]
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	d068      	beq.n	801a440 <ff_wtoupper+0xfc>
 801a36e:	88fa      	ldrh	r2, [r7, #6]
 801a370:	8a7b      	ldrh	r3, [r7, #18]
 801a372:	429a      	cmp	r2, r3
 801a374:	d364      	bcc.n	801a440 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801a376:	697b      	ldr	r3, [r7, #20]
 801a378:	1c9a      	adds	r2, r3, #2
 801a37a:	617a      	str	r2, [r7, #20]
 801a37c:	881b      	ldrh	r3, [r3, #0]
 801a37e:	823b      	strh	r3, [r7, #16]
 801a380:	8a3b      	ldrh	r3, [r7, #16]
 801a382:	0a1b      	lsrs	r3, r3, #8
 801a384:	81fb      	strh	r3, [r7, #14]
 801a386:	8a3b      	ldrh	r3, [r7, #16]
 801a388:	b2db      	uxtb	r3, r3
 801a38a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801a38c:	88fa      	ldrh	r2, [r7, #6]
 801a38e:	8a79      	ldrh	r1, [r7, #18]
 801a390:	8a3b      	ldrh	r3, [r7, #16]
 801a392:	440b      	add	r3, r1
 801a394:	429a      	cmp	r2, r3
 801a396:	da49      	bge.n	801a42c <ff_wtoupper+0xe8>
			switch (cmd) {
 801a398:	89fb      	ldrh	r3, [r7, #14]
 801a39a:	2b08      	cmp	r3, #8
 801a39c:	d84f      	bhi.n	801a43e <ff_wtoupper+0xfa>
 801a39e:	a201      	add	r2, pc, #4	; (adr r2, 801a3a4 <ff_wtoupper+0x60>)
 801a3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a3a4:	0801a3c9 	.word	0x0801a3c9
 801a3a8:	0801a3db 	.word	0x0801a3db
 801a3ac:	0801a3f1 	.word	0x0801a3f1
 801a3b0:	0801a3f9 	.word	0x0801a3f9
 801a3b4:	0801a401 	.word	0x0801a401
 801a3b8:	0801a409 	.word	0x0801a409
 801a3bc:	0801a411 	.word	0x0801a411
 801a3c0:	0801a419 	.word	0x0801a419
 801a3c4:	0801a421 	.word	0x0801a421
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801a3c8:	88fa      	ldrh	r2, [r7, #6]
 801a3ca:	8a7b      	ldrh	r3, [r7, #18]
 801a3cc:	1ad3      	subs	r3, r2, r3
 801a3ce:	005b      	lsls	r3, r3, #1
 801a3d0:	697a      	ldr	r2, [r7, #20]
 801a3d2:	4413      	add	r3, r2
 801a3d4:	881b      	ldrh	r3, [r3, #0]
 801a3d6:	80fb      	strh	r3, [r7, #6]
 801a3d8:	e027      	b.n	801a42a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801a3da:	88fa      	ldrh	r2, [r7, #6]
 801a3dc:	8a7b      	ldrh	r3, [r7, #18]
 801a3de:	1ad3      	subs	r3, r2, r3
 801a3e0:	b29b      	uxth	r3, r3
 801a3e2:	f003 0301 	and.w	r3, r3, #1
 801a3e6:	b29b      	uxth	r3, r3
 801a3e8:	88fa      	ldrh	r2, [r7, #6]
 801a3ea:	1ad3      	subs	r3, r2, r3
 801a3ec:	80fb      	strh	r3, [r7, #6]
 801a3ee:	e01c      	b.n	801a42a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801a3f0:	88fb      	ldrh	r3, [r7, #6]
 801a3f2:	3b10      	subs	r3, #16
 801a3f4:	80fb      	strh	r3, [r7, #6]
 801a3f6:	e018      	b.n	801a42a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801a3f8:	88fb      	ldrh	r3, [r7, #6]
 801a3fa:	3b20      	subs	r3, #32
 801a3fc:	80fb      	strh	r3, [r7, #6]
 801a3fe:	e014      	b.n	801a42a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801a400:	88fb      	ldrh	r3, [r7, #6]
 801a402:	3b30      	subs	r3, #48	; 0x30
 801a404:	80fb      	strh	r3, [r7, #6]
 801a406:	e010      	b.n	801a42a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801a408:	88fb      	ldrh	r3, [r7, #6]
 801a40a:	3b1a      	subs	r3, #26
 801a40c:	80fb      	strh	r3, [r7, #6]
 801a40e:	e00c      	b.n	801a42a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801a410:	88fb      	ldrh	r3, [r7, #6]
 801a412:	3308      	adds	r3, #8
 801a414:	80fb      	strh	r3, [r7, #6]
 801a416:	e008      	b.n	801a42a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801a418:	88fb      	ldrh	r3, [r7, #6]
 801a41a:	3b50      	subs	r3, #80	; 0x50
 801a41c:	80fb      	strh	r3, [r7, #6]
 801a41e:	e004      	b.n	801a42a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801a420:	88fb      	ldrh	r3, [r7, #6]
 801a422:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801a426:	80fb      	strh	r3, [r7, #6]
 801a428:	bf00      	nop
			}
			break;
 801a42a:	e008      	b.n	801a43e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801a42c:	89fb      	ldrh	r3, [r7, #14]
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d195      	bne.n	801a35e <ff_wtoupper+0x1a>
 801a432:	8a3b      	ldrh	r3, [r7, #16]
 801a434:	005b      	lsls	r3, r3, #1
 801a436:	697a      	ldr	r2, [r7, #20]
 801a438:	4413      	add	r3, r2
 801a43a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801a43c:	e78f      	b.n	801a35e <ff_wtoupper+0x1a>
			break;
 801a43e:	bf00      	nop
	}

	return chr;
 801a440:	88fb      	ldrh	r3, [r7, #6]
}
 801a442:	4618      	mov	r0, r3
 801a444:	371c      	adds	r7, #28
 801a446:	46bd      	mov	sp, r7
 801a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a44c:	4770      	bx	lr
 801a44e:	bf00      	nop
 801a450:	08020194 	.word	0x08020194
 801a454:	08020388 	.word	0x08020388

0801a458 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a458:	b580      	push	{r7, lr}
 801a45a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801a45c:	2201      	movs	r2, #1
 801a45e:	4913      	ldr	r1, [pc, #76]	; (801a4ac <MX_USB_DEVICE_Init+0x54>)
 801a460:	4813      	ldr	r0, [pc, #76]	; (801a4b0 <MX_USB_DEVICE_Init+0x58>)
 801a462:	f7fb fd1d 	bl	8015ea0 <USBD_Init>
 801a466:	4603      	mov	r3, r0
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d001      	beq.n	801a470 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a46c:	f7e8 fd1e 	bl	8002eac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801a470:	4910      	ldr	r1, [pc, #64]	; (801a4b4 <MX_USB_DEVICE_Init+0x5c>)
 801a472:	480f      	ldr	r0, [pc, #60]	; (801a4b0 <MX_USB_DEVICE_Init+0x58>)
 801a474:	f7fb fd44 	bl	8015f00 <USBD_RegisterClass>
 801a478:	4603      	mov	r3, r0
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d001      	beq.n	801a482 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a47e:	f7e8 fd15 	bl	8002eac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801a482:	490d      	ldr	r1, [pc, #52]	; (801a4b8 <MX_USB_DEVICE_Init+0x60>)
 801a484:	480a      	ldr	r0, [pc, #40]	; (801a4b0 <MX_USB_DEVICE_Init+0x58>)
 801a486:	f7fb fc3b 	bl	8015d00 <USBD_CDC_RegisterInterface>
 801a48a:	4603      	mov	r3, r0
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d001      	beq.n	801a494 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a490:	f7e8 fd0c 	bl	8002eac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801a494:	4806      	ldr	r0, [pc, #24]	; (801a4b0 <MX_USB_DEVICE_Init+0x58>)
 801a496:	f7fb fd69 	bl	8015f6c <USBD_Start>
 801a49a:	4603      	mov	r3, r0
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d001      	beq.n	801a4a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a4a0:	f7e8 fd04 	bl	8002eac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801a4a4:	f7f0 f994 	bl	800a7d0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a4a8:	bf00      	nop
 801a4aa:	bd80      	pop	{r7, pc}
 801a4ac:	240000b0 	.word	0x240000b0
 801a4b0:	240018dc 	.word	0x240018dc
 801a4b4:	2400001c 	.word	0x2400001c
 801a4b8:	2400009c 	.word	0x2400009c

0801a4bc <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801a4bc:	b580      	push	{r7, lr}
 801a4be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801a4c0:	2200      	movs	r2, #0
 801a4c2:	4905      	ldr	r1, [pc, #20]	; (801a4d8 <CDC_Init_HS+0x1c>)
 801a4c4:	4805      	ldr	r0, [pc, #20]	; (801a4dc <CDC_Init_HS+0x20>)
 801a4c6:	f7fb fc35 	bl	8015d34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801a4ca:	4905      	ldr	r1, [pc, #20]	; (801a4e0 <CDC_Init_HS+0x24>)
 801a4cc:	4803      	ldr	r0, [pc, #12]	; (801a4dc <CDC_Init_HS+0x20>)
 801a4ce:	f7fb fc53 	bl	8015d78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a4d2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	bd80      	pop	{r7, pc}
 801a4d8:	240023b8 	.word	0x240023b8
 801a4dc:	240018dc 	.word	0x240018dc
 801a4e0:	24001bb8 	.word	0x24001bb8

0801a4e4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801a4e4:	b480      	push	{r7}
 801a4e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801a4e8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801a4ea:	4618      	mov	r0, r3
 801a4ec:	46bd      	mov	sp, r7
 801a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f2:	4770      	bx	lr

0801a4f4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a4f4:	b480      	push	{r7}
 801a4f6:	b083      	sub	sp, #12
 801a4f8:	af00      	add	r7, sp, #0
 801a4fa:	4603      	mov	r3, r0
 801a4fc:	6039      	str	r1, [r7, #0]
 801a4fe:	71fb      	strb	r3, [r7, #7]
 801a500:	4613      	mov	r3, r2
 801a502:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801a504:	79fb      	ldrb	r3, [r7, #7]
 801a506:	2b23      	cmp	r3, #35	; 0x23
 801a508:	d84a      	bhi.n	801a5a0 <CDC_Control_HS+0xac>
 801a50a:	a201      	add	r2, pc, #4	; (adr r2, 801a510 <CDC_Control_HS+0x1c>)
 801a50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a510:	0801a5a1 	.word	0x0801a5a1
 801a514:	0801a5a1 	.word	0x0801a5a1
 801a518:	0801a5a1 	.word	0x0801a5a1
 801a51c:	0801a5a1 	.word	0x0801a5a1
 801a520:	0801a5a1 	.word	0x0801a5a1
 801a524:	0801a5a1 	.word	0x0801a5a1
 801a528:	0801a5a1 	.word	0x0801a5a1
 801a52c:	0801a5a1 	.word	0x0801a5a1
 801a530:	0801a5a1 	.word	0x0801a5a1
 801a534:	0801a5a1 	.word	0x0801a5a1
 801a538:	0801a5a1 	.word	0x0801a5a1
 801a53c:	0801a5a1 	.word	0x0801a5a1
 801a540:	0801a5a1 	.word	0x0801a5a1
 801a544:	0801a5a1 	.word	0x0801a5a1
 801a548:	0801a5a1 	.word	0x0801a5a1
 801a54c:	0801a5a1 	.word	0x0801a5a1
 801a550:	0801a5a1 	.word	0x0801a5a1
 801a554:	0801a5a1 	.word	0x0801a5a1
 801a558:	0801a5a1 	.word	0x0801a5a1
 801a55c:	0801a5a1 	.word	0x0801a5a1
 801a560:	0801a5a1 	.word	0x0801a5a1
 801a564:	0801a5a1 	.word	0x0801a5a1
 801a568:	0801a5a1 	.word	0x0801a5a1
 801a56c:	0801a5a1 	.word	0x0801a5a1
 801a570:	0801a5a1 	.word	0x0801a5a1
 801a574:	0801a5a1 	.word	0x0801a5a1
 801a578:	0801a5a1 	.word	0x0801a5a1
 801a57c:	0801a5a1 	.word	0x0801a5a1
 801a580:	0801a5a1 	.word	0x0801a5a1
 801a584:	0801a5a1 	.word	0x0801a5a1
 801a588:	0801a5a1 	.word	0x0801a5a1
 801a58c:	0801a5a1 	.word	0x0801a5a1
 801a590:	0801a5a1 	.word	0x0801a5a1
 801a594:	0801a5a1 	.word	0x0801a5a1
 801a598:	0801a5a1 	.word	0x0801a5a1
 801a59c:	0801a5a1 	.word	0x0801a5a1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a5a0:	bf00      	nop
  }

  return (USBD_OK);
 801a5a2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	370c      	adds	r7, #12
 801a5a8:	46bd      	mov	sp, r7
 801a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ae:	4770      	bx	lr

0801a5b0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801a5b0:	b580      	push	{r7, lr}
 801a5b2:	b082      	sub	sp, #8
 801a5b4:	af00      	add	r7, sp, #0
 801a5b6:	6078      	str	r0, [r7, #4]
 801a5b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801a5ba:	6879      	ldr	r1, [r7, #4]
 801a5bc:	4805      	ldr	r0, [pc, #20]	; (801a5d4 <CDC_Receive_HS+0x24>)
 801a5be:	f7fb fbdb 	bl	8015d78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801a5c2:	4804      	ldr	r0, [pc, #16]	; (801a5d4 <CDC_Receive_HS+0x24>)
 801a5c4:	f7fb fc36 	bl	8015e34 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a5c8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801a5ca:	4618      	mov	r0, r3
 801a5cc:	3708      	adds	r7, #8
 801a5ce:	46bd      	mov	sp, r7
 801a5d0:	bd80      	pop	{r7, pc}
 801a5d2:	bf00      	nop
 801a5d4:	240018dc 	.word	0x240018dc

0801a5d8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b084      	sub	sp, #16
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	6078      	str	r0, [r7, #4]
 801a5e0:	460b      	mov	r3, r1
 801a5e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801a5e4:	2300      	movs	r3, #0
 801a5e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801a5e8:	4b0d      	ldr	r3, [pc, #52]	; (801a620 <CDC_Transmit_HS+0x48>)
 801a5ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a5ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801a5f0:	68bb      	ldr	r3, [r7, #8]
 801a5f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d001      	beq.n	801a5fe <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801a5fa:	2301      	movs	r3, #1
 801a5fc:	e00b      	b.n	801a616 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801a5fe:	887b      	ldrh	r3, [r7, #2]
 801a600:	461a      	mov	r2, r3
 801a602:	6879      	ldr	r1, [r7, #4]
 801a604:	4806      	ldr	r0, [pc, #24]	; (801a620 <CDC_Transmit_HS+0x48>)
 801a606:	f7fb fb95 	bl	8015d34 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801a60a:	4805      	ldr	r0, [pc, #20]	; (801a620 <CDC_Transmit_HS+0x48>)
 801a60c:	f7fb fbd2 	bl	8015db4 <USBD_CDC_TransmitPacket>
 801a610:	4603      	mov	r3, r0
 801a612:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801a614:	7bfb      	ldrb	r3, [r7, #15]
}
 801a616:	4618      	mov	r0, r3
 801a618:	3710      	adds	r7, #16
 801a61a:	46bd      	mov	sp, r7
 801a61c:	bd80      	pop	{r7, pc}
 801a61e:	bf00      	nop
 801a620:	240018dc 	.word	0x240018dc

0801a624 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a624:	b480      	push	{r7}
 801a626:	b087      	sub	sp, #28
 801a628:	af00      	add	r7, sp, #0
 801a62a:	60f8      	str	r0, [r7, #12]
 801a62c:	60b9      	str	r1, [r7, #8]
 801a62e:	4613      	mov	r3, r2
 801a630:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a632:	2300      	movs	r3, #0
 801a634:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801a636:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a63a:	4618      	mov	r0, r3
 801a63c:	371c      	adds	r7, #28
 801a63e:	46bd      	mov	sp, r7
 801a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a644:	4770      	bx	lr
	...

0801a648 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a648:	b480      	push	{r7}
 801a64a:	b083      	sub	sp, #12
 801a64c:	af00      	add	r7, sp, #0
 801a64e:	4603      	mov	r3, r0
 801a650:	6039      	str	r1, [r7, #0]
 801a652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801a654:	683b      	ldr	r3, [r7, #0]
 801a656:	2212      	movs	r2, #18
 801a658:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801a65a:	4b03      	ldr	r3, [pc, #12]	; (801a668 <USBD_HS_DeviceDescriptor+0x20>)
}
 801a65c:	4618      	mov	r0, r3
 801a65e:	370c      	adds	r7, #12
 801a660:	46bd      	mov	sp, r7
 801a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a666:	4770      	bx	lr
 801a668:	240000cc 	.word	0x240000cc

0801a66c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a66c:	b480      	push	{r7}
 801a66e:	b083      	sub	sp, #12
 801a670:	af00      	add	r7, sp, #0
 801a672:	4603      	mov	r3, r0
 801a674:	6039      	str	r1, [r7, #0]
 801a676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a678:	683b      	ldr	r3, [r7, #0]
 801a67a:	2204      	movs	r2, #4
 801a67c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a67e:	4b03      	ldr	r3, [pc, #12]	; (801a68c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801a680:	4618      	mov	r0, r3
 801a682:	370c      	adds	r7, #12
 801a684:	46bd      	mov	sp, r7
 801a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a68a:	4770      	bx	lr
 801a68c:	240000e0 	.word	0x240000e0

0801a690 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a690:	b580      	push	{r7, lr}
 801a692:	b082      	sub	sp, #8
 801a694:	af00      	add	r7, sp, #0
 801a696:	4603      	mov	r3, r0
 801a698:	6039      	str	r1, [r7, #0]
 801a69a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a69c:	79fb      	ldrb	r3, [r7, #7]
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d105      	bne.n	801a6ae <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a6a2:	683a      	ldr	r2, [r7, #0]
 801a6a4:	4907      	ldr	r1, [pc, #28]	; (801a6c4 <USBD_HS_ProductStrDescriptor+0x34>)
 801a6a6:	4808      	ldr	r0, [pc, #32]	; (801a6c8 <USBD_HS_ProductStrDescriptor+0x38>)
 801a6a8:	f7fc fe12 	bl	80172d0 <USBD_GetString>
 801a6ac:	e004      	b.n	801a6b8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a6ae:	683a      	ldr	r2, [r7, #0]
 801a6b0:	4904      	ldr	r1, [pc, #16]	; (801a6c4 <USBD_HS_ProductStrDescriptor+0x34>)
 801a6b2:	4805      	ldr	r0, [pc, #20]	; (801a6c8 <USBD_HS_ProductStrDescriptor+0x38>)
 801a6b4:	f7fc fe0c 	bl	80172d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a6b8:	4b02      	ldr	r3, [pc, #8]	; (801a6c4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	3708      	adds	r7, #8
 801a6be:	46bd      	mov	sp, r7
 801a6c0:	bd80      	pop	{r7, pc}
 801a6c2:	bf00      	nop
 801a6c4:	24002bb8 	.word	0x24002bb8
 801a6c8:	0801fef8 	.word	0x0801fef8

0801a6cc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a6cc:	b580      	push	{r7, lr}
 801a6ce:	b082      	sub	sp, #8
 801a6d0:	af00      	add	r7, sp, #0
 801a6d2:	4603      	mov	r3, r0
 801a6d4:	6039      	str	r1, [r7, #0]
 801a6d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a6d8:	683a      	ldr	r2, [r7, #0]
 801a6da:	4904      	ldr	r1, [pc, #16]	; (801a6ec <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801a6dc:	4804      	ldr	r0, [pc, #16]	; (801a6f0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801a6de:	f7fc fdf7 	bl	80172d0 <USBD_GetString>
  return USBD_StrDesc;
 801a6e2:	4b02      	ldr	r3, [pc, #8]	; (801a6ec <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801a6e4:	4618      	mov	r0, r3
 801a6e6:	3708      	adds	r7, #8
 801a6e8:	46bd      	mov	sp, r7
 801a6ea:	bd80      	pop	{r7, pc}
 801a6ec:	24002bb8 	.word	0x24002bb8
 801a6f0:	0801ff14 	.word	0x0801ff14

0801a6f4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a6f4:	b580      	push	{r7, lr}
 801a6f6:	b082      	sub	sp, #8
 801a6f8:	af00      	add	r7, sp, #0
 801a6fa:	4603      	mov	r3, r0
 801a6fc:	6039      	str	r1, [r7, #0]
 801a6fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a700:	683b      	ldr	r3, [r7, #0]
 801a702:	221a      	movs	r2, #26
 801a704:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a706:	f000 f843 	bl	801a790 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801a70a:	4b02      	ldr	r3, [pc, #8]	; (801a714 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801a70c:	4618      	mov	r0, r3
 801a70e:	3708      	adds	r7, #8
 801a710:	46bd      	mov	sp, r7
 801a712:	bd80      	pop	{r7, pc}
 801a714:	240000e4 	.word	0x240000e4

0801a718 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a718:	b580      	push	{r7, lr}
 801a71a:	b082      	sub	sp, #8
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	4603      	mov	r3, r0
 801a720:	6039      	str	r1, [r7, #0]
 801a722:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a724:	79fb      	ldrb	r3, [r7, #7]
 801a726:	2b00      	cmp	r3, #0
 801a728:	d105      	bne.n	801a736 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a72a:	683a      	ldr	r2, [r7, #0]
 801a72c:	4907      	ldr	r1, [pc, #28]	; (801a74c <USBD_HS_ConfigStrDescriptor+0x34>)
 801a72e:	4808      	ldr	r0, [pc, #32]	; (801a750 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a730:	f7fc fdce 	bl	80172d0 <USBD_GetString>
 801a734:	e004      	b.n	801a740 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a736:	683a      	ldr	r2, [r7, #0]
 801a738:	4904      	ldr	r1, [pc, #16]	; (801a74c <USBD_HS_ConfigStrDescriptor+0x34>)
 801a73a:	4805      	ldr	r0, [pc, #20]	; (801a750 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a73c:	f7fc fdc8 	bl	80172d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a740:	4b02      	ldr	r3, [pc, #8]	; (801a74c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801a742:	4618      	mov	r0, r3
 801a744:	3708      	adds	r7, #8
 801a746:	46bd      	mov	sp, r7
 801a748:	bd80      	pop	{r7, pc}
 801a74a:	bf00      	nop
 801a74c:	24002bb8 	.word	0x24002bb8
 801a750:	0801ff18 	.word	0x0801ff18

0801a754 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a754:	b580      	push	{r7, lr}
 801a756:	b082      	sub	sp, #8
 801a758:	af00      	add	r7, sp, #0
 801a75a:	4603      	mov	r3, r0
 801a75c:	6039      	str	r1, [r7, #0]
 801a75e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a760:	79fb      	ldrb	r3, [r7, #7]
 801a762:	2b00      	cmp	r3, #0
 801a764:	d105      	bne.n	801a772 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a766:	683a      	ldr	r2, [r7, #0]
 801a768:	4907      	ldr	r1, [pc, #28]	; (801a788 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a76a:	4808      	ldr	r0, [pc, #32]	; (801a78c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a76c:	f7fc fdb0 	bl	80172d0 <USBD_GetString>
 801a770:	e004      	b.n	801a77c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a772:	683a      	ldr	r2, [r7, #0]
 801a774:	4904      	ldr	r1, [pc, #16]	; (801a788 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a776:	4805      	ldr	r0, [pc, #20]	; (801a78c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a778:	f7fc fdaa 	bl	80172d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a77c:	4b02      	ldr	r3, [pc, #8]	; (801a788 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801a77e:	4618      	mov	r0, r3
 801a780:	3708      	adds	r7, #8
 801a782:	46bd      	mov	sp, r7
 801a784:	bd80      	pop	{r7, pc}
 801a786:	bf00      	nop
 801a788:	24002bb8 	.word	0x24002bb8
 801a78c:	0801ff24 	.word	0x0801ff24

0801a790 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a790:	b580      	push	{r7, lr}
 801a792:	b084      	sub	sp, #16
 801a794:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a796:	4b0f      	ldr	r3, [pc, #60]	; (801a7d4 <Get_SerialNum+0x44>)
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a79c:	4b0e      	ldr	r3, [pc, #56]	; (801a7d8 <Get_SerialNum+0x48>)
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a7a2:	4b0e      	ldr	r3, [pc, #56]	; (801a7dc <Get_SerialNum+0x4c>)
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a7a8:	68fa      	ldr	r2, [r7, #12]
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	4413      	add	r3, r2
 801a7ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a7b0:	68fb      	ldr	r3, [r7, #12]
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d009      	beq.n	801a7ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a7b6:	2208      	movs	r2, #8
 801a7b8:	4909      	ldr	r1, [pc, #36]	; (801a7e0 <Get_SerialNum+0x50>)
 801a7ba:	68f8      	ldr	r0, [r7, #12]
 801a7bc:	f000 f814 	bl	801a7e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a7c0:	2204      	movs	r2, #4
 801a7c2:	4908      	ldr	r1, [pc, #32]	; (801a7e4 <Get_SerialNum+0x54>)
 801a7c4:	68b8      	ldr	r0, [r7, #8]
 801a7c6:	f000 f80f 	bl	801a7e8 <IntToUnicode>
  }
}
 801a7ca:	bf00      	nop
 801a7cc:	3710      	adds	r7, #16
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	bd80      	pop	{r7, pc}
 801a7d2:	bf00      	nop
 801a7d4:	1ff1e800 	.word	0x1ff1e800
 801a7d8:	1ff1e804 	.word	0x1ff1e804
 801a7dc:	1ff1e808 	.word	0x1ff1e808
 801a7e0:	240000e6 	.word	0x240000e6
 801a7e4:	240000f6 	.word	0x240000f6

0801a7e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a7e8:	b480      	push	{r7}
 801a7ea:	b087      	sub	sp, #28
 801a7ec:	af00      	add	r7, sp, #0
 801a7ee:	60f8      	str	r0, [r7, #12]
 801a7f0:	60b9      	str	r1, [r7, #8]
 801a7f2:	4613      	mov	r3, r2
 801a7f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a7f6:	2300      	movs	r3, #0
 801a7f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a7fa:	2300      	movs	r3, #0
 801a7fc:	75fb      	strb	r3, [r7, #23]
 801a7fe:	e027      	b.n	801a850 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a800:	68fb      	ldr	r3, [r7, #12]
 801a802:	0f1b      	lsrs	r3, r3, #28
 801a804:	2b09      	cmp	r3, #9
 801a806:	d80b      	bhi.n	801a820 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a808:	68fb      	ldr	r3, [r7, #12]
 801a80a:	0f1b      	lsrs	r3, r3, #28
 801a80c:	b2da      	uxtb	r2, r3
 801a80e:	7dfb      	ldrb	r3, [r7, #23]
 801a810:	005b      	lsls	r3, r3, #1
 801a812:	4619      	mov	r1, r3
 801a814:	68bb      	ldr	r3, [r7, #8]
 801a816:	440b      	add	r3, r1
 801a818:	3230      	adds	r2, #48	; 0x30
 801a81a:	b2d2      	uxtb	r2, r2
 801a81c:	701a      	strb	r2, [r3, #0]
 801a81e:	e00a      	b.n	801a836 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	0f1b      	lsrs	r3, r3, #28
 801a824:	b2da      	uxtb	r2, r3
 801a826:	7dfb      	ldrb	r3, [r7, #23]
 801a828:	005b      	lsls	r3, r3, #1
 801a82a:	4619      	mov	r1, r3
 801a82c:	68bb      	ldr	r3, [r7, #8]
 801a82e:	440b      	add	r3, r1
 801a830:	3237      	adds	r2, #55	; 0x37
 801a832:	b2d2      	uxtb	r2, r2
 801a834:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	011b      	lsls	r3, r3, #4
 801a83a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a83c:	7dfb      	ldrb	r3, [r7, #23]
 801a83e:	005b      	lsls	r3, r3, #1
 801a840:	3301      	adds	r3, #1
 801a842:	68ba      	ldr	r2, [r7, #8]
 801a844:	4413      	add	r3, r2
 801a846:	2200      	movs	r2, #0
 801a848:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a84a:	7dfb      	ldrb	r3, [r7, #23]
 801a84c:	3301      	adds	r3, #1
 801a84e:	75fb      	strb	r3, [r7, #23]
 801a850:	7dfa      	ldrb	r2, [r7, #23]
 801a852:	79fb      	ldrb	r3, [r7, #7]
 801a854:	429a      	cmp	r2, r3
 801a856:	d3d3      	bcc.n	801a800 <IntToUnicode+0x18>
  }
}
 801a858:	bf00      	nop
 801a85a:	bf00      	nop
 801a85c:	371c      	adds	r7, #28
 801a85e:	46bd      	mov	sp, r7
 801a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a864:	4770      	bx	lr
	...

0801a868 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a868:	b580      	push	{r7, lr}
 801a86a:	b0b2      	sub	sp, #200	; 0xc8
 801a86c:	af00      	add	r7, sp, #0
 801a86e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801a870:	f107 0310 	add.w	r3, r7, #16
 801a874:	22b8      	movs	r2, #184	; 0xb8
 801a876:	2100      	movs	r1, #0
 801a878:	4618      	mov	r0, r3
 801a87a:	f001 fa92 	bl	801bda2 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	4a1a      	ldr	r2, [pc, #104]	; (801a8ec <HAL_PCD_MspInit+0x84>)
 801a884:	4293      	cmp	r3, r2
 801a886:	d12c      	bne.n	801a8e2 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801a888:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801a88c:	f04f 0300 	mov.w	r3, #0
 801a890:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801a894:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801a898:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a89c:	f107 0310 	add.w	r3, r7, #16
 801a8a0:	4618      	mov	r0, r3
 801a8a2:	f7f0 ff75 	bl	800b790 <HAL_RCCEx_PeriphCLKConfig>
 801a8a6:	4603      	mov	r3, r0
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	d001      	beq.n	801a8b0 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801a8ac:	f7e8 fafe 	bl	8002eac <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801a8b0:	f7ef ff8e 	bl	800a7d0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801a8b4:	4b0e      	ldr	r3, [pc, #56]	; (801a8f0 <HAL_PCD_MspInit+0x88>)
 801a8b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a8ba:	4a0d      	ldr	r2, [pc, #52]	; (801a8f0 <HAL_PCD_MspInit+0x88>)
 801a8bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a8c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801a8c4:	4b0a      	ldr	r3, [pc, #40]	; (801a8f0 <HAL_PCD_MspInit+0x88>)
 801a8c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a8ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a8ce:	60fb      	str	r3, [r7, #12]
 801a8d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801a8d2:	2200      	movs	r2, #0
 801a8d4:	2100      	movs	r1, #0
 801a8d6:	204d      	movs	r0, #77	; 0x4d
 801a8d8:	f7eb fcff 	bl	80062da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801a8dc:	204d      	movs	r0, #77	; 0x4d
 801a8de:	f7eb fd16 	bl	800630e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801a8e2:	bf00      	nop
 801a8e4:	37c8      	adds	r7, #200	; 0xc8
 801a8e6:	46bd      	mov	sp, r7
 801a8e8:	bd80      	pop	{r7, pc}
 801a8ea:	bf00      	nop
 801a8ec:	40040000 	.word	0x40040000
 801a8f0:	58024400 	.word	0x58024400

0801a8f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8f4:	b580      	push	{r7, lr}
 801a8f6:	b082      	sub	sp, #8
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801a908:	4619      	mov	r1, r3
 801a90a:	4610      	mov	r0, r2
 801a90c:	f7fb fb7b 	bl	8016006 <USBD_LL_SetupStage>
}
 801a910:	bf00      	nop
 801a912:	3708      	adds	r7, #8
 801a914:	46bd      	mov	sp, r7
 801a916:	bd80      	pop	{r7, pc}

0801a918 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a918:	b580      	push	{r7, lr}
 801a91a:	b082      	sub	sp, #8
 801a91c:	af00      	add	r7, sp, #0
 801a91e:	6078      	str	r0, [r7, #4]
 801a920:	460b      	mov	r3, r1
 801a922:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a92a:	78fa      	ldrb	r2, [r7, #3]
 801a92c:	6879      	ldr	r1, [r7, #4]
 801a92e:	4613      	mov	r3, r2
 801a930:	00db      	lsls	r3, r3, #3
 801a932:	4413      	add	r3, r2
 801a934:	009b      	lsls	r3, r3, #2
 801a936:	440b      	add	r3, r1
 801a938:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801a93c:	681a      	ldr	r2, [r3, #0]
 801a93e:	78fb      	ldrb	r3, [r7, #3]
 801a940:	4619      	mov	r1, r3
 801a942:	f7fb fbb5 	bl	80160b0 <USBD_LL_DataOutStage>
}
 801a946:	bf00      	nop
 801a948:	3708      	adds	r7, #8
 801a94a:	46bd      	mov	sp, r7
 801a94c:	bd80      	pop	{r7, pc}

0801a94e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a94e:	b580      	push	{r7, lr}
 801a950:	b082      	sub	sp, #8
 801a952:	af00      	add	r7, sp, #0
 801a954:	6078      	str	r0, [r7, #4]
 801a956:	460b      	mov	r3, r1
 801a958:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a960:	78fa      	ldrb	r2, [r7, #3]
 801a962:	6879      	ldr	r1, [r7, #4]
 801a964:	4613      	mov	r3, r2
 801a966:	00db      	lsls	r3, r3, #3
 801a968:	4413      	add	r3, r2
 801a96a:	009b      	lsls	r3, r3, #2
 801a96c:	440b      	add	r3, r1
 801a96e:	3348      	adds	r3, #72	; 0x48
 801a970:	681a      	ldr	r2, [r3, #0]
 801a972:	78fb      	ldrb	r3, [r7, #3]
 801a974:	4619      	mov	r1, r3
 801a976:	f7fb fc4e 	bl	8016216 <USBD_LL_DataInStage>
}
 801a97a:	bf00      	nop
 801a97c:	3708      	adds	r7, #8
 801a97e:	46bd      	mov	sp, r7
 801a980:	bd80      	pop	{r7, pc}

0801a982 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a982:	b580      	push	{r7, lr}
 801a984:	b082      	sub	sp, #8
 801a986:	af00      	add	r7, sp, #0
 801a988:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a990:	4618      	mov	r0, r3
 801a992:	f7fb fd88 	bl	80164a6 <USBD_LL_SOF>
}
 801a996:	bf00      	nop
 801a998:	3708      	adds	r7, #8
 801a99a:	46bd      	mov	sp, r7
 801a99c:	bd80      	pop	{r7, pc}

0801a99e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a99e:	b580      	push	{r7, lr}
 801a9a0:	b084      	sub	sp, #16
 801a9a2:	af00      	add	r7, sp, #0
 801a9a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a9a6:	2301      	movs	r3, #1
 801a9a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	691b      	ldr	r3, [r3, #16]
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d102      	bne.n	801a9b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a9b2:	2300      	movs	r3, #0
 801a9b4:	73fb      	strb	r3, [r7, #15]
 801a9b6:	e008      	b.n	801a9ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	691b      	ldr	r3, [r3, #16]
 801a9bc:	2b02      	cmp	r3, #2
 801a9be:	d102      	bne.n	801a9c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a9c0:	2301      	movs	r3, #1
 801a9c2:	73fb      	strb	r3, [r7, #15]
 801a9c4:	e001      	b.n	801a9ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a9c6:	f7e8 fa71 	bl	8002eac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a9d0:	7bfa      	ldrb	r2, [r7, #15]
 801a9d2:	4611      	mov	r1, r2
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	f7fb fd22 	bl	801641e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	f7fb fcca 	bl	801637a <USBD_LL_Reset>
}
 801a9e6:	bf00      	nop
 801a9e8:	3710      	adds	r7, #16
 801a9ea:	46bd      	mov	sp, r7
 801a9ec:	bd80      	pop	{r7, pc}
	...

0801a9f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9f0:	b580      	push	{r7, lr}
 801a9f2:	b082      	sub	sp, #8
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a9fe:	4618      	mov	r0, r3
 801aa00:	f7fb fd1d 	bl	801643e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	687a      	ldr	r2, [r7, #4]
 801aa10:	6812      	ldr	r2, [r2, #0]
 801aa12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801aa16:	f043 0301 	orr.w	r3, r3, #1
 801aa1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	6a1b      	ldr	r3, [r3, #32]
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d005      	beq.n	801aa30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801aa24:	4b04      	ldr	r3, [pc, #16]	; (801aa38 <HAL_PCD_SuspendCallback+0x48>)
 801aa26:	691b      	ldr	r3, [r3, #16]
 801aa28:	4a03      	ldr	r2, [pc, #12]	; (801aa38 <HAL_PCD_SuspendCallback+0x48>)
 801aa2a:	f043 0306 	orr.w	r3, r3, #6
 801aa2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801aa30:	bf00      	nop
 801aa32:	3708      	adds	r7, #8
 801aa34:	46bd      	mov	sp, r7
 801aa36:	bd80      	pop	{r7, pc}
 801aa38:	e000ed00 	.word	0xe000ed00

0801aa3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa3c:	b580      	push	{r7, lr}
 801aa3e:	b082      	sub	sp, #8
 801aa40:	af00      	add	r7, sp, #0
 801aa42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa4a:	4618      	mov	r0, r3
 801aa4c:	f7fb fd13 	bl	8016476 <USBD_LL_Resume>
}
 801aa50:	bf00      	nop
 801aa52:	3708      	adds	r7, #8
 801aa54:	46bd      	mov	sp, r7
 801aa56:	bd80      	pop	{r7, pc}

0801aa58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa58:	b580      	push	{r7, lr}
 801aa5a:	b082      	sub	sp, #8
 801aa5c:	af00      	add	r7, sp, #0
 801aa5e:	6078      	str	r0, [r7, #4]
 801aa60:	460b      	mov	r3, r1
 801aa62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa6a:	78fa      	ldrb	r2, [r7, #3]
 801aa6c:	4611      	mov	r1, r2
 801aa6e:	4618      	mov	r0, r3
 801aa70:	f7fb fd6b 	bl	801654a <USBD_LL_IsoOUTIncomplete>
}
 801aa74:	bf00      	nop
 801aa76:	3708      	adds	r7, #8
 801aa78:	46bd      	mov	sp, r7
 801aa7a:	bd80      	pop	{r7, pc}

0801aa7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	b082      	sub	sp, #8
 801aa80:	af00      	add	r7, sp, #0
 801aa82:	6078      	str	r0, [r7, #4]
 801aa84:	460b      	mov	r3, r1
 801aa86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa8e:	78fa      	ldrb	r2, [r7, #3]
 801aa90:	4611      	mov	r1, r2
 801aa92:	4618      	mov	r0, r3
 801aa94:	f7fb fd27 	bl	80164e6 <USBD_LL_IsoINIncomplete>
}
 801aa98:	bf00      	nop
 801aa9a:	3708      	adds	r7, #8
 801aa9c:	46bd      	mov	sp, r7
 801aa9e:	bd80      	pop	{r7, pc}

0801aaa0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b082      	sub	sp, #8
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aaae:	4618      	mov	r0, r3
 801aab0:	f7fb fd7d 	bl	80165ae <USBD_LL_DevConnected>
}
 801aab4:	bf00      	nop
 801aab6:	3708      	adds	r7, #8
 801aab8:	46bd      	mov	sp, r7
 801aaba:	bd80      	pop	{r7, pc}

0801aabc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b082      	sub	sp, #8
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aaca:	4618      	mov	r0, r3
 801aacc:	f7fb fd7a 	bl	80165c4 <USBD_LL_DevDisconnected>
}
 801aad0:	bf00      	nop
 801aad2:	3708      	adds	r7, #8
 801aad4:	46bd      	mov	sp, r7
 801aad6:	bd80      	pop	{r7, pc}

0801aad8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801aad8:	b580      	push	{r7, lr}
 801aada:	b082      	sub	sp, #8
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	781b      	ldrb	r3, [r3, #0]
 801aae4:	2b01      	cmp	r3, #1
 801aae6:	d140      	bne.n	801ab6a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801aae8:	4a22      	ldr	r2, [pc, #136]	; (801ab74 <USBD_LL_Init+0x9c>)
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	4a20      	ldr	r2, [pc, #128]	; (801ab74 <USBD_LL_Init+0x9c>)
 801aaf4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801aaf8:	4b1e      	ldr	r3, [pc, #120]	; (801ab74 <USBD_LL_Init+0x9c>)
 801aafa:	4a1f      	ldr	r2, [pc, #124]	; (801ab78 <USBD_LL_Init+0xa0>)
 801aafc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801aafe:	4b1d      	ldr	r3, [pc, #116]	; (801ab74 <USBD_LL_Init+0x9c>)
 801ab00:	2209      	movs	r2, #9
 801ab02:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801ab04:	4b1b      	ldr	r3, [pc, #108]	; (801ab74 <USBD_LL_Init+0x9c>)
 801ab06:	2202      	movs	r2, #2
 801ab08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801ab0a:	4b1a      	ldr	r3, [pc, #104]	; (801ab74 <USBD_LL_Init+0x9c>)
 801ab0c:	2200      	movs	r2, #0
 801ab0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801ab10:	4b18      	ldr	r3, [pc, #96]	; (801ab74 <USBD_LL_Init+0x9c>)
 801ab12:	2202      	movs	r2, #2
 801ab14:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801ab16:	4b17      	ldr	r3, [pc, #92]	; (801ab74 <USBD_LL_Init+0x9c>)
 801ab18:	2200      	movs	r2, #0
 801ab1a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801ab1c:	4b15      	ldr	r3, [pc, #84]	; (801ab74 <USBD_LL_Init+0x9c>)
 801ab1e:	2200      	movs	r2, #0
 801ab20:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801ab22:	4b14      	ldr	r3, [pc, #80]	; (801ab74 <USBD_LL_Init+0x9c>)
 801ab24:	2200      	movs	r2, #0
 801ab26:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801ab28:	4b12      	ldr	r3, [pc, #72]	; (801ab74 <USBD_LL_Init+0x9c>)
 801ab2a:	2200      	movs	r2, #0
 801ab2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801ab2e:	4b11      	ldr	r3, [pc, #68]	; (801ab74 <USBD_LL_Init+0x9c>)
 801ab30:	2200      	movs	r2, #0
 801ab32:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801ab34:	4b0f      	ldr	r3, [pc, #60]	; (801ab74 <USBD_LL_Init+0x9c>)
 801ab36:	2200      	movs	r2, #0
 801ab38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801ab3a:	480e      	ldr	r0, [pc, #56]	; (801ab74 <USBD_LL_Init+0x9c>)
 801ab3c:	f7ee fb55 	bl	80091ea <HAL_PCD_Init>
 801ab40:	4603      	mov	r3, r0
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d001      	beq.n	801ab4a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801ab46:	f7e8 f9b1 	bl	8002eac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801ab4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ab4e:	4809      	ldr	r0, [pc, #36]	; (801ab74 <USBD_LL_Init+0x9c>)
 801ab50:	f7ef fdc3 	bl	800a6da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801ab54:	2280      	movs	r2, #128	; 0x80
 801ab56:	2100      	movs	r1, #0
 801ab58:	4806      	ldr	r0, [pc, #24]	; (801ab74 <USBD_LL_Init+0x9c>)
 801ab5a:	f7ef fd77 	bl	800a64c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801ab5e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801ab62:	2101      	movs	r1, #1
 801ab64:	4803      	ldr	r0, [pc, #12]	; (801ab74 <USBD_LL_Init+0x9c>)
 801ab66:	f7ef fd71 	bl	800a64c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801ab6a:	2300      	movs	r3, #0
}
 801ab6c:	4618      	mov	r0, r3
 801ab6e:	3708      	adds	r7, #8
 801ab70:	46bd      	mov	sp, r7
 801ab72:	bd80      	pop	{r7, pc}
 801ab74:	24002db8 	.word	0x24002db8
 801ab78:	40040000 	.word	0x40040000

0801ab7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801ab7c:	b580      	push	{r7, lr}
 801ab7e:	b084      	sub	sp, #16
 801ab80:	af00      	add	r7, sp, #0
 801ab82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab84:	2300      	movs	r3, #0
 801ab86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab88:	2300      	movs	r3, #0
 801ab8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab92:	4618      	mov	r0, r3
 801ab94:	f7ee fc4d 	bl	8009432 <HAL_PCD_Start>
 801ab98:	4603      	mov	r3, r0
 801ab9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab9c:	7bfb      	ldrb	r3, [r7, #15]
 801ab9e:	4618      	mov	r0, r3
 801aba0:	f000 f942 	bl	801ae28 <USBD_Get_USB_Status>
 801aba4:	4603      	mov	r3, r0
 801aba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aba8:	7bbb      	ldrb	r3, [r7, #14]
}
 801abaa:	4618      	mov	r0, r3
 801abac:	3710      	adds	r7, #16
 801abae:	46bd      	mov	sp, r7
 801abb0:	bd80      	pop	{r7, pc}

0801abb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801abb2:	b580      	push	{r7, lr}
 801abb4:	b084      	sub	sp, #16
 801abb6:	af00      	add	r7, sp, #0
 801abb8:	6078      	str	r0, [r7, #4]
 801abba:	4608      	mov	r0, r1
 801abbc:	4611      	mov	r1, r2
 801abbe:	461a      	mov	r2, r3
 801abc0:	4603      	mov	r3, r0
 801abc2:	70fb      	strb	r3, [r7, #3]
 801abc4:	460b      	mov	r3, r1
 801abc6:	70bb      	strb	r3, [r7, #2]
 801abc8:	4613      	mov	r3, r2
 801abca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abcc:	2300      	movs	r3, #0
 801abce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801abd0:	2300      	movs	r3, #0
 801abd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801abda:	78bb      	ldrb	r3, [r7, #2]
 801abdc:	883a      	ldrh	r2, [r7, #0]
 801abde:	78f9      	ldrb	r1, [r7, #3]
 801abe0:	f7ef f94d 	bl	8009e7e <HAL_PCD_EP_Open>
 801abe4:	4603      	mov	r3, r0
 801abe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801abe8:	7bfb      	ldrb	r3, [r7, #15]
 801abea:	4618      	mov	r0, r3
 801abec:	f000 f91c 	bl	801ae28 <USBD_Get_USB_Status>
 801abf0:	4603      	mov	r3, r0
 801abf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801abf4:	7bbb      	ldrb	r3, [r7, #14]
}
 801abf6:	4618      	mov	r0, r3
 801abf8:	3710      	adds	r7, #16
 801abfa:	46bd      	mov	sp, r7
 801abfc:	bd80      	pop	{r7, pc}

0801abfe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801abfe:	b580      	push	{r7, lr}
 801ac00:	b084      	sub	sp, #16
 801ac02:	af00      	add	r7, sp, #0
 801ac04:	6078      	str	r0, [r7, #4]
 801ac06:	460b      	mov	r3, r1
 801ac08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac0a:	2300      	movs	r3, #0
 801ac0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac0e:	2300      	movs	r3, #0
 801ac10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac18:	78fa      	ldrb	r2, [r7, #3]
 801ac1a:	4611      	mov	r1, r2
 801ac1c:	4618      	mov	r0, r3
 801ac1e:	f7ef f996 	bl	8009f4e <HAL_PCD_EP_Close>
 801ac22:	4603      	mov	r3, r0
 801ac24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac26:	7bfb      	ldrb	r3, [r7, #15]
 801ac28:	4618      	mov	r0, r3
 801ac2a:	f000 f8fd 	bl	801ae28 <USBD_Get_USB_Status>
 801ac2e:	4603      	mov	r3, r0
 801ac30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac32:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac34:	4618      	mov	r0, r3
 801ac36:	3710      	adds	r7, #16
 801ac38:	46bd      	mov	sp, r7
 801ac3a:	bd80      	pop	{r7, pc}

0801ac3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac3c:	b580      	push	{r7, lr}
 801ac3e:	b084      	sub	sp, #16
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	6078      	str	r0, [r7, #4]
 801ac44:	460b      	mov	r3, r1
 801ac46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac48:	2300      	movs	r3, #0
 801ac4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac56:	78fa      	ldrb	r2, [r7, #3]
 801ac58:	4611      	mov	r1, r2
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	f7ef fa50 	bl	800a100 <HAL_PCD_EP_SetStall>
 801ac60:	4603      	mov	r3, r0
 801ac62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac64:	7bfb      	ldrb	r3, [r7, #15]
 801ac66:	4618      	mov	r0, r3
 801ac68:	f000 f8de 	bl	801ae28 <USBD_Get_USB_Status>
 801ac6c:	4603      	mov	r3, r0
 801ac6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac70:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac72:	4618      	mov	r0, r3
 801ac74:	3710      	adds	r7, #16
 801ac76:	46bd      	mov	sp, r7
 801ac78:	bd80      	pop	{r7, pc}

0801ac7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac7a:	b580      	push	{r7, lr}
 801ac7c:	b084      	sub	sp, #16
 801ac7e:	af00      	add	r7, sp, #0
 801ac80:	6078      	str	r0, [r7, #4]
 801ac82:	460b      	mov	r3, r1
 801ac84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac86:	2300      	movs	r3, #0
 801ac88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac94:	78fa      	ldrb	r2, [r7, #3]
 801ac96:	4611      	mov	r1, r2
 801ac98:	4618      	mov	r0, r3
 801ac9a:	f7ef fa95 	bl	800a1c8 <HAL_PCD_EP_ClrStall>
 801ac9e:	4603      	mov	r3, r0
 801aca0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aca2:	7bfb      	ldrb	r3, [r7, #15]
 801aca4:	4618      	mov	r0, r3
 801aca6:	f000 f8bf 	bl	801ae28 <USBD_Get_USB_Status>
 801acaa:	4603      	mov	r3, r0
 801acac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801acae:	7bbb      	ldrb	r3, [r7, #14]
}
 801acb0:	4618      	mov	r0, r3
 801acb2:	3710      	adds	r7, #16
 801acb4:	46bd      	mov	sp, r7
 801acb6:	bd80      	pop	{r7, pc}

0801acb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801acb8:	b480      	push	{r7}
 801acba:	b085      	sub	sp, #20
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	6078      	str	r0, [r7, #4]
 801acc0:	460b      	mov	r3, r1
 801acc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801acca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801accc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	da0b      	bge.n	801acec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801acd4:	78fb      	ldrb	r3, [r7, #3]
 801acd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801acda:	68f9      	ldr	r1, [r7, #12]
 801acdc:	4613      	mov	r3, r2
 801acde:	00db      	lsls	r3, r3, #3
 801ace0:	4413      	add	r3, r2
 801ace2:	009b      	lsls	r3, r3, #2
 801ace4:	440b      	add	r3, r1
 801ace6:	333e      	adds	r3, #62	; 0x3e
 801ace8:	781b      	ldrb	r3, [r3, #0]
 801acea:	e00b      	b.n	801ad04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801acec:	78fb      	ldrb	r3, [r7, #3]
 801acee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801acf2:	68f9      	ldr	r1, [r7, #12]
 801acf4:	4613      	mov	r3, r2
 801acf6:	00db      	lsls	r3, r3, #3
 801acf8:	4413      	add	r3, r2
 801acfa:	009b      	lsls	r3, r3, #2
 801acfc:	440b      	add	r3, r1
 801acfe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801ad02:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ad04:	4618      	mov	r0, r3
 801ad06:	3714      	adds	r7, #20
 801ad08:	46bd      	mov	sp, r7
 801ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad0e:	4770      	bx	lr

0801ad10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ad10:	b580      	push	{r7, lr}
 801ad12:	b084      	sub	sp, #16
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	6078      	str	r0, [r7, #4]
 801ad18:	460b      	mov	r3, r1
 801ad1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad1c:	2300      	movs	r3, #0
 801ad1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad20:	2300      	movs	r3, #0
 801ad22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ad2a:	78fa      	ldrb	r2, [r7, #3]
 801ad2c:	4611      	mov	r1, r2
 801ad2e:	4618      	mov	r0, r3
 801ad30:	f7ef f880 	bl	8009e34 <HAL_PCD_SetAddress>
 801ad34:	4603      	mov	r3, r0
 801ad36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad38:	7bfb      	ldrb	r3, [r7, #15]
 801ad3a:	4618      	mov	r0, r3
 801ad3c:	f000 f874 	bl	801ae28 <USBD_Get_USB_Status>
 801ad40:	4603      	mov	r3, r0
 801ad42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ad44:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad46:	4618      	mov	r0, r3
 801ad48:	3710      	adds	r7, #16
 801ad4a:	46bd      	mov	sp, r7
 801ad4c:	bd80      	pop	{r7, pc}

0801ad4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ad4e:	b580      	push	{r7, lr}
 801ad50:	b086      	sub	sp, #24
 801ad52:	af00      	add	r7, sp, #0
 801ad54:	60f8      	str	r0, [r7, #12]
 801ad56:	607a      	str	r2, [r7, #4]
 801ad58:	603b      	str	r3, [r7, #0]
 801ad5a:	460b      	mov	r3, r1
 801ad5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad5e:	2300      	movs	r3, #0
 801ad60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad62:	2300      	movs	r3, #0
 801ad64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ad66:	68fb      	ldr	r3, [r7, #12]
 801ad68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ad6c:	7af9      	ldrb	r1, [r7, #11]
 801ad6e:	683b      	ldr	r3, [r7, #0]
 801ad70:	687a      	ldr	r2, [r7, #4]
 801ad72:	f7ef f98a 	bl	800a08a <HAL_PCD_EP_Transmit>
 801ad76:	4603      	mov	r3, r0
 801ad78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad7a:	7dfb      	ldrb	r3, [r7, #23]
 801ad7c:	4618      	mov	r0, r3
 801ad7e:	f000 f853 	bl	801ae28 <USBD_Get_USB_Status>
 801ad82:	4603      	mov	r3, r0
 801ad84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ad86:	7dbb      	ldrb	r3, [r7, #22]
}
 801ad88:	4618      	mov	r0, r3
 801ad8a:	3718      	adds	r7, #24
 801ad8c:	46bd      	mov	sp, r7
 801ad8e:	bd80      	pop	{r7, pc}

0801ad90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ad90:	b580      	push	{r7, lr}
 801ad92:	b086      	sub	sp, #24
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	60f8      	str	r0, [r7, #12]
 801ad98:	607a      	str	r2, [r7, #4]
 801ad9a:	603b      	str	r3, [r7, #0]
 801ad9c:	460b      	mov	r3, r1
 801ad9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ada0:	2300      	movs	r3, #0
 801ada2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ada4:	2300      	movs	r3, #0
 801ada6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ada8:	68fb      	ldr	r3, [r7, #12]
 801adaa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801adae:	7af9      	ldrb	r1, [r7, #11]
 801adb0:	683b      	ldr	r3, [r7, #0]
 801adb2:	687a      	ldr	r2, [r7, #4]
 801adb4:	f7ef f915 	bl	8009fe2 <HAL_PCD_EP_Receive>
 801adb8:	4603      	mov	r3, r0
 801adba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801adbc:	7dfb      	ldrb	r3, [r7, #23]
 801adbe:	4618      	mov	r0, r3
 801adc0:	f000 f832 	bl	801ae28 <USBD_Get_USB_Status>
 801adc4:	4603      	mov	r3, r0
 801adc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801adc8:	7dbb      	ldrb	r3, [r7, #22]
}
 801adca:	4618      	mov	r0, r3
 801adcc:	3718      	adds	r7, #24
 801adce:	46bd      	mov	sp, r7
 801add0:	bd80      	pop	{r7, pc}

0801add2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801add2:	b580      	push	{r7, lr}
 801add4:	b082      	sub	sp, #8
 801add6:	af00      	add	r7, sp, #0
 801add8:	6078      	str	r0, [r7, #4]
 801adda:	460b      	mov	r3, r1
 801addc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ade4:	78fa      	ldrb	r2, [r7, #3]
 801ade6:	4611      	mov	r1, r2
 801ade8:	4618      	mov	r0, r3
 801adea:	f7ef f936 	bl	800a05a <HAL_PCD_EP_GetRxCount>
 801adee:	4603      	mov	r3, r0
}
 801adf0:	4618      	mov	r0, r3
 801adf2:	3708      	adds	r7, #8
 801adf4:	46bd      	mov	sp, r7
 801adf6:	bd80      	pop	{r7, pc}

0801adf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801adf8:	b480      	push	{r7}
 801adfa:	b083      	sub	sp, #12
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801ae00:	4b03      	ldr	r3, [pc, #12]	; (801ae10 <USBD_static_malloc+0x18>)
}
 801ae02:	4618      	mov	r0, r3
 801ae04:	370c      	adds	r7, #12
 801ae06:	46bd      	mov	sp, r7
 801ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae0c:	4770      	bx	lr
 801ae0e:	bf00      	nop
 801ae10:	240032c4 	.word	0x240032c4

0801ae14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801ae14:	b480      	push	{r7}
 801ae16:	b083      	sub	sp, #12
 801ae18:	af00      	add	r7, sp, #0
 801ae1a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801ae1c:	bf00      	nop
 801ae1e:	370c      	adds	r7, #12
 801ae20:	46bd      	mov	sp, r7
 801ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae26:	4770      	bx	lr

0801ae28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ae28:	b480      	push	{r7}
 801ae2a:	b085      	sub	sp, #20
 801ae2c:	af00      	add	r7, sp, #0
 801ae2e:	4603      	mov	r3, r0
 801ae30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ae32:	2300      	movs	r3, #0
 801ae34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ae36:	79fb      	ldrb	r3, [r7, #7]
 801ae38:	2b03      	cmp	r3, #3
 801ae3a:	d817      	bhi.n	801ae6c <USBD_Get_USB_Status+0x44>
 801ae3c:	a201      	add	r2, pc, #4	; (adr r2, 801ae44 <USBD_Get_USB_Status+0x1c>)
 801ae3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae42:	bf00      	nop
 801ae44:	0801ae55 	.word	0x0801ae55
 801ae48:	0801ae5b 	.word	0x0801ae5b
 801ae4c:	0801ae61 	.word	0x0801ae61
 801ae50:	0801ae67 	.word	0x0801ae67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ae54:	2300      	movs	r3, #0
 801ae56:	73fb      	strb	r3, [r7, #15]
    break;
 801ae58:	e00b      	b.n	801ae72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ae5a:	2303      	movs	r3, #3
 801ae5c:	73fb      	strb	r3, [r7, #15]
    break;
 801ae5e:	e008      	b.n	801ae72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ae60:	2301      	movs	r3, #1
 801ae62:	73fb      	strb	r3, [r7, #15]
    break;
 801ae64:	e005      	b.n	801ae72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ae66:	2303      	movs	r3, #3
 801ae68:	73fb      	strb	r3, [r7, #15]
    break;
 801ae6a:	e002      	b.n	801ae72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ae6c:	2303      	movs	r3, #3
 801ae6e:	73fb      	strb	r3, [r7, #15]
    break;
 801ae70:	bf00      	nop
  }
  return usb_status;
 801ae72:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae74:	4618      	mov	r0, r3
 801ae76:	3714      	adds	r7, #20
 801ae78:	46bd      	mov	sp, r7
 801ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae7e:	4770      	bx	lr

0801ae80 <__cvt>:
 801ae80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae82:	ed2d 8b02 	vpush	{d8}
 801ae86:	eeb0 8b40 	vmov.f64	d8, d0
 801ae8a:	b085      	sub	sp, #20
 801ae8c:	4617      	mov	r7, r2
 801ae8e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ae90:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ae92:	ee18 2a90 	vmov	r2, s17
 801ae96:	f025 0520 	bic.w	r5, r5, #32
 801ae9a:	2a00      	cmp	r2, #0
 801ae9c:	bfb6      	itet	lt
 801ae9e:	222d      	movlt	r2, #45	; 0x2d
 801aea0:	2200      	movge	r2, #0
 801aea2:	eeb1 8b40 	vneglt.f64	d8, d0
 801aea6:	2d46      	cmp	r5, #70	; 0x46
 801aea8:	460c      	mov	r4, r1
 801aeaa:	701a      	strb	r2, [r3, #0]
 801aeac:	d004      	beq.n	801aeb8 <__cvt+0x38>
 801aeae:	2d45      	cmp	r5, #69	; 0x45
 801aeb0:	d100      	bne.n	801aeb4 <__cvt+0x34>
 801aeb2:	3401      	adds	r4, #1
 801aeb4:	2102      	movs	r1, #2
 801aeb6:	e000      	b.n	801aeba <__cvt+0x3a>
 801aeb8:	2103      	movs	r1, #3
 801aeba:	ab03      	add	r3, sp, #12
 801aebc:	9301      	str	r3, [sp, #4]
 801aebe:	ab02      	add	r3, sp, #8
 801aec0:	9300      	str	r3, [sp, #0]
 801aec2:	4622      	mov	r2, r4
 801aec4:	4633      	mov	r3, r6
 801aec6:	eeb0 0b48 	vmov.f64	d0, d8
 801aeca:	f001 f891 	bl	801bff0 <_dtoa_r>
 801aece:	2d47      	cmp	r5, #71	; 0x47
 801aed0:	d101      	bne.n	801aed6 <__cvt+0x56>
 801aed2:	07fb      	lsls	r3, r7, #31
 801aed4:	d51a      	bpl.n	801af0c <__cvt+0x8c>
 801aed6:	2d46      	cmp	r5, #70	; 0x46
 801aed8:	eb00 0204 	add.w	r2, r0, r4
 801aedc:	d10c      	bne.n	801aef8 <__cvt+0x78>
 801aede:	7803      	ldrb	r3, [r0, #0]
 801aee0:	2b30      	cmp	r3, #48	; 0x30
 801aee2:	d107      	bne.n	801aef4 <__cvt+0x74>
 801aee4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801aee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aeec:	bf1c      	itt	ne
 801aeee:	f1c4 0401 	rsbne	r4, r4, #1
 801aef2:	6034      	strne	r4, [r6, #0]
 801aef4:	6833      	ldr	r3, [r6, #0]
 801aef6:	441a      	add	r2, r3
 801aef8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801aefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af00:	bf08      	it	eq
 801af02:	9203      	streq	r2, [sp, #12]
 801af04:	2130      	movs	r1, #48	; 0x30
 801af06:	9b03      	ldr	r3, [sp, #12]
 801af08:	4293      	cmp	r3, r2
 801af0a:	d307      	bcc.n	801af1c <__cvt+0x9c>
 801af0c:	9b03      	ldr	r3, [sp, #12]
 801af0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801af10:	1a1b      	subs	r3, r3, r0
 801af12:	6013      	str	r3, [r2, #0]
 801af14:	b005      	add	sp, #20
 801af16:	ecbd 8b02 	vpop	{d8}
 801af1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af1c:	1c5c      	adds	r4, r3, #1
 801af1e:	9403      	str	r4, [sp, #12]
 801af20:	7019      	strb	r1, [r3, #0]
 801af22:	e7f0      	b.n	801af06 <__cvt+0x86>

0801af24 <__exponent>:
 801af24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801af26:	4603      	mov	r3, r0
 801af28:	2900      	cmp	r1, #0
 801af2a:	bfb8      	it	lt
 801af2c:	4249      	neglt	r1, r1
 801af2e:	f803 2b02 	strb.w	r2, [r3], #2
 801af32:	bfb4      	ite	lt
 801af34:	222d      	movlt	r2, #45	; 0x2d
 801af36:	222b      	movge	r2, #43	; 0x2b
 801af38:	2909      	cmp	r1, #9
 801af3a:	7042      	strb	r2, [r0, #1]
 801af3c:	dd2a      	ble.n	801af94 <__exponent+0x70>
 801af3e:	f10d 0207 	add.w	r2, sp, #7
 801af42:	4617      	mov	r7, r2
 801af44:	260a      	movs	r6, #10
 801af46:	4694      	mov	ip, r2
 801af48:	fb91 f5f6 	sdiv	r5, r1, r6
 801af4c:	fb06 1415 	mls	r4, r6, r5, r1
 801af50:	3430      	adds	r4, #48	; 0x30
 801af52:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801af56:	460c      	mov	r4, r1
 801af58:	2c63      	cmp	r4, #99	; 0x63
 801af5a:	f102 32ff 	add.w	r2, r2, #4294967295
 801af5e:	4629      	mov	r1, r5
 801af60:	dcf1      	bgt.n	801af46 <__exponent+0x22>
 801af62:	3130      	adds	r1, #48	; 0x30
 801af64:	f1ac 0402 	sub.w	r4, ip, #2
 801af68:	f802 1c01 	strb.w	r1, [r2, #-1]
 801af6c:	1c41      	adds	r1, r0, #1
 801af6e:	4622      	mov	r2, r4
 801af70:	42ba      	cmp	r2, r7
 801af72:	d30a      	bcc.n	801af8a <__exponent+0x66>
 801af74:	f10d 0209 	add.w	r2, sp, #9
 801af78:	eba2 020c 	sub.w	r2, r2, ip
 801af7c:	42bc      	cmp	r4, r7
 801af7e:	bf88      	it	hi
 801af80:	2200      	movhi	r2, #0
 801af82:	4413      	add	r3, r2
 801af84:	1a18      	subs	r0, r3, r0
 801af86:	b003      	add	sp, #12
 801af88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af8a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801af8e:	f801 5f01 	strb.w	r5, [r1, #1]!
 801af92:	e7ed      	b.n	801af70 <__exponent+0x4c>
 801af94:	2330      	movs	r3, #48	; 0x30
 801af96:	3130      	adds	r1, #48	; 0x30
 801af98:	7083      	strb	r3, [r0, #2]
 801af9a:	70c1      	strb	r1, [r0, #3]
 801af9c:	1d03      	adds	r3, r0, #4
 801af9e:	e7f1      	b.n	801af84 <__exponent+0x60>

0801afa0 <_printf_float>:
 801afa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afa4:	b08b      	sub	sp, #44	; 0x2c
 801afa6:	460c      	mov	r4, r1
 801afa8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801afac:	4616      	mov	r6, r2
 801afae:	461f      	mov	r7, r3
 801afb0:	4605      	mov	r5, r0
 801afb2:	f000 feff 	bl	801bdb4 <_localeconv_r>
 801afb6:	f8d0 b000 	ldr.w	fp, [r0]
 801afba:	4658      	mov	r0, fp
 801afbc:	f7e5 fa08 	bl	80003d0 <strlen>
 801afc0:	2300      	movs	r3, #0
 801afc2:	9308      	str	r3, [sp, #32]
 801afc4:	f8d8 3000 	ldr.w	r3, [r8]
 801afc8:	f894 9018 	ldrb.w	r9, [r4, #24]
 801afcc:	6822      	ldr	r2, [r4, #0]
 801afce:	3307      	adds	r3, #7
 801afd0:	f023 0307 	bic.w	r3, r3, #7
 801afd4:	f103 0108 	add.w	r1, r3, #8
 801afd8:	f8c8 1000 	str.w	r1, [r8]
 801afdc:	ed93 0b00 	vldr	d0, [r3]
 801afe0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801b240 <_printf_float+0x2a0>
 801afe4:	eeb0 7bc0 	vabs.f64	d7, d0
 801afe8:	eeb4 7b46 	vcmp.f64	d7, d6
 801afec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aff0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801aff4:	4682      	mov	sl, r0
 801aff6:	dd24      	ble.n	801b042 <_printf_float+0xa2>
 801aff8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801affc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b000:	d502      	bpl.n	801b008 <_printf_float+0x68>
 801b002:	232d      	movs	r3, #45	; 0x2d
 801b004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b008:	498f      	ldr	r1, [pc, #572]	; (801b248 <_printf_float+0x2a8>)
 801b00a:	4b90      	ldr	r3, [pc, #576]	; (801b24c <_printf_float+0x2ac>)
 801b00c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801b010:	bf94      	ite	ls
 801b012:	4688      	movls	r8, r1
 801b014:	4698      	movhi	r8, r3
 801b016:	2303      	movs	r3, #3
 801b018:	6123      	str	r3, [r4, #16]
 801b01a:	f022 0204 	bic.w	r2, r2, #4
 801b01e:	2300      	movs	r3, #0
 801b020:	6022      	str	r2, [r4, #0]
 801b022:	9304      	str	r3, [sp, #16]
 801b024:	9700      	str	r7, [sp, #0]
 801b026:	4633      	mov	r3, r6
 801b028:	aa09      	add	r2, sp, #36	; 0x24
 801b02a:	4621      	mov	r1, r4
 801b02c:	4628      	mov	r0, r5
 801b02e:	f000 f9d1 	bl	801b3d4 <_printf_common>
 801b032:	3001      	adds	r0, #1
 801b034:	f040 808a 	bne.w	801b14c <_printf_float+0x1ac>
 801b038:	f04f 30ff 	mov.w	r0, #4294967295
 801b03c:	b00b      	add	sp, #44	; 0x2c
 801b03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b042:	eeb4 0b40 	vcmp.f64	d0, d0
 801b046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b04a:	d709      	bvc.n	801b060 <_printf_float+0xc0>
 801b04c:	ee10 3a90 	vmov	r3, s1
 801b050:	2b00      	cmp	r3, #0
 801b052:	bfbc      	itt	lt
 801b054:	232d      	movlt	r3, #45	; 0x2d
 801b056:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b05a:	497d      	ldr	r1, [pc, #500]	; (801b250 <_printf_float+0x2b0>)
 801b05c:	4b7d      	ldr	r3, [pc, #500]	; (801b254 <_printf_float+0x2b4>)
 801b05e:	e7d5      	b.n	801b00c <_printf_float+0x6c>
 801b060:	6863      	ldr	r3, [r4, #4]
 801b062:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801b066:	9104      	str	r1, [sp, #16]
 801b068:	1c59      	adds	r1, r3, #1
 801b06a:	d13c      	bne.n	801b0e6 <_printf_float+0x146>
 801b06c:	2306      	movs	r3, #6
 801b06e:	6063      	str	r3, [r4, #4]
 801b070:	2300      	movs	r3, #0
 801b072:	9303      	str	r3, [sp, #12]
 801b074:	ab08      	add	r3, sp, #32
 801b076:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801b07a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b07e:	ab07      	add	r3, sp, #28
 801b080:	6861      	ldr	r1, [r4, #4]
 801b082:	9300      	str	r3, [sp, #0]
 801b084:	6022      	str	r2, [r4, #0]
 801b086:	f10d 031b 	add.w	r3, sp, #27
 801b08a:	4628      	mov	r0, r5
 801b08c:	f7ff fef8 	bl	801ae80 <__cvt>
 801b090:	9b04      	ldr	r3, [sp, #16]
 801b092:	9907      	ldr	r1, [sp, #28]
 801b094:	2b47      	cmp	r3, #71	; 0x47
 801b096:	4680      	mov	r8, r0
 801b098:	d108      	bne.n	801b0ac <_printf_float+0x10c>
 801b09a:	1cc8      	adds	r0, r1, #3
 801b09c:	db02      	blt.n	801b0a4 <_printf_float+0x104>
 801b09e:	6863      	ldr	r3, [r4, #4]
 801b0a0:	4299      	cmp	r1, r3
 801b0a2:	dd41      	ble.n	801b128 <_printf_float+0x188>
 801b0a4:	f1a9 0902 	sub.w	r9, r9, #2
 801b0a8:	fa5f f989 	uxtb.w	r9, r9
 801b0ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b0b0:	d820      	bhi.n	801b0f4 <_printf_float+0x154>
 801b0b2:	3901      	subs	r1, #1
 801b0b4:	464a      	mov	r2, r9
 801b0b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b0ba:	9107      	str	r1, [sp, #28]
 801b0bc:	f7ff ff32 	bl	801af24 <__exponent>
 801b0c0:	9a08      	ldr	r2, [sp, #32]
 801b0c2:	9004      	str	r0, [sp, #16]
 801b0c4:	1813      	adds	r3, r2, r0
 801b0c6:	2a01      	cmp	r2, #1
 801b0c8:	6123      	str	r3, [r4, #16]
 801b0ca:	dc02      	bgt.n	801b0d2 <_printf_float+0x132>
 801b0cc:	6822      	ldr	r2, [r4, #0]
 801b0ce:	07d2      	lsls	r2, r2, #31
 801b0d0:	d501      	bpl.n	801b0d6 <_printf_float+0x136>
 801b0d2:	3301      	adds	r3, #1
 801b0d4:	6123      	str	r3, [r4, #16]
 801b0d6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d0a2      	beq.n	801b024 <_printf_float+0x84>
 801b0de:	232d      	movs	r3, #45	; 0x2d
 801b0e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b0e4:	e79e      	b.n	801b024 <_printf_float+0x84>
 801b0e6:	9904      	ldr	r1, [sp, #16]
 801b0e8:	2947      	cmp	r1, #71	; 0x47
 801b0ea:	d1c1      	bne.n	801b070 <_printf_float+0xd0>
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d1bf      	bne.n	801b070 <_printf_float+0xd0>
 801b0f0:	2301      	movs	r3, #1
 801b0f2:	e7bc      	b.n	801b06e <_printf_float+0xce>
 801b0f4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801b0f8:	d118      	bne.n	801b12c <_printf_float+0x18c>
 801b0fa:	2900      	cmp	r1, #0
 801b0fc:	6863      	ldr	r3, [r4, #4]
 801b0fe:	dd0b      	ble.n	801b118 <_printf_float+0x178>
 801b100:	6121      	str	r1, [r4, #16]
 801b102:	b913      	cbnz	r3, 801b10a <_printf_float+0x16a>
 801b104:	6822      	ldr	r2, [r4, #0]
 801b106:	07d0      	lsls	r0, r2, #31
 801b108:	d502      	bpl.n	801b110 <_printf_float+0x170>
 801b10a:	3301      	adds	r3, #1
 801b10c:	440b      	add	r3, r1
 801b10e:	6123      	str	r3, [r4, #16]
 801b110:	2300      	movs	r3, #0
 801b112:	65a1      	str	r1, [r4, #88]	; 0x58
 801b114:	9304      	str	r3, [sp, #16]
 801b116:	e7de      	b.n	801b0d6 <_printf_float+0x136>
 801b118:	b913      	cbnz	r3, 801b120 <_printf_float+0x180>
 801b11a:	6822      	ldr	r2, [r4, #0]
 801b11c:	07d2      	lsls	r2, r2, #31
 801b11e:	d501      	bpl.n	801b124 <_printf_float+0x184>
 801b120:	3302      	adds	r3, #2
 801b122:	e7f4      	b.n	801b10e <_printf_float+0x16e>
 801b124:	2301      	movs	r3, #1
 801b126:	e7f2      	b.n	801b10e <_printf_float+0x16e>
 801b128:	f04f 0967 	mov.w	r9, #103	; 0x67
 801b12c:	9b08      	ldr	r3, [sp, #32]
 801b12e:	4299      	cmp	r1, r3
 801b130:	db05      	blt.n	801b13e <_printf_float+0x19e>
 801b132:	6823      	ldr	r3, [r4, #0]
 801b134:	6121      	str	r1, [r4, #16]
 801b136:	07d8      	lsls	r0, r3, #31
 801b138:	d5ea      	bpl.n	801b110 <_printf_float+0x170>
 801b13a:	1c4b      	adds	r3, r1, #1
 801b13c:	e7e7      	b.n	801b10e <_printf_float+0x16e>
 801b13e:	2900      	cmp	r1, #0
 801b140:	bfd4      	ite	le
 801b142:	f1c1 0202 	rsble	r2, r1, #2
 801b146:	2201      	movgt	r2, #1
 801b148:	4413      	add	r3, r2
 801b14a:	e7e0      	b.n	801b10e <_printf_float+0x16e>
 801b14c:	6823      	ldr	r3, [r4, #0]
 801b14e:	055a      	lsls	r2, r3, #21
 801b150:	d407      	bmi.n	801b162 <_printf_float+0x1c2>
 801b152:	6923      	ldr	r3, [r4, #16]
 801b154:	4642      	mov	r2, r8
 801b156:	4631      	mov	r1, r6
 801b158:	4628      	mov	r0, r5
 801b15a:	47b8      	blx	r7
 801b15c:	3001      	adds	r0, #1
 801b15e:	d12a      	bne.n	801b1b6 <_printf_float+0x216>
 801b160:	e76a      	b.n	801b038 <_printf_float+0x98>
 801b162:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b166:	f240 80e0 	bls.w	801b32a <_printf_float+0x38a>
 801b16a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b16e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b176:	d133      	bne.n	801b1e0 <_printf_float+0x240>
 801b178:	4a37      	ldr	r2, [pc, #220]	; (801b258 <_printf_float+0x2b8>)
 801b17a:	2301      	movs	r3, #1
 801b17c:	4631      	mov	r1, r6
 801b17e:	4628      	mov	r0, r5
 801b180:	47b8      	blx	r7
 801b182:	3001      	adds	r0, #1
 801b184:	f43f af58 	beq.w	801b038 <_printf_float+0x98>
 801b188:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b18c:	429a      	cmp	r2, r3
 801b18e:	db02      	blt.n	801b196 <_printf_float+0x1f6>
 801b190:	6823      	ldr	r3, [r4, #0]
 801b192:	07d8      	lsls	r0, r3, #31
 801b194:	d50f      	bpl.n	801b1b6 <_printf_float+0x216>
 801b196:	4653      	mov	r3, sl
 801b198:	465a      	mov	r2, fp
 801b19a:	4631      	mov	r1, r6
 801b19c:	4628      	mov	r0, r5
 801b19e:	47b8      	blx	r7
 801b1a0:	3001      	adds	r0, #1
 801b1a2:	f43f af49 	beq.w	801b038 <_printf_float+0x98>
 801b1a6:	f04f 0800 	mov.w	r8, #0
 801b1aa:	f104 091a 	add.w	r9, r4, #26
 801b1ae:	9b08      	ldr	r3, [sp, #32]
 801b1b0:	3b01      	subs	r3, #1
 801b1b2:	4543      	cmp	r3, r8
 801b1b4:	dc09      	bgt.n	801b1ca <_printf_float+0x22a>
 801b1b6:	6823      	ldr	r3, [r4, #0]
 801b1b8:	079b      	lsls	r3, r3, #30
 801b1ba:	f100 8106 	bmi.w	801b3ca <_printf_float+0x42a>
 801b1be:	68e0      	ldr	r0, [r4, #12]
 801b1c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1c2:	4298      	cmp	r0, r3
 801b1c4:	bfb8      	it	lt
 801b1c6:	4618      	movlt	r0, r3
 801b1c8:	e738      	b.n	801b03c <_printf_float+0x9c>
 801b1ca:	2301      	movs	r3, #1
 801b1cc:	464a      	mov	r2, r9
 801b1ce:	4631      	mov	r1, r6
 801b1d0:	4628      	mov	r0, r5
 801b1d2:	47b8      	blx	r7
 801b1d4:	3001      	adds	r0, #1
 801b1d6:	f43f af2f 	beq.w	801b038 <_printf_float+0x98>
 801b1da:	f108 0801 	add.w	r8, r8, #1
 801b1de:	e7e6      	b.n	801b1ae <_printf_float+0x20e>
 801b1e0:	9b07      	ldr	r3, [sp, #28]
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	dc3a      	bgt.n	801b25c <_printf_float+0x2bc>
 801b1e6:	4a1c      	ldr	r2, [pc, #112]	; (801b258 <_printf_float+0x2b8>)
 801b1e8:	2301      	movs	r3, #1
 801b1ea:	4631      	mov	r1, r6
 801b1ec:	4628      	mov	r0, r5
 801b1ee:	47b8      	blx	r7
 801b1f0:	3001      	adds	r0, #1
 801b1f2:	f43f af21 	beq.w	801b038 <_printf_float+0x98>
 801b1f6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801b1fa:	4313      	orrs	r3, r2
 801b1fc:	d102      	bne.n	801b204 <_printf_float+0x264>
 801b1fe:	6823      	ldr	r3, [r4, #0]
 801b200:	07d9      	lsls	r1, r3, #31
 801b202:	d5d8      	bpl.n	801b1b6 <_printf_float+0x216>
 801b204:	4653      	mov	r3, sl
 801b206:	465a      	mov	r2, fp
 801b208:	4631      	mov	r1, r6
 801b20a:	4628      	mov	r0, r5
 801b20c:	47b8      	blx	r7
 801b20e:	3001      	adds	r0, #1
 801b210:	f43f af12 	beq.w	801b038 <_printf_float+0x98>
 801b214:	f04f 0900 	mov.w	r9, #0
 801b218:	f104 0a1a 	add.w	sl, r4, #26
 801b21c:	9b07      	ldr	r3, [sp, #28]
 801b21e:	425b      	negs	r3, r3
 801b220:	454b      	cmp	r3, r9
 801b222:	dc01      	bgt.n	801b228 <_printf_float+0x288>
 801b224:	9b08      	ldr	r3, [sp, #32]
 801b226:	e795      	b.n	801b154 <_printf_float+0x1b4>
 801b228:	2301      	movs	r3, #1
 801b22a:	4652      	mov	r2, sl
 801b22c:	4631      	mov	r1, r6
 801b22e:	4628      	mov	r0, r5
 801b230:	47b8      	blx	r7
 801b232:	3001      	adds	r0, #1
 801b234:	f43f af00 	beq.w	801b038 <_printf_float+0x98>
 801b238:	f109 0901 	add.w	r9, r9, #1
 801b23c:	e7ee      	b.n	801b21c <_printf_float+0x27c>
 801b23e:	bf00      	nop
 801b240:	ffffffff 	.word	0xffffffff
 801b244:	7fefffff 	.word	0x7fefffff
 801b248:	08020444 	.word	0x08020444
 801b24c:	08020448 	.word	0x08020448
 801b250:	0802044c 	.word	0x0802044c
 801b254:	08020450 	.word	0x08020450
 801b258:	080207e0 	.word	0x080207e0
 801b25c:	9a08      	ldr	r2, [sp, #32]
 801b25e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b260:	429a      	cmp	r2, r3
 801b262:	bfa8      	it	ge
 801b264:	461a      	movge	r2, r3
 801b266:	2a00      	cmp	r2, #0
 801b268:	4691      	mov	r9, r2
 801b26a:	dc38      	bgt.n	801b2de <_printf_float+0x33e>
 801b26c:	2300      	movs	r3, #0
 801b26e:	9305      	str	r3, [sp, #20]
 801b270:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b274:	f104 021a 	add.w	r2, r4, #26
 801b278:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b27a:	9905      	ldr	r1, [sp, #20]
 801b27c:	9304      	str	r3, [sp, #16]
 801b27e:	eba3 0309 	sub.w	r3, r3, r9
 801b282:	428b      	cmp	r3, r1
 801b284:	dc33      	bgt.n	801b2ee <_printf_float+0x34e>
 801b286:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b28a:	429a      	cmp	r2, r3
 801b28c:	db3c      	blt.n	801b308 <_printf_float+0x368>
 801b28e:	6823      	ldr	r3, [r4, #0]
 801b290:	07da      	lsls	r2, r3, #31
 801b292:	d439      	bmi.n	801b308 <_printf_float+0x368>
 801b294:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801b298:	eba2 0903 	sub.w	r9, r2, r3
 801b29c:	9b04      	ldr	r3, [sp, #16]
 801b29e:	1ad2      	subs	r2, r2, r3
 801b2a0:	4591      	cmp	r9, r2
 801b2a2:	bfa8      	it	ge
 801b2a4:	4691      	movge	r9, r2
 801b2a6:	f1b9 0f00 	cmp.w	r9, #0
 801b2aa:	dc35      	bgt.n	801b318 <_printf_float+0x378>
 801b2ac:	f04f 0800 	mov.w	r8, #0
 801b2b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b2b4:	f104 0a1a 	add.w	sl, r4, #26
 801b2b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b2bc:	1a9b      	subs	r3, r3, r2
 801b2be:	eba3 0309 	sub.w	r3, r3, r9
 801b2c2:	4543      	cmp	r3, r8
 801b2c4:	f77f af77 	ble.w	801b1b6 <_printf_float+0x216>
 801b2c8:	2301      	movs	r3, #1
 801b2ca:	4652      	mov	r2, sl
 801b2cc:	4631      	mov	r1, r6
 801b2ce:	4628      	mov	r0, r5
 801b2d0:	47b8      	blx	r7
 801b2d2:	3001      	adds	r0, #1
 801b2d4:	f43f aeb0 	beq.w	801b038 <_printf_float+0x98>
 801b2d8:	f108 0801 	add.w	r8, r8, #1
 801b2dc:	e7ec      	b.n	801b2b8 <_printf_float+0x318>
 801b2de:	4613      	mov	r3, r2
 801b2e0:	4631      	mov	r1, r6
 801b2e2:	4642      	mov	r2, r8
 801b2e4:	4628      	mov	r0, r5
 801b2e6:	47b8      	blx	r7
 801b2e8:	3001      	adds	r0, #1
 801b2ea:	d1bf      	bne.n	801b26c <_printf_float+0x2cc>
 801b2ec:	e6a4      	b.n	801b038 <_printf_float+0x98>
 801b2ee:	2301      	movs	r3, #1
 801b2f0:	4631      	mov	r1, r6
 801b2f2:	4628      	mov	r0, r5
 801b2f4:	9204      	str	r2, [sp, #16]
 801b2f6:	47b8      	blx	r7
 801b2f8:	3001      	adds	r0, #1
 801b2fa:	f43f ae9d 	beq.w	801b038 <_printf_float+0x98>
 801b2fe:	9b05      	ldr	r3, [sp, #20]
 801b300:	9a04      	ldr	r2, [sp, #16]
 801b302:	3301      	adds	r3, #1
 801b304:	9305      	str	r3, [sp, #20]
 801b306:	e7b7      	b.n	801b278 <_printf_float+0x2d8>
 801b308:	4653      	mov	r3, sl
 801b30a:	465a      	mov	r2, fp
 801b30c:	4631      	mov	r1, r6
 801b30e:	4628      	mov	r0, r5
 801b310:	47b8      	blx	r7
 801b312:	3001      	adds	r0, #1
 801b314:	d1be      	bne.n	801b294 <_printf_float+0x2f4>
 801b316:	e68f      	b.n	801b038 <_printf_float+0x98>
 801b318:	9a04      	ldr	r2, [sp, #16]
 801b31a:	464b      	mov	r3, r9
 801b31c:	4442      	add	r2, r8
 801b31e:	4631      	mov	r1, r6
 801b320:	4628      	mov	r0, r5
 801b322:	47b8      	blx	r7
 801b324:	3001      	adds	r0, #1
 801b326:	d1c1      	bne.n	801b2ac <_printf_float+0x30c>
 801b328:	e686      	b.n	801b038 <_printf_float+0x98>
 801b32a:	9a08      	ldr	r2, [sp, #32]
 801b32c:	2a01      	cmp	r2, #1
 801b32e:	dc01      	bgt.n	801b334 <_printf_float+0x394>
 801b330:	07db      	lsls	r3, r3, #31
 801b332:	d537      	bpl.n	801b3a4 <_printf_float+0x404>
 801b334:	2301      	movs	r3, #1
 801b336:	4642      	mov	r2, r8
 801b338:	4631      	mov	r1, r6
 801b33a:	4628      	mov	r0, r5
 801b33c:	47b8      	blx	r7
 801b33e:	3001      	adds	r0, #1
 801b340:	f43f ae7a 	beq.w	801b038 <_printf_float+0x98>
 801b344:	4653      	mov	r3, sl
 801b346:	465a      	mov	r2, fp
 801b348:	4631      	mov	r1, r6
 801b34a:	4628      	mov	r0, r5
 801b34c:	47b8      	blx	r7
 801b34e:	3001      	adds	r0, #1
 801b350:	f43f ae72 	beq.w	801b038 <_printf_float+0x98>
 801b354:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b358:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b360:	9b08      	ldr	r3, [sp, #32]
 801b362:	d01a      	beq.n	801b39a <_printf_float+0x3fa>
 801b364:	3b01      	subs	r3, #1
 801b366:	f108 0201 	add.w	r2, r8, #1
 801b36a:	4631      	mov	r1, r6
 801b36c:	4628      	mov	r0, r5
 801b36e:	47b8      	blx	r7
 801b370:	3001      	adds	r0, #1
 801b372:	d10e      	bne.n	801b392 <_printf_float+0x3f2>
 801b374:	e660      	b.n	801b038 <_printf_float+0x98>
 801b376:	2301      	movs	r3, #1
 801b378:	464a      	mov	r2, r9
 801b37a:	4631      	mov	r1, r6
 801b37c:	4628      	mov	r0, r5
 801b37e:	47b8      	blx	r7
 801b380:	3001      	adds	r0, #1
 801b382:	f43f ae59 	beq.w	801b038 <_printf_float+0x98>
 801b386:	f108 0801 	add.w	r8, r8, #1
 801b38a:	9b08      	ldr	r3, [sp, #32]
 801b38c:	3b01      	subs	r3, #1
 801b38e:	4543      	cmp	r3, r8
 801b390:	dcf1      	bgt.n	801b376 <_printf_float+0x3d6>
 801b392:	9b04      	ldr	r3, [sp, #16]
 801b394:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b398:	e6dd      	b.n	801b156 <_printf_float+0x1b6>
 801b39a:	f04f 0800 	mov.w	r8, #0
 801b39e:	f104 091a 	add.w	r9, r4, #26
 801b3a2:	e7f2      	b.n	801b38a <_printf_float+0x3ea>
 801b3a4:	2301      	movs	r3, #1
 801b3a6:	4642      	mov	r2, r8
 801b3a8:	e7df      	b.n	801b36a <_printf_float+0x3ca>
 801b3aa:	2301      	movs	r3, #1
 801b3ac:	464a      	mov	r2, r9
 801b3ae:	4631      	mov	r1, r6
 801b3b0:	4628      	mov	r0, r5
 801b3b2:	47b8      	blx	r7
 801b3b4:	3001      	adds	r0, #1
 801b3b6:	f43f ae3f 	beq.w	801b038 <_printf_float+0x98>
 801b3ba:	f108 0801 	add.w	r8, r8, #1
 801b3be:	68e3      	ldr	r3, [r4, #12]
 801b3c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b3c2:	1a5b      	subs	r3, r3, r1
 801b3c4:	4543      	cmp	r3, r8
 801b3c6:	dcf0      	bgt.n	801b3aa <_printf_float+0x40a>
 801b3c8:	e6f9      	b.n	801b1be <_printf_float+0x21e>
 801b3ca:	f04f 0800 	mov.w	r8, #0
 801b3ce:	f104 0919 	add.w	r9, r4, #25
 801b3d2:	e7f4      	b.n	801b3be <_printf_float+0x41e>

0801b3d4 <_printf_common>:
 801b3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3d8:	4616      	mov	r6, r2
 801b3da:	4699      	mov	r9, r3
 801b3dc:	688a      	ldr	r2, [r1, #8]
 801b3de:	690b      	ldr	r3, [r1, #16]
 801b3e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b3e4:	4293      	cmp	r3, r2
 801b3e6:	bfb8      	it	lt
 801b3e8:	4613      	movlt	r3, r2
 801b3ea:	6033      	str	r3, [r6, #0]
 801b3ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b3f0:	4607      	mov	r7, r0
 801b3f2:	460c      	mov	r4, r1
 801b3f4:	b10a      	cbz	r2, 801b3fa <_printf_common+0x26>
 801b3f6:	3301      	adds	r3, #1
 801b3f8:	6033      	str	r3, [r6, #0]
 801b3fa:	6823      	ldr	r3, [r4, #0]
 801b3fc:	0699      	lsls	r1, r3, #26
 801b3fe:	bf42      	ittt	mi
 801b400:	6833      	ldrmi	r3, [r6, #0]
 801b402:	3302      	addmi	r3, #2
 801b404:	6033      	strmi	r3, [r6, #0]
 801b406:	6825      	ldr	r5, [r4, #0]
 801b408:	f015 0506 	ands.w	r5, r5, #6
 801b40c:	d106      	bne.n	801b41c <_printf_common+0x48>
 801b40e:	f104 0a19 	add.w	sl, r4, #25
 801b412:	68e3      	ldr	r3, [r4, #12]
 801b414:	6832      	ldr	r2, [r6, #0]
 801b416:	1a9b      	subs	r3, r3, r2
 801b418:	42ab      	cmp	r3, r5
 801b41a:	dc26      	bgt.n	801b46a <_printf_common+0x96>
 801b41c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b420:	1e13      	subs	r3, r2, #0
 801b422:	6822      	ldr	r2, [r4, #0]
 801b424:	bf18      	it	ne
 801b426:	2301      	movne	r3, #1
 801b428:	0692      	lsls	r2, r2, #26
 801b42a:	d42b      	bmi.n	801b484 <_printf_common+0xb0>
 801b42c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b430:	4649      	mov	r1, r9
 801b432:	4638      	mov	r0, r7
 801b434:	47c0      	blx	r8
 801b436:	3001      	adds	r0, #1
 801b438:	d01e      	beq.n	801b478 <_printf_common+0xa4>
 801b43a:	6823      	ldr	r3, [r4, #0]
 801b43c:	6922      	ldr	r2, [r4, #16]
 801b43e:	f003 0306 	and.w	r3, r3, #6
 801b442:	2b04      	cmp	r3, #4
 801b444:	bf02      	ittt	eq
 801b446:	68e5      	ldreq	r5, [r4, #12]
 801b448:	6833      	ldreq	r3, [r6, #0]
 801b44a:	1aed      	subeq	r5, r5, r3
 801b44c:	68a3      	ldr	r3, [r4, #8]
 801b44e:	bf0c      	ite	eq
 801b450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b454:	2500      	movne	r5, #0
 801b456:	4293      	cmp	r3, r2
 801b458:	bfc4      	itt	gt
 801b45a:	1a9b      	subgt	r3, r3, r2
 801b45c:	18ed      	addgt	r5, r5, r3
 801b45e:	2600      	movs	r6, #0
 801b460:	341a      	adds	r4, #26
 801b462:	42b5      	cmp	r5, r6
 801b464:	d11a      	bne.n	801b49c <_printf_common+0xc8>
 801b466:	2000      	movs	r0, #0
 801b468:	e008      	b.n	801b47c <_printf_common+0xa8>
 801b46a:	2301      	movs	r3, #1
 801b46c:	4652      	mov	r2, sl
 801b46e:	4649      	mov	r1, r9
 801b470:	4638      	mov	r0, r7
 801b472:	47c0      	blx	r8
 801b474:	3001      	adds	r0, #1
 801b476:	d103      	bne.n	801b480 <_printf_common+0xac>
 801b478:	f04f 30ff 	mov.w	r0, #4294967295
 801b47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b480:	3501      	adds	r5, #1
 801b482:	e7c6      	b.n	801b412 <_printf_common+0x3e>
 801b484:	18e1      	adds	r1, r4, r3
 801b486:	1c5a      	adds	r2, r3, #1
 801b488:	2030      	movs	r0, #48	; 0x30
 801b48a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b48e:	4422      	add	r2, r4
 801b490:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b498:	3302      	adds	r3, #2
 801b49a:	e7c7      	b.n	801b42c <_printf_common+0x58>
 801b49c:	2301      	movs	r3, #1
 801b49e:	4622      	mov	r2, r4
 801b4a0:	4649      	mov	r1, r9
 801b4a2:	4638      	mov	r0, r7
 801b4a4:	47c0      	blx	r8
 801b4a6:	3001      	adds	r0, #1
 801b4a8:	d0e6      	beq.n	801b478 <_printf_common+0xa4>
 801b4aa:	3601      	adds	r6, #1
 801b4ac:	e7d9      	b.n	801b462 <_printf_common+0x8e>
	...

0801b4b0 <_printf_i>:
 801b4b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b4b4:	7e0f      	ldrb	r7, [r1, #24]
 801b4b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b4b8:	2f78      	cmp	r7, #120	; 0x78
 801b4ba:	4691      	mov	r9, r2
 801b4bc:	4680      	mov	r8, r0
 801b4be:	460c      	mov	r4, r1
 801b4c0:	469a      	mov	sl, r3
 801b4c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b4c6:	d807      	bhi.n	801b4d8 <_printf_i+0x28>
 801b4c8:	2f62      	cmp	r7, #98	; 0x62
 801b4ca:	d80a      	bhi.n	801b4e2 <_printf_i+0x32>
 801b4cc:	2f00      	cmp	r7, #0
 801b4ce:	f000 80d4 	beq.w	801b67a <_printf_i+0x1ca>
 801b4d2:	2f58      	cmp	r7, #88	; 0x58
 801b4d4:	f000 80c0 	beq.w	801b658 <_printf_i+0x1a8>
 801b4d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b4dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b4e0:	e03a      	b.n	801b558 <_printf_i+0xa8>
 801b4e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b4e6:	2b15      	cmp	r3, #21
 801b4e8:	d8f6      	bhi.n	801b4d8 <_printf_i+0x28>
 801b4ea:	a101      	add	r1, pc, #4	; (adr r1, 801b4f0 <_printf_i+0x40>)
 801b4ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b4f0:	0801b549 	.word	0x0801b549
 801b4f4:	0801b55d 	.word	0x0801b55d
 801b4f8:	0801b4d9 	.word	0x0801b4d9
 801b4fc:	0801b4d9 	.word	0x0801b4d9
 801b500:	0801b4d9 	.word	0x0801b4d9
 801b504:	0801b4d9 	.word	0x0801b4d9
 801b508:	0801b55d 	.word	0x0801b55d
 801b50c:	0801b4d9 	.word	0x0801b4d9
 801b510:	0801b4d9 	.word	0x0801b4d9
 801b514:	0801b4d9 	.word	0x0801b4d9
 801b518:	0801b4d9 	.word	0x0801b4d9
 801b51c:	0801b661 	.word	0x0801b661
 801b520:	0801b589 	.word	0x0801b589
 801b524:	0801b61b 	.word	0x0801b61b
 801b528:	0801b4d9 	.word	0x0801b4d9
 801b52c:	0801b4d9 	.word	0x0801b4d9
 801b530:	0801b683 	.word	0x0801b683
 801b534:	0801b4d9 	.word	0x0801b4d9
 801b538:	0801b589 	.word	0x0801b589
 801b53c:	0801b4d9 	.word	0x0801b4d9
 801b540:	0801b4d9 	.word	0x0801b4d9
 801b544:	0801b623 	.word	0x0801b623
 801b548:	682b      	ldr	r3, [r5, #0]
 801b54a:	1d1a      	adds	r2, r3, #4
 801b54c:	681b      	ldr	r3, [r3, #0]
 801b54e:	602a      	str	r2, [r5, #0]
 801b550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b558:	2301      	movs	r3, #1
 801b55a:	e09f      	b.n	801b69c <_printf_i+0x1ec>
 801b55c:	6820      	ldr	r0, [r4, #0]
 801b55e:	682b      	ldr	r3, [r5, #0]
 801b560:	0607      	lsls	r7, r0, #24
 801b562:	f103 0104 	add.w	r1, r3, #4
 801b566:	6029      	str	r1, [r5, #0]
 801b568:	d501      	bpl.n	801b56e <_printf_i+0xbe>
 801b56a:	681e      	ldr	r6, [r3, #0]
 801b56c:	e003      	b.n	801b576 <_printf_i+0xc6>
 801b56e:	0646      	lsls	r6, r0, #25
 801b570:	d5fb      	bpl.n	801b56a <_printf_i+0xba>
 801b572:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b576:	2e00      	cmp	r6, #0
 801b578:	da03      	bge.n	801b582 <_printf_i+0xd2>
 801b57a:	232d      	movs	r3, #45	; 0x2d
 801b57c:	4276      	negs	r6, r6
 801b57e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b582:	485a      	ldr	r0, [pc, #360]	; (801b6ec <_printf_i+0x23c>)
 801b584:	230a      	movs	r3, #10
 801b586:	e012      	b.n	801b5ae <_printf_i+0xfe>
 801b588:	682b      	ldr	r3, [r5, #0]
 801b58a:	6820      	ldr	r0, [r4, #0]
 801b58c:	1d19      	adds	r1, r3, #4
 801b58e:	6029      	str	r1, [r5, #0]
 801b590:	0605      	lsls	r5, r0, #24
 801b592:	d501      	bpl.n	801b598 <_printf_i+0xe8>
 801b594:	681e      	ldr	r6, [r3, #0]
 801b596:	e002      	b.n	801b59e <_printf_i+0xee>
 801b598:	0641      	lsls	r1, r0, #25
 801b59a:	d5fb      	bpl.n	801b594 <_printf_i+0xe4>
 801b59c:	881e      	ldrh	r6, [r3, #0]
 801b59e:	4853      	ldr	r0, [pc, #332]	; (801b6ec <_printf_i+0x23c>)
 801b5a0:	2f6f      	cmp	r7, #111	; 0x6f
 801b5a2:	bf0c      	ite	eq
 801b5a4:	2308      	moveq	r3, #8
 801b5a6:	230a      	movne	r3, #10
 801b5a8:	2100      	movs	r1, #0
 801b5aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b5ae:	6865      	ldr	r5, [r4, #4]
 801b5b0:	60a5      	str	r5, [r4, #8]
 801b5b2:	2d00      	cmp	r5, #0
 801b5b4:	bfa2      	ittt	ge
 801b5b6:	6821      	ldrge	r1, [r4, #0]
 801b5b8:	f021 0104 	bicge.w	r1, r1, #4
 801b5bc:	6021      	strge	r1, [r4, #0]
 801b5be:	b90e      	cbnz	r6, 801b5c4 <_printf_i+0x114>
 801b5c0:	2d00      	cmp	r5, #0
 801b5c2:	d04b      	beq.n	801b65c <_printf_i+0x1ac>
 801b5c4:	4615      	mov	r5, r2
 801b5c6:	fbb6 f1f3 	udiv	r1, r6, r3
 801b5ca:	fb03 6711 	mls	r7, r3, r1, r6
 801b5ce:	5dc7      	ldrb	r7, [r0, r7]
 801b5d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b5d4:	4637      	mov	r7, r6
 801b5d6:	42bb      	cmp	r3, r7
 801b5d8:	460e      	mov	r6, r1
 801b5da:	d9f4      	bls.n	801b5c6 <_printf_i+0x116>
 801b5dc:	2b08      	cmp	r3, #8
 801b5de:	d10b      	bne.n	801b5f8 <_printf_i+0x148>
 801b5e0:	6823      	ldr	r3, [r4, #0]
 801b5e2:	07de      	lsls	r6, r3, #31
 801b5e4:	d508      	bpl.n	801b5f8 <_printf_i+0x148>
 801b5e6:	6923      	ldr	r3, [r4, #16]
 801b5e8:	6861      	ldr	r1, [r4, #4]
 801b5ea:	4299      	cmp	r1, r3
 801b5ec:	bfde      	ittt	le
 801b5ee:	2330      	movle	r3, #48	; 0x30
 801b5f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b5f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b5f8:	1b52      	subs	r2, r2, r5
 801b5fa:	6122      	str	r2, [r4, #16]
 801b5fc:	f8cd a000 	str.w	sl, [sp]
 801b600:	464b      	mov	r3, r9
 801b602:	aa03      	add	r2, sp, #12
 801b604:	4621      	mov	r1, r4
 801b606:	4640      	mov	r0, r8
 801b608:	f7ff fee4 	bl	801b3d4 <_printf_common>
 801b60c:	3001      	adds	r0, #1
 801b60e:	d14a      	bne.n	801b6a6 <_printf_i+0x1f6>
 801b610:	f04f 30ff 	mov.w	r0, #4294967295
 801b614:	b004      	add	sp, #16
 801b616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b61a:	6823      	ldr	r3, [r4, #0]
 801b61c:	f043 0320 	orr.w	r3, r3, #32
 801b620:	6023      	str	r3, [r4, #0]
 801b622:	4833      	ldr	r0, [pc, #204]	; (801b6f0 <_printf_i+0x240>)
 801b624:	2778      	movs	r7, #120	; 0x78
 801b626:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b62a:	6823      	ldr	r3, [r4, #0]
 801b62c:	6829      	ldr	r1, [r5, #0]
 801b62e:	061f      	lsls	r7, r3, #24
 801b630:	f851 6b04 	ldr.w	r6, [r1], #4
 801b634:	d402      	bmi.n	801b63c <_printf_i+0x18c>
 801b636:	065f      	lsls	r7, r3, #25
 801b638:	bf48      	it	mi
 801b63a:	b2b6      	uxthmi	r6, r6
 801b63c:	07df      	lsls	r7, r3, #31
 801b63e:	bf48      	it	mi
 801b640:	f043 0320 	orrmi.w	r3, r3, #32
 801b644:	6029      	str	r1, [r5, #0]
 801b646:	bf48      	it	mi
 801b648:	6023      	strmi	r3, [r4, #0]
 801b64a:	b91e      	cbnz	r6, 801b654 <_printf_i+0x1a4>
 801b64c:	6823      	ldr	r3, [r4, #0]
 801b64e:	f023 0320 	bic.w	r3, r3, #32
 801b652:	6023      	str	r3, [r4, #0]
 801b654:	2310      	movs	r3, #16
 801b656:	e7a7      	b.n	801b5a8 <_printf_i+0xf8>
 801b658:	4824      	ldr	r0, [pc, #144]	; (801b6ec <_printf_i+0x23c>)
 801b65a:	e7e4      	b.n	801b626 <_printf_i+0x176>
 801b65c:	4615      	mov	r5, r2
 801b65e:	e7bd      	b.n	801b5dc <_printf_i+0x12c>
 801b660:	682b      	ldr	r3, [r5, #0]
 801b662:	6826      	ldr	r6, [r4, #0]
 801b664:	6961      	ldr	r1, [r4, #20]
 801b666:	1d18      	adds	r0, r3, #4
 801b668:	6028      	str	r0, [r5, #0]
 801b66a:	0635      	lsls	r5, r6, #24
 801b66c:	681b      	ldr	r3, [r3, #0]
 801b66e:	d501      	bpl.n	801b674 <_printf_i+0x1c4>
 801b670:	6019      	str	r1, [r3, #0]
 801b672:	e002      	b.n	801b67a <_printf_i+0x1ca>
 801b674:	0670      	lsls	r0, r6, #25
 801b676:	d5fb      	bpl.n	801b670 <_printf_i+0x1c0>
 801b678:	8019      	strh	r1, [r3, #0]
 801b67a:	2300      	movs	r3, #0
 801b67c:	6123      	str	r3, [r4, #16]
 801b67e:	4615      	mov	r5, r2
 801b680:	e7bc      	b.n	801b5fc <_printf_i+0x14c>
 801b682:	682b      	ldr	r3, [r5, #0]
 801b684:	1d1a      	adds	r2, r3, #4
 801b686:	602a      	str	r2, [r5, #0]
 801b688:	681d      	ldr	r5, [r3, #0]
 801b68a:	6862      	ldr	r2, [r4, #4]
 801b68c:	2100      	movs	r1, #0
 801b68e:	4628      	mov	r0, r5
 801b690:	f7e4 fe4e 	bl	8000330 <memchr>
 801b694:	b108      	cbz	r0, 801b69a <_printf_i+0x1ea>
 801b696:	1b40      	subs	r0, r0, r5
 801b698:	6060      	str	r0, [r4, #4]
 801b69a:	6863      	ldr	r3, [r4, #4]
 801b69c:	6123      	str	r3, [r4, #16]
 801b69e:	2300      	movs	r3, #0
 801b6a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b6a4:	e7aa      	b.n	801b5fc <_printf_i+0x14c>
 801b6a6:	6923      	ldr	r3, [r4, #16]
 801b6a8:	462a      	mov	r2, r5
 801b6aa:	4649      	mov	r1, r9
 801b6ac:	4640      	mov	r0, r8
 801b6ae:	47d0      	blx	sl
 801b6b0:	3001      	adds	r0, #1
 801b6b2:	d0ad      	beq.n	801b610 <_printf_i+0x160>
 801b6b4:	6823      	ldr	r3, [r4, #0]
 801b6b6:	079b      	lsls	r3, r3, #30
 801b6b8:	d413      	bmi.n	801b6e2 <_printf_i+0x232>
 801b6ba:	68e0      	ldr	r0, [r4, #12]
 801b6bc:	9b03      	ldr	r3, [sp, #12]
 801b6be:	4298      	cmp	r0, r3
 801b6c0:	bfb8      	it	lt
 801b6c2:	4618      	movlt	r0, r3
 801b6c4:	e7a6      	b.n	801b614 <_printf_i+0x164>
 801b6c6:	2301      	movs	r3, #1
 801b6c8:	4632      	mov	r2, r6
 801b6ca:	4649      	mov	r1, r9
 801b6cc:	4640      	mov	r0, r8
 801b6ce:	47d0      	blx	sl
 801b6d0:	3001      	adds	r0, #1
 801b6d2:	d09d      	beq.n	801b610 <_printf_i+0x160>
 801b6d4:	3501      	adds	r5, #1
 801b6d6:	68e3      	ldr	r3, [r4, #12]
 801b6d8:	9903      	ldr	r1, [sp, #12]
 801b6da:	1a5b      	subs	r3, r3, r1
 801b6dc:	42ab      	cmp	r3, r5
 801b6de:	dcf2      	bgt.n	801b6c6 <_printf_i+0x216>
 801b6e0:	e7eb      	b.n	801b6ba <_printf_i+0x20a>
 801b6e2:	2500      	movs	r5, #0
 801b6e4:	f104 0619 	add.w	r6, r4, #25
 801b6e8:	e7f5      	b.n	801b6d6 <_printf_i+0x226>
 801b6ea:	bf00      	nop
 801b6ec:	08020454 	.word	0x08020454
 801b6f0:	08020465 	.word	0x08020465

0801b6f4 <_scanf_float>:
 801b6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6f8:	b087      	sub	sp, #28
 801b6fa:	4617      	mov	r7, r2
 801b6fc:	9303      	str	r3, [sp, #12]
 801b6fe:	688b      	ldr	r3, [r1, #8]
 801b700:	1e5a      	subs	r2, r3, #1
 801b702:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b706:	bf83      	ittte	hi
 801b708:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b70c:	195b      	addhi	r3, r3, r5
 801b70e:	9302      	strhi	r3, [sp, #8]
 801b710:	2300      	movls	r3, #0
 801b712:	bf86      	itte	hi
 801b714:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b718:	608b      	strhi	r3, [r1, #8]
 801b71a:	9302      	strls	r3, [sp, #8]
 801b71c:	680b      	ldr	r3, [r1, #0]
 801b71e:	468b      	mov	fp, r1
 801b720:	2500      	movs	r5, #0
 801b722:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b726:	f84b 3b1c 	str.w	r3, [fp], #28
 801b72a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b72e:	4680      	mov	r8, r0
 801b730:	460c      	mov	r4, r1
 801b732:	465e      	mov	r6, fp
 801b734:	46aa      	mov	sl, r5
 801b736:	46a9      	mov	r9, r5
 801b738:	9501      	str	r5, [sp, #4]
 801b73a:	68a2      	ldr	r2, [r4, #8]
 801b73c:	b152      	cbz	r2, 801b754 <_scanf_float+0x60>
 801b73e:	683b      	ldr	r3, [r7, #0]
 801b740:	781b      	ldrb	r3, [r3, #0]
 801b742:	2b4e      	cmp	r3, #78	; 0x4e
 801b744:	d864      	bhi.n	801b810 <_scanf_float+0x11c>
 801b746:	2b40      	cmp	r3, #64	; 0x40
 801b748:	d83c      	bhi.n	801b7c4 <_scanf_float+0xd0>
 801b74a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b74e:	b2c8      	uxtb	r0, r1
 801b750:	280e      	cmp	r0, #14
 801b752:	d93a      	bls.n	801b7ca <_scanf_float+0xd6>
 801b754:	f1b9 0f00 	cmp.w	r9, #0
 801b758:	d003      	beq.n	801b762 <_scanf_float+0x6e>
 801b75a:	6823      	ldr	r3, [r4, #0]
 801b75c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b760:	6023      	str	r3, [r4, #0]
 801b762:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b766:	f1ba 0f01 	cmp.w	sl, #1
 801b76a:	f200 8113 	bhi.w	801b994 <_scanf_float+0x2a0>
 801b76e:	455e      	cmp	r6, fp
 801b770:	f200 8105 	bhi.w	801b97e <_scanf_float+0x28a>
 801b774:	2501      	movs	r5, #1
 801b776:	4628      	mov	r0, r5
 801b778:	b007      	add	sp, #28
 801b77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b77e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b782:	2a0d      	cmp	r2, #13
 801b784:	d8e6      	bhi.n	801b754 <_scanf_float+0x60>
 801b786:	a101      	add	r1, pc, #4	; (adr r1, 801b78c <_scanf_float+0x98>)
 801b788:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b78c:	0801b8cb 	.word	0x0801b8cb
 801b790:	0801b755 	.word	0x0801b755
 801b794:	0801b755 	.word	0x0801b755
 801b798:	0801b755 	.word	0x0801b755
 801b79c:	0801b92b 	.word	0x0801b92b
 801b7a0:	0801b903 	.word	0x0801b903
 801b7a4:	0801b755 	.word	0x0801b755
 801b7a8:	0801b755 	.word	0x0801b755
 801b7ac:	0801b8d9 	.word	0x0801b8d9
 801b7b0:	0801b755 	.word	0x0801b755
 801b7b4:	0801b755 	.word	0x0801b755
 801b7b8:	0801b755 	.word	0x0801b755
 801b7bc:	0801b755 	.word	0x0801b755
 801b7c0:	0801b891 	.word	0x0801b891
 801b7c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b7c8:	e7db      	b.n	801b782 <_scanf_float+0x8e>
 801b7ca:	290e      	cmp	r1, #14
 801b7cc:	d8c2      	bhi.n	801b754 <_scanf_float+0x60>
 801b7ce:	a001      	add	r0, pc, #4	; (adr r0, 801b7d4 <_scanf_float+0xe0>)
 801b7d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b7d4:	0801b883 	.word	0x0801b883
 801b7d8:	0801b755 	.word	0x0801b755
 801b7dc:	0801b883 	.word	0x0801b883
 801b7e0:	0801b917 	.word	0x0801b917
 801b7e4:	0801b755 	.word	0x0801b755
 801b7e8:	0801b831 	.word	0x0801b831
 801b7ec:	0801b86d 	.word	0x0801b86d
 801b7f0:	0801b86d 	.word	0x0801b86d
 801b7f4:	0801b86d 	.word	0x0801b86d
 801b7f8:	0801b86d 	.word	0x0801b86d
 801b7fc:	0801b86d 	.word	0x0801b86d
 801b800:	0801b86d 	.word	0x0801b86d
 801b804:	0801b86d 	.word	0x0801b86d
 801b808:	0801b86d 	.word	0x0801b86d
 801b80c:	0801b86d 	.word	0x0801b86d
 801b810:	2b6e      	cmp	r3, #110	; 0x6e
 801b812:	d809      	bhi.n	801b828 <_scanf_float+0x134>
 801b814:	2b60      	cmp	r3, #96	; 0x60
 801b816:	d8b2      	bhi.n	801b77e <_scanf_float+0x8a>
 801b818:	2b54      	cmp	r3, #84	; 0x54
 801b81a:	d077      	beq.n	801b90c <_scanf_float+0x218>
 801b81c:	2b59      	cmp	r3, #89	; 0x59
 801b81e:	d199      	bne.n	801b754 <_scanf_float+0x60>
 801b820:	2d07      	cmp	r5, #7
 801b822:	d197      	bne.n	801b754 <_scanf_float+0x60>
 801b824:	2508      	movs	r5, #8
 801b826:	e029      	b.n	801b87c <_scanf_float+0x188>
 801b828:	2b74      	cmp	r3, #116	; 0x74
 801b82a:	d06f      	beq.n	801b90c <_scanf_float+0x218>
 801b82c:	2b79      	cmp	r3, #121	; 0x79
 801b82e:	e7f6      	b.n	801b81e <_scanf_float+0x12a>
 801b830:	6821      	ldr	r1, [r4, #0]
 801b832:	05c8      	lsls	r0, r1, #23
 801b834:	d51a      	bpl.n	801b86c <_scanf_float+0x178>
 801b836:	9b02      	ldr	r3, [sp, #8]
 801b838:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b83c:	6021      	str	r1, [r4, #0]
 801b83e:	f109 0901 	add.w	r9, r9, #1
 801b842:	b11b      	cbz	r3, 801b84c <_scanf_float+0x158>
 801b844:	3b01      	subs	r3, #1
 801b846:	3201      	adds	r2, #1
 801b848:	9302      	str	r3, [sp, #8]
 801b84a:	60a2      	str	r2, [r4, #8]
 801b84c:	68a3      	ldr	r3, [r4, #8]
 801b84e:	3b01      	subs	r3, #1
 801b850:	60a3      	str	r3, [r4, #8]
 801b852:	6923      	ldr	r3, [r4, #16]
 801b854:	3301      	adds	r3, #1
 801b856:	6123      	str	r3, [r4, #16]
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	3b01      	subs	r3, #1
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	607b      	str	r3, [r7, #4]
 801b860:	f340 8084 	ble.w	801b96c <_scanf_float+0x278>
 801b864:	683b      	ldr	r3, [r7, #0]
 801b866:	3301      	adds	r3, #1
 801b868:	603b      	str	r3, [r7, #0]
 801b86a:	e766      	b.n	801b73a <_scanf_float+0x46>
 801b86c:	eb1a 0f05 	cmn.w	sl, r5
 801b870:	f47f af70 	bne.w	801b754 <_scanf_float+0x60>
 801b874:	6822      	ldr	r2, [r4, #0]
 801b876:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b87a:	6022      	str	r2, [r4, #0]
 801b87c:	f806 3b01 	strb.w	r3, [r6], #1
 801b880:	e7e4      	b.n	801b84c <_scanf_float+0x158>
 801b882:	6822      	ldr	r2, [r4, #0]
 801b884:	0610      	lsls	r0, r2, #24
 801b886:	f57f af65 	bpl.w	801b754 <_scanf_float+0x60>
 801b88a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b88e:	e7f4      	b.n	801b87a <_scanf_float+0x186>
 801b890:	f1ba 0f00 	cmp.w	sl, #0
 801b894:	d10e      	bne.n	801b8b4 <_scanf_float+0x1c0>
 801b896:	f1b9 0f00 	cmp.w	r9, #0
 801b89a:	d10e      	bne.n	801b8ba <_scanf_float+0x1c6>
 801b89c:	6822      	ldr	r2, [r4, #0]
 801b89e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b8a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b8a6:	d108      	bne.n	801b8ba <_scanf_float+0x1c6>
 801b8a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b8ac:	6022      	str	r2, [r4, #0]
 801b8ae:	f04f 0a01 	mov.w	sl, #1
 801b8b2:	e7e3      	b.n	801b87c <_scanf_float+0x188>
 801b8b4:	f1ba 0f02 	cmp.w	sl, #2
 801b8b8:	d055      	beq.n	801b966 <_scanf_float+0x272>
 801b8ba:	2d01      	cmp	r5, #1
 801b8bc:	d002      	beq.n	801b8c4 <_scanf_float+0x1d0>
 801b8be:	2d04      	cmp	r5, #4
 801b8c0:	f47f af48 	bne.w	801b754 <_scanf_float+0x60>
 801b8c4:	3501      	adds	r5, #1
 801b8c6:	b2ed      	uxtb	r5, r5
 801b8c8:	e7d8      	b.n	801b87c <_scanf_float+0x188>
 801b8ca:	f1ba 0f01 	cmp.w	sl, #1
 801b8ce:	f47f af41 	bne.w	801b754 <_scanf_float+0x60>
 801b8d2:	f04f 0a02 	mov.w	sl, #2
 801b8d6:	e7d1      	b.n	801b87c <_scanf_float+0x188>
 801b8d8:	b97d      	cbnz	r5, 801b8fa <_scanf_float+0x206>
 801b8da:	f1b9 0f00 	cmp.w	r9, #0
 801b8de:	f47f af3c 	bne.w	801b75a <_scanf_float+0x66>
 801b8e2:	6822      	ldr	r2, [r4, #0]
 801b8e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b8e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b8ec:	f47f af39 	bne.w	801b762 <_scanf_float+0x6e>
 801b8f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b8f4:	6022      	str	r2, [r4, #0]
 801b8f6:	2501      	movs	r5, #1
 801b8f8:	e7c0      	b.n	801b87c <_scanf_float+0x188>
 801b8fa:	2d03      	cmp	r5, #3
 801b8fc:	d0e2      	beq.n	801b8c4 <_scanf_float+0x1d0>
 801b8fe:	2d05      	cmp	r5, #5
 801b900:	e7de      	b.n	801b8c0 <_scanf_float+0x1cc>
 801b902:	2d02      	cmp	r5, #2
 801b904:	f47f af26 	bne.w	801b754 <_scanf_float+0x60>
 801b908:	2503      	movs	r5, #3
 801b90a:	e7b7      	b.n	801b87c <_scanf_float+0x188>
 801b90c:	2d06      	cmp	r5, #6
 801b90e:	f47f af21 	bne.w	801b754 <_scanf_float+0x60>
 801b912:	2507      	movs	r5, #7
 801b914:	e7b2      	b.n	801b87c <_scanf_float+0x188>
 801b916:	6822      	ldr	r2, [r4, #0]
 801b918:	0591      	lsls	r1, r2, #22
 801b91a:	f57f af1b 	bpl.w	801b754 <_scanf_float+0x60>
 801b91e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b922:	6022      	str	r2, [r4, #0]
 801b924:	f8cd 9004 	str.w	r9, [sp, #4]
 801b928:	e7a8      	b.n	801b87c <_scanf_float+0x188>
 801b92a:	6822      	ldr	r2, [r4, #0]
 801b92c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b930:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b934:	d006      	beq.n	801b944 <_scanf_float+0x250>
 801b936:	0550      	lsls	r0, r2, #21
 801b938:	f57f af0c 	bpl.w	801b754 <_scanf_float+0x60>
 801b93c:	f1b9 0f00 	cmp.w	r9, #0
 801b940:	f43f af0f 	beq.w	801b762 <_scanf_float+0x6e>
 801b944:	0591      	lsls	r1, r2, #22
 801b946:	bf58      	it	pl
 801b948:	9901      	ldrpl	r1, [sp, #4]
 801b94a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b94e:	bf58      	it	pl
 801b950:	eba9 0101 	subpl.w	r1, r9, r1
 801b954:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b958:	bf58      	it	pl
 801b95a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b95e:	6022      	str	r2, [r4, #0]
 801b960:	f04f 0900 	mov.w	r9, #0
 801b964:	e78a      	b.n	801b87c <_scanf_float+0x188>
 801b966:	f04f 0a03 	mov.w	sl, #3
 801b96a:	e787      	b.n	801b87c <_scanf_float+0x188>
 801b96c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b970:	4639      	mov	r1, r7
 801b972:	4640      	mov	r0, r8
 801b974:	4798      	blx	r3
 801b976:	2800      	cmp	r0, #0
 801b978:	f43f aedf 	beq.w	801b73a <_scanf_float+0x46>
 801b97c:	e6ea      	b.n	801b754 <_scanf_float+0x60>
 801b97e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b982:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b986:	463a      	mov	r2, r7
 801b988:	4640      	mov	r0, r8
 801b98a:	4798      	blx	r3
 801b98c:	6923      	ldr	r3, [r4, #16]
 801b98e:	3b01      	subs	r3, #1
 801b990:	6123      	str	r3, [r4, #16]
 801b992:	e6ec      	b.n	801b76e <_scanf_float+0x7a>
 801b994:	1e6b      	subs	r3, r5, #1
 801b996:	2b06      	cmp	r3, #6
 801b998:	d825      	bhi.n	801b9e6 <_scanf_float+0x2f2>
 801b99a:	2d02      	cmp	r5, #2
 801b99c:	d836      	bhi.n	801ba0c <_scanf_float+0x318>
 801b99e:	455e      	cmp	r6, fp
 801b9a0:	f67f aee8 	bls.w	801b774 <_scanf_float+0x80>
 801b9a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b9a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b9ac:	463a      	mov	r2, r7
 801b9ae:	4640      	mov	r0, r8
 801b9b0:	4798      	blx	r3
 801b9b2:	6923      	ldr	r3, [r4, #16]
 801b9b4:	3b01      	subs	r3, #1
 801b9b6:	6123      	str	r3, [r4, #16]
 801b9b8:	e7f1      	b.n	801b99e <_scanf_float+0x2aa>
 801b9ba:	9802      	ldr	r0, [sp, #8]
 801b9bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b9c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b9c4:	9002      	str	r0, [sp, #8]
 801b9c6:	463a      	mov	r2, r7
 801b9c8:	4640      	mov	r0, r8
 801b9ca:	4798      	blx	r3
 801b9cc:	6923      	ldr	r3, [r4, #16]
 801b9ce:	3b01      	subs	r3, #1
 801b9d0:	6123      	str	r3, [r4, #16]
 801b9d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b9d6:	fa5f fa8a 	uxtb.w	sl, sl
 801b9da:	f1ba 0f02 	cmp.w	sl, #2
 801b9de:	d1ec      	bne.n	801b9ba <_scanf_float+0x2c6>
 801b9e0:	3d03      	subs	r5, #3
 801b9e2:	b2ed      	uxtb	r5, r5
 801b9e4:	1b76      	subs	r6, r6, r5
 801b9e6:	6823      	ldr	r3, [r4, #0]
 801b9e8:	05da      	lsls	r2, r3, #23
 801b9ea:	d52f      	bpl.n	801ba4c <_scanf_float+0x358>
 801b9ec:	055b      	lsls	r3, r3, #21
 801b9ee:	d510      	bpl.n	801ba12 <_scanf_float+0x31e>
 801b9f0:	455e      	cmp	r6, fp
 801b9f2:	f67f aebf 	bls.w	801b774 <_scanf_float+0x80>
 801b9f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b9fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b9fe:	463a      	mov	r2, r7
 801ba00:	4640      	mov	r0, r8
 801ba02:	4798      	blx	r3
 801ba04:	6923      	ldr	r3, [r4, #16]
 801ba06:	3b01      	subs	r3, #1
 801ba08:	6123      	str	r3, [r4, #16]
 801ba0a:	e7f1      	b.n	801b9f0 <_scanf_float+0x2fc>
 801ba0c:	46aa      	mov	sl, r5
 801ba0e:	9602      	str	r6, [sp, #8]
 801ba10:	e7df      	b.n	801b9d2 <_scanf_float+0x2de>
 801ba12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801ba16:	6923      	ldr	r3, [r4, #16]
 801ba18:	2965      	cmp	r1, #101	; 0x65
 801ba1a:	f103 33ff 	add.w	r3, r3, #4294967295
 801ba1e:	f106 35ff 	add.w	r5, r6, #4294967295
 801ba22:	6123      	str	r3, [r4, #16]
 801ba24:	d00c      	beq.n	801ba40 <_scanf_float+0x34c>
 801ba26:	2945      	cmp	r1, #69	; 0x45
 801ba28:	d00a      	beq.n	801ba40 <_scanf_float+0x34c>
 801ba2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ba2e:	463a      	mov	r2, r7
 801ba30:	4640      	mov	r0, r8
 801ba32:	4798      	blx	r3
 801ba34:	6923      	ldr	r3, [r4, #16]
 801ba36:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801ba3a:	3b01      	subs	r3, #1
 801ba3c:	1eb5      	subs	r5, r6, #2
 801ba3e:	6123      	str	r3, [r4, #16]
 801ba40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ba44:	463a      	mov	r2, r7
 801ba46:	4640      	mov	r0, r8
 801ba48:	4798      	blx	r3
 801ba4a:	462e      	mov	r6, r5
 801ba4c:	6825      	ldr	r5, [r4, #0]
 801ba4e:	f015 0510 	ands.w	r5, r5, #16
 801ba52:	d14d      	bne.n	801baf0 <_scanf_float+0x3fc>
 801ba54:	7035      	strb	r5, [r6, #0]
 801ba56:	6823      	ldr	r3, [r4, #0]
 801ba58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ba5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ba60:	d11a      	bne.n	801ba98 <_scanf_float+0x3a4>
 801ba62:	9b01      	ldr	r3, [sp, #4]
 801ba64:	454b      	cmp	r3, r9
 801ba66:	eba3 0209 	sub.w	r2, r3, r9
 801ba6a:	d122      	bne.n	801bab2 <_scanf_float+0x3be>
 801ba6c:	2200      	movs	r2, #0
 801ba6e:	4659      	mov	r1, fp
 801ba70:	4640      	mov	r0, r8
 801ba72:	f002 fb9f 	bl	801e1b4 <_strtod_r>
 801ba76:	9b03      	ldr	r3, [sp, #12]
 801ba78:	6821      	ldr	r1, [r4, #0]
 801ba7a:	681b      	ldr	r3, [r3, #0]
 801ba7c:	f011 0f02 	tst.w	r1, #2
 801ba80:	f103 0204 	add.w	r2, r3, #4
 801ba84:	d020      	beq.n	801bac8 <_scanf_float+0x3d4>
 801ba86:	9903      	ldr	r1, [sp, #12]
 801ba88:	600a      	str	r2, [r1, #0]
 801ba8a:	681b      	ldr	r3, [r3, #0]
 801ba8c:	ed83 0b00 	vstr	d0, [r3]
 801ba90:	68e3      	ldr	r3, [r4, #12]
 801ba92:	3301      	adds	r3, #1
 801ba94:	60e3      	str	r3, [r4, #12]
 801ba96:	e66e      	b.n	801b776 <_scanf_float+0x82>
 801ba98:	9b04      	ldr	r3, [sp, #16]
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d0e6      	beq.n	801ba6c <_scanf_float+0x378>
 801ba9e:	9905      	ldr	r1, [sp, #20]
 801baa0:	230a      	movs	r3, #10
 801baa2:	462a      	mov	r2, r5
 801baa4:	3101      	adds	r1, #1
 801baa6:	4640      	mov	r0, r8
 801baa8:	f002 fc0c 	bl	801e2c4 <_strtol_r>
 801baac:	9b04      	ldr	r3, [sp, #16]
 801baae:	9e05      	ldr	r6, [sp, #20]
 801bab0:	1ac2      	subs	r2, r0, r3
 801bab2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801bab6:	429e      	cmp	r6, r3
 801bab8:	bf28      	it	cs
 801baba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801babe:	490d      	ldr	r1, [pc, #52]	; (801baf4 <_scanf_float+0x400>)
 801bac0:	4630      	mov	r0, r6
 801bac2:	f000 f8dd 	bl	801bc80 <siprintf>
 801bac6:	e7d1      	b.n	801ba6c <_scanf_float+0x378>
 801bac8:	f011 0f04 	tst.w	r1, #4
 801bacc:	9903      	ldr	r1, [sp, #12]
 801bace:	600a      	str	r2, [r1, #0]
 801bad0:	d1db      	bne.n	801ba8a <_scanf_float+0x396>
 801bad2:	eeb4 0b40 	vcmp.f64	d0, d0
 801bad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bada:	681e      	ldr	r6, [r3, #0]
 801badc:	d705      	bvc.n	801baea <_scanf_float+0x3f6>
 801bade:	4806      	ldr	r0, [pc, #24]	; (801baf8 <_scanf_float+0x404>)
 801bae0:	f000 f9f6 	bl	801bed0 <nanf>
 801bae4:	ed86 0a00 	vstr	s0, [r6]
 801bae8:	e7d2      	b.n	801ba90 <_scanf_float+0x39c>
 801baea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801baee:	e7f9      	b.n	801bae4 <_scanf_float+0x3f0>
 801baf0:	2500      	movs	r5, #0
 801baf2:	e640      	b.n	801b776 <_scanf_float+0x82>
 801baf4:	08020476 	.word	0x08020476
 801baf8:	08020828 	.word	0x08020828

0801bafc <std>:
 801bafc:	2300      	movs	r3, #0
 801bafe:	b510      	push	{r4, lr}
 801bb00:	4604      	mov	r4, r0
 801bb02:	e9c0 3300 	strd	r3, r3, [r0]
 801bb06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bb0a:	6083      	str	r3, [r0, #8]
 801bb0c:	8181      	strh	r1, [r0, #12]
 801bb0e:	6643      	str	r3, [r0, #100]	; 0x64
 801bb10:	81c2      	strh	r2, [r0, #14]
 801bb12:	6183      	str	r3, [r0, #24]
 801bb14:	4619      	mov	r1, r3
 801bb16:	2208      	movs	r2, #8
 801bb18:	305c      	adds	r0, #92	; 0x5c
 801bb1a:	f000 f942 	bl	801bda2 <memset>
 801bb1e:	4b0d      	ldr	r3, [pc, #52]	; (801bb54 <std+0x58>)
 801bb20:	6263      	str	r3, [r4, #36]	; 0x24
 801bb22:	4b0d      	ldr	r3, [pc, #52]	; (801bb58 <std+0x5c>)
 801bb24:	62a3      	str	r3, [r4, #40]	; 0x28
 801bb26:	4b0d      	ldr	r3, [pc, #52]	; (801bb5c <std+0x60>)
 801bb28:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bb2a:	4b0d      	ldr	r3, [pc, #52]	; (801bb60 <std+0x64>)
 801bb2c:	6323      	str	r3, [r4, #48]	; 0x30
 801bb2e:	4b0d      	ldr	r3, [pc, #52]	; (801bb64 <std+0x68>)
 801bb30:	6224      	str	r4, [r4, #32]
 801bb32:	429c      	cmp	r4, r3
 801bb34:	d006      	beq.n	801bb44 <std+0x48>
 801bb36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801bb3a:	4294      	cmp	r4, r2
 801bb3c:	d002      	beq.n	801bb44 <std+0x48>
 801bb3e:	33d0      	adds	r3, #208	; 0xd0
 801bb40:	429c      	cmp	r4, r3
 801bb42:	d105      	bne.n	801bb50 <std+0x54>
 801bb44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bb48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bb4c:	f000 b9a6 	b.w	801be9c <__retarget_lock_init_recursive>
 801bb50:	bd10      	pop	{r4, pc}
 801bb52:	bf00      	nop
 801bb54:	0801bd19 	.word	0x0801bd19
 801bb58:	0801bd3f 	.word	0x0801bd3f
 801bb5c:	0801bd77 	.word	0x0801bd77
 801bb60:	0801bd9b 	.word	0x0801bd9b
 801bb64:	240034e4 	.word	0x240034e4

0801bb68 <stdio_exit_handler>:
 801bb68:	4a02      	ldr	r2, [pc, #8]	; (801bb74 <stdio_exit_handler+0xc>)
 801bb6a:	4903      	ldr	r1, [pc, #12]	; (801bb78 <stdio_exit_handler+0x10>)
 801bb6c:	4803      	ldr	r0, [pc, #12]	; (801bb7c <stdio_exit_handler+0x14>)
 801bb6e:	f000 b869 	b.w	801bc44 <_fwalk_sglue>
 801bb72:	bf00      	nop
 801bb74:	24000100 	.word	0x24000100
 801bb78:	0801ecc5 	.word	0x0801ecc5
 801bb7c:	2400010c 	.word	0x2400010c

0801bb80 <cleanup_stdio>:
 801bb80:	6841      	ldr	r1, [r0, #4]
 801bb82:	4b0c      	ldr	r3, [pc, #48]	; (801bbb4 <cleanup_stdio+0x34>)
 801bb84:	4299      	cmp	r1, r3
 801bb86:	b510      	push	{r4, lr}
 801bb88:	4604      	mov	r4, r0
 801bb8a:	d001      	beq.n	801bb90 <cleanup_stdio+0x10>
 801bb8c:	f003 f89a 	bl	801ecc4 <_fflush_r>
 801bb90:	68a1      	ldr	r1, [r4, #8]
 801bb92:	4b09      	ldr	r3, [pc, #36]	; (801bbb8 <cleanup_stdio+0x38>)
 801bb94:	4299      	cmp	r1, r3
 801bb96:	d002      	beq.n	801bb9e <cleanup_stdio+0x1e>
 801bb98:	4620      	mov	r0, r4
 801bb9a:	f003 f893 	bl	801ecc4 <_fflush_r>
 801bb9e:	68e1      	ldr	r1, [r4, #12]
 801bba0:	4b06      	ldr	r3, [pc, #24]	; (801bbbc <cleanup_stdio+0x3c>)
 801bba2:	4299      	cmp	r1, r3
 801bba4:	d004      	beq.n	801bbb0 <cleanup_stdio+0x30>
 801bba6:	4620      	mov	r0, r4
 801bba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbac:	f003 b88a 	b.w	801ecc4 <_fflush_r>
 801bbb0:	bd10      	pop	{r4, pc}
 801bbb2:	bf00      	nop
 801bbb4:	240034e4 	.word	0x240034e4
 801bbb8:	2400354c 	.word	0x2400354c
 801bbbc:	240035b4 	.word	0x240035b4

0801bbc0 <global_stdio_init.part.0>:
 801bbc0:	b510      	push	{r4, lr}
 801bbc2:	4b0b      	ldr	r3, [pc, #44]	; (801bbf0 <global_stdio_init.part.0+0x30>)
 801bbc4:	4c0b      	ldr	r4, [pc, #44]	; (801bbf4 <global_stdio_init.part.0+0x34>)
 801bbc6:	4a0c      	ldr	r2, [pc, #48]	; (801bbf8 <global_stdio_init.part.0+0x38>)
 801bbc8:	601a      	str	r2, [r3, #0]
 801bbca:	4620      	mov	r0, r4
 801bbcc:	2200      	movs	r2, #0
 801bbce:	2104      	movs	r1, #4
 801bbd0:	f7ff ff94 	bl	801bafc <std>
 801bbd4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801bbd8:	2201      	movs	r2, #1
 801bbda:	2109      	movs	r1, #9
 801bbdc:	f7ff ff8e 	bl	801bafc <std>
 801bbe0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801bbe4:	2202      	movs	r2, #2
 801bbe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbea:	2112      	movs	r1, #18
 801bbec:	f7ff bf86 	b.w	801bafc <std>
 801bbf0:	2400361c 	.word	0x2400361c
 801bbf4:	240034e4 	.word	0x240034e4
 801bbf8:	0801bb69 	.word	0x0801bb69

0801bbfc <__sfp_lock_acquire>:
 801bbfc:	4801      	ldr	r0, [pc, #4]	; (801bc04 <__sfp_lock_acquire+0x8>)
 801bbfe:	f000 b94e 	b.w	801be9e <__retarget_lock_acquire_recursive>
 801bc02:	bf00      	nop
 801bc04:	24003625 	.word	0x24003625

0801bc08 <__sfp_lock_release>:
 801bc08:	4801      	ldr	r0, [pc, #4]	; (801bc10 <__sfp_lock_release+0x8>)
 801bc0a:	f000 b949 	b.w	801bea0 <__retarget_lock_release_recursive>
 801bc0e:	bf00      	nop
 801bc10:	24003625 	.word	0x24003625

0801bc14 <__sinit>:
 801bc14:	b510      	push	{r4, lr}
 801bc16:	4604      	mov	r4, r0
 801bc18:	f7ff fff0 	bl	801bbfc <__sfp_lock_acquire>
 801bc1c:	6a23      	ldr	r3, [r4, #32]
 801bc1e:	b11b      	cbz	r3, 801bc28 <__sinit+0x14>
 801bc20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc24:	f7ff bff0 	b.w	801bc08 <__sfp_lock_release>
 801bc28:	4b04      	ldr	r3, [pc, #16]	; (801bc3c <__sinit+0x28>)
 801bc2a:	6223      	str	r3, [r4, #32]
 801bc2c:	4b04      	ldr	r3, [pc, #16]	; (801bc40 <__sinit+0x2c>)
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	d1f5      	bne.n	801bc20 <__sinit+0xc>
 801bc34:	f7ff ffc4 	bl	801bbc0 <global_stdio_init.part.0>
 801bc38:	e7f2      	b.n	801bc20 <__sinit+0xc>
 801bc3a:	bf00      	nop
 801bc3c:	0801bb81 	.word	0x0801bb81
 801bc40:	2400361c 	.word	0x2400361c

0801bc44 <_fwalk_sglue>:
 801bc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc48:	4607      	mov	r7, r0
 801bc4a:	4688      	mov	r8, r1
 801bc4c:	4614      	mov	r4, r2
 801bc4e:	2600      	movs	r6, #0
 801bc50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bc54:	f1b9 0901 	subs.w	r9, r9, #1
 801bc58:	d505      	bpl.n	801bc66 <_fwalk_sglue+0x22>
 801bc5a:	6824      	ldr	r4, [r4, #0]
 801bc5c:	2c00      	cmp	r4, #0
 801bc5e:	d1f7      	bne.n	801bc50 <_fwalk_sglue+0xc>
 801bc60:	4630      	mov	r0, r6
 801bc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc66:	89ab      	ldrh	r3, [r5, #12]
 801bc68:	2b01      	cmp	r3, #1
 801bc6a:	d907      	bls.n	801bc7c <_fwalk_sglue+0x38>
 801bc6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bc70:	3301      	adds	r3, #1
 801bc72:	d003      	beq.n	801bc7c <_fwalk_sglue+0x38>
 801bc74:	4629      	mov	r1, r5
 801bc76:	4638      	mov	r0, r7
 801bc78:	47c0      	blx	r8
 801bc7a:	4306      	orrs	r6, r0
 801bc7c:	3568      	adds	r5, #104	; 0x68
 801bc7e:	e7e9      	b.n	801bc54 <_fwalk_sglue+0x10>

0801bc80 <siprintf>:
 801bc80:	b40e      	push	{r1, r2, r3}
 801bc82:	b500      	push	{lr}
 801bc84:	b09c      	sub	sp, #112	; 0x70
 801bc86:	ab1d      	add	r3, sp, #116	; 0x74
 801bc88:	9002      	str	r0, [sp, #8]
 801bc8a:	9006      	str	r0, [sp, #24]
 801bc8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bc90:	4809      	ldr	r0, [pc, #36]	; (801bcb8 <siprintf+0x38>)
 801bc92:	9107      	str	r1, [sp, #28]
 801bc94:	9104      	str	r1, [sp, #16]
 801bc96:	4909      	ldr	r1, [pc, #36]	; (801bcbc <siprintf+0x3c>)
 801bc98:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc9c:	9105      	str	r1, [sp, #20]
 801bc9e:	6800      	ldr	r0, [r0, #0]
 801bca0:	9301      	str	r3, [sp, #4]
 801bca2:	a902      	add	r1, sp, #8
 801bca4:	f002 fb6a 	bl	801e37c <_svfiprintf_r>
 801bca8:	9b02      	ldr	r3, [sp, #8]
 801bcaa:	2200      	movs	r2, #0
 801bcac:	701a      	strb	r2, [r3, #0]
 801bcae:	b01c      	add	sp, #112	; 0x70
 801bcb0:	f85d eb04 	ldr.w	lr, [sp], #4
 801bcb4:	b003      	add	sp, #12
 801bcb6:	4770      	bx	lr
 801bcb8:	24000158 	.word	0x24000158
 801bcbc:	ffff0208 	.word	0xffff0208

0801bcc0 <siscanf>:
 801bcc0:	b40e      	push	{r1, r2, r3}
 801bcc2:	b510      	push	{r4, lr}
 801bcc4:	b09f      	sub	sp, #124	; 0x7c
 801bcc6:	ac21      	add	r4, sp, #132	; 0x84
 801bcc8:	f44f 7101 	mov.w	r1, #516	; 0x204
 801bccc:	f854 2b04 	ldr.w	r2, [r4], #4
 801bcd0:	9201      	str	r2, [sp, #4]
 801bcd2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801bcd6:	9004      	str	r0, [sp, #16]
 801bcd8:	9008      	str	r0, [sp, #32]
 801bcda:	f7e4 fb79 	bl	80003d0 <strlen>
 801bcde:	4b0c      	ldr	r3, [pc, #48]	; (801bd10 <siscanf+0x50>)
 801bce0:	9005      	str	r0, [sp, #20]
 801bce2:	9009      	str	r0, [sp, #36]	; 0x24
 801bce4:	930d      	str	r3, [sp, #52]	; 0x34
 801bce6:	480b      	ldr	r0, [pc, #44]	; (801bd14 <siscanf+0x54>)
 801bce8:	9a01      	ldr	r2, [sp, #4]
 801bcea:	6800      	ldr	r0, [r0, #0]
 801bcec:	9403      	str	r4, [sp, #12]
 801bcee:	2300      	movs	r3, #0
 801bcf0:	9311      	str	r3, [sp, #68]	; 0x44
 801bcf2:	9316      	str	r3, [sp, #88]	; 0x58
 801bcf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bcf8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801bcfc:	a904      	add	r1, sp, #16
 801bcfe:	4623      	mov	r3, r4
 801bd00:	f002 fc94 	bl	801e62c <__ssvfiscanf_r>
 801bd04:	b01f      	add	sp, #124	; 0x7c
 801bd06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd0a:	b003      	add	sp, #12
 801bd0c:	4770      	bx	lr
 801bd0e:	bf00      	nop
 801bd10:	0801bd3b 	.word	0x0801bd3b
 801bd14:	24000158 	.word	0x24000158

0801bd18 <__sread>:
 801bd18:	b510      	push	{r4, lr}
 801bd1a:	460c      	mov	r4, r1
 801bd1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd20:	f000 f86e 	bl	801be00 <_read_r>
 801bd24:	2800      	cmp	r0, #0
 801bd26:	bfab      	itete	ge
 801bd28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bd2a:	89a3      	ldrhlt	r3, [r4, #12]
 801bd2c:	181b      	addge	r3, r3, r0
 801bd2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bd32:	bfac      	ite	ge
 801bd34:	6563      	strge	r3, [r4, #84]	; 0x54
 801bd36:	81a3      	strhlt	r3, [r4, #12]
 801bd38:	bd10      	pop	{r4, pc}

0801bd3a <__seofread>:
 801bd3a:	2000      	movs	r0, #0
 801bd3c:	4770      	bx	lr

0801bd3e <__swrite>:
 801bd3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd42:	461f      	mov	r7, r3
 801bd44:	898b      	ldrh	r3, [r1, #12]
 801bd46:	05db      	lsls	r3, r3, #23
 801bd48:	4605      	mov	r5, r0
 801bd4a:	460c      	mov	r4, r1
 801bd4c:	4616      	mov	r6, r2
 801bd4e:	d505      	bpl.n	801bd5c <__swrite+0x1e>
 801bd50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd54:	2302      	movs	r3, #2
 801bd56:	2200      	movs	r2, #0
 801bd58:	f000 f840 	bl	801bddc <_lseek_r>
 801bd5c:	89a3      	ldrh	r3, [r4, #12]
 801bd5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bd62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bd66:	81a3      	strh	r3, [r4, #12]
 801bd68:	4632      	mov	r2, r6
 801bd6a:	463b      	mov	r3, r7
 801bd6c:	4628      	mov	r0, r5
 801bd6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd72:	f000 b857 	b.w	801be24 <_write_r>

0801bd76 <__sseek>:
 801bd76:	b510      	push	{r4, lr}
 801bd78:	460c      	mov	r4, r1
 801bd7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd7e:	f000 f82d 	bl	801bddc <_lseek_r>
 801bd82:	1c43      	adds	r3, r0, #1
 801bd84:	89a3      	ldrh	r3, [r4, #12]
 801bd86:	bf15      	itete	ne
 801bd88:	6560      	strne	r0, [r4, #84]	; 0x54
 801bd8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bd8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bd92:	81a3      	strheq	r3, [r4, #12]
 801bd94:	bf18      	it	ne
 801bd96:	81a3      	strhne	r3, [r4, #12]
 801bd98:	bd10      	pop	{r4, pc}

0801bd9a <__sclose>:
 801bd9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd9e:	f000 b80d 	b.w	801bdbc <_close_r>

0801bda2 <memset>:
 801bda2:	4402      	add	r2, r0
 801bda4:	4603      	mov	r3, r0
 801bda6:	4293      	cmp	r3, r2
 801bda8:	d100      	bne.n	801bdac <memset+0xa>
 801bdaa:	4770      	bx	lr
 801bdac:	f803 1b01 	strb.w	r1, [r3], #1
 801bdb0:	e7f9      	b.n	801bda6 <memset+0x4>
	...

0801bdb4 <_localeconv_r>:
 801bdb4:	4800      	ldr	r0, [pc, #0]	; (801bdb8 <_localeconv_r+0x4>)
 801bdb6:	4770      	bx	lr
 801bdb8:	2400024c 	.word	0x2400024c

0801bdbc <_close_r>:
 801bdbc:	b538      	push	{r3, r4, r5, lr}
 801bdbe:	4d06      	ldr	r5, [pc, #24]	; (801bdd8 <_close_r+0x1c>)
 801bdc0:	2300      	movs	r3, #0
 801bdc2:	4604      	mov	r4, r0
 801bdc4:	4608      	mov	r0, r1
 801bdc6:	602b      	str	r3, [r5, #0]
 801bdc8:	f7e8 f817 	bl	8003dfa <_close>
 801bdcc:	1c43      	adds	r3, r0, #1
 801bdce:	d102      	bne.n	801bdd6 <_close_r+0x1a>
 801bdd0:	682b      	ldr	r3, [r5, #0]
 801bdd2:	b103      	cbz	r3, 801bdd6 <_close_r+0x1a>
 801bdd4:	6023      	str	r3, [r4, #0]
 801bdd6:	bd38      	pop	{r3, r4, r5, pc}
 801bdd8:	24003620 	.word	0x24003620

0801bddc <_lseek_r>:
 801bddc:	b538      	push	{r3, r4, r5, lr}
 801bdde:	4d07      	ldr	r5, [pc, #28]	; (801bdfc <_lseek_r+0x20>)
 801bde0:	4604      	mov	r4, r0
 801bde2:	4608      	mov	r0, r1
 801bde4:	4611      	mov	r1, r2
 801bde6:	2200      	movs	r2, #0
 801bde8:	602a      	str	r2, [r5, #0]
 801bdea:	461a      	mov	r2, r3
 801bdec:	f7e8 f82c 	bl	8003e48 <_lseek>
 801bdf0:	1c43      	adds	r3, r0, #1
 801bdf2:	d102      	bne.n	801bdfa <_lseek_r+0x1e>
 801bdf4:	682b      	ldr	r3, [r5, #0]
 801bdf6:	b103      	cbz	r3, 801bdfa <_lseek_r+0x1e>
 801bdf8:	6023      	str	r3, [r4, #0]
 801bdfa:	bd38      	pop	{r3, r4, r5, pc}
 801bdfc:	24003620 	.word	0x24003620

0801be00 <_read_r>:
 801be00:	b538      	push	{r3, r4, r5, lr}
 801be02:	4d07      	ldr	r5, [pc, #28]	; (801be20 <_read_r+0x20>)
 801be04:	4604      	mov	r4, r0
 801be06:	4608      	mov	r0, r1
 801be08:	4611      	mov	r1, r2
 801be0a:	2200      	movs	r2, #0
 801be0c:	602a      	str	r2, [r5, #0]
 801be0e:	461a      	mov	r2, r3
 801be10:	f7e7 ffba 	bl	8003d88 <_read>
 801be14:	1c43      	adds	r3, r0, #1
 801be16:	d102      	bne.n	801be1e <_read_r+0x1e>
 801be18:	682b      	ldr	r3, [r5, #0]
 801be1a:	b103      	cbz	r3, 801be1e <_read_r+0x1e>
 801be1c:	6023      	str	r3, [r4, #0]
 801be1e:	bd38      	pop	{r3, r4, r5, pc}
 801be20:	24003620 	.word	0x24003620

0801be24 <_write_r>:
 801be24:	b538      	push	{r3, r4, r5, lr}
 801be26:	4d07      	ldr	r5, [pc, #28]	; (801be44 <_write_r+0x20>)
 801be28:	4604      	mov	r4, r0
 801be2a:	4608      	mov	r0, r1
 801be2c:	4611      	mov	r1, r2
 801be2e:	2200      	movs	r2, #0
 801be30:	602a      	str	r2, [r5, #0]
 801be32:	461a      	mov	r2, r3
 801be34:	f7e7 ffc5 	bl	8003dc2 <_write>
 801be38:	1c43      	adds	r3, r0, #1
 801be3a:	d102      	bne.n	801be42 <_write_r+0x1e>
 801be3c:	682b      	ldr	r3, [r5, #0]
 801be3e:	b103      	cbz	r3, 801be42 <_write_r+0x1e>
 801be40:	6023      	str	r3, [r4, #0]
 801be42:	bd38      	pop	{r3, r4, r5, pc}
 801be44:	24003620 	.word	0x24003620

0801be48 <__errno>:
 801be48:	4b01      	ldr	r3, [pc, #4]	; (801be50 <__errno+0x8>)
 801be4a:	6818      	ldr	r0, [r3, #0]
 801be4c:	4770      	bx	lr
 801be4e:	bf00      	nop
 801be50:	24000158 	.word	0x24000158

0801be54 <__libc_init_array>:
 801be54:	b570      	push	{r4, r5, r6, lr}
 801be56:	4d0d      	ldr	r5, [pc, #52]	; (801be8c <__libc_init_array+0x38>)
 801be58:	4c0d      	ldr	r4, [pc, #52]	; (801be90 <__libc_init_array+0x3c>)
 801be5a:	1b64      	subs	r4, r4, r5
 801be5c:	10a4      	asrs	r4, r4, #2
 801be5e:	2600      	movs	r6, #0
 801be60:	42a6      	cmp	r6, r4
 801be62:	d109      	bne.n	801be78 <__libc_init_array+0x24>
 801be64:	4d0b      	ldr	r5, [pc, #44]	; (801be94 <__libc_init_array+0x40>)
 801be66:	4c0c      	ldr	r4, [pc, #48]	; (801be98 <__libc_init_array+0x44>)
 801be68:	f003 ff1e 	bl	801fca8 <_init>
 801be6c:	1b64      	subs	r4, r4, r5
 801be6e:	10a4      	asrs	r4, r4, #2
 801be70:	2600      	movs	r6, #0
 801be72:	42a6      	cmp	r6, r4
 801be74:	d105      	bne.n	801be82 <__libc_init_array+0x2e>
 801be76:	bd70      	pop	{r4, r5, r6, pc}
 801be78:	f855 3b04 	ldr.w	r3, [r5], #4
 801be7c:	4798      	blx	r3
 801be7e:	3601      	adds	r6, #1
 801be80:	e7ee      	b.n	801be60 <__libc_init_array+0xc>
 801be82:	f855 3b04 	ldr.w	r3, [r5], #4
 801be86:	4798      	blx	r3
 801be88:	3601      	adds	r6, #1
 801be8a:	e7f2      	b.n	801be72 <__libc_init_array+0x1e>
 801be8c:	08020894 	.word	0x08020894
 801be90:	08020894 	.word	0x08020894
 801be94:	08020894 	.word	0x08020894
 801be98:	08020898 	.word	0x08020898

0801be9c <__retarget_lock_init_recursive>:
 801be9c:	4770      	bx	lr

0801be9e <__retarget_lock_acquire_recursive>:
 801be9e:	4770      	bx	lr

0801bea0 <__retarget_lock_release_recursive>:
 801bea0:	4770      	bx	lr

0801bea2 <strcpy>:
 801bea2:	4603      	mov	r3, r0
 801bea4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bea8:	f803 2b01 	strb.w	r2, [r3], #1
 801beac:	2a00      	cmp	r2, #0
 801beae:	d1f9      	bne.n	801bea4 <strcpy+0x2>
 801beb0:	4770      	bx	lr

0801beb2 <memcpy>:
 801beb2:	440a      	add	r2, r1
 801beb4:	4291      	cmp	r1, r2
 801beb6:	f100 33ff 	add.w	r3, r0, #4294967295
 801beba:	d100      	bne.n	801bebe <memcpy+0xc>
 801bebc:	4770      	bx	lr
 801bebe:	b510      	push	{r4, lr}
 801bec0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bec4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bec8:	4291      	cmp	r1, r2
 801beca:	d1f9      	bne.n	801bec0 <memcpy+0xe>
 801becc:	bd10      	pop	{r4, pc}
	...

0801bed0 <nanf>:
 801bed0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bed8 <nanf+0x8>
 801bed4:	4770      	bx	lr
 801bed6:	bf00      	nop
 801bed8:	7fc00000 	.word	0x7fc00000

0801bedc <quorem>:
 801bedc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bee0:	6903      	ldr	r3, [r0, #16]
 801bee2:	690c      	ldr	r4, [r1, #16]
 801bee4:	42a3      	cmp	r3, r4
 801bee6:	4607      	mov	r7, r0
 801bee8:	db7e      	blt.n	801bfe8 <quorem+0x10c>
 801beea:	3c01      	subs	r4, #1
 801beec:	f101 0814 	add.w	r8, r1, #20
 801bef0:	f100 0514 	add.w	r5, r0, #20
 801bef4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bef8:	9301      	str	r3, [sp, #4]
 801befa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801befe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bf02:	3301      	adds	r3, #1
 801bf04:	429a      	cmp	r2, r3
 801bf06:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801bf0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801bf0e:	fbb2 f6f3 	udiv	r6, r2, r3
 801bf12:	d331      	bcc.n	801bf78 <quorem+0x9c>
 801bf14:	f04f 0e00 	mov.w	lr, #0
 801bf18:	4640      	mov	r0, r8
 801bf1a:	46ac      	mov	ip, r5
 801bf1c:	46f2      	mov	sl, lr
 801bf1e:	f850 2b04 	ldr.w	r2, [r0], #4
 801bf22:	b293      	uxth	r3, r2
 801bf24:	fb06 e303 	mla	r3, r6, r3, lr
 801bf28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bf2c:	0c1a      	lsrs	r2, r3, #16
 801bf2e:	b29b      	uxth	r3, r3
 801bf30:	ebaa 0303 	sub.w	r3, sl, r3
 801bf34:	f8dc a000 	ldr.w	sl, [ip]
 801bf38:	fa13 f38a 	uxtah	r3, r3, sl
 801bf3c:	fb06 220e 	mla	r2, r6, lr, r2
 801bf40:	9300      	str	r3, [sp, #0]
 801bf42:	9b00      	ldr	r3, [sp, #0]
 801bf44:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bf48:	b292      	uxth	r2, r2
 801bf4a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801bf4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bf52:	f8bd 3000 	ldrh.w	r3, [sp]
 801bf56:	4581      	cmp	r9, r0
 801bf58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bf5c:	f84c 3b04 	str.w	r3, [ip], #4
 801bf60:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801bf64:	d2db      	bcs.n	801bf1e <quorem+0x42>
 801bf66:	f855 300b 	ldr.w	r3, [r5, fp]
 801bf6a:	b92b      	cbnz	r3, 801bf78 <quorem+0x9c>
 801bf6c:	9b01      	ldr	r3, [sp, #4]
 801bf6e:	3b04      	subs	r3, #4
 801bf70:	429d      	cmp	r5, r3
 801bf72:	461a      	mov	r2, r3
 801bf74:	d32c      	bcc.n	801bfd0 <quorem+0xf4>
 801bf76:	613c      	str	r4, [r7, #16]
 801bf78:	4638      	mov	r0, r7
 801bf7a:	f001 f96b 	bl	801d254 <__mcmp>
 801bf7e:	2800      	cmp	r0, #0
 801bf80:	db22      	blt.n	801bfc8 <quorem+0xec>
 801bf82:	3601      	adds	r6, #1
 801bf84:	4629      	mov	r1, r5
 801bf86:	2000      	movs	r0, #0
 801bf88:	f858 2b04 	ldr.w	r2, [r8], #4
 801bf8c:	f8d1 c000 	ldr.w	ip, [r1]
 801bf90:	b293      	uxth	r3, r2
 801bf92:	1ac3      	subs	r3, r0, r3
 801bf94:	0c12      	lsrs	r2, r2, #16
 801bf96:	fa13 f38c 	uxtah	r3, r3, ip
 801bf9a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801bf9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bfa2:	b29b      	uxth	r3, r3
 801bfa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bfa8:	45c1      	cmp	r9, r8
 801bfaa:	f841 3b04 	str.w	r3, [r1], #4
 801bfae:	ea4f 4022 	mov.w	r0, r2, asr #16
 801bfb2:	d2e9      	bcs.n	801bf88 <quorem+0xac>
 801bfb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bfb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bfbc:	b922      	cbnz	r2, 801bfc8 <quorem+0xec>
 801bfbe:	3b04      	subs	r3, #4
 801bfc0:	429d      	cmp	r5, r3
 801bfc2:	461a      	mov	r2, r3
 801bfc4:	d30a      	bcc.n	801bfdc <quorem+0x100>
 801bfc6:	613c      	str	r4, [r7, #16]
 801bfc8:	4630      	mov	r0, r6
 801bfca:	b003      	add	sp, #12
 801bfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfd0:	6812      	ldr	r2, [r2, #0]
 801bfd2:	3b04      	subs	r3, #4
 801bfd4:	2a00      	cmp	r2, #0
 801bfd6:	d1ce      	bne.n	801bf76 <quorem+0x9a>
 801bfd8:	3c01      	subs	r4, #1
 801bfda:	e7c9      	b.n	801bf70 <quorem+0x94>
 801bfdc:	6812      	ldr	r2, [r2, #0]
 801bfde:	3b04      	subs	r3, #4
 801bfe0:	2a00      	cmp	r2, #0
 801bfe2:	d1f0      	bne.n	801bfc6 <quorem+0xea>
 801bfe4:	3c01      	subs	r4, #1
 801bfe6:	e7eb      	b.n	801bfc0 <quorem+0xe4>
 801bfe8:	2000      	movs	r0, #0
 801bfea:	e7ee      	b.n	801bfca <quorem+0xee>
 801bfec:	0000      	movs	r0, r0
	...

0801bff0 <_dtoa_r>:
 801bff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bff4:	ed2d 8b02 	vpush	{d8}
 801bff8:	69c5      	ldr	r5, [r0, #28]
 801bffa:	b091      	sub	sp, #68	; 0x44
 801bffc:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c000:	ec59 8b10 	vmov	r8, r9, d0
 801c004:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801c006:	9106      	str	r1, [sp, #24]
 801c008:	4606      	mov	r6, r0
 801c00a:	9208      	str	r2, [sp, #32]
 801c00c:	930c      	str	r3, [sp, #48]	; 0x30
 801c00e:	b975      	cbnz	r5, 801c02e <_dtoa_r+0x3e>
 801c010:	2010      	movs	r0, #16
 801c012:	f000 fda5 	bl	801cb60 <malloc>
 801c016:	4602      	mov	r2, r0
 801c018:	61f0      	str	r0, [r6, #28]
 801c01a:	b920      	cbnz	r0, 801c026 <_dtoa_r+0x36>
 801c01c:	4ba6      	ldr	r3, [pc, #664]	; (801c2b8 <_dtoa_r+0x2c8>)
 801c01e:	21ef      	movs	r1, #239	; 0xef
 801c020:	48a6      	ldr	r0, [pc, #664]	; (801c2bc <_dtoa_r+0x2cc>)
 801c022:	f002 ff31 	bl	801ee88 <__assert_func>
 801c026:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c02a:	6005      	str	r5, [r0, #0]
 801c02c:	60c5      	str	r5, [r0, #12]
 801c02e:	69f3      	ldr	r3, [r6, #28]
 801c030:	6819      	ldr	r1, [r3, #0]
 801c032:	b151      	cbz	r1, 801c04a <_dtoa_r+0x5a>
 801c034:	685a      	ldr	r2, [r3, #4]
 801c036:	604a      	str	r2, [r1, #4]
 801c038:	2301      	movs	r3, #1
 801c03a:	4093      	lsls	r3, r2
 801c03c:	608b      	str	r3, [r1, #8]
 801c03e:	4630      	mov	r0, r6
 801c040:	f000 fe82 	bl	801cd48 <_Bfree>
 801c044:	69f3      	ldr	r3, [r6, #28]
 801c046:	2200      	movs	r2, #0
 801c048:	601a      	str	r2, [r3, #0]
 801c04a:	f1b9 0300 	subs.w	r3, r9, #0
 801c04e:	bfbb      	ittet	lt
 801c050:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c054:	9303      	strlt	r3, [sp, #12]
 801c056:	2300      	movge	r3, #0
 801c058:	2201      	movlt	r2, #1
 801c05a:	bfac      	ite	ge
 801c05c:	6023      	strge	r3, [r4, #0]
 801c05e:	6022      	strlt	r2, [r4, #0]
 801c060:	4b97      	ldr	r3, [pc, #604]	; (801c2c0 <_dtoa_r+0x2d0>)
 801c062:	9c03      	ldr	r4, [sp, #12]
 801c064:	43a3      	bics	r3, r4
 801c066:	d11c      	bne.n	801c0a2 <_dtoa_r+0xb2>
 801c068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c06a:	f242 730f 	movw	r3, #9999	; 0x270f
 801c06e:	6013      	str	r3, [r2, #0]
 801c070:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801c074:	ea53 0308 	orrs.w	r3, r3, r8
 801c078:	f000 84fb 	beq.w	801ca72 <_dtoa_r+0xa82>
 801c07c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c07e:	b963      	cbnz	r3, 801c09a <_dtoa_r+0xaa>
 801c080:	4b90      	ldr	r3, [pc, #576]	; (801c2c4 <_dtoa_r+0x2d4>)
 801c082:	e020      	b.n	801c0c6 <_dtoa_r+0xd6>
 801c084:	4b90      	ldr	r3, [pc, #576]	; (801c2c8 <_dtoa_r+0x2d8>)
 801c086:	9301      	str	r3, [sp, #4]
 801c088:	3308      	adds	r3, #8
 801c08a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c08c:	6013      	str	r3, [r2, #0]
 801c08e:	9801      	ldr	r0, [sp, #4]
 801c090:	b011      	add	sp, #68	; 0x44
 801c092:	ecbd 8b02 	vpop	{d8}
 801c096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c09a:	4b8a      	ldr	r3, [pc, #552]	; (801c2c4 <_dtoa_r+0x2d4>)
 801c09c:	9301      	str	r3, [sp, #4]
 801c09e:	3303      	adds	r3, #3
 801c0a0:	e7f3      	b.n	801c08a <_dtoa_r+0x9a>
 801c0a2:	ed9d 8b02 	vldr	d8, [sp, #8]
 801c0a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801c0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0ae:	d10c      	bne.n	801c0ca <_dtoa_r+0xda>
 801c0b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c0b2:	2301      	movs	r3, #1
 801c0b4:	6013      	str	r3, [r2, #0]
 801c0b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	f000 84d7 	beq.w	801ca6c <_dtoa_r+0xa7c>
 801c0be:	4b83      	ldr	r3, [pc, #524]	; (801c2cc <_dtoa_r+0x2dc>)
 801c0c0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c0c2:	6013      	str	r3, [r2, #0]
 801c0c4:	3b01      	subs	r3, #1
 801c0c6:	9301      	str	r3, [sp, #4]
 801c0c8:	e7e1      	b.n	801c08e <_dtoa_r+0x9e>
 801c0ca:	aa0e      	add	r2, sp, #56	; 0x38
 801c0cc:	a90f      	add	r1, sp, #60	; 0x3c
 801c0ce:	4630      	mov	r0, r6
 801c0d0:	eeb0 0b48 	vmov.f64	d0, d8
 801c0d4:	f001 f9d4 	bl	801d480 <__d2b>
 801c0d8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801c0dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c0de:	4605      	mov	r5, r0
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d046      	beq.n	801c172 <_dtoa_r+0x182>
 801c0e4:	eeb0 7b48 	vmov.f64	d7, d8
 801c0e8:	ee18 1a90 	vmov	r1, s17
 801c0ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801c0f0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801c0f4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801c0f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c0fc:	2000      	movs	r0, #0
 801c0fe:	ee07 1a90 	vmov	s15, r1
 801c102:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801c106:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801c2a0 <_dtoa_r+0x2b0>
 801c10a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c10e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801c2a8 <_dtoa_r+0x2b8>
 801c112:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c116:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801c2b0 <_dtoa_r+0x2c0>
 801c11a:	ee07 3a90 	vmov	s15, r3
 801c11e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801c122:	eeb0 7b46 	vmov.f64	d7, d6
 801c126:	eea4 7b05 	vfma.f64	d7, d4, d5
 801c12a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801c12e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801c132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c136:	ee16 ba90 	vmov	fp, s13
 801c13a:	9009      	str	r0, [sp, #36]	; 0x24
 801c13c:	d508      	bpl.n	801c150 <_dtoa_r+0x160>
 801c13e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801c142:	eeb4 6b47 	vcmp.f64	d6, d7
 801c146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c14a:	bf18      	it	ne
 801c14c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801c150:	f1bb 0f16 	cmp.w	fp, #22
 801c154:	d82b      	bhi.n	801c1ae <_dtoa_r+0x1be>
 801c156:	495e      	ldr	r1, [pc, #376]	; (801c2d0 <_dtoa_r+0x2e0>)
 801c158:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801c15c:	ed91 7b00 	vldr	d7, [r1]
 801c160:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801c164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c168:	d501      	bpl.n	801c16e <_dtoa_r+0x17e>
 801c16a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c16e:	2100      	movs	r1, #0
 801c170:	e01e      	b.n	801c1b0 <_dtoa_r+0x1c0>
 801c172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c174:	4413      	add	r3, r2
 801c176:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801c17a:	2920      	cmp	r1, #32
 801c17c:	bfc1      	itttt	gt
 801c17e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801c182:	408c      	lslgt	r4, r1
 801c184:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801c188:	fa28 f101 	lsrgt.w	r1, r8, r1
 801c18c:	bfd6      	itet	le
 801c18e:	f1c1 0120 	rsble	r1, r1, #32
 801c192:	4321      	orrgt	r1, r4
 801c194:	fa08 f101 	lslle.w	r1, r8, r1
 801c198:	ee07 1a90 	vmov	s15, r1
 801c19c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c1a0:	3b01      	subs	r3, #1
 801c1a2:	ee17 1a90 	vmov	r1, s15
 801c1a6:	2001      	movs	r0, #1
 801c1a8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801c1ac:	e7a7      	b.n	801c0fe <_dtoa_r+0x10e>
 801c1ae:	2101      	movs	r1, #1
 801c1b0:	1ad2      	subs	r2, r2, r3
 801c1b2:	1e53      	subs	r3, r2, #1
 801c1b4:	9305      	str	r3, [sp, #20]
 801c1b6:	bf45      	ittet	mi
 801c1b8:	f1c2 0301 	rsbmi	r3, r2, #1
 801c1bc:	9304      	strmi	r3, [sp, #16]
 801c1be:	2300      	movpl	r3, #0
 801c1c0:	2300      	movmi	r3, #0
 801c1c2:	bf4c      	ite	mi
 801c1c4:	9305      	strmi	r3, [sp, #20]
 801c1c6:	9304      	strpl	r3, [sp, #16]
 801c1c8:	f1bb 0f00 	cmp.w	fp, #0
 801c1cc:	910b      	str	r1, [sp, #44]	; 0x2c
 801c1ce:	db18      	blt.n	801c202 <_dtoa_r+0x212>
 801c1d0:	9b05      	ldr	r3, [sp, #20]
 801c1d2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801c1d6:	445b      	add	r3, fp
 801c1d8:	9305      	str	r3, [sp, #20]
 801c1da:	2300      	movs	r3, #0
 801c1dc:	9a06      	ldr	r2, [sp, #24]
 801c1de:	2a09      	cmp	r2, #9
 801c1e0:	d848      	bhi.n	801c274 <_dtoa_r+0x284>
 801c1e2:	2a05      	cmp	r2, #5
 801c1e4:	bfc4      	itt	gt
 801c1e6:	3a04      	subgt	r2, #4
 801c1e8:	9206      	strgt	r2, [sp, #24]
 801c1ea:	9a06      	ldr	r2, [sp, #24]
 801c1ec:	f1a2 0202 	sub.w	r2, r2, #2
 801c1f0:	bfcc      	ite	gt
 801c1f2:	2400      	movgt	r4, #0
 801c1f4:	2401      	movle	r4, #1
 801c1f6:	2a03      	cmp	r2, #3
 801c1f8:	d847      	bhi.n	801c28a <_dtoa_r+0x29a>
 801c1fa:	e8df f002 	tbb	[pc, r2]
 801c1fe:	2d0b      	.short	0x2d0b
 801c200:	392b      	.short	0x392b
 801c202:	9b04      	ldr	r3, [sp, #16]
 801c204:	2200      	movs	r2, #0
 801c206:	eba3 030b 	sub.w	r3, r3, fp
 801c20a:	9304      	str	r3, [sp, #16]
 801c20c:	920a      	str	r2, [sp, #40]	; 0x28
 801c20e:	f1cb 0300 	rsb	r3, fp, #0
 801c212:	e7e3      	b.n	801c1dc <_dtoa_r+0x1ec>
 801c214:	2200      	movs	r2, #0
 801c216:	9207      	str	r2, [sp, #28]
 801c218:	9a08      	ldr	r2, [sp, #32]
 801c21a:	2a00      	cmp	r2, #0
 801c21c:	dc38      	bgt.n	801c290 <_dtoa_r+0x2a0>
 801c21e:	f04f 0a01 	mov.w	sl, #1
 801c222:	46d1      	mov	r9, sl
 801c224:	4652      	mov	r2, sl
 801c226:	f8cd a020 	str.w	sl, [sp, #32]
 801c22a:	69f7      	ldr	r7, [r6, #28]
 801c22c:	2100      	movs	r1, #0
 801c22e:	2004      	movs	r0, #4
 801c230:	f100 0c14 	add.w	ip, r0, #20
 801c234:	4594      	cmp	ip, r2
 801c236:	d930      	bls.n	801c29a <_dtoa_r+0x2aa>
 801c238:	6079      	str	r1, [r7, #4]
 801c23a:	4630      	mov	r0, r6
 801c23c:	930d      	str	r3, [sp, #52]	; 0x34
 801c23e:	f000 fd43 	bl	801ccc8 <_Balloc>
 801c242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c244:	9001      	str	r0, [sp, #4]
 801c246:	4602      	mov	r2, r0
 801c248:	2800      	cmp	r0, #0
 801c24a:	d145      	bne.n	801c2d8 <_dtoa_r+0x2e8>
 801c24c:	4b21      	ldr	r3, [pc, #132]	; (801c2d4 <_dtoa_r+0x2e4>)
 801c24e:	f240 11af 	movw	r1, #431	; 0x1af
 801c252:	e6e5      	b.n	801c020 <_dtoa_r+0x30>
 801c254:	2201      	movs	r2, #1
 801c256:	e7de      	b.n	801c216 <_dtoa_r+0x226>
 801c258:	2200      	movs	r2, #0
 801c25a:	9207      	str	r2, [sp, #28]
 801c25c:	9a08      	ldr	r2, [sp, #32]
 801c25e:	eb0b 0a02 	add.w	sl, fp, r2
 801c262:	f10a 0901 	add.w	r9, sl, #1
 801c266:	464a      	mov	r2, r9
 801c268:	2a01      	cmp	r2, #1
 801c26a:	bfb8      	it	lt
 801c26c:	2201      	movlt	r2, #1
 801c26e:	e7dc      	b.n	801c22a <_dtoa_r+0x23a>
 801c270:	2201      	movs	r2, #1
 801c272:	e7f2      	b.n	801c25a <_dtoa_r+0x26a>
 801c274:	2401      	movs	r4, #1
 801c276:	2200      	movs	r2, #0
 801c278:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801c27c:	f04f 3aff 	mov.w	sl, #4294967295
 801c280:	2100      	movs	r1, #0
 801c282:	46d1      	mov	r9, sl
 801c284:	2212      	movs	r2, #18
 801c286:	9108      	str	r1, [sp, #32]
 801c288:	e7cf      	b.n	801c22a <_dtoa_r+0x23a>
 801c28a:	2201      	movs	r2, #1
 801c28c:	9207      	str	r2, [sp, #28]
 801c28e:	e7f5      	b.n	801c27c <_dtoa_r+0x28c>
 801c290:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c294:	46d1      	mov	r9, sl
 801c296:	4652      	mov	r2, sl
 801c298:	e7c7      	b.n	801c22a <_dtoa_r+0x23a>
 801c29a:	3101      	adds	r1, #1
 801c29c:	0040      	lsls	r0, r0, #1
 801c29e:	e7c7      	b.n	801c230 <_dtoa_r+0x240>
 801c2a0:	636f4361 	.word	0x636f4361
 801c2a4:	3fd287a7 	.word	0x3fd287a7
 801c2a8:	8b60c8b3 	.word	0x8b60c8b3
 801c2ac:	3fc68a28 	.word	0x3fc68a28
 801c2b0:	509f79fb 	.word	0x509f79fb
 801c2b4:	3fd34413 	.word	0x3fd34413
 801c2b8:	08020488 	.word	0x08020488
 801c2bc:	0802049f 	.word	0x0802049f
 801c2c0:	7ff00000 	.word	0x7ff00000
 801c2c4:	08020484 	.word	0x08020484
 801c2c8:	0802047b 	.word	0x0802047b
 801c2cc:	080207e1 	.word	0x080207e1
 801c2d0:	08020590 	.word	0x08020590
 801c2d4:	080204f7 	.word	0x080204f7
 801c2d8:	69f2      	ldr	r2, [r6, #28]
 801c2da:	9901      	ldr	r1, [sp, #4]
 801c2dc:	6011      	str	r1, [r2, #0]
 801c2de:	f1b9 0f0e 	cmp.w	r9, #14
 801c2e2:	d86c      	bhi.n	801c3be <_dtoa_r+0x3ce>
 801c2e4:	2c00      	cmp	r4, #0
 801c2e6:	d06a      	beq.n	801c3be <_dtoa_r+0x3ce>
 801c2e8:	f1bb 0f00 	cmp.w	fp, #0
 801c2ec:	f340 80a0 	ble.w	801c430 <_dtoa_r+0x440>
 801c2f0:	4ac1      	ldr	r2, [pc, #772]	; (801c5f8 <_dtoa_r+0x608>)
 801c2f2:	f00b 010f 	and.w	r1, fp, #15
 801c2f6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801c2fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801c2fe:	ed92 7b00 	vldr	d7, [r2]
 801c302:	ea4f 122b 	mov.w	r2, fp, asr #4
 801c306:	f000 8087 	beq.w	801c418 <_dtoa_r+0x428>
 801c30a:	49bc      	ldr	r1, [pc, #752]	; (801c5fc <_dtoa_r+0x60c>)
 801c30c:	ed91 6b08 	vldr	d6, [r1, #32]
 801c310:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801c314:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c318:	f002 020f 	and.w	r2, r2, #15
 801c31c:	2103      	movs	r1, #3
 801c31e:	48b7      	ldr	r0, [pc, #732]	; (801c5fc <_dtoa_r+0x60c>)
 801c320:	2a00      	cmp	r2, #0
 801c322:	d17b      	bne.n	801c41c <_dtoa_r+0x42c>
 801c324:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c328:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c32c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c330:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c332:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c336:	2a00      	cmp	r2, #0
 801c338:	f000 80a0 	beq.w	801c47c <_dtoa_r+0x48c>
 801c33c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801c340:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c348:	f140 8098 	bpl.w	801c47c <_dtoa_r+0x48c>
 801c34c:	f1b9 0f00 	cmp.w	r9, #0
 801c350:	f000 8094 	beq.w	801c47c <_dtoa_r+0x48c>
 801c354:	f1ba 0f00 	cmp.w	sl, #0
 801c358:	dd2f      	ble.n	801c3ba <_dtoa_r+0x3ca>
 801c35a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801c35e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c362:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c366:	f10b 32ff 	add.w	r2, fp, #4294967295
 801c36a:	3101      	adds	r1, #1
 801c36c:	4654      	mov	r4, sl
 801c36e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c372:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801c376:	ee07 1a90 	vmov	s15, r1
 801c37a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c37e:	eea7 5b06 	vfma.f64	d5, d7, d6
 801c382:	ee15 7a90 	vmov	r7, s11
 801c386:	ec51 0b15 	vmov	r0, r1, d5
 801c38a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801c38e:	2c00      	cmp	r4, #0
 801c390:	d177      	bne.n	801c482 <_dtoa_r+0x492>
 801c392:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c396:	ee36 6b47 	vsub.f64	d6, d6, d7
 801c39a:	ec41 0b17 	vmov	d7, r0, r1
 801c39e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3a6:	f300 826a 	bgt.w	801c87e <_dtoa_r+0x88e>
 801c3aa:	eeb1 7b47 	vneg.f64	d7, d7
 801c3ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3b6:	f100 8260 	bmi.w	801c87a <_dtoa_r+0x88a>
 801c3ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 801c3be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c3c0:	2a00      	cmp	r2, #0
 801c3c2:	f2c0 811d 	blt.w	801c600 <_dtoa_r+0x610>
 801c3c6:	f1bb 0f0e 	cmp.w	fp, #14
 801c3ca:	f300 8119 	bgt.w	801c600 <_dtoa_r+0x610>
 801c3ce:	4b8a      	ldr	r3, [pc, #552]	; (801c5f8 <_dtoa_r+0x608>)
 801c3d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c3d4:	ed93 6b00 	vldr	d6, [r3]
 801c3d8:	9b08      	ldr	r3, [sp, #32]
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	f280 80b7 	bge.w	801c54e <_dtoa_r+0x55e>
 801c3e0:	f1b9 0f00 	cmp.w	r9, #0
 801c3e4:	f300 80b3 	bgt.w	801c54e <_dtoa_r+0x55e>
 801c3e8:	f040 8246 	bne.w	801c878 <_dtoa_r+0x888>
 801c3ec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c3f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 801c3f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c3f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c400:	464c      	mov	r4, r9
 801c402:	464f      	mov	r7, r9
 801c404:	f280 821c 	bge.w	801c840 <_dtoa_r+0x850>
 801c408:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c40c:	2331      	movs	r3, #49	; 0x31
 801c40e:	f808 3b01 	strb.w	r3, [r8], #1
 801c412:	f10b 0b01 	add.w	fp, fp, #1
 801c416:	e218      	b.n	801c84a <_dtoa_r+0x85a>
 801c418:	2102      	movs	r1, #2
 801c41a:	e780      	b.n	801c31e <_dtoa_r+0x32e>
 801c41c:	07d4      	lsls	r4, r2, #31
 801c41e:	d504      	bpl.n	801c42a <_dtoa_r+0x43a>
 801c420:	ed90 6b00 	vldr	d6, [r0]
 801c424:	3101      	adds	r1, #1
 801c426:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c42a:	1052      	asrs	r2, r2, #1
 801c42c:	3008      	adds	r0, #8
 801c42e:	e777      	b.n	801c320 <_dtoa_r+0x330>
 801c430:	d022      	beq.n	801c478 <_dtoa_r+0x488>
 801c432:	f1cb 0200 	rsb	r2, fp, #0
 801c436:	4970      	ldr	r1, [pc, #448]	; (801c5f8 <_dtoa_r+0x608>)
 801c438:	f002 000f 	and.w	r0, r2, #15
 801c43c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c440:	ed91 7b00 	vldr	d7, [r1]
 801c444:	ee28 7b07 	vmul.f64	d7, d8, d7
 801c448:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c44c:	486b      	ldr	r0, [pc, #428]	; (801c5fc <_dtoa_r+0x60c>)
 801c44e:	1112      	asrs	r2, r2, #4
 801c450:	2400      	movs	r4, #0
 801c452:	2102      	movs	r1, #2
 801c454:	b92a      	cbnz	r2, 801c462 <_dtoa_r+0x472>
 801c456:	2c00      	cmp	r4, #0
 801c458:	f43f af6a 	beq.w	801c330 <_dtoa_r+0x340>
 801c45c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c460:	e766      	b.n	801c330 <_dtoa_r+0x340>
 801c462:	07d7      	lsls	r7, r2, #31
 801c464:	d505      	bpl.n	801c472 <_dtoa_r+0x482>
 801c466:	ed90 6b00 	vldr	d6, [r0]
 801c46a:	3101      	adds	r1, #1
 801c46c:	2401      	movs	r4, #1
 801c46e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c472:	1052      	asrs	r2, r2, #1
 801c474:	3008      	adds	r0, #8
 801c476:	e7ed      	b.n	801c454 <_dtoa_r+0x464>
 801c478:	2102      	movs	r1, #2
 801c47a:	e759      	b.n	801c330 <_dtoa_r+0x340>
 801c47c:	465a      	mov	r2, fp
 801c47e:	464c      	mov	r4, r9
 801c480:	e775      	b.n	801c36e <_dtoa_r+0x37e>
 801c482:	ec41 0b17 	vmov	d7, r0, r1
 801c486:	495c      	ldr	r1, [pc, #368]	; (801c5f8 <_dtoa_r+0x608>)
 801c488:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801c48c:	ed11 4b02 	vldr	d4, [r1, #-8]
 801c490:	9901      	ldr	r1, [sp, #4]
 801c492:	440c      	add	r4, r1
 801c494:	9907      	ldr	r1, [sp, #28]
 801c496:	b351      	cbz	r1, 801c4ee <_dtoa_r+0x4fe>
 801c498:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801c49c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801c4a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c4a4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801c4a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c4ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c4b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c4b4:	ee14 1a90 	vmov	r1, s9
 801c4b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c4bc:	3130      	adds	r1, #48	; 0x30
 801c4be:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c4c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4ca:	f808 1b01 	strb.w	r1, [r8], #1
 801c4ce:	d439      	bmi.n	801c544 <_dtoa_r+0x554>
 801c4d0:	ee32 5b46 	vsub.f64	d5, d2, d6
 801c4d4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801c4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4dc:	d472      	bmi.n	801c5c4 <_dtoa_r+0x5d4>
 801c4de:	45a0      	cmp	r8, r4
 801c4e0:	f43f af6b 	beq.w	801c3ba <_dtoa_r+0x3ca>
 801c4e4:	ee27 7b03 	vmul.f64	d7, d7, d3
 801c4e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c4ec:	e7e0      	b.n	801c4b0 <_dtoa_r+0x4c0>
 801c4ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c4f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c4f6:	4620      	mov	r0, r4
 801c4f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c4fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c500:	ee14 1a90 	vmov	r1, s9
 801c504:	3130      	adds	r1, #48	; 0x30
 801c506:	f808 1b01 	strb.w	r1, [r8], #1
 801c50a:	45a0      	cmp	r8, r4
 801c50c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c510:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c514:	d118      	bne.n	801c548 <_dtoa_r+0x558>
 801c516:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801c51a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801c51e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801c522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c526:	dc4d      	bgt.n	801c5c4 <_dtoa_r+0x5d4>
 801c528:	ee35 5b47 	vsub.f64	d5, d5, d7
 801c52c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801c530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c534:	f57f af41 	bpl.w	801c3ba <_dtoa_r+0x3ca>
 801c538:	4680      	mov	r8, r0
 801c53a:	3801      	subs	r0, #1
 801c53c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801c540:	2b30      	cmp	r3, #48	; 0x30
 801c542:	d0f9      	beq.n	801c538 <_dtoa_r+0x548>
 801c544:	4693      	mov	fp, r2
 801c546:	e02a      	b.n	801c59e <_dtoa_r+0x5ae>
 801c548:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c54c:	e7d6      	b.n	801c4fc <_dtoa_r+0x50c>
 801c54e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c552:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801c556:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c55a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801c55e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801c562:	ee15 3a10 	vmov	r3, s10
 801c566:	3330      	adds	r3, #48	; 0x30
 801c568:	f808 3b01 	strb.w	r3, [r8], #1
 801c56c:	9b01      	ldr	r3, [sp, #4]
 801c56e:	eba8 0303 	sub.w	r3, r8, r3
 801c572:	4599      	cmp	r9, r3
 801c574:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801c578:	eea3 7b46 	vfms.f64	d7, d3, d6
 801c57c:	d133      	bne.n	801c5e6 <_dtoa_r+0x5f6>
 801c57e:	ee37 7b07 	vadd.f64	d7, d7, d7
 801c582:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c58a:	dc1a      	bgt.n	801c5c2 <_dtoa_r+0x5d2>
 801c58c:	eeb4 7b46 	vcmp.f64	d7, d6
 801c590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c594:	d103      	bne.n	801c59e <_dtoa_r+0x5ae>
 801c596:	ee15 3a10 	vmov	r3, s10
 801c59a:	07d9      	lsls	r1, r3, #31
 801c59c:	d411      	bmi.n	801c5c2 <_dtoa_r+0x5d2>
 801c59e:	4629      	mov	r1, r5
 801c5a0:	4630      	mov	r0, r6
 801c5a2:	f000 fbd1 	bl	801cd48 <_Bfree>
 801c5a6:	2300      	movs	r3, #0
 801c5a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c5aa:	f888 3000 	strb.w	r3, [r8]
 801c5ae:	f10b 0301 	add.w	r3, fp, #1
 801c5b2:	6013      	str	r3, [r2, #0]
 801c5b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	f43f ad69 	beq.w	801c08e <_dtoa_r+0x9e>
 801c5bc:	f8c3 8000 	str.w	r8, [r3]
 801c5c0:	e565      	b.n	801c08e <_dtoa_r+0x9e>
 801c5c2:	465a      	mov	r2, fp
 801c5c4:	4643      	mov	r3, r8
 801c5c6:	4698      	mov	r8, r3
 801c5c8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801c5cc:	2939      	cmp	r1, #57	; 0x39
 801c5ce:	d106      	bne.n	801c5de <_dtoa_r+0x5ee>
 801c5d0:	9901      	ldr	r1, [sp, #4]
 801c5d2:	4299      	cmp	r1, r3
 801c5d4:	d1f7      	bne.n	801c5c6 <_dtoa_r+0x5d6>
 801c5d6:	9801      	ldr	r0, [sp, #4]
 801c5d8:	2130      	movs	r1, #48	; 0x30
 801c5da:	3201      	adds	r2, #1
 801c5dc:	7001      	strb	r1, [r0, #0]
 801c5de:	7819      	ldrb	r1, [r3, #0]
 801c5e0:	3101      	adds	r1, #1
 801c5e2:	7019      	strb	r1, [r3, #0]
 801c5e4:	e7ae      	b.n	801c544 <_dtoa_r+0x554>
 801c5e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c5ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5f2:	d1b2      	bne.n	801c55a <_dtoa_r+0x56a>
 801c5f4:	e7d3      	b.n	801c59e <_dtoa_r+0x5ae>
 801c5f6:	bf00      	nop
 801c5f8:	08020590 	.word	0x08020590
 801c5fc:	08020568 	.word	0x08020568
 801c600:	9907      	ldr	r1, [sp, #28]
 801c602:	2900      	cmp	r1, #0
 801c604:	f000 80d0 	beq.w	801c7a8 <_dtoa_r+0x7b8>
 801c608:	9906      	ldr	r1, [sp, #24]
 801c60a:	2901      	cmp	r1, #1
 801c60c:	f300 80b4 	bgt.w	801c778 <_dtoa_r+0x788>
 801c610:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c612:	2900      	cmp	r1, #0
 801c614:	f000 80ac 	beq.w	801c770 <_dtoa_r+0x780>
 801c618:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c61c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c620:	461c      	mov	r4, r3
 801c622:	9309      	str	r3, [sp, #36]	; 0x24
 801c624:	9b04      	ldr	r3, [sp, #16]
 801c626:	4413      	add	r3, r2
 801c628:	9304      	str	r3, [sp, #16]
 801c62a:	9b05      	ldr	r3, [sp, #20]
 801c62c:	2101      	movs	r1, #1
 801c62e:	4413      	add	r3, r2
 801c630:	4630      	mov	r0, r6
 801c632:	9305      	str	r3, [sp, #20]
 801c634:	f000 fc88 	bl	801cf48 <__i2b>
 801c638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c63a:	4607      	mov	r7, r0
 801c63c:	f1b8 0f00 	cmp.w	r8, #0
 801c640:	d00d      	beq.n	801c65e <_dtoa_r+0x66e>
 801c642:	9a05      	ldr	r2, [sp, #20]
 801c644:	2a00      	cmp	r2, #0
 801c646:	dd0a      	ble.n	801c65e <_dtoa_r+0x66e>
 801c648:	4542      	cmp	r2, r8
 801c64a:	9904      	ldr	r1, [sp, #16]
 801c64c:	bfa8      	it	ge
 801c64e:	4642      	movge	r2, r8
 801c650:	1a89      	subs	r1, r1, r2
 801c652:	9104      	str	r1, [sp, #16]
 801c654:	9905      	ldr	r1, [sp, #20]
 801c656:	eba8 0802 	sub.w	r8, r8, r2
 801c65a:	1a8a      	subs	r2, r1, r2
 801c65c:	9205      	str	r2, [sp, #20]
 801c65e:	b303      	cbz	r3, 801c6a2 <_dtoa_r+0x6b2>
 801c660:	9a07      	ldr	r2, [sp, #28]
 801c662:	2a00      	cmp	r2, #0
 801c664:	f000 80a5 	beq.w	801c7b2 <_dtoa_r+0x7c2>
 801c668:	2c00      	cmp	r4, #0
 801c66a:	dd13      	ble.n	801c694 <_dtoa_r+0x6a4>
 801c66c:	4639      	mov	r1, r7
 801c66e:	4622      	mov	r2, r4
 801c670:	4630      	mov	r0, r6
 801c672:	930d      	str	r3, [sp, #52]	; 0x34
 801c674:	f000 fd28 	bl	801d0c8 <__pow5mult>
 801c678:	462a      	mov	r2, r5
 801c67a:	4601      	mov	r1, r0
 801c67c:	4607      	mov	r7, r0
 801c67e:	4630      	mov	r0, r6
 801c680:	f000 fc78 	bl	801cf74 <__multiply>
 801c684:	4629      	mov	r1, r5
 801c686:	9009      	str	r0, [sp, #36]	; 0x24
 801c688:	4630      	mov	r0, r6
 801c68a:	f000 fb5d 	bl	801cd48 <_Bfree>
 801c68e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c690:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c692:	4615      	mov	r5, r2
 801c694:	1b1a      	subs	r2, r3, r4
 801c696:	d004      	beq.n	801c6a2 <_dtoa_r+0x6b2>
 801c698:	4629      	mov	r1, r5
 801c69a:	4630      	mov	r0, r6
 801c69c:	f000 fd14 	bl	801d0c8 <__pow5mult>
 801c6a0:	4605      	mov	r5, r0
 801c6a2:	2101      	movs	r1, #1
 801c6a4:	4630      	mov	r0, r6
 801c6a6:	f000 fc4f 	bl	801cf48 <__i2b>
 801c6aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	4604      	mov	r4, r0
 801c6b0:	f340 8081 	ble.w	801c7b6 <_dtoa_r+0x7c6>
 801c6b4:	461a      	mov	r2, r3
 801c6b6:	4601      	mov	r1, r0
 801c6b8:	4630      	mov	r0, r6
 801c6ba:	f000 fd05 	bl	801d0c8 <__pow5mult>
 801c6be:	9b06      	ldr	r3, [sp, #24]
 801c6c0:	2b01      	cmp	r3, #1
 801c6c2:	4604      	mov	r4, r0
 801c6c4:	dd7a      	ble.n	801c7bc <_dtoa_r+0x7cc>
 801c6c6:	2300      	movs	r3, #0
 801c6c8:	9309      	str	r3, [sp, #36]	; 0x24
 801c6ca:	6922      	ldr	r2, [r4, #16]
 801c6cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c6d0:	6910      	ldr	r0, [r2, #16]
 801c6d2:	f000 fbeb 	bl	801ceac <__hi0bits>
 801c6d6:	f1c0 0020 	rsb	r0, r0, #32
 801c6da:	9b05      	ldr	r3, [sp, #20]
 801c6dc:	4418      	add	r0, r3
 801c6de:	f010 001f 	ands.w	r0, r0, #31
 801c6e2:	f000 8093 	beq.w	801c80c <_dtoa_r+0x81c>
 801c6e6:	f1c0 0220 	rsb	r2, r0, #32
 801c6ea:	2a04      	cmp	r2, #4
 801c6ec:	f340 8085 	ble.w	801c7fa <_dtoa_r+0x80a>
 801c6f0:	9b04      	ldr	r3, [sp, #16]
 801c6f2:	f1c0 001c 	rsb	r0, r0, #28
 801c6f6:	4403      	add	r3, r0
 801c6f8:	9304      	str	r3, [sp, #16]
 801c6fa:	9b05      	ldr	r3, [sp, #20]
 801c6fc:	4480      	add	r8, r0
 801c6fe:	4403      	add	r3, r0
 801c700:	9305      	str	r3, [sp, #20]
 801c702:	9b04      	ldr	r3, [sp, #16]
 801c704:	2b00      	cmp	r3, #0
 801c706:	dd05      	ble.n	801c714 <_dtoa_r+0x724>
 801c708:	4629      	mov	r1, r5
 801c70a:	461a      	mov	r2, r3
 801c70c:	4630      	mov	r0, r6
 801c70e:	f000 fd35 	bl	801d17c <__lshift>
 801c712:	4605      	mov	r5, r0
 801c714:	9b05      	ldr	r3, [sp, #20]
 801c716:	2b00      	cmp	r3, #0
 801c718:	dd05      	ble.n	801c726 <_dtoa_r+0x736>
 801c71a:	4621      	mov	r1, r4
 801c71c:	461a      	mov	r2, r3
 801c71e:	4630      	mov	r0, r6
 801c720:	f000 fd2c 	bl	801d17c <__lshift>
 801c724:	4604      	mov	r4, r0
 801c726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d071      	beq.n	801c810 <_dtoa_r+0x820>
 801c72c:	4621      	mov	r1, r4
 801c72e:	4628      	mov	r0, r5
 801c730:	f000 fd90 	bl	801d254 <__mcmp>
 801c734:	2800      	cmp	r0, #0
 801c736:	da6b      	bge.n	801c810 <_dtoa_r+0x820>
 801c738:	2300      	movs	r3, #0
 801c73a:	4629      	mov	r1, r5
 801c73c:	220a      	movs	r2, #10
 801c73e:	4630      	mov	r0, r6
 801c740:	f000 fb24 	bl	801cd8c <__multadd>
 801c744:	9b07      	ldr	r3, [sp, #28]
 801c746:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c74a:	4605      	mov	r5, r0
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	f000 8197 	beq.w	801ca80 <_dtoa_r+0xa90>
 801c752:	4639      	mov	r1, r7
 801c754:	2300      	movs	r3, #0
 801c756:	220a      	movs	r2, #10
 801c758:	4630      	mov	r0, r6
 801c75a:	f000 fb17 	bl	801cd8c <__multadd>
 801c75e:	f1ba 0f00 	cmp.w	sl, #0
 801c762:	4607      	mov	r7, r0
 801c764:	f300 8093 	bgt.w	801c88e <_dtoa_r+0x89e>
 801c768:	9b06      	ldr	r3, [sp, #24]
 801c76a:	2b02      	cmp	r3, #2
 801c76c:	dc57      	bgt.n	801c81e <_dtoa_r+0x82e>
 801c76e:	e08e      	b.n	801c88e <_dtoa_r+0x89e>
 801c770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c772:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c776:	e751      	b.n	801c61c <_dtoa_r+0x62c>
 801c778:	f109 34ff 	add.w	r4, r9, #4294967295
 801c77c:	42a3      	cmp	r3, r4
 801c77e:	bfbf      	itttt	lt
 801c780:	1ae2      	sublt	r2, r4, r3
 801c782:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801c784:	189b      	addlt	r3, r3, r2
 801c786:	930a      	strlt	r3, [sp, #40]	; 0x28
 801c788:	bfae      	itee	ge
 801c78a:	1b1c      	subge	r4, r3, r4
 801c78c:	4623      	movlt	r3, r4
 801c78e:	2400      	movlt	r4, #0
 801c790:	f1b9 0f00 	cmp.w	r9, #0
 801c794:	bfb5      	itete	lt
 801c796:	9a04      	ldrlt	r2, [sp, #16]
 801c798:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801c79c:	eba2 0809 	sublt.w	r8, r2, r9
 801c7a0:	464a      	movge	r2, r9
 801c7a2:	bfb8      	it	lt
 801c7a4:	2200      	movlt	r2, #0
 801c7a6:	e73c      	b.n	801c622 <_dtoa_r+0x632>
 801c7a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c7ac:	9f07      	ldr	r7, [sp, #28]
 801c7ae:	461c      	mov	r4, r3
 801c7b0:	e744      	b.n	801c63c <_dtoa_r+0x64c>
 801c7b2:	461a      	mov	r2, r3
 801c7b4:	e770      	b.n	801c698 <_dtoa_r+0x6a8>
 801c7b6:	9b06      	ldr	r3, [sp, #24]
 801c7b8:	2b01      	cmp	r3, #1
 801c7ba:	dc18      	bgt.n	801c7ee <_dtoa_r+0x7fe>
 801c7bc:	9b02      	ldr	r3, [sp, #8]
 801c7be:	b9b3      	cbnz	r3, 801c7ee <_dtoa_r+0x7fe>
 801c7c0:	9b03      	ldr	r3, [sp, #12]
 801c7c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801c7c6:	b9a2      	cbnz	r2, 801c7f2 <_dtoa_r+0x802>
 801c7c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801c7cc:	0d12      	lsrs	r2, r2, #20
 801c7ce:	0512      	lsls	r2, r2, #20
 801c7d0:	b18a      	cbz	r2, 801c7f6 <_dtoa_r+0x806>
 801c7d2:	9b04      	ldr	r3, [sp, #16]
 801c7d4:	3301      	adds	r3, #1
 801c7d6:	9304      	str	r3, [sp, #16]
 801c7d8:	9b05      	ldr	r3, [sp, #20]
 801c7da:	3301      	adds	r3, #1
 801c7dc:	9305      	str	r3, [sp, #20]
 801c7de:	2301      	movs	r3, #1
 801c7e0:	9309      	str	r3, [sp, #36]	; 0x24
 801c7e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	f47f af70 	bne.w	801c6ca <_dtoa_r+0x6da>
 801c7ea:	2001      	movs	r0, #1
 801c7ec:	e775      	b.n	801c6da <_dtoa_r+0x6ea>
 801c7ee:	2300      	movs	r3, #0
 801c7f0:	e7f6      	b.n	801c7e0 <_dtoa_r+0x7f0>
 801c7f2:	9b02      	ldr	r3, [sp, #8]
 801c7f4:	e7f4      	b.n	801c7e0 <_dtoa_r+0x7f0>
 801c7f6:	9209      	str	r2, [sp, #36]	; 0x24
 801c7f8:	e7f3      	b.n	801c7e2 <_dtoa_r+0x7f2>
 801c7fa:	d082      	beq.n	801c702 <_dtoa_r+0x712>
 801c7fc:	9b04      	ldr	r3, [sp, #16]
 801c7fe:	321c      	adds	r2, #28
 801c800:	4413      	add	r3, r2
 801c802:	9304      	str	r3, [sp, #16]
 801c804:	9b05      	ldr	r3, [sp, #20]
 801c806:	4490      	add	r8, r2
 801c808:	4413      	add	r3, r2
 801c80a:	e779      	b.n	801c700 <_dtoa_r+0x710>
 801c80c:	4602      	mov	r2, r0
 801c80e:	e7f5      	b.n	801c7fc <_dtoa_r+0x80c>
 801c810:	f1b9 0f00 	cmp.w	r9, #0
 801c814:	dc36      	bgt.n	801c884 <_dtoa_r+0x894>
 801c816:	9b06      	ldr	r3, [sp, #24]
 801c818:	2b02      	cmp	r3, #2
 801c81a:	dd33      	ble.n	801c884 <_dtoa_r+0x894>
 801c81c:	46ca      	mov	sl, r9
 801c81e:	f1ba 0f00 	cmp.w	sl, #0
 801c822:	d10d      	bne.n	801c840 <_dtoa_r+0x850>
 801c824:	4621      	mov	r1, r4
 801c826:	4653      	mov	r3, sl
 801c828:	2205      	movs	r2, #5
 801c82a:	4630      	mov	r0, r6
 801c82c:	f000 faae 	bl	801cd8c <__multadd>
 801c830:	4601      	mov	r1, r0
 801c832:	4604      	mov	r4, r0
 801c834:	4628      	mov	r0, r5
 801c836:	f000 fd0d 	bl	801d254 <__mcmp>
 801c83a:	2800      	cmp	r0, #0
 801c83c:	f73f ade4 	bgt.w	801c408 <_dtoa_r+0x418>
 801c840:	9b08      	ldr	r3, [sp, #32]
 801c842:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c846:	ea6f 0b03 	mvn.w	fp, r3
 801c84a:	f04f 0900 	mov.w	r9, #0
 801c84e:	4621      	mov	r1, r4
 801c850:	4630      	mov	r0, r6
 801c852:	f000 fa79 	bl	801cd48 <_Bfree>
 801c856:	2f00      	cmp	r7, #0
 801c858:	f43f aea1 	beq.w	801c59e <_dtoa_r+0x5ae>
 801c85c:	f1b9 0f00 	cmp.w	r9, #0
 801c860:	d005      	beq.n	801c86e <_dtoa_r+0x87e>
 801c862:	45b9      	cmp	r9, r7
 801c864:	d003      	beq.n	801c86e <_dtoa_r+0x87e>
 801c866:	4649      	mov	r1, r9
 801c868:	4630      	mov	r0, r6
 801c86a:	f000 fa6d 	bl	801cd48 <_Bfree>
 801c86e:	4639      	mov	r1, r7
 801c870:	4630      	mov	r0, r6
 801c872:	f000 fa69 	bl	801cd48 <_Bfree>
 801c876:	e692      	b.n	801c59e <_dtoa_r+0x5ae>
 801c878:	2400      	movs	r4, #0
 801c87a:	4627      	mov	r7, r4
 801c87c:	e7e0      	b.n	801c840 <_dtoa_r+0x850>
 801c87e:	4693      	mov	fp, r2
 801c880:	4627      	mov	r7, r4
 801c882:	e5c1      	b.n	801c408 <_dtoa_r+0x418>
 801c884:	9b07      	ldr	r3, [sp, #28]
 801c886:	46ca      	mov	sl, r9
 801c888:	2b00      	cmp	r3, #0
 801c88a:	f000 8100 	beq.w	801ca8e <_dtoa_r+0xa9e>
 801c88e:	f1b8 0f00 	cmp.w	r8, #0
 801c892:	dd05      	ble.n	801c8a0 <_dtoa_r+0x8b0>
 801c894:	4639      	mov	r1, r7
 801c896:	4642      	mov	r2, r8
 801c898:	4630      	mov	r0, r6
 801c89a:	f000 fc6f 	bl	801d17c <__lshift>
 801c89e:	4607      	mov	r7, r0
 801c8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	d05d      	beq.n	801c962 <_dtoa_r+0x972>
 801c8a6:	6879      	ldr	r1, [r7, #4]
 801c8a8:	4630      	mov	r0, r6
 801c8aa:	f000 fa0d 	bl	801ccc8 <_Balloc>
 801c8ae:	4680      	mov	r8, r0
 801c8b0:	b928      	cbnz	r0, 801c8be <_dtoa_r+0x8ce>
 801c8b2:	4b82      	ldr	r3, [pc, #520]	; (801cabc <_dtoa_r+0xacc>)
 801c8b4:	4602      	mov	r2, r0
 801c8b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 801c8ba:	f7ff bbb1 	b.w	801c020 <_dtoa_r+0x30>
 801c8be:	693a      	ldr	r2, [r7, #16]
 801c8c0:	3202      	adds	r2, #2
 801c8c2:	0092      	lsls	r2, r2, #2
 801c8c4:	f107 010c 	add.w	r1, r7, #12
 801c8c8:	300c      	adds	r0, #12
 801c8ca:	f7ff faf2 	bl	801beb2 <memcpy>
 801c8ce:	2201      	movs	r2, #1
 801c8d0:	4641      	mov	r1, r8
 801c8d2:	4630      	mov	r0, r6
 801c8d4:	f000 fc52 	bl	801d17c <__lshift>
 801c8d8:	9b01      	ldr	r3, [sp, #4]
 801c8da:	3301      	adds	r3, #1
 801c8dc:	9304      	str	r3, [sp, #16]
 801c8de:	9b01      	ldr	r3, [sp, #4]
 801c8e0:	4453      	add	r3, sl
 801c8e2:	9308      	str	r3, [sp, #32]
 801c8e4:	9b02      	ldr	r3, [sp, #8]
 801c8e6:	f003 0301 	and.w	r3, r3, #1
 801c8ea:	46b9      	mov	r9, r7
 801c8ec:	9307      	str	r3, [sp, #28]
 801c8ee:	4607      	mov	r7, r0
 801c8f0:	9b04      	ldr	r3, [sp, #16]
 801c8f2:	4621      	mov	r1, r4
 801c8f4:	3b01      	subs	r3, #1
 801c8f6:	4628      	mov	r0, r5
 801c8f8:	9302      	str	r3, [sp, #8]
 801c8fa:	f7ff faef 	bl	801bedc <quorem>
 801c8fe:	4603      	mov	r3, r0
 801c900:	3330      	adds	r3, #48	; 0x30
 801c902:	9005      	str	r0, [sp, #20]
 801c904:	4649      	mov	r1, r9
 801c906:	4628      	mov	r0, r5
 801c908:	9309      	str	r3, [sp, #36]	; 0x24
 801c90a:	f000 fca3 	bl	801d254 <__mcmp>
 801c90e:	463a      	mov	r2, r7
 801c910:	4682      	mov	sl, r0
 801c912:	4621      	mov	r1, r4
 801c914:	4630      	mov	r0, r6
 801c916:	f000 fcb9 	bl	801d28c <__mdiff>
 801c91a:	68c2      	ldr	r2, [r0, #12]
 801c91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c91e:	4680      	mov	r8, r0
 801c920:	bb0a      	cbnz	r2, 801c966 <_dtoa_r+0x976>
 801c922:	4601      	mov	r1, r0
 801c924:	4628      	mov	r0, r5
 801c926:	f000 fc95 	bl	801d254 <__mcmp>
 801c92a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c92c:	4602      	mov	r2, r0
 801c92e:	4641      	mov	r1, r8
 801c930:	4630      	mov	r0, r6
 801c932:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801c936:	f000 fa07 	bl	801cd48 <_Bfree>
 801c93a:	9b06      	ldr	r3, [sp, #24]
 801c93c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c93e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c942:	ea43 0102 	orr.w	r1, r3, r2
 801c946:	9b07      	ldr	r3, [sp, #28]
 801c948:	4319      	orrs	r1, r3
 801c94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c94c:	d10d      	bne.n	801c96a <_dtoa_r+0x97a>
 801c94e:	2b39      	cmp	r3, #57	; 0x39
 801c950:	d029      	beq.n	801c9a6 <_dtoa_r+0x9b6>
 801c952:	f1ba 0f00 	cmp.w	sl, #0
 801c956:	dd01      	ble.n	801c95c <_dtoa_r+0x96c>
 801c958:	9b05      	ldr	r3, [sp, #20]
 801c95a:	3331      	adds	r3, #49	; 0x31
 801c95c:	9a02      	ldr	r2, [sp, #8]
 801c95e:	7013      	strb	r3, [r2, #0]
 801c960:	e775      	b.n	801c84e <_dtoa_r+0x85e>
 801c962:	4638      	mov	r0, r7
 801c964:	e7b8      	b.n	801c8d8 <_dtoa_r+0x8e8>
 801c966:	2201      	movs	r2, #1
 801c968:	e7e1      	b.n	801c92e <_dtoa_r+0x93e>
 801c96a:	f1ba 0f00 	cmp.w	sl, #0
 801c96e:	db06      	blt.n	801c97e <_dtoa_r+0x98e>
 801c970:	9906      	ldr	r1, [sp, #24]
 801c972:	ea41 0a0a 	orr.w	sl, r1, sl
 801c976:	9907      	ldr	r1, [sp, #28]
 801c978:	ea5a 0a01 	orrs.w	sl, sl, r1
 801c97c:	d120      	bne.n	801c9c0 <_dtoa_r+0x9d0>
 801c97e:	2a00      	cmp	r2, #0
 801c980:	ddec      	ble.n	801c95c <_dtoa_r+0x96c>
 801c982:	4629      	mov	r1, r5
 801c984:	2201      	movs	r2, #1
 801c986:	4630      	mov	r0, r6
 801c988:	9304      	str	r3, [sp, #16]
 801c98a:	f000 fbf7 	bl	801d17c <__lshift>
 801c98e:	4621      	mov	r1, r4
 801c990:	4605      	mov	r5, r0
 801c992:	f000 fc5f 	bl	801d254 <__mcmp>
 801c996:	2800      	cmp	r0, #0
 801c998:	9b04      	ldr	r3, [sp, #16]
 801c99a:	dc02      	bgt.n	801c9a2 <_dtoa_r+0x9b2>
 801c99c:	d1de      	bne.n	801c95c <_dtoa_r+0x96c>
 801c99e:	07da      	lsls	r2, r3, #31
 801c9a0:	d5dc      	bpl.n	801c95c <_dtoa_r+0x96c>
 801c9a2:	2b39      	cmp	r3, #57	; 0x39
 801c9a4:	d1d8      	bne.n	801c958 <_dtoa_r+0x968>
 801c9a6:	9a02      	ldr	r2, [sp, #8]
 801c9a8:	2339      	movs	r3, #57	; 0x39
 801c9aa:	7013      	strb	r3, [r2, #0]
 801c9ac:	4643      	mov	r3, r8
 801c9ae:	4698      	mov	r8, r3
 801c9b0:	3b01      	subs	r3, #1
 801c9b2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801c9b6:	2a39      	cmp	r2, #57	; 0x39
 801c9b8:	d051      	beq.n	801ca5e <_dtoa_r+0xa6e>
 801c9ba:	3201      	adds	r2, #1
 801c9bc:	701a      	strb	r2, [r3, #0]
 801c9be:	e746      	b.n	801c84e <_dtoa_r+0x85e>
 801c9c0:	2a00      	cmp	r2, #0
 801c9c2:	dd03      	ble.n	801c9cc <_dtoa_r+0x9dc>
 801c9c4:	2b39      	cmp	r3, #57	; 0x39
 801c9c6:	d0ee      	beq.n	801c9a6 <_dtoa_r+0x9b6>
 801c9c8:	3301      	adds	r3, #1
 801c9ca:	e7c7      	b.n	801c95c <_dtoa_r+0x96c>
 801c9cc:	9a04      	ldr	r2, [sp, #16]
 801c9ce:	9908      	ldr	r1, [sp, #32]
 801c9d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c9d4:	428a      	cmp	r2, r1
 801c9d6:	d02b      	beq.n	801ca30 <_dtoa_r+0xa40>
 801c9d8:	4629      	mov	r1, r5
 801c9da:	2300      	movs	r3, #0
 801c9dc:	220a      	movs	r2, #10
 801c9de:	4630      	mov	r0, r6
 801c9e0:	f000 f9d4 	bl	801cd8c <__multadd>
 801c9e4:	45b9      	cmp	r9, r7
 801c9e6:	4605      	mov	r5, r0
 801c9e8:	f04f 0300 	mov.w	r3, #0
 801c9ec:	f04f 020a 	mov.w	r2, #10
 801c9f0:	4649      	mov	r1, r9
 801c9f2:	4630      	mov	r0, r6
 801c9f4:	d107      	bne.n	801ca06 <_dtoa_r+0xa16>
 801c9f6:	f000 f9c9 	bl	801cd8c <__multadd>
 801c9fa:	4681      	mov	r9, r0
 801c9fc:	4607      	mov	r7, r0
 801c9fe:	9b04      	ldr	r3, [sp, #16]
 801ca00:	3301      	adds	r3, #1
 801ca02:	9304      	str	r3, [sp, #16]
 801ca04:	e774      	b.n	801c8f0 <_dtoa_r+0x900>
 801ca06:	f000 f9c1 	bl	801cd8c <__multadd>
 801ca0a:	4639      	mov	r1, r7
 801ca0c:	4681      	mov	r9, r0
 801ca0e:	2300      	movs	r3, #0
 801ca10:	220a      	movs	r2, #10
 801ca12:	4630      	mov	r0, r6
 801ca14:	f000 f9ba 	bl	801cd8c <__multadd>
 801ca18:	4607      	mov	r7, r0
 801ca1a:	e7f0      	b.n	801c9fe <_dtoa_r+0xa0e>
 801ca1c:	f1ba 0f00 	cmp.w	sl, #0
 801ca20:	9a01      	ldr	r2, [sp, #4]
 801ca22:	bfcc      	ite	gt
 801ca24:	46d0      	movgt	r8, sl
 801ca26:	f04f 0801 	movle.w	r8, #1
 801ca2a:	4490      	add	r8, r2
 801ca2c:	f04f 0900 	mov.w	r9, #0
 801ca30:	4629      	mov	r1, r5
 801ca32:	2201      	movs	r2, #1
 801ca34:	4630      	mov	r0, r6
 801ca36:	9302      	str	r3, [sp, #8]
 801ca38:	f000 fba0 	bl	801d17c <__lshift>
 801ca3c:	4621      	mov	r1, r4
 801ca3e:	4605      	mov	r5, r0
 801ca40:	f000 fc08 	bl	801d254 <__mcmp>
 801ca44:	2800      	cmp	r0, #0
 801ca46:	dcb1      	bgt.n	801c9ac <_dtoa_r+0x9bc>
 801ca48:	d102      	bne.n	801ca50 <_dtoa_r+0xa60>
 801ca4a:	9b02      	ldr	r3, [sp, #8]
 801ca4c:	07db      	lsls	r3, r3, #31
 801ca4e:	d4ad      	bmi.n	801c9ac <_dtoa_r+0x9bc>
 801ca50:	4643      	mov	r3, r8
 801ca52:	4698      	mov	r8, r3
 801ca54:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ca58:	2a30      	cmp	r2, #48	; 0x30
 801ca5a:	d0fa      	beq.n	801ca52 <_dtoa_r+0xa62>
 801ca5c:	e6f7      	b.n	801c84e <_dtoa_r+0x85e>
 801ca5e:	9a01      	ldr	r2, [sp, #4]
 801ca60:	429a      	cmp	r2, r3
 801ca62:	d1a4      	bne.n	801c9ae <_dtoa_r+0x9be>
 801ca64:	f10b 0b01 	add.w	fp, fp, #1
 801ca68:	2331      	movs	r3, #49	; 0x31
 801ca6a:	e778      	b.n	801c95e <_dtoa_r+0x96e>
 801ca6c:	4b14      	ldr	r3, [pc, #80]	; (801cac0 <_dtoa_r+0xad0>)
 801ca6e:	f7ff bb2a 	b.w	801c0c6 <_dtoa_r+0xd6>
 801ca72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	f47f ab05 	bne.w	801c084 <_dtoa_r+0x94>
 801ca7a:	4b12      	ldr	r3, [pc, #72]	; (801cac4 <_dtoa_r+0xad4>)
 801ca7c:	f7ff bb23 	b.w	801c0c6 <_dtoa_r+0xd6>
 801ca80:	f1ba 0f00 	cmp.w	sl, #0
 801ca84:	dc03      	bgt.n	801ca8e <_dtoa_r+0xa9e>
 801ca86:	9b06      	ldr	r3, [sp, #24]
 801ca88:	2b02      	cmp	r3, #2
 801ca8a:	f73f aec8 	bgt.w	801c81e <_dtoa_r+0x82e>
 801ca8e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ca92:	4621      	mov	r1, r4
 801ca94:	4628      	mov	r0, r5
 801ca96:	f7ff fa21 	bl	801bedc <quorem>
 801ca9a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801ca9e:	f808 3b01 	strb.w	r3, [r8], #1
 801caa2:	9a01      	ldr	r2, [sp, #4]
 801caa4:	eba8 0202 	sub.w	r2, r8, r2
 801caa8:	4592      	cmp	sl, r2
 801caaa:	ddb7      	ble.n	801ca1c <_dtoa_r+0xa2c>
 801caac:	4629      	mov	r1, r5
 801caae:	2300      	movs	r3, #0
 801cab0:	220a      	movs	r2, #10
 801cab2:	4630      	mov	r0, r6
 801cab4:	f000 f96a 	bl	801cd8c <__multadd>
 801cab8:	4605      	mov	r5, r0
 801caba:	e7ea      	b.n	801ca92 <_dtoa_r+0xaa2>
 801cabc:	080204f7 	.word	0x080204f7
 801cac0:	080207e0 	.word	0x080207e0
 801cac4:	0802047b 	.word	0x0802047b

0801cac8 <_free_r>:
 801cac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801caca:	2900      	cmp	r1, #0
 801cacc:	d044      	beq.n	801cb58 <_free_r+0x90>
 801cace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cad2:	9001      	str	r0, [sp, #4]
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	f1a1 0404 	sub.w	r4, r1, #4
 801cada:	bfb8      	it	lt
 801cadc:	18e4      	addlt	r4, r4, r3
 801cade:	f000 f8e7 	bl	801ccb0 <__malloc_lock>
 801cae2:	4a1e      	ldr	r2, [pc, #120]	; (801cb5c <_free_r+0x94>)
 801cae4:	9801      	ldr	r0, [sp, #4]
 801cae6:	6813      	ldr	r3, [r2, #0]
 801cae8:	b933      	cbnz	r3, 801caf8 <_free_r+0x30>
 801caea:	6063      	str	r3, [r4, #4]
 801caec:	6014      	str	r4, [r2, #0]
 801caee:	b003      	add	sp, #12
 801caf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801caf4:	f000 b8e2 	b.w	801ccbc <__malloc_unlock>
 801caf8:	42a3      	cmp	r3, r4
 801cafa:	d908      	bls.n	801cb0e <_free_r+0x46>
 801cafc:	6825      	ldr	r5, [r4, #0]
 801cafe:	1961      	adds	r1, r4, r5
 801cb00:	428b      	cmp	r3, r1
 801cb02:	bf01      	itttt	eq
 801cb04:	6819      	ldreq	r1, [r3, #0]
 801cb06:	685b      	ldreq	r3, [r3, #4]
 801cb08:	1949      	addeq	r1, r1, r5
 801cb0a:	6021      	streq	r1, [r4, #0]
 801cb0c:	e7ed      	b.n	801caea <_free_r+0x22>
 801cb0e:	461a      	mov	r2, r3
 801cb10:	685b      	ldr	r3, [r3, #4]
 801cb12:	b10b      	cbz	r3, 801cb18 <_free_r+0x50>
 801cb14:	42a3      	cmp	r3, r4
 801cb16:	d9fa      	bls.n	801cb0e <_free_r+0x46>
 801cb18:	6811      	ldr	r1, [r2, #0]
 801cb1a:	1855      	adds	r5, r2, r1
 801cb1c:	42a5      	cmp	r5, r4
 801cb1e:	d10b      	bne.n	801cb38 <_free_r+0x70>
 801cb20:	6824      	ldr	r4, [r4, #0]
 801cb22:	4421      	add	r1, r4
 801cb24:	1854      	adds	r4, r2, r1
 801cb26:	42a3      	cmp	r3, r4
 801cb28:	6011      	str	r1, [r2, #0]
 801cb2a:	d1e0      	bne.n	801caee <_free_r+0x26>
 801cb2c:	681c      	ldr	r4, [r3, #0]
 801cb2e:	685b      	ldr	r3, [r3, #4]
 801cb30:	6053      	str	r3, [r2, #4]
 801cb32:	440c      	add	r4, r1
 801cb34:	6014      	str	r4, [r2, #0]
 801cb36:	e7da      	b.n	801caee <_free_r+0x26>
 801cb38:	d902      	bls.n	801cb40 <_free_r+0x78>
 801cb3a:	230c      	movs	r3, #12
 801cb3c:	6003      	str	r3, [r0, #0]
 801cb3e:	e7d6      	b.n	801caee <_free_r+0x26>
 801cb40:	6825      	ldr	r5, [r4, #0]
 801cb42:	1961      	adds	r1, r4, r5
 801cb44:	428b      	cmp	r3, r1
 801cb46:	bf04      	itt	eq
 801cb48:	6819      	ldreq	r1, [r3, #0]
 801cb4a:	685b      	ldreq	r3, [r3, #4]
 801cb4c:	6063      	str	r3, [r4, #4]
 801cb4e:	bf04      	itt	eq
 801cb50:	1949      	addeq	r1, r1, r5
 801cb52:	6021      	streq	r1, [r4, #0]
 801cb54:	6054      	str	r4, [r2, #4]
 801cb56:	e7ca      	b.n	801caee <_free_r+0x26>
 801cb58:	b003      	add	sp, #12
 801cb5a:	bd30      	pop	{r4, r5, pc}
 801cb5c:	24003628 	.word	0x24003628

0801cb60 <malloc>:
 801cb60:	4b02      	ldr	r3, [pc, #8]	; (801cb6c <malloc+0xc>)
 801cb62:	4601      	mov	r1, r0
 801cb64:	6818      	ldr	r0, [r3, #0]
 801cb66:	f000 b823 	b.w	801cbb0 <_malloc_r>
 801cb6a:	bf00      	nop
 801cb6c:	24000158 	.word	0x24000158

0801cb70 <sbrk_aligned>:
 801cb70:	b570      	push	{r4, r5, r6, lr}
 801cb72:	4e0e      	ldr	r6, [pc, #56]	; (801cbac <sbrk_aligned+0x3c>)
 801cb74:	460c      	mov	r4, r1
 801cb76:	6831      	ldr	r1, [r6, #0]
 801cb78:	4605      	mov	r5, r0
 801cb7a:	b911      	cbnz	r1, 801cb82 <sbrk_aligned+0x12>
 801cb7c:	f002 f96a 	bl	801ee54 <_sbrk_r>
 801cb80:	6030      	str	r0, [r6, #0]
 801cb82:	4621      	mov	r1, r4
 801cb84:	4628      	mov	r0, r5
 801cb86:	f002 f965 	bl	801ee54 <_sbrk_r>
 801cb8a:	1c43      	adds	r3, r0, #1
 801cb8c:	d00a      	beq.n	801cba4 <sbrk_aligned+0x34>
 801cb8e:	1cc4      	adds	r4, r0, #3
 801cb90:	f024 0403 	bic.w	r4, r4, #3
 801cb94:	42a0      	cmp	r0, r4
 801cb96:	d007      	beq.n	801cba8 <sbrk_aligned+0x38>
 801cb98:	1a21      	subs	r1, r4, r0
 801cb9a:	4628      	mov	r0, r5
 801cb9c:	f002 f95a 	bl	801ee54 <_sbrk_r>
 801cba0:	3001      	adds	r0, #1
 801cba2:	d101      	bne.n	801cba8 <sbrk_aligned+0x38>
 801cba4:	f04f 34ff 	mov.w	r4, #4294967295
 801cba8:	4620      	mov	r0, r4
 801cbaa:	bd70      	pop	{r4, r5, r6, pc}
 801cbac:	2400362c 	.word	0x2400362c

0801cbb0 <_malloc_r>:
 801cbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cbb4:	1ccd      	adds	r5, r1, #3
 801cbb6:	f025 0503 	bic.w	r5, r5, #3
 801cbba:	3508      	adds	r5, #8
 801cbbc:	2d0c      	cmp	r5, #12
 801cbbe:	bf38      	it	cc
 801cbc0:	250c      	movcc	r5, #12
 801cbc2:	2d00      	cmp	r5, #0
 801cbc4:	4607      	mov	r7, r0
 801cbc6:	db01      	blt.n	801cbcc <_malloc_r+0x1c>
 801cbc8:	42a9      	cmp	r1, r5
 801cbca:	d905      	bls.n	801cbd8 <_malloc_r+0x28>
 801cbcc:	230c      	movs	r3, #12
 801cbce:	603b      	str	r3, [r7, #0]
 801cbd0:	2600      	movs	r6, #0
 801cbd2:	4630      	mov	r0, r6
 801cbd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cbd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801ccac <_malloc_r+0xfc>
 801cbdc:	f000 f868 	bl	801ccb0 <__malloc_lock>
 801cbe0:	f8d8 3000 	ldr.w	r3, [r8]
 801cbe4:	461c      	mov	r4, r3
 801cbe6:	bb5c      	cbnz	r4, 801cc40 <_malloc_r+0x90>
 801cbe8:	4629      	mov	r1, r5
 801cbea:	4638      	mov	r0, r7
 801cbec:	f7ff ffc0 	bl	801cb70 <sbrk_aligned>
 801cbf0:	1c43      	adds	r3, r0, #1
 801cbf2:	4604      	mov	r4, r0
 801cbf4:	d155      	bne.n	801cca2 <_malloc_r+0xf2>
 801cbf6:	f8d8 4000 	ldr.w	r4, [r8]
 801cbfa:	4626      	mov	r6, r4
 801cbfc:	2e00      	cmp	r6, #0
 801cbfe:	d145      	bne.n	801cc8c <_malloc_r+0xdc>
 801cc00:	2c00      	cmp	r4, #0
 801cc02:	d048      	beq.n	801cc96 <_malloc_r+0xe6>
 801cc04:	6823      	ldr	r3, [r4, #0]
 801cc06:	4631      	mov	r1, r6
 801cc08:	4638      	mov	r0, r7
 801cc0a:	eb04 0903 	add.w	r9, r4, r3
 801cc0e:	f002 f921 	bl	801ee54 <_sbrk_r>
 801cc12:	4581      	cmp	r9, r0
 801cc14:	d13f      	bne.n	801cc96 <_malloc_r+0xe6>
 801cc16:	6821      	ldr	r1, [r4, #0]
 801cc18:	1a6d      	subs	r5, r5, r1
 801cc1a:	4629      	mov	r1, r5
 801cc1c:	4638      	mov	r0, r7
 801cc1e:	f7ff ffa7 	bl	801cb70 <sbrk_aligned>
 801cc22:	3001      	adds	r0, #1
 801cc24:	d037      	beq.n	801cc96 <_malloc_r+0xe6>
 801cc26:	6823      	ldr	r3, [r4, #0]
 801cc28:	442b      	add	r3, r5
 801cc2a:	6023      	str	r3, [r4, #0]
 801cc2c:	f8d8 3000 	ldr.w	r3, [r8]
 801cc30:	2b00      	cmp	r3, #0
 801cc32:	d038      	beq.n	801cca6 <_malloc_r+0xf6>
 801cc34:	685a      	ldr	r2, [r3, #4]
 801cc36:	42a2      	cmp	r2, r4
 801cc38:	d12b      	bne.n	801cc92 <_malloc_r+0xe2>
 801cc3a:	2200      	movs	r2, #0
 801cc3c:	605a      	str	r2, [r3, #4]
 801cc3e:	e00f      	b.n	801cc60 <_malloc_r+0xb0>
 801cc40:	6822      	ldr	r2, [r4, #0]
 801cc42:	1b52      	subs	r2, r2, r5
 801cc44:	d41f      	bmi.n	801cc86 <_malloc_r+0xd6>
 801cc46:	2a0b      	cmp	r2, #11
 801cc48:	d917      	bls.n	801cc7a <_malloc_r+0xca>
 801cc4a:	1961      	adds	r1, r4, r5
 801cc4c:	42a3      	cmp	r3, r4
 801cc4e:	6025      	str	r5, [r4, #0]
 801cc50:	bf18      	it	ne
 801cc52:	6059      	strne	r1, [r3, #4]
 801cc54:	6863      	ldr	r3, [r4, #4]
 801cc56:	bf08      	it	eq
 801cc58:	f8c8 1000 	streq.w	r1, [r8]
 801cc5c:	5162      	str	r2, [r4, r5]
 801cc5e:	604b      	str	r3, [r1, #4]
 801cc60:	4638      	mov	r0, r7
 801cc62:	f104 060b 	add.w	r6, r4, #11
 801cc66:	f000 f829 	bl	801ccbc <__malloc_unlock>
 801cc6a:	f026 0607 	bic.w	r6, r6, #7
 801cc6e:	1d23      	adds	r3, r4, #4
 801cc70:	1af2      	subs	r2, r6, r3
 801cc72:	d0ae      	beq.n	801cbd2 <_malloc_r+0x22>
 801cc74:	1b9b      	subs	r3, r3, r6
 801cc76:	50a3      	str	r3, [r4, r2]
 801cc78:	e7ab      	b.n	801cbd2 <_malloc_r+0x22>
 801cc7a:	42a3      	cmp	r3, r4
 801cc7c:	6862      	ldr	r2, [r4, #4]
 801cc7e:	d1dd      	bne.n	801cc3c <_malloc_r+0x8c>
 801cc80:	f8c8 2000 	str.w	r2, [r8]
 801cc84:	e7ec      	b.n	801cc60 <_malloc_r+0xb0>
 801cc86:	4623      	mov	r3, r4
 801cc88:	6864      	ldr	r4, [r4, #4]
 801cc8a:	e7ac      	b.n	801cbe6 <_malloc_r+0x36>
 801cc8c:	4634      	mov	r4, r6
 801cc8e:	6876      	ldr	r6, [r6, #4]
 801cc90:	e7b4      	b.n	801cbfc <_malloc_r+0x4c>
 801cc92:	4613      	mov	r3, r2
 801cc94:	e7cc      	b.n	801cc30 <_malloc_r+0x80>
 801cc96:	230c      	movs	r3, #12
 801cc98:	603b      	str	r3, [r7, #0]
 801cc9a:	4638      	mov	r0, r7
 801cc9c:	f000 f80e 	bl	801ccbc <__malloc_unlock>
 801cca0:	e797      	b.n	801cbd2 <_malloc_r+0x22>
 801cca2:	6025      	str	r5, [r4, #0]
 801cca4:	e7dc      	b.n	801cc60 <_malloc_r+0xb0>
 801cca6:	605b      	str	r3, [r3, #4]
 801cca8:	deff      	udf	#255	; 0xff
 801ccaa:	bf00      	nop
 801ccac:	24003628 	.word	0x24003628

0801ccb0 <__malloc_lock>:
 801ccb0:	4801      	ldr	r0, [pc, #4]	; (801ccb8 <__malloc_lock+0x8>)
 801ccb2:	f7ff b8f4 	b.w	801be9e <__retarget_lock_acquire_recursive>
 801ccb6:	bf00      	nop
 801ccb8:	24003624 	.word	0x24003624

0801ccbc <__malloc_unlock>:
 801ccbc:	4801      	ldr	r0, [pc, #4]	; (801ccc4 <__malloc_unlock+0x8>)
 801ccbe:	f7ff b8ef 	b.w	801bea0 <__retarget_lock_release_recursive>
 801ccc2:	bf00      	nop
 801ccc4:	24003624 	.word	0x24003624

0801ccc8 <_Balloc>:
 801ccc8:	b570      	push	{r4, r5, r6, lr}
 801ccca:	69c6      	ldr	r6, [r0, #28]
 801cccc:	4604      	mov	r4, r0
 801ccce:	460d      	mov	r5, r1
 801ccd0:	b976      	cbnz	r6, 801ccf0 <_Balloc+0x28>
 801ccd2:	2010      	movs	r0, #16
 801ccd4:	f7ff ff44 	bl	801cb60 <malloc>
 801ccd8:	4602      	mov	r2, r0
 801ccda:	61e0      	str	r0, [r4, #28]
 801ccdc:	b920      	cbnz	r0, 801cce8 <_Balloc+0x20>
 801ccde:	4b18      	ldr	r3, [pc, #96]	; (801cd40 <_Balloc+0x78>)
 801cce0:	4818      	ldr	r0, [pc, #96]	; (801cd44 <_Balloc+0x7c>)
 801cce2:	216b      	movs	r1, #107	; 0x6b
 801cce4:	f002 f8d0 	bl	801ee88 <__assert_func>
 801cce8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ccec:	6006      	str	r6, [r0, #0]
 801ccee:	60c6      	str	r6, [r0, #12]
 801ccf0:	69e6      	ldr	r6, [r4, #28]
 801ccf2:	68f3      	ldr	r3, [r6, #12]
 801ccf4:	b183      	cbz	r3, 801cd18 <_Balloc+0x50>
 801ccf6:	69e3      	ldr	r3, [r4, #28]
 801ccf8:	68db      	ldr	r3, [r3, #12]
 801ccfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ccfe:	b9b8      	cbnz	r0, 801cd30 <_Balloc+0x68>
 801cd00:	2101      	movs	r1, #1
 801cd02:	fa01 f605 	lsl.w	r6, r1, r5
 801cd06:	1d72      	adds	r2, r6, #5
 801cd08:	0092      	lsls	r2, r2, #2
 801cd0a:	4620      	mov	r0, r4
 801cd0c:	f002 f8da 	bl	801eec4 <_calloc_r>
 801cd10:	b160      	cbz	r0, 801cd2c <_Balloc+0x64>
 801cd12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cd16:	e00e      	b.n	801cd36 <_Balloc+0x6e>
 801cd18:	2221      	movs	r2, #33	; 0x21
 801cd1a:	2104      	movs	r1, #4
 801cd1c:	4620      	mov	r0, r4
 801cd1e:	f002 f8d1 	bl	801eec4 <_calloc_r>
 801cd22:	69e3      	ldr	r3, [r4, #28]
 801cd24:	60f0      	str	r0, [r6, #12]
 801cd26:	68db      	ldr	r3, [r3, #12]
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	d1e4      	bne.n	801ccf6 <_Balloc+0x2e>
 801cd2c:	2000      	movs	r0, #0
 801cd2e:	bd70      	pop	{r4, r5, r6, pc}
 801cd30:	6802      	ldr	r2, [r0, #0]
 801cd32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cd36:	2300      	movs	r3, #0
 801cd38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cd3c:	e7f7      	b.n	801cd2e <_Balloc+0x66>
 801cd3e:	bf00      	nop
 801cd40:	08020488 	.word	0x08020488
 801cd44:	08020508 	.word	0x08020508

0801cd48 <_Bfree>:
 801cd48:	b570      	push	{r4, r5, r6, lr}
 801cd4a:	69c6      	ldr	r6, [r0, #28]
 801cd4c:	4605      	mov	r5, r0
 801cd4e:	460c      	mov	r4, r1
 801cd50:	b976      	cbnz	r6, 801cd70 <_Bfree+0x28>
 801cd52:	2010      	movs	r0, #16
 801cd54:	f7ff ff04 	bl	801cb60 <malloc>
 801cd58:	4602      	mov	r2, r0
 801cd5a:	61e8      	str	r0, [r5, #28]
 801cd5c:	b920      	cbnz	r0, 801cd68 <_Bfree+0x20>
 801cd5e:	4b09      	ldr	r3, [pc, #36]	; (801cd84 <_Bfree+0x3c>)
 801cd60:	4809      	ldr	r0, [pc, #36]	; (801cd88 <_Bfree+0x40>)
 801cd62:	218f      	movs	r1, #143	; 0x8f
 801cd64:	f002 f890 	bl	801ee88 <__assert_func>
 801cd68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cd6c:	6006      	str	r6, [r0, #0]
 801cd6e:	60c6      	str	r6, [r0, #12]
 801cd70:	b13c      	cbz	r4, 801cd82 <_Bfree+0x3a>
 801cd72:	69eb      	ldr	r3, [r5, #28]
 801cd74:	6862      	ldr	r2, [r4, #4]
 801cd76:	68db      	ldr	r3, [r3, #12]
 801cd78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cd7c:	6021      	str	r1, [r4, #0]
 801cd7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cd82:	bd70      	pop	{r4, r5, r6, pc}
 801cd84:	08020488 	.word	0x08020488
 801cd88:	08020508 	.word	0x08020508

0801cd8c <__multadd>:
 801cd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd90:	690d      	ldr	r5, [r1, #16]
 801cd92:	4607      	mov	r7, r0
 801cd94:	460c      	mov	r4, r1
 801cd96:	461e      	mov	r6, r3
 801cd98:	f101 0c14 	add.w	ip, r1, #20
 801cd9c:	2000      	movs	r0, #0
 801cd9e:	f8dc 3000 	ldr.w	r3, [ip]
 801cda2:	b299      	uxth	r1, r3
 801cda4:	fb02 6101 	mla	r1, r2, r1, r6
 801cda8:	0c1e      	lsrs	r6, r3, #16
 801cdaa:	0c0b      	lsrs	r3, r1, #16
 801cdac:	fb02 3306 	mla	r3, r2, r6, r3
 801cdb0:	b289      	uxth	r1, r1
 801cdb2:	3001      	adds	r0, #1
 801cdb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cdb8:	4285      	cmp	r5, r0
 801cdba:	f84c 1b04 	str.w	r1, [ip], #4
 801cdbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cdc2:	dcec      	bgt.n	801cd9e <__multadd+0x12>
 801cdc4:	b30e      	cbz	r6, 801ce0a <__multadd+0x7e>
 801cdc6:	68a3      	ldr	r3, [r4, #8]
 801cdc8:	42ab      	cmp	r3, r5
 801cdca:	dc19      	bgt.n	801ce00 <__multadd+0x74>
 801cdcc:	6861      	ldr	r1, [r4, #4]
 801cdce:	4638      	mov	r0, r7
 801cdd0:	3101      	adds	r1, #1
 801cdd2:	f7ff ff79 	bl	801ccc8 <_Balloc>
 801cdd6:	4680      	mov	r8, r0
 801cdd8:	b928      	cbnz	r0, 801cde6 <__multadd+0x5a>
 801cdda:	4602      	mov	r2, r0
 801cddc:	4b0c      	ldr	r3, [pc, #48]	; (801ce10 <__multadd+0x84>)
 801cdde:	480d      	ldr	r0, [pc, #52]	; (801ce14 <__multadd+0x88>)
 801cde0:	21ba      	movs	r1, #186	; 0xba
 801cde2:	f002 f851 	bl	801ee88 <__assert_func>
 801cde6:	6922      	ldr	r2, [r4, #16]
 801cde8:	3202      	adds	r2, #2
 801cdea:	f104 010c 	add.w	r1, r4, #12
 801cdee:	0092      	lsls	r2, r2, #2
 801cdf0:	300c      	adds	r0, #12
 801cdf2:	f7ff f85e 	bl	801beb2 <memcpy>
 801cdf6:	4621      	mov	r1, r4
 801cdf8:	4638      	mov	r0, r7
 801cdfa:	f7ff ffa5 	bl	801cd48 <_Bfree>
 801cdfe:	4644      	mov	r4, r8
 801ce00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ce04:	3501      	adds	r5, #1
 801ce06:	615e      	str	r6, [r3, #20]
 801ce08:	6125      	str	r5, [r4, #16]
 801ce0a:	4620      	mov	r0, r4
 801ce0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce10:	080204f7 	.word	0x080204f7
 801ce14:	08020508 	.word	0x08020508

0801ce18 <__s2b>:
 801ce18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ce1c:	460c      	mov	r4, r1
 801ce1e:	4615      	mov	r5, r2
 801ce20:	461f      	mov	r7, r3
 801ce22:	2209      	movs	r2, #9
 801ce24:	3308      	adds	r3, #8
 801ce26:	4606      	mov	r6, r0
 801ce28:	fb93 f3f2 	sdiv	r3, r3, r2
 801ce2c:	2100      	movs	r1, #0
 801ce2e:	2201      	movs	r2, #1
 801ce30:	429a      	cmp	r2, r3
 801ce32:	db09      	blt.n	801ce48 <__s2b+0x30>
 801ce34:	4630      	mov	r0, r6
 801ce36:	f7ff ff47 	bl	801ccc8 <_Balloc>
 801ce3a:	b940      	cbnz	r0, 801ce4e <__s2b+0x36>
 801ce3c:	4602      	mov	r2, r0
 801ce3e:	4b19      	ldr	r3, [pc, #100]	; (801cea4 <__s2b+0x8c>)
 801ce40:	4819      	ldr	r0, [pc, #100]	; (801cea8 <__s2b+0x90>)
 801ce42:	21d3      	movs	r1, #211	; 0xd3
 801ce44:	f002 f820 	bl	801ee88 <__assert_func>
 801ce48:	0052      	lsls	r2, r2, #1
 801ce4a:	3101      	adds	r1, #1
 801ce4c:	e7f0      	b.n	801ce30 <__s2b+0x18>
 801ce4e:	9b08      	ldr	r3, [sp, #32]
 801ce50:	6143      	str	r3, [r0, #20]
 801ce52:	2d09      	cmp	r5, #9
 801ce54:	f04f 0301 	mov.w	r3, #1
 801ce58:	6103      	str	r3, [r0, #16]
 801ce5a:	dd16      	ble.n	801ce8a <__s2b+0x72>
 801ce5c:	f104 0909 	add.w	r9, r4, #9
 801ce60:	46c8      	mov	r8, r9
 801ce62:	442c      	add	r4, r5
 801ce64:	f818 3b01 	ldrb.w	r3, [r8], #1
 801ce68:	4601      	mov	r1, r0
 801ce6a:	3b30      	subs	r3, #48	; 0x30
 801ce6c:	220a      	movs	r2, #10
 801ce6e:	4630      	mov	r0, r6
 801ce70:	f7ff ff8c 	bl	801cd8c <__multadd>
 801ce74:	45a0      	cmp	r8, r4
 801ce76:	d1f5      	bne.n	801ce64 <__s2b+0x4c>
 801ce78:	f1a5 0408 	sub.w	r4, r5, #8
 801ce7c:	444c      	add	r4, r9
 801ce7e:	1b2d      	subs	r5, r5, r4
 801ce80:	1963      	adds	r3, r4, r5
 801ce82:	42bb      	cmp	r3, r7
 801ce84:	db04      	blt.n	801ce90 <__s2b+0x78>
 801ce86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ce8a:	340a      	adds	r4, #10
 801ce8c:	2509      	movs	r5, #9
 801ce8e:	e7f6      	b.n	801ce7e <__s2b+0x66>
 801ce90:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ce94:	4601      	mov	r1, r0
 801ce96:	3b30      	subs	r3, #48	; 0x30
 801ce98:	220a      	movs	r2, #10
 801ce9a:	4630      	mov	r0, r6
 801ce9c:	f7ff ff76 	bl	801cd8c <__multadd>
 801cea0:	e7ee      	b.n	801ce80 <__s2b+0x68>
 801cea2:	bf00      	nop
 801cea4:	080204f7 	.word	0x080204f7
 801cea8:	08020508 	.word	0x08020508

0801ceac <__hi0bits>:
 801ceac:	0c03      	lsrs	r3, r0, #16
 801ceae:	041b      	lsls	r3, r3, #16
 801ceb0:	b9d3      	cbnz	r3, 801cee8 <__hi0bits+0x3c>
 801ceb2:	0400      	lsls	r0, r0, #16
 801ceb4:	2310      	movs	r3, #16
 801ceb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ceba:	bf04      	itt	eq
 801cebc:	0200      	lsleq	r0, r0, #8
 801cebe:	3308      	addeq	r3, #8
 801cec0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801cec4:	bf04      	itt	eq
 801cec6:	0100      	lsleq	r0, r0, #4
 801cec8:	3304      	addeq	r3, #4
 801ceca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801cece:	bf04      	itt	eq
 801ced0:	0080      	lsleq	r0, r0, #2
 801ced2:	3302      	addeq	r3, #2
 801ced4:	2800      	cmp	r0, #0
 801ced6:	db05      	blt.n	801cee4 <__hi0bits+0x38>
 801ced8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801cedc:	f103 0301 	add.w	r3, r3, #1
 801cee0:	bf08      	it	eq
 801cee2:	2320      	moveq	r3, #32
 801cee4:	4618      	mov	r0, r3
 801cee6:	4770      	bx	lr
 801cee8:	2300      	movs	r3, #0
 801ceea:	e7e4      	b.n	801ceb6 <__hi0bits+0xa>

0801ceec <__lo0bits>:
 801ceec:	6803      	ldr	r3, [r0, #0]
 801ceee:	f013 0207 	ands.w	r2, r3, #7
 801cef2:	d00c      	beq.n	801cf0e <__lo0bits+0x22>
 801cef4:	07d9      	lsls	r1, r3, #31
 801cef6:	d422      	bmi.n	801cf3e <__lo0bits+0x52>
 801cef8:	079a      	lsls	r2, r3, #30
 801cefa:	bf49      	itett	mi
 801cefc:	085b      	lsrmi	r3, r3, #1
 801cefe:	089b      	lsrpl	r3, r3, #2
 801cf00:	6003      	strmi	r3, [r0, #0]
 801cf02:	2201      	movmi	r2, #1
 801cf04:	bf5c      	itt	pl
 801cf06:	6003      	strpl	r3, [r0, #0]
 801cf08:	2202      	movpl	r2, #2
 801cf0a:	4610      	mov	r0, r2
 801cf0c:	4770      	bx	lr
 801cf0e:	b299      	uxth	r1, r3
 801cf10:	b909      	cbnz	r1, 801cf16 <__lo0bits+0x2a>
 801cf12:	0c1b      	lsrs	r3, r3, #16
 801cf14:	2210      	movs	r2, #16
 801cf16:	b2d9      	uxtb	r1, r3
 801cf18:	b909      	cbnz	r1, 801cf1e <__lo0bits+0x32>
 801cf1a:	3208      	adds	r2, #8
 801cf1c:	0a1b      	lsrs	r3, r3, #8
 801cf1e:	0719      	lsls	r1, r3, #28
 801cf20:	bf04      	itt	eq
 801cf22:	091b      	lsreq	r3, r3, #4
 801cf24:	3204      	addeq	r2, #4
 801cf26:	0799      	lsls	r1, r3, #30
 801cf28:	bf04      	itt	eq
 801cf2a:	089b      	lsreq	r3, r3, #2
 801cf2c:	3202      	addeq	r2, #2
 801cf2e:	07d9      	lsls	r1, r3, #31
 801cf30:	d403      	bmi.n	801cf3a <__lo0bits+0x4e>
 801cf32:	085b      	lsrs	r3, r3, #1
 801cf34:	f102 0201 	add.w	r2, r2, #1
 801cf38:	d003      	beq.n	801cf42 <__lo0bits+0x56>
 801cf3a:	6003      	str	r3, [r0, #0]
 801cf3c:	e7e5      	b.n	801cf0a <__lo0bits+0x1e>
 801cf3e:	2200      	movs	r2, #0
 801cf40:	e7e3      	b.n	801cf0a <__lo0bits+0x1e>
 801cf42:	2220      	movs	r2, #32
 801cf44:	e7e1      	b.n	801cf0a <__lo0bits+0x1e>
	...

0801cf48 <__i2b>:
 801cf48:	b510      	push	{r4, lr}
 801cf4a:	460c      	mov	r4, r1
 801cf4c:	2101      	movs	r1, #1
 801cf4e:	f7ff febb 	bl	801ccc8 <_Balloc>
 801cf52:	4602      	mov	r2, r0
 801cf54:	b928      	cbnz	r0, 801cf62 <__i2b+0x1a>
 801cf56:	4b05      	ldr	r3, [pc, #20]	; (801cf6c <__i2b+0x24>)
 801cf58:	4805      	ldr	r0, [pc, #20]	; (801cf70 <__i2b+0x28>)
 801cf5a:	f240 1145 	movw	r1, #325	; 0x145
 801cf5e:	f001 ff93 	bl	801ee88 <__assert_func>
 801cf62:	2301      	movs	r3, #1
 801cf64:	6144      	str	r4, [r0, #20]
 801cf66:	6103      	str	r3, [r0, #16]
 801cf68:	bd10      	pop	{r4, pc}
 801cf6a:	bf00      	nop
 801cf6c:	080204f7 	.word	0x080204f7
 801cf70:	08020508 	.word	0x08020508

0801cf74 <__multiply>:
 801cf74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf78:	4691      	mov	r9, r2
 801cf7a:	690a      	ldr	r2, [r1, #16]
 801cf7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cf80:	429a      	cmp	r2, r3
 801cf82:	bfb8      	it	lt
 801cf84:	460b      	movlt	r3, r1
 801cf86:	460c      	mov	r4, r1
 801cf88:	bfbc      	itt	lt
 801cf8a:	464c      	movlt	r4, r9
 801cf8c:	4699      	movlt	r9, r3
 801cf8e:	6927      	ldr	r7, [r4, #16]
 801cf90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801cf94:	68a3      	ldr	r3, [r4, #8]
 801cf96:	6861      	ldr	r1, [r4, #4]
 801cf98:	eb07 060a 	add.w	r6, r7, sl
 801cf9c:	42b3      	cmp	r3, r6
 801cf9e:	b085      	sub	sp, #20
 801cfa0:	bfb8      	it	lt
 801cfa2:	3101      	addlt	r1, #1
 801cfa4:	f7ff fe90 	bl	801ccc8 <_Balloc>
 801cfa8:	b930      	cbnz	r0, 801cfb8 <__multiply+0x44>
 801cfaa:	4602      	mov	r2, r0
 801cfac:	4b44      	ldr	r3, [pc, #272]	; (801d0c0 <__multiply+0x14c>)
 801cfae:	4845      	ldr	r0, [pc, #276]	; (801d0c4 <__multiply+0x150>)
 801cfb0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801cfb4:	f001 ff68 	bl	801ee88 <__assert_func>
 801cfb8:	f100 0514 	add.w	r5, r0, #20
 801cfbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cfc0:	462b      	mov	r3, r5
 801cfc2:	2200      	movs	r2, #0
 801cfc4:	4543      	cmp	r3, r8
 801cfc6:	d321      	bcc.n	801d00c <__multiply+0x98>
 801cfc8:	f104 0314 	add.w	r3, r4, #20
 801cfcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801cfd0:	f109 0314 	add.w	r3, r9, #20
 801cfd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801cfd8:	9202      	str	r2, [sp, #8]
 801cfda:	1b3a      	subs	r2, r7, r4
 801cfdc:	3a15      	subs	r2, #21
 801cfde:	f022 0203 	bic.w	r2, r2, #3
 801cfe2:	3204      	adds	r2, #4
 801cfe4:	f104 0115 	add.w	r1, r4, #21
 801cfe8:	428f      	cmp	r7, r1
 801cfea:	bf38      	it	cc
 801cfec:	2204      	movcc	r2, #4
 801cfee:	9201      	str	r2, [sp, #4]
 801cff0:	9a02      	ldr	r2, [sp, #8]
 801cff2:	9303      	str	r3, [sp, #12]
 801cff4:	429a      	cmp	r2, r3
 801cff6:	d80c      	bhi.n	801d012 <__multiply+0x9e>
 801cff8:	2e00      	cmp	r6, #0
 801cffa:	dd03      	ble.n	801d004 <__multiply+0x90>
 801cffc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d000:	2b00      	cmp	r3, #0
 801d002:	d05b      	beq.n	801d0bc <__multiply+0x148>
 801d004:	6106      	str	r6, [r0, #16]
 801d006:	b005      	add	sp, #20
 801d008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d00c:	f843 2b04 	str.w	r2, [r3], #4
 801d010:	e7d8      	b.n	801cfc4 <__multiply+0x50>
 801d012:	f8b3 a000 	ldrh.w	sl, [r3]
 801d016:	f1ba 0f00 	cmp.w	sl, #0
 801d01a:	d024      	beq.n	801d066 <__multiply+0xf2>
 801d01c:	f104 0e14 	add.w	lr, r4, #20
 801d020:	46a9      	mov	r9, r5
 801d022:	f04f 0c00 	mov.w	ip, #0
 801d026:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d02a:	f8d9 1000 	ldr.w	r1, [r9]
 801d02e:	fa1f fb82 	uxth.w	fp, r2
 801d032:	b289      	uxth	r1, r1
 801d034:	fb0a 110b 	mla	r1, sl, fp, r1
 801d038:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d03c:	f8d9 2000 	ldr.w	r2, [r9]
 801d040:	4461      	add	r1, ip
 801d042:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d046:	fb0a c20b 	mla	r2, sl, fp, ip
 801d04a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d04e:	b289      	uxth	r1, r1
 801d050:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d054:	4577      	cmp	r7, lr
 801d056:	f849 1b04 	str.w	r1, [r9], #4
 801d05a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d05e:	d8e2      	bhi.n	801d026 <__multiply+0xb2>
 801d060:	9a01      	ldr	r2, [sp, #4]
 801d062:	f845 c002 	str.w	ip, [r5, r2]
 801d066:	9a03      	ldr	r2, [sp, #12]
 801d068:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d06c:	3304      	adds	r3, #4
 801d06e:	f1b9 0f00 	cmp.w	r9, #0
 801d072:	d021      	beq.n	801d0b8 <__multiply+0x144>
 801d074:	6829      	ldr	r1, [r5, #0]
 801d076:	f104 0c14 	add.w	ip, r4, #20
 801d07a:	46ae      	mov	lr, r5
 801d07c:	f04f 0a00 	mov.w	sl, #0
 801d080:	f8bc b000 	ldrh.w	fp, [ip]
 801d084:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d088:	fb09 220b 	mla	r2, r9, fp, r2
 801d08c:	4452      	add	r2, sl
 801d08e:	b289      	uxth	r1, r1
 801d090:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d094:	f84e 1b04 	str.w	r1, [lr], #4
 801d098:	f85c 1b04 	ldr.w	r1, [ip], #4
 801d09c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d0a0:	f8be 1000 	ldrh.w	r1, [lr]
 801d0a4:	fb09 110a 	mla	r1, r9, sl, r1
 801d0a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801d0ac:	4567      	cmp	r7, ip
 801d0ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d0b2:	d8e5      	bhi.n	801d080 <__multiply+0x10c>
 801d0b4:	9a01      	ldr	r2, [sp, #4]
 801d0b6:	50a9      	str	r1, [r5, r2]
 801d0b8:	3504      	adds	r5, #4
 801d0ba:	e799      	b.n	801cff0 <__multiply+0x7c>
 801d0bc:	3e01      	subs	r6, #1
 801d0be:	e79b      	b.n	801cff8 <__multiply+0x84>
 801d0c0:	080204f7 	.word	0x080204f7
 801d0c4:	08020508 	.word	0x08020508

0801d0c8 <__pow5mult>:
 801d0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d0cc:	4615      	mov	r5, r2
 801d0ce:	f012 0203 	ands.w	r2, r2, #3
 801d0d2:	4606      	mov	r6, r0
 801d0d4:	460f      	mov	r7, r1
 801d0d6:	d007      	beq.n	801d0e8 <__pow5mult+0x20>
 801d0d8:	4c25      	ldr	r4, [pc, #148]	; (801d170 <__pow5mult+0xa8>)
 801d0da:	3a01      	subs	r2, #1
 801d0dc:	2300      	movs	r3, #0
 801d0de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d0e2:	f7ff fe53 	bl	801cd8c <__multadd>
 801d0e6:	4607      	mov	r7, r0
 801d0e8:	10ad      	asrs	r5, r5, #2
 801d0ea:	d03d      	beq.n	801d168 <__pow5mult+0xa0>
 801d0ec:	69f4      	ldr	r4, [r6, #28]
 801d0ee:	b97c      	cbnz	r4, 801d110 <__pow5mult+0x48>
 801d0f0:	2010      	movs	r0, #16
 801d0f2:	f7ff fd35 	bl	801cb60 <malloc>
 801d0f6:	4602      	mov	r2, r0
 801d0f8:	61f0      	str	r0, [r6, #28]
 801d0fa:	b928      	cbnz	r0, 801d108 <__pow5mult+0x40>
 801d0fc:	4b1d      	ldr	r3, [pc, #116]	; (801d174 <__pow5mult+0xac>)
 801d0fe:	481e      	ldr	r0, [pc, #120]	; (801d178 <__pow5mult+0xb0>)
 801d100:	f240 11b3 	movw	r1, #435	; 0x1b3
 801d104:	f001 fec0 	bl	801ee88 <__assert_func>
 801d108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d10c:	6004      	str	r4, [r0, #0]
 801d10e:	60c4      	str	r4, [r0, #12]
 801d110:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801d114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d118:	b94c      	cbnz	r4, 801d12e <__pow5mult+0x66>
 801d11a:	f240 2171 	movw	r1, #625	; 0x271
 801d11e:	4630      	mov	r0, r6
 801d120:	f7ff ff12 	bl	801cf48 <__i2b>
 801d124:	2300      	movs	r3, #0
 801d126:	f8c8 0008 	str.w	r0, [r8, #8]
 801d12a:	4604      	mov	r4, r0
 801d12c:	6003      	str	r3, [r0, #0]
 801d12e:	f04f 0900 	mov.w	r9, #0
 801d132:	07eb      	lsls	r3, r5, #31
 801d134:	d50a      	bpl.n	801d14c <__pow5mult+0x84>
 801d136:	4639      	mov	r1, r7
 801d138:	4622      	mov	r2, r4
 801d13a:	4630      	mov	r0, r6
 801d13c:	f7ff ff1a 	bl	801cf74 <__multiply>
 801d140:	4639      	mov	r1, r7
 801d142:	4680      	mov	r8, r0
 801d144:	4630      	mov	r0, r6
 801d146:	f7ff fdff 	bl	801cd48 <_Bfree>
 801d14a:	4647      	mov	r7, r8
 801d14c:	106d      	asrs	r5, r5, #1
 801d14e:	d00b      	beq.n	801d168 <__pow5mult+0xa0>
 801d150:	6820      	ldr	r0, [r4, #0]
 801d152:	b938      	cbnz	r0, 801d164 <__pow5mult+0x9c>
 801d154:	4622      	mov	r2, r4
 801d156:	4621      	mov	r1, r4
 801d158:	4630      	mov	r0, r6
 801d15a:	f7ff ff0b 	bl	801cf74 <__multiply>
 801d15e:	6020      	str	r0, [r4, #0]
 801d160:	f8c0 9000 	str.w	r9, [r0]
 801d164:	4604      	mov	r4, r0
 801d166:	e7e4      	b.n	801d132 <__pow5mult+0x6a>
 801d168:	4638      	mov	r0, r7
 801d16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d16e:	bf00      	nop
 801d170:	08020658 	.word	0x08020658
 801d174:	08020488 	.word	0x08020488
 801d178:	08020508 	.word	0x08020508

0801d17c <__lshift>:
 801d17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d180:	460c      	mov	r4, r1
 801d182:	6849      	ldr	r1, [r1, #4]
 801d184:	6923      	ldr	r3, [r4, #16]
 801d186:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d18a:	68a3      	ldr	r3, [r4, #8]
 801d18c:	4607      	mov	r7, r0
 801d18e:	4691      	mov	r9, r2
 801d190:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d194:	f108 0601 	add.w	r6, r8, #1
 801d198:	42b3      	cmp	r3, r6
 801d19a:	db0b      	blt.n	801d1b4 <__lshift+0x38>
 801d19c:	4638      	mov	r0, r7
 801d19e:	f7ff fd93 	bl	801ccc8 <_Balloc>
 801d1a2:	4605      	mov	r5, r0
 801d1a4:	b948      	cbnz	r0, 801d1ba <__lshift+0x3e>
 801d1a6:	4602      	mov	r2, r0
 801d1a8:	4b28      	ldr	r3, [pc, #160]	; (801d24c <__lshift+0xd0>)
 801d1aa:	4829      	ldr	r0, [pc, #164]	; (801d250 <__lshift+0xd4>)
 801d1ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801d1b0:	f001 fe6a 	bl	801ee88 <__assert_func>
 801d1b4:	3101      	adds	r1, #1
 801d1b6:	005b      	lsls	r3, r3, #1
 801d1b8:	e7ee      	b.n	801d198 <__lshift+0x1c>
 801d1ba:	2300      	movs	r3, #0
 801d1bc:	f100 0114 	add.w	r1, r0, #20
 801d1c0:	f100 0210 	add.w	r2, r0, #16
 801d1c4:	4618      	mov	r0, r3
 801d1c6:	4553      	cmp	r3, sl
 801d1c8:	db33      	blt.n	801d232 <__lshift+0xb6>
 801d1ca:	6920      	ldr	r0, [r4, #16]
 801d1cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d1d0:	f104 0314 	add.w	r3, r4, #20
 801d1d4:	f019 091f 	ands.w	r9, r9, #31
 801d1d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d1dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d1e0:	d02b      	beq.n	801d23a <__lshift+0xbe>
 801d1e2:	f1c9 0e20 	rsb	lr, r9, #32
 801d1e6:	468a      	mov	sl, r1
 801d1e8:	2200      	movs	r2, #0
 801d1ea:	6818      	ldr	r0, [r3, #0]
 801d1ec:	fa00 f009 	lsl.w	r0, r0, r9
 801d1f0:	4310      	orrs	r0, r2
 801d1f2:	f84a 0b04 	str.w	r0, [sl], #4
 801d1f6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1fa:	459c      	cmp	ip, r3
 801d1fc:	fa22 f20e 	lsr.w	r2, r2, lr
 801d200:	d8f3      	bhi.n	801d1ea <__lshift+0x6e>
 801d202:	ebac 0304 	sub.w	r3, ip, r4
 801d206:	3b15      	subs	r3, #21
 801d208:	f023 0303 	bic.w	r3, r3, #3
 801d20c:	3304      	adds	r3, #4
 801d20e:	f104 0015 	add.w	r0, r4, #21
 801d212:	4584      	cmp	ip, r0
 801d214:	bf38      	it	cc
 801d216:	2304      	movcc	r3, #4
 801d218:	50ca      	str	r2, [r1, r3]
 801d21a:	b10a      	cbz	r2, 801d220 <__lshift+0xa4>
 801d21c:	f108 0602 	add.w	r6, r8, #2
 801d220:	3e01      	subs	r6, #1
 801d222:	4638      	mov	r0, r7
 801d224:	612e      	str	r6, [r5, #16]
 801d226:	4621      	mov	r1, r4
 801d228:	f7ff fd8e 	bl	801cd48 <_Bfree>
 801d22c:	4628      	mov	r0, r5
 801d22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d232:	f842 0f04 	str.w	r0, [r2, #4]!
 801d236:	3301      	adds	r3, #1
 801d238:	e7c5      	b.n	801d1c6 <__lshift+0x4a>
 801d23a:	3904      	subs	r1, #4
 801d23c:	f853 2b04 	ldr.w	r2, [r3], #4
 801d240:	f841 2f04 	str.w	r2, [r1, #4]!
 801d244:	459c      	cmp	ip, r3
 801d246:	d8f9      	bhi.n	801d23c <__lshift+0xc0>
 801d248:	e7ea      	b.n	801d220 <__lshift+0xa4>
 801d24a:	bf00      	nop
 801d24c:	080204f7 	.word	0x080204f7
 801d250:	08020508 	.word	0x08020508

0801d254 <__mcmp>:
 801d254:	b530      	push	{r4, r5, lr}
 801d256:	6902      	ldr	r2, [r0, #16]
 801d258:	690c      	ldr	r4, [r1, #16]
 801d25a:	1b12      	subs	r2, r2, r4
 801d25c:	d10e      	bne.n	801d27c <__mcmp+0x28>
 801d25e:	f100 0314 	add.w	r3, r0, #20
 801d262:	3114      	adds	r1, #20
 801d264:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d268:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d26c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d270:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d274:	42a5      	cmp	r5, r4
 801d276:	d003      	beq.n	801d280 <__mcmp+0x2c>
 801d278:	d305      	bcc.n	801d286 <__mcmp+0x32>
 801d27a:	2201      	movs	r2, #1
 801d27c:	4610      	mov	r0, r2
 801d27e:	bd30      	pop	{r4, r5, pc}
 801d280:	4283      	cmp	r3, r0
 801d282:	d3f3      	bcc.n	801d26c <__mcmp+0x18>
 801d284:	e7fa      	b.n	801d27c <__mcmp+0x28>
 801d286:	f04f 32ff 	mov.w	r2, #4294967295
 801d28a:	e7f7      	b.n	801d27c <__mcmp+0x28>

0801d28c <__mdiff>:
 801d28c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d290:	460c      	mov	r4, r1
 801d292:	4606      	mov	r6, r0
 801d294:	4611      	mov	r1, r2
 801d296:	4620      	mov	r0, r4
 801d298:	4690      	mov	r8, r2
 801d29a:	f7ff ffdb 	bl	801d254 <__mcmp>
 801d29e:	1e05      	subs	r5, r0, #0
 801d2a0:	d110      	bne.n	801d2c4 <__mdiff+0x38>
 801d2a2:	4629      	mov	r1, r5
 801d2a4:	4630      	mov	r0, r6
 801d2a6:	f7ff fd0f 	bl	801ccc8 <_Balloc>
 801d2aa:	b930      	cbnz	r0, 801d2ba <__mdiff+0x2e>
 801d2ac:	4b3a      	ldr	r3, [pc, #232]	; (801d398 <__mdiff+0x10c>)
 801d2ae:	4602      	mov	r2, r0
 801d2b0:	f240 2137 	movw	r1, #567	; 0x237
 801d2b4:	4839      	ldr	r0, [pc, #228]	; (801d39c <__mdiff+0x110>)
 801d2b6:	f001 fde7 	bl	801ee88 <__assert_func>
 801d2ba:	2301      	movs	r3, #1
 801d2bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d2c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2c4:	bfa4      	itt	ge
 801d2c6:	4643      	movge	r3, r8
 801d2c8:	46a0      	movge	r8, r4
 801d2ca:	4630      	mov	r0, r6
 801d2cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d2d0:	bfa6      	itte	ge
 801d2d2:	461c      	movge	r4, r3
 801d2d4:	2500      	movge	r5, #0
 801d2d6:	2501      	movlt	r5, #1
 801d2d8:	f7ff fcf6 	bl	801ccc8 <_Balloc>
 801d2dc:	b920      	cbnz	r0, 801d2e8 <__mdiff+0x5c>
 801d2de:	4b2e      	ldr	r3, [pc, #184]	; (801d398 <__mdiff+0x10c>)
 801d2e0:	4602      	mov	r2, r0
 801d2e2:	f240 2145 	movw	r1, #581	; 0x245
 801d2e6:	e7e5      	b.n	801d2b4 <__mdiff+0x28>
 801d2e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d2ec:	6926      	ldr	r6, [r4, #16]
 801d2ee:	60c5      	str	r5, [r0, #12]
 801d2f0:	f104 0914 	add.w	r9, r4, #20
 801d2f4:	f108 0514 	add.w	r5, r8, #20
 801d2f8:	f100 0e14 	add.w	lr, r0, #20
 801d2fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d300:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d304:	f108 0210 	add.w	r2, r8, #16
 801d308:	46f2      	mov	sl, lr
 801d30a:	2100      	movs	r1, #0
 801d30c:	f859 3b04 	ldr.w	r3, [r9], #4
 801d310:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d314:	fa11 f88b 	uxtah	r8, r1, fp
 801d318:	b299      	uxth	r1, r3
 801d31a:	0c1b      	lsrs	r3, r3, #16
 801d31c:	eba8 0801 	sub.w	r8, r8, r1
 801d320:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d324:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d328:	fa1f f888 	uxth.w	r8, r8
 801d32c:	1419      	asrs	r1, r3, #16
 801d32e:	454e      	cmp	r6, r9
 801d330:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d334:	f84a 3b04 	str.w	r3, [sl], #4
 801d338:	d8e8      	bhi.n	801d30c <__mdiff+0x80>
 801d33a:	1b33      	subs	r3, r6, r4
 801d33c:	3b15      	subs	r3, #21
 801d33e:	f023 0303 	bic.w	r3, r3, #3
 801d342:	3304      	adds	r3, #4
 801d344:	3415      	adds	r4, #21
 801d346:	42a6      	cmp	r6, r4
 801d348:	bf38      	it	cc
 801d34a:	2304      	movcc	r3, #4
 801d34c:	441d      	add	r5, r3
 801d34e:	4473      	add	r3, lr
 801d350:	469e      	mov	lr, r3
 801d352:	462e      	mov	r6, r5
 801d354:	4566      	cmp	r6, ip
 801d356:	d30e      	bcc.n	801d376 <__mdiff+0xea>
 801d358:	f10c 0203 	add.w	r2, ip, #3
 801d35c:	1b52      	subs	r2, r2, r5
 801d35e:	f022 0203 	bic.w	r2, r2, #3
 801d362:	3d03      	subs	r5, #3
 801d364:	45ac      	cmp	ip, r5
 801d366:	bf38      	it	cc
 801d368:	2200      	movcc	r2, #0
 801d36a:	4413      	add	r3, r2
 801d36c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801d370:	b17a      	cbz	r2, 801d392 <__mdiff+0x106>
 801d372:	6107      	str	r7, [r0, #16]
 801d374:	e7a4      	b.n	801d2c0 <__mdiff+0x34>
 801d376:	f856 8b04 	ldr.w	r8, [r6], #4
 801d37a:	fa11 f288 	uxtah	r2, r1, r8
 801d37e:	1414      	asrs	r4, r2, #16
 801d380:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d384:	b292      	uxth	r2, r2
 801d386:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d38a:	f84e 2b04 	str.w	r2, [lr], #4
 801d38e:	1421      	asrs	r1, r4, #16
 801d390:	e7e0      	b.n	801d354 <__mdiff+0xc8>
 801d392:	3f01      	subs	r7, #1
 801d394:	e7ea      	b.n	801d36c <__mdiff+0xe0>
 801d396:	bf00      	nop
 801d398:	080204f7 	.word	0x080204f7
 801d39c:	08020508 	.word	0x08020508

0801d3a0 <__ulp>:
 801d3a0:	b082      	sub	sp, #8
 801d3a2:	ed8d 0b00 	vstr	d0, [sp]
 801d3a6:	9a01      	ldr	r2, [sp, #4]
 801d3a8:	4b0f      	ldr	r3, [pc, #60]	; (801d3e8 <__ulp+0x48>)
 801d3aa:	4013      	ands	r3, r2
 801d3ac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	dc08      	bgt.n	801d3c6 <__ulp+0x26>
 801d3b4:	425b      	negs	r3, r3
 801d3b6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801d3ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d3be:	da04      	bge.n	801d3ca <__ulp+0x2a>
 801d3c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801d3c4:	4113      	asrs	r3, r2
 801d3c6:	2200      	movs	r2, #0
 801d3c8:	e008      	b.n	801d3dc <__ulp+0x3c>
 801d3ca:	f1a2 0314 	sub.w	r3, r2, #20
 801d3ce:	2b1e      	cmp	r3, #30
 801d3d0:	bfda      	itte	le
 801d3d2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801d3d6:	40da      	lsrle	r2, r3
 801d3d8:	2201      	movgt	r2, #1
 801d3da:	2300      	movs	r3, #0
 801d3dc:	4619      	mov	r1, r3
 801d3de:	4610      	mov	r0, r2
 801d3e0:	ec41 0b10 	vmov	d0, r0, r1
 801d3e4:	b002      	add	sp, #8
 801d3e6:	4770      	bx	lr
 801d3e8:	7ff00000 	.word	0x7ff00000

0801d3ec <__b2d>:
 801d3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d3f0:	6906      	ldr	r6, [r0, #16]
 801d3f2:	f100 0814 	add.w	r8, r0, #20
 801d3f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d3fa:	1f37      	subs	r7, r6, #4
 801d3fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d400:	4610      	mov	r0, r2
 801d402:	f7ff fd53 	bl	801ceac <__hi0bits>
 801d406:	f1c0 0320 	rsb	r3, r0, #32
 801d40a:	280a      	cmp	r0, #10
 801d40c:	600b      	str	r3, [r1, #0]
 801d40e:	491b      	ldr	r1, [pc, #108]	; (801d47c <__b2d+0x90>)
 801d410:	dc15      	bgt.n	801d43e <__b2d+0x52>
 801d412:	f1c0 0c0b 	rsb	ip, r0, #11
 801d416:	fa22 f30c 	lsr.w	r3, r2, ip
 801d41a:	45b8      	cmp	r8, r7
 801d41c:	ea43 0501 	orr.w	r5, r3, r1
 801d420:	bf34      	ite	cc
 801d422:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d426:	2300      	movcs	r3, #0
 801d428:	3015      	adds	r0, #21
 801d42a:	fa02 f000 	lsl.w	r0, r2, r0
 801d42e:	fa23 f30c 	lsr.w	r3, r3, ip
 801d432:	4303      	orrs	r3, r0
 801d434:	461c      	mov	r4, r3
 801d436:	ec45 4b10 	vmov	d0, r4, r5
 801d43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d43e:	45b8      	cmp	r8, r7
 801d440:	bf3a      	itte	cc
 801d442:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d446:	f1a6 0708 	subcc.w	r7, r6, #8
 801d44a:	2300      	movcs	r3, #0
 801d44c:	380b      	subs	r0, #11
 801d44e:	d012      	beq.n	801d476 <__b2d+0x8a>
 801d450:	f1c0 0120 	rsb	r1, r0, #32
 801d454:	fa23 f401 	lsr.w	r4, r3, r1
 801d458:	4082      	lsls	r2, r0
 801d45a:	4322      	orrs	r2, r4
 801d45c:	4547      	cmp	r7, r8
 801d45e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801d462:	bf8c      	ite	hi
 801d464:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d468:	2200      	movls	r2, #0
 801d46a:	4083      	lsls	r3, r0
 801d46c:	40ca      	lsrs	r2, r1
 801d46e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d472:	4313      	orrs	r3, r2
 801d474:	e7de      	b.n	801d434 <__b2d+0x48>
 801d476:	ea42 0501 	orr.w	r5, r2, r1
 801d47a:	e7db      	b.n	801d434 <__b2d+0x48>
 801d47c:	3ff00000 	.word	0x3ff00000

0801d480 <__d2b>:
 801d480:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d484:	460f      	mov	r7, r1
 801d486:	2101      	movs	r1, #1
 801d488:	ec59 8b10 	vmov	r8, r9, d0
 801d48c:	4616      	mov	r6, r2
 801d48e:	f7ff fc1b 	bl	801ccc8 <_Balloc>
 801d492:	4604      	mov	r4, r0
 801d494:	b930      	cbnz	r0, 801d4a4 <__d2b+0x24>
 801d496:	4602      	mov	r2, r0
 801d498:	4b24      	ldr	r3, [pc, #144]	; (801d52c <__d2b+0xac>)
 801d49a:	4825      	ldr	r0, [pc, #148]	; (801d530 <__d2b+0xb0>)
 801d49c:	f240 310f 	movw	r1, #783	; 0x30f
 801d4a0:	f001 fcf2 	bl	801ee88 <__assert_func>
 801d4a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d4a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d4ac:	bb2d      	cbnz	r5, 801d4fa <__d2b+0x7a>
 801d4ae:	9301      	str	r3, [sp, #4]
 801d4b0:	f1b8 0300 	subs.w	r3, r8, #0
 801d4b4:	d026      	beq.n	801d504 <__d2b+0x84>
 801d4b6:	4668      	mov	r0, sp
 801d4b8:	9300      	str	r3, [sp, #0]
 801d4ba:	f7ff fd17 	bl	801ceec <__lo0bits>
 801d4be:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d4c2:	b1e8      	cbz	r0, 801d500 <__d2b+0x80>
 801d4c4:	f1c0 0320 	rsb	r3, r0, #32
 801d4c8:	fa02 f303 	lsl.w	r3, r2, r3
 801d4cc:	430b      	orrs	r3, r1
 801d4ce:	40c2      	lsrs	r2, r0
 801d4d0:	6163      	str	r3, [r4, #20]
 801d4d2:	9201      	str	r2, [sp, #4]
 801d4d4:	9b01      	ldr	r3, [sp, #4]
 801d4d6:	61a3      	str	r3, [r4, #24]
 801d4d8:	2b00      	cmp	r3, #0
 801d4da:	bf14      	ite	ne
 801d4dc:	2202      	movne	r2, #2
 801d4de:	2201      	moveq	r2, #1
 801d4e0:	6122      	str	r2, [r4, #16]
 801d4e2:	b1bd      	cbz	r5, 801d514 <__d2b+0x94>
 801d4e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d4e8:	4405      	add	r5, r0
 801d4ea:	603d      	str	r5, [r7, #0]
 801d4ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d4f0:	6030      	str	r0, [r6, #0]
 801d4f2:	4620      	mov	r0, r4
 801d4f4:	b003      	add	sp, #12
 801d4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d4fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d4fe:	e7d6      	b.n	801d4ae <__d2b+0x2e>
 801d500:	6161      	str	r1, [r4, #20]
 801d502:	e7e7      	b.n	801d4d4 <__d2b+0x54>
 801d504:	a801      	add	r0, sp, #4
 801d506:	f7ff fcf1 	bl	801ceec <__lo0bits>
 801d50a:	9b01      	ldr	r3, [sp, #4]
 801d50c:	6163      	str	r3, [r4, #20]
 801d50e:	3020      	adds	r0, #32
 801d510:	2201      	movs	r2, #1
 801d512:	e7e5      	b.n	801d4e0 <__d2b+0x60>
 801d514:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d518:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d51c:	6038      	str	r0, [r7, #0]
 801d51e:	6918      	ldr	r0, [r3, #16]
 801d520:	f7ff fcc4 	bl	801ceac <__hi0bits>
 801d524:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d528:	e7e2      	b.n	801d4f0 <__d2b+0x70>
 801d52a:	bf00      	nop
 801d52c:	080204f7 	.word	0x080204f7
 801d530:	08020508 	.word	0x08020508

0801d534 <__ratio>:
 801d534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d538:	4688      	mov	r8, r1
 801d53a:	4669      	mov	r1, sp
 801d53c:	4681      	mov	r9, r0
 801d53e:	f7ff ff55 	bl	801d3ec <__b2d>
 801d542:	a901      	add	r1, sp, #4
 801d544:	4640      	mov	r0, r8
 801d546:	ec55 4b10 	vmov	r4, r5, d0
 801d54a:	ee10 aa10 	vmov	sl, s0
 801d54e:	f7ff ff4d 	bl	801d3ec <__b2d>
 801d552:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801d556:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801d55a:	1ad2      	subs	r2, r2, r3
 801d55c:	e9dd 3100 	ldrd	r3, r1, [sp]
 801d560:	1a5b      	subs	r3, r3, r1
 801d562:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801d566:	ec57 6b10 	vmov	r6, r7, d0
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	bfd6      	itet	le
 801d56e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d572:	462a      	movgt	r2, r5
 801d574:	463a      	movle	r2, r7
 801d576:	46ab      	mov	fp, r5
 801d578:	bfd6      	itet	le
 801d57a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801d57e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801d582:	ee00 3a90 	vmovle	s1, r3
 801d586:	ec4b ab17 	vmov	d7, sl, fp
 801d58a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801d58e:	b003      	add	sp, #12
 801d590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d594 <__copybits>:
 801d594:	3901      	subs	r1, #1
 801d596:	b570      	push	{r4, r5, r6, lr}
 801d598:	1149      	asrs	r1, r1, #5
 801d59a:	6914      	ldr	r4, [r2, #16]
 801d59c:	3101      	adds	r1, #1
 801d59e:	f102 0314 	add.w	r3, r2, #20
 801d5a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d5a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d5aa:	1f05      	subs	r5, r0, #4
 801d5ac:	42a3      	cmp	r3, r4
 801d5ae:	d30c      	bcc.n	801d5ca <__copybits+0x36>
 801d5b0:	1aa3      	subs	r3, r4, r2
 801d5b2:	3b11      	subs	r3, #17
 801d5b4:	f023 0303 	bic.w	r3, r3, #3
 801d5b8:	3211      	adds	r2, #17
 801d5ba:	42a2      	cmp	r2, r4
 801d5bc:	bf88      	it	hi
 801d5be:	2300      	movhi	r3, #0
 801d5c0:	4418      	add	r0, r3
 801d5c2:	2300      	movs	r3, #0
 801d5c4:	4288      	cmp	r0, r1
 801d5c6:	d305      	bcc.n	801d5d4 <__copybits+0x40>
 801d5c8:	bd70      	pop	{r4, r5, r6, pc}
 801d5ca:	f853 6b04 	ldr.w	r6, [r3], #4
 801d5ce:	f845 6f04 	str.w	r6, [r5, #4]!
 801d5d2:	e7eb      	b.n	801d5ac <__copybits+0x18>
 801d5d4:	f840 3b04 	str.w	r3, [r0], #4
 801d5d8:	e7f4      	b.n	801d5c4 <__copybits+0x30>

0801d5da <__any_on>:
 801d5da:	f100 0214 	add.w	r2, r0, #20
 801d5de:	6900      	ldr	r0, [r0, #16]
 801d5e0:	114b      	asrs	r3, r1, #5
 801d5e2:	4298      	cmp	r0, r3
 801d5e4:	b510      	push	{r4, lr}
 801d5e6:	db11      	blt.n	801d60c <__any_on+0x32>
 801d5e8:	dd0a      	ble.n	801d600 <__any_on+0x26>
 801d5ea:	f011 011f 	ands.w	r1, r1, #31
 801d5ee:	d007      	beq.n	801d600 <__any_on+0x26>
 801d5f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d5f4:	fa24 f001 	lsr.w	r0, r4, r1
 801d5f8:	fa00 f101 	lsl.w	r1, r0, r1
 801d5fc:	428c      	cmp	r4, r1
 801d5fe:	d10b      	bne.n	801d618 <__any_on+0x3e>
 801d600:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d604:	4293      	cmp	r3, r2
 801d606:	d803      	bhi.n	801d610 <__any_on+0x36>
 801d608:	2000      	movs	r0, #0
 801d60a:	bd10      	pop	{r4, pc}
 801d60c:	4603      	mov	r3, r0
 801d60e:	e7f7      	b.n	801d600 <__any_on+0x26>
 801d610:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d614:	2900      	cmp	r1, #0
 801d616:	d0f5      	beq.n	801d604 <__any_on+0x2a>
 801d618:	2001      	movs	r0, #1
 801d61a:	e7f6      	b.n	801d60a <__any_on+0x30>

0801d61c <sulp>:
 801d61c:	b570      	push	{r4, r5, r6, lr}
 801d61e:	4604      	mov	r4, r0
 801d620:	460d      	mov	r5, r1
 801d622:	4616      	mov	r6, r2
 801d624:	ec45 4b10 	vmov	d0, r4, r5
 801d628:	f7ff feba 	bl	801d3a0 <__ulp>
 801d62c:	b17e      	cbz	r6, 801d64e <sulp+0x32>
 801d62e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801d632:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d636:	2b00      	cmp	r3, #0
 801d638:	dd09      	ble.n	801d64e <sulp+0x32>
 801d63a:	051b      	lsls	r3, r3, #20
 801d63c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801d640:	2000      	movs	r0, #0
 801d642:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801d646:	ec41 0b17 	vmov	d7, r0, r1
 801d64a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d64e:	bd70      	pop	{r4, r5, r6, pc}

0801d650 <_strtod_l>:
 801d650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d654:	ed2d 8b0e 	vpush	{d8-d14}
 801d658:	b097      	sub	sp, #92	; 0x5c
 801d65a:	4604      	mov	r4, r0
 801d65c:	920d      	str	r2, [sp, #52]	; 0x34
 801d65e:	2200      	movs	r2, #0
 801d660:	9212      	str	r2, [sp, #72]	; 0x48
 801d662:	468a      	mov	sl, r1
 801d664:	f04f 0800 	mov.w	r8, #0
 801d668:	f04f 0900 	mov.w	r9, #0
 801d66c:	460a      	mov	r2, r1
 801d66e:	9211      	str	r2, [sp, #68]	; 0x44
 801d670:	7811      	ldrb	r1, [r2, #0]
 801d672:	292b      	cmp	r1, #43	; 0x2b
 801d674:	d04c      	beq.n	801d710 <_strtod_l+0xc0>
 801d676:	d839      	bhi.n	801d6ec <_strtod_l+0x9c>
 801d678:	290d      	cmp	r1, #13
 801d67a:	d833      	bhi.n	801d6e4 <_strtod_l+0x94>
 801d67c:	2908      	cmp	r1, #8
 801d67e:	d833      	bhi.n	801d6e8 <_strtod_l+0x98>
 801d680:	2900      	cmp	r1, #0
 801d682:	d03c      	beq.n	801d6fe <_strtod_l+0xae>
 801d684:	2200      	movs	r2, #0
 801d686:	9208      	str	r2, [sp, #32]
 801d688:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d68a:	7832      	ldrb	r2, [r6, #0]
 801d68c:	2a30      	cmp	r2, #48	; 0x30
 801d68e:	f040 80b8 	bne.w	801d802 <_strtod_l+0x1b2>
 801d692:	7872      	ldrb	r2, [r6, #1]
 801d694:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801d698:	2a58      	cmp	r2, #88	; 0x58
 801d69a:	d170      	bne.n	801d77e <_strtod_l+0x12e>
 801d69c:	9302      	str	r3, [sp, #8]
 801d69e:	9b08      	ldr	r3, [sp, #32]
 801d6a0:	9301      	str	r3, [sp, #4]
 801d6a2:	ab12      	add	r3, sp, #72	; 0x48
 801d6a4:	9300      	str	r3, [sp, #0]
 801d6a6:	4a91      	ldr	r2, [pc, #580]	; (801d8ec <_strtod_l+0x29c>)
 801d6a8:	ab13      	add	r3, sp, #76	; 0x4c
 801d6aa:	a911      	add	r1, sp, #68	; 0x44
 801d6ac:	4620      	mov	r0, r4
 801d6ae:	f001 fc87 	bl	801efc0 <__gethex>
 801d6b2:	f010 070f 	ands.w	r7, r0, #15
 801d6b6:	4605      	mov	r5, r0
 801d6b8:	d005      	beq.n	801d6c6 <_strtod_l+0x76>
 801d6ba:	2f06      	cmp	r7, #6
 801d6bc:	d12a      	bne.n	801d714 <_strtod_l+0xc4>
 801d6be:	3601      	adds	r6, #1
 801d6c0:	2300      	movs	r3, #0
 801d6c2:	9611      	str	r6, [sp, #68]	; 0x44
 801d6c4:	9308      	str	r3, [sp, #32]
 801d6c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d6c8:	2b00      	cmp	r3, #0
 801d6ca:	f040 8555 	bne.w	801e178 <_strtod_l+0xb28>
 801d6ce:	9b08      	ldr	r3, [sp, #32]
 801d6d0:	ec49 8b10 	vmov	d0, r8, r9
 801d6d4:	b1cb      	cbz	r3, 801d70a <_strtod_l+0xba>
 801d6d6:	eeb1 0b40 	vneg.f64	d0, d0
 801d6da:	b017      	add	sp, #92	; 0x5c
 801d6dc:	ecbd 8b0e 	vpop	{d8-d14}
 801d6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6e4:	2920      	cmp	r1, #32
 801d6e6:	d1cd      	bne.n	801d684 <_strtod_l+0x34>
 801d6e8:	3201      	adds	r2, #1
 801d6ea:	e7c0      	b.n	801d66e <_strtod_l+0x1e>
 801d6ec:	292d      	cmp	r1, #45	; 0x2d
 801d6ee:	d1c9      	bne.n	801d684 <_strtod_l+0x34>
 801d6f0:	2101      	movs	r1, #1
 801d6f2:	9108      	str	r1, [sp, #32]
 801d6f4:	1c51      	adds	r1, r2, #1
 801d6f6:	9111      	str	r1, [sp, #68]	; 0x44
 801d6f8:	7852      	ldrb	r2, [r2, #1]
 801d6fa:	2a00      	cmp	r2, #0
 801d6fc:	d1c4      	bne.n	801d688 <_strtod_l+0x38>
 801d6fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d700:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801d704:	2b00      	cmp	r3, #0
 801d706:	f040 8535 	bne.w	801e174 <_strtod_l+0xb24>
 801d70a:	ec49 8b10 	vmov	d0, r8, r9
 801d70e:	e7e4      	b.n	801d6da <_strtod_l+0x8a>
 801d710:	2100      	movs	r1, #0
 801d712:	e7ee      	b.n	801d6f2 <_strtod_l+0xa2>
 801d714:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d716:	b13a      	cbz	r2, 801d728 <_strtod_l+0xd8>
 801d718:	2135      	movs	r1, #53	; 0x35
 801d71a:	a814      	add	r0, sp, #80	; 0x50
 801d71c:	f7ff ff3a 	bl	801d594 <__copybits>
 801d720:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d722:	4620      	mov	r0, r4
 801d724:	f7ff fb10 	bl	801cd48 <_Bfree>
 801d728:	1e7b      	subs	r3, r7, #1
 801d72a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d72c:	2b04      	cmp	r3, #4
 801d72e:	d806      	bhi.n	801d73e <_strtod_l+0xee>
 801d730:	e8df f003 	tbb	[pc, r3]
 801d734:	201d0314 	.word	0x201d0314
 801d738:	14          	.byte	0x14
 801d739:	00          	.byte	0x00
 801d73a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801d73e:	05eb      	lsls	r3, r5, #23
 801d740:	bf48      	it	mi
 801d742:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801d746:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d74a:	0d1b      	lsrs	r3, r3, #20
 801d74c:	051b      	lsls	r3, r3, #20
 801d74e:	2b00      	cmp	r3, #0
 801d750:	d1b9      	bne.n	801d6c6 <_strtod_l+0x76>
 801d752:	f7fe fb79 	bl	801be48 <__errno>
 801d756:	2322      	movs	r3, #34	; 0x22
 801d758:	6003      	str	r3, [r0, #0]
 801d75a:	e7b4      	b.n	801d6c6 <_strtod_l+0x76>
 801d75c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801d760:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801d764:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801d768:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801d76c:	e7e7      	b.n	801d73e <_strtod_l+0xee>
 801d76e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801d8f4 <_strtod_l+0x2a4>
 801d772:	e7e4      	b.n	801d73e <_strtod_l+0xee>
 801d774:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801d778:	f04f 38ff 	mov.w	r8, #4294967295
 801d77c:	e7df      	b.n	801d73e <_strtod_l+0xee>
 801d77e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d780:	1c5a      	adds	r2, r3, #1
 801d782:	9211      	str	r2, [sp, #68]	; 0x44
 801d784:	785b      	ldrb	r3, [r3, #1]
 801d786:	2b30      	cmp	r3, #48	; 0x30
 801d788:	d0f9      	beq.n	801d77e <_strtod_l+0x12e>
 801d78a:	2b00      	cmp	r3, #0
 801d78c:	d09b      	beq.n	801d6c6 <_strtod_l+0x76>
 801d78e:	2301      	movs	r3, #1
 801d790:	9306      	str	r3, [sp, #24]
 801d792:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d794:	9309      	str	r3, [sp, #36]	; 0x24
 801d796:	2300      	movs	r3, #0
 801d798:	9305      	str	r3, [sp, #20]
 801d79a:	9307      	str	r3, [sp, #28]
 801d79c:	461e      	mov	r6, r3
 801d79e:	220a      	movs	r2, #10
 801d7a0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d7a2:	7805      	ldrb	r5, [r0, #0]
 801d7a4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801d7a8:	b2d9      	uxtb	r1, r3
 801d7aa:	2909      	cmp	r1, #9
 801d7ac:	d92b      	bls.n	801d806 <_strtod_l+0x1b6>
 801d7ae:	4950      	ldr	r1, [pc, #320]	; (801d8f0 <_strtod_l+0x2a0>)
 801d7b0:	2201      	movs	r2, #1
 801d7b2:	f001 fb3c 	bl	801ee2e <strncmp>
 801d7b6:	2800      	cmp	r0, #0
 801d7b8:	d035      	beq.n	801d826 <_strtod_l+0x1d6>
 801d7ba:	2000      	movs	r0, #0
 801d7bc:	462a      	mov	r2, r5
 801d7be:	4633      	mov	r3, r6
 801d7c0:	4683      	mov	fp, r0
 801d7c2:	4601      	mov	r1, r0
 801d7c4:	2a65      	cmp	r2, #101	; 0x65
 801d7c6:	d001      	beq.n	801d7cc <_strtod_l+0x17c>
 801d7c8:	2a45      	cmp	r2, #69	; 0x45
 801d7ca:	d118      	bne.n	801d7fe <_strtod_l+0x1ae>
 801d7cc:	b91b      	cbnz	r3, 801d7d6 <_strtod_l+0x186>
 801d7ce:	9b06      	ldr	r3, [sp, #24]
 801d7d0:	4303      	orrs	r3, r0
 801d7d2:	d094      	beq.n	801d6fe <_strtod_l+0xae>
 801d7d4:	2300      	movs	r3, #0
 801d7d6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801d7da:	f10a 0201 	add.w	r2, sl, #1
 801d7de:	9211      	str	r2, [sp, #68]	; 0x44
 801d7e0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801d7e4:	2a2b      	cmp	r2, #43	; 0x2b
 801d7e6:	d075      	beq.n	801d8d4 <_strtod_l+0x284>
 801d7e8:	2a2d      	cmp	r2, #45	; 0x2d
 801d7ea:	d07b      	beq.n	801d8e4 <_strtod_l+0x294>
 801d7ec:	f04f 0e00 	mov.w	lr, #0
 801d7f0:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801d7f4:	2d09      	cmp	r5, #9
 801d7f6:	f240 8083 	bls.w	801d900 <_strtod_l+0x2b0>
 801d7fa:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801d7fe:	2500      	movs	r5, #0
 801d800:	e09e      	b.n	801d940 <_strtod_l+0x2f0>
 801d802:	2300      	movs	r3, #0
 801d804:	e7c4      	b.n	801d790 <_strtod_l+0x140>
 801d806:	2e08      	cmp	r6, #8
 801d808:	bfd5      	itete	le
 801d80a:	9907      	ldrle	r1, [sp, #28]
 801d80c:	9905      	ldrgt	r1, [sp, #20]
 801d80e:	fb02 3301 	mlale	r3, r2, r1, r3
 801d812:	fb02 3301 	mlagt	r3, r2, r1, r3
 801d816:	f100 0001 	add.w	r0, r0, #1
 801d81a:	bfd4      	ite	le
 801d81c:	9307      	strle	r3, [sp, #28]
 801d81e:	9305      	strgt	r3, [sp, #20]
 801d820:	3601      	adds	r6, #1
 801d822:	9011      	str	r0, [sp, #68]	; 0x44
 801d824:	e7bc      	b.n	801d7a0 <_strtod_l+0x150>
 801d826:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d828:	1c5a      	adds	r2, r3, #1
 801d82a:	9211      	str	r2, [sp, #68]	; 0x44
 801d82c:	785a      	ldrb	r2, [r3, #1]
 801d82e:	b3ae      	cbz	r6, 801d89c <_strtod_l+0x24c>
 801d830:	4683      	mov	fp, r0
 801d832:	4633      	mov	r3, r6
 801d834:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801d838:	2909      	cmp	r1, #9
 801d83a:	d912      	bls.n	801d862 <_strtod_l+0x212>
 801d83c:	2101      	movs	r1, #1
 801d83e:	e7c1      	b.n	801d7c4 <_strtod_l+0x174>
 801d840:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d842:	1c5a      	adds	r2, r3, #1
 801d844:	9211      	str	r2, [sp, #68]	; 0x44
 801d846:	785a      	ldrb	r2, [r3, #1]
 801d848:	3001      	adds	r0, #1
 801d84a:	2a30      	cmp	r2, #48	; 0x30
 801d84c:	d0f8      	beq.n	801d840 <_strtod_l+0x1f0>
 801d84e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801d852:	2b08      	cmp	r3, #8
 801d854:	f200 8495 	bhi.w	801e182 <_strtod_l+0xb32>
 801d858:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d85a:	9309      	str	r3, [sp, #36]	; 0x24
 801d85c:	4683      	mov	fp, r0
 801d85e:	2000      	movs	r0, #0
 801d860:	4603      	mov	r3, r0
 801d862:	3a30      	subs	r2, #48	; 0x30
 801d864:	f100 0101 	add.w	r1, r0, #1
 801d868:	d012      	beq.n	801d890 <_strtod_l+0x240>
 801d86a:	448b      	add	fp, r1
 801d86c:	eb00 0c03 	add.w	ip, r0, r3
 801d870:	4619      	mov	r1, r3
 801d872:	250a      	movs	r5, #10
 801d874:	4561      	cmp	r1, ip
 801d876:	d113      	bne.n	801d8a0 <_strtod_l+0x250>
 801d878:	1819      	adds	r1, r3, r0
 801d87a:	2908      	cmp	r1, #8
 801d87c:	f103 0301 	add.w	r3, r3, #1
 801d880:	4403      	add	r3, r0
 801d882:	dc1b      	bgt.n	801d8bc <_strtod_l+0x26c>
 801d884:	9807      	ldr	r0, [sp, #28]
 801d886:	210a      	movs	r1, #10
 801d888:	fb01 2200 	mla	r2, r1, r0, r2
 801d88c:	9207      	str	r2, [sp, #28]
 801d88e:	2100      	movs	r1, #0
 801d890:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d892:	1c50      	adds	r0, r2, #1
 801d894:	9011      	str	r0, [sp, #68]	; 0x44
 801d896:	7852      	ldrb	r2, [r2, #1]
 801d898:	4608      	mov	r0, r1
 801d89a:	e7cb      	b.n	801d834 <_strtod_l+0x1e4>
 801d89c:	4630      	mov	r0, r6
 801d89e:	e7d4      	b.n	801d84a <_strtod_l+0x1fa>
 801d8a0:	2908      	cmp	r1, #8
 801d8a2:	f101 0101 	add.w	r1, r1, #1
 801d8a6:	dc03      	bgt.n	801d8b0 <_strtod_l+0x260>
 801d8a8:	9f07      	ldr	r7, [sp, #28]
 801d8aa:	436f      	muls	r7, r5
 801d8ac:	9707      	str	r7, [sp, #28]
 801d8ae:	e7e1      	b.n	801d874 <_strtod_l+0x224>
 801d8b0:	2910      	cmp	r1, #16
 801d8b2:	bfde      	ittt	le
 801d8b4:	9f05      	ldrle	r7, [sp, #20]
 801d8b6:	436f      	mulle	r7, r5
 801d8b8:	9705      	strle	r7, [sp, #20]
 801d8ba:	e7db      	b.n	801d874 <_strtod_l+0x224>
 801d8bc:	2b10      	cmp	r3, #16
 801d8be:	bfdf      	itttt	le
 801d8c0:	9805      	ldrle	r0, [sp, #20]
 801d8c2:	210a      	movle	r1, #10
 801d8c4:	fb01 2200 	mlale	r2, r1, r0, r2
 801d8c8:	9205      	strle	r2, [sp, #20]
 801d8ca:	e7e0      	b.n	801d88e <_strtod_l+0x23e>
 801d8cc:	f04f 0b00 	mov.w	fp, #0
 801d8d0:	2101      	movs	r1, #1
 801d8d2:	e77c      	b.n	801d7ce <_strtod_l+0x17e>
 801d8d4:	f04f 0e00 	mov.w	lr, #0
 801d8d8:	f10a 0202 	add.w	r2, sl, #2
 801d8dc:	9211      	str	r2, [sp, #68]	; 0x44
 801d8de:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801d8e2:	e785      	b.n	801d7f0 <_strtod_l+0x1a0>
 801d8e4:	f04f 0e01 	mov.w	lr, #1
 801d8e8:	e7f6      	b.n	801d8d8 <_strtod_l+0x288>
 801d8ea:	bf00      	nop
 801d8ec:	08020668 	.word	0x08020668
 801d8f0:	08020664 	.word	0x08020664
 801d8f4:	7ff00000 	.word	0x7ff00000
 801d8f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d8fa:	1c55      	adds	r5, r2, #1
 801d8fc:	9511      	str	r5, [sp, #68]	; 0x44
 801d8fe:	7852      	ldrb	r2, [r2, #1]
 801d900:	2a30      	cmp	r2, #48	; 0x30
 801d902:	d0f9      	beq.n	801d8f8 <_strtod_l+0x2a8>
 801d904:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801d908:	2d08      	cmp	r5, #8
 801d90a:	f63f af78 	bhi.w	801d7fe <_strtod_l+0x1ae>
 801d90e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801d912:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d914:	920a      	str	r2, [sp, #40]	; 0x28
 801d916:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d918:	1c55      	adds	r5, r2, #1
 801d91a:	9511      	str	r5, [sp, #68]	; 0x44
 801d91c:	7852      	ldrb	r2, [r2, #1]
 801d91e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801d922:	2f09      	cmp	r7, #9
 801d924:	d937      	bls.n	801d996 <_strtod_l+0x346>
 801d926:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801d928:	1bed      	subs	r5, r5, r7
 801d92a:	2d08      	cmp	r5, #8
 801d92c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801d930:	dc02      	bgt.n	801d938 <_strtod_l+0x2e8>
 801d932:	4565      	cmp	r5, ip
 801d934:	bfa8      	it	ge
 801d936:	4665      	movge	r5, ip
 801d938:	f1be 0f00 	cmp.w	lr, #0
 801d93c:	d000      	beq.n	801d940 <_strtod_l+0x2f0>
 801d93e:	426d      	negs	r5, r5
 801d940:	2b00      	cmp	r3, #0
 801d942:	d14d      	bne.n	801d9e0 <_strtod_l+0x390>
 801d944:	9b06      	ldr	r3, [sp, #24]
 801d946:	4303      	orrs	r3, r0
 801d948:	f47f aebd 	bne.w	801d6c6 <_strtod_l+0x76>
 801d94c:	2900      	cmp	r1, #0
 801d94e:	f47f aed6 	bne.w	801d6fe <_strtod_l+0xae>
 801d952:	2a69      	cmp	r2, #105	; 0x69
 801d954:	d027      	beq.n	801d9a6 <_strtod_l+0x356>
 801d956:	dc24      	bgt.n	801d9a2 <_strtod_l+0x352>
 801d958:	2a49      	cmp	r2, #73	; 0x49
 801d95a:	d024      	beq.n	801d9a6 <_strtod_l+0x356>
 801d95c:	2a4e      	cmp	r2, #78	; 0x4e
 801d95e:	f47f aece 	bne.w	801d6fe <_strtod_l+0xae>
 801d962:	4995      	ldr	r1, [pc, #596]	; (801dbb8 <_strtod_l+0x568>)
 801d964:	a811      	add	r0, sp, #68	; 0x44
 801d966:	f001 fd6b 	bl	801f440 <__match>
 801d96a:	2800      	cmp	r0, #0
 801d96c:	f43f aec7 	beq.w	801d6fe <_strtod_l+0xae>
 801d970:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d972:	781b      	ldrb	r3, [r3, #0]
 801d974:	2b28      	cmp	r3, #40	; 0x28
 801d976:	d12d      	bne.n	801d9d4 <_strtod_l+0x384>
 801d978:	4990      	ldr	r1, [pc, #576]	; (801dbbc <_strtod_l+0x56c>)
 801d97a:	aa14      	add	r2, sp, #80	; 0x50
 801d97c:	a811      	add	r0, sp, #68	; 0x44
 801d97e:	f001 fd73 	bl	801f468 <__hexnan>
 801d982:	2805      	cmp	r0, #5
 801d984:	d126      	bne.n	801d9d4 <_strtod_l+0x384>
 801d986:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d988:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801d98c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801d990:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801d994:	e697      	b.n	801d6c6 <_strtod_l+0x76>
 801d996:	250a      	movs	r5, #10
 801d998:	fb05 2c0c 	mla	ip, r5, ip, r2
 801d99c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801d9a0:	e7b9      	b.n	801d916 <_strtod_l+0x2c6>
 801d9a2:	2a6e      	cmp	r2, #110	; 0x6e
 801d9a4:	e7db      	b.n	801d95e <_strtod_l+0x30e>
 801d9a6:	4986      	ldr	r1, [pc, #536]	; (801dbc0 <_strtod_l+0x570>)
 801d9a8:	a811      	add	r0, sp, #68	; 0x44
 801d9aa:	f001 fd49 	bl	801f440 <__match>
 801d9ae:	2800      	cmp	r0, #0
 801d9b0:	f43f aea5 	beq.w	801d6fe <_strtod_l+0xae>
 801d9b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d9b6:	4983      	ldr	r1, [pc, #524]	; (801dbc4 <_strtod_l+0x574>)
 801d9b8:	3b01      	subs	r3, #1
 801d9ba:	a811      	add	r0, sp, #68	; 0x44
 801d9bc:	9311      	str	r3, [sp, #68]	; 0x44
 801d9be:	f001 fd3f 	bl	801f440 <__match>
 801d9c2:	b910      	cbnz	r0, 801d9ca <_strtod_l+0x37a>
 801d9c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d9c6:	3301      	adds	r3, #1
 801d9c8:	9311      	str	r3, [sp, #68]	; 0x44
 801d9ca:	f8df 920c 	ldr.w	r9, [pc, #524]	; 801dbd8 <_strtod_l+0x588>
 801d9ce:	f04f 0800 	mov.w	r8, #0
 801d9d2:	e678      	b.n	801d6c6 <_strtod_l+0x76>
 801d9d4:	487c      	ldr	r0, [pc, #496]	; (801dbc8 <_strtod_l+0x578>)
 801d9d6:	f001 fa4f 	bl	801ee78 <nan>
 801d9da:	ec59 8b10 	vmov	r8, r9, d0
 801d9de:	e672      	b.n	801d6c6 <_strtod_l+0x76>
 801d9e0:	eddd 7a07 	vldr	s15, [sp, #28]
 801d9e4:	eba5 020b 	sub.w	r2, r5, fp
 801d9e8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801d9ec:	2e00      	cmp	r6, #0
 801d9ee:	bf08      	it	eq
 801d9f0:	461e      	moveq	r6, r3
 801d9f2:	2b10      	cmp	r3, #16
 801d9f4:	9206      	str	r2, [sp, #24]
 801d9f6:	461a      	mov	r2, r3
 801d9f8:	bfa8      	it	ge
 801d9fa:	2210      	movge	r2, #16
 801d9fc:	2b09      	cmp	r3, #9
 801d9fe:	ec59 8b17 	vmov	r8, r9, d7
 801da02:	dd0c      	ble.n	801da1e <_strtod_l+0x3ce>
 801da04:	4971      	ldr	r1, [pc, #452]	; (801dbcc <_strtod_l+0x57c>)
 801da06:	eddd 6a05 	vldr	s13, [sp, #20]
 801da0a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801da0e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801da12:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801da16:	eea7 6b05 	vfma.f64	d6, d7, d5
 801da1a:	ec59 8b16 	vmov	r8, r9, d6
 801da1e:	2b0f      	cmp	r3, #15
 801da20:	dc37      	bgt.n	801da92 <_strtod_l+0x442>
 801da22:	9906      	ldr	r1, [sp, #24]
 801da24:	2900      	cmp	r1, #0
 801da26:	f43f ae4e 	beq.w	801d6c6 <_strtod_l+0x76>
 801da2a:	dd23      	ble.n	801da74 <_strtod_l+0x424>
 801da2c:	2916      	cmp	r1, #22
 801da2e:	dc0b      	bgt.n	801da48 <_strtod_l+0x3f8>
 801da30:	4b66      	ldr	r3, [pc, #408]	; (801dbcc <_strtod_l+0x57c>)
 801da32:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801da36:	ed93 7b00 	vldr	d7, [r3]
 801da3a:	ec49 8b16 	vmov	d6, r8, r9
 801da3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801da42:	ec59 8b17 	vmov	r8, r9, d7
 801da46:	e63e      	b.n	801d6c6 <_strtod_l+0x76>
 801da48:	9806      	ldr	r0, [sp, #24]
 801da4a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801da4e:	4281      	cmp	r1, r0
 801da50:	db1f      	blt.n	801da92 <_strtod_l+0x442>
 801da52:	4a5e      	ldr	r2, [pc, #376]	; (801dbcc <_strtod_l+0x57c>)
 801da54:	f1c3 030f 	rsb	r3, r3, #15
 801da58:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801da5c:	ed91 7b00 	vldr	d7, [r1]
 801da60:	ec49 8b16 	vmov	d6, r8, r9
 801da64:	1ac3      	subs	r3, r0, r3
 801da66:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801da6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801da6e:	ed92 6b00 	vldr	d6, [r2]
 801da72:	e7e4      	b.n	801da3e <_strtod_l+0x3ee>
 801da74:	9906      	ldr	r1, [sp, #24]
 801da76:	3116      	adds	r1, #22
 801da78:	db0b      	blt.n	801da92 <_strtod_l+0x442>
 801da7a:	4b54      	ldr	r3, [pc, #336]	; (801dbcc <_strtod_l+0x57c>)
 801da7c:	ebab 0505 	sub.w	r5, fp, r5
 801da80:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801da84:	ed95 7b00 	vldr	d7, [r5]
 801da88:	ec49 8b16 	vmov	d6, r8, r9
 801da8c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801da90:	e7d7      	b.n	801da42 <_strtod_l+0x3f2>
 801da92:	9906      	ldr	r1, [sp, #24]
 801da94:	1a9a      	subs	r2, r3, r2
 801da96:	440a      	add	r2, r1
 801da98:	2a00      	cmp	r2, #0
 801da9a:	dd6e      	ble.n	801db7a <_strtod_l+0x52a>
 801da9c:	f012 000f 	ands.w	r0, r2, #15
 801daa0:	d00a      	beq.n	801dab8 <_strtod_l+0x468>
 801daa2:	494a      	ldr	r1, [pc, #296]	; (801dbcc <_strtod_l+0x57c>)
 801daa4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801daa8:	ed91 7b00 	vldr	d7, [r1]
 801daac:	ec49 8b16 	vmov	d6, r8, r9
 801dab0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dab4:	ec59 8b17 	vmov	r8, r9, d7
 801dab8:	f032 020f 	bics.w	r2, r2, #15
 801dabc:	d04e      	beq.n	801db5c <_strtod_l+0x50c>
 801dabe:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801dac2:	dd22      	ble.n	801db0a <_strtod_l+0x4ba>
 801dac4:	2500      	movs	r5, #0
 801dac6:	462e      	mov	r6, r5
 801dac8:	9507      	str	r5, [sp, #28]
 801daca:	462f      	mov	r7, r5
 801dacc:	2322      	movs	r3, #34	; 0x22
 801dace:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801dbd8 <_strtod_l+0x588>
 801dad2:	6023      	str	r3, [r4, #0]
 801dad4:	f04f 0800 	mov.w	r8, #0
 801dad8:	9b07      	ldr	r3, [sp, #28]
 801dada:	2b00      	cmp	r3, #0
 801dadc:	f43f adf3 	beq.w	801d6c6 <_strtod_l+0x76>
 801dae0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dae2:	4620      	mov	r0, r4
 801dae4:	f7ff f930 	bl	801cd48 <_Bfree>
 801dae8:	4639      	mov	r1, r7
 801daea:	4620      	mov	r0, r4
 801daec:	f7ff f92c 	bl	801cd48 <_Bfree>
 801daf0:	4631      	mov	r1, r6
 801daf2:	4620      	mov	r0, r4
 801daf4:	f7ff f928 	bl	801cd48 <_Bfree>
 801daf8:	9907      	ldr	r1, [sp, #28]
 801dafa:	4620      	mov	r0, r4
 801dafc:	f7ff f924 	bl	801cd48 <_Bfree>
 801db00:	4629      	mov	r1, r5
 801db02:	4620      	mov	r0, r4
 801db04:	f7ff f920 	bl	801cd48 <_Bfree>
 801db08:	e5dd      	b.n	801d6c6 <_strtod_l+0x76>
 801db0a:	2000      	movs	r0, #0
 801db0c:	ec49 8b17 	vmov	d7, r8, r9
 801db10:	4f2f      	ldr	r7, [pc, #188]	; (801dbd0 <_strtod_l+0x580>)
 801db12:	1112      	asrs	r2, r2, #4
 801db14:	4601      	mov	r1, r0
 801db16:	2a01      	cmp	r2, #1
 801db18:	dc23      	bgt.n	801db62 <_strtod_l+0x512>
 801db1a:	b108      	cbz	r0, 801db20 <_strtod_l+0x4d0>
 801db1c:	ec59 8b17 	vmov	r8, r9, d7
 801db20:	4a2b      	ldr	r2, [pc, #172]	; (801dbd0 <_strtod_l+0x580>)
 801db22:	482c      	ldr	r0, [pc, #176]	; (801dbd4 <_strtod_l+0x584>)
 801db24:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801db28:	ed92 7b00 	vldr	d7, [r2]
 801db2c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801db30:	ec49 8b16 	vmov	d6, r8, r9
 801db34:	4a28      	ldr	r2, [pc, #160]	; (801dbd8 <_strtod_l+0x588>)
 801db36:	ee27 7b06 	vmul.f64	d7, d7, d6
 801db3a:	ee17 1a90 	vmov	r1, s15
 801db3e:	400a      	ands	r2, r1
 801db40:	4282      	cmp	r2, r0
 801db42:	ec59 8b17 	vmov	r8, r9, d7
 801db46:	d8bd      	bhi.n	801dac4 <_strtod_l+0x474>
 801db48:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801db4c:	4282      	cmp	r2, r0
 801db4e:	bf86      	itte	hi
 801db50:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801dbdc <_strtod_l+0x58c>
 801db54:	f04f 38ff 	movhi.w	r8, #4294967295
 801db58:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801db5c:	2200      	movs	r2, #0
 801db5e:	9205      	str	r2, [sp, #20]
 801db60:	e076      	b.n	801dc50 <_strtod_l+0x600>
 801db62:	f012 0f01 	tst.w	r2, #1
 801db66:	d004      	beq.n	801db72 <_strtod_l+0x522>
 801db68:	ed97 6b00 	vldr	d6, [r7]
 801db6c:	2001      	movs	r0, #1
 801db6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801db72:	3101      	adds	r1, #1
 801db74:	1052      	asrs	r2, r2, #1
 801db76:	3708      	adds	r7, #8
 801db78:	e7cd      	b.n	801db16 <_strtod_l+0x4c6>
 801db7a:	d0ef      	beq.n	801db5c <_strtod_l+0x50c>
 801db7c:	4252      	negs	r2, r2
 801db7e:	f012 000f 	ands.w	r0, r2, #15
 801db82:	d00a      	beq.n	801db9a <_strtod_l+0x54a>
 801db84:	4911      	ldr	r1, [pc, #68]	; (801dbcc <_strtod_l+0x57c>)
 801db86:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801db8a:	ed91 7b00 	vldr	d7, [r1]
 801db8e:	ec49 8b16 	vmov	d6, r8, r9
 801db92:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801db96:	ec59 8b17 	vmov	r8, r9, d7
 801db9a:	1112      	asrs	r2, r2, #4
 801db9c:	d0de      	beq.n	801db5c <_strtod_l+0x50c>
 801db9e:	2a1f      	cmp	r2, #31
 801dba0:	dd1e      	ble.n	801dbe0 <_strtod_l+0x590>
 801dba2:	2500      	movs	r5, #0
 801dba4:	462e      	mov	r6, r5
 801dba6:	9507      	str	r5, [sp, #28]
 801dba8:	462f      	mov	r7, r5
 801dbaa:	2322      	movs	r3, #34	; 0x22
 801dbac:	f04f 0800 	mov.w	r8, #0
 801dbb0:	f04f 0900 	mov.w	r9, #0
 801dbb4:	6023      	str	r3, [r4, #0]
 801dbb6:	e78f      	b.n	801dad8 <_strtod_l+0x488>
 801dbb8:	08020451 	.word	0x08020451
 801dbbc:	0802067c 	.word	0x0802067c
 801dbc0:	08020449 	.word	0x08020449
 801dbc4:	0802047e 	.word	0x0802047e
 801dbc8:	08020828 	.word	0x08020828
 801dbcc:	08020590 	.word	0x08020590
 801dbd0:	08020568 	.word	0x08020568
 801dbd4:	7ca00000 	.word	0x7ca00000
 801dbd8:	7ff00000 	.word	0x7ff00000
 801dbdc:	7fefffff 	.word	0x7fefffff
 801dbe0:	f012 0110 	ands.w	r1, r2, #16
 801dbe4:	bf18      	it	ne
 801dbe6:	216a      	movne	r1, #106	; 0x6a
 801dbe8:	9105      	str	r1, [sp, #20]
 801dbea:	ec49 8b17 	vmov	d7, r8, r9
 801dbee:	49be      	ldr	r1, [pc, #760]	; (801dee8 <_strtod_l+0x898>)
 801dbf0:	2000      	movs	r0, #0
 801dbf2:	07d7      	lsls	r7, r2, #31
 801dbf4:	d504      	bpl.n	801dc00 <_strtod_l+0x5b0>
 801dbf6:	ed91 6b00 	vldr	d6, [r1]
 801dbfa:	2001      	movs	r0, #1
 801dbfc:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dc00:	1052      	asrs	r2, r2, #1
 801dc02:	f101 0108 	add.w	r1, r1, #8
 801dc06:	d1f4      	bne.n	801dbf2 <_strtod_l+0x5a2>
 801dc08:	b108      	cbz	r0, 801dc0e <_strtod_l+0x5be>
 801dc0a:	ec59 8b17 	vmov	r8, r9, d7
 801dc0e:	9a05      	ldr	r2, [sp, #20]
 801dc10:	b1ba      	cbz	r2, 801dc42 <_strtod_l+0x5f2>
 801dc12:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801dc16:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801dc1a:	2a00      	cmp	r2, #0
 801dc1c:	4648      	mov	r0, r9
 801dc1e:	dd10      	ble.n	801dc42 <_strtod_l+0x5f2>
 801dc20:	2a1f      	cmp	r2, #31
 801dc22:	f340 812c 	ble.w	801de7e <_strtod_l+0x82e>
 801dc26:	2a34      	cmp	r2, #52	; 0x34
 801dc28:	bfde      	ittt	le
 801dc2a:	f04f 32ff 	movle.w	r2, #4294967295
 801dc2e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801dc32:	408a      	lslle	r2, r1
 801dc34:	f04f 0800 	mov.w	r8, #0
 801dc38:	bfcc      	ite	gt
 801dc3a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801dc3e:	ea02 0900 	andle.w	r9, r2, r0
 801dc42:	ec49 8b17 	vmov	d7, r8, r9
 801dc46:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801dc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc4e:	d0a8      	beq.n	801dba2 <_strtod_l+0x552>
 801dc50:	9a07      	ldr	r2, [sp, #28]
 801dc52:	9200      	str	r2, [sp, #0]
 801dc54:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dc56:	4632      	mov	r2, r6
 801dc58:	4620      	mov	r0, r4
 801dc5a:	f7ff f8dd 	bl	801ce18 <__s2b>
 801dc5e:	9007      	str	r0, [sp, #28]
 801dc60:	2800      	cmp	r0, #0
 801dc62:	f43f af2f 	beq.w	801dac4 <_strtod_l+0x474>
 801dc66:	9a06      	ldr	r2, [sp, #24]
 801dc68:	2a00      	cmp	r2, #0
 801dc6a:	ebab 0305 	sub.w	r3, fp, r5
 801dc6e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801dec8 <_strtod_l+0x878>
 801dc72:	bfa8      	it	ge
 801dc74:	2300      	movge	r3, #0
 801dc76:	ed9f ab96 	vldr	d10, [pc, #600]	; 801ded0 <_strtod_l+0x880>
 801dc7a:	ed9f bb97 	vldr	d11, [pc, #604]	; 801ded8 <_strtod_l+0x888>
 801dc7e:	9309      	str	r3, [sp, #36]	; 0x24
 801dc80:	2500      	movs	r5, #0
 801dc82:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801dc86:	930c      	str	r3, [sp, #48]	; 0x30
 801dc88:	462e      	mov	r6, r5
 801dc8a:	9b07      	ldr	r3, [sp, #28]
 801dc8c:	4620      	mov	r0, r4
 801dc8e:	6859      	ldr	r1, [r3, #4]
 801dc90:	f7ff f81a 	bl	801ccc8 <_Balloc>
 801dc94:	4607      	mov	r7, r0
 801dc96:	2800      	cmp	r0, #0
 801dc98:	f43f af18 	beq.w	801dacc <_strtod_l+0x47c>
 801dc9c:	9b07      	ldr	r3, [sp, #28]
 801dc9e:	691a      	ldr	r2, [r3, #16]
 801dca0:	3202      	adds	r2, #2
 801dca2:	f103 010c 	add.w	r1, r3, #12
 801dca6:	0092      	lsls	r2, r2, #2
 801dca8:	300c      	adds	r0, #12
 801dcaa:	f7fe f902 	bl	801beb2 <memcpy>
 801dcae:	ec49 8b10 	vmov	d0, r8, r9
 801dcb2:	aa14      	add	r2, sp, #80	; 0x50
 801dcb4:	a913      	add	r1, sp, #76	; 0x4c
 801dcb6:	4620      	mov	r0, r4
 801dcb8:	f7ff fbe2 	bl	801d480 <__d2b>
 801dcbc:	ec49 8b18 	vmov	d8, r8, r9
 801dcc0:	9012      	str	r0, [sp, #72]	; 0x48
 801dcc2:	2800      	cmp	r0, #0
 801dcc4:	f43f af02 	beq.w	801dacc <_strtod_l+0x47c>
 801dcc8:	2101      	movs	r1, #1
 801dcca:	4620      	mov	r0, r4
 801dccc:	f7ff f93c 	bl	801cf48 <__i2b>
 801dcd0:	4606      	mov	r6, r0
 801dcd2:	2800      	cmp	r0, #0
 801dcd4:	f43f aefa 	beq.w	801dacc <_strtod_l+0x47c>
 801dcd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dcda:	9914      	ldr	r1, [sp, #80]	; 0x50
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	bfab      	itete	ge
 801dce0:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801dce2:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801dce4:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801dce8:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801dcec:	bfac      	ite	ge
 801dcee:	eb03 0b02 	addge.w	fp, r3, r2
 801dcf2:	eba2 0a03 	sublt.w	sl, r2, r3
 801dcf6:	9a05      	ldr	r2, [sp, #20]
 801dcf8:	1a9b      	subs	r3, r3, r2
 801dcfa:	440b      	add	r3, r1
 801dcfc:	4a7b      	ldr	r2, [pc, #492]	; (801deec <_strtod_l+0x89c>)
 801dcfe:	3b01      	subs	r3, #1
 801dd00:	4293      	cmp	r3, r2
 801dd02:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801dd06:	f280 80cd 	bge.w	801dea4 <_strtod_l+0x854>
 801dd0a:	1ad2      	subs	r2, r2, r3
 801dd0c:	2a1f      	cmp	r2, #31
 801dd0e:	eba1 0102 	sub.w	r1, r1, r2
 801dd12:	f04f 0001 	mov.w	r0, #1
 801dd16:	f300 80b9 	bgt.w	801de8c <_strtod_l+0x83c>
 801dd1a:	fa00 f302 	lsl.w	r3, r0, r2
 801dd1e:	930b      	str	r3, [sp, #44]	; 0x2c
 801dd20:	2300      	movs	r3, #0
 801dd22:	930a      	str	r3, [sp, #40]	; 0x28
 801dd24:	eb0b 0301 	add.w	r3, fp, r1
 801dd28:	9a05      	ldr	r2, [sp, #20]
 801dd2a:	459b      	cmp	fp, r3
 801dd2c:	448a      	add	sl, r1
 801dd2e:	4492      	add	sl, r2
 801dd30:	465a      	mov	r2, fp
 801dd32:	bfa8      	it	ge
 801dd34:	461a      	movge	r2, r3
 801dd36:	4552      	cmp	r2, sl
 801dd38:	bfa8      	it	ge
 801dd3a:	4652      	movge	r2, sl
 801dd3c:	2a00      	cmp	r2, #0
 801dd3e:	bfc2      	ittt	gt
 801dd40:	1a9b      	subgt	r3, r3, r2
 801dd42:	ebaa 0a02 	subgt.w	sl, sl, r2
 801dd46:	ebab 0b02 	subgt.w	fp, fp, r2
 801dd4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dd4c:	2a00      	cmp	r2, #0
 801dd4e:	dd18      	ble.n	801dd82 <_strtod_l+0x732>
 801dd50:	4631      	mov	r1, r6
 801dd52:	4620      	mov	r0, r4
 801dd54:	930f      	str	r3, [sp, #60]	; 0x3c
 801dd56:	f7ff f9b7 	bl	801d0c8 <__pow5mult>
 801dd5a:	4606      	mov	r6, r0
 801dd5c:	2800      	cmp	r0, #0
 801dd5e:	f43f aeb5 	beq.w	801dacc <_strtod_l+0x47c>
 801dd62:	4601      	mov	r1, r0
 801dd64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dd66:	4620      	mov	r0, r4
 801dd68:	f7ff f904 	bl	801cf74 <__multiply>
 801dd6c:	900e      	str	r0, [sp, #56]	; 0x38
 801dd6e:	2800      	cmp	r0, #0
 801dd70:	f43f aeac 	beq.w	801dacc <_strtod_l+0x47c>
 801dd74:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dd76:	4620      	mov	r0, r4
 801dd78:	f7fe ffe6 	bl	801cd48 <_Bfree>
 801dd7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dd7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dd80:	9212      	str	r2, [sp, #72]	; 0x48
 801dd82:	2b00      	cmp	r3, #0
 801dd84:	f300 8093 	bgt.w	801deae <_strtod_l+0x85e>
 801dd88:	9b06      	ldr	r3, [sp, #24]
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	dd08      	ble.n	801dda0 <_strtod_l+0x750>
 801dd8e:	4639      	mov	r1, r7
 801dd90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dd92:	4620      	mov	r0, r4
 801dd94:	f7ff f998 	bl	801d0c8 <__pow5mult>
 801dd98:	4607      	mov	r7, r0
 801dd9a:	2800      	cmp	r0, #0
 801dd9c:	f43f ae96 	beq.w	801dacc <_strtod_l+0x47c>
 801dda0:	f1ba 0f00 	cmp.w	sl, #0
 801dda4:	dd08      	ble.n	801ddb8 <_strtod_l+0x768>
 801dda6:	4639      	mov	r1, r7
 801dda8:	4652      	mov	r2, sl
 801ddaa:	4620      	mov	r0, r4
 801ddac:	f7ff f9e6 	bl	801d17c <__lshift>
 801ddb0:	4607      	mov	r7, r0
 801ddb2:	2800      	cmp	r0, #0
 801ddb4:	f43f ae8a 	beq.w	801dacc <_strtod_l+0x47c>
 801ddb8:	f1bb 0f00 	cmp.w	fp, #0
 801ddbc:	dd08      	ble.n	801ddd0 <_strtod_l+0x780>
 801ddbe:	4631      	mov	r1, r6
 801ddc0:	465a      	mov	r2, fp
 801ddc2:	4620      	mov	r0, r4
 801ddc4:	f7ff f9da 	bl	801d17c <__lshift>
 801ddc8:	4606      	mov	r6, r0
 801ddca:	2800      	cmp	r0, #0
 801ddcc:	f43f ae7e 	beq.w	801dacc <_strtod_l+0x47c>
 801ddd0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ddd2:	463a      	mov	r2, r7
 801ddd4:	4620      	mov	r0, r4
 801ddd6:	f7ff fa59 	bl	801d28c <__mdiff>
 801ddda:	4605      	mov	r5, r0
 801dddc:	2800      	cmp	r0, #0
 801ddde:	f43f ae75 	beq.w	801dacc <_strtod_l+0x47c>
 801dde2:	2300      	movs	r3, #0
 801dde4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801dde8:	60c3      	str	r3, [r0, #12]
 801ddea:	4631      	mov	r1, r6
 801ddec:	f7ff fa32 	bl	801d254 <__mcmp>
 801ddf0:	2800      	cmp	r0, #0
 801ddf2:	da7f      	bge.n	801def4 <_strtod_l+0x8a4>
 801ddf4:	ea5a 0a08 	orrs.w	sl, sl, r8
 801ddf8:	f040 80a5 	bne.w	801df46 <_strtod_l+0x8f6>
 801ddfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801de00:	2b00      	cmp	r3, #0
 801de02:	f040 80a0 	bne.w	801df46 <_strtod_l+0x8f6>
 801de06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801de0a:	0d1b      	lsrs	r3, r3, #20
 801de0c:	051b      	lsls	r3, r3, #20
 801de0e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801de12:	f240 8098 	bls.w	801df46 <_strtod_l+0x8f6>
 801de16:	696b      	ldr	r3, [r5, #20]
 801de18:	b91b      	cbnz	r3, 801de22 <_strtod_l+0x7d2>
 801de1a:	692b      	ldr	r3, [r5, #16]
 801de1c:	2b01      	cmp	r3, #1
 801de1e:	f340 8092 	ble.w	801df46 <_strtod_l+0x8f6>
 801de22:	4629      	mov	r1, r5
 801de24:	2201      	movs	r2, #1
 801de26:	4620      	mov	r0, r4
 801de28:	f7ff f9a8 	bl	801d17c <__lshift>
 801de2c:	4631      	mov	r1, r6
 801de2e:	4605      	mov	r5, r0
 801de30:	f7ff fa10 	bl	801d254 <__mcmp>
 801de34:	2800      	cmp	r0, #0
 801de36:	f340 8086 	ble.w	801df46 <_strtod_l+0x8f6>
 801de3a:	9905      	ldr	r1, [sp, #20]
 801de3c:	4a2c      	ldr	r2, [pc, #176]	; (801def0 <_strtod_l+0x8a0>)
 801de3e:	464b      	mov	r3, r9
 801de40:	2900      	cmp	r1, #0
 801de42:	f000 809f 	beq.w	801df84 <_strtod_l+0x934>
 801de46:	ea02 0109 	and.w	r1, r2, r9
 801de4a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801de4e:	f300 8099 	bgt.w	801df84 <_strtod_l+0x934>
 801de52:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801de56:	f77f aea8 	ble.w	801dbaa <_strtod_l+0x55a>
 801de5a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801dee0 <_strtod_l+0x890>
 801de5e:	ec49 8b16 	vmov	d6, r8, r9
 801de62:	4b23      	ldr	r3, [pc, #140]	; (801def0 <_strtod_l+0x8a0>)
 801de64:	ee26 7b07 	vmul.f64	d7, d6, d7
 801de68:	ee17 2a90 	vmov	r2, s15
 801de6c:	4013      	ands	r3, r2
 801de6e:	ec59 8b17 	vmov	r8, r9, d7
 801de72:	2b00      	cmp	r3, #0
 801de74:	f47f ae34 	bne.w	801dae0 <_strtod_l+0x490>
 801de78:	2322      	movs	r3, #34	; 0x22
 801de7a:	6023      	str	r3, [r4, #0]
 801de7c:	e630      	b.n	801dae0 <_strtod_l+0x490>
 801de7e:	f04f 31ff 	mov.w	r1, #4294967295
 801de82:	fa01 f202 	lsl.w	r2, r1, r2
 801de86:	ea02 0808 	and.w	r8, r2, r8
 801de8a:	e6da      	b.n	801dc42 <_strtod_l+0x5f2>
 801de8c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801de90:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801de94:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801de98:	33e2      	adds	r3, #226	; 0xe2
 801de9a:	fa00 f303 	lsl.w	r3, r0, r3
 801de9e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801dea2:	e73f      	b.n	801dd24 <_strtod_l+0x6d4>
 801dea4:	2200      	movs	r2, #0
 801dea6:	2301      	movs	r3, #1
 801dea8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801deac:	e73a      	b.n	801dd24 <_strtod_l+0x6d4>
 801deae:	9912      	ldr	r1, [sp, #72]	; 0x48
 801deb0:	461a      	mov	r2, r3
 801deb2:	4620      	mov	r0, r4
 801deb4:	f7ff f962 	bl	801d17c <__lshift>
 801deb8:	9012      	str	r0, [sp, #72]	; 0x48
 801deba:	2800      	cmp	r0, #0
 801debc:	f47f af64 	bne.w	801dd88 <_strtod_l+0x738>
 801dec0:	e604      	b.n	801dacc <_strtod_l+0x47c>
 801dec2:	bf00      	nop
 801dec4:	f3af 8000 	nop.w
 801dec8:	94a03595 	.word	0x94a03595
 801decc:	3fcfffff 	.word	0x3fcfffff
 801ded0:	94a03595 	.word	0x94a03595
 801ded4:	3fdfffff 	.word	0x3fdfffff
 801ded8:	35afe535 	.word	0x35afe535
 801dedc:	3fe00000 	.word	0x3fe00000
 801dee0:	00000000 	.word	0x00000000
 801dee4:	39500000 	.word	0x39500000
 801dee8:	08020690 	.word	0x08020690
 801deec:	fffffc02 	.word	0xfffffc02
 801def0:	7ff00000 	.word	0x7ff00000
 801def4:	46cb      	mov	fp, r9
 801def6:	d15f      	bne.n	801dfb8 <_strtod_l+0x968>
 801def8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801defc:	f1ba 0f00 	cmp.w	sl, #0
 801df00:	d02a      	beq.n	801df58 <_strtod_l+0x908>
 801df02:	4aa7      	ldr	r2, [pc, #668]	; (801e1a0 <_strtod_l+0xb50>)
 801df04:	4293      	cmp	r3, r2
 801df06:	d12b      	bne.n	801df60 <_strtod_l+0x910>
 801df08:	9b05      	ldr	r3, [sp, #20]
 801df0a:	4642      	mov	r2, r8
 801df0c:	b1fb      	cbz	r3, 801df4e <_strtod_l+0x8fe>
 801df0e:	4ba5      	ldr	r3, [pc, #660]	; (801e1a4 <_strtod_l+0xb54>)
 801df10:	ea09 0303 	and.w	r3, r9, r3
 801df14:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801df18:	f04f 31ff 	mov.w	r1, #4294967295
 801df1c:	d81a      	bhi.n	801df54 <_strtod_l+0x904>
 801df1e:	0d1b      	lsrs	r3, r3, #20
 801df20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801df24:	fa01 f303 	lsl.w	r3, r1, r3
 801df28:	429a      	cmp	r2, r3
 801df2a:	d119      	bne.n	801df60 <_strtod_l+0x910>
 801df2c:	4b9e      	ldr	r3, [pc, #632]	; (801e1a8 <_strtod_l+0xb58>)
 801df2e:	459b      	cmp	fp, r3
 801df30:	d102      	bne.n	801df38 <_strtod_l+0x8e8>
 801df32:	3201      	adds	r2, #1
 801df34:	f43f adca 	beq.w	801dacc <_strtod_l+0x47c>
 801df38:	4b9a      	ldr	r3, [pc, #616]	; (801e1a4 <_strtod_l+0xb54>)
 801df3a:	ea0b 0303 	and.w	r3, fp, r3
 801df3e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801df42:	f04f 0800 	mov.w	r8, #0
 801df46:	9b05      	ldr	r3, [sp, #20]
 801df48:	2b00      	cmp	r3, #0
 801df4a:	d186      	bne.n	801de5a <_strtod_l+0x80a>
 801df4c:	e5c8      	b.n	801dae0 <_strtod_l+0x490>
 801df4e:	f04f 33ff 	mov.w	r3, #4294967295
 801df52:	e7e9      	b.n	801df28 <_strtod_l+0x8d8>
 801df54:	460b      	mov	r3, r1
 801df56:	e7e7      	b.n	801df28 <_strtod_l+0x8d8>
 801df58:	ea53 0308 	orrs.w	r3, r3, r8
 801df5c:	f43f af6d 	beq.w	801de3a <_strtod_l+0x7ea>
 801df60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df62:	b1cb      	cbz	r3, 801df98 <_strtod_l+0x948>
 801df64:	ea13 0f0b 	tst.w	r3, fp
 801df68:	d0ed      	beq.n	801df46 <_strtod_l+0x8f6>
 801df6a:	9a05      	ldr	r2, [sp, #20]
 801df6c:	4640      	mov	r0, r8
 801df6e:	4649      	mov	r1, r9
 801df70:	f1ba 0f00 	cmp.w	sl, #0
 801df74:	d014      	beq.n	801dfa0 <_strtod_l+0x950>
 801df76:	f7ff fb51 	bl	801d61c <sulp>
 801df7a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801df7e:	ec59 8b17 	vmov	r8, r9, d7
 801df82:	e7e0      	b.n	801df46 <_strtod_l+0x8f6>
 801df84:	4013      	ands	r3, r2
 801df86:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801df8a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801df8e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801df92:	f04f 38ff 	mov.w	r8, #4294967295
 801df96:	e7d6      	b.n	801df46 <_strtod_l+0x8f6>
 801df98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df9a:	ea13 0f08 	tst.w	r3, r8
 801df9e:	e7e3      	b.n	801df68 <_strtod_l+0x918>
 801dfa0:	f7ff fb3c 	bl	801d61c <sulp>
 801dfa4:	ee38 0b40 	vsub.f64	d0, d8, d0
 801dfa8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801dfac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfb0:	ec59 8b10 	vmov	r8, r9, d0
 801dfb4:	d1c7      	bne.n	801df46 <_strtod_l+0x8f6>
 801dfb6:	e5f8      	b.n	801dbaa <_strtod_l+0x55a>
 801dfb8:	4631      	mov	r1, r6
 801dfba:	4628      	mov	r0, r5
 801dfbc:	f7ff faba 	bl	801d534 <__ratio>
 801dfc0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801dfc4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801dfc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfcc:	d85f      	bhi.n	801e08e <_strtod_l+0xa3e>
 801dfce:	f1ba 0f00 	cmp.w	sl, #0
 801dfd2:	d166      	bne.n	801e0a2 <_strtod_l+0xa52>
 801dfd4:	f1b8 0f00 	cmp.w	r8, #0
 801dfd8:	d14d      	bne.n	801e076 <_strtod_l+0xa26>
 801dfda:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801dfde:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801dfe2:	2b00      	cmp	r3, #0
 801dfe4:	d162      	bne.n	801e0ac <_strtod_l+0xa5c>
 801dfe6:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801dfea:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801dfee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dff2:	d401      	bmi.n	801dff8 <_strtod_l+0x9a8>
 801dff4:	ee20 db0d 	vmul.f64	d13, d0, d13
 801dff8:	eeb1 cb4d 	vneg.f64	d12, d13
 801dffc:	4869      	ldr	r0, [pc, #420]	; (801e1a4 <_strtod_l+0xb54>)
 801dffe:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 801e1b0 <_strtod_l+0xb60>
 801e002:	ea0b 0100 	and.w	r1, fp, r0
 801e006:	4561      	cmp	r1, ip
 801e008:	ec53 2b1c 	vmov	r2, r3, d12
 801e00c:	d17a      	bne.n	801e104 <_strtod_l+0xab4>
 801e00e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801e012:	ec49 8b10 	vmov	d0, r8, r9
 801e016:	910a      	str	r1, [sp, #40]	; 0x28
 801e018:	f7ff f9c2 	bl	801d3a0 <__ulp>
 801e01c:	ec49 8b1e 	vmov	d14, r8, r9
 801e020:	4860      	ldr	r0, [pc, #384]	; (801e1a4 <_strtod_l+0xb54>)
 801e022:	eea0 eb0c 	vfma.f64	d14, d0, d12
 801e026:	ee1e 3a90 	vmov	r3, s29
 801e02a:	4a60      	ldr	r2, [pc, #384]	; (801e1ac <_strtod_l+0xb5c>)
 801e02c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e02e:	4018      	ands	r0, r3
 801e030:	4290      	cmp	r0, r2
 801e032:	ec59 8b1e 	vmov	r8, r9, d14
 801e036:	d93c      	bls.n	801e0b2 <_strtod_l+0xa62>
 801e038:	ee18 2a90 	vmov	r2, s17
 801e03c:	4b5a      	ldr	r3, [pc, #360]	; (801e1a8 <_strtod_l+0xb58>)
 801e03e:	429a      	cmp	r2, r3
 801e040:	d104      	bne.n	801e04c <_strtod_l+0x9fc>
 801e042:	ee18 3a10 	vmov	r3, s16
 801e046:	3301      	adds	r3, #1
 801e048:	f43f ad40 	beq.w	801dacc <_strtod_l+0x47c>
 801e04c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801e1a8 <_strtod_l+0xb58>
 801e050:	f04f 38ff 	mov.w	r8, #4294967295
 801e054:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e056:	4620      	mov	r0, r4
 801e058:	f7fe fe76 	bl	801cd48 <_Bfree>
 801e05c:	4639      	mov	r1, r7
 801e05e:	4620      	mov	r0, r4
 801e060:	f7fe fe72 	bl	801cd48 <_Bfree>
 801e064:	4631      	mov	r1, r6
 801e066:	4620      	mov	r0, r4
 801e068:	f7fe fe6e 	bl	801cd48 <_Bfree>
 801e06c:	4629      	mov	r1, r5
 801e06e:	4620      	mov	r0, r4
 801e070:	f7fe fe6a 	bl	801cd48 <_Bfree>
 801e074:	e609      	b.n	801dc8a <_strtod_l+0x63a>
 801e076:	f1b8 0f01 	cmp.w	r8, #1
 801e07a:	d103      	bne.n	801e084 <_strtod_l+0xa34>
 801e07c:	f1b9 0f00 	cmp.w	r9, #0
 801e080:	f43f ad93 	beq.w	801dbaa <_strtod_l+0x55a>
 801e084:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801e088:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801e08c:	e7b6      	b.n	801dffc <_strtod_l+0x9ac>
 801e08e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801e092:	ee20 db0d 	vmul.f64	d13, d0, d13
 801e096:	f1ba 0f00 	cmp.w	sl, #0
 801e09a:	d0ad      	beq.n	801dff8 <_strtod_l+0x9a8>
 801e09c:	eeb0 cb4d 	vmov.f64	d12, d13
 801e0a0:	e7ac      	b.n	801dffc <_strtod_l+0x9ac>
 801e0a2:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801e0a6:	eeb0 db4c 	vmov.f64	d13, d12
 801e0aa:	e7a7      	b.n	801dffc <_strtod_l+0x9ac>
 801e0ac:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801e0b0:	e7a4      	b.n	801dffc <_strtod_l+0x9ac>
 801e0b2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801e0b6:	9b05      	ldr	r3, [sp, #20]
 801e0b8:	46cb      	mov	fp, r9
 801e0ba:	2b00      	cmp	r3, #0
 801e0bc:	d1ca      	bne.n	801e054 <_strtod_l+0xa04>
 801e0be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e0c2:	0d1b      	lsrs	r3, r3, #20
 801e0c4:	051b      	lsls	r3, r3, #20
 801e0c6:	4299      	cmp	r1, r3
 801e0c8:	d1c4      	bne.n	801e054 <_strtod_l+0xa04>
 801e0ca:	ec51 0b1d 	vmov	r0, r1, d13
 801e0ce:	f7e2 fb5b 	bl	8000788 <__aeabi_d2lz>
 801e0d2:	f7e2 fb13 	bl	80006fc <__aeabi_l2d>
 801e0d6:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801e0da:	ec41 0b17 	vmov	d7, r0, r1
 801e0de:	ea4b 0b08 	orr.w	fp, fp, r8
 801e0e2:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801e0e6:	ee3d db47 	vsub.f64	d13, d13, d7
 801e0ea:	d03c      	beq.n	801e166 <_strtod_l+0xb16>
 801e0ec:	eeb4 dbca 	vcmpe.f64	d13, d10
 801e0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0f4:	f53f acf4 	bmi.w	801dae0 <_strtod_l+0x490>
 801e0f8:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801e0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e100:	dda8      	ble.n	801e054 <_strtod_l+0xa04>
 801e102:	e4ed      	b.n	801dae0 <_strtod_l+0x490>
 801e104:	9805      	ldr	r0, [sp, #20]
 801e106:	b1f0      	cbz	r0, 801e146 <_strtod_l+0xaf6>
 801e108:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801e10c:	d81b      	bhi.n	801e146 <_strtod_l+0xaf6>
 801e10e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801e198 <_strtod_l+0xb48>
 801e112:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801e116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e11a:	d811      	bhi.n	801e140 <_strtod_l+0xaf0>
 801e11c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801e120:	ee1d 3a10 	vmov	r3, s26
 801e124:	2b01      	cmp	r3, #1
 801e126:	bf38      	it	cc
 801e128:	2301      	movcc	r3, #1
 801e12a:	ee0d 3a10 	vmov	s26, r3
 801e12e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801e132:	f1ba 0f00 	cmp.w	sl, #0
 801e136:	d113      	bne.n	801e160 <_strtod_l+0xb10>
 801e138:	eeb1 7b4d 	vneg.f64	d7, d13
 801e13c:	ec53 2b17 	vmov	r2, r3, d7
 801e140:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801e144:	1a43      	subs	r3, r0, r1
 801e146:	eeb0 0b48 	vmov.f64	d0, d8
 801e14a:	ec43 2b1c 	vmov	d12, r2, r3
 801e14e:	910a      	str	r1, [sp, #40]	; 0x28
 801e150:	f7ff f926 	bl	801d3a0 <__ulp>
 801e154:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e156:	eeac 8b00 	vfma.f64	d8, d12, d0
 801e15a:	ec59 8b18 	vmov	r8, r9, d8
 801e15e:	e7aa      	b.n	801e0b6 <_strtod_l+0xa66>
 801e160:	eeb0 7b4d 	vmov.f64	d7, d13
 801e164:	e7ea      	b.n	801e13c <_strtod_l+0xaec>
 801e166:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801e16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e16e:	f57f af71 	bpl.w	801e054 <_strtod_l+0xa04>
 801e172:	e4b5      	b.n	801dae0 <_strtod_l+0x490>
 801e174:	2300      	movs	r3, #0
 801e176:	9308      	str	r3, [sp, #32]
 801e178:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e17a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e17c:	6013      	str	r3, [r2, #0]
 801e17e:	f7ff baa6 	b.w	801d6ce <_strtod_l+0x7e>
 801e182:	2a65      	cmp	r2, #101	; 0x65
 801e184:	f43f aba2 	beq.w	801d8cc <_strtod_l+0x27c>
 801e188:	2a45      	cmp	r2, #69	; 0x45
 801e18a:	f43f ab9f 	beq.w	801d8cc <_strtod_l+0x27c>
 801e18e:	2101      	movs	r1, #1
 801e190:	f7ff bbd8 	b.w	801d944 <_strtod_l+0x2f4>
 801e194:	f3af 8000 	nop.w
 801e198:	ffc00000 	.word	0xffc00000
 801e19c:	41dfffff 	.word	0x41dfffff
 801e1a0:	000fffff 	.word	0x000fffff
 801e1a4:	7ff00000 	.word	0x7ff00000
 801e1a8:	7fefffff 	.word	0x7fefffff
 801e1ac:	7c9fffff 	.word	0x7c9fffff
 801e1b0:	7fe00000 	.word	0x7fe00000

0801e1b4 <_strtod_r>:
 801e1b4:	4b01      	ldr	r3, [pc, #4]	; (801e1bc <_strtod_r+0x8>)
 801e1b6:	f7ff ba4b 	b.w	801d650 <_strtod_l>
 801e1ba:	bf00      	nop
 801e1bc:	2400015c 	.word	0x2400015c

0801e1c0 <_strtol_l.constprop.0>:
 801e1c0:	2b01      	cmp	r3, #1
 801e1c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e1c6:	d001      	beq.n	801e1cc <_strtol_l.constprop.0+0xc>
 801e1c8:	2b24      	cmp	r3, #36	; 0x24
 801e1ca:	d906      	bls.n	801e1da <_strtol_l.constprop.0+0x1a>
 801e1cc:	f7fd fe3c 	bl	801be48 <__errno>
 801e1d0:	2316      	movs	r3, #22
 801e1d2:	6003      	str	r3, [r0, #0]
 801e1d4:	2000      	movs	r0, #0
 801e1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801e2c0 <_strtol_l.constprop.0+0x100>
 801e1de:	460d      	mov	r5, r1
 801e1e0:	462e      	mov	r6, r5
 801e1e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e1e6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801e1ea:	f017 0708 	ands.w	r7, r7, #8
 801e1ee:	d1f7      	bne.n	801e1e0 <_strtol_l.constprop.0+0x20>
 801e1f0:	2c2d      	cmp	r4, #45	; 0x2d
 801e1f2:	d132      	bne.n	801e25a <_strtol_l.constprop.0+0x9a>
 801e1f4:	782c      	ldrb	r4, [r5, #0]
 801e1f6:	2701      	movs	r7, #1
 801e1f8:	1cb5      	adds	r5, r6, #2
 801e1fa:	2b00      	cmp	r3, #0
 801e1fc:	d05b      	beq.n	801e2b6 <_strtol_l.constprop.0+0xf6>
 801e1fe:	2b10      	cmp	r3, #16
 801e200:	d109      	bne.n	801e216 <_strtol_l.constprop.0+0x56>
 801e202:	2c30      	cmp	r4, #48	; 0x30
 801e204:	d107      	bne.n	801e216 <_strtol_l.constprop.0+0x56>
 801e206:	782c      	ldrb	r4, [r5, #0]
 801e208:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e20c:	2c58      	cmp	r4, #88	; 0x58
 801e20e:	d14d      	bne.n	801e2ac <_strtol_l.constprop.0+0xec>
 801e210:	786c      	ldrb	r4, [r5, #1]
 801e212:	2310      	movs	r3, #16
 801e214:	3502      	adds	r5, #2
 801e216:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801e21a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e21e:	f04f 0e00 	mov.w	lr, #0
 801e222:	fbb8 f9f3 	udiv	r9, r8, r3
 801e226:	4676      	mov	r6, lr
 801e228:	fb03 8a19 	mls	sl, r3, r9, r8
 801e22c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e230:	f1bc 0f09 	cmp.w	ip, #9
 801e234:	d816      	bhi.n	801e264 <_strtol_l.constprop.0+0xa4>
 801e236:	4664      	mov	r4, ip
 801e238:	42a3      	cmp	r3, r4
 801e23a:	dd24      	ble.n	801e286 <_strtol_l.constprop.0+0xc6>
 801e23c:	f1be 3fff 	cmp.w	lr, #4294967295
 801e240:	d008      	beq.n	801e254 <_strtol_l.constprop.0+0x94>
 801e242:	45b1      	cmp	r9, r6
 801e244:	d31c      	bcc.n	801e280 <_strtol_l.constprop.0+0xc0>
 801e246:	d101      	bne.n	801e24c <_strtol_l.constprop.0+0x8c>
 801e248:	45a2      	cmp	sl, r4
 801e24a:	db19      	blt.n	801e280 <_strtol_l.constprop.0+0xc0>
 801e24c:	fb06 4603 	mla	r6, r6, r3, r4
 801e250:	f04f 0e01 	mov.w	lr, #1
 801e254:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e258:	e7e8      	b.n	801e22c <_strtol_l.constprop.0+0x6c>
 801e25a:	2c2b      	cmp	r4, #43	; 0x2b
 801e25c:	bf04      	itt	eq
 801e25e:	782c      	ldrbeq	r4, [r5, #0]
 801e260:	1cb5      	addeq	r5, r6, #2
 801e262:	e7ca      	b.n	801e1fa <_strtol_l.constprop.0+0x3a>
 801e264:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801e268:	f1bc 0f19 	cmp.w	ip, #25
 801e26c:	d801      	bhi.n	801e272 <_strtol_l.constprop.0+0xb2>
 801e26e:	3c37      	subs	r4, #55	; 0x37
 801e270:	e7e2      	b.n	801e238 <_strtol_l.constprop.0+0x78>
 801e272:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801e276:	f1bc 0f19 	cmp.w	ip, #25
 801e27a:	d804      	bhi.n	801e286 <_strtol_l.constprop.0+0xc6>
 801e27c:	3c57      	subs	r4, #87	; 0x57
 801e27e:	e7db      	b.n	801e238 <_strtol_l.constprop.0+0x78>
 801e280:	f04f 3eff 	mov.w	lr, #4294967295
 801e284:	e7e6      	b.n	801e254 <_strtol_l.constprop.0+0x94>
 801e286:	f1be 3fff 	cmp.w	lr, #4294967295
 801e28a:	d105      	bne.n	801e298 <_strtol_l.constprop.0+0xd8>
 801e28c:	2322      	movs	r3, #34	; 0x22
 801e28e:	6003      	str	r3, [r0, #0]
 801e290:	4646      	mov	r6, r8
 801e292:	b942      	cbnz	r2, 801e2a6 <_strtol_l.constprop.0+0xe6>
 801e294:	4630      	mov	r0, r6
 801e296:	e79e      	b.n	801e1d6 <_strtol_l.constprop.0+0x16>
 801e298:	b107      	cbz	r7, 801e29c <_strtol_l.constprop.0+0xdc>
 801e29a:	4276      	negs	r6, r6
 801e29c:	2a00      	cmp	r2, #0
 801e29e:	d0f9      	beq.n	801e294 <_strtol_l.constprop.0+0xd4>
 801e2a0:	f1be 0f00 	cmp.w	lr, #0
 801e2a4:	d000      	beq.n	801e2a8 <_strtol_l.constprop.0+0xe8>
 801e2a6:	1e69      	subs	r1, r5, #1
 801e2a8:	6011      	str	r1, [r2, #0]
 801e2aa:	e7f3      	b.n	801e294 <_strtol_l.constprop.0+0xd4>
 801e2ac:	2430      	movs	r4, #48	; 0x30
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d1b1      	bne.n	801e216 <_strtol_l.constprop.0+0x56>
 801e2b2:	2308      	movs	r3, #8
 801e2b4:	e7af      	b.n	801e216 <_strtol_l.constprop.0+0x56>
 801e2b6:	2c30      	cmp	r4, #48	; 0x30
 801e2b8:	d0a5      	beq.n	801e206 <_strtol_l.constprop.0+0x46>
 801e2ba:	230a      	movs	r3, #10
 801e2bc:	e7ab      	b.n	801e216 <_strtol_l.constprop.0+0x56>
 801e2be:	bf00      	nop
 801e2c0:	080206b9 	.word	0x080206b9

0801e2c4 <_strtol_r>:
 801e2c4:	f7ff bf7c 	b.w	801e1c0 <_strtol_l.constprop.0>

0801e2c8 <__ssputs_r>:
 801e2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e2cc:	688e      	ldr	r6, [r1, #8]
 801e2ce:	461f      	mov	r7, r3
 801e2d0:	42be      	cmp	r6, r7
 801e2d2:	680b      	ldr	r3, [r1, #0]
 801e2d4:	4682      	mov	sl, r0
 801e2d6:	460c      	mov	r4, r1
 801e2d8:	4690      	mov	r8, r2
 801e2da:	d82c      	bhi.n	801e336 <__ssputs_r+0x6e>
 801e2dc:	898a      	ldrh	r2, [r1, #12]
 801e2de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e2e2:	d026      	beq.n	801e332 <__ssputs_r+0x6a>
 801e2e4:	6965      	ldr	r5, [r4, #20]
 801e2e6:	6909      	ldr	r1, [r1, #16]
 801e2e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e2ec:	eba3 0901 	sub.w	r9, r3, r1
 801e2f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e2f4:	1c7b      	adds	r3, r7, #1
 801e2f6:	444b      	add	r3, r9
 801e2f8:	106d      	asrs	r5, r5, #1
 801e2fa:	429d      	cmp	r5, r3
 801e2fc:	bf38      	it	cc
 801e2fe:	461d      	movcc	r5, r3
 801e300:	0553      	lsls	r3, r2, #21
 801e302:	d527      	bpl.n	801e354 <__ssputs_r+0x8c>
 801e304:	4629      	mov	r1, r5
 801e306:	f7fe fc53 	bl	801cbb0 <_malloc_r>
 801e30a:	4606      	mov	r6, r0
 801e30c:	b360      	cbz	r0, 801e368 <__ssputs_r+0xa0>
 801e30e:	6921      	ldr	r1, [r4, #16]
 801e310:	464a      	mov	r2, r9
 801e312:	f7fd fdce 	bl	801beb2 <memcpy>
 801e316:	89a3      	ldrh	r3, [r4, #12]
 801e318:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e31c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e320:	81a3      	strh	r3, [r4, #12]
 801e322:	6126      	str	r6, [r4, #16]
 801e324:	6165      	str	r5, [r4, #20]
 801e326:	444e      	add	r6, r9
 801e328:	eba5 0509 	sub.w	r5, r5, r9
 801e32c:	6026      	str	r6, [r4, #0]
 801e32e:	60a5      	str	r5, [r4, #8]
 801e330:	463e      	mov	r6, r7
 801e332:	42be      	cmp	r6, r7
 801e334:	d900      	bls.n	801e338 <__ssputs_r+0x70>
 801e336:	463e      	mov	r6, r7
 801e338:	6820      	ldr	r0, [r4, #0]
 801e33a:	4632      	mov	r2, r6
 801e33c:	4641      	mov	r1, r8
 801e33e:	f000 fd5c 	bl	801edfa <memmove>
 801e342:	68a3      	ldr	r3, [r4, #8]
 801e344:	1b9b      	subs	r3, r3, r6
 801e346:	60a3      	str	r3, [r4, #8]
 801e348:	6823      	ldr	r3, [r4, #0]
 801e34a:	4433      	add	r3, r6
 801e34c:	6023      	str	r3, [r4, #0]
 801e34e:	2000      	movs	r0, #0
 801e350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e354:	462a      	mov	r2, r5
 801e356:	f001 f934 	bl	801f5c2 <_realloc_r>
 801e35a:	4606      	mov	r6, r0
 801e35c:	2800      	cmp	r0, #0
 801e35e:	d1e0      	bne.n	801e322 <__ssputs_r+0x5a>
 801e360:	6921      	ldr	r1, [r4, #16]
 801e362:	4650      	mov	r0, sl
 801e364:	f7fe fbb0 	bl	801cac8 <_free_r>
 801e368:	230c      	movs	r3, #12
 801e36a:	f8ca 3000 	str.w	r3, [sl]
 801e36e:	89a3      	ldrh	r3, [r4, #12]
 801e370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e374:	81a3      	strh	r3, [r4, #12]
 801e376:	f04f 30ff 	mov.w	r0, #4294967295
 801e37a:	e7e9      	b.n	801e350 <__ssputs_r+0x88>

0801e37c <_svfiprintf_r>:
 801e37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e380:	4698      	mov	r8, r3
 801e382:	898b      	ldrh	r3, [r1, #12]
 801e384:	061b      	lsls	r3, r3, #24
 801e386:	b09d      	sub	sp, #116	; 0x74
 801e388:	4607      	mov	r7, r0
 801e38a:	460d      	mov	r5, r1
 801e38c:	4614      	mov	r4, r2
 801e38e:	d50e      	bpl.n	801e3ae <_svfiprintf_r+0x32>
 801e390:	690b      	ldr	r3, [r1, #16]
 801e392:	b963      	cbnz	r3, 801e3ae <_svfiprintf_r+0x32>
 801e394:	2140      	movs	r1, #64	; 0x40
 801e396:	f7fe fc0b 	bl	801cbb0 <_malloc_r>
 801e39a:	6028      	str	r0, [r5, #0]
 801e39c:	6128      	str	r0, [r5, #16]
 801e39e:	b920      	cbnz	r0, 801e3aa <_svfiprintf_r+0x2e>
 801e3a0:	230c      	movs	r3, #12
 801e3a2:	603b      	str	r3, [r7, #0]
 801e3a4:	f04f 30ff 	mov.w	r0, #4294967295
 801e3a8:	e0d0      	b.n	801e54c <_svfiprintf_r+0x1d0>
 801e3aa:	2340      	movs	r3, #64	; 0x40
 801e3ac:	616b      	str	r3, [r5, #20]
 801e3ae:	2300      	movs	r3, #0
 801e3b0:	9309      	str	r3, [sp, #36]	; 0x24
 801e3b2:	2320      	movs	r3, #32
 801e3b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e3b8:	f8cd 800c 	str.w	r8, [sp, #12]
 801e3bc:	2330      	movs	r3, #48	; 0x30
 801e3be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801e564 <_svfiprintf_r+0x1e8>
 801e3c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e3c6:	f04f 0901 	mov.w	r9, #1
 801e3ca:	4623      	mov	r3, r4
 801e3cc:	469a      	mov	sl, r3
 801e3ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e3d2:	b10a      	cbz	r2, 801e3d8 <_svfiprintf_r+0x5c>
 801e3d4:	2a25      	cmp	r2, #37	; 0x25
 801e3d6:	d1f9      	bne.n	801e3cc <_svfiprintf_r+0x50>
 801e3d8:	ebba 0b04 	subs.w	fp, sl, r4
 801e3dc:	d00b      	beq.n	801e3f6 <_svfiprintf_r+0x7a>
 801e3de:	465b      	mov	r3, fp
 801e3e0:	4622      	mov	r2, r4
 801e3e2:	4629      	mov	r1, r5
 801e3e4:	4638      	mov	r0, r7
 801e3e6:	f7ff ff6f 	bl	801e2c8 <__ssputs_r>
 801e3ea:	3001      	adds	r0, #1
 801e3ec:	f000 80a9 	beq.w	801e542 <_svfiprintf_r+0x1c6>
 801e3f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e3f2:	445a      	add	r2, fp
 801e3f4:	9209      	str	r2, [sp, #36]	; 0x24
 801e3f6:	f89a 3000 	ldrb.w	r3, [sl]
 801e3fa:	2b00      	cmp	r3, #0
 801e3fc:	f000 80a1 	beq.w	801e542 <_svfiprintf_r+0x1c6>
 801e400:	2300      	movs	r3, #0
 801e402:	f04f 32ff 	mov.w	r2, #4294967295
 801e406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e40a:	f10a 0a01 	add.w	sl, sl, #1
 801e40e:	9304      	str	r3, [sp, #16]
 801e410:	9307      	str	r3, [sp, #28]
 801e412:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e416:	931a      	str	r3, [sp, #104]	; 0x68
 801e418:	4654      	mov	r4, sl
 801e41a:	2205      	movs	r2, #5
 801e41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e420:	4850      	ldr	r0, [pc, #320]	; (801e564 <_svfiprintf_r+0x1e8>)
 801e422:	f7e1 ff85 	bl	8000330 <memchr>
 801e426:	9a04      	ldr	r2, [sp, #16]
 801e428:	b9d8      	cbnz	r0, 801e462 <_svfiprintf_r+0xe6>
 801e42a:	06d0      	lsls	r0, r2, #27
 801e42c:	bf44      	itt	mi
 801e42e:	2320      	movmi	r3, #32
 801e430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e434:	0711      	lsls	r1, r2, #28
 801e436:	bf44      	itt	mi
 801e438:	232b      	movmi	r3, #43	; 0x2b
 801e43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e43e:	f89a 3000 	ldrb.w	r3, [sl]
 801e442:	2b2a      	cmp	r3, #42	; 0x2a
 801e444:	d015      	beq.n	801e472 <_svfiprintf_r+0xf6>
 801e446:	9a07      	ldr	r2, [sp, #28]
 801e448:	4654      	mov	r4, sl
 801e44a:	2000      	movs	r0, #0
 801e44c:	f04f 0c0a 	mov.w	ip, #10
 801e450:	4621      	mov	r1, r4
 801e452:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e456:	3b30      	subs	r3, #48	; 0x30
 801e458:	2b09      	cmp	r3, #9
 801e45a:	d94d      	bls.n	801e4f8 <_svfiprintf_r+0x17c>
 801e45c:	b1b0      	cbz	r0, 801e48c <_svfiprintf_r+0x110>
 801e45e:	9207      	str	r2, [sp, #28]
 801e460:	e014      	b.n	801e48c <_svfiprintf_r+0x110>
 801e462:	eba0 0308 	sub.w	r3, r0, r8
 801e466:	fa09 f303 	lsl.w	r3, r9, r3
 801e46a:	4313      	orrs	r3, r2
 801e46c:	9304      	str	r3, [sp, #16]
 801e46e:	46a2      	mov	sl, r4
 801e470:	e7d2      	b.n	801e418 <_svfiprintf_r+0x9c>
 801e472:	9b03      	ldr	r3, [sp, #12]
 801e474:	1d19      	adds	r1, r3, #4
 801e476:	681b      	ldr	r3, [r3, #0]
 801e478:	9103      	str	r1, [sp, #12]
 801e47a:	2b00      	cmp	r3, #0
 801e47c:	bfbb      	ittet	lt
 801e47e:	425b      	neglt	r3, r3
 801e480:	f042 0202 	orrlt.w	r2, r2, #2
 801e484:	9307      	strge	r3, [sp, #28]
 801e486:	9307      	strlt	r3, [sp, #28]
 801e488:	bfb8      	it	lt
 801e48a:	9204      	strlt	r2, [sp, #16]
 801e48c:	7823      	ldrb	r3, [r4, #0]
 801e48e:	2b2e      	cmp	r3, #46	; 0x2e
 801e490:	d10c      	bne.n	801e4ac <_svfiprintf_r+0x130>
 801e492:	7863      	ldrb	r3, [r4, #1]
 801e494:	2b2a      	cmp	r3, #42	; 0x2a
 801e496:	d134      	bne.n	801e502 <_svfiprintf_r+0x186>
 801e498:	9b03      	ldr	r3, [sp, #12]
 801e49a:	1d1a      	adds	r2, r3, #4
 801e49c:	681b      	ldr	r3, [r3, #0]
 801e49e:	9203      	str	r2, [sp, #12]
 801e4a0:	2b00      	cmp	r3, #0
 801e4a2:	bfb8      	it	lt
 801e4a4:	f04f 33ff 	movlt.w	r3, #4294967295
 801e4a8:	3402      	adds	r4, #2
 801e4aa:	9305      	str	r3, [sp, #20]
 801e4ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801e574 <_svfiprintf_r+0x1f8>
 801e4b0:	7821      	ldrb	r1, [r4, #0]
 801e4b2:	2203      	movs	r2, #3
 801e4b4:	4650      	mov	r0, sl
 801e4b6:	f7e1 ff3b 	bl	8000330 <memchr>
 801e4ba:	b138      	cbz	r0, 801e4cc <_svfiprintf_r+0x150>
 801e4bc:	9b04      	ldr	r3, [sp, #16]
 801e4be:	eba0 000a 	sub.w	r0, r0, sl
 801e4c2:	2240      	movs	r2, #64	; 0x40
 801e4c4:	4082      	lsls	r2, r0
 801e4c6:	4313      	orrs	r3, r2
 801e4c8:	3401      	adds	r4, #1
 801e4ca:	9304      	str	r3, [sp, #16]
 801e4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e4d0:	4825      	ldr	r0, [pc, #148]	; (801e568 <_svfiprintf_r+0x1ec>)
 801e4d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e4d6:	2206      	movs	r2, #6
 801e4d8:	f7e1 ff2a 	bl	8000330 <memchr>
 801e4dc:	2800      	cmp	r0, #0
 801e4de:	d038      	beq.n	801e552 <_svfiprintf_r+0x1d6>
 801e4e0:	4b22      	ldr	r3, [pc, #136]	; (801e56c <_svfiprintf_r+0x1f0>)
 801e4e2:	bb1b      	cbnz	r3, 801e52c <_svfiprintf_r+0x1b0>
 801e4e4:	9b03      	ldr	r3, [sp, #12]
 801e4e6:	3307      	adds	r3, #7
 801e4e8:	f023 0307 	bic.w	r3, r3, #7
 801e4ec:	3308      	adds	r3, #8
 801e4ee:	9303      	str	r3, [sp, #12]
 801e4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4f2:	4433      	add	r3, r6
 801e4f4:	9309      	str	r3, [sp, #36]	; 0x24
 801e4f6:	e768      	b.n	801e3ca <_svfiprintf_r+0x4e>
 801e4f8:	fb0c 3202 	mla	r2, ip, r2, r3
 801e4fc:	460c      	mov	r4, r1
 801e4fe:	2001      	movs	r0, #1
 801e500:	e7a6      	b.n	801e450 <_svfiprintf_r+0xd4>
 801e502:	2300      	movs	r3, #0
 801e504:	3401      	adds	r4, #1
 801e506:	9305      	str	r3, [sp, #20]
 801e508:	4619      	mov	r1, r3
 801e50a:	f04f 0c0a 	mov.w	ip, #10
 801e50e:	4620      	mov	r0, r4
 801e510:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e514:	3a30      	subs	r2, #48	; 0x30
 801e516:	2a09      	cmp	r2, #9
 801e518:	d903      	bls.n	801e522 <_svfiprintf_r+0x1a6>
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	d0c6      	beq.n	801e4ac <_svfiprintf_r+0x130>
 801e51e:	9105      	str	r1, [sp, #20]
 801e520:	e7c4      	b.n	801e4ac <_svfiprintf_r+0x130>
 801e522:	fb0c 2101 	mla	r1, ip, r1, r2
 801e526:	4604      	mov	r4, r0
 801e528:	2301      	movs	r3, #1
 801e52a:	e7f0      	b.n	801e50e <_svfiprintf_r+0x192>
 801e52c:	ab03      	add	r3, sp, #12
 801e52e:	9300      	str	r3, [sp, #0]
 801e530:	462a      	mov	r2, r5
 801e532:	4b0f      	ldr	r3, [pc, #60]	; (801e570 <_svfiprintf_r+0x1f4>)
 801e534:	a904      	add	r1, sp, #16
 801e536:	4638      	mov	r0, r7
 801e538:	f7fc fd32 	bl	801afa0 <_printf_float>
 801e53c:	1c42      	adds	r2, r0, #1
 801e53e:	4606      	mov	r6, r0
 801e540:	d1d6      	bne.n	801e4f0 <_svfiprintf_r+0x174>
 801e542:	89ab      	ldrh	r3, [r5, #12]
 801e544:	065b      	lsls	r3, r3, #25
 801e546:	f53f af2d 	bmi.w	801e3a4 <_svfiprintf_r+0x28>
 801e54a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e54c:	b01d      	add	sp, #116	; 0x74
 801e54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e552:	ab03      	add	r3, sp, #12
 801e554:	9300      	str	r3, [sp, #0]
 801e556:	462a      	mov	r2, r5
 801e558:	4b05      	ldr	r3, [pc, #20]	; (801e570 <_svfiprintf_r+0x1f4>)
 801e55a:	a904      	add	r1, sp, #16
 801e55c:	4638      	mov	r0, r7
 801e55e:	f7fc ffa7 	bl	801b4b0 <_printf_i>
 801e562:	e7eb      	b.n	801e53c <_svfiprintf_r+0x1c0>
 801e564:	080207b9 	.word	0x080207b9
 801e568:	080207c3 	.word	0x080207c3
 801e56c:	0801afa1 	.word	0x0801afa1
 801e570:	0801e2c9 	.word	0x0801e2c9
 801e574:	080207bf 	.word	0x080207bf

0801e578 <_sungetc_r>:
 801e578:	b538      	push	{r3, r4, r5, lr}
 801e57a:	1c4b      	adds	r3, r1, #1
 801e57c:	4614      	mov	r4, r2
 801e57e:	d103      	bne.n	801e588 <_sungetc_r+0x10>
 801e580:	f04f 35ff 	mov.w	r5, #4294967295
 801e584:	4628      	mov	r0, r5
 801e586:	bd38      	pop	{r3, r4, r5, pc}
 801e588:	8993      	ldrh	r3, [r2, #12]
 801e58a:	f023 0320 	bic.w	r3, r3, #32
 801e58e:	8193      	strh	r3, [r2, #12]
 801e590:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e592:	6852      	ldr	r2, [r2, #4]
 801e594:	b2cd      	uxtb	r5, r1
 801e596:	b18b      	cbz	r3, 801e5bc <_sungetc_r+0x44>
 801e598:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e59a:	4293      	cmp	r3, r2
 801e59c:	dd08      	ble.n	801e5b0 <_sungetc_r+0x38>
 801e59e:	6823      	ldr	r3, [r4, #0]
 801e5a0:	1e5a      	subs	r2, r3, #1
 801e5a2:	6022      	str	r2, [r4, #0]
 801e5a4:	f803 5c01 	strb.w	r5, [r3, #-1]
 801e5a8:	6863      	ldr	r3, [r4, #4]
 801e5aa:	3301      	adds	r3, #1
 801e5ac:	6063      	str	r3, [r4, #4]
 801e5ae:	e7e9      	b.n	801e584 <_sungetc_r+0xc>
 801e5b0:	4621      	mov	r1, r4
 801e5b2:	f000 fbe8 	bl	801ed86 <__submore>
 801e5b6:	2800      	cmp	r0, #0
 801e5b8:	d0f1      	beq.n	801e59e <_sungetc_r+0x26>
 801e5ba:	e7e1      	b.n	801e580 <_sungetc_r+0x8>
 801e5bc:	6921      	ldr	r1, [r4, #16]
 801e5be:	6823      	ldr	r3, [r4, #0]
 801e5c0:	b151      	cbz	r1, 801e5d8 <_sungetc_r+0x60>
 801e5c2:	4299      	cmp	r1, r3
 801e5c4:	d208      	bcs.n	801e5d8 <_sungetc_r+0x60>
 801e5c6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801e5ca:	42a9      	cmp	r1, r5
 801e5cc:	d104      	bne.n	801e5d8 <_sungetc_r+0x60>
 801e5ce:	3b01      	subs	r3, #1
 801e5d0:	3201      	adds	r2, #1
 801e5d2:	6023      	str	r3, [r4, #0]
 801e5d4:	6062      	str	r2, [r4, #4]
 801e5d6:	e7d5      	b.n	801e584 <_sungetc_r+0xc>
 801e5d8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801e5dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e5e0:	6363      	str	r3, [r4, #52]	; 0x34
 801e5e2:	2303      	movs	r3, #3
 801e5e4:	63a3      	str	r3, [r4, #56]	; 0x38
 801e5e6:	4623      	mov	r3, r4
 801e5e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 801e5ec:	6023      	str	r3, [r4, #0]
 801e5ee:	2301      	movs	r3, #1
 801e5f0:	e7dc      	b.n	801e5ac <_sungetc_r+0x34>

0801e5f2 <__ssrefill_r>:
 801e5f2:	b510      	push	{r4, lr}
 801e5f4:	460c      	mov	r4, r1
 801e5f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e5f8:	b169      	cbz	r1, 801e616 <__ssrefill_r+0x24>
 801e5fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e5fe:	4299      	cmp	r1, r3
 801e600:	d001      	beq.n	801e606 <__ssrefill_r+0x14>
 801e602:	f7fe fa61 	bl	801cac8 <_free_r>
 801e606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e608:	6063      	str	r3, [r4, #4]
 801e60a:	2000      	movs	r0, #0
 801e60c:	6360      	str	r0, [r4, #52]	; 0x34
 801e60e:	b113      	cbz	r3, 801e616 <__ssrefill_r+0x24>
 801e610:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e612:	6023      	str	r3, [r4, #0]
 801e614:	bd10      	pop	{r4, pc}
 801e616:	6923      	ldr	r3, [r4, #16]
 801e618:	6023      	str	r3, [r4, #0]
 801e61a:	2300      	movs	r3, #0
 801e61c:	6063      	str	r3, [r4, #4]
 801e61e:	89a3      	ldrh	r3, [r4, #12]
 801e620:	f043 0320 	orr.w	r3, r3, #32
 801e624:	81a3      	strh	r3, [r4, #12]
 801e626:	f04f 30ff 	mov.w	r0, #4294967295
 801e62a:	e7f3      	b.n	801e614 <__ssrefill_r+0x22>

0801e62c <__ssvfiscanf_r>:
 801e62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e630:	460c      	mov	r4, r1
 801e632:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801e636:	2100      	movs	r1, #0
 801e638:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801e63c:	49a6      	ldr	r1, [pc, #664]	; (801e8d8 <__ssvfiscanf_r+0x2ac>)
 801e63e:	91a0      	str	r1, [sp, #640]	; 0x280
 801e640:	f10d 0804 	add.w	r8, sp, #4
 801e644:	49a5      	ldr	r1, [pc, #660]	; (801e8dc <__ssvfiscanf_r+0x2b0>)
 801e646:	4fa6      	ldr	r7, [pc, #664]	; (801e8e0 <__ssvfiscanf_r+0x2b4>)
 801e648:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801e8e4 <__ssvfiscanf_r+0x2b8>
 801e64c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801e650:	4606      	mov	r6, r0
 801e652:	91a1      	str	r1, [sp, #644]	; 0x284
 801e654:	9300      	str	r3, [sp, #0]
 801e656:	7813      	ldrb	r3, [r2, #0]
 801e658:	2b00      	cmp	r3, #0
 801e65a:	f000 815a 	beq.w	801e912 <__ssvfiscanf_r+0x2e6>
 801e65e:	5cf9      	ldrb	r1, [r7, r3]
 801e660:	f011 0108 	ands.w	r1, r1, #8
 801e664:	f102 0501 	add.w	r5, r2, #1
 801e668:	d019      	beq.n	801e69e <__ssvfiscanf_r+0x72>
 801e66a:	6863      	ldr	r3, [r4, #4]
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	dd0f      	ble.n	801e690 <__ssvfiscanf_r+0x64>
 801e670:	6823      	ldr	r3, [r4, #0]
 801e672:	781a      	ldrb	r2, [r3, #0]
 801e674:	5cba      	ldrb	r2, [r7, r2]
 801e676:	0712      	lsls	r2, r2, #28
 801e678:	d401      	bmi.n	801e67e <__ssvfiscanf_r+0x52>
 801e67a:	462a      	mov	r2, r5
 801e67c:	e7eb      	b.n	801e656 <__ssvfiscanf_r+0x2a>
 801e67e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e680:	3201      	adds	r2, #1
 801e682:	9245      	str	r2, [sp, #276]	; 0x114
 801e684:	6862      	ldr	r2, [r4, #4]
 801e686:	3301      	adds	r3, #1
 801e688:	3a01      	subs	r2, #1
 801e68a:	6062      	str	r2, [r4, #4]
 801e68c:	6023      	str	r3, [r4, #0]
 801e68e:	e7ec      	b.n	801e66a <__ssvfiscanf_r+0x3e>
 801e690:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e692:	4621      	mov	r1, r4
 801e694:	4630      	mov	r0, r6
 801e696:	4798      	blx	r3
 801e698:	2800      	cmp	r0, #0
 801e69a:	d0e9      	beq.n	801e670 <__ssvfiscanf_r+0x44>
 801e69c:	e7ed      	b.n	801e67a <__ssvfiscanf_r+0x4e>
 801e69e:	2b25      	cmp	r3, #37	; 0x25
 801e6a0:	d012      	beq.n	801e6c8 <__ssvfiscanf_r+0x9c>
 801e6a2:	469a      	mov	sl, r3
 801e6a4:	6863      	ldr	r3, [r4, #4]
 801e6a6:	2b00      	cmp	r3, #0
 801e6a8:	f340 8091 	ble.w	801e7ce <__ssvfiscanf_r+0x1a2>
 801e6ac:	6822      	ldr	r2, [r4, #0]
 801e6ae:	7813      	ldrb	r3, [r2, #0]
 801e6b0:	4553      	cmp	r3, sl
 801e6b2:	f040 812e 	bne.w	801e912 <__ssvfiscanf_r+0x2e6>
 801e6b6:	6863      	ldr	r3, [r4, #4]
 801e6b8:	3b01      	subs	r3, #1
 801e6ba:	6063      	str	r3, [r4, #4]
 801e6bc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801e6be:	3201      	adds	r2, #1
 801e6c0:	3301      	adds	r3, #1
 801e6c2:	6022      	str	r2, [r4, #0]
 801e6c4:	9345      	str	r3, [sp, #276]	; 0x114
 801e6c6:	e7d8      	b.n	801e67a <__ssvfiscanf_r+0x4e>
 801e6c8:	9141      	str	r1, [sp, #260]	; 0x104
 801e6ca:	9143      	str	r1, [sp, #268]	; 0x10c
 801e6cc:	7853      	ldrb	r3, [r2, #1]
 801e6ce:	2b2a      	cmp	r3, #42	; 0x2a
 801e6d0:	bf02      	ittt	eq
 801e6d2:	2310      	moveq	r3, #16
 801e6d4:	1c95      	addeq	r5, r2, #2
 801e6d6:	9341      	streq	r3, [sp, #260]	; 0x104
 801e6d8:	220a      	movs	r2, #10
 801e6da:	46aa      	mov	sl, r5
 801e6dc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801e6e0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801e6e4:	2b09      	cmp	r3, #9
 801e6e6:	d91c      	bls.n	801e722 <__ssvfiscanf_r+0xf6>
 801e6e8:	487e      	ldr	r0, [pc, #504]	; (801e8e4 <__ssvfiscanf_r+0x2b8>)
 801e6ea:	2203      	movs	r2, #3
 801e6ec:	f7e1 fe20 	bl	8000330 <memchr>
 801e6f0:	b138      	cbz	r0, 801e702 <__ssvfiscanf_r+0xd6>
 801e6f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e6f4:	eba0 0009 	sub.w	r0, r0, r9
 801e6f8:	2301      	movs	r3, #1
 801e6fa:	4083      	lsls	r3, r0
 801e6fc:	4313      	orrs	r3, r2
 801e6fe:	9341      	str	r3, [sp, #260]	; 0x104
 801e700:	4655      	mov	r5, sl
 801e702:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e706:	2b78      	cmp	r3, #120	; 0x78
 801e708:	d806      	bhi.n	801e718 <__ssvfiscanf_r+0xec>
 801e70a:	2b57      	cmp	r3, #87	; 0x57
 801e70c:	d810      	bhi.n	801e730 <__ssvfiscanf_r+0x104>
 801e70e:	2b25      	cmp	r3, #37	; 0x25
 801e710:	d0c7      	beq.n	801e6a2 <__ssvfiscanf_r+0x76>
 801e712:	d857      	bhi.n	801e7c4 <__ssvfiscanf_r+0x198>
 801e714:	2b00      	cmp	r3, #0
 801e716:	d065      	beq.n	801e7e4 <__ssvfiscanf_r+0x1b8>
 801e718:	2303      	movs	r3, #3
 801e71a:	9347      	str	r3, [sp, #284]	; 0x11c
 801e71c:	230a      	movs	r3, #10
 801e71e:	9342      	str	r3, [sp, #264]	; 0x108
 801e720:	e076      	b.n	801e810 <__ssvfiscanf_r+0x1e4>
 801e722:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801e724:	fb02 1103 	mla	r1, r2, r3, r1
 801e728:	3930      	subs	r1, #48	; 0x30
 801e72a:	9143      	str	r1, [sp, #268]	; 0x10c
 801e72c:	4655      	mov	r5, sl
 801e72e:	e7d4      	b.n	801e6da <__ssvfiscanf_r+0xae>
 801e730:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801e734:	2a20      	cmp	r2, #32
 801e736:	d8ef      	bhi.n	801e718 <__ssvfiscanf_r+0xec>
 801e738:	a101      	add	r1, pc, #4	; (adr r1, 801e740 <__ssvfiscanf_r+0x114>)
 801e73a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e73e:	bf00      	nop
 801e740:	0801e7f3 	.word	0x0801e7f3
 801e744:	0801e719 	.word	0x0801e719
 801e748:	0801e719 	.word	0x0801e719
 801e74c:	0801e851 	.word	0x0801e851
 801e750:	0801e719 	.word	0x0801e719
 801e754:	0801e719 	.word	0x0801e719
 801e758:	0801e719 	.word	0x0801e719
 801e75c:	0801e719 	.word	0x0801e719
 801e760:	0801e719 	.word	0x0801e719
 801e764:	0801e719 	.word	0x0801e719
 801e768:	0801e719 	.word	0x0801e719
 801e76c:	0801e867 	.word	0x0801e867
 801e770:	0801e84d 	.word	0x0801e84d
 801e774:	0801e7cb 	.word	0x0801e7cb
 801e778:	0801e7cb 	.word	0x0801e7cb
 801e77c:	0801e7cb 	.word	0x0801e7cb
 801e780:	0801e719 	.word	0x0801e719
 801e784:	0801e809 	.word	0x0801e809
 801e788:	0801e719 	.word	0x0801e719
 801e78c:	0801e719 	.word	0x0801e719
 801e790:	0801e719 	.word	0x0801e719
 801e794:	0801e719 	.word	0x0801e719
 801e798:	0801e877 	.word	0x0801e877
 801e79c:	0801e845 	.word	0x0801e845
 801e7a0:	0801e7eb 	.word	0x0801e7eb
 801e7a4:	0801e719 	.word	0x0801e719
 801e7a8:	0801e719 	.word	0x0801e719
 801e7ac:	0801e873 	.word	0x0801e873
 801e7b0:	0801e719 	.word	0x0801e719
 801e7b4:	0801e84d 	.word	0x0801e84d
 801e7b8:	0801e719 	.word	0x0801e719
 801e7bc:	0801e719 	.word	0x0801e719
 801e7c0:	0801e7f3 	.word	0x0801e7f3
 801e7c4:	3b45      	subs	r3, #69	; 0x45
 801e7c6:	2b02      	cmp	r3, #2
 801e7c8:	d8a6      	bhi.n	801e718 <__ssvfiscanf_r+0xec>
 801e7ca:	2305      	movs	r3, #5
 801e7cc:	e01f      	b.n	801e80e <__ssvfiscanf_r+0x1e2>
 801e7ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e7d0:	4621      	mov	r1, r4
 801e7d2:	4630      	mov	r0, r6
 801e7d4:	4798      	blx	r3
 801e7d6:	2800      	cmp	r0, #0
 801e7d8:	f43f af68 	beq.w	801e6ac <__ssvfiscanf_r+0x80>
 801e7dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e7de:	2800      	cmp	r0, #0
 801e7e0:	f040 808d 	bne.w	801e8fe <__ssvfiscanf_r+0x2d2>
 801e7e4:	f04f 30ff 	mov.w	r0, #4294967295
 801e7e8:	e08f      	b.n	801e90a <__ssvfiscanf_r+0x2de>
 801e7ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e7ec:	f042 0220 	orr.w	r2, r2, #32
 801e7f0:	9241      	str	r2, [sp, #260]	; 0x104
 801e7f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e7f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e7f8:	9241      	str	r2, [sp, #260]	; 0x104
 801e7fa:	2210      	movs	r2, #16
 801e7fc:	2b6f      	cmp	r3, #111	; 0x6f
 801e7fe:	9242      	str	r2, [sp, #264]	; 0x108
 801e800:	bf34      	ite	cc
 801e802:	2303      	movcc	r3, #3
 801e804:	2304      	movcs	r3, #4
 801e806:	e002      	b.n	801e80e <__ssvfiscanf_r+0x1e2>
 801e808:	2300      	movs	r3, #0
 801e80a:	9342      	str	r3, [sp, #264]	; 0x108
 801e80c:	2303      	movs	r3, #3
 801e80e:	9347      	str	r3, [sp, #284]	; 0x11c
 801e810:	6863      	ldr	r3, [r4, #4]
 801e812:	2b00      	cmp	r3, #0
 801e814:	dd3d      	ble.n	801e892 <__ssvfiscanf_r+0x266>
 801e816:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e818:	0659      	lsls	r1, r3, #25
 801e81a:	d404      	bmi.n	801e826 <__ssvfiscanf_r+0x1fa>
 801e81c:	6823      	ldr	r3, [r4, #0]
 801e81e:	781a      	ldrb	r2, [r3, #0]
 801e820:	5cba      	ldrb	r2, [r7, r2]
 801e822:	0712      	lsls	r2, r2, #28
 801e824:	d43c      	bmi.n	801e8a0 <__ssvfiscanf_r+0x274>
 801e826:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801e828:	2b02      	cmp	r3, #2
 801e82a:	dc4b      	bgt.n	801e8c4 <__ssvfiscanf_r+0x298>
 801e82c:	466b      	mov	r3, sp
 801e82e:	4622      	mov	r2, r4
 801e830:	a941      	add	r1, sp, #260	; 0x104
 801e832:	4630      	mov	r0, r6
 801e834:	f000 f872 	bl	801e91c <_scanf_chars>
 801e838:	2801      	cmp	r0, #1
 801e83a:	d06a      	beq.n	801e912 <__ssvfiscanf_r+0x2e6>
 801e83c:	2802      	cmp	r0, #2
 801e83e:	f47f af1c 	bne.w	801e67a <__ssvfiscanf_r+0x4e>
 801e842:	e7cb      	b.n	801e7dc <__ssvfiscanf_r+0x1b0>
 801e844:	2308      	movs	r3, #8
 801e846:	9342      	str	r3, [sp, #264]	; 0x108
 801e848:	2304      	movs	r3, #4
 801e84a:	e7e0      	b.n	801e80e <__ssvfiscanf_r+0x1e2>
 801e84c:	220a      	movs	r2, #10
 801e84e:	e7d5      	b.n	801e7fc <__ssvfiscanf_r+0x1d0>
 801e850:	4629      	mov	r1, r5
 801e852:	4640      	mov	r0, r8
 801e854:	f000 fa5e 	bl	801ed14 <__sccl>
 801e858:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e85a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e85e:	9341      	str	r3, [sp, #260]	; 0x104
 801e860:	4605      	mov	r5, r0
 801e862:	2301      	movs	r3, #1
 801e864:	e7d3      	b.n	801e80e <__ssvfiscanf_r+0x1e2>
 801e866:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e86c:	9341      	str	r3, [sp, #260]	; 0x104
 801e86e:	2300      	movs	r3, #0
 801e870:	e7cd      	b.n	801e80e <__ssvfiscanf_r+0x1e2>
 801e872:	2302      	movs	r3, #2
 801e874:	e7cb      	b.n	801e80e <__ssvfiscanf_r+0x1e2>
 801e876:	9841      	ldr	r0, [sp, #260]	; 0x104
 801e878:	06c3      	lsls	r3, r0, #27
 801e87a:	f53f aefe 	bmi.w	801e67a <__ssvfiscanf_r+0x4e>
 801e87e:	9b00      	ldr	r3, [sp, #0]
 801e880:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e882:	1d19      	adds	r1, r3, #4
 801e884:	9100      	str	r1, [sp, #0]
 801e886:	681b      	ldr	r3, [r3, #0]
 801e888:	07c0      	lsls	r0, r0, #31
 801e88a:	bf4c      	ite	mi
 801e88c:	801a      	strhmi	r2, [r3, #0]
 801e88e:	601a      	strpl	r2, [r3, #0]
 801e890:	e6f3      	b.n	801e67a <__ssvfiscanf_r+0x4e>
 801e892:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e894:	4621      	mov	r1, r4
 801e896:	4630      	mov	r0, r6
 801e898:	4798      	blx	r3
 801e89a:	2800      	cmp	r0, #0
 801e89c:	d0bb      	beq.n	801e816 <__ssvfiscanf_r+0x1ea>
 801e89e:	e79d      	b.n	801e7dc <__ssvfiscanf_r+0x1b0>
 801e8a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e8a2:	3201      	adds	r2, #1
 801e8a4:	9245      	str	r2, [sp, #276]	; 0x114
 801e8a6:	6862      	ldr	r2, [r4, #4]
 801e8a8:	3a01      	subs	r2, #1
 801e8aa:	2a00      	cmp	r2, #0
 801e8ac:	6062      	str	r2, [r4, #4]
 801e8ae:	dd02      	ble.n	801e8b6 <__ssvfiscanf_r+0x28a>
 801e8b0:	3301      	adds	r3, #1
 801e8b2:	6023      	str	r3, [r4, #0]
 801e8b4:	e7b2      	b.n	801e81c <__ssvfiscanf_r+0x1f0>
 801e8b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e8b8:	4621      	mov	r1, r4
 801e8ba:	4630      	mov	r0, r6
 801e8bc:	4798      	blx	r3
 801e8be:	2800      	cmp	r0, #0
 801e8c0:	d0ac      	beq.n	801e81c <__ssvfiscanf_r+0x1f0>
 801e8c2:	e78b      	b.n	801e7dc <__ssvfiscanf_r+0x1b0>
 801e8c4:	2b04      	cmp	r3, #4
 801e8c6:	dc0f      	bgt.n	801e8e8 <__ssvfiscanf_r+0x2bc>
 801e8c8:	466b      	mov	r3, sp
 801e8ca:	4622      	mov	r2, r4
 801e8cc:	a941      	add	r1, sp, #260	; 0x104
 801e8ce:	4630      	mov	r0, r6
 801e8d0:	f000 f87e 	bl	801e9d0 <_scanf_i>
 801e8d4:	e7b0      	b.n	801e838 <__ssvfiscanf_r+0x20c>
 801e8d6:	bf00      	nop
 801e8d8:	0801e579 	.word	0x0801e579
 801e8dc:	0801e5f3 	.word	0x0801e5f3
 801e8e0:	080206b9 	.word	0x080206b9
 801e8e4:	080207bf 	.word	0x080207bf
 801e8e8:	4b0b      	ldr	r3, [pc, #44]	; (801e918 <__ssvfiscanf_r+0x2ec>)
 801e8ea:	2b00      	cmp	r3, #0
 801e8ec:	f43f aec5 	beq.w	801e67a <__ssvfiscanf_r+0x4e>
 801e8f0:	466b      	mov	r3, sp
 801e8f2:	4622      	mov	r2, r4
 801e8f4:	a941      	add	r1, sp, #260	; 0x104
 801e8f6:	4630      	mov	r0, r6
 801e8f8:	f7fc fefc 	bl	801b6f4 <_scanf_float>
 801e8fc:	e79c      	b.n	801e838 <__ssvfiscanf_r+0x20c>
 801e8fe:	89a3      	ldrh	r3, [r4, #12]
 801e900:	f013 0f40 	tst.w	r3, #64	; 0x40
 801e904:	bf18      	it	ne
 801e906:	f04f 30ff 	movne.w	r0, #4294967295
 801e90a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801e90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e912:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e914:	e7f9      	b.n	801e90a <__ssvfiscanf_r+0x2de>
 801e916:	bf00      	nop
 801e918:	0801b6f5 	.word	0x0801b6f5

0801e91c <_scanf_chars>:
 801e91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e920:	4615      	mov	r5, r2
 801e922:	688a      	ldr	r2, [r1, #8]
 801e924:	4680      	mov	r8, r0
 801e926:	460c      	mov	r4, r1
 801e928:	b932      	cbnz	r2, 801e938 <_scanf_chars+0x1c>
 801e92a:	698a      	ldr	r2, [r1, #24]
 801e92c:	2a00      	cmp	r2, #0
 801e92e:	bf0c      	ite	eq
 801e930:	2201      	moveq	r2, #1
 801e932:	f04f 32ff 	movne.w	r2, #4294967295
 801e936:	608a      	str	r2, [r1, #8]
 801e938:	6822      	ldr	r2, [r4, #0]
 801e93a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801e9cc <_scanf_chars+0xb0>
 801e93e:	06d1      	lsls	r1, r2, #27
 801e940:	bf5f      	itttt	pl
 801e942:	681a      	ldrpl	r2, [r3, #0]
 801e944:	1d11      	addpl	r1, r2, #4
 801e946:	6019      	strpl	r1, [r3, #0]
 801e948:	6816      	ldrpl	r6, [r2, #0]
 801e94a:	2700      	movs	r7, #0
 801e94c:	69a0      	ldr	r0, [r4, #24]
 801e94e:	b188      	cbz	r0, 801e974 <_scanf_chars+0x58>
 801e950:	2801      	cmp	r0, #1
 801e952:	d107      	bne.n	801e964 <_scanf_chars+0x48>
 801e954:	682a      	ldr	r2, [r5, #0]
 801e956:	7811      	ldrb	r1, [r2, #0]
 801e958:	6962      	ldr	r2, [r4, #20]
 801e95a:	5c52      	ldrb	r2, [r2, r1]
 801e95c:	b952      	cbnz	r2, 801e974 <_scanf_chars+0x58>
 801e95e:	2f00      	cmp	r7, #0
 801e960:	d031      	beq.n	801e9c6 <_scanf_chars+0xaa>
 801e962:	e022      	b.n	801e9aa <_scanf_chars+0x8e>
 801e964:	2802      	cmp	r0, #2
 801e966:	d120      	bne.n	801e9aa <_scanf_chars+0x8e>
 801e968:	682b      	ldr	r3, [r5, #0]
 801e96a:	781b      	ldrb	r3, [r3, #0]
 801e96c:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e970:	071b      	lsls	r3, r3, #28
 801e972:	d41a      	bmi.n	801e9aa <_scanf_chars+0x8e>
 801e974:	6823      	ldr	r3, [r4, #0]
 801e976:	06da      	lsls	r2, r3, #27
 801e978:	bf5e      	ittt	pl
 801e97a:	682b      	ldrpl	r3, [r5, #0]
 801e97c:	781b      	ldrbpl	r3, [r3, #0]
 801e97e:	f806 3b01 	strbpl.w	r3, [r6], #1
 801e982:	682a      	ldr	r2, [r5, #0]
 801e984:	686b      	ldr	r3, [r5, #4]
 801e986:	3201      	adds	r2, #1
 801e988:	602a      	str	r2, [r5, #0]
 801e98a:	68a2      	ldr	r2, [r4, #8]
 801e98c:	3b01      	subs	r3, #1
 801e98e:	3a01      	subs	r2, #1
 801e990:	606b      	str	r3, [r5, #4]
 801e992:	3701      	adds	r7, #1
 801e994:	60a2      	str	r2, [r4, #8]
 801e996:	b142      	cbz	r2, 801e9aa <_scanf_chars+0x8e>
 801e998:	2b00      	cmp	r3, #0
 801e99a:	dcd7      	bgt.n	801e94c <_scanf_chars+0x30>
 801e99c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801e9a0:	4629      	mov	r1, r5
 801e9a2:	4640      	mov	r0, r8
 801e9a4:	4798      	blx	r3
 801e9a6:	2800      	cmp	r0, #0
 801e9a8:	d0d0      	beq.n	801e94c <_scanf_chars+0x30>
 801e9aa:	6823      	ldr	r3, [r4, #0]
 801e9ac:	f013 0310 	ands.w	r3, r3, #16
 801e9b0:	d105      	bne.n	801e9be <_scanf_chars+0xa2>
 801e9b2:	68e2      	ldr	r2, [r4, #12]
 801e9b4:	3201      	adds	r2, #1
 801e9b6:	60e2      	str	r2, [r4, #12]
 801e9b8:	69a2      	ldr	r2, [r4, #24]
 801e9ba:	b102      	cbz	r2, 801e9be <_scanf_chars+0xa2>
 801e9bc:	7033      	strb	r3, [r6, #0]
 801e9be:	6923      	ldr	r3, [r4, #16]
 801e9c0:	443b      	add	r3, r7
 801e9c2:	6123      	str	r3, [r4, #16]
 801e9c4:	2000      	movs	r0, #0
 801e9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e9ca:	bf00      	nop
 801e9cc:	080206b9 	.word	0x080206b9

0801e9d0 <_scanf_i>:
 801e9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9d4:	4698      	mov	r8, r3
 801e9d6:	4b74      	ldr	r3, [pc, #464]	; (801eba8 <_scanf_i+0x1d8>)
 801e9d8:	460c      	mov	r4, r1
 801e9da:	4682      	mov	sl, r0
 801e9dc:	4616      	mov	r6, r2
 801e9de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e9e2:	b087      	sub	sp, #28
 801e9e4:	ab03      	add	r3, sp, #12
 801e9e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801e9ea:	4b70      	ldr	r3, [pc, #448]	; (801ebac <_scanf_i+0x1dc>)
 801e9ec:	69a1      	ldr	r1, [r4, #24]
 801e9ee:	4a70      	ldr	r2, [pc, #448]	; (801ebb0 <_scanf_i+0x1e0>)
 801e9f0:	2903      	cmp	r1, #3
 801e9f2:	bf18      	it	ne
 801e9f4:	461a      	movne	r2, r3
 801e9f6:	68a3      	ldr	r3, [r4, #8]
 801e9f8:	9201      	str	r2, [sp, #4]
 801e9fa:	1e5a      	subs	r2, r3, #1
 801e9fc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801ea00:	bf88      	it	hi
 801ea02:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801ea06:	4627      	mov	r7, r4
 801ea08:	bf82      	ittt	hi
 801ea0a:	eb03 0905 	addhi.w	r9, r3, r5
 801ea0e:	f240 135d 	movwhi	r3, #349	; 0x15d
 801ea12:	60a3      	strhi	r3, [r4, #8]
 801ea14:	f857 3b1c 	ldr.w	r3, [r7], #28
 801ea18:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801ea1c:	bf98      	it	ls
 801ea1e:	f04f 0900 	movls.w	r9, #0
 801ea22:	6023      	str	r3, [r4, #0]
 801ea24:	463d      	mov	r5, r7
 801ea26:	f04f 0b00 	mov.w	fp, #0
 801ea2a:	6831      	ldr	r1, [r6, #0]
 801ea2c:	ab03      	add	r3, sp, #12
 801ea2e:	7809      	ldrb	r1, [r1, #0]
 801ea30:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801ea34:	2202      	movs	r2, #2
 801ea36:	f7e1 fc7b 	bl	8000330 <memchr>
 801ea3a:	b328      	cbz	r0, 801ea88 <_scanf_i+0xb8>
 801ea3c:	f1bb 0f01 	cmp.w	fp, #1
 801ea40:	d159      	bne.n	801eaf6 <_scanf_i+0x126>
 801ea42:	6862      	ldr	r2, [r4, #4]
 801ea44:	b92a      	cbnz	r2, 801ea52 <_scanf_i+0x82>
 801ea46:	6822      	ldr	r2, [r4, #0]
 801ea48:	2308      	movs	r3, #8
 801ea4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ea4e:	6063      	str	r3, [r4, #4]
 801ea50:	6022      	str	r2, [r4, #0]
 801ea52:	6822      	ldr	r2, [r4, #0]
 801ea54:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801ea58:	6022      	str	r2, [r4, #0]
 801ea5a:	68a2      	ldr	r2, [r4, #8]
 801ea5c:	1e51      	subs	r1, r2, #1
 801ea5e:	60a1      	str	r1, [r4, #8]
 801ea60:	b192      	cbz	r2, 801ea88 <_scanf_i+0xb8>
 801ea62:	6832      	ldr	r2, [r6, #0]
 801ea64:	1c51      	adds	r1, r2, #1
 801ea66:	6031      	str	r1, [r6, #0]
 801ea68:	7812      	ldrb	r2, [r2, #0]
 801ea6a:	f805 2b01 	strb.w	r2, [r5], #1
 801ea6e:	6872      	ldr	r2, [r6, #4]
 801ea70:	3a01      	subs	r2, #1
 801ea72:	2a00      	cmp	r2, #0
 801ea74:	6072      	str	r2, [r6, #4]
 801ea76:	dc07      	bgt.n	801ea88 <_scanf_i+0xb8>
 801ea78:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801ea7c:	4631      	mov	r1, r6
 801ea7e:	4650      	mov	r0, sl
 801ea80:	4790      	blx	r2
 801ea82:	2800      	cmp	r0, #0
 801ea84:	f040 8085 	bne.w	801eb92 <_scanf_i+0x1c2>
 801ea88:	f10b 0b01 	add.w	fp, fp, #1
 801ea8c:	f1bb 0f03 	cmp.w	fp, #3
 801ea90:	d1cb      	bne.n	801ea2a <_scanf_i+0x5a>
 801ea92:	6863      	ldr	r3, [r4, #4]
 801ea94:	b90b      	cbnz	r3, 801ea9a <_scanf_i+0xca>
 801ea96:	230a      	movs	r3, #10
 801ea98:	6063      	str	r3, [r4, #4]
 801ea9a:	6863      	ldr	r3, [r4, #4]
 801ea9c:	4945      	ldr	r1, [pc, #276]	; (801ebb4 <_scanf_i+0x1e4>)
 801ea9e:	6960      	ldr	r0, [r4, #20]
 801eaa0:	1ac9      	subs	r1, r1, r3
 801eaa2:	f000 f937 	bl	801ed14 <__sccl>
 801eaa6:	f04f 0b00 	mov.w	fp, #0
 801eaaa:	68a3      	ldr	r3, [r4, #8]
 801eaac:	6822      	ldr	r2, [r4, #0]
 801eaae:	2b00      	cmp	r3, #0
 801eab0:	d03d      	beq.n	801eb2e <_scanf_i+0x15e>
 801eab2:	6831      	ldr	r1, [r6, #0]
 801eab4:	6960      	ldr	r0, [r4, #20]
 801eab6:	f891 c000 	ldrb.w	ip, [r1]
 801eaba:	f810 000c 	ldrb.w	r0, [r0, ip]
 801eabe:	2800      	cmp	r0, #0
 801eac0:	d035      	beq.n	801eb2e <_scanf_i+0x15e>
 801eac2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801eac6:	d124      	bne.n	801eb12 <_scanf_i+0x142>
 801eac8:	0510      	lsls	r0, r2, #20
 801eaca:	d522      	bpl.n	801eb12 <_scanf_i+0x142>
 801eacc:	f10b 0b01 	add.w	fp, fp, #1
 801ead0:	f1b9 0f00 	cmp.w	r9, #0
 801ead4:	d003      	beq.n	801eade <_scanf_i+0x10e>
 801ead6:	3301      	adds	r3, #1
 801ead8:	f109 39ff 	add.w	r9, r9, #4294967295
 801eadc:	60a3      	str	r3, [r4, #8]
 801eade:	6873      	ldr	r3, [r6, #4]
 801eae0:	3b01      	subs	r3, #1
 801eae2:	2b00      	cmp	r3, #0
 801eae4:	6073      	str	r3, [r6, #4]
 801eae6:	dd1b      	ble.n	801eb20 <_scanf_i+0x150>
 801eae8:	6833      	ldr	r3, [r6, #0]
 801eaea:	3301      	adds	r3, #1
 801eaec:	6033      	str	r3, [r6, #0]
 801eaee:	68a3      	ldr	r3, [r4, #8]
 801eaf0:	3b01      	subs	r3, #1
 801eaf2:	60a3      	str	r3, [r4, #8]
 801eaf4:	e7d9      	b.n	801eaaa <_scanf_i+0xda>
 801eaf6:	f1bb 0f02 	cmp.w	fp, #2
 801eafa:	d1ae      	bne.n	801ea5a <_scanf_i+0x8a>
 801eafc:	6822      	ldr	r2, [r4, #0]
 801eafe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801eb02:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801eb06:	d1bf      	bne.n	801ea88 <_scanf_i+0xb8>
 801eb08:	2310      	movs	r3, #16
 801eb0a:	6063      	str	r3, [r4, #4]
 801eb0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801eb10:	e7a2      	b.n	801ea58 <_scanf_i+0x88>
 801eb12:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801eb16:	6022      	str	r2, [r4, #0]
 801eb18:	780b      	ldrb	r3, [r1, #0]
 801eb1a:	f805 3b01 	strb.w	r3, [r5], #1
 801eb1e:	e7de      	b.n	801eade <_scanf_i+0x10e>
 801eb20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801eb24:	4631      	mov	r1, r6
 801eb26:	4650      	mov	r0, sl
 801eb28:	4798      	blx	r3
 801eb2a:	2800      	cmp	r0, #0
 801eb2c:	d0df      	beq.n	801eaee <_scanf_i+0x11e>
 801eb2e:	6823      	ldr	r3, [r4, #0]
 801eb30:	05d9      	lsls	r1, r3, #23
 801eb32:	d50d      	bpl.n	801eb50 <_scanf_i+0x180>
 801eb34:	42bd      	cmp	r5, r7
 801eb36:	d909      	bls.n	801eb4c <_scanf_i+0x17c>
 801eb38:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801eb3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801eb40:	4632      	mov	r2, r6
 801eb42:	4650      	mov	r0, sl
 801eb44:	4798      	blx	r3
 801eb46:	f105 39ff 	add.w	r9, r5, #4294967295
 801eb4a:	464d      	mov	r5, r9
 801eb4c:	42bd      	cmp	r5, r7
 801eb4e:	d028      	beq.n	801eba2 <_scanf_i+0x1d2>
 801eb50:	6822      	ldr	r2, [r4, #0]
 801eb52:	f012 0210 	ands.w	r2, r2, #16
 801eb56:	d113      	bne.n	801eb80 <_scanf_i+0x1b0>
 801eb58:	702a      	strb	r2, [r5, #0]
 801eb5a:	6863      	ldr	r3, [r4, #4]
 801eb5c:	9e01      	ldr	r6, [sp, #4]
 801eb5e:	4639      	mov	r1, r7
 801eb60:	4650      	mov	r0, sl
 801eb62:	47b0      	blx	r6
 801eb64:	f8d8 3000 	ldr.w	r3, [r8]
 801eb68:	6821      	ldr	r1, [r4, #0]
 801eb6a:	1d1a      	adds	r2, r3, #4
 801eb6c:	f8c8 2000 	str.w	r2, [r8]
 801eb70:	f011 0f20 	tst.w	r1, #32
 801eb74:	681b      	ldr	r3, [r3, #0]
 801eb76:	d00f      	beq.n	801eb98 <_scanf_i+0x1c8>
 801eb78:	6018      	str	r0, [r3, #0]
 801eb7a:	68e3      	ldr	r3, [r4, #12]
 801eb7c:	3301      	adds	r3, #1
 801eb7e:	60e3      	str	r3, [r4, #12]
 801eb80:	6923      	ldr	r3, [r4, #16]
 801eb82:	1bed      	subs	r5, r5, r7
 801eb84:	445d      	add	r5, fp
 801eb86:	442b      	add	r3, r5
 801eb88:	6123      	str	r3, [r4, #16]
 801eb8a:	2000      	movs	r0, #0
 801eb8c:	b007      	add	sp, #28
 801eb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb92:	f04f 0b00 	mov.w	fp, #0
 801eb96:	e7ca      	b.n	801eb2e <_scanf_i+0x15e>
 801eb98:	07ca      	lsls	r2, r1, #31
 801eb9a:	bf4c      	ite	mi
 801eb9c:	8018      	strhmi	r0, [r3, #0]
 801eb9e:	6018      	strpl	r0, [r3, #0]
 801eba0:	e7eb      	b.n	801eb7a <_scanf_i+0x1aa>
 801eba2:	2001      	movs	r0, #1
 801eba4:	e7f2      	b.n	801eb8c <_scanf_i+0x1bc>
 801eba6:	bf00      	nop
 801eba8:	0801ff34 	.word	0x0801ff34
 801ebac:	0801f705 	.word	0x0801f705
 801ebb0:	0801e2c5 	.word	0x0801e2c5
 801ebb4:	080207da 	.word	0x080207da

0801ebb8 <__sflush_r>:
 801ebb8:	898a      	ldrh	r2, [r1, #12]
 801ebba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ebbe:	4605      	mov	r5, r0
 801ebc0:	0710      	lsls	r0, r2, #28
 801ebc2:	460c      	mov	r4, r1
 801ebc4:	d458      	bmi.n	801ec78 <__sflush_r+0xc0>
 801ebc6:	684b      	ldr	r3, [r1, #4]
 801ebc8:	2b00      	cmp	r3, #0
 801ebca:	dc05      	bgt.n	801ebd8 <__sflush_r+0x20>
 801ebcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ebce:	2b00      	cmp	r3, #0
 801ebd0:	dc02      	bgt.n	801ebd8 <__sflush_r+0x20>
 801ebd2:	2000      	movs	r0, #0
 801ebd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ebd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ebda:	2e00      	cmp	r6, #0
 801ebdc:	d0f9      	beq.n	801ebd2 <__sflush_r+0x1a>
 801ebde:	2300      	movs	r3, #0
 801ebe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ebe4:	682f      	ldr	r7, [r5, #0]
 801ebe6:	6a21      	ldr	r1, [r4, #32]
 801ebe8:	602b      	str	r3, [r5, #0]
 801ebea:	d032      	beq.n	801ec52 <__sflush_r+0x9a>
 801ebec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ebee:	89a3      	ldrh	r3, [r4, #12]
 801ebf0:	075a      	lsls	r2, r3, #29
 801ebf2:	d505      	bpl.n	801ec00 <__sflush_r+0x48>
 801ebf4:	6863      	ldr	r3, [r4, #4]
 801ebf6:	1ac0      	subs	r0, r0, r3
 801ebf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ebfa:	b10b      	cbz	r3, 801ec00 <__sflush_r+0x48>
 801ebfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ebfe:	1ac0      	subs	r0, r0, r3
 801ec00:	2300      	movs	r3, #0
 801ec02:	4602      	mov	r2, r0
 801ec04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ec06:	6a21      	ldr	r1, [r4, #32]
 801ec08:	4628      	mov	r0, r5
 801ec0a:	47b0      	blx	r6
 801ec0c:	1c43      	adds	r3, r0, #1
 801ec0e:	89a3      	ldrh	r3, [r4, #12]
 801ec10:	d106      	bne.n	801ec20 <__sflush_r+0x68>
 801ec12:	6829      	ldr	r1, [r5, #0]
 801ec14:	291d      	cmp	r1, #29
 801ec16:	d82b      	bhi.n	801ec70 <__sflush_r+0xb8>
 801ec18:	4a29      	ldr	r2, [pc, #164]	; (801ecc0 <__sflush_r+0x108>)
 801ec1a:	410a      	asrs	r2, r1
 801ec1c:	07d6      	lsls	r6, r2, #31
 801ec1e:	d427      	bmi.n	801ec70 <__sflush_r+0xb8>
 801ec20:	2200      	movs	r2, #0
 801ec22:	6062      	str	r2, [r4, #4]
 801ec24:	04d9      	lsls	r1, r3, #19
 801ec26:	6922      	ldr	r2, [r4, #16]
 801ec28:	6022      	str	r2, [r4, #0]
 801ec2a:	d504      	bpl.n	801ec36 <__sflush_r+0x7e>
 801ec2c:	1c42      	adds	r2, r0, #1
 801ec2e:	d101      	bne.n	801ec34 <__sflush_r+0x7c>
 801ec30:	682b      	ldr	r3, [r5, #0]
 801ec32:	b903      	cbnz	r3, 801ec36 <__sflush_r+0x7e>
 801ec34:	6560      	str	r0, [r4, #84]	; 0x54
 801ec36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ec38:	602f      	str	r7, [r5, #0]
 801ec3a:	2900      	cmp	r1, #0
 801ec3c:	d0c9      	beq.n	801ebd2 <__sflush_r+0x1a>
 801ec3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ec42:	4299      	cmp	r1, r3
 801ec44:	d002      	beq.n	801ec4c <__sflush_r+0x94>
 801ec46:	4628      	mov	r0, r5
 801ec48:	f7fd ff3e 	bl	801cac8 <_free_r>
 801ec4c:	2000      	movs	r0, #0
 801ec4e:	6360      	str	r0, [r4, #52]	; 0x34
 801ec50:	e7c0      	b.n	801ebd4 <__sflush_r+0x1c>
 801ec52:	2301      	movs	r3, #1
 801ec54:	4628      	mov	r0, r5
 801ec56:	47b0      	blx	r6
 801ec58:	1c41      	adds	r1, r0, #1
 801ec5a:	d1c8      	bne.n	801ebee <__sflush_r+0x36>
 801ec5c:	682b      	ldr	r3, [r5, #0]
 801ec5e:	2b00      	cmp	r3, #0
 801ec60:	d0c5      	beq.n	801ebee <__sflush_r+0x36>
 801ec62:	2b1d      	cmp	r3, #29
 801ec64:	d001      	beq.n	801ec6a <__sflush_r+0xb2>
 801ec66:	2b16      	cmp	r3, #22
 801ec68:	d101      	bne.n	801ec6e <__sflush_r+0xb6>
 801ec6a:	602f      	str	r7, [r5, #0]
 801ec6c:	e7b1      	b.n	801ebd2 <__sflush_r+0x1a>
 801ec6e:	89a3      	ldrh	r3, [r4, #12]
 801ec70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ec74:	81a3      	strh	r3, [r4, #12]
 801ec76:	e7ad      	b.n	801ebd4 <__sflush_r+0x1c>
 801ec78:	690f      	ldr	r7, [r1, #16]
 801ec7a:	2f00      	cmp	r7, #0
 801ec7c:	d0a9      	beq.n	801ebd2 <__sflush_r+0x1a>
 801ec7e:	0793      	lsls	r3, r2, #30
 801ec80:	680e      	ldr	r6, [r1, #0]
 801ec82:	bf08      	it	eq
 801ec84:	694b      	ldreq	r3, [r1, #20]
 801ec86:	600f      	str	r7, [r1, #0]
 801ec88:	bf18      	it	ne
 801ec8a:	2300      	movne	r3, #0
 801ec8c:	eba6 0807 	sub.w	r8, r6, r7
 801ec90:	608b      	str	r3, [r1, #8]
 801ec92:	f1b8 0f00 	cmp.w	r8, #0
 801ec96:	dd9c      	ble.n	801ebd2 <__sflush_r+0x1a>
 801ec98:	6a21      	ldr	r1, [r4, #32]
 801ec9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ec9c:	4643      	mov	r3, r8
 801ec9e:	463a      	mov	r2, r7
 801eca0:	4628      	mov	r0, r5
 801eca2:	47b0      	blx	r6
 801eca4:	2800      	cmp	r0, #0
 801eca6:	dc06      	bgt.n	801ecb6 <__sflush_r+0xfe>
 801eca8:	89a3      	ldrh	r3, [r4, #12]
 801ecaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ecae:	81a3      	strh	r3, [r4, #12]
 801ecb0:	f04f 30ff 	mov.w	r0, #4294967295
 801ecb4:	e78e      	b.n	801ebd4 <__sflush_r+0x1c>
 801ecb6:	4407      	add	r7, r0
 801ecb8:	eba8 0800 	sub.w	r8, r8, r0
 801ecbc:	e7e9      	b.n	801ec92 <__sflush_r+0xda>
 801ecbe:	bf00      	nop
 801ecc0:	dfbffffe 	.word	0xdfbffffe

0801ecc4 <_fflush_r>:
 801ecc4:	b538      	push	{r3, r4, r5, lr}
 801ecc6:	690b      	ldr	r3, [r1, #16]
 801ecc8:	4605      	mov	r5, r0
 801ecca:	460c      	mov	r4, r1
 801eccc:	b913      	cbnz	r3, 801ecd4 <_fflush_r+0x10>
 801ecce:	2500      	movs	r5, #0
 801ecd0:	4628      	mov	r0, r5
 801ecd2:	bd38      	pop	{r3, r4, r5, pc}
 801ecd4:	b118      	cbz	r0, 801ecde <_fflush_r+0x1a>
 801ecd6:	6a03      	ldr	r3, [r0, #32]
 801ecd8:	b90b      	cbnz	r3, 801ecde <_fflush_r+0x1a>
 801ecda:	f7fc ff9b 	bl	801bc14 <__sinit>
 801ecde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ece2:	2b00      	cmp	r3, #0
 801ece4:	d0f3      	beq.n	801ecce <_fflush_r+0xa>
 801ece6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ece8:	07d0      	lsls	r0, r2, #31
 801ecea:	d404      	bmi.n	801ecf6 <_fflush_r+0x32>
 801ecec:	0599      	lsls	r1, r3, #22
 801ecee:	d402      	bmi.n	801ecf6 <_fflush_r+0x32>
 801ecf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ecf2:	f7fd f8d4 	bl	801be9e <__retarget_lock_acquire_recursive>
 801ecf6:	4628      	mov	r0, r5
 801ecf8:	4621      	mov	r1, r4
 801ecfa:	f7ff ff5d 	bl	801ebb8 <__sflush_r>
 801ecfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ed00:	07da      	lsls	r2, r3, #31
 801ed02:	4605      	mov	r5, r0
 801ed04:	d4e4      	bmi.n	801ecd0 <_fflush_r+0xc>
 801ed06:	89a3      	ldrh	r3, [r4, #12]
 801ed08:	059b      	lsls	r3, r3, #22
 801ed0a:	d4e1      	bmi.n	801ecd0 <_fflush_r+0xc>
 801ed0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ed0e:	f7fd f8c7 	bl	801bea0 <__retarget_lock_release_recursive>
 801ed12:	e7dd      	b.n	801ecd0 <_fflush_r+0xc>

0801ed14 <__sccl>:
 801ed14:	b570      	push	{r4, r5, r6, lr}
 801ed16:	780b      	ldrb	r3, [r1, #0]
 801ed18:	4604      	mov	r4, r0
 801ed1a:	2b5e      	cmp	r3, #94	; 0x5e
 801ed1c:	bf0b      	itete	eq
 801ed1e:	784b      	ldrbeq	r3, [r1, #1]
 801ed20:	1c4a      	addne	r2, r1, #1
 801ed22:	1c8a      	addeq	r2, r1, #2
 801ed24:	2100      	movne	r1, #0
 801ed26:	bf08      	it	eq
 801ed28:	2101      	moveq	r1, #1
 801ed2a:	3801      	subs	r0, #1
 801ed2c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801ed30:	f800 1f01 	strb.w	r1, [r0, #1]!
 801ed34:	42a8      	cmp	r0, r5
 801ed36:	d1fb      	bne.n	801ed30 <__sccl+0x1c>
 801ed38:	b90b      	cbnz	r3, 801ed3e <__sccl+0x2a>
 801ed3a:	1e50      	subs	r0, r2, #1
 801ed3c:	bd70      	pop	{r4, r5, r6, pc}
 801ed3e:	f081 0101 	eor.w	r1, r1, #1
 801ed42:	54e1      	strb	r1, [r4, r3]
 801ed44:	4610      	mov	r0, r2
 801ed46:	4602      	mov	r2, r0
 801ed48:	f812 5b01 	ldrb.w	r5, [r2], #1
 801ed4c:	2d2d      	cmp	r5, #45	; 0x2d
 801ed4e:	d005      	beq.n	801ed5c <__sccl+0x48>
 801ed50:	2d5d      	cmp	r5, #93	; 0x5d
 801ed52:	d016      	beq.n	801ed82 <__sccl+0x6e>
 801ed54:	2d00      	cmp	r5, #0
 801ed56:	d0f1      	beq.n	801ed3c <__sccl+0x28>
 801ed58:	462b      	mov	r3, r5
 801ed5a:	e7f2      	b.n	801ed42 <__sccl+0x2e>
 801ed5c:	7846      	ldrb	r6, [r0, #1]
 801ed5e:	2e5d      	cmp	r6, #93	; 0x5d
 801ed60:	d0fa      	beq.n	801ed58 <__sccl+0x44>
 801ed62:	42b3      	cmp	r3, r6
 801ed64:	dcf8      	bgt.n	801ed58 <__sccl+0x44>
 801ed66:	3002      	adds	r0, #2
 801ed68:	461a      	mov	r2, r3
 801ed6a:	3201      	adds	r2, #1
 801ed6c:	4296      	cmp	r6, r2
 801ed6e:	54a1      	strb	r1, [r4, r2]
 801ed70:	dcfb      	bgt.n	801ed6a <__sccl+0x56>
 801ed72:	1af2      	subs	r2, r6, r3
 801ed74:	3a01      	subs	r2, #1
 801ed76:	1c5d      	adds	r5, r3, #1
 801ed78:	42b3      	cmp	r3, r6
 801ed7a:	bfa8      	it	ge
 801ed7c:	2200      	movge	r2, #0
 801ed7e:	18ab      	adds	r3, r5, r2
 801ed80:	e7e1      	b.n	801ed46 <__sccl+0x32>
 801ed82:	4610      	mov	r0, r2
 801ed84:	e7da      	b.n	801ed3c <__sccl+0x28>

0801ed86 <__submore>:
 801ed86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed8a:	460c      	mov	r4, r1
 801ed8c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ed8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ed92:	4299      	cmp	r1, r3
 801ed94:	d11d      	bne.n	801edd2 <__submore+0x4c>
 801ed96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ed9a:	f7fd ff09 	bl	801cbb0 <_malloc_r>
 801ed9e:	b918      	cbnz	r0, 801eda8 <__submore+0x22>
 801eda0:	f04f 30ff 	mov.w	r0, #4294967295
 801eda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eda8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801edac:	63a3      	str	r3, [r4, #56]	; 0x38
 801edae:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801edb2:	6360      	str	r0, [r4, #52]	; 0x34
 801edb4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801edb8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801edbc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801edc0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801edc4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801edc8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801edcc:	6020      	str	r0, [r4, #0]
 801edce:	2000      	movs	r0, #0
 801edd0:	e7e8      	b.n	801eda4 <__submore+0x1e>
 801edd2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801edd4:	0077      	lsls	r7, r6, #1
 801edd6:	463a      	mov	r2, r7
 801edd8:	f000 fbf3 	bl	801f5c2 <_realloc_r>
 801eddc:	4605      	mov	r5, r0
 801edde:	2800      	cmp	r0, #0
 801ede0:	d0de      	beq.n	801eda0 <__submore+0x1a>
 801ede2:	eb00 0806 	add.w	r8, r0, r6
 801ede6:	4601      	mov	r1, r0
 801ede8:	4632      	mov	r2, r6
 801edea:	4640      	mov	r0, r8
 801edec:	f7fd f861 	bl	801beb2 <memcpy>
 801edf0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801edf4:	f8c4 8000 	str.w	r8, [r4]
 801edf8:	e7e9      	b.n	801edce <__submore+0x48>

0801edfa <memmove>:
 801edfa:	4288      	cmp	r0, r1
 801edfc:	b510      	push	{r4, lr}
 801edfe:	eb01 0402 	add.w	r4, r1, r2
 801ee02:	d902      	bls.n	801ee0a <memmove+0x10>
 801ee04:	4284      	cmp	r4, r0
 801ee06:	4623      	mov	r3, r4
 801ee08:	d807      	bhi.n	801ee1a <memmove+0x20>
 801ee0a:	1e43      	subs	r3, r0, #1
 801ee0c:	42a1      	cmp	r1, r4
 801ee0e:	d008      	beq.n	801ee22 <memmove+0x28>
 801ee10:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ee14:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ee18:	e7f8      	b.n	801ee0c <memmove+0x12>
 801ee1a:	4402      	add	r2, r0
 801ee1c:	4601      	mov	r1, r0
 801ee1e:	428a      	cmp	r2, r1
 801ee20:	d100      	bne.n	801ee24 <memmove+0x2a>
 801ee22:	bd10      	pop	{r4, pc}
 801ee24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ee28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ee2c:	e7f7      	b.n	801ee1e <memmove+0x24>

0801ee2e <strncmp>:
 801ee2e:	b510      	push	{r4, lr}
 801ee30:	b16a      	cbz	r2, 801ee4e <strncmp+0x20>
 801ee32:	3901      	subs	r1, #1
 801ee34:	1884      	adds	r4, r0, r2
 801ee36:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ee3a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801ee3e:	429a      	cmp	r2, r3
 801ee40:	d103      	bne.n	801ee4a <strncmp+0x1c>
 801ee42:	42a0      	cmp	r0, r4
 801ee44:	d001      	beq.n	801ee4a <strncmp+0x1c>
 801ee46:	2a00      	cmp	r2, #0
 801ee48:	d1f5      	bne.n	801ee36 <strncmp+0x8>
 801ee4a:	1ad0      	subs	r0, r2, r3
 801ee4c:	bd10      	pop	{r4, pc}
 801ee4e:	4610      	mov	r0, r2
 801ee50:	e7fc      	b.n	801ee4c <strncmp+0x1e>
	...

0801ee54 <_sbrk_r>:
 801ee54:	b538      	push	{r3, r4, r5, lr}
 801ee56:	4d06      	ldr	r5, [pc, #24]	; (801ee70 <_sbrk_r+0x1c>)
 801ee58:	2300      	movs	r3, #0
 801ee5a:	4604      	mov	r4, r0
 801ee5c:	4608      	mov	r0, r1
 801ee5e:	602b      	str	r3, [r5, #0]
 801ee60:	f7e5 f800 	bl	8003e64 <_sbrk>
 801ee64:	1c43      	adds	r3, r0, #1
 801ee66:	d102      	bne.n	801ee6e <_sbrk_r+0x1a>
 801ee68:	682b      	ldr	r3, [r5, #0]
 801ee6a:	b103      	cbz	r3, 801ee6e <_sbrk_r+0x1a>
 801ee6c:	6023      	str	r3, [r4, #0]
 801ee6e:	bd38      	pop	{r3, r4, r5, pc}
 801ee70:	24003620 	.word	0x24003620
 801ee74:	00000000 	.word	0x00000000

0801ee78 <nan>:
 801ee78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ee80 <nan+0x8>
 801ee7c:	4770      	bx	lr
 801ee7e:	bf00      	nop
 801ee80:	00000000 	.word	0x00000000
 801ee84:	7ff80000 	.word	0x7ff80000

0801ee88 <__assert_func>:
 801ee88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ee8a:	4614      	mov	r4, r2
 801ee8c:	461a      	mov	r2, r3
 801ee8e:	4b09      	ldr	r3, [pc, #36]	; (801eeb4 <__assert_func+0x2c>)
 801ee90:	681b      	ldr	r3, [r3, #0]
 801ee92:	4605      	mov	r5, r0
 801ee94:	68d8      	ldr	r0, [r3, #12]
 801ee96:	b14c      	cbz	r4, 801eeac <__assert_func+0x24>
 801ee98:	4b07      	ldr	r3, [pc, #28]	; (801eeb8 <__assert_func+0x30>)
 801ee9a:	9100      	str	r1, [sp, #0]
 801ee9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801eea0:	4906      	ldr	r1, [pc, #24]	; (801eebc <__assert_func+0x34>)
 801eea2:	462b      	mov	r3, r5
 801eea4:	f000 fc3e 	bl	801f724 <fiprintf>
 801eea8:	f000 fc4e 	bl	801f748 <abort>
 801eeac:	4b04      	ldr	r3, [pc, #16]	; (801eec0 <__assert_func+0x38>)
 801eeae:	461c      	mov	r4, r3
 801eeb0:	e7f3      	b.n	801ee9a <__assert_func+0x12>
 801eeb2:	bf00      	nop
 801eeb4:	24000158 	.word	0x24000158
 801eeb8:	080207ed 	.word	0x080207ed
 801eebc:	080207fa 	.word	0x080207fa
 801eec0:	08020828 	.word	0x08020828

0801eec4 <_calloc_r>:
 801eec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801eec6:	fba1 2402 	umull	r2, r4, r1, r2
 801eeca:	b94c      	cbnz	r4, 801eee0 <_calloc_r+0x1c>
 801eecc:	4611      	mov	r1, r2
 801eece:	9201      	str	r2, [sp, #4]
 801eed0:	f7fd fe6e 	bl	801cbb0 <_malloc_r>
 801eed4:	9a01      	ldr	r2, [sp, #4]
 801eed6:	4605      	mov	r5, r0
 801eed8:	b930      	cbnz	r0, 801eee8 <_calloc_r+0x24>
 801eeda:	4628      	mov	r0, r5
 801eedc:	b003      	add	sp, #12
 801eede:	bd30      	pop	{r4, r5, pc}
 801eee0:	220c      	movs	r2, #12
 801eee2:	6002      	str	r2, [r0, #0]
 801eee4:	2500      	movs	r5, #0
 801eee6:	e7f8      	b.n	801eeda <_calloc_r+0x16>
 801eee8:	4621      	mov	r1, r4
 801eeea:	f7fc ff5a 	bl	801bda2 <memset>
 801eeee:	e7f4      	b.n	801eeda <_calloc_r+0x16>

0801eef0 <rshift>:
 801eef0:	6903      	ldr	r3, [r0, #16]
 801eef2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801eef6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eefa:	ea4f 1261 	mov.w	r2, r1, asr #5
 801eefe:	f100 0414 	add.w	r4, r0, #20
 801ef02:	dd45      	ble.n	801ef90 <rshift+0xa0>
 801ef04:	f011 011f 	ands.w	r1, r1, #31
 801ef08:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ef0c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ef10:	d10c      	bne.n	801ef2c <rshift+0x3c>
 801ef12:	f100 0710 	add.w	r7, r0, #16
 801ef16:	4629      	mov	r1, r5
 801ef18:	42b1      	cmp	r1, r6
 801ef1a:	d334      	bcc.n	801ef86 <rshift+0x96>
 801ef1c:	1a9b      	subs	r3, r3, r2
 801ef1e:	009b      	lsls	r3, r3, #2
 801ef20:	1eea      	subs	r2, r5, #3
 801ef22:	4296      	cmp	r6, r2
 801ef24:	bf38      	it	cc
 801ef26:	2300      	movcc	r3, #0
 801ef28:	4423      	add	r3, r4
 801ef2a:	e015      	b.n	801ef58 <rshift+0x68>
 801ef2c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ef30:	f1c1 0820 	rsb	r8, r1, #32
 801ef34:	40cf      	lsrs	r7, r1
 801ef36:	f105 0e04 	add.w	lr, r5, #4
 801ef3a:	46a1      	mov	r9, r4
 801ef3c:	4576      	cmp	r6, lr
 801ef3e:	46f4      	mov	ip, lr
 801ef40:	d815      	bhi.n	801ef6e <rshift+0x7e>
 801ef42:	1a9a      	subs	r2, r3, r2
 801ef44:	0092      	lsls	r2, r2, #2
 801ef46:	3a04      	subs	r2, #4
 801ef48:	3501      	adds	r5, #1
 801ef4a:	42ae      	cmp	r6, r5
 801ef4c:	bf38      	it	cc
 801ef4e:	2200      	movcc	r2, #0
 801ef50:	18a3      	adds	r3, r4, r2
 801ef52:	50a7      	str	r7, [r4, r2]
 801ef54:	b107      	cbz	r7, 801ef58 <rshift+0x68>
 801ef56:	3304      	adds	r3, #4
 801ef58:	1b1a      	subs	r2, r3, r4
 801ef5a:	42a3      	cmp	r3, r4
 801ef5c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801ef60:	bf08      	it	eq
 801ef62:	2300      	moveq	r3, #0
 801ef64:	6102      	str	r2, [r0, #16]
 801ef66:	bf08      	it	eq
 801ef68:	6143      	streq	r3, [r0, #20]
 801ef6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ef6e:	f8dc c000 	ldr.w	ip, [ip]
 801ef72:	fa0c fc08 	lsl.w	ip, ip, r8
 801ef76:	ea4c 0707 	orr.w	r7, ip, r7
 801ef7a:	f849 7b04 	str.w	r7, [r9], #4
 801ef7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ef82:	40cf      	lsrs	r7, r1
 801ef84:	e7da      	b.n	801ef3c <rshift+0x4c>
 801ef86:	f851 cb04 	ldr.w	ip, [r1], #4
 801ef8a:	f847 cf04 	str.w	ip, [r7, #4]!
 801ef8e:	e7c3      	b.n	801ef18 <rshift+0x28>
 801ef90:	4623      	mov	r3, r4
 801ef92:	e7e1      	b.n	801ef58 <rshift+0x68>

0801ef94 <__hexdig_fun>:
 801ef94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ef98:	2b09      	cmp	r3, #9
 801ef9a:	d802      	bhi.n	801efa2 <__hexdig_fun+0xe>
 801ef9c:	3820      	subs	r0, #32
 801ef9e:	b2c0      	uxtb	r0, r0
 801efa0:	4770      	bx	lr
 801efa2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801efa6:	2b05      	cmp	r3, #5
 801efa8:	d801      	bhi.n	801efae <__hexdig_fun+0x1a>
 801efaa:	3847      	subs	r0, #71	; 0x47
 801efac:	e7f7      	b.n	801ef9e <__hexdig_fun+0xa>
 801efae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801efb2:	2b05      	cmp	r3, #5
 801efb4:	d801      	bhi.n	801efba <__hexdig_fun+0x26>
 801efb6:	3827      	subs	r0, #39	; 0x27
 801efb8:	e7f1      	b.n	801ef9e <__hexdig_fun+0xa>
 801efba:	2000      	movs	r0, #0
 801efbc:	4770      	bx	lr
	...

0801efc0 <__gethex>:
 801efc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efc4:	4617      	mov	r7, r2
 801efc6:	680a      	ldr	r2, [r1, #0]
 801efc8:	b085      	sub	sp, #20
 801efca:	f102 0b02 	add.w	fp, r2, #2
 801efce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801efd2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801efd6:	4681      	mov	r9, r0
 801efd8:	468a      	mov	sl, r1
 801efda:	9302      	str	r3, [sp, #8]
 801efdc:	32fe      	adds	r2, #254	; 0xfe
 801efde:	eb02 030b 	add.w	r3, r2, fp
 801efe2:	46d8      	mov	r8, fp
 801efe4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801efe8:	9301      	str	r3, [sp, #4]
 801efea:	2830      	cmp	r0, #48	; 0x30
 801efec:	d0f7      	beq.n	801efde <__gethex+0x1e>
 801efee:	f7ff ffd1 	bl	801ef94 <__hexdig_fun>
 801eff2:	4604      	mov	r4, r0
 801eff4:	2800      	cmp	r0, #0
 801eff6:	d138      	bne.n	801f06a <__gethex+0xaa>
 801eff8:	49a7      	ldr	r1, [pc, #668]	; (801f298 <__gethex+0x2d8>)
 801effa:	2201      	movs	r2, #1
 801effc:	4640      	mov	r0, r8
 801effe:	f7ff ff16 	bl	801ee2e <strncmp>
 801f002:	4606      	mov	r6, r0
 801f004:	2800      	cmp	r0, #0
 801f006:	d169      	bne.n	801f0dc <__gethex+0x11c>
 801f008:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f00c:	465d      	mov	r5, fp
 801f00e:	f7ff ffc1 	bl	801ef94 <__hexdig_fun>
 801f012:	2800      	cmp	r0, #0
 801f014:	d064      	beq.n	801f0e0 <__gethex+0x120>
 801f016:	465a      	mov	r2, fp
 801f018:	7810      	ldrb	r0, [r2, #0]
 801f01a:	2830      	cmp	r0, #48	; 0x30
 801f01c:	4690      	mov	r8, r2
 801f01e:	f102 0201 	add.w	r2, r2, #1
 801f022:	d0f9      	beq.n	801f018 <__gethex+0x58>
 801f024:	f7ff ffb6 	bl	801ef94 <__hexdig_fun>
 801f028:	2301      	movs	r3, #1
 801f02a:	fab0 f480 	clz	r4, r0
 801f02e:	0964      	lsrs	r4, r4, #5
 801f030:	465e      	mov	r6, fp
 801f032:	9301      	str	r3, [sp, #4]
 801f034:	4642      	mov	r2, r8
 801f036:	4615      	mov	r5, r2
 801f038:	3201      	adds	r2, #1
 801f03a:	7828      	ldrb	r0, [r5, #0]
 801f03c:	f7ff ffaa 	bl	801ef94 <__hexdig_fun>
 801f040:	2800      	cmp	r0, #0
 801f042:	d1f8      	bne.n	801f036 <__gethex+0x76>
 801f044:	4994      	ldr	r1, [pc, #592]	; (801f298 <__gethex+0x2d8>)
 801f046:	2201      	movs	r2, #1
 801f048:	4628      	mov	r0, r5
 801f04a:	f7ff fef0 	bl	801ee2e <strncmp>
 801f04e:	b978      	cbnz	r0, 801f070 <__gethex+0xb0>
 801f050:	b946      	cbnz	r6, 801f064 <__gethex+0xa4>
 801f052:	1c6e      	adds	r6, r5, #1
 801f054:	4632      	mov	r2, r6
 801f056:	4615      	mov	r5, r2
 801f058:	3201      	adds	r2, #1
 801f05a:	7828      	ldrb	r0, [r5, #0]
 801f05c:	f7ff ff9a 	bl	801ef94 <__hexdig_fun>
 801f060:	2800      	cmp	r0, #0
 801f062:	d1f8      	bne.n	801f056 <__gethex+0x96>
 801f064:	1b73      	subs	r3, r6, r5
 801f066:	009e      	lsls	r6, r3, #2
 801f068:	e004      	b.n	801f074 <__gethex+0xb4>
 801f06a:	2400      	movs	r4, #0
 801f06c:	4626      	mov	r6, r4
 801f06e:	e7e1      	b.n	801f034 <__gethex+0x74>
 801f070:	2e00      	cmp	r6, #0
 801f072:	d1f7      	bne.n	801f064 <__gethex+0xa4>
 801f074:	782b      	ldrb	r3, [r5, #0]
 801f076:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f07a:	2b50      	cmp	r3, #80	; 0x50
 801f07c:	d13d      	bne.n	801f0fa <__gethex+0x13a>
 801f07e:	786b      	ldrb	r3, [r5, #1]
 801f080:	2b2b      	cmp	r3, #43	; 0x2b
 801f082:	d02f      	beq.n	801f0e4 <__gethex+0x124>
 801f084:	2b2d      	cmp	r3, #45	; 0x2d
 801f086:	d031      	beq.n	801f0ec <__gethex+0x12c>
 801f088:	1c69      	adds	r1, r5, #1
 801f08a:	f04f 0b00 	mov.w	fp, #0
 801f08e:	7808      	ldrb	r0, [r1, #0]
 801f090:	f7ff ff80 	bl	801ef94 <__hexdig_fun>
 801f094:	1e42      	subs	r2, r0, #1
 801f096:	b2d2      	uxtb	r2, r2
 801f098:	2a18      	cmp	r2, #24
 801f09a:	d82e      	bhi.n	801f0fa <__gethex+0x13a>
 801f09c:	f1a0 0210 	sub.w	r2, r0, #16
 801f0a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f0a4:	f7ff ff76 	bl	801ef94 <__hexdig_fun>
 801f0a8:	f100 3cff 	add.w	ip, r0, #4294967295
 801f0ac:	fa5f fc8c 	uxtb.w	ip, ip
 801f0b0:	f1bc 0f18 	cmp.w	ip, #24
 801f0b4:	d91d      	bls.n	801f0f2 <__gethex+0x132>
 801f0b6:	f1bb 0f00 	cmp.w	fp, #0
 801f0ba:	d000      	beq.n	801f0be <__gethex+0xfe>
 801f0bc:	4252      	negs	r2, r2
 801f0be:	4416      	add	r6, r2
 801f0c0:	f8ca 1000 	str.w	r1, [sl]
 801f0c4:	b1dc      	cbz	r4, 801f0fe <__gethex+0x13e>
 801f0c6:	9b01      	ldr	r3, [sp, #4]
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	bf14      	ite	ne
 801f0cc:	f04f 0800 	movne.w	r8, #0
 801f0d0:	f04f 0806 	moveq.w	r8, #6
 801f0d4:	4640      	mov	r0, r8
 801f0d6:	b005      	add	sp, #20
 801f0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0dc:	4645      	mov	r5, r8
 801f0de:	4626      	mov	r6, r4
 801f0e0:	2401      	movs	r4, #1
 801f0e2:	e7c7      	b.n	801f074 <__gethex+0xb4>
 801f0e4:	f04f 0b00 	mov.w	fp, #0
 801f0e8:	1ca9      	adds	r1, r5, #2
 801f0ea:	e7d0      	b.n	801f08e <__gethex+0xce>
 801f0ec:	f04f 0b01 	mov.w	fp, #1
 801f0f0:	e7fa      	b.n	801f0e8 <__gethex+0x128>
 801f0f2:	230a      	movs	r3, #10
 801f0f4:	fb03 0002 	mla	r0, r3, r2, r0
 801f0f8:	e7d0      	b.n	801f09c <__gethex+0xdc>
 801f0fa:	4629      	mov	r1, r5
 801f0fc:	e7e0      	b.n	801f0c0 <__gethex+0x100>
 801f0fe:	eba5 0308 	sub.w	r3, r5, r8
 801f102:	3b01      	subs	r3, #1
 801f104:	4621      	mov	r1, r4
 801f106:	2b07      	cmp	r3, #7
 801f108:	dc0a      	bgt.n	801f120 <__gethex+0x160>
 801f10a:	4648      	mov	r0, r9
 801f10c:	f7fd fddc 	bl	801ccc8 <_Balloc>
 801f110:	4604      	mov	r4, r0
 801f112:	b940      	cbnz	r0, 801f126 <__gethex+0x166>
 801f114:	4b61      	ldr	r3, [pc, #388]	; (801f29c <__gethex+0x2dc>)
 801f116:	4602      	mov	r2, r0
 801f118:	21e4      	movs	r1, #228	; 0xe4
 801f11a:	4861      	ldr	r0, [pc, #388]	; (801f2a0 <__gethex+0x2e0>)
 801f11c:	f7ff feb4 	bl	801ee88 <__assert_func>
 801f120:	3101      	adds	r1, #1
 801f122:	105b      	asrs	r3, r3, #1
 801f124:	e7ef      	b.n	801f106 <__gethex+0x146>
 801f126:	f100 0a14 	add.w	sl, r0, #20
 801f12a:	2300      	movs	r3, #0
 801f12c:	495a      	ldr	r1, [pc, #360]	; (801f298 <__gethex+0x2d8>)
 801f12e:	f8cd a004 	str.w	sl, [sp, #4]
 801f132:	469b      	mov	fp, r3
 801f134:	45a8      	cmp	r8, r5
 801f136:	d342      	bcc.n	801f1be <__gethex+0x1fe>
 801f138:	9801      	ldr	r0, [sp, #4]
 801f13a:	f840 bb04 	str.w	fp, [r0], #4
 801f13e:	eba0 000a 	sub.w	r0, r0, sl
 801f142:	1080      	asrs	r0, r0, #2
 801f144:	6120      	str	r0, [r4, #16]
 801f146:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801f14a:	4658      	mov	r0, fp
 801f14c:	f7fd feae 	bl	801ceac <__hi0bits>
 801f150:	683d      	ldr	r5, [r7, #0]
 801f152:	eba8 0000 	sub.w	r0, r8, r0
 801f156:	42a8      	cmp	r0, r5
 801f158:	dd59      	ble.n	801f20e <__gethex+0x24e>
 801f15a:	eba0 0805 	sub.w	r8, r0, r5
 801f15e:	4641      	mov	r1, r8
 801f160:	4620      	mov	r0, r4
 801f162:	f7fe fa3a 	bl	801d5da <__any_on>
 801f166:	4683      	mov	fp, r0
 801f168:	b1b8      	cbz	r0, 801f19a <__gethex+0x1da>
 801f16a:	f108 33ff 	add.w	r3, r8, #4294967295
 801f16e:	1159      	asrs	r1, r3, #5
 801f170:	f003 021f 	and.w	r2, r3, #31
 801f174:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801f178:	f04f 0b01 	mov.w	fp, #1
 801f17c:	fa0b f202 	lsl.w	r2, fp, r2
 801f180:	420a      	tst	r2, r1
 801f182:	d00a      	beq.n	801f19a <__gethex+0x1da>
 801f184:	455b      	cmp	r3, fp
 801f186:	dd06      	ble.n	801f196 <__gethex+0x1d6>
 801f188:	f1a8 0102 	sub.w	r1, r8, #2
 801f18c:	4620      	mov	r0, r4
 801f18e:	f7fe fa24 	bl	801d5da <__any_on>
 801f192:	2800      	cmp	r0, #0
 801f194:	d138      	bne.n	801f208 <__gethex+0x248>
 801f196:	f04f 0b02 	mov.w	fp, #2
 801f19a:	4641      	mov	r1, r8
 801f19c:	4620      	mov	r0, r4
 801f19e:	f7ff fea7 	bl	801eef0 <rshift>
 801f1a2:	4446      	add	r6, r8
 801f1a4:	68bb      	ldr	r3, [r7, #8]
 801f1a6:	42b3      	cmp	r3, r6
 801f1a8:	da41      	bge.n	801f22e <__gethex+0x26e>
 801f1aa:	4621      	mov	r1, r4
 801f1ac:	4648      	mov	r0, r9
 801f1ae:	f7fd fdcb 	bl	801cd48 <_Bfree>
 801f1b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f1b4:	2300      	movs	r3, #0
 801f1b6:	6013      	str	r3, [r2, #0]
 801f1b8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801f1bc:	e78a      	b.n	801f0d4 <__gethex+0x114>
 801f1be:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801f1c2:	2a2e      	cmp	r2, #46	; 0x2e
 801f1c4:	d014      	beq.n	801f1f0 <__gethex+0x230>
 801f1c6:	2b20      	cmp	r3, #32
 801f1c8:	d106      	bne.n	801f1d8 <__gethex+0x218>
 801f1ca:	9b01      	ldr	r3, [sp, #4]
 801f1cc:	f843 bb04 	str.w	fp, [r3], #4
 801f1d0:	f04f 0b00 	mov.w	fp, #0
 801f1d4:	9301      	str	r3, [sp, #4]
 801f1d6:	465b      	mov	r3, fp
 801f1d8:	7828      	ldrb	r0, [r5, #0]
 801f1da:	9303      	str	r3, [sp, #12]
 801f1dc:	f7ff feda 	bl	801ef94 <__hexdig_fun>
 801f1e0:	9b03      	ldr	r3, [sp, #12]
 801f1e2:	f000 000f 	and.w	r0, r0, #15
 801f1e6:	4098      	lsls	r0, r3
 801f1e8:	ea4b 0b00 	orr.w	fp, fp, r0
 801f1ec:	3304      	adds	r3, #4
 801f1ee:	e7a1      	b.n	801f134 <__gethex+0x174>
 801f1f0:	45a8      	cmp	r8, r5
 801f1f2:	d8e8      	bhi.n	801f1c6 <__gethex+0x206>
 801f1f4:	2201      	movs	r2, #1
 801f1f6:	4628      	mov	r0, r5
 801f1f8:	9303      	str	r3, [sp, #12]
 801f1fa:	f7ff fe18 	bl	801ee2e <strncmp>
 801f1fe:	4926      	ldr	r1, [pc, #152]	; (801f298 <__gethex+0x2d8>)
 801f200:	9b03      	ldr	r3, [sp, #12]
 801f202:	2800      	cmp	r0, #0
 801f204:	d1df      	bne.n	801f1c6 <__gethex+0x206>
 801f206:	e795      	b.n	801f134 <__gethex+0x174>
 801f208:	f04f 0b03 	mov.w	fp, #3
 801f20c:	e7c5      	b.n	801f19a <__gethex+0x1da>
 801f20e:	da0b      	bge.n	801f228 <__gethex+0x268>
 801f210:	eba5 0800 	sub.w	r8, r5, r0
 801f214:	4621      	mov	r1, r4
 801f216:	4642      	mov	r2, r8
 801f218:	4648      	mov	r0, r9
 801f21a:	f7fd ffaf 	bl	801d17c <__lshift>
 801f21e:	eba6 0608 	sub.w	r6, r6, r8
 801f222:	4604      	mov	r4, r0
 801f224:	f100 0a14 	add.w	sl, r0, #20
 801f228:	f04f 0b00 	mov.w	fp, #0
 801f22c:	e7ba      	b.n	801f1a4 <__gethex+0x1e4>
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	42b3      	cmp	r3, r6
 801f232:	dd73      	ble.n	801f31c <__gethex+0x35c>
 801f234:	1b9e      	subs	r6, r3, r6
 801f236:	42b5      	cmp	r5, r6
 801f238:	dc34      	bgt.n	801f2a4 <__gethex+0x2e4>
 801f23a:	68fb      	ldr	r3, [r7, #12]
 801f23c:	2b02      	cmp	r3, #2
 801f23e:	d023      	beq.n	801f288 <__gethex+0x2c8>
 801f240:	2b03      	cmp	r3, #3
 801f242:	d025      	beq.n	801f290 <__gethex+0x2d0>
 801f244:	2b01      	cmp	r3, #1
 801f246:	d115      	bne.n	801f274 <__gethex+0x2b4>
 801f248:	42b5      	cmp	r5, r6
 801f24a:	d113      	bne.n	801f274 <__gethex+0x2b4>
 801f24c:	2d01      	cmp	r5, #1
 801f24e:	d10b      	bne.n	801f268 <__gethex+0x2a8>
 801f250:	9a02      	ldr	r2, [sp, #8]
 801f252:	687b      	ldr	r3, [r7, #4]
 801f254:	6013      	str	r3, [r2, #0]
 801f256:	2301      	movs	r3, #1
 801f258:	6123      	str	r3, [r4, #16]
 801f25a:	f8ca 3000 	str.w	r3, [sl]
 801f25e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f260:	f04f 0862 	mov.w	r8, #98	; 0x62
 801f264:	601c      	str	r4, [r3, #0]
 801f266:	e735      	b.n	801f0d4 <__gethex+0x114>
 801f268:	1e69      	subs	r1, r5, #1
 801f26a:	4620      	mov	r0, r4
 801f26c:	f7fe f9b5 	bl	801d5da <__any_on>
 801f270:	2800      	cmp	r0, #0
 801f272:	d1ed      	bne.n	801f250 <__gethex+0x290>
 801f274:	4621      	mov	r1, r4
 801f276:	4648      	mov	r0, r9
 801f278:	f7fd fd66 	bl	801cd48 <_Bfree>
 801f27c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f27e:	2300      	movs	r3, #0
 801f280:	6013      	str	r3, [r2, #0]
 801f282:	f04f 0850 	mov.w	r8, #80	; 0x50
 801f286:	e725      	b.n	801f0d4 <__gethex+0x114>
 801f288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f28a:	2b00      	cmp	r3, #0
 801f28c:	d1f2      	bne.n	801f274 <__gethex+0x2b4>
 801f28e:	e7df      	b.n	801f250 <__gethex+0x290>
 801f290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f292:	2b00      	cmp	r3, #0
 801f294:	d1dc      	bne.n	801f250 <__gethex+0x290>
 801f296:	e7ed      	b.n	801f274 <__gethex+0x2b4>
 801f298:	08020664 	.word	0x08020664
 801f29c:	080204f7 	.word	0x080204f7
 801f2a0:	08020829 	.word	0x08020829
 801f2a4:	f106 38ff 	add.w	r8, r6, #4294967295
 801f2a8:	f1bb 0f00 	cmp.w	fp, #0
 801f2ac:	d133      	bne.n	801f316 <__gethex+0x356>
 801f2ae:	f1b8 0f00 	cmp.w	r8, #0
 801f2b2:	d004      	beq.n	801f2be <__gethex+0x2fe>
 801f2b4:	4641      	mov	r1, r8
 801f2b6:	4620      	mov	r0, r4
 801f2b8:	f7fe f98f 	bl	801d5da <__any_on>
 801f2bc:	4683      	mov	fp, r0
 801f2be:	ea4f 1268 	mov.w	r2, r8, asr #5
 801f2c2:	2301      	movs	r3, #1
 801f2c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801f2c8:	f008 081f 	and.w	r8, r8, #31
 801f2cc:	fa03 f308 	lsl.w	r3, r3, r8
 801f2d0:	4213      	tst	r3, r2
 801f2d2:	4631      	mov	r1, r6
 801f2d4:	4620      	mov	r0, r4
 801f2d6:	bf18      	it	ne
 801f2d8:	f04b 0b02 	orrne.w	fp, fp, #2
 801f2dc:	1bad      	subs	r5, r5, r6
 801f2de:	f7ff fe07 	bl	801eef0 <rshift>
 801f2e2:	687e      	ldr	r6, [r7, #4]
 801f2e4:	f04f 0802 	mov.w	r8, #2
 801f2e8:	f1bb 0f00 	cmp.w	fp, #0
 801f2ec:	d04a      	beq.n	801f384 <__gethex+0x3c4>
 801f2ee:	68fb      	ldr	r3, [r7, #12]
 801f2f0:	2b02      	cmp	r3, #2
 801f2f2:	d016      	beq.n	801f322 <__gethex+0x362>
 801f2f4:	2b03      	cmp	r3, #3
 801f2f6:	d018      	beq.n	801f32a <__gethex+0x36a>
 801f2f8:	2b01      	cmp	r3, #1
 801f2fa:	d109      	bne.n	801f310 <__gethex+0x350>
 801f2fc:	f01b 0f02 	tst.w	fp, #2
 801f300:	d006      	beq.n	801f310 <__gethex+0x350>
 801f302:	f8da 3000 	ldr.w	r3, [sl]
 801f306:	ea4b 0b03 	orr.w	fp, fp, r3
 801f30a:	f01b 0f01 	tst.w	fp, #1
 801f30e:	d10f      	bne.n	801f330 <__gethex+0x370>
 801f310:	f048 0810 	orr.w	r8, r8, #16
 801f314:	e036      	b.n	801f384 <__gethex+0x3c4>
 801f316:	f04f 0b01 	mov.w	fp, #1
 801f31a:	e7d0      	b.n	801f2be <__gethex+0x2fe>
 801f31c:	f04f 0801 	mov.w	r8, #1
 801f320:	e7e2      	b.n	801f2e8 <__gethex+0x328>
 801f322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f324:	f1c3 0301 	rsb	r3, r3, #1
 801f328:	930f      	str	r3, [sp, #60]	; 0x3c
 801f32a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f32c:	2b00      	cmp	r3, #0
 801f32e:	d0ef      	beq.n	801f310 <__gethex+0x350>
 801f330:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f334:	f104 0214 	add.w	r2, r4, #20
 801f338:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801f33c:	9301      	str	r3, [sp, #4]
 801f33e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801f342:	2300      	movs	r3, #0
 801f344:	4694      	mov	ip, r2
 801f346:	f852 1b04 	ldr.w	r1, [r2], #4
 801f34a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801f34e:	d01e      	beq.n	801f38e <__gethex+0x3ce>
 801f350:	3101      	adds	r1, #1
 801f352:	f8cc 1000 	str.w	r1, [ip]
 801f356:	f1b8 0f02 	cmp.w	r8, #2
 801f35a:	f104 0214 	add.w	r2, r4, #20
 801f35e:	d13d      	bne.n	801f3dc <__gethex+0x41c>
 801f360:	683b      	ldr	r3, [r7, #0]
 801f362:	3b01      	subs	r3, #1
 801f364:	42ab      	cmp	r3, r5
 801f366:	d10b      	bne.n	801f380 <__gethex+0x3c0>
 801f368:	1169      	asrs	r1, r5, #5
 801f36a:	2301      	movs	r3, #1
 801f36c:	f005 051f 	and.w	r5, r5, #31
 801f370:	fa03 f505 	lsl.w	r5, r3, r5
 801f374:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f378:	421d      	tst	r5, r3
 801f37a:	bf18      	it	ne
 801f37c:	f04f 0801 	movne.w	r8, #1
 801f380:	f048 0820 	orr.w	r8, r8, #32
 801f384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f386:	601c      	str	r4, [r3, #0]
 801f388:	9b02      	ldr	r3, [sp, #8]
 801f38a:	601e      	str	r6, [r3, #0]
 801f38c:	e6a2      	b.n	801f0d4 <__gethex+0x114>
 801f38e:	4290      	cmp	r0, r2
 801f390:	f842 3c04 	str.w	r3, [r2, #-4]
 801f394:	d8d6      	bhi.n	801f344 <__gethex+0x384>
 801f396:	68a2      	ldr	r2, [r4, #8]
 801f398:	4593      	cmp	fp, r2
 801f39a:	db17      	blt.n	801f3cc <__gethex+0x40c>
 801f39c:	6861      	ldr	r1, [r4, #4]
 801f39e:	4648      	mov	r0, r9
 801f3a0:	3101      	adds	r1, #1
 801f3a2:	f7fd fc91 	bl	801ccc8 <_Balloc>
 801f3a6:	4682      	mov	sl, r0
 801f3a8:	b918      	cbnz	r0, 801f3b2 <__gethex+0x3f2>
 801f3aa:	4b1b      	ldr	r3, [pc, #108]	; (801f418 <__gethex+0x458>)
 801f3ac:	4602      	mov	r2, r0
 801f3ae:	2184      	movs	r1, #132	; 0x84
 801f3b0:	e6b3      	b.n	801f11a <__gethex+0x15a>
 801f3b2:	6922      	ldr	r2, [r4, #16]
 801f3b4:	3202      	adds	r2, #2
 801f3b6:	f104 010c 	add.w	r1, r4, #12
 801f3ba:	0092      	lsls	r2, r2, #2
 801f3bc:	300c      	adds	r0, #12
 801f3be:	f7fc fd78 	bl	801beb2 <memcpy>
 801f3c2:	4621      	mov	r1, r4
 801f3c4:	4648      	mov	r0, r9
 801f3c6:	f7fd fcbf 	bl	801cd48 <_Bfree>
 801f3ca:	4654      	mov	r4, sl
 801f3cc:	6922      	ldr	r2, [r4, #16]
 801f3ce:	1c51      	adds	r1, r2, #1
 801f3d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f3d4:	6121      	str	r1, [r4, #16]
 801f3d6:	2101      	movs	r1, #1
 801f3d8:	6151      	str	r1, [r2, #20]
 801f3da:	e7bc      	b.n	801f356 <__gethex+0x396>
 801f3dc:	6921      	ldr	r1, [r4, #16]
 801f3de:	4559      	cmp	r1, fp
 801f3e0:	dd0b      	ble.n	801f3fa <__gethex+0x43a>
 801f3e2:	2101      	movs	r1, #1
 801f3e4:	4620      	mov	r0, r4
 801f3e6:	f7ff fd83 	bl	801eef0 <rshift>
 801f3ea:	68bb      	ldr	r3, [r7, #8]
 801f3ec:	3601      	adds	r6, #1
 801f3ee:	42b3      	cmp	r3, r6
 801f3f0:	f6ff aedb 	blt.w	801f1aa <__gethex+0x1ea>
 801f3f4:	f04f 0801 	mov.w	r8, #1
 801f3f8:	e7c2      	b.n	801f380 <__gethex+0x3c0>
 801f3fa:	f015 051f 	ands.w	r5, r5, #31
 801f3fe:	d0f9      	beq.n	801f3f4 <__gethex+0x434>
 801f400:	9b01      	ldr	r3, [sp, #4]
 801f402:	441a      	add	r2, r3
 801f404:	f1c5 0520 	rsb	r5, r5, #32
 801f408:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801f40c:	f7fd fd4e 	bl	801ceac <__hi0bits>
 801f410:	42a8      	cmp	r0, r5
 801f412:	dbe6      	blt.n	801f3e2 <__gethex+0x422>
 801f414:	e7ee      	b.n	801f3f4 <__gethex+0x434>
 801f416:	bf00      	nop
 801f418:	080204f7 	.word	0x080204f7

0801f41c <L_shift>:
 801f41c:	f1c2 0208 	rsb	r2, r2, #8
 801f420:	0092      	lsls	r2, r2, #2
 801f422:	b570      	push	{r4, r5, r6, lr}
 801f424:	f1c2 0620 	rsb	r6, r2, #32
 801f428:	6843      	ldr	r3, [r0, #4]
 801f42a:	6804      	ldr	r4, [r0, #0]
 801f42c:	fa03 f506 	lsl.w	r5, r3, r6
 801f430:	432c      	orrs	r4, r5
 801f432:	40d3      	lsrs	r3, r2
 801f434:	6004      	str	r4, [r0, #0]
 801f436:	f840 3f04 	str.w	r3, [r0, #4]!
 801f43a:	4288      	cmp	r0, r1
 801f43c:	d3f4      	bcc.n	801f428 <L_shift+0xc>
 801f43e:	bd70      	pop	{r4, r5, r6, pc}

0801f440 <__match>:
 801f440:	b530      	push	{r4, r5, lr}
 801f442:	6803      	ldr	r3, [r0, #0]
 801f444:	3301      	adds	r3, #1
 801f446:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f44a:	b914      	cbnz	r4, 801f452 <__match+0x12>
 801f44c:	6003      	str	r3, [r0, #0]
 801f44e:	2001      	movs	r0, #1
 801f450:	bd30      	pop	{r4, r5, pc}
 801f452:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f456:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801f45a:	2d19      	cmp	r5, #25
 801f45c:	bf98      	it	ls
 801f45e:	3220      	addls	r2, #32
 801f460:	42a2      	cmp	r2, r4
 801f462:	d0f0      	beq.n	801f446 <__match+0x6>
 801f464:	2000      	movs	r0, #0
 801f466:	e7f3      	b.n	801f450 <__match+0x10>

0801f468 <__hexnan>:
 801f468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f46c:	680b      	ldr	r3, [r1, #0]
 801f46e:	6801      	ldr	r1, [r0, #0]
 801f470:	115e      	asrs	r6, r3, #5
 801f472:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f476:	f013 031f 	ands.w	r3, r3, #31
 801f47a:	b087      	sub	sp, #28
 801f47c:	bf18      	it	ne
 801f47e:	3604      	addne	r6, #4
 801f480:	2500      	movs	r5, #0
 801f482:	1f37      	subs	r7, r6, #4
 801f484:	4682      	mov	sl, r0
 801f486:	4690      	mov	r8, r2
 801f488:	9301      	str	r3, [sp, #4]
 801f48a:	f846 5c04 	str.w	r5, [r6, #-4]
 801f48e:	46b9      	mov	r9, r7
 801f490:	463c      	mov	r4, r7
 801f492:	9502      	str	r5, [sp, #8]
 801f494:	46ab      	mov	fp, r5
 801f496:	784a      	ldrb	r2, [r1, #1]
 801f498:	1c4b      	adds	r3, r1, #1
 801f49a:	9303      	str	r3, [sp, #12]
 801f49c:	b342      	cbz	r2, 801f4f0 <__hexnan+0x88>
 801f49e:	4610      	mov	r0, r2
 801f4a0:	9105      	str	r1, [sp, #20]
 801f4a2:	9204      	str	r2, [sp, #16]
 801f4a4:	f7ff fd76 	bl	801ef94 <__hexdig_fun>
 801f4a8:	2800      	cmp	r0, #0
 801f4aa:	d14f      	bne.n	801f54c <__hexnan+0xe4>
 801f4ac:	9a04      	ldr	r2, [sp, #16]
 801f4ae:	9905      	ldr	r1, [sp, #20]
 801f4b0:	2a20      	cmp	r2, #32
 801f4b2:	d818      	bhi.n	801f4e6 <__hexnan+0x7e>
 801f4b4:	9b02      	ldr	r3, [sp, #8]
 801f4b6:	459b      	cmp	fp, r3
 801f4b8:	dd13      	ble.n	801f4e2 <__hexnan+0x7a>
 801f4ba:	454c      	cmp	r4, r9
 801f4bc:	d206      	bcs.n	801f4cc <__hexnan+0x64>
 801f4be:	2d07      	cmp	r5, #7
 801f4c0:	dc04      	bgt.n	801f4cc <__hexnan+0x64>
 801f4c2:	462a      	mov	r2, r5
 801f4c4:	4649      	mov	r1, r9
 801f4c6:	4620      	mov	r0, r4
 801f4c8:	f7ff ffa8 	bl	801f41c <L_shift>
 801f4cc:	4544      	cmp	r4, r8
 801f4ce:	d950      	bls.n	801f572 <__hexnan+0x10a>
 801f4d0:	2300      	movs	r3, #0
 801f4d2:	f1a4 0904 	sub.w	r9, r4, #4
 801f4d6:	f844 3c04 	str.w	r3, [r4, #-4]
 801f4da:	f8cd b008 	str.w	fp, [sp, #8]
 801f4de:	464c      	mov	r4, r9
 801f4e0:	461d      	mov	r5, r3
 801f4e2:	9903      	ldr	r1, [sp, #12]
 801f4e4:	e7d7      	b.n	801f496 <__hexnan+0x2e>
 801f4e6:	2a29      	cmp	r2, #41	; 0x29
 801f4e8:	d155      	bne.n	801f596 <__hexnan+0x12e>
 801f4ea:	3102      	adds	r1, #2
 801f4ec:	f8ca 1000 	str.w	r1, [sl]
 801f4f0:	f1bb 0f00 	cmp.w	fp, #0
 801f4f4:	d04f      	beq.n	801f596 <__hexnan+0x12e>
 801f4f6:	454c      	cmp	r4, r9
 801f4f8:	d206      	bcs.n	801f508 <__hexnan+0xa0>
 801f4fa:	2d07      	cmp	r5, #7
 801f4fc:	dc04      	bgt.n	801f508 <__hexnan+0xa0>
 801f4fe:	462a      	mov	r2, r5
 801f500:	4649      	mov	r1, r9
 801f502:	4620      	mov	r0, r4
 801f504:	f7ff ff8a 	bl	801f41c <L_shift>
 801f508:	4544      	cmp	r4, r8
 801f50a:	d934      	bls.n	801f576 <__hexnan+0x10e>
 801f50c:	f1a8 0204 	sub.w	r2, r8, #4
 801f510:	4623      	mov	r3, r4
 801f512:	f853 1b04 	ldr.w	r1, [r3], #4
 801f516:	f842 1f04 	str.w	r1, [r2, #4]!
 801f51a:	429f      	cmp	r7, r3
 801f51c:	d2f9      	bcs.n	801f512 <__hexnan+0xaa>
 801f51e:	1b3b      	subs	r3, r7, r4
 801f520:	f023 0303 	bic.w	r3, r3, #3
 801f524:	3304      	adds	r3, #4
 801f526:	3e03      	subs	r6, #3
 801f528:	3401      	adds	r4, #1
 801f52a:	42a6      	cmp	r6, r4
 801f52c:	bf38      	it	cc
 801f52e:	2304      	movcc	r3, #4
 801f530:	4443      	add	r3, r8
 801f532:	2200      	movs	r2, #0
 801f534:	f843 2b04 	str.w	r2, [r3], #4
 801f538:	429f      	cmp	r7, r3
 801f53a:	d2fb      	bcs.n	801f534 <__hexnan+0xcc>
 801f53c:	683b      	ldr	r3, [r7, #0]
 801f53e:	b91b      	cbnz	r3, 801f548 <__hexnan+0xe0>
 801f540:	4547      	cmp	r7, r8
 801f542:	d126      	bne.n	801f592 <__hexnan+0x12a>
 801f544:	2301      	movs	r3, #1
 801f546:	603b      	str	r3, [r7, #0]
 801f548:	2005      	movs	r0, #5
 801f54a:	e025      	b.n	801f598 <__hexnan+0x130>
 801f54c:	3501      	adds	r5, #1
 801f54e:	2d08      	cmp	r5, #8
 801f550:	f10b 0b01 	add.w	fp, fp, #1
 801f554:	dd06      	ble.n	801f564 <__hexnan+0xfc>
 801f556:	4544      	cmp	r4, r8
 801f558:	d9c3      	bls.n	801f4e2 <__hexnan+0x7a>
 801f55a:	2300      	movs	r3, #0
 801f55c:	f844 3c04 	str.w	r3, [r4, #-4]
 801f560:	2501      	movs	r5, #1
 801f562:	3c04      	subs	r4, #4
 801f564:	6822      	ldr	r2, [r4, #0]
 801f566:	f000 000f 	and.w	r0, r0, #15
 801f56a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801f56e:	6020      	str	r0, [r4, #0]
 801f570:	e7b7      	b.n	801f4e2 <__hexnan+0x7a>
 801f572:	2508      	movs	r5, #8
 801f574:	e7b5      	b.n	801f4e2 <__hexnan+0x7a>
 801f576:	9b01      	ldr	r3, [sp, #4]
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d0df      	beq.n	801f53c <__hexnan+0xd4>
 801f57c:	f1c3 0320 	rsb	r3, r3, #32
 801f580:	f04f 32ff 	mov.w	r2, #4294967295
 801f584:	40da      	lsrs	r2, r3
 801f586:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801f58a:	4013      	ands	r3, r2
 801f58c:	f846 3c04 	str.w	r3, [r6, #-4]
 801f590:	e7d4      	b.n	801f53c <__hexnan+0xd4>
 801f592:	3f04      	subs	r7, #4
 801f594:	e7d2      	b.n	801f53c <__hexnan+0xd4>
 801f596:	2004      	movs	r0, #4
 801f598:	b007      	add	sp, #28
 801f59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f59e <__ascii_mbtowc>:
 801f59e:	b082      	sub	sp, #8
 801f5a0:	b901      	cbnz	r1, 801f5a4 <__ascii_mbtowc+0x6>
 801f5a2:	a901      	add	r1, sp, #4
 801f5a4:	b142      	cbz	r2, 801f5b8 <__ascii_mbtowc+0x1a>
 801f5a6:	b14b      	cbz	r3, 801f5bc <__ascii_mbtowc+0x1e>
 801f5a8:	7813      	ldrb	r3, [r2, #0]
 801f5aa:	600b      	str	r3, [r1, #0]
 801f5ac:	7812      	ldrb	r2, [r2, #0]
 801f5ae:	1e10      	subs	r0, r2, #0
 801f5b0:	bf18      	it	ne
 801f5b2:	2001      	movne	r0, #1
 801f5b4:	b002      	add	sp, #8
 801f5b6:	4770      	bx	lr
 801f5b8:	4610      	mov	r0, r2
 801f5ba:	e7fb      	b.n	801f5b4 <__ascii_mbtowc+0x16>
 801f5bc:	f06f 0001 	mvn.w	r0, #1
 801f5c0:	e7f8      	b.n	801f5b4 <__ascii_mbtowc+0x16>

0801f5c2 <_realloc_r>:
 801f5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f5c6:	4680      	mov	r8, r0
 801f5c8:	4614      	mov	r4, r2
 801f5ca:	460e      	mov	r6, r1
 801f5cc:	b921      	cbnz	r1, 801f5d8 <_realloc_r+0x16>
 801f5ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f5d2:	4611      	mov	r1, r2
 801f5d4:	f7fd baec 	b.w	801cbb0 <_malloc_r>
 801f5d8:	b92a      	cbnz	r2, 801f5e6 <_realloc_r+0x24>
 801f5da:	f7fd fa75 	bl	801cac8 <_free_r>
 801f5de:	4625      	mov	r5, r4
 801f5e0:	4628      	mov	r0, r5
 801f5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f5e6:	f000 f8b6 	bl	801f756 <_malloc_usable_size_r>
 801f5ea:	4284      	cmp	r4, r0
 801f5ec:	4607      	mov	r7, r0
 801f5ee:	d802      	bhi.n	801f5f6 <_realloc_r+0x34>
 801f5f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f5f4:	d812      	bhi.n	801f61c <_realloc_r+0x5a>
 801f5f6:	4621      	mov	r1, r4
 801f5f8:	4640      	mov	r0, r8
 801f5fa:	f7fd fad9 	bl	801cbb0 <_malloc_r>
 801f5fe:	4605      	mov	r5, r0
 801f600:	2800      	cmp	r0, #0
 801f602:	d0ed      	beq.n	801f5e0 <_realloc_r+0x1e>
 801f604:	42bc      	cmp	r4, r7
 801f606:	4622      	mov	r2, r4
 801f608:	4631      	mov	r1, r6
 801f60a:	bf28      	it	cs
 801f60c:	463a      	movcs	r2, r7
 801f60e:	f7fc fc50 	bl	801beb2 <memcpy>
 801f612:	4631      	mov	r1, r6
 801f614:	4640      	mov	r0, r8
 801f616:	f7fd fa57 	bl	801cac8 <_free_r>
 801f61a:	e7e1      	b.n	801f5e0 <_realloc_r+0x1e>
 801f61c:	4635      	mov	r5, r6
 801f61e:	e7df      	b.n	801f5e0 <_realloc_r+0x1e>

0801f620 <_strtoul_l.constprop.0>:
 801f620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f624:	4f36      	ldr	r7, [pc, #216]	; (801f700 <_strtoul_l.constprop.0+0xe0>)
 801f626:	4686      	mov	lr, r0
 801f628:	460d      	mov	r5, r1
 801f62a:	4628      	mov	r0, r5
 801f62c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f630:	5d3e      	ldrb	r6, [r7, r4]
 801f632:	f016 0608 	ands.w	r6, r6, #8
 801f636:	d1f8      	bne.n	801f62a <_strtoul_l.constprop.0+0xa>
 801f638:	2c2d      	cmp	r4, #45	; 0x2d
 801f63a:	d130      	bne.n	801f69e <_strtoul_l.constprop.0+0x7e>
 801f63c:	782c      	ldrb	r4, [r5, #0]
 801f63e:	2601      	movs	r6, #1
 801f640:	1c85      	adds	r5, r0, #2
 801f642:	2b00      	cmp	r3, #0
 801f644:	d057      	beq.n	801f6f6 <_strtoul_l.constprop.0+0xd6>
 801f646:	2b10      	cmp	r3, #16
 801f648:	d109      	bne.n	801f65e <_strtoul_l.constprop.0+0x3e>
 801f64a:	2c30      	cmp	r4, #48	; 0x30
 801f64c:	d107      	bne.n	801f65e <_strtoul_l.constprop.0+0x3e>
 801f64e:	7828      	ldrb	r0, [r5, #0]
 801f650:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801f654:	2858      	cmp	r0, #88	; 0x58
 801f656:	d149      	bne.n	801f6ec <_strtoul_l.constprop.0+0xcc>
 801f658:	786c      	ldrb	r4, [r5, #1]
 801f65a:	2310      	movs	r3, #16
 801f65c:	3502      	adds	r5, #2
 801f65e:	f04f 38ff 	mov.w	r8, #4294967295
 801f662:	2700      	movs	r7, #0
 801f664:	fbb8 f8f3 	udiv	r8, r8, r3
 801f668:	fb03 f908 	mul.w	r9, r3, r8
 801f66c:	ea6f 0909 	mvn.w	r9, r9
 801f670:	4638      	mov	r0, r7
 801f672:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f676:	f1bc 0f09 	cmp.w	ip, #9
 801f67a:	d815      	bhi.n	801f6a8 <_strtoul_l.constprop.0+0x88>
 801f67c:	4664      	mov	r4, ip
 801f67e:	42a3      	cmp	r3, r4
 801f680:	dd23      	ble.n	801f6ca <_strtoul_l.constprop.0+0xaa>
 801f682:	f1b7 3fff 	cmp.w	r7, #4294967295
 801f686:	d007      	beq.n	801f698 <_strtoul_l.constprop.0+0x78>
 801f688:	4580      	cmp	r8, r0
 801f68a:	d31b      	bcc.n	801f6c4 <_strtoul_l.constprop.0+0xa4>
 801f68c:	d101      	bne.n	801f692 <_strtoul_l.constprop.0+0x72>
 801f68e:	45a1      	cmp	r9, r4
 801f690:	db18      	blt.n	801f6c4 <_strtoul_l.constprop.0+0xa4>
 801f692:	fb00 4003 	mla	r0, r0, r3, r4
 801f696:	2701      	movs	r7, #1
 801f698:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f69c:	e7e9      	b.n	801f672 <_strtoul_l.constprop.0+0x52>
 801f69e:	2c2b      	cmp	r4, #43	; 0x2b
 801f6a0:	bf04      	itt	eq
 801f6a2:	782c      	ldrbeq	r4, [r5, #0]
 801f6a4:	1c85      	addeq	r5, r0, #2
 801f6a6:	e7cc      	b.n	801f642 <_strtoul_l.constprop.0+0x22>
 801f6a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801f6ac:	f1bc 0f19 	cmp.w	ip, #25
 801f6b0:	d801      	bhi.n	801f6b6 <_strtoul_l.constprop.0+0x96>
 801f6b2:	3c37      	subs	r4, #55	; 0x37
 801f6b4:	e7e3      	b.n	801f67e <_strtoul_l.constprop.0+0x5e>
 801f6b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801f6ba:	f1bc 0f19 	cmp.w	ip, #25
 801f6be:	d804      	bhi.n	801f6ca <_strtoul_l.constprop.0+0xaa>
 801f6c0:	3c57      	subs	r4, #87	; 0x57
 801f6c2:	e7dc      	b.n	801f67e <_strtoul_l.constprop.0+0x5e>
 801f6c4:	f04f 37ff 	mov.w	r7, #4294967295
 801f6c8:	e7e6      	b.n	801f698 <_strtoul_l.constprop.0+0x78>
 801f6ca:	1c7b      	adds	r3, r7, #1
 801f6cc:	d106      	bne.n	801f6dc <_strtoul_l.constprop.0+0xbc>
 801f6ce:	2322      	movs	r3, #34	; 0x22
 801f6d0:	f8ce 3000 	str.w	r3, [lr]
 801f6d4:	4638      	mov	r0, r7
 801f6d6:	b932      	cbnz	r2, 801f6e6 <_strtoul_l.constprop.0+0xc6>
 801f6d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f6dc:	b106      	cbz	r6, 801f6e0 <_strtoul_l.constprop.0+0xc0>
 801f6de:	4240      	negs	r0, r0
 801f6e0:	2a00      	cmp	r2, #0
 801f6e2:	d0f9      	beq.n	801f6d8 <_strtoul_l.constprop.0+0xb8>
 801f6e4:	b107      	cbz	r7, 801f6e8 <_strtoul_l.constprop.0+0xc8>
 801f6e6:	1e69      	subs	r1, r5, #1
 801f6e8:	6011      	str	r1, [r2, #0]
 801f6ea:	e7f5      	b.n	801f6d8 <_strtoul_l.constprop.0+0xb8>
 801f6ec:	2430      	movs	r4, #48	; 0x30
 801f6ee:	2b00      	cmp	r3, #0
 801f6f0:	d1b5      	bne.n	801f65e <_strtoul_l.constprop.0+0x3e>
 801f6f2:	2308      	movs	r3, #8
 801f6f4:	e7b3      	b.n	801f65e <_strtoul_l.constprop.0+0x3e>
 801f6f6:	2c30      	cmp	r4, #48	; 0x30
 801f6f8:	d0a9      	beq.n	801f64e <_strtoul_l.constprop.0+0x2e>
 801f6fa:	230a      	movs	r3, #10
 801f6fc:	e7af      	b.n	801f65e <_strtoul_l.constprop.0+0x3e>
 801f6fe:	bf00      	nop
 801f700:	080206b9 	.word	0x080206b9

0801f704 <_strtoul_r>:
 801f704:	f7ff bf8c 	b.w	801f620 <_strtoul_l.constprop.0>

0801f708 <__ascii_wctomb>:
 801f708:	b149      	cbz	r1, 801f71e <__ascii_wctomb+0x16>
 801f70a:	2aff      	cmp	r2, #255	; 0xff
 801f70c:	bf85      	ittet	hi
 801f70e:	238a      	movhi	r3, #138	; 0x8a
 801f710:	6003      	strhi	r3, [r0, #0]
 801f712:	700a      	strbls	r2, [r1, #0]
 801f714:	f04f 30ff 	movhi.w	r0, #4294967295
 801f718:	bf98      	it	ls
 801f71a:	2001      	movls	r0, #1
 801f71c:	4770      	bx	lr
 801f71e:	4608      	mov	r0, r1
 801f720:	4770      	bx	lr
	...

0801f724 <fiprintf>:
 801f724:	b40e      	push	{r1, r2, r3}
 801f726:	b503      	push	{r0, r1, lr}
 801f728:	4601      	mov	r1, r0
 801f72a:	ab03      	add	r3, sp, #12
 801f72c:	4805      	ldr	r0, [pc, #20]	; (801f744 <fiprintf+0x20>)
 801f72e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f732:	6800      	ldr	r0, [r0, #0]
 801f734:	9301      	str	r3, [sp, #4]
 801f736:	f000 f83f 	bl	801f7b8 <_vfiprintf_r>
 801f73a:	b002      	add	sp, #8
 801f73c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f740:	b003      	add	sp, #12
 801f742:	4770      	bx	lr
 801f744:	24000158 	.word	0x24000158

0801f748 <abort>:
 801f748:	b508      	push	{r3, lr}
 801f74a:	2006      	movs	r0, #6
 801f74c:	f000 fa0c 	bl	801fb68 <raise>
 801f750:	2001      	movs	r0, #1
 801f752:	f7e4 fb0f 	bl	8003d74 <_exit>

0801f756 <_malloc_usable_size_r>:
 801f756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f75a:	1f18      	subs	r0, r3, #4
 801f75c:	2b00      	cmp	r3, #0
 801f75e:	bfbc      	itt	lt
 801f760:	580b      	ldrlt	r3, [r1, r0]
 801f762:	18c0      	addlt	r0, r0, r3
 801f764:	4770      	bx	lr

0801f766 <__sfputc_r>:
 801f766:	6893      	ldr	r3, [r2, #8]
 801f768:	3b01      	subs	r3, #1
 801f76a:	2b00      	cmp	r3, #0
 801f76c:	b410      	push	{r4}
 801f76e:	6093      	str	r3, [r2, #8]
 801f770:	da08      	bge.n	801f784 <__sfputc_r+0x1e>
 801f772:	6994      	ldr	r4, [r2, #24]
 801f774:	42a3      	cmp	r3, r4
 801f776:	db01      	blt.n	801f77c <__sfputc_r+0x16>
 801f778:	290a      	cmp	r1, #10
 801f77a:	d103      	bne.n	801f784 <__sfputc_r+0x1e>
 801f77c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f780:	f000 b934 	b.w	801f9ec <__swbuf_r>
 801f784:	6813      	ldr	r3, [r2, #0]
 801f786:	1c58      	adds	r0, r3, #1
 801f788:	6010      	str	r0, [r2, #0]
 801f78a:	7019      	strb	r1, [r3, #0]
 801f78c:	4608      	mov	r0, r1
 801f78e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f792:	4770      	bx	lr

0801f794 <__sfputs_r>:
 801f794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f796:	4606      	mov	r6, r0
 801f798:	460f      	mov	r7, r1
 801f79a:	4614      	mov	r4, r2
 801f79c:	18d5      	adds	r5, r2, r3
 801f79e:	42ac      	cmp	r4, r5
 801f7a0:	d101      	bne.n	801f7a6 <__sfputs_r+0x12>
 801f7a2:	2000      	movs	r0, #0
 801f7a4:	e007      	b.n	801f7b6 <__sfputs_r+0x22>
 801f7a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f7aa:	463a      	mov	r2, r7
 801f7ac:	4630      	mov	r0, r6
 801f7ae:	f7ff ffda 	bl	801f766 <__sfputc_r>
 801f7b2:	1c43      	adds	r3, r0, #1
 801f7b4:	d1f3      	bne.n	801f79e <__sfputs_r+0xa>
 801f7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f7b8 <_vfiprintf_r>:
 801f7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7bc:	460d      	mov	r5, r1
 801f7be:	b09d      	sub	sp, #116	; 0x74
 801f7c0:	4614      	mov	r4, r2
 801f7c2:	4698      	mov	r8, r3
 801f7c4:	4606      	mov	r6, r0
 801f7c6:	b118      	cbz	r0, 801f7d0 <_vfiprintf_r+0x18>
 801f7c8:	6a03      	ldr	r3, [r0, #32]
 801f7ca:	b90b      	cbnz	r3, 801f7d0 <_vfiprintf_r+0x18>
 801f7cc:	f7fc fa22 	bl	801bc14 <__sinit>
 801f7d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f7d2:	07d9      	lsls	r1, r3, #31
 801f7d4:	d405      	bmi.n	801f7e2 <_vfiprintf_r+0x2a>
 801f7d6:	89ab      	ldrh	r3, [r5, #12]
 801f7d8:	059a      	lsls	r2, r3, #22
 801f7da:	d402      	bmi.n	801f7e2 <_vfiprintf_r+0x2a>
 801f7dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f7de:	f7fc fb5e 	bl	801be9e <__retarget_lock_acquire_recursive>
 801f7e2:	89ab      	ldrh	r3, [r5, #12]
 801f7e4:	071b      	lsls	r3, r3, #28
 801f7e6:	d501      	bpl.n	801f7ec <_vfiprintf_r+0x34>
 801f7e8:	692b      	ldr	r3, [r5, #16]
 801f7ea:	b99b      	cbnz	r3, 801f814 <_vfiprintf_r+0x5c>
 801f7ec:	4629      	mov	r1, r5
 801f7ee:	4630      	mov	r0, r6
 801f7f0:	f000 f93a 	bl	801fa68 <__swsetup_r>
 801f7f4:	b170      	cbz	r0, 801f814 <_vfiprintf_r+0x5c>
 801f7f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f7f8:	07dc      	lsls	r4, r3, #31
 801f7fa:	d504      	bpl.n	801f806 <_vfiprintf_r+0x4e>
 801f7fc:	f04f 30ff 	mov.w	r0, #4294967295
 801f800:	b01d      	add	sp, #116	; 0x74
 801f802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f806:	89ab      	ldrh	r3, [r5, #12]
 801f808:	0598      	lsls	r0, r3, #22
 801f80a:	d4f7      	bmi.n	801f7fc <_vfiprintf_r+0x44>
 801f80c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f80e:	f7fc fb47 	bl	801bea0 <__retarget_lock_release_recursive>
 801f812:	e7f3      	b.n	801f7fc <_vfiprintf_r+0x44>
 801f814:	2300      	movs	r3, #0
 801f816:	9309      	str	r3, [sp, #36]	; 0x24
 801f818:	2320      	movs	r3, #32
 801f81a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f81e:	f8cd 800c 	str.w	r8, [sp, #12]
 801f822:	2330      	movs	r3, #48	; 0x30
 801f824:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801f9d8 <_vfiprintf_r+0x220>
 801f828:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f82c:	f04f 0901 	mov.w	r9, #1
 801f830:	4623      	mov	r3, r4
 801f832:	469a      	mov	sl, r3
 801f834:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f838:	b10a      	cbz	r2, 801f83e <_vfiprintf_r+0x86>
 801f83a:	2a25      	cmp	r2, #37	; 0x25
 801f83c:	d1f9      	bne.n	801f832 <_vfiprintf_r+0x7a>
 801f83e:	ebba 0b04 	subs.w	fp, sl, r4
 801f842:	d00b      	beq.n	801f85c <_vfiprintf_r+0xa4>
 801f844:	465b      	mov	r3, fp
 801f846:	4622      	mov	r2, r4
 801f848:	4629      	mov	r1, r5
 801f84a:	4630      	mov	r0, r6
 801f84c:	f7ff ffa2 	bl	801f794 <__sfputs_r>
 801f850:	3001      	adds	r0, #1
 801f852:	f000 80a9 	beq.w	801f9a8 <_vfiprintf_r+0x1f0>
 801f856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f858:	445a      	add	r2, fp
 801f85a:	9209      	str	r2, [sp, #36]	; 0x24
 801f85c:	f89a 3000 	ldrb.w	r3, [sl]
 801f860:	2b00      	cmp	r3, #0
 801f862:	f000 80a1 	beq.w	801f9a8 <_vfiprintf_r+0x1f0>
 801f866:	2300      	movs	r3, #0
 801f868:	f04f 32ff 	mov.w	r2, #4294967295
 801f86c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f870:	f10a 0a01 	add.w	sl, sl, #1
 801f874:	9304      	str	r3, [sp, #16]
 801f876:	9307      	str	r3, [sp, #28]
 801f878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f87c:	931a      	str	r3, [sp, #104]	; 0x68
 801f87e:	4654      	mov	r4, sl
 801f880:	2205      	movs	r2, #5
 801f882:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f886:	4854      	ldr	r0, [pc, #336]	; (801f9d8 <_vfiprintf_r+0x220>)
 801f888:	f7e0 fd52 	bl	8000330 <memchr>
 801f88c:	9a04      	ldr	r2, [sp, #16]
 801f88e:	b9d8      	cbnz	r0, 801f8c8 <_vfiprintf_r+0x110>
 801f890:	06d1      	lsls	r1, r2, #27
 801f892:	bf44      	itt	mi
 801f894:	2320      	movmi	r3, #32
 801f896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f89a:	0713      	lsls	r3, r2, #28
 801f89c:	bf44      	itt	mi
 801f89e:	232b      	movmi	r3, #43	; 0x2b
 801f8a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f8a4:	f89a 3000 	ldrb.w	r3, [sl]
 801f8a8:	2b2a      	cmp	r3, #42	; 0x2a
 801f8aa:	d015      	beq.n	801f8d8 <_vfiprintf_r+0x120>
 801f8ac:	9a07      	ldr	r2, [sp, #28]
 801f8ae:	4654      	mov	r4, sl
 801f8b0:	2000      	movs	r0, #0
 801f8b2:	f04f 0c0a 	mov.w	ip, #10
 801f8b6:	4621      	mov	r1, r4
 801f8b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f8bc:	3b30      	subs	r3, #48	; 0x30
 801f8be:	2b09      	cmp	r3, #9
 801f8c0:	d94d      	bls.n	801f95e <_vfiprintf_r+0x1a6>
 801f8c2:	b1b0      	cbz	r0, 801f8f2 <_vfiprintf_r+0x13a>
 801f8c4:	9207      	str	r2, [sp, #28]
 801f8c6:	e014      	b.n	801f8f2 <_vfiprintf_r+0x13a>
 801f8c8:	eba0 0308 	sub.w	r3, r0, r8
 801f8cc:	fa09 f303 	lsl.w	r3, r9, r3
 801f8d0:	4313      	orrs	r3, r2
 801f8d2:	9304      	str	r3, [sp, #16]
 801f8d4:	46a2      	mov	sl, r4
 801f8d6:	e7d2      	b.n	801f87e <_vfiprintf_r+0xc6>
 801f8d8:	9b03      	ldr	r3, [sp, #12]
 801f8da:	1d19      	adds	r1, r3, #4
 801f8dc:	681b      	ldr	r3, [r3, #0]
 801f8de:	9103      	str	r1, [sp, #12]
 801f8e0:	2b00      	cmp	r3, #0
 801f8e2:	bfbb      	ittet	lt
 801f8e4:	425b      	neglt	r3, r3
 801f8e6:	f042 0202 	orrlt.w	r2, r2, #2
 801f8ea:	9307      	strge	r3, [sp, #28]
 801f8ec:	9307      	strlt	r3, [sp, #28]
 801f8ee:	bfb8      	it	lt
 801f8f0:	9204      	strlt	r2, [sp, #16]
 801f8f2:	7823      	ldrb	r3, [r4, #0]
 801f8f4:	2b2e      	cmp	r3, #46	; 0x2e
 801f8f6:	d10c      	bne.n	801f912 <_vfiprintf_r+0x15a>
 801f8f8:	7863      	ldrb	r3, [r4, #1]
 801f8fa:	2b2a      	cmp	r3, #42	; 0x2a
 801f8fc:	d134      	bne.n	801f968 <_vfiprintf_r+0x1b0>
 801f8fe:	9b03      	ldr	r3, [sp, #12]
 801f900:	1d1a      	adds	r2, r3, #4
 801f902:	681b      	ldr	r3, [r3, #0]
 801f904:	9203      	str	r2, [sp, #12]
 801f906:	2b00      	cmp	r3, #0
 801f908:	bfb8      	it	lt
 801f90a:	f04f 33ff 	movlt.w	r3, #4294967295
 801f90e:	3402      	adds	r4, #2
 801f910:	9305      	str	r3, [sp, #20]
 801f912:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801f9e8 <_vfiprintf_r+0x230>
 801f916:	7821      	ldrb	r1, [r4, #0]
 801f918:	2203      	movs	r2, #3
 801f91a:	4650      	mov	r0, sl
 801f91c:	f7e0 fd08 	bl	8000330 <memchr>
 801f920:	b138      	cbz	r0, 801f932 <_vfiprintf_r+0x17a>
 801f922:	9b04      	ldr	r3, [sp, #16]
 801f924:	eba0 000a 	sub.w	r0, r0, sl
 801f928:	2240      	movs	r2, #64	; 0x40
 801f92a:	4082      	lsls	r2, r0
 801f92c:	4313      	orrs	r3, r2
 801f92e:	3401      	adds	r4, #1
 801f930:	9304      	str	r3, [sp, #16]
 801f932:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f936:	4829      	ldr	r0, [pc, #164]	; (801f9dc <_vfiprintf_r+0x224>)
 801f938:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f93c:	2206      	movs	r2, #6
 801f93e:	f7e0 fcf7 	bl	8000330 <memchr>
 801f942:	2800      	cmp	r0, #0
 801f944:	d03f      	beq.n	801f9c6 <_vfiprintf_r+0x20e>
 801f946:	4b26      	ldr	r3, [pc, #152]	; (801f9e0 <_vfiprintf_r+0x228>)
 801f948:	bb1b      	cbnz	r3, 801f992 <_vfiprintf_r+0x1da>
 801f94a:	9b03      	ldr	r3, [sp, #12]
 801f94c:	3307      	adds	r3, #7
 801f94e:	f023 0307 	bic.w	r3, r3, #7
 801f952:	3308      	adds	r3, #8
 801f954:	9303      	str	r3, [sp, #12]
 801f956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f958:	443b      	add	r3, r7
 801f95a:	9309      	str	r3, [sp, #36]	; 0x24
 801f95c:	e768      	b.n	801f830 <_vfiprintf_r+0x78>
 801f95e:	fb0c 3202 	mla	r2, ip, r2, r3
 801f962:	460c      	mov	r4, r1
 801f964:	2001      	movs	r0, #1
 801f966:	e7a6      	b.n	801f8b6 <_vfiprintf_r+0xfe>
 801f968:	2300      	movs	r3, #0
 801f96a:	3401      	adds	r4, #1
 801f96c:	9305      	str	r3, [sp, #20]
 801f96e:	4619      	mov	r1, r3
 801f970:	f04f 0c0a 	mov.w	ip, #10
 801f974:	4620      	mov	r0, r4
 801f976:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f97a:	3a30      	subs	r2, #48	; 0x30
 801f97c:	2a09      	cmp	r2, #9
 801f97e:	d903      	bls.n	801f988 <_vfiprintf_r+0x1d0>
 801f980:	2b00      	cmp	r3, #0
 801f982:	d0c6      	beq.n	801f912 <_vfiprintf_r+0x15a>
 801f984:	9105      	str	r1, [sp, #20]
 801f986:	e7c4      	b.n	801f912 <_vfiprintf_r+0x15a>
 801f988:	fb0c 2101 	mla	r1, ip, r1, r2
 801f98c:	4604      	mov	r4, r0
 801f98e:	2301      	movs	r3, #1
 801f990:	e7f0      	b.n	801f974 <_vfiprintf_r+0x1bc>
 801f992:	ab03      	add	r3, sp, #12
 801f994:	9300      	str	r3, [sp, #0]
 801f996:	462a      	mov	r2, r5
 801f998:	4b12      	ldr	r3, [pc, #72]	; (801f9e4 <_vfiprintf_r+0x22c>)
 801f99a:	a904      	add	r1, sp, #16
 801f99c:	4630      	mov	r0, r6
 801f99e:	f7fb faff 	bl	801afa0 <_printf_float>
 801f9a2:	4607      	mov	r7, r0
 801f9a4:	1c78      	adds	r0, r7, #1
 801f9a6:	d1d6      	bne.n	801f956 <_vfiprintf_r+0x19e>
 801f9a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f9aa:	07d9      	lsls	r1, r3, #31
 801f9ac:	d405      	bmi.n	801f9ba <_vfiprintf_r+0x202>
 801f9ae:	89ab      	ldrh	r3, [r5, #12]
 801f9b0:	059a      	lsls	r2, r3, #22
 801f9b2:	d402      	bmi.n	801f9ba <_vfiprintf_r+0x202>
 801f9b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f9b6:	f7fc fa73 	bl	801bea0 <__retarget_lock_release_recursive>
 801f9ba:	89ab      	ldrh	r3, [r5, #12]
 801f9bc:	065b      	lsls	r3, r3, #25
 801f9be:	f53f af1d 	bmi.w	801f7fc <_vfiprintf_r+0x44>
 801f9c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f9c4:	e71c      	b.n	801f800 <_vfiprintf_r+0x48>
 801f9c6:	ab03      	add	r3, sp, #12
 801f9c8:	9300      	str	r3, [sp, #0]
 801f9ca:	462a      	mov	r2, r5
 801f9cc:	4b05      	ldr	r3, [pc, #20]	; (801f9e4 <_vfiprintf_r+0x22c>)
 801f9ce:	a904      	add	r1, sp, #16
 801f9d0:	4630      	mov	r0, r6
 801f9d2:	f7fb fd6d 	bl	801b4b0 <_printf_i>
 801f9d6:	e7e4      	b.n	801f9a2 <_vfiprintf_r+0x1ea>
 801f9d8:	080207b9 	.word	0x080207b9
 801f9dc:	080207c3 	.word	0x080207c3
 801f9e0:	0801afa1 	.word	0x0801afa1
 801f9e4:	0801f795 	.word	0x0801f795
 801f9e8:	080207bf 	.word	0x080207bf

0801f9ec <__swbuf_r>:
 801f9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f9ee:	460e      	mov	r6, r1
 801f9f0:	4614      	mov	r4, r2
 801f9f2:	4605      	mov	r5, r0
 801f9f4:	b118      	cbz	r0, 801f9fe <__swbuf_r+0x12>
 801f9f6:	6a03      	ldr	r3, [r0, #32]
 801f9f8:	b90b      	cbnz	r3, 801f9fe <__swbuf_r+0x12>
 801f9fa:	f7fc f90b 	bl	801bc14 <__sinit>
 801f9fe:	69a3      	ldr	r3, [r4, #24]
 801fa00:	60a3      	str	r3, [r4, #8]
 801fa02:	89a3      	ldrh	r3, [r4, #12]
 801fa04:	071a      	lsls	r2, r3, #28
 801fa06:	d525      	bpl.n	801fa54 <__swbuf_r+0x68>
 801fa08:	6923      	ldr	r3, [r4, #16]
 801fa0a:	b31b      	cbz	r3, 801fa54 <__swbuf_r+0x68>
 801fa0c:	6823      	ldr	r3, [r4, #0]
 801fa0e:	6922      	ldr	r2, [r4, #16]
 801fa10:	1a98      	subs	r0, r3, r2
 801fa12:	6963      	ldr	r3, [r4, #20]
 801fa14:	b2f6      	uxtb	r6, r6
 801fa16:	4283      	cmp	r3, r0
 801fa18:	4637      	mov	r7, r6
 801fa1a:	dc04      	bgt.n	801fa26 <__swbuf_r+0x3a>
 801fa1c:	4621      	mov	r1, r4
 801fa1e:	4628      	mov	r0, r5
 801fa20:	f7ff f950 	bl	801ecc4 <_fflush_r>
 801fa24:	b9e0      	cbnz	r0, 801fa60 <__swbuf_r+0x74>
 801fa26:	68a3      	ldr	r3, [r4, #8]
 801fa28:	3b01      	subs	r3, #1
 801fa2a:	60a3      	str	r3, [r4, #8]
 801fa2c:	6823      	ldr	r3, [r4, #0]
 801fa2e:	1c5a      	adds	r2, r3, #1
 801fa30:	6022      	str	r2, [r4, #0]
 801fa32:	701e      	strb	r6, [r3, #0]
 801fa34:	6962      	ldr	r2, [r4, #20]
 801fa36:	1c43      	adds	r3, r0, #1
 801fa38:	429a      	cmp	r2, r3
 801fa3a:	d004      	beq.n	801fa46 <__swbuf_r+0x5a>
 801fa3c:	89a3      	ldrh	r3, [r4, #12]
 801fa3e:	07db      	lsls	r3, r3, #31
 801fa40:	d506      	bpl.n	801fa50 <__swbuf_r+0x64>
 801fa42:	2e0a      	cmp	r6, #10
 801fa44:	d104      	bne.n	801fa50 <__swbuf_r+0x64>
 801fa46:	4621      	mov	r1, r4
 801fa48:	4628      	mov	r0, r5
 801fa4a:	f7ff f93b 	bl	801ecc4 <_fflush_r>
 801fa4e:	b938      	cbnz	r0, 801fa60 <__swbuf_r+0x74>
 801fa50:	4638      	mov	r0, r7
 801fa52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa54:	4621      	mov	r1, r4
 801fa56:	4628      	mov	r0, r5
 801fa58:	f000 f806 	bl	801fa68 <__swsetup_r>
 801fa5c:	2800      	cmp	r0, #0
 801fa5e:	d0d5      	beq.n	801fa0c <__swbuf_r+0x20>
 801fa60:	f04f 37ff 	mov.w	r7, #4294967295
 801fa64:	e7f4      	b.n	801fa50 <__swbuf_r+0x64>
	...

0801fa68 <__swsetup_r>:
 801fa68:	b538      	push	{r3, r4, r5, lr}
 801fa6a:	4b2a      	ldr	r3, [pc, #168]	; (801fb14 <__swsetup_r+0xac>)
 801fa6c:	4605      	mov	r5, r0
 801fa6e:	6818      	ldr	r0, [r3, #0]
 801fa70:	460c      	mov	r4, r1
 801fa72:	b118      	cbz	r0, 801fa7c <__swsetup_r+0x14>
 801fa74:	6a03      	ldr	r3, [r0, #32]
 801fa76:	b90b      	cbnz	r3, 801fa7c <__swsetup_r+0x14>
 801fa78:	f7fc f8cc 	bl	801bc14 <__sinit>
 801fa7c:	89a3      	ldrh	r3, [r4, #12]
 801fa7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fa82:	0718      	lsls	r0, r3, #28
 801fa84:	d422      	bmi.n	801facc <__swsetup_r+0x64>
 801fa86:	06d9      	lsls	r1, r3, #27
 801fa88:	d407      	bmi.n	801fa9a <__swsetup_r+0x32>
 801fa8a:	2309      	movs	r3, #9
 801fa8c:	602b      	str	r3, [r5, #0]
 801fa8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fa92:	81a3      	strh	r3, [r4, #12]
 801fa94:	f04f 30ff 	mov.w	r0, #4294967295
 801fa98:	e034      	b.n	801fb04 <__swsetup_r+0x9c>
 801fa9a:	0758      	lsls	r0, r3, #29
 801fa9c:	d512      	bpl.n	801fac4 <__swsetup_r+0x5c>
 801fa9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801faa0:	b141      	cbz	r1, 801fab4 <__swsetup_r+0x4c>
 801faa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801faa6:	4299      	cmp	r1, r3
 801faa8:	d002      	beq.n	801fab0 <__swsetup_r+0x48>
 801faaa:	4628      	mov	r0, r5
 801faac:	f7fd f80c 	bl	801cac8 <_free_r>
 801fab0:	2300      	movs	r3, #0
 801fab2:	6363      	str	r3, [r4, #52]	; 0x34
 801fab4:	89a3      	ldrh	r3, [r4, #12]
 801fab6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801faba:	81a3      	strh	r3, [r4, #12]
 801fabc:	2300      	movs	r3, #0
 801fabe:	6063      	str	r3, [r4, #4]
 801fac0:	6923      	ldr	r3, [r4, #16]
 801fac2:	6023      	str	r3, [r4, #0]
 801fac4:	89a3      	ldrh	r3, [r4, #12]
 801fac6:	f043 0308 	orr.w	r3, r3, #8
 801faca:	81a3      	strh	r3, [r4, #12]
 801facc:	6923      	ldr	r3, [r4, #16]
 801face:	b94b      	cbnz	r3, 801fae4 <__swsetup_r+0x7c>
 801fad0:	89a3      	ldrh	r3, [r4, #12]
 801fad2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fada:	d003      	beq.n	801fae4 <__swsetup_r+0x7c>
 801fadc:	4621      	mov	r1, r4
 801fade:	4628      	mov	r0, r5
 801fae0:	f000 f884 	bl	801fbec <__smakebuf_r>
 801fae4:	89a0      	ldrh	r0, [r4, #12]
 801fae6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801faea:	f010 0301 	ands.w	r3, r0, #1
 801faee:	d00a      	beq.n	801fb06 <__swsetup_r+0x9e>
 801faf0:	2300      	movs	r3, #0
 801faf2:	60a3      	str	r3, [r4, #8]
 801faf4:	6963      	ldr	r3, [r4, #20]
 801faf6:	425b      	negs	r3, r3
 801faf8:	61a3      	str	r3, [r4, #24]
 801fafa:	6923      	ldr	r3, [r4, #16]
 801fafc:	b943      	cbnz	r3, 801fb10 <__swsetup_r+0xa8>
 801fafe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fb02:	d1c4      	bne.n	801fa8e <__swsetup_r+0x26>
 801fb04:	bd38      	pop	{r3, r4, r5, pc}
 801fb06:	0781      	lsls	r1, r0, #30
 801fb08:	bf58      	it	pl
 801fb0a:	6963      	ldrpl	r3, [r4, #20]
 801fb0c:	60a3      	str	r3, [r4, #8]
 801fb0e:	e7f4      	b.n	801fafa <__swsetup_r+0x92>
 801fb10:	2000      	movs	r0, #0
 801fb12:	e7f7      	b.n	801fb04 <__swsetup_r+0x9c>
 801fb14:	24000158 	.word	0x24000158

0801fb18 <_raise_r>:
 801fb18:	291f      	cmp	r1, #31
 801fb1a:	b538      	push	{r3, r4, r5, lr}
 801fb1c:	4604      	mov	r4, r0
 801fb1e:	460d      	mov	r5, r1
 801fb20:	d904      	bls.n	801fb2c <_raise_r+0x14>
 801fb22:	2316      	movs	r3, #22
 801fb24:	6003      	str	r3, [r0, #0]
 801fb26:	f04f 30ff 	mov.w	r0, #4294967295
 801fb2a:	bd38      	pop	{r3, r4, r5, pc}
 801fb2c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801fb2e:	b112      	cbz	r2, 801fb36 <_raise_r+0x1e>
 801fb30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fb34:	b94b      	cbnz	r3, 801fb4a <_raise_r+0x32>
 801fb36:	4620      	mov	r0, r4
 801fb38:	f000 f830 	bl	801fb9c <_getpid_r>
 801fb3c:	462a      	mov	r2, r5
 801fb3e:	4601      	mov	r1, r0
 801fb40:	4620      	mov	r0, r4
 801fb42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fb46:	f000 b817 	b.w	801fb78 <_kill_r>
 801fb4a:	2b01      	cmp	r3, #1
 801fb4c:	d00a      	beq.n	801fb64 <_raise_r+0x4c>
 801fb4e:	1c59      	adds	r1, r3, #1
 801fb50:	d103      	bne.n	801fb5a <_raise_r+0x42>
 801fb52:	2316      	movs	r3, #22
 801fb54:	6003      	str	r3, [r0, #0]
 801fb56:	2001      	movs	r0, #1
 801fb58:	e7e7      	b.n	801fb2a <_raise_r+0x12>
 801fb5a:	2400      	movs	r4, #0
 801fb5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fb60:	4628      	mov	r0, r5
 801fb62:	4798      	blx	r3
 801fb64:	2000      	movs	r0, #0
 801fb66:	e7e0      	b.n	801fb2a <_raise_r+0x12>

0801fb68 <raise>:
 801fb68:	4b02      	ldr	r3, [pc, #8]	; (801fb74 <raise+0xc>)
 801fb6a:	4601      	mov	r1, r0
 801fb6c:	6818      	ldr	r0, [r3, #0]
 801fb6e:	f7ff bfd3 	b.w	801fb18 <_raise_r>
 801fb72:	bf00      	nop
 801fb74:	24000158 	.word	0x24000158

0801fb78 <_kill_r>:
 801fb78:	b538      	push	{r3, r4, r5, lr}
 801fb7a:	4d07      	ldr	r5, [pc, #28]	; (801fb98 <_kill_r+0x20>)
 801fb7c:	2300      	movs	r3, #0
 801fb7e:	4604      	mov	r4, r0
 801fb80:	4608      	mov	r0, r1
 801fb82:	4611      	mov	r1, r2
 801fb84:	602b      	str	r3, [r5, #0]
 801fb86:	f7e4 f8e5 	bl	8003d54 <_kill>
 801fb8a:	1c43      	adds	r3, r0, #1
 801fb8c:	d102      	bne.n	801fb94 <_kill_r+0x1c>
 801fb8e:	682b      	ldr	r3, [r5, #0]
 801fb90:	b103      	cbz	r3, 801fb94 <_kill_r+0x1c>
 801fb92:	6023      	str	r3, [r4, #0]
 801fb94:	bd38      	pop	{r3, r4, r5, pc}
 801fb96:	bf00      	nop
 801fb98:	24003620 	.word	0x24003620

0801fb9c <_getpid_r>:
 801fb9c:	f7e4 b8d2 	b.w	8003d44 <_getpid>

0801fba0 <__swhatbuf_r>:
 801fba0:	b570      	push	{r4, r5, r6, lr}
 801fba2:	460c      	mov	r4, r1
 801fba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fba8:	2900      	cmp	r1, #0
 801fbaa:	b096      	sub	sp, #88	; 0x58
 801fbac:	4615      	mov	r5, r2
 801fbae:	461e      	mov	r6, r3
 801fbb0:	da0d      	bge.n	801fbce <__swhatbuf_r+0x2e>
 801fbb2:	89a3      	ldrh	r3, [r4, #12]
 801fbb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 801fbb8:	f04f 0100 	mov.w	r1, #0
 801fbbc:	bf0c      	ite	eq
 801fbbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801fbc2:	2340      	movne	r3, #64	; 0x40
 801fbc4:	2000      	movs	r0, #0
 801fbc6:	6031      	str	r1, [r6, #0]
 801fbc8:	602b      	str	r3, [r5, #0]
 801fbca:	b016      	add	sp, #88	; 0x58
 801fbcc:	bd70      	pop	{r4, r5, r6, pc}
 801fbce:	466a      	mov	r2, sp
 801fbd0:	f000 f848 	bl	801fc64 <_fstat_r>
 801fbd4:	2800      	cmp	r0, #0
 801fbd6:	dbec      	blt.n	801fbb2 <__swhatbuf_r+0x12>
 801fbd8:	9901      	ldr	r1, [sp, #4]
 801fbda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801fbde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801fbe2:	4259      	negs	r1, r3
 801fbe4:	4159      	adcs	r1, r3
 801fbe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fbea:	e7eb      	b.n	801fbc4 <__swhatbuf_r+0x24>

0801fbec <__smakebuf_r>:
 801fbec:	898b      	ldrh	r3, [r1, #12]
 801fbee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fbf0:	079d      	lsls	r5, r3, #30
 801fbf2:	4606      	mov	r6, r0
 801fbf4:	460c      	mov	r4, r1
 801fbf6:	d507      	bpl.n	801fc08 <__smakebuf_r+0x1c>
 801fbf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fbfc:	6023      	str	r3, [r4, #0]
 801fbfe:	6123      	str	r3, [r4, #16]
 801fc00:	2301      	movs	r3, #1
 801fc02:	6163      	str	r3, [r4, #20]
 801fc04:	b002      	add	sp, #8
 801fc06:	bd70      	pop	{r4, r5, r6, pc}
 801fc08:	ab01      	add	r3, sp, #4
 801fc0a:	466a      	mov	r2, sp
 801fc0c:	f7ff ffc8 	bl	801fba0 <__swhatbuf_r>
 801fc10:	9900      	ldr	r1, [sp, #0]
 801fc12:	4605      	mov	r5, r0
 801fc14:	4630      	mov	r0, r6
 801fc16:	f7fc ffcb 	bl	801cbb0 <_malloc_r>
 801fc1a:	b948      	cbnz	r0, 801fc30 <__smakebuf_r+0x44>
 801fc1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fc20:	059a      	lsls	r2, r3, #22
 801fc22:	d4ef      	bmi.n	801fc04 <__smakebuf_r+0x18>
 801fc24:	f023 0303 	bic.w	r3, r3, #3
 801fc28:	f043 0302 	orr.w	r3, r3, #2
 801fc2c:	81a3      	strh	r3, [r4, #12]
 801fc2e:	e7e3      	b.n	801fbf8 <__smakebuf_r+0xc>
 801fc30:	89a3      	ldrh	r3, [r4, #12]
 801fc32:	6020      	str	r0, [r4, #0]
 801fc34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fc38:	81a3      	strh	r3, [r4, #12]
 801fc3a:	9b00      	ldr	r3, [sp, #0]
 801fc3c:	6163      	str	r3, [r4, #20]
 801fc3e:	9b01      	ldr	r3, [sp, #4]
 801fc40:	6120      	str	r0, [r4, #16]
 801fc42:	b15b      	cbz	r3, 801fc5c <__smakebuf_r+0x70>
 801fc44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fc48:	4630      	mov	r0, r6
 801fc4a:	f000 f81d 	bl	801fc88 <_isatty_r>
 801fc4e:	b128      	cbz	r0, 801fc5c <__smakebuf_r+0x70>
 801fc50:	89a3      	ldrh	r3, [r4, #12]
 801fc52:	f023 0303 	bic.w	r3, r3, #3
 801fc56:	f043 0301 	orr.w	r3, r3, #1
 801fc5a:	81a3      	strh	r3, [r4, #12]
 801fc5c:	89a3      	ldrh	r3, [r4, #12]
 801fc5e:	431d      	orrs	r5, r3
 801fc60:	81a5      	strh	r5, [r4, #12]
 801fc62:	e7cf      	b.n	801fc04 <__smakebuf_r+0x18>

0801fc64 <_fstat_r>:
 801fc64:	b538      	push	{r3, r4, r5, lr}
 801fc66:	4d07      	ldr	r5, [pc, #28]	; (801fc84 <_fstat_r+0x20>)
 801fc68:	2300      	movs	r3, #0
 801fc6a:	4604      	mov	r4, r0
 801fc6c:	4608      	mov	r0, r1
 801fc6e:	4611      	mov	r1, r2
 801fc70:	602b      	str	r3, [r5, #0]
 801fc72:	f7e4 f8ce 	bl	8003e12 <_fstat>
 801fc76:	1c43      	adds	r3, r0, #1
 801fc78:	d102      	bne.n	801fc80 <_fstat_r+0x1c>
 801fc7a:	682b      	ldr	r3, [r5, #0]
 801fc7c:	b103      	cbz	r3, 801fc80 <_fstat_r+0x1c>
 801fc7e:	6023      	str	r3, [r4, #0]
 801fc80:	bd38      	pop	{r3, r4, r5, pc}
 801fc82:	bf00      	nop
 801fc84:	24003620 	.word	0x24003620

0801fc88 <_isatty_r>:
 801fc88:	b538      	push	{r3, r4, r5, lr}
 801fc8a:	4d06      	ldr	r5, [pc, #24]	; (801fca4 <_isatty_r+0x1c>)
 801fc8c:	2300      	movs	r3, #0
 801fc8e:	4604      	mov	r4, r0
 801fc90:	4608      	mov	r0, r1
 801fc92:	602b      	str	r3, [r5, #0]
 801fc94:	f7e4 f8cd 	bl	8003e32 <_isatty>
 801fc98:	1c43      	adds	r3, r0, #1
 801fc9a:	d102      	bne.n	801fca2 <_isatty_r+0x1a>
 801fc9c:	682b      	ldr	r3, [r5, #0]
 801fc9e:	b103      	cbz	r3, 801fca2 <_isatty_r+0x1a>
 801fca0:	6023      	str	r3, [r4, #0]
 801fca2:	bd38      	pop	{r3, r4, r5, pc}
 801fca4:	24003620 	.word	0x24003620

0801fca8 <_init>:
 801fca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcaa:	bf00      	nop
 801fcac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fcae:	bc08      	pop	{r3}
 801fcb0:	469e      	mov	lr, r3
 801fcb2:	4770      	bx	lr

0801fcb4 <_fini>:
 801fcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcb6:	bf00      	nop
 801fcb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fcba:	bc08      	pop	{r3}
 801fcbc:	469e      	mov	lr, r3
 801fcbe:	4770      	bx	lr
